ProteanCode commented 27 days ago â€¢
edited
Description of the issue
Using the docker-compose -f api1/docker-compose.yml -f api2/docker-compose.yml up do not work with multiple .env files that are placed within subproject directories.
Context information (for bug reports)
Output of docker-compose version
docker-compose version 1.24.0, build 0aa59064
docker-py version: 3.7.2
CPython version: 3.6.8
OpenSSL version: OpenSSL 1.1.0j  20 Nov 2018
Output of docker version
Client: Docker Engine - Community
 Version:           19.03.5
 API version:       1.40
 Go version:        go1.12.12
 Git commit:        633a0ea838
 Built:             Wed Nov 13 07:29:52 2019
 OS/Arch:           linux/amd64
 Experimental:      false

Server: Docker Engine - Community
 Engine:
  Version:          19.03.5
  API version:      1.40 (minimum version 1.12)
  Go version:       go1.12.12
  Git commit:       633a0ea838
  Built:            Wed Nov 13 07:28:22 2019
  OS/Arch:          linux/amd64
  Experimental:     false
 containerd:
  Version:          1.2.10
  GitCommit:        b34a5c8af56e510852c35414db4c1f4fa6172339
 runc:
  Version:          1.0.0-rc8+dev
  GitCommit:        3e425f80a8c931f88e6d94a8c831b9d5aa481657
 docker-init:
  Version:          0.18.0
  GitCommit:        fec3683
Steps to reproduce the issue
Create any two docker-compose projects that uses the .env file, ie. api1 and api2
Try to build them using docker-compose -f api1/docker-compose.yml -f api2/docker-compose.yml up
Observed result
Empty values as the .env file was not loaded from project directories but from currently opened directory in console
Expected result
.env files should be loaded from project directories
Workaround
RIght now there is nothing left but creating a global docker network that will wrap all subprojects. This kills the docker-compose purpose