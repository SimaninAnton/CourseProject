querry43 commented on 25 Jan 2019
Description of the issue
docker-compose build --pull always builds, does not pull a remote version or use the local version.
Context information (for bug reports)
Output of docker-compose version
docker-compose version 1.22.0, build f46880f
Output of docker version
Client:
 Version:           18.06.1-ce
 API version:       1.38
 Go version:        go1.10.3
 Git commit:        e68fc7a
 Built:             Tue Aug 21 17:21:31 2018
 OS/Arch:           darwin/amd64
 Experimental:      false

Server:
 Engine:
  Version:          18.06.1-ce
  API version:      1.38 (minimum version 1.12)
  Go version:       go1.10.3
  Git commit:       e68fc7a
  Built:            Tue Aug 21 17:29:02 2018
  OS/Arch:          linux/amd64
  Experimental:     true
Output of docker-compose config
(Make sure to add the relevant -f and other flags)
harrinm@C02T81ZHH03Q:~/instructables/repo/elasticsearch-proxy$ docker-compose -f docker-compose.yml -f docker-compose.ci.yml config
WARNING: The CIRCLE_SHA1 variable is not set. Defaulting to a blank string.
services:
  elasticsearch-proxy:
    build:
      context: /Users/harrinm/instructables/repo/elasticsearch-proxy
    environment:
      ADMIN_PASSWORD: password
      ADMIN_USER: admin
      RESOLVER_IP: 8.8.8.8
      SERVICE_URL: http://example.com
    image: '510195617121.dkr.ecr.us-west-2.amazonaws.com/ibles-es-proxy:'
    ports:
    - 443:443/tcp
  elasticsearch-proxy-test:
    build:
      context: /Users/harrinm/instructables/repo/elasticsearch-proxy
      dockerfile: Dockerfile.test
version: '3.0'
Steps to reproduce the issue
CIRCLE_SHA1=123 docker-compose -f docker-compose.yml -f docker-compose.ci.yml build
CIRCLE_SHA1=123 docker-compose -f docker-compose.yml -f docker-compose.ci.yml push
CIRCLE_SHA1=123 docker-compose -f docker-compose.yml -f docker-compose.ci.yml build --pull
Observed result
Step 3 always build the container, even when it is both clearly local and remote.
Expected result
Step 3 should either be a no-op or it should pull the container without building.
Stacktrace / full error message
harrinm@C02T81ZHH03Q:~/instructables/repo/elasticsearch-proxy$ CIRCLE_SHA1=123 docker-compose -f docker-compose.yml -f docker-compose.ci.yml build
Building elasticsearch-proxy
Step 1/9 : FROM nginx:1.15-alpine
 ---> 315798907716
Step 2/9 : RUN apk update
 ---> Using cache
 ---> 14d5892facc6
Step 3/9 : RUN apk add apache2-utils openssl
 ---> Using cache
 ---> afed17a45574
Step 4/9 : RUN openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -subj "/C=US" -keyout /etc/ssl/private/kibana.key -out /etc/ssl/certs/kibana.crt
 ---> Using cache
 ---> 332a3a5a2239
Step 5/9 : RUN rm /etc/nginx/conf.d/default.conf
 ---> Using cache
 ---> 9d4c920f4cd2
Step 6/9 : ADD kibana.conf /etc/nginx/conf.d/
 ---> Using cache
 ---> e4b751dcdae9
Step 7/9 : ADD bootstrap.sh /bin/
 ---> Using cache
 ---> b5f05e69a9ac
Step 8/9 : EXPOSE 443
 ---> Using cache
 ---> 23708253f3c0
Step 9/9 : CMD /bin/bootstrap.sh
 ---> Using cache
 ---> a7993785c3fb
Successfully built a7993785c3fb
Successfully tagged 510195617121.dkr.ecr.us-west-2.amazonaws.com/ibles-es-proxy:123
Building elasticsearch-proxy-test
Step 1/3 : FROM alpine:3.8
 ---> 3f53bb00af94
Step 2/3 : RUN apk update
 ---> Using cache
 ---> 94b213f12826
Step 3/3 : RUN apk add curl
 ---> Using cache
 ---> 76bef42366bb
Successfully built 76bef42366bb
Successfully tagged elasticsearch-proxy_elasticsearch-proxy-test:latest
harrinm@C02T81ZHH03Q:~/instructables/repo/elasticsearch-proxy$ CIRCLE_SHA1=123 docker-compose -f docker-compose.yml -f docker-compose.ci.yml push
Pushing elasticsearch-proxy (510195617121.dkr.ecr.us-west-2.amazonaws.com/ibles-es-proxy:123)...
The push refers to repository [510195617121.dkr.ecr.us-west-2.amazonaws.com/ibles-es-proxy]
fd433c5786b9: Layer already exists
6b269cd74454: Layer already exists
105075752fd0: Layer already exists
b484621f95d7: Layer already exists
dab6be4ca755: Layer already exists
2a99cd40502c: Layer already exists
a14c6c26f6ba: Layer already exists
974e2a9f749c: Layer already exists
9108db4b6ca3: Layer already exists
7bff100f35cb: Layer already exists
123: digest: sha256:dda3b2c12e2f09ecda1401d7eba05800c4e5f8c75ca231cf82ceece898c7fc49 size: 2403
harrinm@C02T81ZHH03Q:~/instructables/repo/elasticsearch-proxy$ CIRCLE_SHA1=123 docker-compose -f docker-compose.yml -f docker-compose.ci.yml build --pull
Building elasticsearch-proxy
Step 1/9 : FROM nginx:1.15-alpine
1.15-alpine: Pulling from library/nginx
Digest: sha256:385fbcf0f04621981df6c6f1abd896101eb61a439746ee2921b26abc78f45571
Status: Image is up to date for nginx:1.15-alpine
 ---> 315798907716
Step 2/9 : RUN apk update
 ---> Using cache
 ---> 14d5892facc6
Step 3/9 : RUN apk add apache2-utils openssl
 ---> Using cache
 ---> afed17a45574
Step 4/9 : RUN openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -subj "/C=US" -keyout /etc/ssl/private/kibana.key -out /etc/ssl/certs/kibana.crt
 ---> Using cache
 ---> 332a3a5a2239
Step 5/9 : RUN rm /etc/nginx/conf.d/default.conf
 ---> Using cache
 ---> 9d4c920f4cd2
Step 6/9 : ADD kibana.conf /etc/nginx/conf.d/
 ---> Using cache
 ---> e4b751dcdae9
Step 7/9 : ADD bootstrap.sh /bin/
 ---> Using cache
 ---> b5f05e69a9ac
Step 8/9 : EXPOSE 443
 ---> Using cache
 ---> 23708253f3c0
Step 9/9 : CMD /bin/bootstrap.sh
 ---> Using cache
 ---> a7993785c3fb
Successfully built a7993785c3fb
Successfully tagged 510195617121.dkr.ecr.us-west-2.amazonaws.com/ibles-es-proxy:123
Building elasticsearch-proxy-test
Step 1/3 : FROM alpine:3.8
3.8: Pulling from library/alpine
Digest: sha256:46e71df1e5191ab8b8034c5189e325258ec44ea739bba1e5645cff83c9048ff1
Status: Image is up to date for alpine:3.8
 ---> 3f53bb00af94
Step 2/3 : RUN apk update
 ---> Using cache
 ---> 94b213f12826
Step 3/3 : RUN apk add curl
 ---> Using cache
 ---> 76bef42366bb
Successfully built 76bef42366bb
Successfully tagged elasticsearch-proxy_elasticsearch-proxy-test:latest
Additional information
Could this be related to having one container without an image name? It gets confused and rebuilds the one with the image name?
OS version / distribution, docker-compose install method, etc.
OSX 10.14.2
Darwin C02T81ZHH03Q 18.2.0 Darwin Kernel Version 18.2.0: Mon Nov 12 20:24:46 PST 2018; root:xnu-4903.231.4~2/RELEASE_X86_64 x86_64
docker-compose installed via brew