{"open_issues": {"1": {"issue_url": "https://github.com/pallets/flask/issues/3471", "issue_id": "#3471", "issue_summary": "In section Variable Rules and before, did not mentioned escape should be imported until we can see on URL Building", "issue_description": "maliozer commented 9 days ago\nfrom flask import Flask, escape\n@app.route('/user/')\ndef show_user_profile(username):\n# show the user profile for that user\nreturn 'User %s' % escape(username)\n@app.route('/post/int:post_id')\ndef show_post(post_id):\n# show the post with the given id, the id is an integer\nreturn 'Post %d' % post_id\n@app.route('/path/path:subpath')\ndef show_subpath(subpath):\n# show the subpath after /path/\nreturn 'Subpath %s' % escape(subpath)\n1", "issue_status": "Open", "issue_reporting_time": "2020-01-21T04:39:41Z"}, "2": {"issue_url": "https://github.com/pallets/flask/issues/3470", "issue_id": "#3470", "issue_summary": "Incorrect template name in error string", "issue_description": "TkTech commented 15 days ago\nExpected Behavior\nMissing templates should raise a TemplateNotFound exception with the correct template name.\nActual Behavior\nThe top-level template is used as the error string even when it is not the template that failed.\nThere appears to be an issue in Flask's DispatchingJinjaLoader. If a template called parent.html fails to find a sub-template such as {% extends child.html %}, the exception that is raised will be TemplateNotFound('parent.html') instead of the correct TemplateNotFound('child.html'). This will almost certainly confuse an end user.\nThis appears to be because\nflask/src/flask/templating.py\nLine 83 in 1351d0a\n def _get_source_fast(self, environment, template): \ndoes not properly float up missing templates errors. If it fails to find any matching template it raises the name of whatever template was first passed to render_template.\nEnvironment\nPython version: all\nFlask version: all\nWerkzeug version: all", "issue_status": "Open", "issue_reporting_time": "2020-01-15T18:11:05Z"}, "3": {"issue_url": "https://github.com/pallets/flask/issues/3465", "issue_id": "#3465", "issue_summary": "SERVER_NAME still implicitly changes routing behavior", "issue_description": "BoWuGit commented 18 days ago\nJust like this old issue said, routing behavior changed even when subdomain_matching defaults to false, so take this repository as example, if you comment following lines,\n@app.before_request\ndef start():\n    \"\"\"\n    init globals and set the schema search path for the current request.\n    \"\"\"\n    g.user = session.get('user', None)\n    current_url = urlparse(request.url)\n    subdomain = current_url.hostname.split('.')\n\n    if subdomain.__len__() > 2:\n        \"\"\"\n        redirect to home page\n        \"\"\"\n        if current_url.path == \"/\":\n            return redirect(url_for('index'))\n        pass\n    pass\nthen requests to user1.flask-subdomain.com won't route to index, default 404 as response. Or am I missing something, as a result have misunderstood it. Thanks very much.\n@app.route('/')\ndef index():\n    return render_template('index.html')\nEnvironment\nPython version: 3.6\nFlask version: 1.1.1\nWerkzeug version: 0.16.0", "issue_status": "Open", "issue_reporting_time": "2020-01-12T10:27:23Z"}, "4": {"issue_url": "https://github.com/pallets/flask/issues/3452", "issue_id": "#3452", "issue_summary": "Catch-all route doesn't work when static_folder ends in forwardslash", "issue_description": "Sti2nd commented on 19 Dec 2019 \u2022\nedited\nI am trying to serve a React app with Flask. The React app uses React Router which means some routes should simply be handled by React. To achieve this one can usually use a catch-all route that returns the index.html. I first couldn't get the catch-all route to work at all, and then I got it working by removing the trailing slash for the static_folder parameter when calling Flask.\nExpected Behavior\nWhen one enter a path with trailing forward slash in the static_folder parameter for flask.Flask() it shouldn't affect whether a catch-all route goes into effect or not.\nIn the below code remove the trailing slash for the static_folder and you are able to reach the catch-all route (home function) by entering a random route like /something.\nfrom flask import Flask, render_template\n\napp = Flask(__name__, static_folder=\"frontend/build/\", template_folder=\"frontend/build\")\n\n@app.route(\"/\")\ndef route1():\n    return \"route1\"\n\n\n@app.route(\"/<path:path>\")\ndef home(path):\n    return \"routeAny\"\nActual Behavior\nSteps to reproduce\nRun the above flask app\nOpen browser and verify that it renders the text \"route1\" for route /\nBrowse to /something and see that you get 404 Not Found.\nEnvironment\nPython version: 3.7.\nFlask version: 1.1.1\nWerkzeug version: 0.16.0", "issue_status": "Open", "issue_reporting_time": "2019-12-19T14:23:19Z"}, "5": {"issue_url": "https://github.com/pallets/flask/issues/3445", "issue_id": "#3445", "issue_summary": "Suggestion: Improve traceback for routes that return None", "issue_description": "kg-2 commented on 15 Dec 2019\nExpected Behavior\nWhen a user creates a route that returns None flask raises\nTypeError: The view function did not return a valid response. The function either returned None or ended without a return statement.\nThe problem is that it doesn't include the route that actually caused the error. It's obviously not a huge deal, just a little tedious to go search through all of the routes.\nfull traceback:\nTraceback (most recent call last):\n  File \"/var/www/mysite.com/venv/lib/python3.6/site-packages/werkzeug/middleware/proxy_fix.py\", line 232, in __call__\n    return self.app(environ, start_response)\n  File \"/var/www/mysite.com/venv/lib/python3.6/site-packages/flask/app.py\", line 2449, in wsgi_app\n    response = self.handle_exception(e)\n  File \"/var/www/mysite.com/venv/lib/python3.6/site-packages/flask/app.py\", line 1866, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/var/www/mysite.com/venv/lib/python3.6/site-packages/flask/_compat.py\", line 39, in reraise\n    raise value\n  File \"/var/www/mysite.com/venv/lib/python3.6/site-packages/flask/app.py\", line 2446, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/var/www/mysite.com/venv/lib/python3.6/site-packages/flask/app.py\", line 1952, in full_dispatch_request\n    return self.finalize_request(rv)\n  File \"/var/www/mysite.com/venv/lib/python3.6/site-packages/flask/app.py\", line 1967, in finalize_request\n    response = self.make_response(rv)\n  File \"/var/www/mysite.com/venv/lib/python3.6/site-packages/flask/app.py\", line 2097, in make_response\n    \"The view function did not return a valid response. The\"\nTypeError: The view function did not return a valid response. The function either returned None or ended without a return statement.\nEnvironment\nPython version: 3.6\nFlask version: 1.1.1\nWerkzeug version: 0.16\n1", "issue_status": "Open", "issue_reporting_time": "2019-12-14T23:05:13Z"}, "6": {"issue_url": "https://github.com/pallets/flask/issues/3441", "issue_id": "#3441", "issue_summary": "confusing logging behavior in Blueprints when running test", "issue_description": "NewLanded commented on 5 Dec 2019 \u2022\nedited\nHi everybody:\nI have write some tests like this:\n@pytest.fixture\ndef app():\n    app = create_app({\"DB_CONNECT\": TEST_DB_CONNECT})\n    yield app\n\n@pytest.fixture\ndef client(app):\n    \"\"\"A test client for the app.\"\"\"\n    return app.test_client()\n\ndef test_hello_1(app, client):\n    # test that viewing the page renders without template errors\n    assert client.get(\"/hello\").status_code == 200\n\n\ndef test_hello_2(app, client):\n    # test that viewing the page renders without template errors\n    assert client.get(\"/hello\").status_code == 200\nand the interface hello like this(this interface locate at a blueprint):\nfrom flask import Blueprint,  current_app\n\nbp = Blueprint('interface_map', __name__)\n\n@bp.route('/hello')\ndef hello():\n    current_app.logger.info('hello world test log')\n\n    return \"hello world\"\nwhen I running tests:\nExpected Behavior\n[2019-12-05 15:56:10,693] 127.0.0.1 requested http://localhost/hello INFO in interface_demo: \nhello world test log\n[2019-12-05 15:56:11,065] 127.0.0.1 requested http://localhost/hello INFO in interface_demo: \nhello world test log\nActual Behavior\n[2019-12-05 15:56:10,693] 127.0.0.1 requested http://localhost/hello INFO in interface_demo: \nhello world test log\n[2019-12-05 15:56:11,065] 127.0.0.1 requested http://localhost/hello INFO in interface_demo: \nhello world test log\n[2019-12-05 15:56:11,065] 127.0.0.1 requested http://localhost/hello INFO in interface_demo: \nhello world test log\nI run two tests but it log three times!\nI have no idea what happened and I am not sure it is appropriate use current_app.logger in blueprint.\nI also tried replace current_app.logger to print() or write to a file use open('file_name', 'a'), it behavior no problem\nEnvironment\nPython version: 3.7.1\nFlask version: 1.0.2\nWerkzeug version: 0.14.1\nappreciate for any ideas", "issue_status": "Open", "issue_reporting_time": "2019-12-05T08:41:34Z"}, "7": {"issue_url": "https://github.com/pallets/flask/issues/3440", "issue_id": "#3440", "issue_summary": "\u201cLast-Modified\u201d header gone missing when receiving in the client end from the Python Flask Rest API for 304 HTTP Response", "issue_description": "chamikabm commented on 4 Dec 2019\nExpected Behavior\nIt should return the 'Last-Modified' header when returning 304 Not Modified HTTP response.\n**_Here is my code:_**\n\ndef get_response:\n  headers = {\n    'Last-Modified': last_modified_after,  Wed, 04 Dec 2019 01:47:01 GMT #\n    'Cache-Control': 'no-cache',\n    'Name': 'Test'\n  }\n  if user_has_old_version:\n    return cloud_doc, 200 headers\n  else:\n    return cloud_doc, 304, headers\nActual Behavior\nmy issue is when I returning the response with the headers including the header Last-Modified it is gone missing when it receives to the client end, But all the other headers are present. I wonder how only that header is gone missing.\nWhen I get the response for the else condition (i.e HTTP 200 response) I only get the Cache-Control header and the custom Name header, this Last-Modified gone missing. But when I receive the if (i.e HTTP 304 response) case, I'm getting all the headers including the Last-Modified header.\nPython version: 3.7\nFlask version: 1.1.1\nWerkzeug version: 0.16.0", "issue_status": "Open", "issue_reporting_time": "2019-12-04T13:04:47Z"}, "8": {"issue_url": "https://github.com/pallets/flask/issues/3423", "issue_id": "#3423", "issue_summary": "set cache-control: private when session is used", "issue_description": "nottrobin commented on 13 Nov 2019 \u2022\nedited\nIf ever the flask.session is used, and there's an intermediary cache between the Flask app and the user (Squid, Cloudinary, whatever), there's a significant risk that a user could see a page that was built for another user, exposing sensitive information (e.g. see https://stackoverflow.com/questions/13768007/browser-caching-issues-in-flask and mattupstate/flask-security#334).\nThe solution to this is for the application developer to return a cache-control: no-cache or cache-control: private header with any pages that might contain sensitive information.\nHowever, many project developers will likely forget to do this. Would it make sense for Flask to explicitly return a cache-control: private header by default if the flask.session is not empty?\nIn the meantime, we're planning to implement something like this in our apps:\n@app.after_request\ndef make_sessions_private(response):\n    if flask.session:\n        response.cache_control.private = True\n        response.cache_control.public = False\n    return response\nDoes this make sense?\n1", "issue_status": "Open", "issue_reporting_time": "2019-11-13T12:13:10Z"}, "9": {"issue_url": "https://github.com/pallets/flask/issues/3404", "issue_id": "#3404", "issue_summary": "route decorator on MethodView classes", "issue_description": "Contributor\ndougthor42 commented on 26 Oct 2019\nTL;DR:\nBeing able to use a Blueprint's @pb.route decorator on a MethodView class can help made code more readable\nIt should be a pretty trivial fix.\nI'm working on tests and a merge request right now.\nExpected Behavior\nUsers should be able to combine blueprints with MethodView.\nfrom flask import Blueprint\nfrom flask.views import MethodView\n\napi = Blueprint(\"api\", __name__, url_prefix=\"/api/v1\")\n\n@api.route(\"/users\")\n@api.route(\"/users/<user_id>\")\nclass UserAPI(MethodView):\n\n    def get(self, user_id=None):\n        if user_id is None:\n            return \"list of all users\"\n        else:\n            return f\"just user {user_id}\"\n\n    def post(self, user_id):\n        return f\"POST {user_id}\"\n\n    def delete(self, user_id):\n        return f\"DELETE {user_id}\"\n\n    def put(self, user_id):\n        return f\"PUT {user_id}\"\n\n    def PATCH(self, user_id):\n        return f\"PATCH {user_id}\"\nActual Behavior\nUsing a blueprint's @route decorator on a MethodView results in TypeError is raised:\nTraceback (most recent call last):\n  File \"/c/gitlab/mocvd/sic-inventory/.venv/lib/python3.6/site-packages/flask/app.py\", line 2463, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/c/gitlab/mocvd/sic-inventory/.venv/lib/python3.6/site-packages/flask/app.py\", line 2449, in wsgi_app\n    response = self.handle_exception(e)\n  File \"/c/gitlab/mocvd/sic-inventory/.venv/lib/python3.6/site-packages/flask/app.py\", line 1866, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/c/gitlab/mocvd/sic-inventory/.venv/lib/python3.6/site-packages/flask/_compat.py\", line 39, in reraise\n    raise value\n  File \"/c/gitlab/mocvd/sic-inventory/.venv/lib/python3.6/site-packages/flask/app.py\", line 2446, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/c/gitlab/mocvd/sic-inventory/.venv/lib/python3.6/site-packages/flask/app.py\", line 1952, in full_dispatch_request\n    return self.finalize_request(rv)\n  File \"/c/gitlab/mocvd/sic-inventory/.venv/lib/python3.6/site-packages/flask/app.py\", line 1967, in finalize_request\n    response = self.make_response(rv)\n  File \"/c/gitlab/mocvd/sic-inventory/.venv/lib/python3.6/site-packages/flask/app.py\", line 2130, in make_response\n    \" {rv.__class__.__name__}.\".format(rv=rv)\nTypeError: The view function did not return a valid response. The return type must be a string, dict, tuple, Response instance, or WSGI callable, but it was a UserAPI.\nInstead, users need to manually add rules to the app after the fact, which can be hard to read and requires that the app instance be available in the module.\nuser_view = UserAPI.as_view('user_api')\napp.add_url_rule('/users/', defaults={'user_id': None},\n                 view_func=user_view, methods=['GET',])\napp.add_url_rule('/users/', view_func=user_view, methods=['POST',])\napp.add_url_rule('/users/<int:user_id>', view_func=user_view,\n                 methods=['GET', 'PUT', 'PATCH', 'DELETE'])\nEnvironment\nPython version: 3.6.8\nFlask version: 1.1.1\nWerkzeug version: 0.16.0\nThe Fix\nBased on my testing is should be relatively trivial to support this. All that needs to be done is edit Blueprint.route:\ndiff --git a/src/flask/blueprints.py b/src/flask/blueprints.py\nindex 8978104d..f6f62dd6 100644\n--- a/src/flask/blueprints.py\n+++ b/src/flask/blueprints.py\n@@ -11,6 +11,8 @@\n \"\"\"\n from functools import update_wrapper\n\n+from .views import MethodViewType\n+\n from .helpers import _endpoint_from_view_func\n from .helpers import _PackageBoundObject\n\n@@ -276,6 +278,11 @@ class Blueprint(_PackageBoundObject):\n\n         def decorator(f):\n             endpoint = options.pop(\"endpoint\", f.__name__)\n+\n+            # Support decorating MethodView classes\n+            if isinstance(f, MethodViewType):\n+                f = f.as_view(endpoint)\n+\n             self.add_url_rule(rule, endpoint, f, **options)\n             return f\nNote: I originally saw this feature in the marshmallow-code/flask-smorest library (originally Nobatek/flask-rest-api) flask_smorest/blueprint.py.\nThe above code is taken almost verbatim from that library.", "issue_status": "Open", "issue_reporting_time": "2019-10-25T20:55:31Z"}, "10": {"issue_url": "https://github.com/pallets/flask/issues/3396", "issue_id": "#3396", "issue_summary": "Unable to extend FlaskClient with follow_redirects", "issue_description": "MaicoTimmerman commented on 15 Oct 2019 \u2022\nedited\nI'm trying to add default headers to the Flask testing client, however when the response contains redirects, the second request seems to have issues due the FlaskClient inconsistent method signatures of flask.testing.FlaskClient.open() and werkzeug.Client.open().\nIs there a workaround to this problem?\nExpected Behavior\nThe requests both have a header attached.\nfrom flask import Flask, redirect, url_for\nfrom flask.testing import FlaskClient\n\napp = Flask(__name__)\n\nclass CustomClient(FlaskClient):\n    def __init__(self, *args, headers=None, **kwargs):\n        if headers is None:\n            headers = dict()\n        super(CustomClient, self).__init__(*args, **kwargs)\n        self.headers = headers\n    def open(self, *args, **kwargs):\n        kwargs['headers'] = self.headers.copy()\n        return super().open(*args, **kwargs)\n\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef home():\n    return redirect(url_for(\"test\"))\n\n@app.route(\"/foo/\")\ndef test():\n    return \"Hello, World!\"\nif __name__ == \"__main__\":\n    app.test_client_class = CustomClient\n    with app.test_client(headers={\n            \"SomeHeader\": \"SomeValue\"\n    }) as c:\n        rv = c.post(\"/\", follow_redirects=True)\n        print(rv.data)\nActual Behavior\nTraceback (most recent call last):\n  File \"/opt/pycharm-professional/helpers/pydev/pydevd.py\", line 2066, in <module>\n    main()\n  File \"/opt/pycharm-professional/helpers/pydev/pydevd.py\", line 2060, in main\n    globals = debugger.run(setup['file'], None, None, is_module)\n  File \"/opt/pycharm-professional/helpers/pydev/pydevd.py\", line 1411, in run\n    return self._exec(is_module, entry_point_fn, module_name, file, globals, locals)\n  File \"/opt/pycharm-professional/helpers/pydev/pydevd.py\", line 1418, in _exec\n    pydev_imports.execfile(file, globals, locals)  # execute the script\n  File \"/opt/pycharm-professional/helpers/pydev/_pydev_imps/_pydev_execfile.py\", line 18, in execfile\n    exec(compile(contents+\"\\n\", file, 'exec'), glob, loc)\n  File \"app.py\", line 35, in <module>\n    rv = c.post(\"/\", follow_redirects=True)\n  File \"/home/maico/dev/venv/lib/python3.6/site-packages/werkzeug/test.py\", line 1039, in post\n    return self.open(*args, **kw)\n  File \"app.py\", line 17, in open\n    return super().open(*args, **kwargs)\n  File \"/home/maico/dev/venv/lib/python3.6/site-packages/flask/testing.py\", line 227, in open\n    follow_redirects=follow_redirects,\n  File \"/home/maico/dev/venv/lib/python3.6/site-packages/werkzeug/test.py\", line 1017, in open\n    response, new_location, environ, buffered=buffered\n  File \"/home/maico/dev/venv/lib/python3.6/site-packages/werkzeug/test.py\", line 948, in resolve_redirect\n    return self.open(builder, as_tuple=True, buffered=buffered)\n  File \"app.py\", line 17, in open\n    return super().open(*args, **kwargs)\n  File \"/home/maico/dev/venv/lib/python3.6/site-packages/flask/testing.py\", line 215, in open\n    builder = EnvironBuilder(self.application, *args, **kwargs)\n  File \"/home/maico/dev/venv/lib/python3.6/site-packages/flask/testing.py\", line 73, in __init__\n    url = url_parse(path)\n  File \"/home/maico/dev/venv/lib/python3.6/site-packages/werkzeug/urls.py\", line 457, in url_parse\n    i = url.find(s(\":\"))\nAttributeError: 'EnvironBuilder' object has no attribute 'find'```\nEnvironment\nPython version: 3.6.9\nFlask version: 1.1.1\nWerkzeug version: 0.16.0", "issue_status": "Open", "issue_reporting_time": "2019-10-14T22:27:40Z"}, "11": {"issue_url": "https://github.com/pallets/flask/issues/3316", "issue_id": "#3316", "issue_summary": "Dynamic Subdomain Value Unfilled", "issue_description": "LewdNeko commented on 28 Jul 2019 \u2022\nedited\nExpected Behavior\nThe bot value should be filled with the current subdomain.\n@app.route('/', subdomain='<bot>')\ndef index(bot):\n    return bot  # Or do something else\nActual Behavior\nThe value is not filled, it is just an empty string.\nThis also happens if inside a blueprint:\nbp = Blueprint('foo', __name__, subdomain='<bot>')\n@bp.route('/')\ndef my_route(bot):\n    return bot  # Or do something else\nN/A\nEnvironment\nPython version: 3.6.6\nFlask version: 1.0.2\nWerkzeug version: 0.14.1\nYes, nginx and my DNS are configured correctly", "issue_status": "Open", "issue_reporting_time": "2019-07-28T14:27:20Z"}, "12": {"issue_url": "https://github.com/pallets/flask/issues/3263", "issue_id": "#3263", "issue_summary": "FlaskGroup does not work when nested in a click.group", "issue_description": "gustapia06 commented on 15 Jun 2019 \u2022\nedited\nExpected Behavior\nWhen using Flask CLI, I came to the case that we have a group of commands for a big program that uses click.\n# main group\n@click.group()\n@click.pass_context\ndef my_big_cli_group(ctx):\n    pass\n\n# sub group\n@my_big_cli_group.group()\n@click.pass_context\ndef my_nested_group(ctx):\n    pass\n\n# command for sub group\n@my_nested_group.command()\n@click.pass_context\n@click.option('-s', '--start', is_flag=True)\ndef my_command(ctx, start):\n    click.echo(start)\nThe issue comes when nesting my flask app into the bigger group using cls=FlaskGroup and passing my create_app factory function.\n# flask app sub group\n@my_big_cli_group.group(cls=FlaskGroup, create_app=create_app)\n@click.pass_context\ndef my_flask_app(ctx):\n    pass\nAfter running my setup.py pointing my entry point to 'my_big_cli = path.to:my_big_cli_group', I should expect the app to start once I do:\n$ my_big_cli my_flask_app run\nActual Behavior\nInstead, I get a flask.cli.NoAppException. It seems that create_app does not get passed on to Group.group instances on click.\nTraceback (most recent call last):\n File \u201c/Users/the_user/Desktop/venv/lib/python3.7/site-packages/flask/cli.py\u201d, line 540, in list_commands\n   rv.update(info.load_app().cli.list_commands(ctx))\n File \u201c/Users/the_user/Desktop/venv/lib/python3.7/site-packages/flask/cli.py\u201d, line 393, in load_app\n   \u2018Could not locate a Flask application. You did not provide \u2019\nflask.cli.NoAppException: Could not locate a Flask application. You did not provide the \u201cFLASK_APP\u201d environment variable, and a \u201cwsgi.py\u201d or \u201capp.py\u201d module was not found in the current directory.\nWork around\nIf I don't nest the flask app into a group but rather make it a new click.group, then after changing my setup.py to point to this new entry point as well, everything works as expected.\n# flask app group\n@click.group(cls=FlaskGroup, create_app=create_app)\n@click.pass_context\ndef my_flask_app(ctx):\n    pass\nThen\n$ my_flask_app run\nworks perfectly fine\nEnvironment\nPython version: 3.7.3\nFlask version: 1.0.3\nWerkzeug version: 0.15.4", "issue_status": "Open", "issue_reporting_time": "2019-06-15T18:11:48Z"}, "13": {"issue_url": "https://github.com/pallets/flask/issues/3215", "issue_id": "#3215", "issue_summary": "Identify the common API between Flask and Blueprint classes", "issue_description": "Member\ndavidism commented on 24 May 2019 \u2022\nedited\nBlueprints are supposed to provide a very similar API to the Flask object itself, the difference being that Blueprints defer registration until later. Currently, blueprints can only be registered on apps, they're not nestable, and apps can't be registered with other apps, but this is something that #593 and #1548 want to change.\nBlueprint and Flask do derive from helpers._PackageBoundObject, but this is mostly concerned with managing static files, templates, and other resource files. I think identifying the common API between the two and extracting it to a common base class may be a good step towards understanding how we can support app and blueprint nesting. Hopefully, it may at least make the code cleaner and easier to maintain.\n13", "issue_status": "Open", "issue_reporting_time": "2019-05-24T18:25:04Z"}, "14": {"issue_url": "https://github.com/pallets/flask/issues/3108", "issue_id": "#3108", "issue_summary": "config option for \"flask run\" (e.g. --dotenv/-e)", "issue_description": "Member\njab commented on 1 Mar 2019 \u2022\nedited\nWould it make sense to allow passing a --config/-c option to flask run, that would then be exposed to users somehow for subsequent passing to e.g. app.config.from_pyfile()?\n(I'm imagining this done in a reusable way so that a \"flask gunicorn\" custom command (the likes of which I've already implemented) could accept and expose a -c value similarly, so that the app could be configured from this same provided path whether running in development or production.)\nThis would reduce the dependence on an environment variable to specify this. Reason I ask is that many of the Flask users I'm supporting are allergic to environment variables for the reasons mentioned in #3095, and have been missing some way to pass a CLI option to flask run to help configure their apps. Thanks\n1", "issue_status": "Open", "issue_reporting_time": "2019-02-28T23:58:09Z"}, "15": {"issue_url": "https://github.com/pallets/flask/issues/2836", "issue_id": "#2836", "issue_summary": "request points to wrong object in debugger when threading is enabled", "issue_description": "rkomorn commented on 20 Jun 2018 \u2022\nedited\nExpected Behavior\nDebugger should show the right request object.\nPaste a minimal example that causes the problem.from flask import Flask, request\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    print(request)\n    x = y\n    return 'Hello, World!'\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\nActual Behavior\nWe're seeing some honestly kind of dumbfounding behavior that makes no sense to us. I'm not a novice when it comes to troubleshooting things, but this one really baffles me because I'm basically certain I'm not doing anything weird.\nDebugger doesn't show the right \"request\" object often. See https://pasteboard.co/HqFNzwq.png for a screenshot of a case where the browser's URL bar shows the right thing, printing the request object shows the right thing in console logs, but using the debugger does not.\nThe request object is sometimes unbound, sometimes right, and seemingly often \"off by 1\" based on history.\nSo far, we can only seem to reproduce this on Linux, using Chrome and Firefox (edit: at first we thought it wasn't happening with Firefox but we found a repro with Firefox on Ubuntu 16.04 ). It doesn't seem to be happening from a Mac OS chrome client.\nEnvironment\nPython version: both 2.7 and 3.6 (in virtualenv-based environments)\nFlask version: 1.0.x and it seems 0.12 as well\nWerkzeug version: 0.14.1\nLinux version(s): Ubuntu 18.04 , Ubuntu 16.04\nChrome: Chrome/65.0.3325.183", "issue_status": "Open", "issue_reporting_time": "2018-06-19T22:06:39Z"}, "16": {"issue_url": "https://github.com/pallets/flask/issues/2776", "issue_id": "#2776", "issue_summary": "cannot call app.run() from custom cli command", "issue_description": "Member\nmiguelgrinberg commented on 13 May 2018\nExpected Behavior\nThere are situations in which you may want to implement a custom application runner. Two examples that I can think of are running the application under the Werkzeug profiler, and starting the application in a background thread to perform integration tests against it.\nIn these situations, most people would want to create a custom CLI command that calls app.run() to start the application after applying any necessary changes, such as enabling profiling, etc.\nExample bug.py:\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.cli.command()\ndef custom_run():\n    app.run()\nWhat I expect with the above example is that running flask custom_run starts the development web server.\nActual Behavior\n(venv) $ FLASK_APP=bug.py flask custom_run\n/home/miguel/bug.py:7: Warning: Silently ignoring app.run() because the application is run from the flask command line executable.  Consider putting app.run() behind an if __name__ == \"__main__\" guard to silence this warning.\nI think this warning should only appear when app.run() is called from the global scope of the main module. This can be determined from the number of frames in the call stack. The warning should be issued only if the call stack has two frames, but should not if there are more than two. Thoughts?\n13", "issue_status": "Open", "issue_reporting_time": "2018-05-13T01:57:03Z"}, "17": {"issue_url": "https://github.com/pallets/flask/issues/2741", "issue_id": "#2741", "issue_summary": "Better exception handling when env vars are missing for flask CLI", "issue_description": "Contributor\nrochacbruno commented on 28 Apr 2018\nExpected Behavior\nAs there is the support for lazy loading the app, when running flask CLI without providing the proper environment variables we must see a better warning instead of raw exception.\nTell us what should happen.\nwe should see a better warning or message pointing to the problem\n# there is no FLASK_APP env var\n$ flask --help\nWARNING: You need to define the app e.g: `export FLASK_APP=app.py`\nActual Behavior\nTell us what happens instead.\nwe see traceback before the help message\n# there is no FLASK_APP env var\n$ flask --help                                                               Sat 28 Apr 2018 01:25:50 PM -03\nTraceback (most recent call last):\n  File \"~Projects/personal/flasgger/venv/lib/python3.6/site-packages/flask/cli.py\", line 235, in locate_app\n    __import__(module_name)\nModuleNotFoundError: No module named 'app'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"~/Projects/personal/flasgger/venv/lib/python3.6/site-packages/flask/cli.py\", line 529, in list_commands\n    rv.update(info.load_app().cli.list_commands(ctx))\n  File \"~/Projects/personal/flasgger/venv/lib/python3.6/site-packages/flask/cli.py\", line 372, in load_app\n    app = locate_app(self, import_name, name)\n  File \"~/Projects/personal/flasgger/venv/lib/python3.6/site-packages/flask/cli.py\", line 246, in locate_app\n    'Could not import \"{name}\".'.format(name=module_name)\nflask.cli.NoAppException: Could not import \"app\".\nUsage: flask [OPTIONS] COMMAND [ARGS]...\n\n  A general utility script for Flask applications.\n\n  Provides commands from Flask, extensions, and the application. Loads the\n  application defined in the FLASK_APP environment variable, or from a\n  wsgi.py file. Setting the FLASK_ENV environment variable to 'development'\n  will enable debug mode.\n\n    $ export FLASK_APP=hello.py\n    $ export FLASK_ENV=development\n    $ flask run\n\nOptions:\n  --version  Show the flask version\n  --help     Show this message and exit.\n\nCommands:\n  routes  Show the routes for the app.\n  run     Runs a development server.\n  shell   Runs a shell in the app context.\nThe same happens to run\n$ flask run                                                          429ms \ue0b3 Sat 28 Apr 2018 01:32:48 PM -03\n * Serving Flask app \"app.py\"\n * Environment: production\n   WARNING: Do not use the development server in a production environment.\n   Use a production WSGI server instead.\n * Debug mode: off\nUsage: flask run [OPTIONS]\n\nError: Could not import \"app\".\nThe Error: Could not import \"app\". could include WARNING: You need to define the app e.g: export FLASK_APP=app.py\nSuggestion\nWe could check the existence of FLASK_APP envvar before running any of the commands in the Group Cli, if FLASK_APP does not exist the dispatch of commands never happens.\nEnvironment\nPython version: 3.6.0\nFlask version: Flask==1.0\nWerkzeug version: Werkzeug==0.14.1\nClick: click==6.7", "issue_status": "Open", "issue_reporting_time": "2018-04-28T16:37:34Z"}, "18": {"issue_url": "https://github.com/pallets/flask/issues/2520", "issue_id": "#2520", "issue_summary": "Don't create View instances for each request", "issue_description": "Member\ndavidism commented on 14 Nov 2017 \u2022\nedited\nView.as_view creates a function that instantiates the class every request. This seems inefficient for no real gain.\nclass DeleteView(View):\n    methods = ['DELETE']\n\n    # this only needs to happen once\n    def __init__(self, model):\n        self.model = model\n        # imagine if we did something expensive here\n        # like generating a form based on the model\nThe only argument I could think of for instantiating every request is if the constructor does something different based on the request. That seems like bad design, but any use that I can think of for that could be accomplished with properties instead.\nYes, there are ways to make it less expensive, like generating more ahead of time and passing more arguments, but that is not intuitive, and makes the class just a more complicated view factory.\n2\n2", "issue_status": "Open", "issue_reporting_time": "2017-11-14T14:45:10Z"}, "19": {"issue_url": "https://github.com/pallets/flask/issues/2410", "issue_id": "#2410", "issue_summary": "Flask CLI doesn't support application context in argument callbacks", "issue_description": "runfalk commented on 10 Jul 2017\nI recently converted an old managing script to use Flask's built in CLI instead. I have a table for clients that are identified using a shortname/slug. I thought about using Click's argument callback for this. Given a shortname my function would get an instance of the client from my ORM. The problem is that the application context is not active when the callback is run.\nExpected Behavior\nSince many scripts will rely on a database connection it makes sense to have the application context be available in arguments.\nimport click\nfrom flask import current_app, Flask\n\napp = Flask(\"demo\")\n\ndef example_callback(ctx, param, value):\n    # Access the application context to trigger an exception\n    click.echo(current_app.config)\n    return {\"id\": 1, \"shortname\": value}\n\n@app.cli.command()\n@click.argument(\"arg\", callback=example_callback)\ndef view(arg):\n    click.echo(arg)\nI run this using flask view foobar.\nActual Behavior\nTraceback (most recent call last):\n  File \"/dev/flask-cli-demo/venv/bin/flask\", line 11, in <module>\n    sys.exit(main())\n  File \"/dev/flask-cli-demo/venv/local/lib/python2.7/site-packages/flask/cli.py\", line 513, in main\n    cli.main(args=args, prog_name=name)\n  File \"/dev/flask-cli-demo/venv/local/lib/python2.7/site-packages/flask/cli.py\", line 380, in main\n    return AppGroup.main(self, *args, **kwargs)\n  File \"/dev/flask-cli-demo/venv/local/lib/python2.7/site-packages/click/core.py\", line 697, in main\n    rv = self.invoke(ctx)\n  File \"/dev/flask-cli-demo/venv/local/lib/python2.7/site-packages/click/core.py\", line 1064, in invoke\n    sub_ctx = cmd.make_context(cmd_name, args, parent=ctx)\n  File \"/dev/flask-cli-demo/venv/local/lib/python2.7/site-packages/click/core.py\", line 621, in make_context\n    self.parse_args(ctx, args)\n  File \"/dev/flask-cli-demo/venv/local/lib/python2.7/site-packages/click/core.py\", line 880, in parse_args\n    value, args = param.handle_parse_result(ctx, opts, args)\n  File \"/dev/flask-cli-demo/venv/local/lib/python2.7/site-packages/click/core.py\", line 1404, in handle_parse_result\n    self.callback, ctx, self, value)\n  File \"/dev/flask-cli-demo/venv/local/lib/python2.7/site-packages/click/core.py\", line 78, in invoke_param_callback\n    return callback(ctx, param, value)\n  File \"/dev/flask-cli-demo/app.py\", line 8, in example_callback\n    click.echo(current_app.config)\n  File \"/dev/flask-cli-demo/venv/local/lib/python2.7/site-packages/werkzeug/local.py\", line 347, in __getattr__\n    return getattr(self._get_current_object(), name)\n  File \"/dev/flask-cli-demo/venv/local/lib/python2.7/site-packages/werkzeug/local.py\", line 306, in _get_current_object\n    return self.__local()\n  File \"/dev/flask-cli-demo/venv/local/lib/python2.7/site-packages/flask/globals.py\", line 51, in _find_app\n    raise RuntimeError(_app_ctx_err_msg)\nRuntimeError: Working outside of application context.\nEnvironment\nclick==6.7\nFlask==0.12.2\nitsdangerous==0.24\nJinja2==2.9.6\nMarkupSafe==1.0\npkg-resources==0.0.0\nWerkzeug==0.12.2\nWorkaround\nThe only workaround I've found is doing the same thing @with_appcontext does which is:\nwith ctx.ensure_object(ScriptInfo).load_app().app_context():\nUsing @with_appcontext on example_callback doesn't work since that gives a warning about using a deprecated function signature (from before Click 2.0).\nWhy is this a problem?\nThis results in two separate instantiations of my ORM. Some ORM's (like the one I'm using) doesn't allow sharing objects across instances (for good reason) which makes the client object I produce unusable anyway.", "issue_status": "Open", "issue_reporting_time": "2017-07-10T14:17:27Z"}, "20": {"issue_url": "https://github.com/pallets/flask/issues/1948", "issue_id": "#1948", "issue_summary": "Documentation for Flask + mod_wsgi + pyvenv + Python 3 doesn't work", "issue_description": "cdman commented on 7 Jul 2016\nIt says in the documentation (the last section - \"Working with Virtual Environments\"):\nFor Python 3 add the following lines to the top of your .wsgi file:\nactivate_this = '/path/to/env/bin/activate_this.py'\nwith open(activate_this) as file_:\n    exec(file_.read(), dict(__file__=activate_this))\nHowever activate_this.py is no longer present in pyvenv (see http://bugs.python.org/issue21496), thus the above code doesn't work. I found a stackoverflow answer where it said that just copying activate_this.py from a 2.7 virtualenv might work, however I didn't go down that route.\nHow I managed to get it working:\nI added WSGIPythonHome /path/to/env to the top level of my apache config (ie. outside of VirtualEnv). However that might be a little to big of a hammer if people want to run multiple applications in the same Apache instance. In that case setting python-path on WSGIDaemonProcess might work (however I didn't try it out).", "issue_status": "Open", "issue_reporting_time": "2016-07-07T12:52:37Z"}, "21": {"issue_url": "https://github.com/pallets/flask/issues/1852", "issue_id": "#1852", "issue_summary": "Remove version info from Werkzeug in the docs", "issue_description": "Member\ndawran6 commented on 3 Jun 2016\nThe following version information is coming from the Werkzeug docs: \"New in version 0.6: The location can now be a unicode string that is encoded using the iri_to_uri() function.\" See http://flask.pocoo.org/docs/0.11/api/#flask.redirect.\nThere might be more of this kind of issue in the documentation. For this particular one, you can trace the code to docs/api.rst,:\n.. autofunction:: redirect", "issue_status": "Open", "issue_reporting_time": "2016-06-02T18:50:50Z"}, "22": {"issue_url": "https://github.com/pallets/flask/issues/1548", "issue_id": "#1548", "issue_summary": "Support zero-ceremony sub-app mounting (including Blueprints)", "issue_description": "Contributor\nsvieira commented on 3 Aug 2015\n#1361, #1498, and #1494 seem to indicate that some people don't see Blueprints as templates for application behavior, but want to treat them as little self-contained applications that are composed onto the main application. Effectively, we would be taking the app composition pattern and building it into the API.\nWhat sort of an API would we need to properly support app composition for such purposes, since that would solve all of these use cases (404 / 405 error handlers at the \"Blueprint\" level, only able to see its own templates, etc.)?\nThe minimum API is Flask#mount_app(app_or_blueprint) - but that still leaves a few questions:\nDoes the parent app need to be able to route to sub-app routes via url_for?\nDoes the child app need to be able to route to parent or sibling-app routes via url_for?\nDitto for static and templates (although #1361 suggests that such uses would want the static and template folders to be distinct).\nOther questions which I am certainly missing\nWhat do you need from Blueprints? What else would you expect Flask#mout_app to do?\n2", "issue_status": "Open", "issue_reporting_time": "2015-08-03T13:05:24Z"}, "23": {"issue_url": "https://github.com/pallets/flask/issues/1091", "issue_id": "#1091", "issue_summary": "relative url_for with a blueprint mounted two times", "issue_description": "iurisilvio commented on 17 Jun 2014\nBased on blueprint concept, I expected it to handle relative url_for nicely:\nfrom flask import Blueprint, Flask, url_for\n\nbp = Blueprint('foo', __name__)\n\n@bp.route('/')\ndef func():\n    return url_for('.func')\n\napp = Flask(__name__)\napp.register_blueprint(bp, url_prefix='/foo')\napp.register_blueprint(bp, url_prefix='/bar')\n\nclient = app.test_client()\nprint client.get('/foo/').data\nprint client.get('/bar/').data\nBoth prints write the URL to the first blueprint registered (/foo/). Is it possible to mount two times the same blueprint and make relative url_for work? Is this behaviour expected?\n1", "issue_status": "Open", "issue_reporting_time": "2014-06-16T20:21:08Z"}, "24": {"issue_url": "https://github.com/pallets/flask/issues/593", "issue_id": "#593", "issue_summary": "Nestable blueprints", "issue_description": "teozkr commented on 13 Sep 2012\nI'd like to be able to register \"sub-blueprints\" using Blueprint.register_blueprint(*args, **kwargs). This would register the nested blueprints with an app when the \"parent\" is registered with it. All parameters are preserved, other than url_prefix, which is handled similarly to in add_url_rule. A na\u00edve implementation could look like this:\nclass Blueprint(object):\n    ...\n\n    def register_blueprint(self, blueprint, **options):\n        def deferred(state):\n            url_prefix = options.get('url_prefix')\n            if url_prefix is None:\n                url_prefix = blueprint.url_prefix\n            if 'url_prefix' in options:\n                del options['url_prefix']\n\n            state.app.register_blueprint(blueprint, url_prefix, **options)\n        self.record(deferred)\n40", "issue_status": "Open", "issue_reporting_time": "2012-09-13T13:35:35Z"}, "25": {"issue_url": "https://github.com/pallets/flask/issues/289", "issue_id": "#289", "issue_summary": "Blueprints and Extensions and SQLAlchemy", "issue_description": "Member\nmitsuhiko commented on 30 Jul 2011\nWe do not encourage people to create more than one database connection and to connect to databases in arbitrary extensions. The obvious exception are extensions whose sole purpose is to connect to databases. Dependency resolving is done by the developer. Eg:\napp = Flask(__name__)\ndb = SQLAlchemy(app)\nsomething = SomethingElse(app, db)\nThe problem comes with blueprints. If SomethingElse wants to define models it has to do that at a local scope where it has the reference to the db. Assuming it provides blueprints, how does the blueprint's views and other code get to the models? The sad truth is that if you make up blueprints on the fly the views in that blueprint don't know how to reference it.", "issue_status": "Open", "issue_reporting_time": "2011-07-30T08:39:56Z"}}, "closed_issues": {"1": {"issue_url": "https://github.com/pallets/flask/issues/3476", "issue_id": "#3476", "issue_summary": "Import error from scipy package: pfft", "issue_description": "daljeetvirdi commented 6 hours ago \u2022\nedited\nescribe the bug\nImport error from scipy package\nFile \"/env/lib/python3.7/site-packages/statsmodels/api.py\", line 9, in\nfrom . import regression\nFile \"/env/lib/python3.7/site-packages/statsmodels/regression/init.py\", line 1, in\nfrom .linear_model import yule_walker\nFile \"/env/lib/python3.7/site-packages/statsmodels/regression/linear_model.py\", line 39, in\nfrom scipy.linalg import toeplitz\nFile \"/env/lib/python3.7/site-packages/scipy/init.py\", line 156, in\nfrom . import fft\nFile \"/env/lib/python3.7/site-packages/scipy/fft/init.py\", line 81, in\nfrom ._helper import next_fast_len\nFile \"/env/lib/python3.7/site-packages/scipy/fft/_helper.py\", line 4, in\nfrom . import _pocketfft\nFile \"/env/lib/python3.7/site-packages/scipy/fft/_pocketfft/init.py\", line 3, in\nfrom .basic import *\nFile \"/env/lib/python3.7/site-packages/scipy/fft/_pocketfft/basic.py\", line 8, in\nfrom . import pypocketfft as pfft\nImportError: SystemExit: 1\"\n*This happens only in Flask. When i use statsmodels\nI'm running it in flask and here are my complete list of packages:\nattrs==19.3.0\nautopep8==1.5\nbackcall==0.1.0\nbleach==3.1.0\ncachetools==4.0.0\ncattrs==1.0.0\ncertifi==2019.11.28\nchardet==3.0.4\nClick==7.0\ncloudstorage==0.10.0\ncycler==0.10.0\ndecorator==4.4.1\ndefusedxml==0.6.0\nentrypoints==0.3\nFlask==1.1.1\nFlask-Assets==2.0\nFlask-CacheBuster==1.0.0\nFlask-Cors==3.0.8\nFlask-SQLAlchemy==2.4.1\nflask-talisman==0.7.0\ngoogle-api-core==1.16.0\ngoogle-auth==1.11.0\ngoogle-cloud==0.34.0\ngoogle-cloud-core==1.2.0\ngoogle-cloud-storage==1.25.0\ngoogle-cloud-tasks==1.3.0\ngoogle-resumable-media==0.5.0\ngoogleapis-common-protos==1.51.0\ngrpc-google-iam-v1==0.12.3\ngrpcio==1.26.0\nidna==2.8\nimportlib-metadata==1.5.0\ninflect==3.0.2\ninflection==0.3.1\nipykernel==5.1.4\nipython==7.11.1\nipython-genutils==0.2.0\nipywidgets==7.5.1\nitsdangerous==1.1.0\njedi==0.16.0\nJinja2==2.11.0\njsonschema==3.2.0\njupyter==1.0.0\njupyter-client==5.3.4\njupyter-console==6.1.0\njupyter-contrib-core==0.3.3\njupyter-contrib-nbextensions==0.5.1\njupyter-core==4.6.1\njupyter-highlight-selected-word==0.2.0\njupyter-latex-envs==1.4.6\njupyter-nbextensions-configurator==0.4.1\nkiwisolver==1.1.0\nlooker-sdk==0.1.3b6\nlxml==4.5.0\nMarkupSafe==1.1.1\nmatplotlib==3.1.2\nmistune==0.8.4\nnatural==0.2.0\nnbconvert==5.6.1\nnbformat==5.0.4\nnltk==3.4.5\nnotebook==6.0.3\nnumpy==1.18.1\npandas==0.25.3\npandas-datareader==0.8.1\npandocfilters==1.4.2\nparso==0.6.0\npatsy==0.5.1\npexpect==4.8.0\npg8000==1.13.2\npickleshare==0.7.5\nprometheus-client==0.7.1\nprompt-toolkit==3.0.3\nprotobuf==3.11.2\npsycopg2==2.8.4\nptyprocess==0.6.0\npyasn1==0.4.8\npyasn1-modules==0.2.8\npycodestyle==2.5.0\nPygments==2.5.2\npyparsing==2.4.6\npyrsistent==0.15.7\npython-dateutil==2.8.1\npython-magic==0.4.15\npytz==2019.3\nPyYAML==5.3\npyzmq==18.1.1\nqtconsole==4.6.0\nrequests==2.22.0\nrsa==4.0\nscipy==1.4.1\nscramp==1.1.0\nseasonal==0.3.1\nSend2Trash==1.5.0\nsimple-salesforce==0.74.3\nsimplenlg==0.2.0\nsix==1.14.0\nSQLAlchemy==1.3.13\nstatsmodels==0.11.0\nstripe==2.42.0\nterminado==0.8.3\ntestpath==0.4.4\ntornado==6.0.3\ntraitlets==4.3.3\ntzlocal==2.0.0\nurllib3==1.25.8\nwcwidth==0.1.8\nwebapp2==2.5.2\nwebassets==2.0\nwebencodings==0.5.1\nWerkzeug==0.16.1\nwidgetsnbextension==3.5.1\nzipp==2.1.0```\n\nno error in ipython, but i get an error when i run it in flask", "issue_status": "Closed", "issue_reporting_time": "2020-01-30T07:33:23Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "2": {"issue_url": "https://github.com/pallets/flask/issues/3475", "issue_id": "#3475", "issue_summary": "Project is abandoned?", "issue_description": "prsolucoes commented 2 days ago\nHi,\nThis project is abandoned?\nThere is any roadmap?\nOr it is stable?\nThanks.\n1", "issue_status": "Closed", "issue_reporting_time": "2020-01-28T21:16:25Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "3": {"issue_url": "https://github.com/pallets/flask/issues/3474", "issue_id": "#3474", "issue_summary": "[Feature Request] Proxy Rewrite Support in url_for", "issue_description": "jeffsawatzky commented 7 days ago\nI would like url_for to support some sort of proxy rewrite rule when the Flask app is behind a proxy that does more than just append a prefix to the url.\nI'm aware of the werkzeug ProxyFix middleware that uses the X-Forwarded-Prefix to set the SCRIPT_NAME environ variable, which url_for appends to the url. But when the proxy does more that just append a prefix, and does some rewriting, I can't figure out how to get url_for to just work.\nI have a stack overflow questions here with some more details.", "issue_status": "Closed", "issue_reporting_time": "2020-01-23T15:15:42Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "4": {"issue_url": "https://github.com/pallets/flask/issues/3472", "issue_id": "#3472", "issue_summary": "Intersphinx error when building documentation", "issue_description": "sfermigier commented 8 days ago\nIntersphinx doesn't build document for my projects, due to missing https://flask.palletsprojects.com/objects.inv on the documentation site.\nMy current config:\nintersphinx_mapping = {\n    \"flask\": (\"https://flask.palletsprojects.com/\", None),\n}\nThe error messages:\nintersphinx inventory 'https://flask.palletsprojects.com/objects.inv' not fetchable due to <class 'requests.exceptions.HTTPError'>: 404 Client Error: Not Found for url: https://flask.palletsprojects.com/objects.inv", "issue_status": "Closed", "issue_reporting_time": "2020-01-22T09:25:28Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "5": {"issue_url": "https://github.com/pallets/flask/issues/3469", "issue_id": "#3469", "issue_summary": "Cannot set SameSite=None on session cookie", "issue_description": "bookernath commented 16 days ago \u2022\nedited\nExpected Behavior\nI should be able to set SESSION_COOKIE_SAMESITE to \"None\" in order to explicitly set SameSite=None on my session cookie.\nThis will allow my flask application to be loaded in an iframe with the session.\napp.config['SESSION_COOKIE_SAMESITE'] = \"None\"\nActual Behavior\nToday I can only set SESSION_COOKIE_SAMESITE to \"Strict\", \"Lax\", or None.\nIf set to None, it will actually not set a SameSite attribute at all on the session cookie, which Chrome will treat as SameSite=Lax starting in Chrome 80.\nI need to be able to set SESSION_COOKIE_SAMESITE to explicitly \"None\", thus causing SameSite=None to be set on the cookie, which in turn allows the cookie to be sent in cross-origin requests, such as when my flask application is loaded in an iframe.\nAs it is, these applications load in an iframe without a session cookie, which breaks their functionality.\nEnvironment\nPython version: 3.7.4\nFlask version: 1.1.1\nWerkzeug version: 0.16.0\nNote related Werkzeug issue which is tied up with the 1.0 release: pallets/werkzeug#1549\n2020-01-14T20:33:48.807523+00:00 app[web.1]: Traceback (most recent call last):\n2020-01-14T20:33:48.807525+00:00 app[web.1]: File \"/app/.heroku/python/lib/python3.7/site-packages/gunicorn/workers/sync.py\", line 135, in handle\n2020-01-14T20:33:48.807528+00:00 app[web.1]: self.handle_request(listener, req, client, addr)\n2020-01-14T20:33:48.807530+00:00 app[web.1]: File \"/app/.heroku/python/lib/python3.7/site-packages/gunicorn/workers/sync.py\", line 176, in handle_request\n2020-01-14T20:33:48.807534+00:00 app[web.1]: respiter = self.wsgi(environ, resp.start_response)\n2020-01-14T20:33:48.807536+00:00 app[web.1]: File \"/app/.heroku/python/lib/python3.7/site-packages/flask/app.py\", line 2463, in __call__\n2020-01-14T20:33:48.807538+00:00 app[web.1]: return self.wsgi_app(environ, start_response)\n2020-01-14T20:33:48.807540+00:00 app[web.1]: File \"/app/.heroku/python/lib/python3.7/site-packages/flask/app.py\", line 2449, in wsgi_app\n2020-01-14T20:33:48.807542+00:00 app[web.1]: response = self.handle_exception(e)\n2020-01-14T20:33:48.807544+00:00 app[web.1]: File \"/app/.heroku/python/lib/python3.7/site-packages/flask/app.py\", line 1866, in handle_exception\n2020-01-14T20:33:48.807546+00:00 app[web.1]: reraise(exc_type, exc_value, tb)\n2020-01-14T20:33:48.807548+00:00 app[web.1]: File \"/app/.heroku/python/lib/python3.7/site-packages/flask/_compat.py\", line 39, in reraise\n2020-01-14T20:33:48.807549+00:00 app[web.1]: raise value\n2020-01-14T20:33:48.807551+00:00 app[web.1]: File \"/app/.heroku/python/lib/python3.7/site-packages/flask/app.py\", line 2446, in wsgi_app\n2020-01-14T20:33:48.807553+00:00 app[web.1]: response = self.full_dispatch_request()\n2020-01-14T20:33:48.807554+00:00 app[web.1]: File \"/app/.heroku/python/lib/python3.7/site-packages/flask/app.py\", line 1952, in full_dispatch_request\n2020-01-14T20:33:48.807556+00:00 app[web.1]: return self.finalize_request(rv)\n2020-01-14T20:33:48.807557+00:00 app[web.1]: File \"/app/.heroku/python/lib/python3.7/site-packages/flask/app.py\", line 1969, in finalize_request\n2020-01-14T20:33:48.807559+00:00 app[web.1]: response = self.process_response(response)\n2020-01-14T20:33:48.807560+00:00 app[web.1]: File \"/app/.heroku/python/lib/python3.7/site-packages/flask/app.py\", line 2268, in process_response\n2020-01-14T20:33:48.807562+00:00 app[web.1]: self.session_interface.save_session(self, ctx.session, response)\n2020-01-14T20:33:48.807563+00:00 app[web.1]: File \"/app/.heroku/python/lib/python3.7/site-packages/flask/sessions.py\", line 387, in save_session\n2020-01-14T20:33:48.807565+00:00 app[web.1]: samesite=samesite,\n2020-01-14T20:33:48.807567+00:00 app[web.1]: File \"/app/.heroku/python/lib/python3.7/site-packages/werkzeug/wrappers/base_response.py\", line 481, in set_cookie\n2020-01-14T20:33:48.807568+00:00 app[web.1]: samesite=samesite,\n2020-01-14T20:33:48.807570+00:00 app[web.1]: File \"/app/.heroku/python/lib/python3.7/site-packages/werkzeug/http.py\", line 1161, in dump_cookie\n2020-01-14T20:33:48.807571+00:00 app[web.1]: raise ValueError(\"invalid SameSite value; must be 'Strict', 'Lax' or None\")\n2020-01-14T20:33:48.807573+00:00 app[web.1]: ValueError: invalid SameSite value; must be 'Strict', 'Lax' or None```", "issue_status": "Closed", "issue_reporting_time": "2020-01-14T20:55:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "6": {"issue_url": "https://github.com/pallets/flask/issues/3468", "issue_id": "#3468", "issue_summary": "TypeError: after_request() takes 0 positional arguments but 1 was given", "issue_description": "winfirm commented 16 days ago\nbefore_request\naddr\uff1a/\nmethod\uff1aGET\n---headers--start--\nHost: localhost:5000\nConnection: keep-alive\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML,\nlike Gecko) Chrome/72.0.3626.119 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/a\npng,/;q=0.8\nAccept-Encoding: gzip, deflate, br\nAccept-Language: zh-CN,zh;q=0.9,en;q=0.8\n---headers--end----\nGET args\uff1aImmutableMultiDict([])\nPOST args\uff1aImmutableMultiDict([])\n[2020-01-14 10:16:30,833] ERROR in app: Exception on / [GET]\nTraceback (most recent call last):\nFile \"c:\\python37\\lib\\site-packages\\flask\\app.py\", line 2446, in wsgi_app\nresponse = self.full_dispatch_request()\nFile \"c:\\python37\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch\n_request\nreturn self.finalize_request(rv)\nFile \"c:\\python37\\lib\\site-packages\\flask\\app.py\", line 1969, in finalize_requ\nest\nresponse = self.process_response(response)\nFile \"c:\\python37\\lib\\site-packages\\flask\\app.py\", line 2266, in process_respo\nnse\nresponse = handler(response)\nTypeError: after_request() takes 0 positional arguments but 1 was given\n[2020-01-14 10:16:30,834] ERROR in app: Request finalizing failed with an error\nwhile handling an error\nTraceback (most recent call last):\nFile \"c:\\python37\\lib\\site-packages\\flask\\app.py\", line 2446, in wsgi_app\nresponse = self.full_dispatch_request()\nFile \"c:\\python37\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch\n_request\nreturn self.finalize_request(rv)\nFile \"c:\\python37\\lib\\site-packages\\flask\\app.py\", line 1969, in finalize_requ\nest\nresponse = self.process_response(response)\nFile \"c:\\python37\\lib\\site-packages\\flask\\app.py\", line 2266, in process_respo\nnse\nresponse = handler(response)\nTypeError: after_request() takes 0 positional arguments but 1 was given\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\nFile \"c:\\python37\\lib\\site-packages\\flask\\app.py\", line 1969, in finalize_requ\nest\nresponse = self.process_response(response)\nFile \"c:\\python37\\lib\\site-packages\\flask\\app.py\", line 2266, in process_respo\nnse\nresponse = handler(response)\nTypeError: after_request() takes 0 positional arguments but 1 was given\n127.0.0.1 - - [14/Jan/2020 10:16:30] \"GET / HTTP/1.1\" 500 -", "issue_status": "Closed", "issue_reporting_time": "2020-01-14T02:19:53Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "7": {"issue_url": "https://github.com/pallets/flask/issues/3466", "issue_id": "#3466", "issue_summary": "session unavailable, an issue of tutorial.", "issue_description": "zxymike93 commented 17 days ago\nExpected Behavior\nI was working on the auth blueprint part of the tutorial. When I tested the login() function under the debug mode, with inputing correct pair of username/passowrd, it should've thrown werkzeug.routing.BuildError: Could not build url for endpoint 'index'..\n# flaskr/auth.py\n@bp.route('/login', methods=('GET', 'POST'))\ndef login():\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n        db = get_db()\n        err = None\n        # ...\n\n        if err is None:\n            session.clear()\n            session['user_id'] = user['id']\n            return redirect(url_for('index'))\n        # ...\n\n# flaskr/__init__.py\ndef create_app(test_config=None):\n    \"\"\"Instead of creating an app (instance of `Flask` globally),\n    loading configurations and other setups inside `create_app`.\n    \"\"\"\n    app = Flask(__name__, instance_relative_config=True)\n    app.config.from_mapping(\n        SECRECT_KEY='dev',\n        DATABASE=os.path.join(app.instance_path, 'flaskr.sqlite'),\n    )\n    # ...\nActual Behavior\nHowever, I got\n  File \"/.../.venv/lib/python3.7/site-packages/flask/app.py\", line 2463, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/.../.venv/lib/python3.7/site-packages/flask/app.py\", line 2449, in wsgi_app\n    response = self.handle_exception(e)\n  File \"/.../.venv/lib/python3.7/site-packages/flask/app.py\", line 1866, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/.../.venv/lib/python3.7/site-packages/flask/_compat.py\", line 39, in reraise\n    raise value\n  File \"/.../.venv/lib/python3.7/site-packages/flask/app.py\", line 2446, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/.../.venv/lib/python3.7/site-packages/flask/app.py\", line 1951, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"/.../.venv/lib/python3.7/site-packages/flask/app.py\", line 1820, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/.../.venv/lib/python3.7/site-packages/flask/_compat.py\", line 39, in reraise\n    raise value\n  File \"/.../.venv/lib/python3.7/site-packages/flask/app.py\", line 1949, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"/.../.venv/lib/python3.7/site-packages/flask/app.py\", line 1935, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"/.../pycourse/flaskr_project/flaskr/auth.py\", line 73, in login\n    session.clear()\n  File \"/.../.venv/lib/python3.7/site-packages/flask/sessions.py\", line 103, in _fail\n    \"The session is unavailable because no secret \"\nRuntimeError: The session is unavailable because no secret key was set.  Set the secret_key on the application to something unique and secret.\nSo I checked SECRET_KEY and session. And I was confused since the secret_key seemed to be set but the session was still null.\n<Config {'ENV': 'development', 'DEBUG': True, 'TESTING': False, ..., 'SECRECT_KEY': 'dev', 'DATABASE': '.../instance/flaskr.sqlite'}>\n\n<session> <NullSession {}>\nI tried to fixed it by using app.secret_key.\ndef create_app(test_config=None):\n    \"\"\"Instead of creating an app (instance of `Flask` globally),\n    loading configurations and other setups inside `create_app`.\n    \"\"\"\n    app = Flask(__name__, instance_relative_config=True)\n    app.config.from_mapping(\n        SECRECT_KEY='dev',\n        DATABASE=os.path.join(app.instance_path, 'flaskr.sqlite'),\n    )\n    app.secret_key = 'secret'\n    # ...\nThis line didn't change the SECRET_KEY in app.config. But this time I got the werkzeug.routing.BuildError.\nEnvironment\nPython version: 3.7.2\nFlask version: 1.1.1\nWerkzeug version: 0.16.0\n(Also the tutorial is from) Doc version: 1.1.x", "issue_status": "Closed", "issue_reporting_time": "2020-01-13T17:50:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "8": {"issue_url": "https://github.com/pallets/flask/issues/3464", "issue_id": "#3464", "issue_summary": "Werkzeug base_response.py doesn't support Flasks response.set_cookie", "issue_description": "MertDalbudak commented 21 days ago \u2022\nedited\nI want to simply response with a cookie to a client. But I get a strange error from:\n/usr/local/lib/python3.6/dist-packages/werkzeug/wrappers/base_response.py.\nError log here: https://pastebin.com/XjqFt7tW\nresponse = jsonify(filterData)\nresponse.headers = api_response['headers']\nresponse.set_cookie('name', 'value')\nreturn response\nfilterData is a simple dict\nPython 3.6.9\nFlask 1.1.1\nWerkzeug 0.16.0", "issue_status": "Closed", "issue_reporting_time": "2020-01-09T20:44:16Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "9": {"issue_url": "https://github.com/pallets/flask/issues/3463", "issue_id": "#3463", "issue_summary": "Flask celery broker(rabbitmq cluster) failover not working", "issue_description": "shanmukha1211499 commented 24 days ago\nI have a python(2.7) flask(0.10.1) app running and configured celery(3.1.25) along with it in the following way\ntasks.py\nfrom celery import Celery\nbroker_urls = [\n    'amqp://my_user:passwd@rabbit-host-1:5672//',\n    'amqp://my_user:passwd@rabbit-host-2:5672//',\n    'amqp://my_user:passwd@rabbit-host-3:5672//',\n]\ncelery = Celery('tasks', broker=broker_urls)\ncelery.conf.BROKER_FAILOVER_STRATEGY = \"round-robin\"\n\n@celery.task\ndef add(x, y):\n    return x + y\napp.py\nfrom gevent.wsgi import WSGIServer\nfrom flask import Flask\n\napp = Flask(\"testapp\")\nhttp_server = WSGIServer(('',8000), app)\nhttp_server.serve_forever()\nurls.py\nfrom flask import Blueprint\n\napi = Blueprint('api',__name__)\n\n@api.route(\"/\")\ndef index_api():\n    add(10,20)\nI run the application as python app.py,\nWhen I run the flask application if rabbit-host-1 is down it is picking up the next live broker\nrabbit-host-2 and working fine. But if rabbit-host-1 is down after I started my app I think it is still connected to rabbit-host-1 and things are not working even rabbit-host-2 and rabbit-host-3 are alive.\nBut the celery worker was able to failover immediately when any of the brokers are down, by using given round-robin fashion.\ncelery worker --app=tasks\nHave I missed something to configure properly which is causing failover not to work with flask?", "issue_status": "Closed", "issue_reporting_time": "2020-01-06T12:46:37Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "10": {"issue_url": "https://github.com/pallets/flask/issues/3459", "issue_id": "#3459", "issue_summary": "AttributeError: 'function' object has no attribute 'name' when blueprint is a function", "issue_description": "rickwierenga commented on 30 Dec 2019\nConsider the following blueprint file:\nfrom flask import Blueprint\n\nbp = Blueprint('bp', __name__)\n\n\n@book.route('/')\ndef bp():\n    return \"hello\"\nWhen one tries to register bp from this file like so:\nfrom app.bp import bp\napp.register_blueprint(bp)\nThis error is raised:\nAttributeError: 'function' object has no attribute 'name'\nThe cause is obvious, but the error message does not correspond with the actual error. This could be fixed by checking if an added blueprint is of type Blueprint, or a subclass, and returning an error if that's not the case.", "issue_status": "Closed", "issue_reporting_time": "2019-12-29T21:21:57Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "11": {"issue_url": "https://github.com/pallets/flask/issues/3457", "issue_id": "#3457", "issue_summary": "app.run() doesn't work when port is not specified in `SERVER_NAME`", "issue_description": "rickywxg commented on 29 Dec 2019\nExpected Behavior\napp.run() should work when port is not specified in SERVER_NAME.\nfrom flask import Flask\n\napp = Flask(__name__)\napp.config['SERVER_NAME'] = 'example.com'\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n\napp.run()\nActual Behavior\napplication fails during start\nTraceback (most recent call last):\n  File \"mini_svr_2.py\", line 10, in <module>\n    app.run()\n  File \"/Users/rickwang/Source/flask/src/flask/app.py\", line 973, in run\n    port = int(next((p for p in (port, sn_port) if p is not None), _port))\nValueError: invalid literal for int() with base 10: '\nEnvironment\nPython version: Python 3.7\nFlask version: latest 1.1.2.dev0\nWerkzeug version: 0.16.0", "issue_status": "Closed", "issue_reporting_time": "2019-12-29T14:01:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "12": {"issue_url": "https://github.com/pallets/flask/issues/3455", "issue_id": "#3455", "issue_summary": "Flask run command breaking with werkzeug.wrappers", "issue_description": "M4cs commented on 24 Dec 2019 \u2022\nedited\nI accidentally deleted my virtualenv that I had generated a few weeks ago. I tried to reinstall my dependencies and now I get an error on startup when before it would work fine. Using .env/bin/uwsgi --http :9800 --file ./wsgi.py --callable app also breaks with the same traceback. This was after I noticed a vulnerability was in the Werkzeug module of GitHub but hadn't reinstalled a new version. Can't seem to find a working version setup now.\nI'm able to run from werkzeug.wrapper.json import JSONmixin in the interpreter without failure.\nExpected Behavior\nflask run should run my application.\nActual Behavior\nflask run returns an import error with werkzeug for JSONmixin. Below is the traceback:\nTraceback (most recent call last):\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/bin/flask\", line 6, in <module>\n    from flask.cli import main\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/flask/__init__.py\", line 21, in <module>\n    from .app import Flask\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/flask/app.py\", line 69, in <module>\n    from .wrappers import Request\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/flask/wrappers.py\", line 14, in <module>\n    from werkzeug.wrappers.json import JSONMixin as _JSONMixin\nModuleNotFoundError: No module named 'werkzeug.wrappers.json'; 'werkzeug.wrappers' is not a package\nEnvironment\nPython version: 3.6.8\nFlask version: 1.1.1\nWerkzeug version: 0.16.0", "issue_status": "Closed", "issue_reporting_time": "2019-12-24T04:16:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "13": {"issue_url": "https://github.com/pallets/flask/issues/3454", "issue_id": "#3454", "issue_summary": "flask.request cannot be patched by unittest.mock.patch in Python 3.8", "issue_description": "snordhausen commented on 23 Dec 2019\nExpected Behavior\nIn Python 3.7.5, this works just fine and does nothing:\nfrom unittest.mock import patch\nimport flask\n\n@patch(\"flask.request\")\ndef foo(patched_request):\n    pass\n\nfoo()\nActual Behavior\nIn Python 3.8.0, it fails with\nRuntimeError: Working outside of request context.\nThis happens because patch now tries to return an AsyncMock in some cases and Python's mock.py line 51 calls asyncio.iscoroutinefunction() on flask.request. This will then call getattr(func, '_is_coroutine', None) in coroutines.py line 167 which flask then complains about.\nIt might be fixable by adding a special case to raise AttributeError instead when the _is_coroutine attribute is accessed.\nEnvironment\nPython version: 3.8.0\nFlask version: 1.1.1 and git master\nWerkzeug version: 0.16.0 and git master", "issue_status": "Closed", "issue_reporting_time": "2019-12-23T14:58:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "14": {"issue_url": "https://github.com/pallets/flask/issues/3451", "issue_id": "#3451", "issue_summary": "unable to add headers to test_request_context", "issue_description": "austinhoag commented on 18 Dec 2019 \u2022\nedited\nI have a testing fixture to make a test client in my flask app:\n@pytest.fixture(scope='session') \ndef test_client():\n \"\"\" Create the application and the test client. \n \"\"\"\n print('----------Setup test client----------')\n app = create_app(config_class=config.TestConfig)\n testing_client = app.test_client()\n\n ctx = app.test_request_context() \n ctx.push()\n yield testing_client # this is where the testing happens\n print('-------Teardown test client--------')\n ctx.pop()\nI would like to add a header for \"User-Agent\" to this test request context because in my application I check the browser of the user. I am retrieving the browser name in my app via\nuser_agent = flask.request.user_agent.browser\nThis line returns None if I use the test client above. While I can successfully set the 'User-Agent' header in individual requests within a single test, e.g.:\nuser_agent_str = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'\n\nresponse = test_client.get('/some_flask_route',\n  environ_base={'HTTP_USER_AGENT': user_agent_str},\n  follow_redirects=True)\nAfter doing this:\nflask.request.user_agent.browser\nreturns 'chrome' as expected.\nHowever, this is very redundant because it requires me to insert the environ_base line of code into every single one of my many tests.\nExpected Behavior\nI would expect that I could set the header when I make the test request context in my test fixture, e.g.:\nuser_agent_str = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'\n\n@pytest.fixture(scope='session') \ndef test_client():\n \"\"\" Create the application and the test client. \n \"\"\"\n print('----------Setup test client----------')\n app = create_app(config_class=config.TestConfig)\n testing_client = app.test_client()\n ctx = app.test_request_context(environ_base={'HTTP_USER_AGENT': user_agent_str}) \n ctx.push()\n yield testing_client # this is where the testing happens\n print('-------Teardown test client--------')\n ctx.pop()\nand this would set the environment for all requests, eliminating the need to set environ_base in every one of my requests.\nActual Behavior\nWhile adding environ_base into test_request_context() does not break the fixture, it does not set the 'User-Agent' header and\nflask.request.user_agent.browser\nreturns None.\nEnvironment\nPython version: 3.7.3\nFlask version: 1.1.1\nWerkzeug version: 0.15.4\nI have tried the solution suggested in the question here: https://stackoverflow.com/questions/15278285/setting-mocking-request-headers-for-flask-app-unit-test\nbut it does nothing. I am simply running the flask server on localhost with no deployment yet, i.e. essentially just:\napp = Flask(__name__)\napp.run(host='127.0.0.1',port=5000,debug=True)", "issue_status": "Closed", "issue_reporting_time": "2019-12-18T16:09:15Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "15": {"issue_url": "https://github.com/pallets/flask/issues/3450", "issue_id": "#3450", "issue_summary": "Feature request: Access jinja environment options for render_template", "issue_description": "Matteljay commented on 18 Dec 2019\nIs there a way to enable Jinja's LINE_STATEMENT_PREFIX option from inside of Flask?\nI'm currently using this ugly hacky way:\ndef customRender(file, **kwargs):\n    env = jinja2.Environment(loader=jinja2.FileSystemLoader(searchpath=\"./templates\"), line_statement_prefix='#')\n    template = env.get_template(file)\n    return template.render(kwargs)\nPython version: 3.7.4\nFlask version: 1.1.1\nWerkzeug version: 0.16.0", "issue_status": "Closed", "issue_reporting_time": "2019-12-17T22:19:48Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "16": {"issue_url": "https://github.com/pallets/flask/issues/3449", "issue_id": "#3449", "issue_summary": "Unexpected argument: PyCharm set_cookie samesite", "issue_description": "danieldaeschle commented on 18 Dec 2019\nExpected Behavior\nPyCharm shouldn't highlight the line as an warning\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.router(\"/\")\ndef index():\n    resp = redirect(\"\")\n    resp.set_cookie(\"key\", \"val\", samesite='strict')\nActual Behavior\nEnvironment\nPython version: 3.7.5\nFlask version: 1.1.1\nWerkzeug version: 0.16.0", "issue_status": "Closed", "issue_reporting_time": "2019-12-17T19:20:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "17": {"issue_url": "https://github.com/pallets/flask/issues/3448", "issue_id": "#3448", "issue_summary": "ClientDisconnected error when trying to look up request.data after an exception inside the Werkzeug debugger", "issue_description": "Contributor\nalexwlchan commented on 17 Dec 2019\nThis is a minimised version of an issue I ran into on a larger project. This is possibly working-as-designed, but it seemed odd, so I figured I'd report it here just in case.\nConsider the following app:\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef index():\n    return \"\"\"\n    <html>\n      <form action=\"/explode\" method=\"post\">\n        <input name=\"text\">\n        <button type=\"submit\">BOOM!</button>\n      </form>\n    </html>\n    \"\"\"\n\n\n@app.route(\"/explode\", methods=[\"POST\"])\ndef explode():\n    assert 0\n\n\napp.run(debug=True)\nYou run this app, the user is presented with a single text field. They enter some text, click \"submit\", and the AssertionError causes a server error to be thrown. You're dropped into the Werkzeug console.\nI open the interactive debugging console, type request.data, and a stack trace immediately pours all over the screen:\n[console ready]\n>>> request.data\nTraceback (most recent call last):\n  File \"/Users/alexwlchan/.virtualenvs/tempenv-388f210986880/lib/python3.7/site-packages/werkzeug/wsgi.py\", line 939, in read\n    read = self._read(to_read)\n\nDuring handling of the above exception, another exception occurred:\n  File \"/Users/alexwlchan/.virtualenvs/tempenv-388f210986880/lib/python3.7/site-packages/werkzeug/formparser.py\", line 131, in wrapper\n    return f(self, stream, *args, **kwargs)\n  File \"/Users/alexwlchan/.virtualenvs/tempenv-388f210986880/lib/python3.7/site-packages/werkzeug/formparser.py\", line 264, in _parse_urlencoded\n    form = url_decode_stream(stream, self.charset, errors=self.errors, cls=self.cls)\n  File \"/Users/alexwlchan/.virtualenvs/tempenv-388f210986880/lib/python3.7/site-packages/werkzeug/urls.py\", line 893, in url_decode_stream\n    return cls(decoder)\n  File \"/Users/alexwlchan/.virtualenvs/tempenv-388f210986880/lib/python3.7/site-packages/werkzeug/datastructures.py\", line 420, in __init__\n    for key, value in mapping or ():\n  File \"/Users/alexwlchan/.virtualenvs/tempenv-388f210986880/lib/python3.7/site-packages/werkzeug/urls.py\", line 897, in _url_decode_impl\n    for pair in pair_iter:\n  File \"/Users/alexwlchan/.virtualenvs/tempenv-388f210986880/lib/python3.7/site-packages/werkzeug/wsgi.py\", line 801, in make_chunk_iter\n    first_item = next(_iter, \"\")\n  File \"/Users/alexwlchan/.virtualenvs/tempenv-388f210986880/lib/python3.7/site-packages/werkzeug/wsgi.py\", line 681, in _make_chunk_iter\n    item = _read(buffer_size)\n  File \"/Users/alexwlchan/.virtualenvs/tempenv-388f210986880/lib/python3.7/site-packages/werkzeug/wsgi.py\", line 941, in read\n    return self.on_disconnect()\n  File \"/Users/alexwlchan/.virtualenvs/tempenv-388f210986880/lib/python3.7/site-packages/werkzeug/wsgi.py\", line 911, in on_disconnect\n    raise ClientDisconnected()\n\nDuring handling of the above exception, another exception occurred:\n  File \"/Users/alexwlchan/.virtualenvs/tempenv-388f210986880/lib/python3.7/site-packages/werkzeug/wsgi.py\", line 939, in read\n    read = self._read(to_read)\n\nDuring handling of the above exception, another exception occurred:\n  File \"<debugger>\", line 1, in <module>\n    request.data\n  File \"/Users/alexwlchan/.virtualenvs/tempenv-388f210986880/lib/python3.7/site-packages/werkzeug/local.py\", line 348, in __getattr__\n    return getattr(self._get_current_object(), name)\n  File \"/Users/alexwlchan/.virtualenvs/tempenv-388f210986880/lib/python3.7/site-packages/werkzeug/utils.py\", line 90, in __get__\n    value = self.func(obj)\n  File \"/Users/alexwlchan/.virtualenvs/tempenv-388f210986880/lib/python3.7/site-packages/werkzeug/wrappers/base_request.py\", line 425, in data\n    return self.get_data(parse_form_data=True)\n  File \"/Users/alexwlchan/.virtualenvs/tempenv-388f210986880/lib/python3.7/site-packages/werkzeug/wrappers/base_request.py\", line 455, in get_data\n    self._load_form_data()\n  File \"/Users/alexwlchan/.virtualenvs/tempenv-388f210986880/lib/python3.7/site-packages/flask/wrappers.py\", line 88, in _load_form_data\n    RequestBase._load_form_data(self)\n  File \"/Users/alexwlchan/.virtualenvs/tempenv-388f210986880/lib/python3.7/site-packages/werkzeug/wrappers/base_request.py\", line 318, in _load_form_data\n    self._get_stream_for_parsing(), mimetype, content_length, options\n  File \"/Users/alexwlchan/.virtualenvs/tempenv-388f210986880/lib/python3.7/site-packages/werkzeug/formparser.py\", line 232, in parse\n    return parse_func(self, stream, mimetype, content_length, options)\n  File \"/Users/alexwlchan/.virtualenvs/tempenv-388f210986880/lib/python3.7/site-packages/werkzeug/formparser.py\", line 135, in wrapper\n    exhaust()\n  File \"/Users/alexwlchan/.virtualenvs/tempenv-388f210986880/lib/python3.7/site-packages/werkzeug/wsgi.py\", line 925, in exhaust\n    self.read(chunk)\n  File \"/Users/alexwlchan/.virtualenvs/tempenv-388f210986880/lib/python3.7/site-packages/werkzeug/wsgi.py\", line 941, in read\n    return self.on_disconnect()\n  File \"/Users/alexwlchan/.virtualenvs/tempenv-388f210986880/lib/python3.7/site-packages/werkzeug/wsgi.py\", line 911, in on_disconnect\n    raise ClientDisconnected()\nwerkzeug.exceptions.ClientDisconnected: 400 Bad Request: The browser (or proxy) sent a request that this server could not understand.\n\n>>> \nIf we modify the explode() method to print the value of request.data before throwing, like so:\n@app.route(\"/explode\", methods=[\"POST\"])\ndef explode():\n    print(request.data)\n    assert 0\nthen looking up request.data in the console works correctly. (In this case, it prints b''.)\nSame request, different server code \u2013 which makes me think \u201cthe browser (or proxy) sent a request that this server could not understand\u201d wasn\u2019t actually the underlying issue, because it could parse the (empty) request body just fine before it had thrown.\nEnvironment\nPython version: 3.7.5\nFlask version: 1.1.1\nWerkzeug version: 0.16.0", "issue_status": "Closed", "issue_reporting_time": "2019-12-16T21:45:27Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "18": {"issue_url": "https://github.com/pallets/flask/issues/3447", "issue_id": "#3447", "issue_summary": "Flask crashes when running as a Windows Service (pywin32)", "issue_description": "axc450 commented on 16 Dec 2019 \u2022\nedited\nExpected Behavior\nFlask app should start normally. Im not sure where stdout/stderr go when running as a Windows service, but it should not crash.\nExample service wrapper\nimport servicemanager\nimport socket\nimport sys\nimport win32event\nimport win32service\nimport win32serviceutil\nimport os\n\nclass Service(win32serviceutil.ServiceFramework):\n    _svc_name_ = \"Name\"\n    _svc_display_name_ = \"Display Name\"\n    _svc_description_ = \"Description\"\n\n    def __init__(self, args):\n        win32serviceutil.ServiceFramework.__init__(self, args)\n        self.hWaitStop = win32event.CreateEvent(None, 0, 0, None)\n        socket.setdefaulttimeout(60)\n\n    def SvcStop(self):\n        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)\n        win32event.SetEvent(self.hWaitStop)\n        self.ReportServiceStatus(win32service.SERVICE_STOPPED)\n\n    def SvcDoRun(self):\n        os.chdir(os.path.dirname(__file__))\n        from . import __main__\n        __main__.app.run(port=8080, host=\"0.0.0.0\")\n\nif __name__ == \"__main__\":\n    if len(sys.argv) == 1:\n        servicemanager.Initialize()\n        servicemanager.PrepareToHostSingle(Service)\n        servicemanager.StartServiceCtrlDispatcher()\n    else:\n        win32serviceutil.HandleCommandLine(Service)\n__main__ just contains a basic flask app.\nThis might be a problem with click or pywin32.\nI am using the below monkey patch in __main__ to avoid this issue. It would be nice if I didnt have to do this or there was a better workaround (or even a fix!).\n# Stops app from crashing when started as a service\nflask.cli.show_server_banner = lambda *args: None\nActual Behavior\nActual stack trace\nTraceback (most recent call last):\n  File \"C:\\test\\ui.py\", line 31, in SvcDoRun\n    __main__.main(port=8080, host=\"0.0.0.0\")\n  File \"C:\\test\\ui\\__main__.py\", line 28, in SvcDoRun\n    app.run(**args)\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\flask\\app.py\", line 938, in run\n    cli.show_server_banner(self.env, self.debug, self.name, False)\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\flask\\cli.py\", line 629, in show_server_banner\n    click.echo(message)\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\click\\utils.py\", line 260, in echo\n    file.write(message)\nAttributeError: 'NoneType' object has no attribute 'write'\nEnvironment\nPython version: 3.7\nFlask version: 1.02\nWerkzeug version: 0.14.1\nRelated Issue: top2topii/FlaskServiceWin32#1", "issue_status": "Closed", "issue_reporting_time": "2019-12-16T18:25:22Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "19": {"issue_url": "https://github.com/pallets/flask/issues/3446", "issue_id": "#3446", "issue_summary": "How to use Sqlalchemy in factories", "issue_description": "jackadam1981 commented on 16 Dec 2019\nFactors is a very useful function, which is used to generate flask with different configuration files in different environments\nLook at the example, it is well integrated with flask SQL alchemy\nFlask Sqlalchemy only needs db.init app (APP)\nSqlalchemy needs more information to set up\nengine = create_engine('sqlite:////tmp/test.db', convert_unicode=True)\ndb_session = scoped_session(sessionmaker(autocommit=False,autoflush=False,bind=engine))\nBase = declarative_base()\nBase.query = db_session.query_property()\nHow to combine the two effectively?\nI'm sorry for my poor English.", "issue_status": "Closed", "issue_reporting_time": "2019-12-16T10:07:02Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "20": {"issue_url": "https://github.com/pallets/flask/issues/3444", "issue_id": "#3444", "issue_summary": "challenge load_dotenv and chdir assumption", "issue_description": "robshep commented on 13 Dec 2019 \u2022\nedited\nRe: https://github.com/pallets/flask/blob/master/src/flask/cli.py#L607\nExpected Behavior\nShould not change directory, or at least log a warning that is happening.\nCause\nHave a package tree that is not in the root of the project.\nActual Behavior\nChanges CWD of the process.\nIf PYTHONPATH is not set then werkzeug's debug reload fails.\nrelative file path do not resolve.\nSuggestion.\nAllow a toggle environment variable to disable this behaviour.\nEnvironment\nPython version: 3.6\nFlask version: 1.1.1\nWerkzeug version: 0.16\nNotes\nWe have a multi-program codebase where there is lots of shared code and a couple of Flask webapps, along with other programs in the same project tree. A shared .env (which we had no idea was loaded, just because we have python dotenv installed)\nThis file stores common paths to other resources, services etc.\nThe python codebase is in $PROJECT_ROOT/codebase/src and there are lots of other things in the root (like frontend SPA sources etc)", "issue_status": "Closed", "issue_reporting_time": "2019-12-13T15:05:33Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "21": {"issue_url": "https://github.com/pallets/flask/issues/3442", "issue_id": "#3442", "issue_summary": "Files with \\xfa (\u00fa) in the filename don't end up in request.files", "issue_description": "ArendJanKramer commented on 9 Dec 2019 \u2022\nedited\nExpected Behavior\nrequest.files['file'] should contain the file. It doesn't. File contents are visible in request.stream.read().\nRaw request in attachment (request.stream.read()):\nrequest.bin.zip\nThis only occurs with funky characters in the filename. Such as Ofsl\u00fatdyk.jpg. Same file without special character works as expected.\n@app.route(f\"/images\", methods=['GET', 'POST', 'PUT'])\ndef images_endpoint(project, group):\n    user = get_user(request.headers)\n\n    if request.method in ['PUT', 'POST']:\n        file = request.files['file'] # Returns 400 to client. \nNo errors in console.\nActual Behavior\nFlask returning 400 to client.\nEnvironment\nPython version: 3.6.9\nFlask version: 1.1.1\nWerkzeug version: 0.16.0", "issue_status": "Closed", "issue_reporting_time": "2019-12-09T13:11:31Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "22": {"issue_url": "https://github.com/pallets/flask/issues/3438", "issue_id": "#3438", "issue_summary": "Shorter forms for url_for(\"static\", ...)", "issue_description": "famecastle commented on 25 Nov 2019\nI can't seem to find a good place to share enhancement proposals and I've not come across any similar idea, so I thought I'd just ask it here. Coding static \"/static\" URLs is not the recommended style and we should use {{ url_for('static', filename='xyz.abc') }} in templates. While this is a great way of keeping Flask simple and dynamic, it's also becoming quite a lot of characters there if we have more resources we'd like to link to. Hence, wouldn't it be a considerably comfortable alternative if we had short forms like {{ u(\"static\", \"xyz.abc\") }} or at least for the static files like this: {{ s(\"xyz.abc\") }} ?\nI know this reduces readability, but inside a <link>s href it's self-explanatory and still just an additional way of specifying resources in a shorter form.", "issue_status": "Closed", "issue_reporting_time": "2019-11-25T07:48:16Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "23": {"issue_url": "https://github.com/pallets/flask/issues/3436", "issue_id": "#3436", "issue_summary": "unable to trigger flask view function using href inside a tag inside select", "issue_description": "santhoshnumberone commented on 20 Nov 2019\nI have select inside the html\n<select class=\"js-select2 partner_list\" id=\"partner_option\" name=\"partner_list_select\" onchange=\"myFunction()\">\n      <option value = \"choose\">Choose an option</option>\n      <option value = \"active_partner\"><a href=\"{{url_for('active_partners')}}\">Active Partners</a></option>\n      <option value = \"filter_partner\">Filter/Edit Partner</option>\n      <option value = \"add_new_partner\">New Partner</option>\n</select>\ntriggering myfunction() works fine on selecting the option.\nI want to run a flask view function when Active Partner option is selected\nI did import url_for\nfrom flask import url_for\nI have a simple print command when the this flask view function is called\nserver.py\n@app.route('/all_active_partners')\ndef active_partners() :\n    print('HERE#############################')\n    return redirect('/')\nWhen i click on the option Active Partners, the active_partners flask view function never gets called!\nwhen I load this link http://127.0.0.1:5000/all_active_partners\nI get\nExpected Behavior\nHERE#############################\nWhere am I going wrong?\nActual Behavior\nNothing\nEnvironment\nPython version: 3.6.8\nFlask version: 1.1.1\nWerkzeug version: 0.16.0", "issue_status": "Closed", "issue_reporting_time": "2019-11-20T09:32:18Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "24": {"issue_url": "https://github.com/pallets/flask/issues/3433", "issue_id": "#3433", "issue_summary": "flask reading .txt files line by line", "issue_description": "BMarquiz commented on 19 Nov 2019\nwhen it tried to read text file with\nf=open('filename.txt','r')\nf.read()\nit's shows me the lines like one line 1-sjdhjfh 2-djdhsh 3-jkjsla\nbut I want to view lines in my html like this\n1-sjdhjfh\n2-djdhsh\n3-jkjsla", "issue_status": "Closed", "issue_reporting_time": "2019-11-18T20:26:28Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "25": {"issue_url": "https://github.com/pallets/flask/issues/3431", "issue_id": "#3431", "issue_summary": "Only lazy load on reload", "issue_description": "Member\ndavidism commented on 18 Nov 2019\nThe default behavior of the flask run command is to lazily import the application if the reloader is enabled. This prevents syntax errors from crashing the app on reload, but it also means that such errors are deferred until the first request.\nIf the reloader is enabled, use eager loading the first time to show errors immediately. This way, initial errors will be shown to the user when they run the command, but errors introduced later will not crash the server.", "issue_status": "Closed", "issue_reporting_time": "2019-11-18T15:50:16Z", "fixed_by": "#3434", "pull_request_summary": "lazy load app on reload only", "pull_request_description": "Member\ndavidism commented on 19 Nov 2019 \u2022\nedited\nfixes #3431\nfixes #3430\nIf neither --eager-loading or --lazy-loader are passed to flask run, the default is now to eager load on the first run, then lazy load on reloads. This makes the command fail immediately if there is already an error, and the server remains up if errors are introduced later.", "pull_request_status": "Merged", "issue_fixed_time": "2019-11-19T02:22:38Z", "files_changed": [["3", "CHANGES.rst"], ["6", "docs/quickstart.rst"], ["93", "docs/server.rst"], ["11", "src/flask/cli.py"]]}, "26": {"issue_url": "https://github.com/pallets/flask/issues/3430", "issue_id": "#3430", "issue_summary": "eager loading is not documented", "issue_description": "gward commented on 18 Nov 2019\nI have been annoyed for a while by Flask's lazy loading feature, without even knowing about the feature or why it was annoying me. (The specific problem: when I have a bug in my app factory that should cause an immediate crash on startup, Flask swallowed the exception and only showed it to me with the first request.)\nSo this morning, I dug into the code and learned that this is not a bug, but clearly a deliberate feature added back in 2014 ago. I also learned about the workaround for this feature: flask run --eager-loading. Perfect! Nothing to fix here, right?\nSo what's the problem? Documentation! I had to dig into the source code to understand what was going on, and to figure out how make Flask behave the way I want. That should be described in the manual.\nExpected Behavior\nIn my perfect world, a bug in the app factory would cause an immediate crash on startup. But since delaying such crashes was clearly added deliberately to Flask, and has been there for 5 years, I do NOT propose changing this behaviour.\nWhat should happen: the next person who is annoyed or confused by this behaviour should find an explanation and a workaround in the docs.\nimport flask\n\napp = flask.Flask(__nam__)                     # <<< TYPO!!!\n\n@app.route('/')\ndef index():\n    return flask.make_response({\"foo\": 42}, 200)\nActual Behavior\nI google'ed, I searched the manual, and I could not figure out why Flask was making it hard to see my bugs. I had to read the source code to find out about --eager-loading.\nEnvironment\nPython version: 3.6, 3.7\nFlask version: 1.1.1\nWerkzeug version: 0.16.0", "issue_status": "Closed", "issue_reporting_time": "2019-11-18T15:08:46Z", "fixed_by": "#3434", "pull_request_summary": "lazy load app on reload only", "pull_request_description": "Member\ndavidism commented on 19 Nov 2019 \u2022\nedited\nfixes #3431\nfixes #3430\nIf neither --eager-loading or --lazy-loader are passed to flask run, the default is now to eager load on the first run, then lazy load on reloads. This makes the command fail immediately if there is already an error, and the server remains up if errors are introduced later.", "pull_request_status": "Merged", "issue_fixed_time": "2019-11-19T02:22:38Z", "files_changed": [["3", "CHANGES.rst"], ["6", "docs/quickstart.rst"], ["93", "docs/server.rst"], ["11", "src/flask/cli.py"]]}, "27": {"issue_url": "https://github.com/pallets/flask/issues/3429", "issue_id": "#3429", "issue_summary": "Static file with UTF-8 characters can not be served from ubuntu 18.04 with UTF-8 system encoding.", "issue_description": "dmathijs commented on 15 Nov 2019\nExpected Behavior\nStatic file from under static path should be served if it has UTF-8 encoded characters in its name.\nI'm running Flask in combination with Gunicorn. Although my ubuntu system encoding is UTF-8 it doesn't seem to behave correctly.\n# simple file name:\n42%C3%A9.jpg\nActual Behavior\nI get a 404 status code\nEnvironment\nPython version: 3.6.8\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2019-11-15T16:50:46Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "28": {"issue_url": "https://github.com/pallets/flask/issues/3428", "issue_id": "#3428", "issue_summary": "Grammatical error", "issue_description": "ssi-anik commented on 15 Nov 2019\nJust a grammatical error. Expecting `a(n) Exception` instead of `a Exception` To reproduce: return an exception from a view. * Python version: `3.7` * Flask version: `1.1.1` * Werkzeug version: `0.16.0`", "issue_status": "Closed", "issue_reporting_time": "2019-11-15T13:32:27Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "29": {"issue_url": "https://github.com/pallets/flask/issues/3424", "issue_id": "#3424", "issue_summary": "Request fail on parsing json body with accent character", "issue_description": "oliviercperrier commented on 13 Nov 2019 \u2022\nedited\nI am calling an endpoint i made to update a customer. When passing my json body i get a 400 Bad request. Seems like a json body that contains accent characters is not parsed correctly by the request object.\nSo this is the json body im sending to my endpoint:\n{\n  \"last_name\": \"G\u00e9linas\"\n}\nExpected Behavior\nThe get_json fonction should not return a 400 Bad Request\nrequest.get_json(force=True)\nThe request.data should not remove the last } from the body when it contains accent character\nrequest.data\n# Should contain : \"b'{\\\\n \\\"last_name\\\": \\\"G\\\\xc3\\\\xa9linas\\\"\\\\n}'\"\nActual Behavior\nWhen reaching the endpoint, i am using the request object provided by flask to retrieve the body like so:\nrequest.get_json(force=True)\nBut with this code, i am getting a 400 Bad Request error. So i try using raw data instead like so:\nrequest.data\nI found out the request.data contains:\n\"b'{\\\\n \\\"last_name\\\": \\\"G\\\\xc3\\\\xa9linas\\\"\\\\n'\"\nAs you can see, there is a missing } at the end which brakes any call to json.loads function\nEnvironment\nPython version: 3.7.4\nFlask version: 1.1.1\nWerkzeug version: 0.16.0", "issue_status": "Closed", "issue_reporting_time": "2019-11-13T17:38:54Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "30": {"issue_url": "https://github.com/pallets/flask/issues/3422", "issue_id": "#3422", "issue_summary": "Getting KeyError: 'REQUEST_METHOD' sometimes", "issue_description": "mdnahian commented on 12 Nov 2019\nGetting this error sometimes when running flask with uwsgi and nginx:\nPossibly similar to the issue here: 3357?\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.6/site-packages/flask/app.py\", line 2463, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/usr/local/lib/python3.6/site-packages/flask_uwsgi_websocket/_gevent.py\", line 59, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/usr/local/lib/python3.6/site-packages/flask/app.py\", line 2453, in wsgi_app\n    return response(environ, start_response)\n  File \"/usr/local/lib/python3.6/site-packages/werkzeug/wrappers/base_response.py\", line 700, in __call__\n    app_iter, status, headers = self.get_wsgi_response(environ)\n  File \"/usr/local/lib/python3.6/site-packages/werkzeug/wrappers/base_response.py\", line 689, in get_wsgi_response\n    app_iter = self.get_app_iter(environ)\n  File \"/usr/local/lib/python3.6/site-packages/werkzeug/wrappers/base_response.py\", line 662, in get_app_iter\n    environ[\"REQUEST_METHOD\"] == \"HEAD\"\nKeyError: 'REQUEST_METHOD'\nEnvironment\nPython version: 3.6.8\nFlask version: 1.1.1\nWerkzeug version: 0.16.0\nuWSGI version: 2.0.18", "issue_status": "Closed", "issue_reporting_time": "2019-11-12T15:06:44Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "31": {"issue_url": "https://github.com/pallets/flask/issues/3420", "issue_id": "#3420", "issue_summary": "Test failures with Python 3.8", "issue_description": "s-t-e-v-e-n-k commented on 8 Nov 2019\nFrom a build log against Python 3.8:\n[   42s] ______________ TestSendfile.test_send_from_directory_bad_request _______________\n[   42s] \n[   42s] self = <test_helpers.TestSendfile object at 0x7fa523850cd0>\n[   42s] app = <Flask 'flask_test'>\n[   42s] req_ctx = <RequestContext 'http://localhost/' [GET] of flask_test>\n[   42s] \n[   42s]     def test_send_from_directory_bad_request(self, app, req_ctx):\n[   42s]         app.root_path = os.path.join(\n[   42s]             os.path.dirname(__file__), \"test_apps\", \"subdomaintestmodule\"\n[   42s]         )\n[   42s]     \n[   42s]         with pytest.raises(BadRequest):\n[   42s] >           flask.send_from_directory(\"static\", \"bad\\x00\")\n[   42s] \n[   42s] tests/test_helpers.py:789: \n[   42s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[   42s] \n[   42s] directory = 'static'\n[   42s] filename = '/home/abuild/rpmbuild/BUILD/Flask-1.1.1/tests/test_apps/subdomaintestmodule/static/bad\\x00'\n[   42s] options = {}\n[   42s] \n[   42s]     def send_from_directory(directory, filename, **options):\n[   42s]         \"\"\"Send a file from a given directory with :func:`send_file`.  This\n[   42s]         is a secure way to quickly expose static files from an upload folder\n[   42s]         or something similar.\n[   42s]     \n[   42s]         Example usage::\n[   42s]     \n[   42s]             @app.route('/uploads/<path:filename>')\n[   42s]             def download_file(filename):\n[   42s]                 return send_from_directory(app.config['UPLOAD_FOLDER'],\n[   42s]                                            filename, as_attachment=True)\n[   42s]     \n[   42s]         .. admonition:: Sending files and Performance\n[   42s]     \n[   42s]            It is strongly recommended to activate either ``X-Sendfile`` support in\n[   42s]            your webserver or (if no authentication happens) to tell the webserver\n[   42s]            to serve files for the given path on its own without calling into the\n[   42s]            web application for improved performance.\n[   42s]     \n[   42s]         .. versionadded:: 0.5\n[   42s]     \n[   42s]         :param directory: the directory where all the files are stored.\n[   42s]         :param filename: the filename relative to that directory to\n[   42s]                          download.\n[   42s]         :param options: optional keyword arguments that are directly\n[   42s]                         forwarded to :func:`send_file`.\n[   42s]         \"\"\"\n[   42s]         filename = fspath(filename)\n[   42s]         directory = fspath(directory)\n[   42s]         filename = safe_join(directory, filename)\n[   42s]         if not os.path.isabs(filename):\n[   42s]             filename = os.path.join(current_app.root_path, filename)\n[   42s]         try:\n[   42s]             if not os.path.isfile(filename):\n[   42s] >               raise NotFound()\n[   42s] E               werkzeug.exceptions.NotFound: 404 Not Found: The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.\n[   42s] \n[   42s] ../../BUILDROOT/python-Flask-1.1.1-2.2.x86_64/usr/lib/python3.8/site-packages/flask/helpers.py:767: NotFound\nThis occurs because os.path.isfile() no longer raises ValueError with invalid sequences under Python 3.8, instead just returns False.\nI can see it, there are two ways to fix this test:\nCatch either Bad Request or Not Found, call it good.\nOr change the code to raise Bad Request if we look for invalid sequences.\nI'm happy to push up a PR with a pointer to which direction you'd like to take.", "issue_status": "Closed", "issue_reporting_time": "2019-11-08T05:01:16Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "32": {"issue_url": "https://github.com/pallets/flask/issues/3418", "issue_id": "#3418", "issue_summary": "Can't parse bson Object", "issue_description": "ziadab commented on 7 Nov 2019\nHi,\nI was working on a project using Flask and PyMongo, well when I try to parse the document from the mongo database and return it to the client I get an error that ObjectId can't be parsed, so I build a class base on JsonEncoder that fix this problem and I want to add it in Flask", "issue_status": "Closed", "issue_reporting_time": "2019-11-07T18:10:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "33": {"issue_url": "https://github.com/pallets/flask/issues/3417", "issue_id": "#3417", "issue_summary": "Can't parse bson object", "issue_description": "ziadab commented on 7 Nov 2019\nHi,\nI was working on a project using Flask and PyMongo, well when I try to parse the document from the mongo database and return it to the client I get an error that ObjectId can't be parsed, so I build a class base on JsonEncoder that fix this problem and I want to add it in Flask", "issue_status": "Closed", "issue_reporting_time": "2019-11-07T18:06:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "34": {"issue_url": "https://github.com/pallets/flask/issues/3416", "issue_id": "#3416", "issue_summary": "Registered URL not found", "issue_description": "JarryShaw commented on 7 Nov 2019 \u2022\nedited\nWe had implemented a two-in-one backend with Flask. For the website itself (which we call it tekid), we're having no trouble. But for the management portal (which we call it tekid-admin), even though using the same view registries, the WSGI server (both dev and prod) returns 404 NOT FOUND for all requests.\nExpected Behavior\nNB: tekid and tekid-admin should give the same output\nThe routes command would give like this:\n$ tekid routes\n# or\n$ tekid-admin routes\nEndpoint        Methods            Rule\n--------------  -----------------  -----------------------------------\nload_contact    GET, POST          /contact/\nload_expertise  GET                /expertise/\nload_index      GET                /\nload_news       GET, POST          /news/\n...\nstatic          GET                /static/<path:filename>\nWe try curl http://127.0.0.1:5000/ after run on the website (tekid):\n$ tekid run\n * Environment: development\n * Debug mode: on\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n * Restarting with stat\n * Debugger is active!\n * Debugger PIN: 332-955-135\n/fakepath/.venv/lib/python3.7/site-packages/flask/sessions.py:220: UserWarning: The session cookie domain is an IP address. This may not work as intended in some browsers. Add an entry to your hosts file, for example \"localhost.localdomain\", and use that instead.\n  \"The session cookie domain is an IP address. This may not work\"\n127.0.0.1 - - [07/Nov/2019 17:20:03] \"GET / HTTP/1.1\" 200 -\n$ curl http://127.0.0.1:5000\n<!--\n  _______   _    _____ _____    _     _      _\n |__   __| | |  |_   _|  __ \\  | |   | |    | |\n    | | ___| | __ | | | |  | | | |   | |_ __| |\n    | |/ _ \\ |/ / | | | |  | | | |   | __/ _` |\n    | |  __/   < _| |_| |__| | | |___| || (_| |_\n    |_|\\___|_|\\_\\_____|_____/  |______\\__\\__,_(_)\n-->\n... (the actual HTML page)\nActual Behavior\nWith the same configs as above, we try curl http://127.0.0.1:5000/ after run on the management portal (tekid-admin):\n$ tekid-admin run\n * Environment: development\n * Debug mode: on\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n * Restarting with stat\n * Debugger is active!\n * Debugger PIN: ***-***-***\n/fakepath/.venv/lib/python3.7/site-packages/flask/sessions.py:220: UserWarning: The session cookie domain is an IP address. This may not work as intended in some browsers. Add an entry to your hosts file, for example \"localhost.localdomain\", and use that instead.\n  \"The session cookie domain is an IP address. This may not work\"\n127.0.0.1 - - [07/Nov/2019 17:06:25] \"GET / HTTP/1.1\" 404 -\n$ curl http://127.0.0.1:5000\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\nEnvironment\nPython version: 3.7.4\nFlask version: 1.1.1\nWerkzeug version: 0.16.0", "issue_status": "Closed", "issue_reporting_time": "2019-11-07T09:25:14Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "35": {"issue_url": "https://github.com/pallets/flask/issues/3411", "issue_id": "#3411", "issue_summary": "UnicodeDecodeError: 'utf8' codec can't decode byte 0xab in position 103: invalid start byte", "issue_description": "Dreampie commented on 29 Oct 2019\npython 2.7.15 flask 1.1.1 macOs 10.15 Beta\u7248(19A573a)\n2019-10-29 11:36:17,762 [Thread-13] ERROR  werkzeug - 10.25.72.175 - - [29/Oct/2019 11:36:17] code 400, message Bad request version ('\\x00\\x01\\x00\\x00\\x00\\x10ScannerHeartbeat')\n2019-10-29 11:36:17,762 [Thread-13] INFO  werkzeug - 10.25.72.175 - - [29/Oct/2019 11:36:17] \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdJ\ufffdH\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdScannerHeartbeat\" 400 -\nTraceback (most recent call last):\n  File \"/Users/dreampie/miniconda/envs/python2/lib/python2.7/logging/__init__.py\", line 891, in emit\n    stream.write(fs % msg.encode(\"UTF-8\"))\nUnicodeDecodeError: 'utf8' codec can't decode byte 0xab in position 103: invalid start byte\nLogged from file _internal.py, line 122", "issue_status": "Closed", "issue_reporting_time": "2019-10-29T03:39:43Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "36": {"issue_url": "https://github.com/pallets/flask/issues/3409", "issue_id": "#3409", "issue_summary": "In PyTest, response.location is None", "issue_description": "brandiqa commented on 29 Oct 2019 \u2022\nedited\nExpected Behavior\nAm assuming calling response.location should return the current location i.e. url path\n# app/__init__.py\ndef create_app():\n    app = Flask(__name__)\n\n    @app.route('/')\n    def hello():\n        return 'Hello, World!'\n\n    return app\n\n\n# app/conftest.py\nimport pytest\nfrom app import create_app\n\n@pytest.fixture\ndef app():\n    app = create_app()\n    app.config['TESTING'] = True\n\n    yield app\n\n\n@pytest.fixture\ndef client(app):\n    return app.test_client()\n\n\n# app/test_hello.py\ndef test_hello(client):\n    response = client.get('/')\n    assert response.status_code == 200\n    assert response.data == b'Hello, World!'\n    assert response.location == \"http://localhost/\"\nActual Behavior\nRunning pytest command results in a failed test\nclient = <FlaskClient <Flask 'app'>>\n\n    def test_hello(client):\n        response = client.get('/')\n        assert response.status_code == 200\n        assert response.data == b'Hello, World!'\n>       assert response.location == \"http://localhost/\"\nE       AssertionError: assert None == 'http://localhost/'\nE         -None\nE         +'http://localhost/'\n\napp/test_app.py:5: AssertionError\nEnvironment\nPython version: 3.8\nFlask version: 1.1.1\nWerkzeug version: 0.16.0\n1", "issue_status": "Closed", "issue_reporting_time": "2019-10-28T20:04:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "37": {"issue_url": "https://github.com/pallets/flask/issues/3402", "issue_id": "#3402", "issue_summary": "Test test_send_from_directory_bad_request fails in Python 3.8", "issue_description": "jdevera commented on 21 Oct 2019\nExpected Behavior\nAll tests should pass in Python 3.8. However this one:\n    def test_send_from_directory_bad_request(self, app, req_ctx):\n        app.root_path = os.path.join(\n            os.path.dirname(__file__), \"test_apps\", \"subdomaintestmodule\"\n        )\n\n        with pytest.raises(BadRequest):\n            flask.send_from_directory(\"static\", \"bad\\x00\")\nWhich calls:\ndef send_from_directory(directory, filename, **options):\n    # ...\n    try:\n        if not os.path.isfile(filename):\n            raise NotFound()\n    except (TypeError, ValueError):\n        raise BadRequest()\n    # ...\nIs now affected by a change from 3.7 to 3.8.\nPython 3.8 now fixes the bug where a NULL character in a file name would trigger a ValueError in some os.path functions, such as os.path.isfile:\nos.path functions that return a boolean result like exists(), lexists(), isdir(), isfile(), islink(), and ismount() now return False instead of raising ValueError or its subclasses UnicodeEncodeError and UnicodeDecodeError for paths that contain characters or bytes unrepresentable at the OS level. (Contributed by Serhiy Storchaka in bpo-33721.)\nThe expectation is that this test should not be there, as it is testing buggy python behaviour. Furthermore, since the correct behaviour is now known, I would expect send_from_directory to raise NotFound also for paths with NULL characters in them.\nActual Behavior\nsend_from_directory raises BadRequest for paths with null characters in them. This makes tests fail in python 3.8\n====================================== FAILURES =======================================\n__________________ TestSendfile.test_send_from_directory_bad_request __________________\ntests/test_helpers.py:789: in test_send_from_directory_bad_request\n    flask.send_from_directory(\"static\", \"bad\\x00\")\n.tox/py38/lib/python3.8/site-packages/flask/helpers.py:767: in send_from_directory\n    raise NotFound()\nE   werkzeug.exceptions.NotFound: 404 Not Found: The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.\n====================== 1 failed, 572 passed, 1 skipped in 4.14s =======================\nEnvironment\nPython version: 3.8\nFlask version: master\nWerkzeug version: 0.16.0", "issue_status": "Closed", "issue_reporting_time": "2019-10-21T15:22:41Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "38": {"issue_url": "https://github.com/pallets/flask/issues/3400", "issue_id": "#3400", "issue_summary": "How to define a custom command (CLI) with an application factory", "issue_description": "gandroz commented on 18 Oct 2019\nI can't figure out how to define a custom command with an application factory.\napp/__init__.py:\nimport click\nfrom flask import Flask\nfrom flask.cli import with_appcontext\nfrom config import config\n\n\ndef create_app():\n    app = Flask(__name__)\n    app.config.from_object(config)\n    app.cli.add_command(seed)\n\n    with app.app_context():\n        from flask_bootstrap import Bootstrap\n        from flask_sqlalchemy import SQLAlchemy\n        from flask_migrate import Migrate\n        from app.models import db\n        from app.main import main_blueprint\n        from app.api_1_0 import api_blueprint\n\n        bootstrap = Bootstrap()\n        migrate = Migrate()\n\n        bootstrap.init_app(app)\n        db.init_app(app)\n        migrate.init_app(app, db)\n\n        # Register Blueprints\n        app.register_blueprint(main_blueprint)\n        app.register_blueprint(api_blueprint, url_prefix='/api/v1.0')        \n\n        return app\n\n\n@click.command()\ndef seed():\n    from app.seed import seed\n    seed()\nWhen I run flask seed I got the error No such command \"seed\". I used to use flask script but I would like to \"migrate\" to the CLI. Is that even possible without installing the app in dev mode like in #3289 ?", "issue_status": "Closed", "issue_reporting_time": "2019-10-18T13:49:43Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "39": {"issue_url": "https://github.com/pallets/flask/issues/3399", "issue_id": "#3399", "issue_summary": "Runtime generated blueprint code", "issue_description": "Akonibrahim commented on 17 Oct 2019 \u2022\nedited\nCreating Blueprint folders and routes at the run time for a form builder project.\nIn run time Blueprints successfully gets registered , I can even see url routes in app.url_map\nBut without restarting the server I can't access those routes.\nAny thoughts ?\nAsked it in Stack overflow and got down voted can anyone help https://stackoverflow.com/questions/58292455/how-to-register-routes-generated-by-code-without-reloading-the-server", "issue_status": "Closed", "issue_reporting_time": "2019-10-17T12:04:01Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "40": {"issue_url": "https://github.com/pallets/flask/issues/3394", "issue_id": "#3394", "issue_summary": "Change celery to app in documentation", "issue_description": "Contributor\nbngsudheer commented on 14 Oct 2019\nExpected Behavior\nShould use clear language and variable names.\nExample: https://flask.palletsprojects.com/en/0.12.x/patterns/celery/\nActual Behavior\nUse the variable celery instead of something like celery_app. Also imports Celery from celery package.\nI would rename the variable celery to celery_app or just app. app makes more sense because it is what is used in Celery documentation.\nIf you want to make this change, I am all ears. I would love to send the PR.", "issue_status": "Closed", "issue_reporting_time": "2019-10-14T09:37:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "41": {"issue_url": "https://github.com/pallets/flask/issues/3393", "issue_id": "#3393", "issue_summary": "Flask after_request still execute", "issue_description": "WyattQi commented on 14 Oct 2019\nI've had a problem with the after_request decorator for a long time,I don't know when the exception will not execute after_request", "issue_status": "Closed", "issue_reporting_time": "2019-10-14T09:34:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "42": {"issue_url": "https://github.com/pallets/flask/issues/3392", "issue_id": "#3392", "issue_summary": "[QUESTION] Does flask support other templating engine", "issue_description": "tbhaxor commented on 13 Oct 2019\nDoes flask support other templating engines like ejs, handlebars etc? If no, is there any way to create your own templating engine?", "issue_status": "Closed", "issue_reporting_time": "2019-10-13T17:32:37Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "43": {"issue_url": "https://github.com/pallets/flask/issues/3389", "issue_id": "#3389", "issue_summary": "Cannot raise HTTPException()", "issue_description": "sonnguyen2201 commented on 12 Oct 2019 \u2022\nedited\nfrom flask_api import FlaskAPI\nfrom flask import request\nfrom werkzeug.exceptions import HTTPException\nfrom flask import json\n\n\napp = FlaskAPI(__name__)\n\n\n@app.errorhandler(HTTPException)\ndef handle_exception(e):\n    \"\"\"Return JSON instead of HTML for HTTP errors.\"\"\"\n    # start with the correct headers and status code from the error\n    response = e.get_response()\n    # replace the body with JSON\n    response.data = json.dumps({\n        \"code\": e.code,\n        \"name\": e.name,\n        \"description\": e.description,\n    })\n    response.content_type = \"application/json\"\n    return response\n\n\n@app.route('/', methods=['GET'])\ndef get_value():\n    key = request.args.get('key')\n\n    if not key:\n        raise HTTPException(\"HELLO\")\n\n    return \"done\"\n\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\nWhen making a request on http://127.0.0.1:5000/ I get:\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<title>None Unknown Error</title>\n<h1>Unknown Error</h1>\n<p>HELLO</p>\nBy changing the original code by:\n    if not key:\n        raise HTTPException()\nI thought that the code above will assign the error as HTTP error and I expect the result would return JSON instead of HTML but it doesn't work.\nAnother try on http://127.0.0.1:5000/abcdef, I get:\n{\n    \"code\": 404,\n    \"description\": \"The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.\",\n    \"name\": \"Not Found\"\n}\nEnvironment\nPython version: 3.7\nFlask version: 1.1.1\nWerkzeug version: 0.16.0", "issue_status": "Closed", "issue_reporting_time": "2019-10-12T16:41:52Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "44": {"issue_url": "https://github.com/pallets/flask/issues/3388", "issue_id": "#3388", "issue_summary": "Browser doesn't show error message in tutorial", "issue_description": "MarcoGorelli commented on 12 Oct 2019 \u2022\nedited\nI was following the tutorial, and got to the bottom of the page, where it says\nTry clicking the \u201cRegister\u201d button without filling out the form and see that the browser shows an error message.\nExpected Behavior\nI was expecting to see an error message in the browser\nActual Behavior\nI don't see an error message - instead, it seems to already work beautifully:\nEnvironment\nPython 3.7.4\nFlask 1.1.1\nWerkzeug 0.16.0", "issue_status": "Closed", "issue_reporting_time": "2019-10-12T09:31:28Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "45": {"issue_url": "https://github.com/pallets/flask/issues/3387", "issue_id": "#3387", "issue_summary": "Can not be connected on local area network on macOS 10.15 (Catalina)", "issue_description": "kant-li commented on 12 Oct 2019\nI just upgraded the macOS to 10.15 (Catalina) on my MacBook (Retina, 12-inch, Early 2015) and encountered a weird issue:\nI'm running a python flask app on local area network which worked fine before the upgrade, but other people could not access to my server now;\nWith Wireshark, I know the TCP SYN requests was received but not responded; And the flask server did not received the request at all;\nI started a simple TCP server with a python script in terminal. By allowing Python.app to access to the network on a pop-up, this simple TCP server could be connected by others;\nIf I turn down the firewall on macOS, the flask server could be connected by others;\nIn the firewall configuration, the Python was allowed to access to the network; And there was no pop-ups to allow the network access when I started the flask app;\nAnything i missed?\nEnvironment\nmacOS 10.15\nPython version: 3.7.2\nFlask version: 0.12.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2019-10-12T03:05:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "46": {"issue_url": "https://github.com/pallets/flask/issues/3385", "issue_id": "#3385", "issue_summary": "flask db init error", "issue_description": "danerlt commented on 11 Oct 2019\nExpected Behavior\nI use flask db init execute error\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_migrate import Migrate\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///app.db'\n\ndb = SQLAlchemy(app)\nmigrate = Migrate(app, db)\n\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(128))\n\n\n@app.route('/')\ndef hello_world():\n    return 'Hello World!'\n\n\nif __name__ == '__main__':\n    app.run()\nActual Behavior\n$ flask db init\nTraceback (most recent call last):\n  File \"d:\\data\\conda\\envs\\sys_server\\lib\\runpy.py\", line 193, in _run_module_as_main\n    \"__main__\", mod_spec)\n  File \"d:\\data\\conda\\envs\\sys_server\\lib\\runpy.py\", line 85, in _run_code\n    exec(code, run_globals)\n  File \"D:\\data\\conda\\envs\\sys_server\\Scripts\\flask.exe\\__main__.py\", line 9, in <module>\n  File \"d:\\data\\conda\\envs\\sys_server\\lib\\site-packages\\flask\\cli.py\", line 966, in main\n    cli.main(prog_name=\"python -m flask\" if as_module else None)\n  File \"d:\\data\\conda\\envs\\sys_server\\lib\\site-packages\\flask\\cli.py\", line 586, in main\n    return super(FlaskGroup, self).main(*args, **kwargs)\n  File \"d:\\data\\conda\\envs\\sys_server\\lib\\site-packages\\click\\core.py\", line 717, in main\n    rv = self.invoke(ctx)\n  File \"d:\\data\\conda\\envs\\sys_server\\lib\\site-packages\\click\\core.py\", line 1132, in invoke\n    cmd_name, cmd, args = self.resolve_command(ctx, args)\n  File \"d:\\data\\conda\\envs\\sys_server\\lib\\site-packages\\click\\core.py\", line 1171, in resolve_command\n    cmd = self.get_command(ctx, cmd_name)\n  File \"d:\\data\\conda\\envs\\sys_server\\lib\\site-packages\\flask\\cli.py\", line 527, in get_command\n    self._load_plugin_commands()\n  File \"d:\\data\\conda\\envs\\sys_server\\lib\\site-packages\\flask\\cli.py\", line 523, in _load_plugin_commands\n    self.add_command(ep.load(), ep.name)\n  File \"C:\\Users\\tao\\AppData\\Roaming\\Python\\Python37\\site-packages\\pkg_resources\\__init__.py\", line 2345, in load\n    self.require(*args, **kwargs)\n  File \"C:\\Users\\tao\\AppData\\Roaming\\Python\\Python37\\site-packages\\pkg_resources\\__init__.py\", line 2368, in require\n    items = working_set.resolve(reqs, env, installer, extras=self.extras)\n  File \"C:\\Users\\tao\\AppData\\Roaming\\Python\\Python37\\site-packages\\pkg_resources\\__init__.py\", line 789, in resolve\n    raise VersionConflict(dist, req).with_context(dependent_req)\npkg_resources.ContextualVersionConflict: (Jinja2 2.10 (c:\\users\\tao\\appdata\\roaming\\python\\python37\\site-packages), Requirement.parse('Jinja2>=2.10.1'),\n {'Flask'})\nEnvironment\nPython version: Python 3.7.3\nFlask version: 1.0.2\nWerkzeug version:0.16.0\nFlask-Migrate version: 2.5.2", "issue_status": "Closed", "issue_reporting_time": "2019-10-11T08:10:20Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "47": {"issue_url": "https://github.com/pallets/flask/issues/3384", "issue_id": "#3384", "issue_summary": "static css media print doesn't work", "issue_description": "imsuneaik commented on 10 Oct 2019\nExpected Behavior\nI am trying to develop a web page and create a button to generate PDF. I realised that if i were to include @media print after defining my static url for css. It does not go through.\n# The method as per documentation \n<link rel=stylesheet href=\"{{ url_for('static', filename='css/style.css') }}\">\n\n# What I want to create \n<link rel=stylesheet href=\"{{ url_for('static', filename='css/print.css') }}\" media= \"print\" >\n\n@media print {\nlogo{\n       width : 50px !important\n       height : 100px !important\n  }\n}\nActual Behavior\nPDF preview still shows the original-sized image. \nEnvironment\n*Python 3.7.4\n*Flask 1.1.1\n*Werkzeug 0.16.0", "issue_status": "Closed", "issue_reporting_time": "2019-10-10T07:12:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "48": {"issue_url": "https://github.com/pallets/flask/issues/3383", "issue_id": "#3383", "issue_summary": "Flask caching allowing unauthenticated users to see files that should be protected", "issue_description": "elamje commented on 9 Oct 2019\nExpected Behavior\nUsers are authenticated with flask-login, and should only be able to view files that they upload. current_user.uuid stores a unique directory for their uploads to go to so that unauthenticated users cannot access a specific users uploaded files.\n@app.route('/show/<filename>')\n@login_required\ndef show(filename: str) -> Union[Response, str]:\n    print('show hit')\n    filename = secure_filename(filename)  # clean user input\n    user_dir = os.path.join(app.config['UPLOAD_FOLDER'], current_user.uuid)\n    if os.path.exists(os.path.join(user_dir, filename)):\n        return send_from_directory(directory=user_dir, filename=filename)\n    else:\n        abort(404)\nActual Behavior\nI can visit the show/x.png url and I will be able to see x.png regardless of my authentication status.\nThe strange thing is that in production (Nginx, Dokku, gunicorn), the show/x.png request never hits the flask app, possibly cached? (Nginx doesn't have caching set up, Gunicorn doesn't cache, so not sure what's happening, not my browser cache either)\nLocally, I can reproduce this as well, even when I'm confident there is no browser caching going on.\nEnvironment\nPython version: 3.7\nFlask version: 1.1.1\nWerkzeug version: 0.15.5", "issue_status": "Closed", "issue_reporting_time": "2019-10-08T20:06:33Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "49": {"issue_url": "https://github.com/pallets/flask/issues/3380", "issue_id": "#3380", "issue_summary": "when I used flask to get POST request, it ouccured \"20\" Exception", "issue_description": "policeme commented on 3 Oct 2019 \u2022\nedited\nHi, when I used flask to get POST request, it ouccured \"20\" Exception, the 20 is not means it has 20 Exceptions, it means the Exception is 20, when this Exception appeared, didn't print any information, just print 20, what's going on? anyone can help me?", "issue_status": "Closed", "issue_reporting_time": "2019-10-03T03:07:57Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "50": {"issue_url": "https://github.com/pallets/flask/issues/3379", "issue_id": "#3379", "issue_summary": "Is it a viable option to use flask with Gunicorn GEVENT", "issue_description": "sudhakar-datta commented on 1 Oct 2019 \u2022\nedited\nI need to scale the flask based micro-service to handle 1K-requests/sec, but the call are sync calls to 3rd party which would block 8 to 10 secs. Celery or RQ is not an option (due to certain restrictions).\nIs there a specific example of how to approach using the gunicorn + gevent + workers + flask\nEnvironment\nPython version: 3.7\nFlask version: 1.11\nWerkzeug version:", "issue_status": "Closed", "issue_reporting_time": "2019-10-01T01:12:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "51": {"issue_url": "https://github.com/pallets/flask/issues/3377", "issue_id": "#3377", "issue_summary": "jinja2.exceptions.TemplateNotFound:", "issue_description": "CaloloCosta commented on 24 Sep 2019\nflask/examples/tutorial/flaskr/auth.py\nLine 81 in 599f32c\n return render_template(\"auth/register.html\") \nI was following the tutorial and I got the exception jinja2.exceptions.TemplateNotFound: auth/register.html while rendering the register template.\nActual code: return render_template(\"auth/register.html\")\nSolution: return render_template(\"register.html\")", "issue_status": "Closed", "issue_reporting_time": "2019-09-24T13:53:17Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "52": {"issue_url": "https://github.com/pallets/flask/issues/3373", "issue_id": "#3373", "issue_summary": "from werkzeug.wsgi import DispatcherMiddleware", "issue_description": "oaigudmundsson commented on 23 Sep 2019 \u2022\nedited\nExpected Behavior\nIt seems to me the DispatcherMiddleware is not available when call werkzeug.wsgi on flask 1.1.1.\nfrom werkzeug.wsgi import DispatcherMiddleware\nActual Behavior\nShould be in the document:\nfrom werkzeug.middleware.dispatcher import DispatcherMiddleware\nEnvironment\nPython version: 3.6\nFlask version: 1.1.1\nWerkzeug version: 0.16.0", "issue_status": "Closed", "issue_reporting_time": "2019-09-23T11:09:51Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "53": {"issue_url": "https://github.com/pallets/flask/issues/3372", "issue_id": "#3372", "issue_summary": "it's a answer to deploy the flaskr demo project with uWSGI and nginx, if therer's a error: unable to load app 0 (mountpoint='') (callable not found or import error)", "issue_description": "god-lin commented on 23 Sep 2019\nI have try many way and search to find the answer, but it seems not the real answer to solve the error : unable to load app 0 (mountpoint='') (callable not found or import error)", "issue_status": "Closed", "issue_reporting_time": "2019-09-23T10:52:28Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "54": {"issue_url": "https://github.com/pallets/flask/issues/3371", "issue_id": "#3371", "issue_summary": "how to deploy this demo project with uWSGI+nginx in local environment?", "issue_description": "god-lin commented on 23 Sep 2019\nI make a single .py file to use flask successfully, but with a moulde to use this flask demo ,to deploy with uWSGI badly. its always get \"unable to load app 0 (mountpoint='/flaskr') (callable not found or import error)\" error, I cry three thousand times now.\n\u3010nginx config\u3011\n\n\u3010command \u3011", "issue_status": "Closed", "issue_reporting_time": "2019-09-22T19:26:27Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "55": {"issue_url": "https://github.com/pallets/flask/issues/3370", "issue_id": "#3370", "issue_summary": "how to deploy this demo project with uWSGI+nginx in local environment?", "issue_description": "god-lin commented on 23 Sep 2019\nI make a single .py file to use flask successfully, but with a moulde to use this flask demo ,to deploy with uWSGI badly. its always get \"unable to load app 0 (mountpoint='/flaskr') (callable not found or import error)\" error, I cry three thousand times now.\n\u3010nginx config\u3011\n\n\u3010command \u3011", "issue_status": "Closed", "issue_reporting_time": "2019-09-22T19:26:26Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "56": {"issue_url": "https://github.com/pallets/flask/issues/3367", "issue_id": "#3367", "issue_summary": "Automatic 308 Redirection does not maintain schema", "issue_description": "csanders-git commented on 20 Sep 2019 \u2022\nedited\nExpected Behavior\nWhen a user enters a route to a location with a trailing slash but leaves the trailing slash off, they either receive a 404 or they are redirected to that location with a trailing slash using the same scheme they provided (https vs http)\n@sp_app.route('/acs/', methods=[\"GET\", 'POST'])\ndef acs():\n    # example code here\nActual Behavior\nFlask will happily accept a route appended with a slash. When a user navigates to that route without the trailing slash they will be redirected with a 308 PERMANENT REDIRECT. This redirection does not maintain the schema of the original request, always dropping the request to HTTP.\nThis can be abused by an attacker to force transmission by a user over HTTP by sending a crafted link such as https://mysite.com/acs instead of https://mysite.com/acs/. It is also likely an administrator might make this mistake when configuring locations or distributing links.\nEnvironment\nPython version: 2.7.16\nFlask version: 1.1.1", "issue_status": "Closed", "issue_reporting_time": "2019-09-19T21:01:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "57": {"issue_url": "https://github.com/pallets/flask/issues/3366", "issue_id": "#3366", "issue_summary": "Flask+tensorflow Error: The Session graph is empty. Add operations to the graph before calling run().", "issue_description": "LBatsoft commented on 19 Sep 2019\nExpected Behavior\n# Paste a minimal example that causes the problem.\nActual Behavior\nI use tensorflow for authentication code recognition. No problem with local testing. But when I put the code on Flask Server. Its cant work.\nThe Exceptions\nThe Session graph is empty.  Add operations to the graph before calling run().\nPaste the full traceback if there was an exception.\n2019-09-19 12:24:53,001 data_recovery_controller.py[line:178] [recovery_samsung_report_daily_data] ERROR recovery_samsung_report_daily_data fail! cause:The Session graph is empty.  Add operations to the graph before calling run().\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/site-packages/flask/app.py\", line 1997, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/usr/local/lib/python3.7/site-packages/flask/app.py\", line 1985, in wsgi_app\n    response = self.handle_exception(e)\n  File \"/usr/local/lib/python3.7/site-packages/flask/app.py\", line 1540, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/usr/local/lib/python3.7/site-packages/flask/_compat.py\", line 33, in reraise\n    raise value\n  File \"/usr/local/lib/python3.7/site-packages/flask/app.py\", line 1982, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/usr/local/lib/python3.7/site-packages/flask/app.py\", line 1615, in full_dispatch_request\n    return self.finalize_request(rv)\n  File \"/usr/local/lib/python3.7/site-packages/flask/app.py\", line 1630, in finalize_request\n    response = self.make_response(rv)\n  File \"/usr/local/lib/python3.7/site-packages/flask/app.py\", line 1740, in make_response\n    rv = self.response_class.force_type(rv, request.environ)\n  File \"/Users/mjvcp/Library/Python/3.7/lib/python/site-packages/werkzeug/wrappers/base_response.py\", line 269, in force_type\n    response = BaseResponse(*_run_wsgi_app(response, environ))\n  File \"/Users/mjvcp/Library/Python/3.7/lib/python/site-packages/werkzeug/wrappers/base_response.py\", line 26, in _run_wsgi_app\n    return _run_wsgi_app(*args)\n  File \"/Users/mjvcp/Library/Python/3.7/lib/python/site-packages/werkzeug/test.py\", line 1119, in run_wsgi_app\n    app_rv = app(environ, start_response)\nTypeError: 'BaseResponse' object is not callable\nbut when i Reduced version with Flask 0.12.2. The program runs ok.\nEnvironment\nPython version: 3.7\nFlask version: 1.1.1\nWerkzeug version:", "issue_status": "Closed", "issue_reporting_time": "2019-09-19T04:28:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "58": {"issue_url": "https://github.com/pallets/flask/issues/3365", "issue_id": "#3365", "issue_summary": "send_file method is not sending an updated file", "issue_description": "prayas2409 commented on 17 Sep 2019\nExpected Behavior\nEvery time I call send file it should be sending the recently updated file.\n# @app.route('/data/<file>-<key>', methods=['GET'])\ndef data_download(file, key):\n    from flask import send_file\n    # Reading the path from environment\n    csvfile = os.environ['data_path']+\"/{}\".format(file)\n    if key == \"abc\":\n        return send_file(csvfile,\n                         mimetype='text/csv',\n                         attachment_filename=file,\n                         as_attachment=True).\nActual Behavior\nFirst time when this method is called it sends the latest file, however after that, if there are changes made in the file it's not sending the updated file it just sends the file containing same data as it had previously though the data is getting updated in the original file.\nNo exception it just does not sends the updated file.\nEnvironment\nPython version:3.6\nFlask version:1.1.1\nWerkzeug version:0.15.5", "issue_status": "Closed", "issue_reporting_time": "2019-09-17T13:45:32Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "59": {"issue_url": "https://github.com/pallets/flask/issues/3364", "issue_id": "#3364", "issue_summary": "flask does not serve dict as mimetype application/json", "issue_description": "cangscop commented on 17 Sep 2019\nExpected Behavior\nFlask should load the correct MIME type for dict (\"application/json\")\nfrom flask import Flask\nimport sqlite3\napp = Flask(__name__)\n\n@app.route('/cards')\ndef hello_world():\n    #some sql to create my data\n    result = {a:b for a,b in list(zip(names,my_radical))}\n    return result\n    #things i also tried:\n    #return jsonify(result)\n    #return Response(jsonify(result), mimetype=\"application/json\")\nActual Behavior\nI GET my JSON as \"text/html\" literal, with no unicode(could encoding be the problem?)\nThis happens if i try using Response() directly:\nError on request:\nTraceback (most recent call last):\n  File \"/home/john/Documents/wk6-server/venv/lib/python3.6/site-packages/werkzeug/serving.py\", line 303, in run_wsgi\n    execute(self.server.app)\n  File \"/home/john/Documents/wk6-server/venv/lib/python3.6/site-packages/werkzeug/serving.py\", line 293, in execute\n    for data in application_iter:\n  File \"/home/john/Documents/wk6-server/venv/lib/python3.6/site-packages/werkzeug/wsgi.py\", line 507, in __next__\n    return self._next()\n  File \"/home/john/Documents/wk6-server/venv/lib/python3.6/site-packages/werkzeug/wrappers/base_response.py\", line 45, in _iter_encoded\n    for item in iterable:\nTypeError: 'Response' object is not iterable\nEnvironment\n$ flask --version\nPython 3.6.8\nFlask 1.1.1\nWerkzeug 0.15.6", "issue_status": "Closed", "issue_reporting_time": "2019-09-16T23:46:35Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "60": {"issue_url": "https://github.com/pallets/flask/issues/3363", "issue_id": "#3363", "issue_summary": "Features Request: Remove Python 2 support and add Async", "issue_description": "timkofu commented on 16 Sep 2019\nThe first one is to fully leverage Py3 features. Also, Py2 EOL is due in a few months.\nThe second one is to add speed. Much speed. So Flask can handle more requests with the same hardware, and run smoother while doing so.\nMaybe both of these are already in the works?\n2", "issue_status": "Closed", "issue_reporting_time": "2019-09-16T13:22:24Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "61": {"issue_url": "https://github.com/pallets/flask/issues/3362", "issue_id": "#3362", "issue_summary": "request.form is empty", "issue_description": "jrichterpowell commented on 14 Sep 2019 \u2022\nedited\nExpected Behavior\nrequest.form should contain data posted from an html form.\nimport os\nimport functools\nfrom flask import(\n    Flask, Blueprint, flash, g, redirect, render_template_string, request, session, url_for\n)\n\nbp = Blueprint('new', __name__, url_prefix=\"/\")\n\nhtml = \"\"\"\n<!DOCTYPE html>\n<title> Example Issue</title>\n<section class=\"content\">\n<form method=\"POST\">\n        <label for=\"task\">Task</label>\n        <input name=\"task\" id=\"task\" required>\n        <input type=\"submit\" name=\"Add\" value=\"Submit\">\n    </form>\n</section>\n\"\"\"\n\n@bp.route('/new', methods=('GET', 'POST'))\ndef new():\n    if request.method == 'POST':\n        print(request.form.__dict__)\n    return render_template_string(html)\n\ndef create_app():\n    app = Flask(__name__)\n    app.register_blueprint(bp)\n    return app\nActual Behavior\nrequest.form is empty. The output of request.__dict__ is\n{'environ': {'wsgi.version': (1, 0), 'wsgi.url_scheme': 'http', 'wsgi.input': <_io.BufferedReader name=5>, 'wsgi.errors': <_io.TextIOWrapper name='<stderr>' mode='w' encoding='UTF-8'>, 'wsgi.multithread': True, 'wsgi.multiprocess': False, 'wsgi.run_once': False, 'werkzeug.server.shutdown': <function WSGIRequestHandler.make_environ.<locals>.shutdown_server at 0x7f0d2c2fa8c0>, 'SERVER_SOFTWARE': 'Werkzeug/0.15.6', 'REQUEST_METHOD': 'POST', 'SCRIPT_NAME': '', 'PATH_INFO': '/new', 'QUERY_STRING': '', 'REQUEST_URI': '/new', 'RAW_URI': '/new', 'REMOTE_ADDR': '127.0.0.1', 'REMOTE_PORT': 49372, 'SERVER_NAME': '127.0.0.1', 'SERVER_PORT': '5000', 'SERVER_PROTOCOL': 'HTTP/1.1', 'HTTP_HOST': '127.0.0.1:5000', 'HTTP_USER_AGENT': 'Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0', 'HTTP_ACCEPT': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'HTTP_ACCEPT_LANGUAGE': 'en-US,en;q=0.5', 'HTTP_ACCEPT_ENCODING': 'gzip, deflate', 'HTTP_REFERER': 'http://127.0.0.1:5000/new', 'CONTENT_TYPE': 'application/x-www-form-urlencoded', 'CONTENT_LENGTH': '26', 'HTTP_CONNECTION': 'keep-alive', 'HTTP_UPGRADE_INSECURE_REQUESTS': '1', 'werkzeug.request': <Request 'http://127.0.0.1:5000/new' [POST]>}, 'shallow': False, 'url_rule': <Rule '/new' (HEAD, POST, GET, OPTIONS) -> new.new>, 'view_args': {}, 'url': 'http://127.0.0.1:5000/new'}\nEnvironment\nPython version: 3.74\nFlask version: 1.1.1\nWerkzeug version: 0.15.6\nFirefox console shows the form data as a param", "issue_status": "Closed", "issue_reporting_time": "2019-09-14T04:09:12Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "62": {"issue_url": "https://github.com/pallets/flask/issues/3361", "issue_id": "#3361", "issue_summary": "Custom command for CLI does not raise import exceptions", "issue_description": "darkclouder commented on 11 Sep 2019 \u2022\nedited\nProblem:\nCreating a custom command for the flask CLI with an import exception is silent, even when running the command, e.g. start with flask start directly.\nThis makes it difficult to debug import errors in changing environments, as you're left with\nError: No such command \"start\".\nwithout further explanation.\nOrigin:\nflask/src/flask/cli.py\nLines 541 to 546 in d694eb4\n try: \n     rv = info.load_app().cli.get_command(ctx, name) \n     if rv is not None: \n         return rv \n except NoAppException: \n     pass \n\nNoAppException is caught silently with a pass, even though get_command seems to only be used to execute a single command rather than an entire command listing.\nHowever, even the command listing of list_commands explicitly prints the traceback with traceback.print_exc().\nWhy that is not done in get_command is not clear to me at this point.\n1", "issue_status": "Closed", "issue_reporting_time": "2019-09-11T11:39:54Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "63": {"issue_url": "https://github.com/pallets/flask/issues/3359", "issue_id": "#3359", "issue_summary": "Flask generates loggers that may collide with package name hierarchy", "issue_description": "jjnurminen commented on 10 Sep 2019 \u2022\nedited\nHi,\nI have a Python package, let's call it mypackage. After creating a Flask app inside the package, I noticed that all logging messages from my own package started appearing twice.\nI tracked the cause to Flask automatically creating a logging.Logger instance (accessible as app.logger) that has the name mypackage. This follows from the fact that name of my Flask app is also mypackage (this is required to set up some static assets correctly). However, as logging.Logger instances are singletons, Flask ends up accessing an existing logger inside my package hierarchy and silently attaching its own stderr handler to it. Since all logging messages from my package end up propagating into the mypackage logger (before they propagate to the root logger), I now get all log messages twice.\nPossible remedies that I can think\ndo not automatically set up logging handlers inside Flask, or only set them up in special circumstances\nif the app logger really needs to be automagically set up and equipped with a handler, give it a name of 'Flask.{insert_appname}' or something to reduce chance of name collisions\nUsing Flask 1.1.1, Python 2.7.16", "issue_status": "Closed", "issue_reporting_time": "2019-09-10T11:40:35Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "64": {"issue_url": "https://github.com/pallets/flask/issues/3358", "issue_id": "#3358", "issue_summary": "Flask.send_file incorrectly sends blank files", "issue_description": "ColdHeat commented on 10 Sep 2019 \u2022\nedited\nFlask.send_file sends blank files when using io.StringIO in Python 3. There is a warning that this is wrong but the response code is still 200 but with a blank file.\nTesting this behavior with a test_client will however still result in output. Which doesn't really make sense.\nRelated Info:\nhttps://stackoverflow.com/questions/35710361/python-flask-send-file-stringio-blank-files\nExpected Behavior\nFlask.send_file should accept an io.StringIO file object and send it to the browser properly\nFlask.send_file should 500 on the the request instead of a blank file\napp.test_client shouldn't have data in this setup\nTest Case:\nRun in Python 3\nimport sys\nif sys.version_info >= (3, 0):\n    from io import StringIO\nelse:\n    from StringIO import StringIO\n\nfrom flask import Flask, send_file\nimport csv\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    temp = StringIO()\n    writer = csv.writer(temp)\n    header = ['test', 'test']\n    writer.writerow(header)\n\n    temp.seek(0)\n\n    return send_file(\n        temp,\n        as_attachment=True,\n        cache_timeout=-1,\n        attachment_filename=\"test.csv\"\n    )\n\napp.test_client()\n\nwith app.test_client() as c:\n    rv = c.get('/')\n    print(rv.data)\n\napp.run(debug=True, threaded=True, host=\"127.0.0.1\", port=4000)\n\u276f python3 test_case.py\nb'test,test\\r\\n'\n * Serving Flask app \"test_case\" (lazy loading)\n * Environment: production\n   WARNING: Do not use the development server in a production environment.\n   Use a production WSGI server instead.\n * Debug mode: on\n * Running on http://127.0.0.1:4000/ (Press CTRL+C to quit)\n * Restarting with stat\nb'test,test\\r\\n'\n * Debugger is active!\n * Debugger PIN: 881-854-930\n127.0.0.1 - - [10/Sep/2019 02:15:54] \"GET / HTTP/1.1\" 200 -\nError on request:\nTraceback (most recent call last):\n  File \"/Users/kchung/.virtualenvs/ctfd3/lib/python3.7/site-packages/werkzeug/serving.py\", line 303, in run_wsgi\n    execute(self.server.app)\n  File \"/Users/kchung/.virtualenvs/ctfd3/lib/python3.7/site-packages/werkzeug/serving.py\", line 294, in execute\n    write(data)\n  File \"/Users/kchung/.virtualenvs/ctfd3/lib/python3.7/site-packages/werkzeug/serving.py\", line 274, in write\n    assert isinstance(data, bytes), \"applications must write bytes\"\nAssertionError: applications must write bytes\n\u276f curl -vvv http://localhost:4000\n* Rebuilt URL to: http://localhost:4000/\n*   Trying ::1...\n* TCP_NODELAY set\n* Connection failed\n* connect to ::1 port 4000 failed: Connection refused\n*   Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 4000 (#0)\n> GET / HTTP/1.1\n> Host: localhost:4000\n> User-Agent: curl/7.54.0\n> Accept: */*\n>\n* HTTP 1.0, assume close after body\n< HTTP/1.0 200 OK\n< Content-Disposition: attachment; filename=test.csv\n< Content-Type: text/csv; charset=utf-8\n< Cache-Control: public, max-age=-1\n< Expires: Tue, 10 Sep 2019 06:29:28 GMT\n< Connection: close\n< Server: Werkzeug/0.15.6 Python/3.7.4\n< Date: Tue, 10 Sep 2019 06:29:29 GMT\n<\n* Closing connection 0\nActual Behavior\nWith Python 3 Hitting the endpoint in a browser results in an empty file but in the test_client there is a data response.\nEnvironment\nPython version: 3.7.4\nFlask version: 1.1.1\nWerkzeug version: 0.15.3", "issue_status": "Closed", "issue_reporting_time": "2019-09-10T06:29:55Z", "fixed_by": "#3435", "pull_request_summary": "send_file doesn't allow StringIO", "pull_request_description": "Member\ndavidism commented on 19 Nov 2019\nfixes #3358\nDue to the way send_file works, passing a text mode file-like object, such as io.StringIO in Python 3, would respond with 200 OK and an empty file, while printing a traceback to the terminal. Even in Python 2, this only worked by accident, and would probably fail if given a StringIO.StringIO object with Unicode data that did not encode with the system encoding. It appears send_file was only intended to work with binary mode data.\nNow, if the object is an instance of io.TextIOBase it raises a ValueError. This doesn't help for file-like objects that don't use the io ABCs (including Python 2), but it should cover most cases.", "pull_request_status": "Merged", "issue_fixed_time": "2019-11-19T17:08:08Z", "files_changed": [["3", "CHANGES.rst"], ["88", "src/flask/helpers.py"], ["105", "tests/test_helpers.py"]]}, "65": {"issue_url": "https://github.com/pallets/flask/issues/3357", "issue_id": "#3357", "issue_summary": "Accidental occurrence of environ[\u201cREQUEST_METHOD\u201d] key error on my production server, with flask+uwsgi service mode", "issue_description": "skiwer commented on 9 Sep 2019\nThis error occasionally occurs on the production server, which using flask combine uwsgi and nginx.\nWhat I can see in the traceback below is the REQUEST_METHOD parameter is missing from the environment variable uwsgi passes to flask app.\nTraceback (most recent call last):\n  File \"/home/projects/igor/virtualenv/lib/python2.7/site-packages/flask/app.py\", line 1994, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/home/projects/igor/virtualenv/lib/python2.7/site-packages/flask/app.py\", line 1977, in wsgi_app\n    ctx = self.request_context(environ)\n  File \"/home/projects/igor/virtualenv/lib/python2.7/site-packages/flask/app.py\", line 1938, in request_context\n    return RequestContext(self, environ)\n  File \"/home/projects/igor/virtualenv/lib/python2.7/site-packages/flask/ctx.py\", line 242, in __init__\n    self.url_adapter = app.create_url_adapter(self.request)\n  File \"/home/projects/igor/virtualenv/lib/python2.7/site-packages/flask/app.py\", line 1765, in create_url_adapter\n    server_name=self.config['SERVER_NAME'])\n  File \"/home/projects/igor/virtualenv/lib/python2.7/site-packages/werkzeug/routing.py\", line 1524, in bind_to_environ\n    environ[\"REQUEST_METHOD\"],\nKeyError: 'REQUEST_METHOD'\nEnvironment\nPython version:2.7.9\nFlask version:0.12", "issue_status": "Closed", "issue_reporting_time": "2019-09-09T07:57:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "66": {"issue_url": "https://github.com/pallets/flask/issues/3356", "issue_id": "#3356", "issue_summary": "outdated link to snippets", "issue_description": "delhomer commented on 9 Sep 2019\nExpected Behavior\nI was wondering if there is still an access to Flask snippets? I tried to follow http://flask.pocoo.org/snippets/70/ but the documentation has evolved since this link has been written, I get the documentation main page (https://palletsprojects.com/p/flask/).\nActual Behavior\nActually, the same behavior is observable in the official documentation. The Flask snippet archive URL in documentation (http://flask.palletsprojects.com/en/1.1.x/patterns/) is somehow obsolete or missing, as it redirects to doc main page:\nThere are more user contributed snippets and patterns in the `Flask\nSnippet Archives <http://flask.pocoo.org/snippets/>`_.\nEnvironment\nFlask version: 1.1", "issue_status": "Closed", "issue_reporting_time": "2019-09-09T07:54:10Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "67": {"issue_url": "https://github.com/pallets/flask/issues/3354", "issue_id": "#3354", "issue_summary": "DOCs: escape import needed to follow quickstart tutorial.", "issue_description": "LeonardoFurtado commented on 8 Sep 2019\nExpected Behavior\nAll tutorial steps should work\nActual Behavior\nerror in method not imported\nreturn \"User  %s\" % escape(username)\nNameError: name 'escape' is not defined\nI think all the steps of the tutorial should be followed without errors, this helps the beginners. At Quickstart, Variable Rules generate an error because the escape method was not imported earlier in the tutorial. I could open a PR for that, but repeating the previous code doesn't make much sense to me, and I can't think of a way to not make it messy. So I'll open this issue before I sleep and forget it.\nIt may seem like a silly issue, but I always worry about documentation and how easy it should be for beginners to follow.\n1", "issue_status": "Closed", "issue_reporting_time": "2019-09-08T01:34:57Z", "fixed_by": "#3391", "pull_request_summary": "explain escape at top of quickstart", "pull_request_description": "Member\ndavidism commented on 13 Oct 2019\nintroduce escape, and explain why it's omitted in examples\nclean up imports in examples\ncloses #3354\ncloses #3378", "pull_request_status": "Merged", "issue_fixed_time": "2019-10-13T02:03:35Z", "files_changed": [["101", "docs/quickstart.rst"]]}, "68": {"issue_url": "https://github.com/pallets/flask/issues/3353", "issue_id": "#3353", "issue_summary": "Pandas with flask spins multiple subprocesses", "issue_description": "reach4bawer commented on 6 Sep 2019\nExpected Behavior\nI was expecting that running my flask application would only spin one process with no subprocesses. Like the following screenshot. (This is with importing pandas commented)\nThe following is example of the which replicates the issue.\nfrom flask import Flask\nimport pandas as pd\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    return \"Hello World!\"\n\nif __name__ == '__main__':\n    app.run().\nActual Behavior\nImporting pandas in a Flask app multiple subprocesses are spun up. I have a Flask app that uses Flask and pandas to show basic tables. When I run the app multiple flask and python instances instances are spun up. I normally wouldn't have bothered but this is causing the application when hosted on gunicorn to be unstable.( Running 2-4 workers spins up a lot of processes and the application keeps restarting. See the screenshot below -\n\nEnvironment\nPython version:\nPython 3.7.4 (default, Jul 30 2019, 19:56:38)\n[GCC 7.3.1 20180712 (Red Hat 7.3.1-6)] on linux\nFlask version:1.0.2\nWerkzeug version:0.15.2", "issue_status": "Closed", "issue_reporting_time": "2019-09-05T20:12:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "69": {"issue_url": "https://github.com/pallets/flask/issues/3352", "issue_id": "#3352", "issue_summary": "@app.after_request not running when send_directory 304's", "issue_description": "kafonek commented on 5 Sep 2019\nExpected Behavior\nI am adding headers to the response of every request in my app (a pep 503 style web-app to serve out internally hosted python libraries). The extra header shows up in almost every response.\napp = Flask(__name__)\n\n@app.after_request\ndef extra_header(response):\n    response.headers['foo'] = 'bar'\n    return response\n\n### pep 503 endpoint to serve pip installs\n@app.route('/packages/<package_name>/<filename>')\ndef get_package(package_name, filename):\n    ### logic to get library from internal databases\n    ### directory, filename get defined here\n    return send_from_directory(directory, filename)\nThen the users run a pip install index-url=<flask-app url>. Every request/response must include the custom header though or it is blocked by internal gates.\nActual Behavior\nWhen a user runs a pip install 'internal_library>1.2' or similar syntax without a --no-cache-dir option, pip sends a GET to the server with If-None-Match and If-Modified-Since headers. When those match, the web-server responds with status code 304 and headers that include ETag and Cache-Control, but not the custom headers specified in the after_request function.\nEnvironment\nPython version: 3.5.1\nFlask version: 0.12.2\nWerkzeug version: 0.12.2", "issue_status": "Closed", "issue_reporting_time": "2019-09-04T18:58:54Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "70": {"issue_url": "https://github.com/pallets/flask/issues/3351", "issue_id": "#3351", "issue_summary": "Filename altered after upload", "issue_description": "Chocorean commented on 4 Sep 2019 \u2022\nedited\nTrying to upload a file named \u0420\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u043a\u0430 RootKit.com [63k].txt via requests.post(files={'file': open(fn, 'rb')}). I checked the file is sent with its correct name. On the other side, request.files['file'] does not have the good filename.\nExpected Behavior\nThe file should be should saved with its filename.\ndef _upload_file(filename):\n    def filter_filename(filename: str) -> str:\n        \"\"\"Stolen from werkzerg and add exotic letters\"\"\"\n        from unicodedata import normalize\n        # filtered = normalize(\"NFKD\", filename)\n        filtered = filename\n        for s in sep, altsep:\n            if s:\n                filtered = filtered.replace(s, \" \")\n        pattern = re.compile(r\"[^\\w.-]\")\n        filtered = pattern.sub(\"\", \"_\".join(filtered.split()))\n        filtered = filtered.strip(\"._\")\n        # filtered = filtered.encode('utf-8')\n        return filtered\n\n    global TMP_PATH\n    u_file = request.files[filename]\n    u_path = pjoin(TMP_PATH, filter_filename(path))\n    u_file.save(u_path)  # crash: UnicodeEncodeError\n    return u_path\nActual Behavior\nFlask fails to save the uploaded file.\nFile \"/var/www/app/eyeaieouille/app/api.py\", line 174, in post_leak\n[Wed Sep 04 11:46:21.960213 2019] [wsgi:error] [pid 72138:tid 140145960113920] [remote 192.168.180.67:53369]     u_path = _upload_file('dump')\n[Wed Sep 04 11:46:21.960240 2019] [wsgi:error] [pid 72138:tid 140145960113920] [remote 192.168.180.67:53369]   File \"/var/www/app/eyeaieouille/app/api.py\", line 76, in _upload_file\n[Wed Sep 04 11:46:21.960261 2019] [wsgi:error] [pid 72138:tid 140145960113920] [remote 192.168.180.67:53369]     u_file.save(u_path)\n[Wed Sep 04 11:46:21.960266 2019] [wsgi:error] [pid 72138:tid 140145960113920] [remote 192.168.180.67:53369]   File \"/usr/lib/python3/dist-packages/werkzeug/datastructures.py\", line 2725, in save\n[Wed Sep 04 11:46:21.960274 2019] [wsgi:error] [pid 72138:tid 140145960113920] [remote 192.168.180.67:53369]     dst = open(dst, 'wb')\n[Wed Sep 04 11:46:21.960291 2019] [wsgi:error] [pid 72138:tid 140145960113920] [remote 192.168.180.67:53369] UnicodeEncodeError: 'ascii' codec can't encode characters in position 5-15: ordinal not in range(128)\nWhenever I try to print request.files['file'].filename with app.logger.info(), I have:\n[Wed Sep 04 11:40:08.636779 2019] [wsgi:error] [pid 71927:tid 140645057996544] [remote 192.168.180.67:53298] Message: '\\xd0\\xa0\\xd0\\xb0\\xd1\\x81\\xd1\\x88\\xd0\\xb8\\xd1\\x84\\xd1\\x80\\xd0\\xbe\\xd0\\xb2\\xd0\\xba\\xd0\\xb0 RootKit.com [63k].txt'\nEnvironment\nPython version: 3.6.8\nFlask version: 0.12.2\nWerkzeug version: 0.14.1\nEDIT:\nI took a look at Wireshark, and this is what I saw:\nContent-Disposition: form-data; name=\"dump\"; filename*=utf-8''%D0%A0%D0%B0%D1%81%D1%88%D0%B8%D1%84%D1%80%D0%BE%D0%B2%D0%BA%D0%B0%20RootKit.com%20%5B63k%5D.txt\nI think Flask turns this into \\xd0\\xa0\\xd0\\xb0\\xd1\\x81\\xd1\\x88\\xd0\\xb8\\xd1\\x84\\xd1\\x80\\xd0\\xbe\\xd0\\xb2\\xd0\\xba\\xd0\\xb0 RootKit.com [63k].txt instead of \u0420\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u043a\u0430 RootKit.com [63k].txt. I am not expecting for a fix as long as the documentation advises to use the werkzerg.secure_filename() function, but as it erases some characters ([^a-zA-Z0-9] cleaning), but I would appreciate a wordaround, it did not manage to solve this issue.", "issue_status": "Closed", "issue_reporting_time": "2019-09-04T09:50:22Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "71": {"issue_url": "https://github.com/pallets/flask/issues/3350", "issue_id": "#3350", "issue_summary": "Documentation for older versions of Flask is missing", "issue_description": "Member\nuntitaker commented on 3 Sep 2019\nhttps://flask.palletsprojects.com/en/0.12.x/deploying/wsgi-standalone/#proxy-setups used to be a valid link and no longer is.\n@davidism is this intended? I can probably fix it in rtd.", "issue_status": "Closed", "issue_reporting_time": "2019-09-03T15:55:21Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "72": {"issue_url": "https://github.com/pallets/flask/issues/3348", "issue_id": "#3348", "issue_summary": "Flask marshall_with many bug after change to version 1.1", "issue_description": "PMLP-novo commented on 2 Sep 2019 \u2022\nedited by ThiefMaster\nAfter changing to from version 1.0.3 to 1.1 my marshall with many code breaks\nfrom marshmallow import fields\nfrom flask import Blueprint\nfrom flask_apispec import marshal_with, doc\nfrom database import Team\nfrom marshmallow import Schema\n\n\nbp = Blueprint(\"team\", __name__, url_prefix=\"/teams\")\n\n\nclass TeamSchema(Schema):\n    id = fields.Str(required=True, dump_only=True, example=\"1\")\n    name = fields.Str(required=True, example=\"123 Abc\")\n\n\n@bp.route(\"\")\n@marshal_with(TeamSchema(many=True), description=\"A list of teams.\")\n@doc(tags=[\"Team\"])\ndef search():\n    \"\"\"Fetch the list of teams, ordered by name.\"\"\"\n    return Team.query.order_by(\"name\")\nAnd gives the following error when invoked either by localhost/teams\nTypeError: The view function did not return a valid response. The return type must be a string, dict, tuple, Response instance, or WSGI callable, but it was a list.\nWhen running when changing to flask 1.0.3 it works. Without an error\nEnvironment\nPython version: 3.6.8\nFlask version: 1.1\nWerkzeug version: 0.15.5\nmarshmallow: 2.20.2", "issue_status": "Closed", "issue_reporting_time": "2019-09-02T08:43:34Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "73": {"issue_url": "https://github.com/pallets/flask/issues/3347", "issue_id": "#3347", "issue_summary": "register & un-register blueprints", "issue_description": "deounix commented on 1 Sep 2019\nExpected Behavior\nregister & un-register blueprints\nis there any way to do such so ?\nassuming I've registered (api_blueprint) then I want to un-register it and register it again (PLUG & UNPLG)", "issue_status": "Closed", "issue_reporting_time": "2019-09-01T03:19:56Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "74": {"issue_url": "https://github.com/pallets/flask/issues/3345", "issue_id": "#3345", "issue_summary": "Route Decorator redirects improperly", "issue_description": "IceBearZero commented on 29 Aug 2019 \u2022\nedited\nExpected Behavior\nUsing the route decorator (below), I expect going to /devices/1 to execute the related method, but instead it throws a 308 redirect response back to devices.\nIf I change the url to /devices/2 it properly executes the method\nRemoving the 3rd route decorator does not change the behaviour, devices/1 still redirects\n@app.route('/devices', methods=['GET'], defaults={\"page\":1,\"per_page\":1})\n@app.route('/devices/<int:page>', methods=['GET'], defaults={\"per_page\":1})\n@app.route('/devices/<int:page>/<int:per_page>', methods=['GET'])\ndef devices_get(page, per_page):\ndevices_get           GET      /devices/<int:page>/<int:per_page>\ndevices_get           GET      /devices/<int:page>\ndevices_get           GET      /devices\nEnvironment\nPython version: 3.7\nFlask version: '1.1.1'\nwerkzeug-0.15.5", "issue_status": "Closed", "issue_reporting_time": "2019-08-29T03:57:48Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "75": {"issue_url": "https://github.com/pallets/flask/issues/3342", "issue_id": "#3342", "issue_summary": "Using getlist for files is never empty?", "issue_description": "dzpt commented on 25 Aug 2019\nI want to get file list from form by using:\nphotos = request.files.getlist(\"photo\")\nHowever if i haven't select anything, the photos value is never be [] like other fields.\nSo the way to check for empty field is failed:\nif not photos:\n   pass\nThe result for empty form is:\n[<FileStorage: '' ('application/octet-stream')>]\nHow do i get rid of it?", "issue_status": "Closed", "issue_reporting_time": "2019-08-24T20:31:26Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "76": {"issue_url": "https://github.com/pallets/flask/issues/3341", "issue_id": "#3341", "issue_summary": "ssl_context doesn't work after deploy to apache https", "issue_description": "bxyster commented on 23 Aug 2019 \u2022\nedited\nExpected Behavior\nflask run --host=0.0.0.0 --port=443 --cert=host.crt --key=host.key\nIt works after run command above\nAfter deploy to apache using mod_wsgi,\nIt also works fine for basic request, but it does't work if you pass Authorization key as Headers, It seems the value can't be passed successfully\n# Paste a minimal example that causes the problem.\nActual Behavior\nPaste the full traceback if there was an exception.\nEnvironment\nPython version: python3.6\nFlask version: flask1.0\nWerkzeug version:Werkzeug0.15.5", "issue_status": "Closed", "issue_reporting_time": "2019-08-23T08:05:24Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "77": {"issue_url": "https://github.com/pallets/flask/issues/3340", "issue_id": "#3340", "issue_summary": "json.dumps throws TypeError", "issue_description": "apocrypth commented on 21 Aug 2019 \u2022\nedited\nI have stumbled upon this, at least for me, unexpected behaviour. For specific reasons, I have dictionary, which has str type key and None type key. When I try to use flask's json.dumps, it throws me TypeError, which I think should not happen, as is also described here: https://docs.python.org/3/library/json.html#json.dump\nIf skipkeys is true (default: False), then dict keys that are not of a basic type (str, int, float, bool, None) will be skipped instead of raising a TypeError.\nSo I understand this as that if skipkeys is False (and it is False by default and I am not setting it otherwise) and I have a dictionary with key types str or None, I should not receive TypeError.\nWhich is the case, when I try the same with regular python json library like this:\n>>> import json\n>>> print(json.dumps(test))\n{\"aa\": 0, \"null\": {}}\n>>> \nExpected Behavior\nSo my expectation is, that I should have the same behaviour also with flask's json implementation for the same dictionary keys:\n>>> from flask import json as fjson\n>>> test = {'aa': 0, None: {}}\n>>> print(fjson.dumps(test))\n{\"aa\": 0, \"null\": {}}\nshould print: {\"aa\": 0, \"null\": {}}\nActual Behavior\nBut instead of that, I receive TypeError.\n>>> from flask import json as fjson\n>>> test = {'aa': 0, None: {}}\n>>> print(fjson.dumps(test))\nends up with: TypeError: '<' not supported between instances of 'NoneType' and 'str'\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/user/path/project/venv/lib/python3.7/site-packages/flask/json/__init__.py\", line 211, in dumps\n    rv = _json.dumps(obj, **kwargs)\n  File \"/usr/lib/python3.7/json/__init__.py\", line 238, in dumps\n    **kw).encode(obj)\n  File \"/usr/lib/python3.7/json/encoder.py\", line 199, in encode\n    chunks = self.iterencode(o, _one_shot=True)\n  File \"/usr/lib/python3.7/json/encoder.py\", line 257, in iterencode\n    return _iterencode(o, 0)\nTypeError: '<' not supported between instances of 'NoneType' and 'str'\n>>> \nEnvironment\nPython version: 3.7\nFlask version: 1.1.1\nWerkzeug version: 0.15.2", "issue_status": "Closed", "issue_reporting_time": "2019-08-21T08:53:46Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "78": {"issue_url": "https://github.com/pallets/flask/issues/3339", "issue_id": "#3339", "issue_summary": "Does flask plan to support asyncio?", "issue_description": "leafonsword commented on 18 Aug 2019\nAsyncio is the future of Python, does flask plan to support it?\n1\n1", "issue_status": "Closed", "issue_reporting_time": "2019-08-18T14:00:12Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "79": {"issue_url": "https://github.com/pallets/flask/issues/3335", "issue_id": "#3335", "issue_summary": "Mypy and ProxyFix", "issue_description": "revmischa commented on 15 Aug 2019\nThe docs say (https://flask.palletsprojects.com/en/1.1.x/deploying/wsgi-standalone/#proxy-setups):\nfrom werkzeug.middleware.proxy_fix import ProxyFix\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)\nI get this from mypy:\nqc/create_app.py:47: error: Cannot assign to a method\nWhat's the correct solution here?", "issue_status": "Closed", "issue_reporting_time": "2019-08-15T12:26:34Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "80": {"issue_url": "https://github.com/pallets/flask/issues/3331", "issue_id": "#3331", "issue_summary": "Python debugger can't find module error", "issue_description": "samayo commented on 12 Aug 2019 \u2022\nedited\nExpected Behavior\nApp should run as expected on 127.0.0.1 with debugger mode enabled\n# Paste a minimal example that causes the problem.\n# .. E:/web/public/myblog.in/hello.py\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\nall configs and venv enabled as https://flask.palletsprojects.com/en/1.1.x/quickstart/\nexport FLASK_APP=hello.py\nActual Behavior\nflask run works as expected. I can see the \"Hello world\" without issues, unless I enabled debug mode as export FLASK_ENV=development in which case if I run flask run I get\n$ flask run                                                                                                                                                                                                        \n * Serving Flask app \"hello.py\" (lazy loading)                                                                                                                                                                     \n * Environment: development                                                                                                                                                                                        \n * Debug mode: on                                                                                                                                                                                                  \n * Restarting with stat                                                                                                                                                                                            \ne:\\web\\public\\myblog.in\\venv\\scripts\\python.exe: Error while finding module specification for 'E:\\\\web\\\\public\\\\myblog.in\\\\venv\\\\Scripts\\\\flask' (ModuleNotFoundError: No module named 'E:\\\\web\\\\public\\\\myblog')  \nYou can see in the last error it says No module named 'E:\\\\web\\\\public\\\\myblog (it should be ..\\\\myblog.in (.in) is missing, maybe that is the issue (bug)\nEnvironment\nPython version: 3.7.1\nFlask version: 1.1.x\nWerkzeug version: 0.15.5", "issue_status": "Closed", "issue_reporting_time": "2019-08-12T16:29:22Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "81": {"issue_url": "https://github.com/pallets/flask/issues/3330", "issue_id": "#3330", "issue_summary": "test_client.set_cookie does not seem to work", "issue_description": "JohnEmhoff commented on 12 Aug 2019 \u2022\nedited\nExpected Behavior\nThe test client should be able to set cookies in a manner that the application object can read them. There's a .set_cookie(...) method but it doesn't seem to work -- after stepping through it I think the issue is that cookies aren't getting signed?\nimport flask\n\napp = flask.Flask(\"test\")\n\n\n@app.route(\"/\")\ndef index():\n    assert \"thing\" in app.session\n    return \"okay\"\n\n\ndef test():\n    with app.test_client() as client:\n        client.set_cookie(\"example.com\", \"thing\", \"value\")\n        response = client.get(\"/\", base_url=\"http://example.com\")\n    assert response.status_code == 200\n\ntest()\nActual Behavior\nThe assertion is tripped due to an empty session, despite set_cookie() seemingly succeeding.\nEnvironment\nPython version: 3.6.7\nFlask version: 1.1.1\nWerkzeug version: 0.15.4", "issue_status": "Closed", "issue_reporting_time": "2019-08-12T15:39:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "82": {"issue_url": "https://github.com/pallets/flask/issues/3329", "issue_id": "#3329", "issue_summary": "Running flask crashes Python on macOS 10.15", "issue_description": "SamusAranX commented on 10 Aug 2019\nTL;DR: Python crashes because of libcrypto shenanigans. Ignoring for the moment that I'm running a beta OS, is this a Flask problem or a Python problem? Flask worked beautifully before I upgraded to Python 3.7.4, even on 10.15.\nExpected Behavior\nMy application starts.\nFLASK_ENV=development flask run --host=0.0.0.0\nActual Behavior\nPython crashes.\n * Environment: development\n * Debug mode: on\n * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)\n * Restarting with stat\nAbort trap: 6\n * Debugger is active!\n * Debugger PIN: 244-572-746\nTraceback (most recent call last):\n  File \"/usr/local/bin/flask\", line 10, in <module>\n    sys.exit(main())\n  File \"/usr/local/lib/python3.7/site-packages/flask/cli.py\", line 906, in main\n    cli.main(args=args, prog_name=name)\n  File \"/usr/local/lib/python3.7/site-packages/flask/cli.py\", line 569, in main\n    return super(FlaskGroup, self).main(*args, **kwargs)\n  File \"/usr/local/lib/python3.7/site-packages/click/core.py\", line 717, in main\n    rv = self.invoke(ctx)\n  File \"/usr/local/lib/python3.7/site-packages/click/core.py\", line 1137, in invoke\n    return _process_result(sub_ctx.command.invoke(sub_ctx))\n  File \"/usr/local/lib/python3.7/site-packages/click/core.py\", line 956, in invoke\n    return ctx.invoke(self.callback, **ctx.params)\n  File \"/usr/local/lib/python3.7/site-packages/click/core.py\", line 555, in invoke\n    return callback(*args, **kwargs)\n  File \"/usr/local/lib/python3.7/site-packages/click/decorators.py\", line 64, in new_func\n    return ctx.invoke(f, obj, *args, **kwargs)\n  File \"/usr/local/lib/python3.7/site-packages/click/core.py\", line 555, in invoke\n    return callback(*args, **kwargs)\n  File \"/usr/local/lib/python3.7/site-packages/flask/cli.py\", line 783, in run_command\n    threaded=with_threads, ssl_context=cert)\n  File \"/usr/local/lib/python3.7/site-packages/werkzeug/serving.py\", line 1007, in run_simple\n    run_with_reloader(inner, extra_files, reloader_interval, reloader_type)\n  File \"/usr/local/lib/python3.7/site-packages/werkzeug/_reloader.py\", line 326, in run_with_reloader\n    ensure_echo_on()\n  File \"/usr/local/lib/python3.7/site-packages/werkzeug/_reloader.py\", line 315, in ensure_echo_on\n    termios.tcsetattr(sys.stdin, termios.TCSANOW, attributes)\ntermios.error: (5, 'Input/output error')\nAlong with the traceback, I get a \"Python quit unexpectedly.\" dialog from the OS itself:\nProcess:               Python [22680]\nPath:                  /usr/local/Cellar/python/3.7.4/Frameworks/Python.framework/Versions/3.7/Resources/Python.app/Contents/MacOS/Python\nIdentifier:            Python\nVersion:               3.7.4 (3.7.4)\nCode Type:             X86-64 (Native)\nParent Process:        bash [96512]\nResponsible:           iTerm2 [96508]\nUser ID:               501\n\nDate/Time:             2019-08-10 19:59:34.561 +0200\nOS Version:            Mac OS X 10.15 (19A526h)\nReport Version:        12\nBridge OS Version:     3.0 (14Y904)\nAnonymous UUID:        01D731B3-953D-1E90-36A7-011EAA224529\n\nSleep/Wake UUID:       1BC6AE63-AA8F-4BEF-8027-28080B7A5B9E\n\nTime Awake Since Boot: 16000 seconds\nTime Since Wake:       6000 seconds\n\nSystem Integrity Protection: enabled\n\nCrashed Thread:        1\n\nException Type:        EXC_CRASH (SIGABRT)\nException Codes:       0x0000000000000000, 0x0000000000000000\nException Note:        EXC_CORPSE_NOTIFY\n\nApplication Specific Information:\n/usr/lib/libcrypto.dylib\nabort() called\nInvalid dylib load. Clients should not load the unversioned libcrypto dylib as it does not have a stable ABI.\nEnvironment\nPython version: 3.7.4\nFlask version: 1.1.1\nWerkzeug version: 0.15.5", "issue_status": "Closed", "issue_reporting_time": "2019-08-10T18:02:55Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "83": {"issue_url": "https://github.com/pallets/flask/issues/3327", "issue_id": "#3327", "issue_summary": "`flask run` in debug mode fails with `No module named C:\\programs\\Python37\\Scripts\\flask`", "issue_description": "sorgloomer commented on 9 Aug 2019\nHow to reproduce\nHave flask installed\nOpen up a terminal in an empty folder\nrun set FLASK_DEBUG=1 && flask run (yep, its windows)\nExpected Behavior\nFlask should attempt to start in debug mode, should fail with Error: Failed to find Flask application or factory in module \"app\". Use \"FLASK_APP=app:name to specify one. or if you have a valid app in the folder it should start normally in debug mode. Should not fail with No module named C:\\programs\\Python37\\Scripts\\flask\nActual Behavior\nFlask fails earlier, with message: No module named C:\\programs\\Python37\\Scripts\\flask\nConsole dump\nC:\\workspace\\aliz\\temp\\flaskbug>set FLASK_DEBUG=1 && flask run\n * Environment: production\n   WARNING: This is a development server. Do not use it in a production deployment.\n   Use a production WSGI server instead.\n * Debug mode: on\n * Restarting with stat\nc:\\programs\\python37\\python.exe: No module named C:\\programs\\Python37\\Scripts\\flask\nEnvironment\nC:\\workspace\\aliz\\temp\\flaskbug>python --version\nPython 3.7.4\n\nC:\\workspace\\aliz\\temp\\flaskbug>python -m pip show flask\nName: Flask\nVersion: 1.1.1\n...\n\nC:\\workspace\\aliz\\temp\\flaskbug>python -m pip show Werkzeug\nName: Werkzeug\nVersion: 0.15.5\n...\n\nC:\\workspace\\aliz\\temp\\flaskbug>python -c \"import platform;print(platform.python_version(), platform.architecture())\"\n3.7.4 ('64bit', 'WindowsPE')\n1", "issue_status": "Closed", "issue_reporting_time": "2019-08-09T13:41:56Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "84": {"issue_url": "https://github.com/pallets/flask/issues/3326", "issue_id": "#3326", "issue_summary": "Flash messages not showing when route is called by ajax", "issue_description": "gelflein commented on 9 Aug 2019\nHello,\nI am submitting a form to insert data in my oracle-database.\nBecause I don't want to reload the page when submitting the form I am calling a js-function.\nHere is my submit-button:\n<button class=\"btn btn-primary mt-3\" type=\"button\" onclick=\"createSubmit()\">Speichern</button>\nThe js-function called by the button:\nfunction createSubmit() {\n    var shortcode = document.getElementById(\"shortcode\").value;\n    var product = document.getElementById(\"productInput-hidden\").value;\n    var serialnumber = document.getElementById(\"serialnumber\").value;\n    var status = document.getElementById(\"statusInput-hidden\").value;\n    var user = document.getElementById(\"userInput-hidden\").value;\n    var acquireddate = document.getElementById(\"acquireddate\").value;\n    var installdate = document.getElementById(\"installdate\").value;\n    var remarks = document.getElementById(\"remarks\").value;\n\n    req = $.ajax({\n        url : \"/create_submit\",\n        type : \"POST\",\n        data : { shortcode : shortcode, product : product, serialnumber : serialnumber, status : status, user : user, acquireddate : acquireddate, installdate : installdate, remarks : remarks }\n    });\n}\nAnd here we got the route:\n@bp.route('/create_submit', methods=['POST'])\n@login_required\ndef create_submit():\n    error = None\n    short_code = request.form['shortcode']\n    product = request.form['product']\n    serial_number = request.form['serialnumber']\n    status = request.form['status']\n    user = request.form['user']\n    acquired_date = request.form['acquireddate']\n    date_installed = request.form['installdate']\n    remarks = request.form['remarks']\n\n    try:\n        new = Items(short_code, remarks, short_code, '38', acquired_date, date_installed, product, serial_number,\n                    status, '1', user, g.user[1])\n        new.post()\n    except:\n        error = 'Request Fehler'\n        new = False\n\n    if new is not False:\n        if new.r_status_code == 201:\n            flash('Asset angelegt', 'success')\n        elif new.r_status_code is not None:\n            error = 'API Fehler'\n        else:\n            error = 'Keine Antwort'\n    else:\n        error = 'Objekt Fehler'\n\n    if error is not None:\n        flash(error, 'error')\n\n    return jsonify({'result' : 'success'})\nIn general the mechanism is working corret, but the flash-messages generated by /create_submit are not showing immediately. The show up after a page refresh.\nI think this happens because I am using ajax to call /create_submit and the return is not correct.\nIs there a way to get the flash-messages to show immediately?\nEnvironment\nPython version: 3.7.3\nFlask version: 1.0.3\nWerkzeug version: 0.15.4", "issue_status": "Closed", "issue_reporting_time": "2019-08-09T09:47:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "85": {"issue_url": "https://github.com/pallets/flask/issues/3325", "issue_id": "#3325", "issue_summary": "Upload Image with Flask backend and SwaggerUI for API", "issue_description": "deji-bacct04 commented on 8 Aug 2019\nDescription\nUploaded image is not saved and when redirected to my template.html, broken image is shown for my html.\nI am uploading image in flask. If Flask is used individually, upload is okay. But when integrating with Connexion[Swagger-UI], I did not have the expected results. The flow of my upload is in 1 python file. And I have 2 html files for the upload and display of image. I am sure that my configurations in swagger.yml is incorrect that is why I am not getting the results I'm expecting.\nExpected behaviour\nExpectation: when /api/read is accessed, upload.html will be shown. select image to upload. after pressing 'Upload' button, will be redirected to template.html where will I see the image I uploaded.\nActual behaviour\nActual: when accessing /api/read, redirected to upload.html and after pressing Upload button, I'll be redirected to template.html but the image is broken and image is not saved to my UPLOAD_FOLDER. This is shown in flask console:\n172.28.59.117 - - [07/Aug/2019 16:51:08] \"GET /api/read HTTP/1.1\" 200 -\n172.28.59.117 - - [07/Aug/2019 16:51:13] \"POST /api/read HTTP/1.1\" 200 -\n172.28.59.117 - - [07/Aug/2019 16:51:13] \"GET /api/read?filename= HTTP/1.1\" 200 -\n172.28.59.117 - - [07/Aug/2019 16:51:17] \"GET /api/read?filename= HTTP/1.1\" 200 -\nSometimes, error is like this:\nTypeError: uploaded_file() missing 1 required positional argument: 'filename'\nAdditional info:\nupload.py\nimport os\nfrom flask import Flask, request, redirect, url_for, send_from_directory, render_template\nfrom werkzeug.utils import secure_filename\nfrom app import application\nimport connexion\nimport logging\n\nUPLOAD_FOLDER = '/root/trial/server/uploads/'\nALLOWED_EXTENSIONS = set(['txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif'])\n\ndef allowed_file(filename):\n    return '.' in filename and \\\n       filename.rsplit('.', 1)[1] in ALLOWED_EXTENSIONS\n\n#@application.route('/', methods=['GET', 'POST'])\n\ndef landing_page():\n  return render_template('upload.html')\n\ndef upload_file():\n    if request.method == 'POST':\n        global filename\n        global file\n        file = request.files['file']\n        if file and allowed_file(file.filename):\n            filename = secure_filename(file.filename)\n            file.save(os.path.join(application.config['UPLOAD_FOLDER'], filename))\n            return redirect(url_for('uploaded_file', filename=filename))\n    return render_template('upload.html')\n\n#@application.route('/show/<filename>')\ndef uploaded_file():\n    #filename = 'http://127.0.0.1:5000/uploads/' + filename\n    return render_template('template.html')\n\n#@application.route('/uploads/<filename>')\ndef send_file(filename):\n    return send_from_directory(UPLOAD_FOLDER, filename)\n\n#@application.route('/')\ndef api_root():\n    return 'Welcome'\n\nif __name__ == '__main__':\n    app.run()\nswagger.yml\ninfo:\n  description: This is the swagger file that goes with our server code\n  version: \"1.0.0\"\n  title: Swagger REST Article\nconsumes:\n  - \"application/json\"\nproduces:\n  - \"application/json\"\n\nbasePath: \"/api\"\n\n# Paths supported by the server application\npaths:\n  /read:\n     get:\n       operationId: \"views.upload.upload_file\"\n       consumes: [\"multipart/form-data\"]\n       produces: [\"text/html\"]\n       tags:\n         - \"Upload\"\n       summary: \"Uploads a file\"\n       parameters: [{\n            name: file,\n            required: false,\n            in: formData,\n            type: file\n        }]\n       description: \"Uploads a file\"\n       responses:\n         200:\n           description: \"Info Success!\"\n     post:\n       operationId: \"views.upload.uploaded_file\"\n       consumes: [\"application/octet-stream\"]\n       produces: [\"text/html\"]\n       tags:\n         - \"Upload\"\n       summary: \"Uploads a file\"\n       description: \"Uploads a file\"\n       responses:\n         201:\n           description: \"OK\"\n           schema:\n             type: string\n             format: binary\n     put:\n       operationId: \"views.upload.send_file\"\n       consumes: [\"application/octet-stream\"]\n       produces: [\"text/html\"]\n       tags:\n         - \"Upload\"\n       summary: \"Save file\"\n       description: \"Save file\"\n       responses:\n         202:\n           description: \"Success upload\"\n           schema:\n             type: string\n             format: binary\ntemplate.html (snippet)\n<img class=\"annotatable\" id=\"ptolemy\" src=\"{{url_for('/api.views_upload_send_file',filename=filename)}}\" class=\"annotatable\">", "issue_status": "Closed", "issue_reporting_time": "2019-08-08T07:38:26Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "86": {"issue_url": "https://github.com/pallets/flask/issues/3323", "issue_id": "#3323", "issue_summary": "Post No response", "issue_description": "pengbaba19 commented on 7 Aug 2019\nDo No Close the Issues!!!!!!!!!!\nif you add both post and get in the same flask , and get first then the next post request will not response !!!!!", "issue_status": "Closed", "issue_reporting_time": "2019-08-07T09:32:21Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "87": {"issue_url": "https://github.com/pallets/flask/issues/3322", "issue_id": "#3322", "issue_summary": "POST NO RESPONSE", "issue_description": "pengbaba19 commented on 7 Aug 2019 \u2022\nedited by ThiefMaster\nfrom flask import Flask,jsonify,request\n\n\nclass myWeb():\n    def __init__(self,st):\n\n        self.st = st\n        self.flask = Flask(\"web_test\")\n        self.flask.add_url_rule('/stinfo',view_func=self.get_student_info)\n\n\n        self.flask.add_url_rule('/alive',view_func=self.receive_test,methods=[\"POST\"])\n\n    def get_student_info(self):\n        return jsonify(self.st)\n\n    def receive_test(self):\n        if request.method == \"POST\":\n            print(request.json)\n            return jsonify(self.st)\n\n    def web_run(self):\n        self.flask.run(host='10.61.96.171')\n\n\n\nif __name__ == '__main__':\n    st = dict()\n    st['test'] = 1\n    mw = myWeb(st)\n    s = mw.web_run()", "issue_status": "Closed", "issue_reporting_time": "2019-08-07T08:43:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "88": {"issue_url": "https://github.com/pallets/flask/issues/3320", "issue_id": "#3320", "issue_summary": "Version tag mismatch in link to example projects from docs", "issue_description": "neirbowj commented on 1 Aug 2019\nScenario\nAs of v1.1.1.\nNavigate to the Flask docs via the Pallets Project site.\nProgress to Tutorial :: Keep Developing!\nFollow the link to example project\nExpected Behavior\nThe version tag in the link matches the documentation version tag, and/or the target URL leads somewhere useful.\nActual Behavior\nLink target version is not the same as the doc version, and it refers to a development version that has not yet been tagged (404).\nEnvironment\nN/A\n1", "issue_status": "Closed", "issue_reporting_time": "2019-08-01T00:14:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "89": {"issue_url": "https://github.com/pallets/flask/issues/3319", "issue_id": "#3319", "issue_summary": "Flask request.stream doesn't work as expected all times", "issue_description": "adrienferrari commented on 1 Aug 2019\nExpected Behavior\nI need to stream data the Flask server to another external API. For this I'm using the request object from Flash with stream argument.\nfrom flask import request, Response\n\n@blueprint.route(\"/upload3\", methods=[\"POST\"])\ndef upload3():\n    resp = requests.post(\n                    url,\n                    data=request.stream,\n                    auth=auth,\n                    verify=False,\n                    stream=True)\n    return Response(status=200)\nActual Behavior\nIt works properly when the client and Flask server are on the same network but it doesn't work when not.\nclient -> Flask server -> external API\nHere the result on the same network\nhttps://photos.app.goo.gl/wzRvN667791NxQhXA\nHere the trouble : The server wait all incoming data before sending it to the other server. But we can see that the connection is already opend.\nI can also see the python process eating the RAM memory corresponding to the data size.\nhttps://photos.app.goo.gl/EAWPvSL4CCBZURKb6\nhttps://photos.app.goo.gl/EGSnFU6fLHAwgPB46\nEnvironment\nPython version:3.6\nFlask version:1.0.3\nWerkzeug version:0.15.4```", "issue_status": "Closed", "issue_reporting_time": "2019-07-31T20:07:16Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "90": {"issue_url": "https://github.com/pallets/flask/issues/3318", "issue_id": "#3318", "issue_summary": "Provide secure default hash function for SecureCookieSessionInterface digest_method", "issue_description": "dglade commented on 31 Jul 2019\nExpected Behavior\nDefault digest_method for SecureCookieSessionInterface should be provide strong collision resistance. Ideally, upgrade default to sha-256 or better.\nclass SecureCookieSessionInterface(SessionInterface):\n    \"\"\"The default session interface that stores sessions in signed cookies\n    through the :mod:`itsdangerous` module.\n    \"\"\"\n    #: the salt that should be applied on top of the secret key for the\n    #: signing of cookie based sessions.\n    salt = 'cookie-session'\n    #: the hash function to use for the signature.  The default is sha1\n    digest_method = staticmethod(hashlib.sha1)\nActual Behavior\nhashlib.sha1 is default and must be overridden by a custom SessionInterface in applications using flask. It would be more secure to default to a stronger hash algorithm.\nclass CustomSecureCookieSessionInterface(SecureCookieSessionInterface):\n    \"\"\"\"\n    Custom override of flask.sessions.SecureCookieSessionInterface to use\n    sha256 rather than sha1 for session signatures.\n    \"\"\"\"\n    digest_method = staticmethod(hashlib.sha256)```\n\napp.session_interface = CustomSecureCookieSessionInterface()\n### Environment\n\n* Python version: 2, 3\n* Flask version: all\n* Werkzeug version: n/a", "issue_status": "Closed", "issue_reporting_time": "2019-07-30T20:41:30Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "91": {"issue_url": "https://github.com/pallets/flask/issues/3313", "issue_id": "#3313", "issue_summary": "Cant Run a flask server with FLASK_ENV=development or production", "issue_description": "Riprock commented on 24 Jul 2019\nExpected Behavior\nShould be able to run flask with FLASK_ENV=development or production\nActual Behavior\nI get the output\nServing Flask app \"simple\" (lazy loading)\nEnvironment: production\nWARNING: This is a development server. Do not use it in a production deployment.\nUse a production WSGI server instead.\nDebug mode: on\nRestarting with stat\nc:\\users\\Riprock\\Projects\\simple s&r\\venv\\scripts\\python.exe: No module named C:\\Users\\Riprock\\Projects\\Simple S&R\\venv\\Scripts\\flask\nEnvironment\nPython version: 3.7.4\nFlask version: 1.1.1\nWerkzeug version: 0.15.5\nI can't seem to get a flask server running after updating to the latest version of Flask and python. Before the update my FLASK_ENV=development and FLASK_DEBUG=1. Then I updated and started to encounter the error. I tried rebuilding my venv and getting the same error.", "issue_status": "Closed", "issue_reporting_time": "2019-07-23T20:30:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "92": {"issue_url": "https://github.com/pallets/flask/issues/3312", "issue_id": "#3312", "issue_summary": "documentation - patterns - larger applications - add link to explain why \"Python does not want modules in packages to be the startup file\"", "issue_description": "zachvalenta commented on 23 Jul 2019\nThis paragraph:\nBut how do you run your application now? The naive python yourapplication/__init__.py will not work. Let\u2019s just say that Python does not want modules in packages to be the startup file.\ncould be summarized as:\nYou can't do that, and we won't explain why; just trust us.\nIn lieu of actually explaining, a link to the Python docs that actually do explain what's going on here seems in order.", "issue_status": "Closed", "issue_reporting_time": "2019-07-23T13:45:14Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "93": {"issue_url": "https://github.com/pallets/flask/issues/3311", "issue_id": "#3311", "issue_summary": "RequestContext documentation", "issue_description": "Lyla-Fischer commented on 22 Jul 2019\nExpected Behavior\nI think that the documentation for mocking request contexts in Flask 1.1.x might be a bit off. I'm filing an issue instead of submitting a pull request in case there is something about my configuration that doesn't fit the target audience of the documentation.\nThe docs say that in order to mock a request context, you should use the with functionality as such:\nwith app.test_request_context(\n        '/make_report/2017', data={'format': 'short'}):\n    generate_report()\nActual Behavior\nIn order to actually gain access to the request context, I has to insert as as with the with\nwith app.test_request_context(\n        '/make_report/2017', data={'format': 'short'}) as request:\n    generate_report(request)\nIt's not hard to guess, but it seemed like it might be worth updating the docs.\nEnvironment\nPython version: 3.7.3\nFlask version: 1.1.1\nWerkzeug version: 0.15.5", "issue_status": "Closed", "issue_reporting_time": "2019-07-22T16:16:37Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "94": {"issue_url": "https://github.com/pallets/flask/issues/3310", "issue_id": "#3310", "issue_summary": "Change Flask request context to bypass a bug at redirection when referrer is too long.", "issue_description": "celine-m-s commented on 22 Jul 2019 \u2022\nedited\nHello!\nI have a problem in my Flask application. When the \"Referer\" header field is longer than about 1700 characters in any view, Flask does not perform the redirection but issues a 503 error.\nActual behavior\n# PDB\nimport requests\n\nheaders = {\n    {\n        'host': 'https://myhost.com',\n        'referer': 'https://myhost.com?id_token_hint=asuperlongtokenstrippedoutforconvenience'    \n    }\n}\n\nrequests.get('https://myurl.com', headers=headers)\n<Response [503]>\n# views.py\n@app.route('/aview')\ndef original_view():\n    return redirect(url_for('home'))\n\n@app.route('/')\ndef home():\n    return render_template('home.html')\nThe redirection works when the referrer field is shorter than about 1700 characters, I tested it several times. Note that this happens only on staging or on production and never on my dev environment.\nMy direction to bypass this problem is to change the referrer and then perform the redirection.\nBut if I change it in original_view, the referrer is still present in the redirected view (home). It does nothing. Example:\n# views.py\nfrom flask import request\n\n@app.route('/aview')\ndef original_view():\n    real_request = request._get_current_object()\n    real_request.environ['HTTP_REFERER'] = ''\n    return redirect(url_for('home'))\nDoing this, the request object is changed in original_view but reappears as it was before in home with the old referrer still present.\nI read that Flask stores WSGI variables in a local thread but I did not manage to change it and I don't know if it's even possible. I tried to get the context using _request_ctx_stack from current app but even if I change the referrer here, it still reappears after the redirection.\nDoes someone have an idea of what I can do to solve this problem in an elegant way? Thanks in advance!\nExpected Behavior\nPerform the redirection without a 503 or delete the referrer.\nEnvironment\nPython version: 3.6.7\nFlask version: 0.12.4\nWerkzeug version: 0.11.10", "issue_status": "Closed", "issue_reporting_time": "2019-07-22T08:01:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "95": {"issue_url": "https://github.com/pallets/flask/issues/3307", "issue_id": "#3307", "issue_summary": "`flask run` not using ENV variable set in code.", "issue_description": "klondikemarlen commented on 21 Jul 2019\nExpected Behavior\nWhen using flask run I expect it to use the variables I set in my code.\nfrom flask import Flask\n\nclass DevelopmentConfig(object):\n    ENV = 'development'\n    DEBUG = True\n\napp = Flask(__name__)\napp.config.from_object(DevelopmentConfig)\n\n# then using `flask run`\nActual Behavior\nIt uses the default 'production' enviroment with debug off.\nEnvironment: production\nWARNING: This is a development server. Do not use it in a production deployment.\nUse a production WSGI server instead.\nDebug mode: off\nRunning on http://127.0.0.1:5000/ (Press CTRL+C to quit)\nEnvironment\nPython version: 3.7.3\nFlask version: 1.0.3\nWerkzeug version: 0.15.4\nYes I realize that in the API documentation it explicitly says this won't work, yet it used to in older version of flask (at least when using app.run()). Perhaps this is more a of feature request?", "issue_status": "Closed", "issue_reporting_time": "2019-07-20T21:10:55Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "96": {"issue_url": "https://github.com/pallets/flask/issues/3306", "issue_id": "#3306", "issue_summary": "copy_current_request_context creates new global app context", "issue_description": "kaos commented on 19 Jul 2019\nRelated to #2935 but for g.\nExpected Behavior\nWhen I use @copy_current_request_context it should preserve the contents in flask.g.\nI would expect that the g object is transparent to whether I'm in a normal request context, or one that has been copied using the copy_current_request_context decorator in another greenlet.\nI borrowed the very nice test-script from #2935 and adapted it for g instead.\nimport concurrent.futures\nimport random\n\nfrom flask import Flask, g, copy_current_request_context, request, session\n\napp = Flask(__name__)\napp.config['SECRET_KEY'] = 'test'\nexecutor = concurrent.futures.ThreadPoolExecutor()\n\n@app.route('/')\ndef session_context():\n    test_value = random.randint(1, 1001)\n    g.test_value = test_value\n\n    original_context = (\n        ('g', getattr(g, 'test_value', None))\n    )\n\n    @copy_current_request_context\n    def debug_session():\n        return (\n            ('g', getattr(g, 'test_value', None))\n        )\n\n    future = executor.submit(debug_session)\n    print('original_context:', original_context)\n    print('copied_context:', future.result())\n    return 'ok'\n\n\nif __name__ == '__main__':\n    client = app.test_client()\n    print('### Request ###')\n    client.get('/')\nActual Behavior\nI get a new empty g object in the decorated function.\n### Request ###\noriginal_context: ('g', 750)\ncopied_context: ('g', None)\nEnvironment\nPython version: 3.7.3\nFlask version: 1.1.1\nWerkzeug version: 0.15.5", "issue_status": "Closed", "issue_reporting_time": "2019-07-19T07:12:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "97": {"issue_url": "https://github.com/pallets/flask/issues/3304", "issue_id": "#3304", "issue_summary": "Flask documentation links to a page 'Extension Registry' which redirects to the generic Flask website", "issue_description": "jwg4 commented on 17 Jul 2019\nExpected Behavior\nThe Flask docs should link to the correct page for the Flask Extension registry, or, if this no longer exists, references to it should be removed from the docs.\nActual Behavior\nThe page about extensions at https://flask.palletsprojects.com/en/1.1.x/extensions/ has a link to http://flask.pocoo.org/extensions/ which redirects to https://palletsprojects.com/p/flask/ This latter page does not contain any info about Flask extensions, nor does it indicate where that might be found.\nEnvironment\nFlask version: docs to Flask 1.1. Also current docs on master.\n4", "issue_status": "Closed", "issue_reporting_time": "2019-07-16T21:55:03Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "98": {"issue_url": "https://github.com/pallets/flask/issues/3303", "issue_id": "#3303", "issue_summary": "DeprecationWarning: Using or importing the ABCs from 'collections' - Jinja2", "issue_description": "jkozlowicz commented on 14 Jul 2019\nExpected Behavior\nAfter installing flask and implementing tests using pytest I noticed some DepracatedWarnings coming from the default Jinja2 installation that comes with flask (pip install flask), see traceback below for details.\nIt shouldn't be the case, because it has been fixed already and merged:\npallets/jinja@31bf9b7#diff-be2eb7812ee39a4147506e10763f89c6L13\nYet I can see in site-packages/jinja2/tests.py line:13 \"from collections import Mapping\" (also in other files under site-packages/jinja2).\nUninstalling jinja2 and reinstalling it via \"pip install https://github.com/pallets/jinja/zipball/master\" makes those warnings disappear.\nMinimal project setup:\n(test-collections-warning) \u279c  TestCollectionsWarning tree .\n.\n\u251c\u2500\u2500 app.py\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 test_app.py\n\n#app.py\nfrom flask import Flask\n\nflask_app = Flask(__name__)\n\n@flask_app.route('/')\ndef root():\n    return 'Hello world'\n\n\n#tests/test_app.py\nimport app\n\ndef test_hello_world():\n    assert 1 == 1\n\n#requirements.txt\nflask\npytest\nSteps to reproduce:\nmkvirtualenv --python=`which python3` test-collections-warning\npip --no-cache-dir install -r requirements.txt\n...\n(Collecting Jinja2>=2.10.1 (from flask->-r requirements.txt (line 1))\n  Downloading https://files.pythonhosted.org/packages/1d/e7/fd8b501e7a6dfe492a433deb7b9d833d39ca74916fa8bc63dd1a4947a671/Jinja2-2.10.1-py2.py3-none-any.whl)\n...\npytest\nActual Behavior\nDeprecationWarnings are shown.\n(test-collections-warning) \u279c  TestCollectionsWarning pytest\n================================================= test session starts =================================================\nplatform darwin -- Python 3.7.3, pytest-5.0.1, py-1.8.0, pluggy-0.12.0\nrootdir: /Users/jkozlowicz/PycharmProjects/TestCollectionsWarning\ncollected 1 item\n\ntests/test_app.py .                                                                                             [100%]\n\n================================================== warnings summary ===================================================\n/Users/jkozlowicz/.virtualenvs/test-collections-warning/lib/python3.7/site-packages/jinja2/utils.py:485\n  /Users/jkozlowicz/.virtualenvs/test-collections-warning/lib/python3.7/site-packages/jinja2/utils.py:485: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\n    from collections import MutableMapping\n\n/Users/jkozlowicz/.virtualenvs/test-collections-warning/lib/python3.7/site-packages/jinja2/runtime.py:318\n  /Users/jkozlowicz/.virtualenvs/test-collections-warning/lib/python3.7/site-packages/jinja2/runtime.py:318: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\n    from collections import Mapping\n\n-- Docs: https://docs.pytest.org/en/latest/warnings.html\nEnvironment\nPython version: 3.7.3\nFlask version: 1.1.1\nWerkzeug version: 0.15.4\nOS: macOS Mojave 10.14.5\npip: 19.1.1", "issue_status": "Closed", "issue_reporting_time": "2019-07-13T21:21:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "99": {"issue_url": "https://github.com/pallets/flask/issues/3302", "issue_id": "#3302", "issue_summary": "Window system how to deploy flask", "issue_description": "tryinggo commented on 13 Jul 2019\nExpected Behavior\n# Paste a minimal example that causes the problem.\nquestion\nGunicorn does not support the window system, what can be used in the window system instead of the gunicorn deployment\nEnvironment\nPython version: python3.5\nFlask version:\nsystem version:window 10", "issue_status": "Closed", "issue_reporting_time": "2019-07-13T09:15:21Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "100": {"issue_url": "https://github.com/pallets/flask/issues/3301", "issue_id": "#3301", "issue_summary": "Gunicorn does not support the window system, what can be used in the window system instead of the gunicorn deployment", "issue_description": "tryinggo commented on 13 Jul 2019\nExpected Behavior\n# Paste a minimal example that causes the problem.\nActual Behavior\nPaste the full traceback if there was an exception.\nEnvironment\nPython version:\nFlask version:\nWerkzeug version:", "issue_status": "Closed", "issue_reporting_time": "2019-07-13T09:05:08Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "101": {"issue_url": "https://github.com/pallets/flask/issues/3300", "issue_id": "#3300", "issue_summary": "Warning on old documentation / SEO", "issue_description": "exic commented on 11 Jul 2019\nI just found out that there is a newer page for documentation after strolling around on flask.pocoo.org for quite a while I think there should be some more links on pocoo.org to the newer docs so that people don't accidentally read outdated stuff. Maybe someone also has ideas how to improve search engine stuff since pallets flask docs seem to be really hard to find right now.\nExpected Behavior\nSearching for \"flask documentation\" on google.com or duckduckgo.com, https://flask.palletsprojects.com/en/1.1.x/ should be listed higher up, but at least the documentation on http://flask.pocoo.org/docs/1.0/ should have links to the newer documentation.\nActual Behavior\nPallets documentation is hard to find and the only link from Pocoo to Pallets seems to be on http://www.pocoo.org/ itself.", "issue_status": "Closed", "issue_reporting_time": "2019-07-11T08:18:25Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "102": {"issue_url": "https://github.com/pallets/flask/issues/3297", "issue_id": "#3297", "issue_summary": "If arguments are re-written before flask is loaded it sees the original arguments on windows python 2.7", "issue_description": "karthiknadig commented on 10 Jul 2019\nPreviously flask (v1.0.3) was passing sys.argv to cli.main:\nhttps://github.com/pallets/flask/blob/1.0.3/flask/cli.py#L889-L906\nNow flask (v1.1.1) is not passing argv, to cli.main.\nhttps://github.com/pallets/flask/blob/1.1.1/src/flask/cli.py#L965-L966\nThis causes it to always get args via get_os_args via click.\nhttps://github.com/pallets/click/blob/7.0/click/core.py#L700-L704\nWhich is this issue in click pallets/click#536\nThis basically breaks debugging (on windows with python 2.7), where the debugger re-writes sys.argv before click or flask is loaded. So, attempting to debug flask using ptvsd or pydevd results in the error message below.\nExpected\n>python -m ptvsd --host localhost --port 5692 -m flask run --no-debugger --no-reload --with-threads --port 5014\n * Serving Flask app \"app\"\n * Environment: development\n * Debug mode: on\n * Running on http://127.0.0.1:5014/ (Press CTRL+C to quit)\nActual\n>python -m ptvsd --host localhost --port 5692 -m flask run --no-debugger --no-reload --with-threads --port 5014\nUsage: python -m flask [OPTIONS] COMMAND [ARGS]...\nTry \"python -m flask --help\" for help.\n\nError: no such option: --host\nEnvironment\nPython version: 2.7\nFlask version: 1.1.1\nWerkzeug version: N/A\nPlatform: Windows", "issue_status": "Closed", "issue_reporting_time": "2019-07-10T05:55:01Z", "fixed_by": "#3299", "pull_request_summary": "pass sys.argv to flask cli", "pull_request_description": "Member\ndavidism commented on 11 Jul 2019\ncloses #3297\nCan be removed when pallets/click#536 is fixed.", "pull_request_status": "Merged", "issue_fixed_time": "2019-07-10T19:42:59Z", "files_changed": [["9", "CHANGES.rst"], ["2", "src/flask/__init__.py"], ["3", "src/flask/cli.py"]]}, "103": {"issue_url": "https://github.com/pallets/flask/issues/3295", "issue_id": "#3295", "issue_summary": "pycharm No module named flask.flask flask 1.1.0", "issue_description": "eic-aibee commented on 10 Jul 2019\nwhen FLASK_DEBUG set to 1\ndebugger will report\nNo module named flask.flask\nerror\nwhen i revert back flask version to 1.0.4, the error disappear.\nI think this error is related new version.\nplease fix it, thank you.\nEnvironment\nPython version: 3.7.2\nFlask version: 1.1.0", "issue_status": "Closed", "issue_reporting_time": "2019-07-10T14:25:35Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "104": {"issue_url": "https://github.com/pallets/flask/issues/3294", "issue_id": "#3294", "issue_summary": "Custom response class (force_type static method) doesn't work", "issue_description": "seungwon-kang commented on 10 Jul 2019 \u2022\nedited\nI made a test code for this issue. I made a custom class because I want server to return jsonified list if view function returns list. It works on flask 1.0.2 but it doesn't work on the new flask version (1.1.1)\nfrom flask import Flask, Response, jsonify\n\n\nclass CustomResponse(Response):\n    @classmethod\n    def force_type(cls, response, environ=None):\n        if isinstance(response, list):\n            return jsonify(response)\n        return super(CustomResponse, cls).force_type(response, environ)\n\n\napp = Flask(__name__)\napp.response_class = CustomResponse\n\n\n@app.route('/', methods=['GET'])\ndef response_list():\n    return ['it', 'is', 'test']\n\n\nif __name__ == '__main__':\n    app.run(host='127.0.0.1')\nOn 1.0.2 version,\n# evaluate a WSGI callable, or coerce a different response\n                # class to the correct type\n                try:\n                    rv = self.response_class.force_type(rv, request.environ)\n                except TypeError as e:\n                    new_error = TypeError(\n                        '{e}\\nThe view function did not return a valid'\n                        ' response. The return type must be a string, tuple,'\n                        ' Response instance, or WSGI callable, but it was a'\n                        ' {rv.__class__.__name__}.'.format(e=e, rv=rv)\n                    )\nflask changes type forcely by calling force_type of response_class, but newest version doesn't change. (code below)\n            if isinstance(rv, (text_type, bytes, bytearray)):\n                # let the response class set the status and headers instead of\n                # waiting to do it manually, so that the class can handle any\n                # special logic\n                rv = self.response_class(rv, status=status, headers=headers)\n                status = headers = None\n            elif isinstance(rv, dict):\n                rv = jsonify(rv)\n            elif isinstance(rv, BaseResponse) or callable(rv):\n                # evaluate a WSGI callable, or coerce a different response\n                # class to the correct type\n                try:\n                    rv = self.response_class.force_type(rv, request.environ)\n                except TypeError as e:\n                    new_error = TypeError(\n                        \"{e}\\nThe view function did not return a valid\"\n                        \" response. The return type must be a string, dict, tuple,\"\n                        \" Response instance, or WSGI callable, but it was a\"\n                        \" {rv.__class__.__name__}.\".format(e=e, rv=rv)\n                    )\n                    reraise(TypeError, new_error, sys.exc_info()[2])\n            else:\n                raise TypeError(\n                    \"The view function did not return a valid\"\n                    \" response. The return type must be a string, dict, tuple,\"\n                    \" Response instance, or WSGI callable, but it was a\"\n                    \" {rv.__class__.__name__}.\".format(rv=rv)\n                )\nIs it intended or just a bug?\nExpected\nWhen I call 127.0.0.1:5000,\n['it', 'is', 'test']\nActual\n[2019-07-10 16:36:33,554] ERROR in app: Exception on / [GET]\nTraceback (most recent call last):\n  File \"C:\\Users\\Mapia\\Desktop\\develop\\study\\flask.py\\venv\\lib\\site-packages\\flask\\app.py\", line 2446, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Mapia\\Desktop\\develop\\study\\flask.py\\venv\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n    return self.finalize_request(rv)\n  File \"C:\\Users\\Mapia\\Desktop\\develop\\study\\flask.py\\venv\\lib\\site-packages\\flask\\app.py\", line 1967, in finalize_request\n    response = self.make_response(rv)\n  File \"C:\\Users\\Mapia\\Desktop\\develop\\study\\flask.py\\venv\\lib\\site-packages\\flask\\app.py\", line 2130, in make_response\n    \" {rv.__class__.__name__}.\".format(rv=rv)\nTypeError: The view function did not return a valid response. The return type must be a string, dict, tuple, Response instance, or WSGI callable, but it was a list.\n127.0.0.1 - - [10/Jul/2019 16:36:33] \"GET / HTTP/1.1\" 500 -\nEnvironment\nPython version: 3.7.3\nFlask version: 1.1.1\nWerkzeug version: 0.15.4", "issue_status": "Closed", "issue_reporting_time": "2019-07-10T07:51:53Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "105": {"issue_url": "https://github.com/pallets/flask/issues/3291", "issue_id": "#3291", "issue_summary": "Custom Response force_type is now never called", "issue_description": "jaos commented on 8 Jul 2019\nSince #3214 I am no longer able to use a custom Response class to catch and format internal objects.\nIs there a more appropriate way to accomplish the same thing now that 1.1.0 is being picked up in my CI env?\nExpected Behavior\nfrom flask import Flask, Response, Blueprint                                    \nimport json                                                                     \n                                                                                \nclass BizModel():                                                               \n    def __init__(self, name):                                                   \n        self.name = name                                                        \n    def to_jsonable(self):                                                      \n        return {\"name\": self.name}                                              \n                                                                                \nclass BizResponse(Response):                                                    \n    @classmethod                                                                \n    def force_type(cls, rv, environ=None):                                      \n        if isinstance(rv, BizModel):                                            \n            return Response(json.dumps(rv.to_jsonable(), indent=4), mimetype='application/json', status=200)\n        return super(BizResponse, cls).force_type(rv, environ)                  \n                                                                                \napp = Flask(__name__)                                                           \napp.response_class = BizResponse                                                \n                                                                                \n@app.route('/biz')                                                              \ndef showbiz():                                                                  \n    return BizModel('showbiz')                                                  \n                                                                                \nif __name__ == \"__main__\":                                                      \n    test = app.test_client()                                                    \n    r = test.get('/biz')                                                        \n    assert r.is_json                                                            \n    assert r.json['name'] == 'showbiz'\nActual Behavior\n[2019-07-08 12:24:58,237] ERROR in app: Exception on /biz [GET]\nTraceback (most recent call last):\n  File \"/private/tmp/py3venv/lib/python3.7/site-packages/Flask-1.1.0-py3.7.egg/flask/app.py\", line 2446, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/private/tmp/py3venv/lib/python3.7/site-packages/Flask-1.1.0-py3.7.egg/flask/app.py\", line 1952, in full_dispatch_request\n    return self.finalize_request(rv)\n  File \"/private/tmp/py3venv/lib/python3.7/site-packages/Flask-1.1.0-py3.7.egg/flask/app.py\", line 1967, in finalize_request\n    response = self.make_response(rv)\n  File \"/private/tmp/py3venv/lib/python3.7/site-packages/Flask-1.1.0-py3.7.egg/flask/app.py\", line 2130, in make_response\n    \" {rv.__class__.__name__}.\".format(rv=rv)\nTypeError: The view function did not return a valid response. The return type must be a string, dict, tuple, Response instance, or WSGI callable, but it was a BizModel.                                                                                                                     \nTraceback (most recent call last):\n  File \"./flask3214.py\", line 28, in <module>\n    assert r.is_json\nAssertionError\nEnvironment\nPython version: 3.7.2\nFlask version: 1.1.0\nWerkzeug version: 0.15.4", "issue_status": "Closed", "issue_reporting_time": "2019-07-08T16:34:06Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "106": {"issue_url": "https://github.com/pallets/flask/issues/3289", "issue_id": "#3289", "issue_summary": "Allow accessing CLI command name from Flask CLI app factory", "issue_description": "justanr commented on 7 Jul 2019\nExpected Behavior\nThe selected command should be available in the application factory provided to the click integration.\nI recently started adding instrumentation to an application, however when I run most CLI commands I don't want to trigger the instrumentation to be initialized. However by the time I gain access to the application it's too late to turn it off (things have been mucked with and monkeypatched, etc). It seems like the easiest thing to do is allow the selected command to be considered when running the application factory so the factory can make informed decisions about what should/shouldn't be initialized during application setup based on what I'm attempting to do.\nThere is the possibility of doing various things such as:\nadding a --no-trace flag to the top level command\nusing a custom configuration when executing CLI commands other than run\nprobably some other gross things\nI managed to work around this not being available out of the box by adding the following to a custom flask group (something we were already using):\ndef get_command(self, ctx, name):\n    # arguably belongs on ScriptInfo.data instead of just shoving it on there\n    ctx.ensure_object(ScriptInfo).command = name\n    super().get_command(ctx, name)\nActual Behavior\nUnless I'm missing something, it's not available through vanilla means.\nEnvironment\nPython version: 3.7\nFlask version: 1.0.2\nWerkzeug version: 0.14.1\nClick version: 6.7", "issue_status": "Closed", "issue_reporting_time": "2019-07-07T14:16:26Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "107": {"issue_url": "https://github.com/pallets/flask/issues/3288", "issue_id": "#3288", "issue_summary": "Removing json_available reduces backward compatibility", "issue_description": "Contributor\naadibajpai commented on 7 Jul 2019 \u2022\nedited by davidism\nExpected Behavior\njson_available should be available\nfrom flask import json_available\nActual Behavior\nImportError: cannot import name 'json_available'\nEnvironment\nPython version: 3.7.3\nFlask version: 1.1.0\nWerkzeug version: 0.15.4\n6", "issue_status": "Closed", "issue_reporting_time": "2019-07-06T21:27:43Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "108": {"issue_url": "https://github.com/pallets/flask/issues/3287", "issue_id": "#3287", "issue_summary": "Multi-level error handling support broken in ver: 1.1.0", "issue_description": "ArshanKhanifar commented on 6 Jul 2019\nExpected Behavior\nCatching an exception type in an error handler and raising another exception type breaks the flask app instead of passing control to the corresponding error handler.\nGiven the following flask application:\nfrom flask import Flask, jsonify\nfrom werkzeug.exceptions import BadRequest, HTTPException\n\nclass CustomAppException(Exception):\n    pass\n\nclass AppFactory(object):\n    def create(self):\n        app = Flask(__name__)\n\n        @app.errorhandler(HTTPException)\n        def handle_generic_http_exceptions(e):\n            return jsonify({\n                \"error\": str(e)\n            }), e.code\n\n        @app.errorhandler(CustomAppException)\n        def unhandled_meteor_errors(e):\n            raise BadRequest(str(e))\n\n        @app.route(\"/\")\n        def raise_error_endpoint():\n            msg = 'some bad msg'\n            raise CustomAppException(msg)\n\n        return app\nA get request to the endpoint / should show the following response:\n{\n\"error\": \"400 Bad Request: some bad msg\"\n}\nActual Behavior\nInstead it gives this response:\n{\n\"error\": \"500 Internal Server Error: The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.\"\n}\nEnvironment\nPython version: 3.7.3\nFlask version: 1.1.0\nWerkzeug version: 0.15.4\n$ pip freeze\natomicwrites==1.3.0\nattrs==19.1.0\ncertifi==2019.6.16\nClick==7.0\nFlask==1.1.0\nimportlib-metadata==0.18\nitsdangerous==1.1.0\nJinja2==2.10.1\nMarkupSafe==1.1.1\nmore-itertools==7.1.0\npackaging==19.0\npluggy==0.12.0\npy==1.8.0\npyparsing==2.4.0\npytest==5.0.1\nsix==1.12.0\nwcwidth==0.1.7\nWerkzeug==0.15.4\nzipp==0.5.1\nThis is not broken in Flask 1.0.3. Here's the repo that tests this.", "issue_status": "Closed", "issue_reporting_time": "2019-07-06T00:23:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "109": {"issue_url": "https://github.com/pallets/flask/issues/3283", "issue_id": "#3283", "issue_summary": "Warn about logging name change", "issue_description": "Member\ndavidism commented on 2 Jul 2019\n#3282 changed the name of app.logger from \"flask.app\" to the value of app.name, which means existing logging configuration for \"flask\" or \"flask.app\" will have no effect. Show a warning if configuration is detected for these names and not for app.logger, to ease upgrades.", "issue_status": "Closed", "issue_reporting_time": "2019-07-02T15:23:10Z", "fixed_by": "#3284", "pull_request_summary": "show warning for old logger config", "pull_request_description": "Member\ndavidism commented on 3 Jul 2019 \u2022\nedited\nAdds a warning for #3282 when config for the \"flask.app\" or \"flask\" loggers is found and the logger for app.name isn't configured.\nUserWarning: 'app.logger' is named 'example' for this application, but configuration was found for 'flask.app', which no longer has an effect. The logging configuration should be moved to 'example'.\ncloses #3283", "pull_request_status": "Merged", "issue_fixed_time": "2019-07-02T18:43:48Z", "files_changed": [["4", "CHANGES.rst"], ["31", "src/flask/logging.py"], ["9", "tests/test_logging.py"]]}, "110": {"issue_url": "https://github.com/pallets/flask/issues/3279", "issue_id": "#3279", "issue_summary": "CHANGES.rst on master is not UTF-8 -- appares to be some windows encoding", "issue_description": "Contributor\nasottile commented on 1 Jul 2019\noops, looks like someone wrote this file on windows! I'll fix it to be UTF-8 (my editor was very unhappy trying to edit it!)", "issue_status": "Closed", "issue_reporting_time": "2019-07-01T14:28:10Z", "fixed_by": "#3281", "pull_request_summary": "Make the changelog UTF-8 compatible", "pull_request_description": "Contributor\nasottile commented on 1 Jul 2019 \u2022\nedited\nwith open('CHANGES.rst', 'rb') as f:\n    contents = f.read().replace(b'\\xc1', b'`').replace(b'\\xa9', b\"'\")\nwith open('CHANGES.rst', 'wb') as f:\n    f.write(contents)\nwith open('CHANGES.rst') as f:\n    f.read()  # verify it is now UTF-8\nResolves #3279", "pull_request_status": "Merged", "issue_fixed_time": "2019-07-01T16:38:43Z", "files_changed": [["816", "CHANGES.rst"], ["6", "tests/test_meta.py"]]}, "111": {"issue_url": "https://github.com/pallets/flask/issues/3277", "issue_id": "#3277", "issue_summary": "[tutorial] flaskr's pytest does not pass due to test_db.py#test_get_close_db fail.", "issue_description": "nimzo6689 commented on 1 Jul 2019\ntests/test_db.py#test_get_close_db does not pass.\nActual Behavior\nEnvironment\nPython version: 3.7.3\nFlask version: 1.0.3\nWerkzeug version: 0.15.4\npytest: 5.0.0", "issue_status": "Closed", "issue_reporting_time": "2019-07-01T14:19:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "112": {"issue_url": "https://github.com/pallets/flask/issues/3275", "issue_id": "#3275", "issue_summary": "flask requires `is_package` from import loaders, however this api is optional since PEP 451", "issue_description": "Contributor\nasottile commented on 1 Jul 2019\nFor more information: pytest-dev/pytest#5532\nhttps://www.python.org/dev/peps/pep-0451/#api-changes\nA compliant PEP 451 loader can avoid a lot of the tricky APIs just through implementing find_spect -- in this case is_package is replaced by submodule_search_locations being truthy\nI'll see if I can't take a stab at this, it looks like this is a reopen of #487\nHere's a minimal example:\nimport flask\n\napp = flask.Flask(__name__)\n\ndef test():\n    pass\n$ pytest t.py\n============================= test session starts ==============================\nplatform linux -- Python 3.6.7, pytest-5.0.0, py-1.8.0, pluggy-0.12.0\nrootdir: /tmp/x\ncollected 0 items / 1 errors                                                   \n\n==================================== ERRORS ====================================\n____________________________ ERROR collecting t.py _____________________________\nt.py:3: in <module>\n    app = flask.Flask(__name__)\nvenv/lib/python3.6/site-packages/flask/app.py:381: in __init__\n    instance_path = self.auto_find_instance_path()\nvenv/lib/python3.6/site-packages/flask/app.py:678: in auto_find_instance_path\n    prefix, package_path = find_package(self.import_name)\nvenv/lib/python3.6/site-packages/flask/helpers.py:826: in find_package\n    loader, root_mod_name):\nvenv/lib/python3.6/site-packages/flask/helpers.py:789: in _matching_loader_thinks_module_is_package\n    loader.__class__.__name__)\nE   AttributeError: AssertionRewritingHook.is_package() method is missing but is required by Flask of PEP 302 import hooks.  If you do not use import hooks and you encounter this error please file a bug against Flask.\n!!!!!!!!!!!!!!!!!!! Interrupted: 1 errors during collection !!!!!!!!!!!!!!!!!!!!\n=========================== 1 error in 0.31 seconds ============================\n$ pip freeze --all\natomicwrites==1.3.0\nattrs==19.1.0\nClick==7.0\nFlask==1.0.3\nimportlib-metadata==0.18\nitsdangerous==1.1.0\nJinja2==2.10.1\nMarkupSafe==1.1.1\nmore-itertools==7.1.0\npackaging==19.0\npip==19.1.1\npluggy==0.12.0\npy==1.8.0\npyparsing==2.4.0\npytest==5.0.0\nsetuptools==41.0.1\nsix==1.12.0\nwcwidth==0.1.7\nWerkzeug==0.15.4\nwheel==0.33.4\nzipp==0.5.1", "issue_status": "Closed", "issue_reporting_time": "2019-07-01T13:26:54Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "113": {"issue_url": "https://github.com/pallets/flask/issues/3271", "issue_id": "#3271", "issue_summary": "Blueprints with url_prefix responding in HTTP 308", "issue_description": "khera-shanu commented on 24 Jun 2019\nExpected Behavior\n2xx response for an existing working URL\nActual Behavior\nblueprints with url_prefix started to respond with 308 in the latest flask (used pip)\nEnvironment\nPython version: Python 3.6.7\nFlask version: 1.0.3\nWerkzeug version: 0.15.4", "issue_status": "Closed", "issue_reporting_time": "2019-06-24T12:28:37Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "114": {"issue_url": "https://github.com/pallets/flask/issues/3268", "issue_id": "#3268", "issue_summary": "Flask object Issue: Assertation error on python 2.7.14 in Werkzeug 0.15.4", "issue_description": "Ahmedest61 commented on 21 Jun 2019 \u2022\nedited\nActual Behavior\nWhen trying to create new flask object, I get following error:\n>>> from flask import Flask\n>>> flask_app = Flask(__name__)\npython: ../Python-2.7.14/Python/symtable.c:1319: symtable_visit_params: Assertion `arg->v.Name.ctx == Param || (arg->v.Name.ctx == Store && !toplevel)' failed.\nAborted\nEnvironment\nPython version: 2.7.14\nFlask version: 1.0.3\nWerkzeug version: 0.15.4", "issue_status": "Closed", "issue_reporting_time": "2019-06-21T14:00:44Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "115": {"issue_url": "https://github.com/pallets/flask/issues/3265", "issue_id": "#3265", "issue_summary": "flask and escpos", "issue_description": "jwhit265 commented on 18 Jun 2019\nNot sure if this is the appropriate place to submit this but seems to either been an issue between flask and escpos so I thought I would start here.\nExpected Behavior\nBrowsing to route prints receipt immediately despite how many times visited.\nfrom flask import Flask, flash\nfrom escpos import *\nimport PIL\n\napp = Flask(__name__, template_folder='.')\n\n@app.route('/')\ndef homepage():\n  printerip = \"192.168.3.197\"\n  Epson = printer.Network(printerip)\n  Epson.text('CHARGING')\n  Epson.cut()\n  return 'printed'\n\nif __name__ == '__main__':\n  app.run(host='0.0.0.0', debug=True, port=80)\nActual Behavior\nReceipt prints once but if visiting route again the receipt prints after a delay of 1+ minutes or until the flask application is killed the \"backlog\" prints immediately. Sometimes the route can be visited twice in a row and the receipt is printed immediately. I can consistently get this working if I have 2.2.0 of python-escpos installed. However when I install the latest version I start experiencing these delays. I require the latest version to take advantaged of image printing and text formatting.\nEnvironment\nPython version: 3.6.8\nFlask version: 1.0.2\nWerkzeug version: 3.6.8", "issue_status": "Closed", "issue_reporting_time": "2019-06-18T05:37:41Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "116": {"issue_url": "https://github.com/pallets/flask/issues/3264", "issue_id": "#3264", "issue_summary": "path converter is not matching", "issue_description": "mortoray commented on 17 Jun 2019\nI have this route:\n@app.route('/static/<path:subpath>')\ndef get_static(subpath):\n return flask.send_from_directory( asset_dir, subpath )\nBut it never matches any paths, such as /static/index.js. \"GET /static/index.js HTTP/1.1\" 404 -\nIf I leave off the path converter it does match. \"GET /static/index.js HTTP/1.1\" 200 -\nEnvironment\nPython version: 3.6.7\nFlask version: 1.0.2\nWerkzeug version: 0.15.2", "issue_status": "Closed", "issue_reporting_time": "2019-06-17T05:42:28Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "117": {"issue_url": "https://github.com/pallets/flask/issues/3262", "issue_id": "#3262", "issue_summary": "import urlparse breaks app.cli.command", "issue_description": "landergate commented on 14 Jun 2019 \u2022\nedited\nfrom flask import Flask\nimport urlparse\n\napp = Flask(__name__)\n\n\n@app.cli.command()\ndef hello():\n    print(\"Hello World\")\n\n\nif __name__ == \"__main__\":\n    app.run()\nExpected Behavior\nubuntu@bionic:/reproduce# flask hello\nHello World\nActual Behavior\nubuntu@bionic:/reproduce# flask hello\nUsage: flask [OPTIONS] COMMAND [ARGS]...\n\nError: No such command \"hello\".\nEnvironment\nPython version: 3.6.7\nFlask version: 1.0.3\nWerkzeug version: 0.15.4", "issue_status": "Closed", "issue_reporting_time": "2019-06-13T23:20:40Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "118": {"issue_url": "https://github.com/pallets/flask/issues/3259", "issue_id": "#3259", "issue_summary": "flask.ext.mongoalchemy import MongoAlchemy is not changed to flask_mongoalchemy import MongoAlchemy", "issue_description": "Avhishek05 commented on 12 Jun 2019 \u2022\nedited\nThis issue tracker is a tool to address bugs in Flask itself.\nPlease use the #pocoo IRC channel on freenode or Stack Overflow for general\nquestions about using Flask or issues not related to Flask.\nIf you'd like to report a bug in Flask, fill out the template below. Provide\nany extra information that may be useful / related to your problem.\nIdeally, create an MCVE, which helps us\nunderstand the problem and helps check that it is not caused by something in\nyour code.\nExpected Behavior\nimport\nfrom flask.ext.mongoalchemy import MongoAlchemy\nActual Behavior\nfrom flask_mongoalchemy import MongoAlchemy\nfrom flask_mongoalchemy import MongoAlchemy\nModuleNotFoundError: No module named 'flask_mongoalchemy'\nEnvironment\nPython version:3.7\nFlask version:1.0\nWerkzeug version:", "issue_status": "Closed", "issue_reporting_time": "2019-06-12T08:47:43Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "119": {"issue_url": "https://github.com/pallets/flask/issues/3258", "issue_id": "#3258", "issue_summary": "Question: How to generate coverage report?", "issue_description": "brycefisher commented on 11 Jun 2019 \u2022\nedited\nThis issue tracker is a tool to address bugs in Flask itself.\nPlease use the #pocoo IRC channel on freenode or Stack Overflow for general\nquestions about using Flask or issues not related to Flask.\nIf you'd like to report a bug in Flask, fill out the template below. Provide\nany extra information that may be useful / related to your problem.\nIdeally, create an MCVE, which helps us\nunderstand the problem and helps check that it is not caused by something in\nyour code.\nExpected Behavior\nA barebones Flask app run by coverage.py and hit by curl should produce a .coverage data file to measure code coverage.\nTell us what should happen.\n# hello.py\nfrom flask import Flask\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello World!\"\nexport FLASK_APP=hello.py\ncoverage run \\\n              --parallel-mode \\\n              -m flask run &> /tmp/flask.log &\ncurl http://127.0.0.1:5000/\njobs -p | xargs # kill the coverage.py / flask process so report will be written\ncoverage xml\nSee recent run in CircleCI\nhttps://circleci.com/gh/brycefisher/coveragepy-flask\nActual Behavior\nNo .coverage data was produced.\nEnvironment\nPython version: 3.7.0\nFlask version: 1.0.2\nWerkzeug version: ??? -- will find!\nCorresponding issue in coverage.py project:\nnedbat/coveragepy#810", "issue_status": "Closed", "issue_reporting_time": "2019-06-11T05:11:23Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "120": {"issue_url": "https://github.com/pallets/flask/issues/3256", "issue_id": "#3256", "issue_summary": "flask run is not compatible with werkzeug middlewares", "issue_description": "killthekitten commented on 9 Jun 2019\nExpected Behavior\nWhen using DispatcherMiddleware to combine multiple flask apps, I expect to be able to run the app with the following command:\nFLASK_APP=main:app flask run\nfrom flask import Flask\nfrom werkzeug.middleware.dispatcher import DispatcherMiddleware\n\n\napi = Flask(\"api\")\nadmin = Flask(\"admin\")\napp = DispatcherMiddleware(api, {\"/admin\": admin})\nActual Behavior\nThe app object fails the following typecheck:\nflask/src/flask/cli.py\nLine 198 in d4b688b\n if isinstance(app, Flask): \n127.0.0.1 - - [09/Jun/2019 15:16:30] \"GET /admin/ HTTP/1.1\" 500 -\nTraceback (most recent call last):\n  File \"/Users/nshebanov/.pyenv/versions/3.7.2/lib/python3.7/site-packages/flask/_compat.py\", line 36, in reraise\n    raise value\n  File \"/Users/nshebanov/.pyenv/versions/3.7.2/lib/python3.7/site-packages/flask/cli.py\", line 199, in find_app_by_string\n    module=module.__name__, app_name=app_name\nflask.cli.NoAppException: A valid Flask application was not obtained from \"main:app\".\nEnvironment\nPython version: 3.7.2\nFlask version: 1.0.3\nWerkzeug version: 0.15.4\nSuggestion\nDrop the check when FLASK_APP is specified and it is not a factory, or change the check to allow for middlewares (it's hard to imagine such a check though).\nChecking for type Flask makes sense within find_best_app and at the moment of call_factory result evaluation within find_app_by_string.", "issue_status": "Closed", "issue_reporting_time": "2019-06-09T12:35:22Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "121": {"issue_url": "https://github.com/pallets/flask/issues/3254", "issue_id": "#3254", "issue_summary": "Refactoring explain_template_loading_attempts method in debughelpers.py", "issue_description": "Contributor\naligoren commented on 8 Jun 2019 \u2022\nedited\nBefore starting, I'm so sorry because this issue can be totally ridiculous.\nHi. I've been doing a review of the Flask code base for a while.\nI found this method\nflask/src/flask/debughelpers.py\nLines 124 to 169 in d4b688b\n def explain_template_loading_attempts(app, template, attempts): \n     \"\"\"This should help developers understand what failed\"\"\" \n     info = ['Locating template \"%s\":' % template] \n     total_found = 0 \n     blueprint = None \n     reqctx = _request_ctx_stack.top \n     if reqctx is not None and reqctx.request.blueprint is not None: \n         blueprint = reqctx.request.blueprint \n        for idx, (loader, srcobj, triple) in enumerate(attempts): \n         if isinstance(srcobj, Flask): \n             src_info = 'application \"%s\"' % srcobj.import_name \n         elif isinstance(srcobj, Blueprint): \n             src_info = 'blueprint \"%s\" (%s)' % (srcobj.name, srcobj.import_name) \n         else: \n             src_info = repr(srcobj) \n            info.append(\"% 5d: trying loader of %s\" % (idx + 1, src_info)) \n            for line in _dump_loader_info(loader): \n             info.append(\"       %s\" % line) \n            if triple is None: \n             detail = \"no match\" \n         else: \n             detail = \"found (%r)\" % (triple[1] or \"<string>\") \n             total_found += 1 \n         info.append(\"       -> %s\" % detail) \n        seems_fishy = False \n     if total_found == 0: \n         info.append(\"Error: the template could not be found.\") \n         seems_fishy = True \n     elif total_found > 1: \n         info.append(\"Warning: multiple loaders returned a match for the template.\") \n         seems_fishy = True \n        if blueprint is not None and seems_fishy: \n         info.append( \n             \"  The template was looked up from an endpoint that \" \n             'belongs to the blueprint \"%s\".' % blueprint \n         ) \n         info.append(\"  Maybe you did not place a template in the right folder?\") \n         info.append(\"  See http://flask.pocoo.org/docs/blueprints/#templates\") \n        app.logger.info(\"\\n\".join(info)) \nI'm also using SonarQube to review codes. SonarQube warned me about Cognitive Complexity. There is documentation here;\nhttps://www.sonarsource.com/docs/CognitiveComplexity.pdf\nFor example,\nflask/src/flask/debughelpers.py\nLine 130 in d4b688b\n if reqctx is not None and reqctx.request.blueprint is not None: \nthis part can be changed like that.\nif reqctx and reqctx.request.blueprint is not None:\nThe other thing is;\nflask/src/flask/debughelpers.py\nLines 146 to 150 in d4b688b\n if triple is None: \n     detail = \"no match\" \n else: \n     detail = \"found (%r)\" % (triple[1] or \"<string>\") \n     total_found += 1 \nthis part can be changed like that.\ndetail = \"no match\"\nif triple is not None:\n   detail = \"found (%r)\" % (triple[1] or \"<string>\")\n   total_found += 1\nI think we can say; if the triple variable is None, don't run this total_found += 1 statement.\nThe last one is;\nflask/src/flask/debughelpers.py\nLines 154 to 159 in d4b688b\n if total_found == 0: \n     info.append(\"Error: the template could not be found.\") \n     seems_fishy = True \n elif total_found > 1: \n     info.append(\"Warning: multiple loaders returned a match for the template.\") \n     seems_fishy = True \nI think this part can be changed too. Because total_found variable initialized with 0 value.\nSo, there will be two situations always. for 0 or for > 1.\nWhen total_found is 0 or 1, the seems_fishy will be True. So, we may don't need to reassign this variable for each control flow. Instead of that, we can change this code like below;\ninfo_msg = \"Error: the template could not be found.\"\nseems_fishy = True\nif total_found > 1:\n   info_msg = \"Warning: multiple loaders returned a match for the template.\"", "issue_status": "Closed", "issue_reporting_time": "2019-06-08T09:51:52Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "122": {"issue_url": "https://github.com/pallets/flask/issues/3252", "issue_id": "#3252", "issue_summary": "Should _get_exc_class_and_code method have param entry for the docstring?", "issue_description": "Contributor\naligoren commented on 7 Jun 2019\nCurrently the _get_exc_class_and_code method does not have :param: entry for exc_class_or_code.\nIf so, I can add :param: entry for methods which does not contain :param: entry.\nflask/src/flask/app.py\nLines 1334 to 1346 in d4b688b\n def _get_exc_class_and_code(exc_class_or_code): \n     \"\"\"Ensure that we register only exceptions as handler keys\"\"\" \n     if isinstance(exc_class_or_code, integer_types): \n         exc_class = default_exceptions[exc_class_or_code] \n     else: \n         exc_class = exc_class_or_code \n        assert issubclass(exc_class, Exception) \n        if issubclass(exc_class, HTTPException): \n         return exc_class, exc_class.code \n     else: \n         return exc_class, None ", "issue_status": "Closed", "issue_reporting_time": "2019-06-07T08:22:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "123": {"issue_url": "https://github.com/pallets/flask/issues/3251", "issue_id": "#3251", "issue_summary": "ImportError goes away after restart", "issue_description": "fusionlove commented on 5 Jun 2019\nThis issue tracker is a tool to address bugs in Flask itself.\nPlease use the #pocoo IRC channel on freenode or Stack Overflow for general\nquestions about using Flask or issues not related to Flask.\nIf you'd like to report a bug in Flask, fill out the template below. Provide\nany extra information that may be useful / related to your problem.\nIdeally, create an MCVE, which helps us\nunderstand the problem and helps check that it is not caused by something in\nyour code.\nI'm working on a large Flask project. Occasionally, Flask will give me an ImportError, for example the following:\nNoAppException: While importing \"application\", an ImportError was raised:\n\nTraceback (most recent call last):\n  File \"/Users/fintan/anaconda/lib/python2.7/site-packages/flask/cli.py\", line 235, in locate_app\n    __import__(module_name)\n  File \"/Users/fintan/Dropbox/LearnerShape/server3/application.py\", line 1, in <module>\n    from learnershape.app import *\n  File \"/Users/fintan/Dropbox/LearnerShape/server3/learnershape/app.py\", line 4, in <module>\n    from learnershape import core\n  File \"/Users/fintan/Dropbox/LearnerShape/server3/learnershape/core/__init__.py\", line 2, in <module>\n    from . import views\nImportError: cannot import name views\nWhen I restart the server, the error goes away and Flask runs perfectly.\nDo you think this could be due to a) a bad import structure, b) Flask not reloading modules correctly, c) .pyc files?\nExpected Behavior\nFlask should only show an ImportError when there is a problem with module imports.\nThis problem occurs at least twice a day, but I haven't been able to get it to occur yet in a minimal version. If anyone has time to look into this, I can add you as a collaborator to our repository.\nActual Behavior\nFlask shows an ImportError which persists until Flask is restarted, then goes away.\nNoAppException: While importing \"application\", an ImportError was raised:\n\nTraceback (most recent call last):\n  File \"/Users/fintan/anaconda/lib/python2.7/site-packages/flask/cli.py\", line 235, in locate_app\n    __import__(module_name)\n  File \"/Users/fintan/Dropbox/LearnerShape/server3/application.py\", line 1, in <module>\n    from learnershape.app import *\n  File \"/Users/fintan/Dropbox/LearnerShape/server3/learnershape/app.py\", line 4, in <module>\n    from learnershape import core\n  File \"/Users/fintan/Dropbox/LearnerShape/server3/learnershape/core/__init__.py\", line 2, in <module>\n    from . import views\nImportError: cannot import name views\nEnvironment\nPython version: 2.7.11\nFlask version: 1.0.2\nWerkzeug version: 0.15.2", "issue_status": "Closed", "issue_reporting_time": "2019-06-05T13:11:11Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "124": {"issue_url": "https://github.com/pallets/flask/issues/3250", "issue_id": "#3250", "issue_summary": "Can't access localhost using flask", "issue_description": "rathanu commented on 4 Jun 2019\nPls help me. I can't access localhost Using flask and a message is prompted \"get/http 1.1.. I don't understand\nPls check the image and help me out", "issue_status": "Closed", "issue_reporting_time": "2019-06-04T16:45:16Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "125": {"issue_url": "https://github.com/pallets/flask/issues/3249", "issue_id": "#3249", "issue_summary": "BadRequestKeyError no longer contains the missing key from self.form as of 1.0.3", "issue_description": "Roguelazer commented on 3 Jun 2019\nExpected Behavior\nWhen self.form is indexed with a key that isn't present, BadRequestKeyError is raised. Under 1.0.2 and below, the .args property of this exception contained the actual missing key -- great for lightweight error presentation.\nMinimal demonstration:\nfrom flask import Flask, jsonify, request\nfrom werkzeug.exceptions import BadRequestKeyError\n\napp = Flask('test')\n\n@app.errorhandler(BadRequestKeyError)\ndef bad_key(e):\n    return jsonify({'missing key(s)': e.args})\n\n\n@app.route('/')\ndef root():\n    return request.form['foo']\n\napp.run()\nUnder 1.0.2 and below we see the following behavior:\n % curl localhost:5000\n{\"missing key(s)\":[\"foo\"]}\nUnder 1.0.3:\n% curl localhost:5000\n{\"missing key(s)\":[]}\nThis occurs independent of $FLASK_DEBUG\nActual Behavior\nThere appears to be no way to get at the missing key from an error handler.\nEnvironment\nPython version: 3.6.6\nFlask version: 1.0.3\nWerkzeug version: 0.15.4", "issue_status": "Closed", "issue_reporting_time": "2019-06-03T15:41:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "126": {"issue_url": "https://github.com/pallets/flask/issues/3228", "issue_id": "#3228", "issue_summary": "Meta: run tox -e stylecheck on Azure Pipeline", "issue_description": "Contributor\nlordmauve commented on 31 May 2019\nIn the contributing guide we request people to use Black to autoformat their code via pre-commit.\nHowever, there is no check for this on Azure Pipelines, meaning it is not checked automatically by GitHub for each pull request. This means style issues can be merged, requiring unrelated style fixes in later commits.\nIn tox.ini there is a stylecheck target. We should configure this to run on Azure Pipelines.", "issue_status": "Closed", "issue_reporting_time": "2019-05-31T10:41:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "127": {"issue_url": "https://github.com/pallets/flask/issues/3227", "issue_id": "#3227", "issue_summary": "suspicious unexplained `except: raise`", "issue_description": "Member\njab commented on 30 May 2019 \u2022\nedited\nThe following two lines:\nflask/flask/_compat.py\nLine 100 in 2c68f86\n except: \n\ndo\nexcept:\n    raise\nwhich looks like a no-op. Is this actually doing something? If not remove, if so let's add a comment explaining.\n1", "issue_status": "Closed", "issue_reporting_time": "2019-05-30T14:44:42Z", "fixed_by": "#3239", "pull_request_summary": "Comment on bare except usage in _compat.py", "pull_request_description": "Contributor\ngokcegrbl commented on 31 May 2019\nComment on bare except usage in _compat.py\n(Fixes #3227)", "pull_request_status": "Merged", "issue_fixed_time": "2019-05-31T16:56:44Z", "files_changed": [["2", "flask/_compat.py"]]}, "128": {"issue_url": "https://github.com/pallets/flask/issues/3226", "issue_id": "#3226", "issue_summary": "unused import: werkzeug.datastructures:Range", "issue_description": "Member\njab commented on 30 May 2019\nThe following line contains an unused import:\nflask/flask/helpers.py\nLine 26 in 2c68f86\n from werkzeug.datastructures import Headers, Range \nSpecifically, Range is unused.\n1", "issue_status": "Closed", "issue_reporting_time": "2019-05-30T14:37:15Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "129": {"issue_url": "https://github.com/pallets/flask/issues/3225", "issue_id": "#3225", "issue_summary": "suspicious/unexplained `del <local_variable>` in last line of function", "issue_description": "Member\njab commented on 30 May 2019\nThe following line contains a del <local_variable> as the last line of the function (inside a finally block):\nflask/flask/cli.py\nLine 135 in 2c68f86\n del tb \nThis looks suspicious since there is usually no need to del a variable that is local to a function in its last line. If this is unintended it should be removed, otherwise there should probably be a comment in the code explaining why this is necessary?\n1", "issue_status": "Closed", "issue_reporting_time": "2019-05-30T14:35:11Z", "fixed_by": "#3234", "pull_request_summary": "#3225: document \"del tb\"", "pull_request_description": "Contributor\ntomowind commented on 31 May 2019 \u2022\nedited by davidism\ncloses #3225", "pull_request_status": "Merged", "issue_fixed_time": "2019-05-31T14:58:45Z", "files_changed": [["2", "flask/cli.py"]]}, "130": {"issue_url": "https://github.com/pallets/flask/issues/3224", "issue_id": "#3224", "issue_summary": "Blueprint CLIs should not register empty groups", "issue_description": "Member\ndavidism commented on 30 May 2019\nAfter #1369, each blueprint has a cli group that will be registered with the flask command. This should not be registered if no commands were registered with the blueprint, otherwise empty groups show up in the CLI help output.\n1", "issue_status": "Closed", "issue_reporting_time": "2019-05-30T14:07:44Z", "fixed_by": "#3236", "pull_request_summary": "Do not register empty CLI groups from Blueprint", "pull_request_description": "Contributor\nlordmauve commented on 31 May 2019\n(Fixes #3224)\nCheck if the CLI group is empty during Blueprint registration, and exit early if it is.", "pull_request_status": "Merged", "issue_fixed_time": "2019-05-31T17:05:01Z", "files_changed": [["3", "flask/blueprints.py"], ["9", "tests/test_cli.py"]]}, "131": {"issue_url": "https://github.com/pallets/flask/issues/3223", "issue_id": "#3223", "issue_summary": "AttributeError: 'NoneType' object has no attribute 'append' in Flask helpers.py", "issue_description": "jeffbuswell commented on 29 May 2019 \u2022\nedited\nOccasionally, upon logging out of the flask server, this error occurs. Possibly a race condition between flashing a message and not being logged in?\nExpected Behavior\nExpect no error, or to exit gracefully.\nActual Behavior\nGet the error: AttributeError: 'NoneType' object has no attribute 'append'\nFile /home/venv/lib/python3.7/site-packages/flask/app.py line 1832 in full_dispatch_request\nrv = self.dispatch_request()\nFile /home/venv/lib/python3.7/site-packages/flask/app.py line 1818 in dispatch_request\nreturn self.view_functions[rule.endpoint](**req.view_args)\nFile /home/venv/lib/python3.7/site-packages/flask_login/utils.py line 260 in decorated_view\nreturn current_app.login_manager.unauthorized()\nFile /home/venv/lib/python3.7/site-packages/flask_login/login_manager.py line 167 in unauthorized\nflash(self.login_message, category=self.login_message_category)\nFile /home/venv/lib/python3.7/site-packages/flask/helpers.py line 409 in flash\nflashes.append((category, message))\nAttributeError: 'NoneType' object has no attribute 'append'\nEnvironment\nPython version: 3.7\nFlask version: 1.0.3", "issue_status": "Closed", "issue_reporting_time": "2019-05-29T17:20:54Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "132": {"issue_url": "https://github.com/pallets/flask/issues/3222", "issue_id": "#3222", "issue_summary": "Multiprocess cause AttributeError in windows10", "issue_description": "kanglue commented on 28 May 2019\nThis issue tracker is a tool to address bugs in Flask itself.\nPlease use the #pocoo IRC channel on freenode or Stack Overflow for general\nquestions about using Flask or issues not related to Flask.\nIf you'd like to report a bug in Flask, fill out the template below. Provide\nany extra information that may be useful / related to your problem.\nIdeally, create an MCVE, which helps us\nunderstand the problem and helps check that it is not caused by something in\nyour code.\nExpected Behavior\nStart a Flask server, and received a http post msg, and handle well.\nthreading.Thread(target=MpPool._handle_results, args=(self,))\n\ndef _handle_results(self):\n     self._passback.handle(tid, result, ex)\n\nhere self._passback is start_serving function, and exception where it is.\nActual Behavior\nStart a Flask server, and received a http post msg, and encounter exception.\nTraceback (most recent call last):\n  File \"D:\\Dev\\Anaconda3\\envs\\jlpy\\lib\\site-packages\\flask\\app.py\", line 1813, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"D:\\Dev\\Anaconda3\\envs\\jlpy\\lib\\site-packages\\flask\\app.py\", line 1799, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"D:\\Dev\\Anaconda3\\envs\\jlpy\\lib\\site-packages\\flask_restful\\__init__.py\", line 458, in wrapper\n    resp = resource(*args, **kwargs)\n  File \"D:\\Dev\\Anaconda3\\envs\\jlpy\\lib\\site-packages\\flask\\views.py\", line 88, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"D:\\Dev\\Anaconda3\\envs\\jlpy\\lib\\site-packages\\flask_restful\\__init__.py\", line 573, in dispatch_request\n    resp = meth(*args, **kwargs)\n  File \"D:\\Dev\\source\\Python\\Base\\src\\main\\inference\\Server.py\", line 75, in post\n    return server.submit(tid)\n  File \"D:\\Dev\\source\\Python\\Base\\src\\main\\inference\\Server.py\", line 35, in submit\n    if self._inference.submit(tid, _task_json):\n  File \"D:\\Dev\\source\\Python\\Base\\src\\main\\inference\\Inference.py\", line 34, in submit\n    self._executor_pool.submit(tid, task)\n  File \"D:\\Dev\\source\\Python\\Base\\src\\main\\hwv_concurrent\\process.py\", line 194, in submit\n    worker.start()\n  File \"D:\\Dev\\source\\Python\\Base\\src\\main\\hwv_concurrent\\process.py\", line 40, in start\n    self._process.start()\n  File \"D:\\Dev\\Anaconda3\\envs\\jlpy\\lib\\multiprocessing\\process.py\", line 105, in start\n    self._popen = self._Popen(self)\n  File \"D:\\Dev\\Anaconda3\\envs\\jlpy\\lib\\multiprocessing\\context.py\", line 223, in _Popen\n    return _default_context.get_context().Process._Popen(process_obj)\n  File \"D:\\Dev\\Anaconda3\\envs\\jlpy\\lib\\multiprocessing\\context.py\", line 322, in _Popen\n    return Popen(process_obj)\n  File \"D:\\Dev\\Anaconda3\\envs\\jlpy\\lib\\multiprocessing\\popen_spawn_win32.py\", line 65, in __init__\n    reduction.dump(process_obj, to_child)\n  File \"D:\\Dev\\Anaconda3\\envs\\jlpy\\lib\\multiprocessing\\reduction.py\", line 60, in dump\n    ForkingPickler(file, protocol).dump(obj)\nAttributeError: Can't pickle local object 'start_serving.<locals>.AIServer'\nEnvironment\nWindows10\nPython version:3.6\nFlask version:1.0.2\nWerkzeug version:0.15.4", "issue_status": "Closed", "issue_reporting_time": "2019-05-28T13:40:40Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "133": {"issue_url": "https://github.com/pallets/flask/issues/3220", "issue_id": "#3220", "issue_summary": "How to change the body of redirection responses since Flask 1.0.3?", "issue_description": "Contributor\ns3rvac commented on 27 May 2019\nSince Flask 1.0.3 (more specifically since b92b2e6), routing exceptions are no longer handled via application error handlers. This breaks our project, which has been using this feature to change the body and headers of redirections. In short, we want to be able to return HTML responses for web endpoints and JSON responses for API endpoints, including redirections. What is the idiomatic way of doing this in Flask 1.0.3?\nMinimal working example\n# test.py\nimport flask\nimport werkzeug\n\nclass App(flask.Flask):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        @self.errorhandler(Exception)\n        def handle_exception(e):\n            return self._handle_error(e)\n\n    def _handle_error(self, e):\n        if isinstance(e, werkzeug.routing.RequestRedirect):\n            return 'redirection\\n', 308\n        return 'error\\n', 500\n\napp = App(__name__)\n\n@app.route('/test/')\ndef test():\n    return 'test\\n'\nRun it via FLASK_APP=test:app flask run.\nExpected behavior\n$ curl http://127.0.0.1:5000/test\nredirection\nThis is what happens in Flask 1.0.2 and earlier.\nActual behavior\n$ curl http://127.0.0.1:5000/test\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<title>Redirecting...</title>\n<h1>Redirecting...</h1>\n* Closing connection 0\n<p>You should be redirected automatically to target URL: <a href=\"http://127.0.0.1:5000/test/\">http://127.0.0.1:5000/test/</a>.  If not click the link.\nThis is what happens in Flask 1.0.3.\nQuestion\nWhat is the idiomatic way of changing the body and headers of redirections in Flask 1.0.3? We could do the following to get the original behavior, but it feels like a hack:\nclass App(flask.Flask):\n    # ...\n\n    def handle_http_exception(self, e):\n        if isinstance(e, werkzeug.routing.RoutingException):\n            return self._handle_error(e)\n\n        return super().handle_http_exception(e)\nIs there a better way?\nEnvironment\nPython version: 3.7.3 (Linux)\nFlask version: 1.0.2 and 1.0.3 (see above)\nWerkzeug version: 0.15.4\n2", "issue_status": "Closed", "issue_reporting_time": "2019-05-27T11:29:15Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "134": {"issue_url": "https://github.com/pallets/flask/issues/3219", "issue_id": "#3219", "issue_summary": "url_for produces relative links with nontrivial APPLICATION_ROOT", "issue_description": "rosekunkel commented on 27 May 2019 \u2022\nedited\nExpected Behavior\nurl_for should consistently produce urls which are absolute with regard to the server root, i.e., they should start with a /.\napp = Flask(__name__, static_url_path='')\nurl_for('static', filename='some_static_file')\nActual Behavior\nWhen running under gnunicorn with APPLICATION_ROOT='/myapp/', the url_for call produces the URL myapp/some_static_file, while when running under werkzeug with APPLICATION_ROOT='/', the url_for call produces the URL /some_static_file.\nThis is a problem, because, combined with this werkzeug issue, there's no straightforward way to use url_for in templates for both development and production: {{ url_for('static', filename='some_static_file') }} produces myapp/some_static_file in production, which fails, while /{{ url_for('static', filename='some_static_file') }} produces //some_static_file in development, which fails.\nEnvironment\nPython version: 3.6.5\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2019-05-27T08:03:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "135": {"issue_url": "https://github.com/pallets/flask/issues/3218", "issue_id": "#3218", "issue_summary": "Use @property as a decorator", "issue_description": "Member\ndavidism commented on 25 May 2019\nA bunch of properties in the codebase are defined using property without the decorator syntax, which, while valid, isn't very intuitive anymore.\ndef _get_some_value(self):\n    ...\n\ndef _set_some_value(self, value):\n    ...\n\nsome_value = property(_get_some_value, _set_some_value, doc=\"...\")\ndel _get_some_value, _set_some_value\n@property\ndef some_value(self):\n    \"\"\"...\"\"\"\n    ...\n\n@some_value.setter\ndef some_value(self, value):\n    ...\n2\n1", "issue_status": "Closed", "issue_reporting_time": "2019-05-25T14:34:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "136": {"issue_url": "https://github.com/pallets/flask/issues/3216", "issue_id": "#3216", "issue_summary": "Document Blueprint parameters", "issue_description": "Member\ndavidism commented on 25 May 2019\nBlueprint does not have reStructuredText markup for the init parameters. Add :param: entries for each parameter.", "issue_status": "Closed", "issue_reporting_time": "2019-05-24T21:09:43Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "137": {"issue_url": "https://github.com/pallets/flask/issues/3214", "issue_id": "#3214", "issue_summary": "Better error message when view return type is not supported", "issue_description": "Member\ndavidism commented on 24 May 2019\nOne of the most common errors/questions on Stack Overflow is some variant of \"what does 'dict object is not callable' mean, how do I return JSON?\" Now that #3111 is merged, returning dict from a view produces a JSON response. However, there are still plenty of other types that will produce that error, such as returning a bool, or a User object, or a list of rows from a database query.\nFlask.make_response should check whether an otherwise unhandled value is a BaseResponse subclass or a callable before treating it as such. Then it can raise a more helpful error.\n1\n1", "issue_status": "Closed", "issue_reporting_time": "2019-05-24T17:45:54Z", "fixed_by": "#3235", "pull_request_summary": "Better error message when view return type is not supported", "pull_request_description": "Contributor\njohnzeringue commented on 31 May 2019\nBefore, returning a bool from a route caused the error\n[2019-05-31 10:08:42,216] ERROR in app: Exception on / [GET]\nTraceback (most recent call last):\n  File \"/Users/johnzeringue/Documents/ts-open/flask/flask/app.py\", line 2070, in make_response\n    rv = self.response_class.force_type(rv, request.environ)\n  File \"/Users/johnzeringue/Documents/ts-open/flask/env/lib/python3.7/site-packages/werkzeug/wrappers/base_response.py\", line 269, in force_type\n    response = BaseResponse(*_run_wsgi_app(response, environ))\n  File \"/Users/johnzeringue/Documents/ts-open/flask/env/lib/python3.7/site-packages/werkzeug/wrappers/base_response.py\", line 26, in _run_wsgi_app\n    return _run_wsgi_app(*args)\n  File \"/Users/johnzeringue/Documents/ts-open/flask/env/lib/python3.7/site-packages/werkzeug/test.py\", line 1119, in run_wsgi_app\n    app_rv = app(environ, start_response)\nTypeError: 'bool' object is not callable\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/Users/johnzeringue/Documents/ts-open/flask/flask/app.py\", line 2393, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/Users/johnzeringue/Documents/ts-open/flask/flask/app.py\", line 1906, in full_dispatch_request\n    return self.finalize_request(rv)\n  File \"/Users/johnzeringue/Documents/ts-open/flask/flask/app.py\", line 1921, in finalize_request\n    response = self.make_response(rv)\n  File \"/Users/johnzeringue/Documents/ts-open/flask/flask/app.py\", line 2078, in make_response\n    reraise(TypeError, new_error, sys.exc_info()[2])\n  File \"/Users/johnzeringue/Documents/ts-open/flask/flask/_compat.py\", line 39, in reraise\n    raise value.with_traceback(tb)\n  File \"/Users/johnzeringue/Documents/ts-open/flask/flask/app.py\", line 2070, in make_response\n    rv = self.response_class.force_type(rv, request.environ)\n  File \"/Users/johnzeringue/Documents/ts-open/flask/env/lib/python3.7/site-packages/werkzeug/wrappers/base_response.py\", line 269, in force_type\n    response = BaseResponse(*_run_wsgi_app(response, environ))\n  File \"/Users/johnzeringue/Documents/ts-open/flask/env/lib/python3.7/site-packages/werkzeug/wrappers/base_response.py\", line 26, in _run_wsgi_app\n    return _run_wsgi_app(*args)\n  File \"/Users/johnzeringue/Documents/ts-open/flask/env/lib/python3.7/site-packages/werkzeug/test.py\", line 1119, in run_wsgi_app\n    app_rv = app(environ, start_response)\nTypeError: 'bool' object is not callable\nThe view function did not return a valid response. The return type must be a string, tuple, Response instance, or WSGI callable, but it was a bool.\nNow, it returns the more readable\n[2019-05-31 10:36:19,500] ERROR in app: Exception on / [GET]\nTraceback (most recent call last):\n  File \"/Users/johnzeringue/Documents/ts-open/flask/flask/app.py\", line 2400, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/Users/johnzeringue/Documents/ts-open/flask/flask/app.py\", line 1907, in full_dispatch_request\n    return self.finalize_request(rv)\n  File \"/Users/johnzeringue/Documents/ts-open/flask/flask/app.py\", line 1922, in finalize_request\n    response = self.make_response(rv)\n  File \"/Users/johnzeringue/Documents/ts-open/flask/flask/app.py\", line 2085, in make_response\n    \" {rv.__class__.__name__}.\".format(rv=rv))\nTypeError: The view function did not return a valid response. The return type must be a string, dict, tuple, Response instance, or WSGI callable, but it was a bool.\nFixes #3214\n1", "pull_request_status": "Merged", "issue_fixed_time": "2019-05-31T16:50:59Z", "files_changed": [["2", "CHANGES.rst"], ["12", "flask/app.py"], ["10", "tests/test_basic.py"]]}, "138": {"issue_url": "https://github.com/pallets/flask/issues/3211", "issue_id": "#3211", "issue_summary": "Don't require ssl module", "issue_description": "Member\ndavidism commented on 23 May 2019 \u2022\nedited\nPython can be compiled without certain modules, including ssl. It's somewhat common for that to happen when users compile Python from source and don't have the libssl headers set up. flask.cli imports ssl unconditionally, but it's only for optional SSL cert support in the dev server, so this can be guarded with except ImportErrror. Werkzeug already has such a workaround, although it's a little more complicated than what needs to be done in Flask.\nIf no ssl module is imported, using the cert-related options in the CLI should raise a usage error.\n1", "issue_status": "Closed", "issue_reporting_time": "2019-05-22T20:54:12Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "139": {"issue_url": "https://github.com/pallets/flask/issues/3210", "issue_id": "#3210", "issue_summary": "a problem with route", "issue_description": "chibuchifan commented on 22 May 2019\nIn the code below\uff1a\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('/users/kaka')\ndef update_user():\n    return jsonify(a=1)\n\n@app.route('/users/kaka/')\ndef update_userss():\n    return jsonify(a=11)\n\nif __name__ == '__main__':\n    app.run(debug=True, port=3000)\n\u7136\u540e\u8c03\u7528:\nqq@zz:~$ curl http://127.0.0.1:3000/users/kaka/\n{\n  \"a\": 11\n}\nqq@zz:~$ curl http://127.0.0.1:3000/users/kaka\n{\n  \"a\": 1\n}\n# \u8fd9\u662f\u56e0\u4e3awerkzug\u4e2d\u6240\u6709\u7684\u8def\u7531\u90fd\u5b58\u5728\u4e00\u4e2a\u5217\u8868\u4e2d, \u6240\u4ee5\u6d89\u53ca\u5230\u5339\u914d\u7684\u5148\u540e\u987a\u5e8f\n\u7136\u540e\u5c06\u8def\u5f84/users/kaka\u6700\u540e\u7684\u659c\u6760\u987a\u5e8f\u6362\u8fc7\u6765:\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('/users/kaka/')\ndef update_user():\n    return jsonify(a=1)\n\n@app.route('/users/kaka')\ndef update_userss():\n    return jsonify(a=11)\n\nif __name__ == '__main__':\n    app.run(debug=True, port=3000)\n\u8fd4\u56de\u7ed3\u679c:\nqq@zz:~$ curl http://127.0.0.1:3000/users/kaka/\n{\n  \"a\": 1\n}\nqq@zz:~$ curl http://127.0.0.1:3000/users/kaka\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<title>Redirecting...</title>\n<h1>Redirecting...</h1>\n<p>You should be redirected automatically to target URL: <a href=\"http://127.0.0.1:3000/users/kaka/\">http://127.0.0.1:3000/users/kaka/</a>.  If not click the link.\nthe diff of two is the order of /users/haha/ is ahead or behind", "issue_status": "Closed", "issue_reporting_time": "2019-05-22T01:13:03Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "140": {"issue_url": "https://github.com/pallets/flask/issues/3209", "issue_id": "#3209", "issue_summary": "Flask with dotenv change the current working directory if .env file is found", "issue_description": "erdnaxeli commented on 20 May 2019 \u2022\nedited\nExpected Behavior\nI run my flask application from a given folder A, I expect the current working directory to be A.\nActual Behavior\nInstead, the working directory is changed to the directory where a .env file is found.\nEnvironment\nPython version: 3.6.5\nFlask version: 1.03\nWerkzeug version: 0.15.4\nExample\nHere is a bash session where we can see the bug:\n$ pipenv install flask[dotenv]\n[ some pipenv output ]\n$ cat hello.py \nimport os\nfrom flask import Flask\n\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return os.getcwd() + \"\\n\"\n$ pwd  # my current working directory\n/tmp/dotenv\n$ FLASK_APP=hello.py pipenv run flask run &\n[1] 18872\n$  * Serving Flask app \"hello.py\"\n * Environment: production\n   WARNING: This is a development server. Do not use it in a production deployment.\n   Use a production WSGI server instead.\n * Debug mode: off\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n\n$ curl localhost:5000/  # all is good\n127.0.0.1 - - [20/May/2019 15:40:46] \"GET / HTTP/1.1\" 200 -\n/tmp/dotenv\n$ touch /tmp/.env  # now I introduce a dot env file\n$ fg  # let's restart the server\nFLASK_APP=hello.py pipenv run flask run\n^C\n$ FLASK_APP=hello.py pipenv run flask run &\n[1] 18920\n$  * Serving Flask app \"hello.py\"\n * Environment: production\n   WARNING: This is a development server. Do not use it in a production deployment.\n   Use a production WSGI server instead.\n * Debug mode: off\nUsage: flask run [OPTIONS]\n\nError: Could not import \"hello\".\n\n[1]+  Termine 2               FLASK_APP=hello.py pipenv run flask run\n$ # We can note Flask itself is not able to load my app anymore!\n$ echo -e \"\\napp.run()\" >> hello.py  # let's run the app from the script\n$ pipenv run python hello.py &\n[1] 19031\n$  * Serving Flask app \"hello\" (lazy loading)\n * Environment: production\n   WARNING: This is a development server. Do not use it in a production deployment.\n   Use a production WSGI server instead.\n * Debug mode: off\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n\n$ curl localhost:5000/\n127.0.0.1 - - [20/May/2019 15:42:27] \"GET / HTTP/1.1\" 200 -\n/tmp\n$ # My working directory is not the expected value\nThis came from this exact line. I can't see why this is useful, as the .env is already loaded at this time.", "issue_status": "Closed", "issue_reporting_time": "2019-05-20T13:52:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "141": {"issue_url": "https://github.com/pallets/flask/issues/3207", "issue_id": "#3207", "issue_summary": "Convert make_test_environ_builder into EnvironBuilder subclass", "issue_description": "Member\ndavidism commented on 19 May 2019\nWerkzeug's EnvironBuilder gained a json_dumps attribute, but Flask doesn't have an EnvironBuilder subclass right now to take advantage of that, and there's no way to configure the Client to use a different builder class anyway. Might be good to refactor flask.testing.make_test_environ_builder to be an EnvironBuilder subclass at some point, rather than a factory wrapper.\nOriginally posted by @davidism in #3181 (comment)\n1", "issue_status": "Closed", "issue_reporting_time": "2019-05-19T04:09:39Z", "fixed_by": "#3232", "pull_request_summary": "Convert make_test_environ_builder into class (fixes #3207)", "pull_request_description": "Contributor\nlordmauve commented on 31 May 2019 \u2022\nedited by davidism\nAdded a new class flask.testing.EnvironBuilder inheriting from werkzeug.test.EnvironBuilder.\nLogic from make_test_environ_builder() moved to the constructor of that class, and changed to simply instantiate the class, while issuing a DeprecationWarning.\nI did explore making json_dumps() a regular method rather than a static method, to pick up app, but if anything was expecting to call EnvironBuilder.json_dumps() as a static method then this would break. Requires funky descriptor tricks to work both as a static method and an instance method under Python 2 and so didn't seem worth the code it would take.\ncloses #3207\n1", "pull_request_status": "Merged", "issue_fixed_time": "2019-05-31T17:58:41Z", "files_changed": [["2", "CHANGES.rst"], ["4", "flask/app.py"], ["104", "flask/testing.py"], ["8", "tests/test_reqctx.py"], ["22", "tests/test_testing.py"]]}, "142": {"issue_url": "https://github.com/pallets/flask/issues/3201", "issue_id": "#3201", "issue_summary": "Changelog button on documentation does not work on Stable", "issue_description": "eamanu commented on 16 May 2019 \u2022\nedited\nExpected Behavior\nOn documentation e.g. http://flask.pocoo.org/docs/1.0/config/#ENV when I\npress changelog button will show some information.\nActual Behavior\nWhen I press changelog button doesn't show any news. This is working on unstable\ndocumentation, but will be great if that is working on stable documentation too.\nEnvironment\nFlask version: 1.0\nDocumentation: http://flask.pocoo.org/docs/1.0/config/#ENV", "issue_status": "Closed", "issue_reporting_time": "2019-05-16T14:48:01Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "143": {"issue_url": "https://github.com/pallets/flask/issues/3194", "issue_id": "#3194", "issue_summary": "Flask can't find the app name when the project is added to Atom", "issue_description": "zakahmad commented on 11 May 2019\nExpected Behavior\nHi folks. I'm not sure if this is a Flask issue or an Atom one. The issue is Flask can't find the app name when the project is added to Atom.\nWhat should happen is Flask should start the app after running flask run when the project is added to Atom (under File -> Add Project Folder). Instead, I get this error Error: Could not import \"hello\".\nThis has happened to me in two other projects.\nThe immediate and obvious solution is to not add projects to Atom. I'm reporting this because there might be other implications.\nActual Behavior\nI started off clean, then created an app as shown in my terminal dump\nzak-mbp:git zakariaahmad$ mkdir hello2\nzak-mbp:git zakariaahmad$ cd hello2\nzak-mbp:hello2 zakariaahmad$ pipenv --python 3.7\nCreating a virtualenv for this project\u2026\nPipfile: /Volumes/GoogleDrive/My Drive/git/hello2/Pipfile\nUsing /usr/local/opt/python/libexec/bin/python (3.7.3) to create virtualenv\u2026\n\u2827 Creating virtual environment...Using base prefix '/usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7'\nNew python executable in /Users/zakariaahmad/.local/share/virtualenvs/hello2-xmwDkloG/bin/python3.7\nAlso creating executable in /Users/zakariaahmad/.local/share/virtualenvs/hello2-xmwDkloG/bin/python\nInstalling setuptools, pip, wheel...\ndone.\nRunning virtualenv with interpreter /usr/local/opt/python/libexec/bin/python\n\n\u2714 Successfully created virtual environment!\nVirtualenv location: /Users/zakariaahmad/.local/share/virtualenvs/hello2-xmwDkloG\nCreating a Pipfile for this project\u2026\nzak-mbp:hello2 zakariaahmad$ pipenv install flask\nInstalling flask\u2026\nAdding flask to Pipfile's [packages]\u2026\n\u2714 Installation Succeeded\nPipfile.lock not found, creating\u2026\nLocking [dev-packages] dependencies\u2026\nLocking [packages] dependencies\u2026\n\u2714 Success!\nUpdated Pipfile.lock (662286)!\nInstalling dependencies from Pipfile.lock (662286)\u2026\n  \ud83d\udc0d   \u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589 6/6 \u2014 00:00:01\nTo activate this project's virtualenv, run pipenv shell.\nAlternatively, run a command inside the virtualenv with pipenv run.\nzak-mbp:hello2 zakariaahmad$ vim hello.py\nzak-mbp:hello2 zakariaahmad$ cat hello.py\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\nzak-mbp:hello2 zakariaahmad$ pipenv shell\nLaunching subshell in virtual environment\u2026\nbash-3.2$  . /Users/zakariaahmad/.local/share/virtualenvs/hello2-xmwDkloG/bin/activate\n(hello2) bash-3.2$ FLASK_APP=hello.py flask run\n * Serving Flask app \"hello.py\"\n * Environment: production\n   WARNING: Do not use the development server in a production environment.\n   Use a production WSGI server instead.\n * Debug mode: off\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n127.0.0.1 - - [10/May/2019 15:41:17] \"GET / HTTP/1.1\" 200 -\n^C(hello2) bash-3.2$ ls -la\ntotal 48\ndrwx------  2 zakariaahmad  staff  4096 May 10 15:39 .\ndrwx------  5 zakariaahmad  staff  4096 May 10 15:38 ..\n-rw-------  1 zakariaahmad  staff   150 May 10 15:39 Pipfile\n-rw-------  1 zakariaahmad  staff  4566 May 10 15:39 Pipfile.lock\n-rw-------  1 zakariaahmad  staff   109 May 10 15:39 hello.py\n(hello2) bash-3.2$ FLASK_APP=hello.py flask run\n * Serving Flask app \"hello.py\"\n * Environment: production\n   WARNING: Do not use the development server in a production environment.\n   Use a production WSGI server instead.\n * Debug mode: off\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n127.0.0.1 - - [10/May/2019 15:41:41] \"GET / HTTP/1.1\" 200 -\n^C(hello2) bash-3.2$ mkdir templates\n(hello2) bash-3.2$ vim templates/index.html\n(hello2) bash-3.2$ cat templates/index.html\n<!doctype html>\n<html>\n  <head>\n    <title>This is the title of the webpage!</title>\n  </head>\n  <body>\n    <p>This is an example paragraph.</p>\n  </body>\n</html>\n(hello2) bash-3.2$ vim hello.py\n(hello2) bash-3.2$ cat hello.py\nfrom flask import Flask\nfrom flask import render_template\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return render_template('index.html')\n(hello2) bash-3.2$ FLASK_APP=hello.py flask run\n * Serving Flask app \"hello.py\"\n * Environment: production\n   WARNING: Do not use the development server in a production environment.\n   Use a production WSGI server instead.\n * Debug mode: off\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n127.0.0.1 - - [10/May/2019 15:44:54] \"GET / HTTP/1.1\" 200 -\n^C(hello2) bash-3.2$ ls -la\ntotal 56\ndrwx------  3 zakariaahmad  staff  4096 May 10 15:44 .\ndrwx------  5 zakariaahmad  staff  4096 May 10 15:38 ..\n-rw-------  1 zakariaahmad  staff   150 May 10 15:39 Pipfile\n-rw-------  1 zakariaahmad  staff  4566 May 10 15:39 Pipfile.lock\n-rw-------  1 zakariaahmad  staff   157 May 10 15:44 hello.py\ndrwx------  2 zakariaahmad  staff  4096 May 10 15:43 templates\nNext, I added the hello2 folder project to Atom (from File -> Add Project Folder), and this is the terminal dump after adding it to Atom. As you can see, it's not changing the contents of hello.py nor adding any file(s) to the hello2 project that might interfere with hello.py. Then I receive the error shown at the end.\n(hello2) bash-3.2$ cat hello.py\nfrom flask import Flask\nfrom flask import render_template\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return render_template('index.html')\n(hello2) bash-3.2$ ls -la\ntotal 56\ndrwx------  3 zakariaahmad  staff  4096 May 10 15:44 .\ndrwx------  5 zakariaahmad  staff  4096 May 10 15:38 ..\n-rw-------  1 zakariaahmad  staff   150 May 10 15:39 Pipfile\n-rw-------  1 zakariaahmad  staff  4566 May 10 15:39 Pipfile.lock\n-rw-------  1 zakariaahmad  staff   157 May 10 15:44 hello.py\ndrwx------  2 zakariaahmad  staff  4096 May 10 15:43 templates\n(hello2) bash-3.2$ FLASK_APP=hello.py flask run\n * Serving Flask app \"hello.py\"\n * Environment: production\n   WARNING: Do not use the development server in a production environment.\n   Use a production WSGI server instead.\n * Debug mode: off\nUsage: flask run [OPTIONS]\n\nError: Could not import \"hello\".\nTraceback dump (after enabling debug mode):\nflask.cli.NoAppException\nflask.cli.NoAppException: Could not import \"hello\".\n\nTraceback (most recent call last)\nFile \"/Users/zakariaahmad/.local/share/virtualenvs/hello2-xmwDkloG/lib/python3.7/site-packages/flask/cli.py\", line 235, in locate_app\n__import__(module_name)\nDuring handling of the above exception, another exception occurred:\nFile \"/Users/zakariaahmad/.local/share/virtualenvs/hello2-xmwDkloG/lib/python3.7/site-packages/flask/cli.py\", line 325, in __call__\nself._flush_bg_loading_exception()\nFile \"/Users/zakariaahmad/.local/share/virtualenvs/hello2-xmwDkloG/lib/python3.7/site-packages/flask/cli.py\", line 313, in _flush_bg_loading_exception\nreraise(*exc_info)\nFile \"/Users/zakariaahmad/.local/share/virtualenvs/hello2-xmwDkloG/lib/python3.7/site-packages/flask/_compat.py\", line 35, in reraise\nraise value\nFile \"/Users/zakariaahmad/.local/share/virtualenvs/hello2-xmwDkloG/lib/python3.7/site-packages/flask/cli.py\", line 302, in _load_app\nself._load_unlocked()\nFile \"/Users/zakariaahmad/.local/share/virtualenvs/hello2-xmwDkloG/lib/python3.7/site-packages/flask/cli.py\", line 317, in _load_unlocked\nself._app = rv = self.loader()\nFile \"/Users/zakariaahmad/.local/share/virtualenvs/hello2-xmwDkloG/lib/python3.7/site-packages/flask/cli.py\", line 372, in load_app\napp = locate_app(self, import_name, name)\nFile \"/Users/zakariaahmad/.local/share/virtualenvs/hello2-xmwDkloG/lib/python3.7/site-packages/flask/cli.py\", line 246, in locate_app\n'Could not import \"{name}\".'.format(name=module_name)\nflask.cli.NoAppException: Could not import \"hello\".\nEnvironment\nPython version: 3.7.3\nFlask version: 1.0.2\nWerkzeug version: 0.15.2", "issue_status": "Closed", "issue_reporting_time": "2019-05-10T23:29:27Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "144": {"issue_url": "https://github.com/pallets/flask/issues/3193", "issue_id": "#3193", "issue_summary": "Flask Session variable not available in threads", "issue_description": "HourGlss commented on 11 May 2019\nFor example of passing via a Queue that does not work. https://github.com/HourGlss/FlaskSSE/blob/master/sse/sse.py\nExpected Behavior\nSession is a global variable\nActual Behavior\nWhen passed via a queue the keys and associated values are dropped. When attempting to access globally, no keys are available even if they had been added by endpoints\nEnvironment\nPython version: 3.7\nFlask version: Default install\nWerkzeug version: Default install", "issue_status": "Closed", "issue_reporting_time": "2019-05-10T20:09:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "145": {"issue_url": "https://github.com/pallets/flask/issues/3189", "issue_id": "#3189", "issue_summary": "\"OSError: [Errno 8] Exec format error\" when execute bit is set", "issue_description": "wadegilmer commented on 8 May 2019\nExpected Behavior\nPlace the following code into main.py.\nfrom flask import Flask\n\n\napp = Flask(__name__)\napp.config['DEBUG'] = True\n\n@app.route('/')\ndef root():\n    return \":)\"\n\napp.run()\nSet the execute bit on main.py:\nchmod +x main.py\nRunning the following command should start the server: python main.py\nActual Behavior\n$ python main.py\n * Serving Flask app \"main\" (lazy loading)\n * Environment: production\n   WARNING: Do not use the development server in a production environment.\n   Use a production WSGI server instead.\n * Debug mode: on\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n * Restarting with stat\nTraceback (most recent call last):\n  File \"main.py\", line 11, in <module>\n    app.run()\n  File \"/Users/wadegilmer/miniconda3/envs/hello-flask/lib/python3.7/site-packages/flask/app.py\", line 943, in run\n    run_simple(host, port, self, **options)\n  File \"/Users/wadegilmer/miniconda3/envs/hello-flask/lib/python3.7/site-packages/werkzeug/serving.py\", line 988, in run_simple\n    run_with_reloader(inner, extra_files, reloader_interval, reloader_type)\n  File \"/Users/wadegilmer/miniconda3/envs/hello-flask/lib/python3.7/site-packages/werkzeug/_reloader.py\", line 332, in run_with_reloader\n    sys.exit(reloader.restart_with_reloader())\n  File \"/Users/wadegilmer/miniconda3/envs/hello-flask/lib/python3.7/site-packages/werkzeug/_reloader.py\", line 176, in restart_with_reloader\n    exit_code = subprocess.call(args, env=new_environ, close_fds=False)\n  File \"/Users/wadegilmer/miniconda3/envs/hello-flask/lib/python3.7/subprocess.py\", line 323, in call\n    with Popen(*popenargs, **kwargs) as p:\n  File \"/Users/wadegilmer/miniconda3/envs/hello-flask/lib/python3.7/subprocess.py\", line 775, in __init__\n    restore_signals, start_new_session)\n  File \"/Users/wadegilmer/miniconda3/envs/hello-flask/lib/python3.7/subprocess.py\", line 1522, in _execute_child\n    raise child_exception_type(errno_num, err_msg, err_filename)\nOSError: [Errno 8] Exec format error: '/Users/wadegilmer/lc101/flask_error/main.py'\nEnvironment\nosx version: 10.13.6\nPython version: 3.7.3\nFlask version: 1.0.2\nWerkzeug version: 0.15.2\nCommentary\nAdding a shabang line to main.py resolves the issue but is kind of unexpected. Additionally removing the execute bit also resolves the issue. Is this the expected behavior?", "issue_status": "Closed", "issue_reporting_time": "2019-05-07T20:19:42Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "146": {"issue_url": "https://github.com/pallets/flask/issues/3188", "issue_id": "#3188", "issue_summary": "headers vanish inside app.before_request when trying to use them", "issue_description": "squarewave24 commented on 8 May 2019 \u2022\nedited\ni've spent a day on this, and can't find any documentation for why this is happening, but it appears Flask does some kind of sanitation of headers if they are used inside before_request\nwhenever i try to extract token from 'Bearer xxxxxx' it makes the entire header disappear. regardless if doing string.split(' ') or substring.\nall of this works just fine in controllers. but i am trying to make it generic for all controller actions. so i don't want to decorate every endpoint.\nthe Authorization header looks like this Bearer xxxxxxxxx. but i also tested this on other custom headers and same thing happens.\nbp = Blueprint('default', __name__)  # type: Blueprint\n\ndef create_app() -> Flask:\n    app = Flask(__name__)\n    add_request_authorization(bp)  # i tried this with app and bp\n    app.register_blueprint(bp)\n    return app\n\ndef add_request_authorization(bp):\n    \"\"\"\n    register okta verification event\n    \"\"\"\n    @bp.before_request\n    def verify_okta_for_request(*args, **kwargs):\n        auth_header = request.headers.get('Authorization')  # this is ok\n        print('auth:', auth_header)   # prints\n        token = auth_header.split(' ')[1]  # makes the whole header \"None\" including on lines above\n        token = auth_header[7:]  # makes the whole header 'None\" \nlooks like even if i try to assign the raw header to another variable, it vanishes!\ni also tried before_app_request", "issue_status": "Closed", "issue_reporting_time": "2019-05-07T19:24:54Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "147": {"issue_url": "https://github.com/pallets/flask/issues/3187", "issue_id": "#3187", "issue_summary": "Catch-all route does not work if url has another handler even if method is different", "issue_description": "ekor15 commented on 7 May 2019 \u2022\nedited\nI want to set up a handler for all URLs that will handle the OPTIONS preflight requests\nFollowing the \"catch-all\" example (@app.route(\"/path:path\", methods=['OPTIONS']))\nI found that if the server gets a route that has a handler with a different method neither of the handlers are called\nExpected Behavior\nThe OPTIONS request should have been routed to the \"wildcard\" OPTIONS handler\nfrom unittest import TestCase\nfrom flask import Flask\nfrom hamcrest import assert_that, equal_to\nclass TestSitePreferencesService(TestCase):\n    def test(self):\n        app = Flask(__name__)\n\n        @app.route(\"/<path:path>\", methods=['OPTIONS'])\n        def catch_all(path):\n            return \"catch_all\"\n\n        @app.route(\"/specific\", methods=['GET'])\n        def specific():\n            return \"specific\"\n\n        client = app.test_client()\n        result = client.options('/some/url')\n        assert_that(result.data.decode('utf-8') , equal_to('catch_all'))\n\n        result1 = client.get('some/url')\n        assert_that(result1.status_code , equal_to(405)) # this identifies the global handler but the method is wrong this is expected\n\n        result2 = client.options('/specific')\n        # looks like this is not going to ether of the handlers\n        assert_that(result2.data.decode('utf-8'),equal_to('catch_all')) # fails\nActual Behavior\nThe request was not routed to the correct handler OPTIONS handler\nEnvironment\nPython version:3.7\nFlask version:1.0.2\nWerkzeug version:0.15.2", "issue_status": "Closed", "issue_reporting_time": "2019-05-07T17:18:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "148": {"issue_url": "https://github.com/pallets/flask/issues/3168", "issue_id": "#3168", "issue_summary": "Improve warning about dev server use in production", "issue_description": "Member\nmiguelgrinberg commented on 2 May 2019\nI'm preparing for my PyCon tutorial, for which I'm trying to look at things from the perspective of a beginner. The output of flask run is actually very confusing if you don't have a bit of background. Here is an example:\n(venv) $ flask run\n* Environment: production\n  WARNING: Do not use the development server in a production environment.\n  Use a production WSGI server instead.\n* Debug mode: off\n* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\nFirst of all, is this a development server? How would you know if you are new to Flask? And more importantly, we are told that we shouldn't use the development server in a production environment. But the line right above appears to claim the current environment is production!\nI would like to propose a rewording of this warning to avoid ambiguous terms such as \"environment\". My proposal:\n  WARNING: This is a development server. Do not use it in a production deployment.\n  Use a production WSGI server instead.\nThoughts?\n8", "issue_status": "Closed", "issue_reporting_time": "2019-05-02T01:06:37Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "149": {"issue_url": "https://github.com/pallets/flask/issues/3167", "issue_id": "#3167", "issue_summary": "FactoryBoy data not created using json POST request", "issue_description": "dpmccabe commented on 1 May 2019\nI've discovered a weird interaction between Flask, pytest, SQLAlchemy, and FactoryBoy that I think is a Flask bug. Consider these two identical routes that should both return the number of records in a database table:\nbp = Blueprint('example', __name__, url_prefix='/example')\n\n@bp.route('/form', methods = ['POST'])\ndef test_form():\n    return str(db_session.query(Person).count())\n\n@bp.route('/json', methods = ['POST'])\ndef test_json():\n    return str(db_session.query(Person).count())\nThe difference is in the unit tests:\ndef test_form(self, client):\n    person = PersonFactory()\n    resp = client.post('/example/form', data={'foo': 'bar'})\n    assert resp.data == b'1'\n\ndef test_json(self, client):\n    person = PersonFactory()\n    resp = client.post('/example/json', json={'foo': 'bar'})\n    assert resp.data == b'1'\nWe're posting form data in the first test and JSON in the second. The first test succeeds and you see this in the log:\n2019-04-30 14:26:05,425 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)\n2019-04-30 14:26:05,427 INFO sqlalchemy.engine.base.Engine INSERT INTO people (id) VALUES (%(id)s)\n2019-04-30 14:26:05,427 INFO sqlalchemy.engine.base.Engine {'id': '658e241a-5522-47ca-9e61-bd6862d6ddc6}\n2019-04-30 14:26:05,432 INFO sqlalchemy.engine.base.Engine SELECT count(*) AS count_1 FROM (SELECT people.id AS people_id FROM people) AS anon_1\n2019-04-30 14:26:05,432 INFO sqlalchemy.engine.base.Engine {}\n2019-04-30 14:26:05,433 INFO sqlalchemy.engine.base.Engine ROLLBACK\nFactoryBoy correctly inserts the data and rolls it back when the test is done. However, the second test fails because the test person isn't inserted:\n2019-04-30 14:28:27,341 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)\n2019-04-30 14:28:27,342 INFO sqlalchemy.engine.base.Engine SELECT count(*) AS count_1 \nFROM (SELECT people.id AS people_id FROM people) AS anon_1\n2019-04-30 14:28:27,342 INFO sqlalchemy.engine.base.Engine {}\n2019-04-30 14:28:27,343 INFO sqlalchemy.engine.base.Engine ROLLBACK\n\ntests/test_example.py:40 (TestExample.test_json)\nb'0' != b'1'\nSee this gist for how I'm creating the Flask app, initializing SQLAlchemy, and configuring the test suite: https://gist.github.com/dpmccabe/6d3bed81c37817c38fb3f2b262d1393d\nApologies if I'm doing anything unconventional, since I'm new to Flask.\nExpected Behavior\nThe format of the request body (form data vs. JSON) should have nothing to do with whether FactoryBoy inserts records.\nActual Behavior\nFactoryBoy records are not inserted when testing a post endpoint with a JSON body. It seems like there's some preprocessing step that's not performed with a JSON body.\nEnvironment\nPython version: 3.7\nFlask version: 1.0.2\nWerkzeug version: 0.15.2", "issue_status": "Closed", "issue_reporting_time": "2019-04-30T18:39:35Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "150": {"issue_url": "https://github.com/pallets/flask/issues/3165", "issue_id": "#3165", "issue_summary": "Unused url_join?", "issue_description": "Contributor\nmekarpeles commented on 27 Apr 2019\nflask/flask/blueprints.py\nLine 13 in 827536e\n from werkzeug.urls import url_join ", "issue_status": "Closed", "issue_reporting_time": "2019-04-27T00:15:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "151": {"issue_url": "https://github.com/pallets/flask/issues/3164", "issue_id": "#3164", "issue_summary": "How can I send a post Api from Flask server to Laravel server?", "issue_description": "PhatBK commented on 26 Apr 2019\nThis issue tracker is a tool to address bugs in Flask itself.\nPlease use the #pocoo IRC channel on freenode or Stack Overflow for general\nquestions about using Flask or issues not related to Flask.\nIf you'd like to report a bug in Flask, fill out the template below. Provide\nany extra information that may be useful / related to your problem.\nIdeally, create an MCVE, which helps us\nunderstand the problem and helps check that it is not caused by something in\nyour code.\nExpected Behavior\nTell us what should happen.\nPaste a minimal example that causes the problem.\nActual Behavior\nTell us what happens instead.\nPaste the full traceback if there was an exception.\nEnvironment\nPython version:\nFlask version:\nWerkzeug version:", "issue_status": "Closed", "issue_reporting_time": "2019-04-26T04:59:43Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "152": {"issue_url": "https://github.com/pallets/flask/issues/3163", "issue_id": "#3163", "issue_summary": "open_resource() does not allow mode='rt'", "issue_description": "goodmami commented on 25 Apr 2019\nIn Python 3, mode='rt' is synonymous with mode='r' but Flask disallows it thinking it is not a valid mode for reading. While this is true in Python 2, Flask could (at least) provide a more meaningful error message, if not just allow it.\nA simple solution might change these lines in flask/helpers.py:\n    def open_resource(self, resource, mode='rb'):\n        \"\"\"...\"\"\"  # truncated for example\n        if mode not in ('r', 'rb'):\n            raise ValueError('Resources can only be opened for reading')\n        return open(os.path.join(self.root_path, resource), mode)\n...to...\n    def open_resource(self, resource, mode='rb'):\n        \"\"\"...\"\"\"\n        if mode == 'rt':\n            mode = 'r'\n        if mode not in ('r', 'rb'):\n            raise ValueError('Resources can only be opened for reading')\n        return open(os.path.join(self.root_path, resource), mode)\nA heavier solution might use io.open() (and also allow encoding, but see #1740):\n    def open_resource(self, resource, mode='rb', encoding=None):\n        \"\"\"...\"\"\"\n        if mode not in ('r', 'rb', 'rt'):\n            raise ValueError('Resources can only be opened for reading')\n        return io.open(os.path.join(self.root_path, resource), mode=mode, encoding=encoding)\nExpected Behavior\nCalling open_resource() with mode='rt' should open a file in text mode (at least in Python 3).\nfrom flask import Flask\n\napp = Flask(__name__)\nwith app.open_resource('README.md', mode='rt') as f:\n    print(f.read())\nActual Behavior\nA misleading exception is raised.\nTraceback (most recent call last):\n  File \"mwe.py\", line 5, in <module>\n    with app.open_resource('README.md', mode='rt') as f:\n  File \"/home/goodmami/repos/OMW/py3env/lib/python3.6/site-packages/flask/helpers.py\", line 1002, in open_resource\n    raise ValueError('Resources can only be opened for reading')\nValueError: Resources can only be opened for reading\nEnvironment\nPython version: 3.6.7\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2019-04-25T09:04:53Z", "fixed_by": "#3174", "pull_request_summary": "Allow mode='rt' on open_resource() helper", "pull_request_description": "Contributor\nicreatedanaccount commented on 6 May 2019 \u2022\nedited by davidism\ncloses #3163", "pull_request_status": "Merged", "issue_fixed_time": "2019-05-17T20:32:41Z", "files_changed": [["2", "CHANGES.rst"], ["2", "docs/conf.py"], ["1", "docs/requirements.txt"], ["6", "flask/helpers.py"], ["15", "tests/test_helpers.py"]]}, "153": {"issue_url": "https://github.com/pallets/flask/issues/3161", "issue_id": "#3161", "issue_summary": "flask.testing uses extraneous app_context for json client requests", "issue_description": "Hooksie commented on 24 Apr 2019 \u2022\nedited\nAt flask.testing:81, there exists the block below added in e97253e:\n    if 'json' in kwargs:\n        ...\n        # push a context so flask.json can use app's json attributes\n        with app.app_context():\n            kwargs['data'] = json_dumps(kwargs.pop('json'))\nThis enables the werkzeug client to use app or blueprint defaults for the JSONEncode to use. However this invokes an app context and consequently (and surprisingly) the handlers handlers registered to the app context lifecycle.\nSince this behavior only happens when the json kwarg is used on the test client, it can lead to surprising behavior in tests that make use of json and inconsistent behavior between tests that do and do not use json. A more expected behavior would be to have consistent behavior both when and when not using the json kwarg.\nI also do not see any other usages of the app_context context manager in flask.testing, so this doesn't seem like a pattern that should be expected (not that I'm well versed in Flasks internal patterns, so take that for what its worth).\nI discovered this because Flask-SQLALchemy registers an app context teardown that removes the session and unexpectedly rolls back a session mid testcase. I imagine this behavior is not unique to Flask-SQLAlchemy.\nI propose removing the app_context context handler surrounding the json_dumps call, since\nthis was the behavior prior to e97253e\nthe general flask pattern is already to wrap the higher level calls in an app context, so there is unlikely to be significant impact\njson_dumps already degrades gracefully when there is no app context\nthe behavior change is constrained to the testing utilities\nI can submit the PR for this if there's appetite, since it's just a couple of lines.\nPython3, flask 1.02.", "issue_status": "Closed", "issue_reporting_time": "2019-04-24T13:42:01Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "154": {"issue_url": "https://github.com/pallets/flask/issues/3160", "issue_id": "#3160", "issue_summary": "No auth keyword arg in the test client for Basic HTTP Auth", "issue_description": "DunkeeFunk commented on 24 Apr 2019\nExpected Behavior\nI was trying to write unit tests for my flask restful api which uses BasicHttpAuth on the initial request and returns a JWT token. All subsequent requests have this token in an x-access-header up to an expiry of 15 mins, then re-authentication happens( the code for this is in the anacropapi repo on my profile under api.init.py). I have noted the error in the template. I thought this test client would be fully compatible with the requests package. Does anyone know of a work around for this or can an auth keyword arg be added ?\nimport unittest \n\nclass ApiTest(unittest.TestCase): \n\n    def setUp(self):\n        # creates a test client\n        self.app = app.test_client()\n        # add a user into the account code goes here ...\n\n    def tearDown(self):\n        db.drop_all()\n        # etc...\n\n    def test_login(self):\n        # sends HTTP GET request to the application\n        # on the specified path with an auth kwarg passed like in requests \n         result = self.app.get('/login', auth=requests.auth.BasicHttpAuth(username, password)) \nActual Behavior\nthis returns no auth arg found error i cant remember the specfic error off hand \nEnvironment\nPython version: 3.6\nFlask version: latest\nWerkzeug version: latest", "issue_status": "Closed", "issue_reporting_time": "2019-04-23T19:11:59Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "155": {"issue_url": "https://github.com/pallets/flask/issues/3158", "issue_id": "#3158", "issue_summary": "raise exception instead of using abort()", "issue_description": "leandropls commented on 22 Apr 2019\nUsing abort() makes static code analysis harded because it only works if the IDE knows that abort() interrupts the function execution.\nIs there a reason why flask handler abortion isn't done with a raise instead of abort?\nWould an abortion interfaced based on raising exceptions directly be accepted into the code?", "issue_status": "Closed", "issue_reporting_time": "2019-04-22T14:56:47Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "156": {"issue_url": "https://github.com/pallets/flask/issues/3153", "issue_id": "#3153", "issue_summary": "cannot run my flask application in conda", "issue_description": "monali45 commented on 14 Apr 2019 \u2022\nedited by ThiefMaster\n# Importing the libraries\nfrom flask import Flask, render_template, request\nfrom flask_wtf import FlaskForm\nfrom wtforms import SelectField, SubmitField\nimport threading\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# code snippet\napp = Flask(__name__)\napp.config['SECRET_KEY'] = ''\nif __name__ == '__main__':\n   #app.run(debug = True ,use_reloader=False)\n   threading.Thread(target=app.run(debug = True ,use_reloader=False)).start()\nTraceback (most recent call last):\n  File \"C:\\Users\\Monali\\Anaconda3\\envs\\myenv\\lib\\site-packages\\flask\\app.py\", line 2309, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Monali\\Anaconda3\\envs\\myenv\\lib\\site-packages\\flask\\app.py\", line 2295, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Monali\\Anaconda3\\envs\\myenv\\lib\\site-packages\\flask\\app.py\", line 1741, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Monali\\Anaconda3\\envs\\myenv\\lib\\site-packages\\flask\\_compat.py\", line 35, in reraise\n    raise value\n  File \"C:\\Users\\Monali\\Anaconda3\\envs\\myenv\\lib\\site-packages\\flask\\app.py\", line 2292, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Monali\\Anaconda3\\envs\\myenv\\lib\\site-packages\\flask\\app.py\", line 1815, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Monali\\Anaconda3\\envs\\myenv\\lib\\site-packages\\flask\\app.py\", line 1718, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Monali\\Anaconda3\\envs\\myenv\\lib\\site-packages\\flask\\_compat.py\", line 35, in reraise\n    raise value\n  File \"C:\\Users\\Monali\\Anaconda3\\envs\\myenv\\lib\\site-packages\\flask\\app.py\", line 1813, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Monali\\Anaconda3\\envs\\myenv\\lib\\site-packages\\flask\\app.py\", line 1799, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Monali\\conda projects\\BIL_miniProject\\home.py\", line 65, in linReg\n    plt.show()\n  File \"C:\\Users\\Monali\\Anaconda3\\envs\\myenv\\lib\\site-packages\\matplotlib\\pyplot.py\", line 244, in show\n    return _show(*args, **kw)\n  File \"C:\\Users\\Monali\\Anaconda3\\envs\\myenv\\lib\\site-packages\\matplotlib\\backend_bases.py\", line 192, in __call__\n    self.mainloop()\n  File \"C:\\Users\\Monali\\Anaconda3\\envs\\myenv\\lib\\site-packages\\matplotlib\\backends\\backend_qt5.py\", line 149, in mainloop\n    signal.signal(signal.SIGINT, signal.SIG_DFL)\n  File \"C:\\Users\\Monali\\Anaconda3\\envs\\myenv\\lib\\signal.py\", line 47, in signal\n    handler = _signal.signal(_enum_to_int(signalnum), _enum_to_int(handler))\nValueError: signal only works in main thread\nPython version: 3.5.5\nFlask version: 1.0.2", "issue_status": "Closed", "issue_reporting_time": "2019-04-14T09:59:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "158": {"issue_url": "https://github.com/pallets/flask/issues/3148", "issue_id": "#3148", "issue_summary": "Unable to send POST request using Flask test client", "issue_description": "mayank-matelabs commented on 10 Apr 2019\nExpected Behavior\nThe POST request to /login should result in a response with status code 200.\n    def initialize_authentication(self):\n        soup = BeautifulSoup(self.client.get(os.environ['URL'] + \"login/\").data, features=\"html5lib\")\n        csrf_token = soup.find('input', dict(name='csrf_token'))['value']\n\n        self.client.set_cookie(key='csrf_token', value=csrf_token, server_name='localhost')\n\n        payload = {\n            'username': os.environ['username'],\n            'password': os.environ['password'],\n        }\n        headers = {\n            'X-CSRFToken': csrf_token,\n            'Accept': 'application/json'\n        }\n\n        response = self.client.post(os.environ['URL'] + \"login/\", data=payload, headers=headers,\n                               follow_redirects=True)\n        self.assertEqual(200, response.status_code, \"Login Request failed!\")\n        return csrf_token\nActual Behavior\nTell us what happens instead.\nError\nTraceback (most recent call last):\n  File \"/usr/lib/python3.5/unittest/case.py\", line 58, in testPartExecutor\n    yield\n  File \"/usr/lib/python3.5/unittest/case.py\", line 596, in run\n    self.setUp()\n  File \"/home/lenovo/Desktop/ML/mv/tests/mv_tests/integration_tests/parent_join_integration_tests.py\", line 31, in setUp\n    self.csrf_token = self.initialize_authentication()\n  File \"/home/lenovo/Desktop/ML/mv/tests/mv_tests/mv_base_tests.py\", line 35, in initialize_authentication\n    _, status_code = self.post(os.environ['URL'] + \"login/\", data=payload, csrf_token=csrf_token)\n  File \"/home/lenovo/Desktop/ML/mv/tests/mv_tests/mv_base_tests.py\", line 58, in post\n    rv = self.client.post(url, data=data, headers=self.get_headers(csrf_token), follow_redirects=True)\n  File \"/home/lenovo/Desktop/ML/mv/venv/lib/python3.5/site-packages/werkzeug/test.py\", line 1038, in post\n    return self.open(*args, **kw)\n  File \"/home/lenovo/Desktop/ML/mv/venv/lib/python3.5/site-packages/flask/testing.py\", line 127, in open\n    follow_redirects=follow_redirects)\n  File \"/home/lenovo/Desktop/ML/mv/venv/lib/python3.5/site-packages/werkzeug/test.py\", line 1016, in open\n    response, new_location, environ, buffered=buffered\n  File \"/home/lenovo/Desktop/ML/mv/venv/lib/python3.5/site-packages/werkzeug/test.py\", line 947, in resolve_redirect\n    return self.open(builder, as_tuple=True, buffered=buffered)\n  File \"/home/lenovo/Desktop/ML/mv/venv/lib/python3.5/site-packages/flask/testing.py\", line 122, in open\n    builder = make_test_environ_builder(self.application, *args, **kwargs)\n  File \"/home/lenovo/Desktop/ML/mv/venv/lib/python3.5/site-packages/flask/testing.py\", line 29, in make_test_environ_builder\n    url = url_parse(path)\n  File \"/home/lenovo/Desktop/ML/mv/venv/lib/python3.5/site-packages/werkzeug/urls.py\", line 457, in url_parse\n    i = url.find(s(\":\"))\nAttributeError: 'EnvironBuilder' object has no attribute 'find'\nEnvironment\nPython version: 3.5.2\nFlask version: 0.12.2\nWerkzeug version: 0.15.1", "issue_status": "Closed", "issue_reporting_time": "2019-04-10T14:52:48Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "159": {"issue_url": "https://github.com/pallets/flask/issues/3146", "issue_id": "#3146", "issue_summary": "Incompatible with JSON", "issue_description": "CTSDOxF commented on 8 Apr 2019\nExpected Behavior\nMy code SHOULD dump a json object into the file using json.dump()\nkeep_alive.py\nfrom flask import Flask\nfrom threading import Thread\n\napp = Flask('')\n\n@app.route('/')\ndef main():\n    return \"Your bot is alive!\"\n\ndef run():\n    app.run(host=\"0.0.0.0\", port=8080)\n\ndef keep_alive():\n    server = Thread(target=run)\n    server.start()\nmain.py\nimport discord, os, random, base64, json\n\n\"\"\"from dotenv import DotEnv\n\ndotenv = DotEnv()\"\"\"\n\nimport time\n\n\n\n\nTOKEN = os.getenv('token')\nADMIN_ID = os.getenv('admin')\n\nCURRENCY_DATA = json.load(open(\"text.json\", 'r'))\n\nyee = discord.Client()\n\n@yee.event\nasync def on_ready():\n  await yee.send_message(yee.get_channel('558024841572253706'), \"Ready\")\n  await yee.change_presence(game=discord.Game(name=\"use b!help for help!\"))\n  \nmessage_log = []\n\n@yee.event\nasync def on_message(message):\n  if message.author == yee.user:\n    return\n  \n  if message.content.startswith('b!hello'):\n    msg = \"Hello, {0.author.mention}\".format(message)\n    await yee.send_message(message.channel, msg)\n    return\n  \n  if message.content.startswith('b!invite'):\n    msg = \"{0.author.mention} Go to https://discordapp.com/oauth2/authorize?client_id=555115104769933383&scope=bot\".format(message)\n    await yee.send_message(message.channel, msg)\n    return\n  \n  if message.content.startswith('b!help'):\n    msg = \"{0.author.mention}\\n```\\nb!hello - say hello to the bot!\\nb!invite - invite me to your server!\\nb!help - You just used this command!\".format(message)\n    msg += \"\\nb!luckynumber - gives you a lucky number!\\nb!bal - look at how many testcoin you have\\nb!shop - look at the various money genorators that you can/can't buy!\\n\"\n    msg += \"b!buy <x> - use to buy generator with a purchase ID of x (remove the brackets)\\n```\"\n    await yee.send_message(message.channel, msg)\n    return\n  \n  if message.content.startswith('b!luckynumber'):\n    msg = \"{0.author.mention} Your lucky number is \".format(message) + str(random.randint(0,9999))\n    await yee.send_message(message.channel, msg)\n    return\n\n  if message.content.startswith('b!bal'):\n    if str(message.author.id) not in CURRENCY_DATA[\"Users\"]:\n      CURRENCY_DATA[\"Money\"][str(message.author.id)] = 0.0001\n      CURRENCY_DATA[\"Updates\"][str(message.author.id)] = time.time()\n      CURRENCY_DATA[\"Money Inventory\"][str(message.author.id)] = [0,0,0]\n      CURRENCY_DATA[\"Users\"].append(str(message.author.id))\n      CURRENCY_DATA[\"Inventory\"][str(message.author.id)] = []\n    for i in range(len(CURRENCY_DATA[\"Money Generators\"])):\n        CURRENCY_DATA[\"Money\"][str(message.author.id)] += round(CURRENCY_DATA[\"Money Inventory\"][str(message.author.id)][i] * CURRENCY_DATA[\"Money Generators\"][i][\"CPS\"] * (time.time() - CURRENCY_DATA[\"Updates\"][str(message.author.id)]), 5)\n    CURRENCY_DATA[\"Updates\"][str(message.author.id)] = time.time()\n    CURRENCY_DATA[\"Money\"][str(message.author.id)] = round(CURRENCY_DATA[\"Money\"][str(message.author.id)], 5)\n    msg = \"{0.author.mention}, You have {1} TestCoin.\".format(message, CURRENCY_DATA[\"Money\"][str(message.author.id)])\n    await yee.send_message(message.channel, msg)\n    json.dump(CURRENCY_DATA, open('text.json','w'))\n    return\n\n  if message.content.startswith('b!shop'):\n      if str(message.author.id) not in CURRENCY_DATA[\"Users\"]:\n        CURRENCY_DATA[\"Money\"][str(message.author.id)] = 0.0001\n        CURRENCY_DATA[\"Updates\"][str(message.author.id)] = time.time()\n        CURRENCY_DATA[\"Money Inventory\"][str(message.author.id)] = [0,0,0]\n        CURRENCY_DATA[\"Users\"].append(str(message.author.id))\n        CURRENCY_DATA[\"Inventory\"][str(message.author.id)] = []\n      for i in range(len(CURRENCY_DATA[\"Money Generators\"])):\n        CURRENCY_DATA[\"Money\"][str(message.author.id)] += round(CURRENCY_DATA[\"Money Inventory\"][str(message.author.id)][i] * CURRENCY_DATA[\"Money Generators\"][i][\"CPS\"] * (time.time() - CURRENCY_DATA[\"Updates\"][str(message.author.id)]), 5)\n      CURRENCY_DATA[\"Updates\"][str(message.author.id)] = time.time()\n      msg = \"{0.author.mention}, You have {1} TestCoin.\".format(message, CURRENCY_DATA[\"Money\"][str(message.author.id)])\n      msg += '\\n```\\n'\n      for i in CURRENCY_DATA[\"Money Generators\"]:\n          msg += i['name'] + ' $'\n          msg += str(i['increase_amount'] * (1 + CURRENCY_DATA[\"Money Inventory\"][str(message.author.id)][i['id']]) * i['base_price']) + '\\n'\n          msg += i['info'] + '\\n'\n          msg += 'Purchase code: ' + str(i['id']) + '\\n\\n'\n      msg += '\\n```'\n      await yee.send_message(message.channel, msg)\n      json.dump(CURRENCY_DATA, open('text.json', 'w'))\n      return\n  \n  if message.content.startswith('b!buy'):\n      for i in range(len(CURRENCY_DATA[\"Money Generators\"])):\n        CURRENCY_DATA[\"Money\"][str(message.author.id)] += round((1 + CURRENCY_DATA[\"Money Inventory\"][str(message.author.id)][i]) * CURRENCY_DATA[\"Money Generators\"][i][\"CPS\"] * (time.time() - CURRENCY_DATA[\"Updates\"][str(message.author.id)]), 5)\n      CURRENCY_DATA[\"Updates\"][str(message.author.id)] = time.time()\n      buy_id = message.content[5:]\n      try:\n          try:\n              adjusted_cost = CURRENCY_DATA[\"Money Generators\"][int(buy_id)][\"base_price\"] * (CURRENCY_DATA[\"Money Generators\"][int(buy_id)]['increase_amount'] * CURRENCY_DATA[\"Money Inventory\"][str(message.author.id)][int(buy_id)])\n          except ValueError:\n              await yee.send_message(message.channel, \"The value of the generator you are trying to buy could not be converted. blease try again using the purchase code of the generator you want to buy.\")\n              return\n      except IndexError:\n          await yee.send_message(message.channel, \"The purchase id is not valid\")\n          return\n      if CURRENCY_DATA[\"Money\"][str(message.author.id)] >= adjusted_cost:\n          CURRENCY_DATA[\"Money\"][str(message.author.id)] -= adjusted_cost\n          CURRENCY_DATA[\"Money Inventory\"][str(message.author.id)][int(buy_id)] += 1\n          await yee.send_message(message.channel, \"Purchase successful.\")\n          return\n      else:\n          await yee.send_message(message.channel, \"Error, not enough funds\")\n          return\n\n  if message.content.startswith('b!inventory'):\n    if str(message.author.id) not in CURRENCY_DATA[\"Users\"]:\n      CURRENCY_DATA[\"Money\"][str(message.author.id)] = 0.0001\n      CURRENCY_DATA[\"Updates\"][str(message.author.id)] = time.time()\n      CURRENCY_DATA[\"Money Inventory\"][str(message.author.id)] = [0,0,0]\n      CURRENCY_DATA[\"Users\"].append(str(message.author.id))\n      CURRENCY_DATA[\"Inventory\"][str(message.author.id)] = []\n    msg = \"```\\n\"\n    for i in CURRENCY_DATA[\"Inventory\"][str(message.author.id)]:\n      msg += CURRENCY_DATA[\"Items\"][i[\"id\"]][\"Name\"] + ' ' + str(i[\"quantity\"]) + '\\n'\n    msg += '```'\n    await yee.send_message(message.channel, msg)\n    json.dump(CURRENCY_DATA, open('text.json','w'))\n    return\n\n  if message.content.startswith('b@') and message.author.id == ADMIN_ID:\n    if message.content.startswith('b@dumpchannels'):\n      msg = '```\\n'\n      channels = yee.get_all_channels()\n      a = 0\n      for i in channels:\n        msg += str(i.name).ljust(25,'-') + str(i.id).ljust(25,'-') + str(i.server) + '\\n'\n        a += 1\n        if a > 19:\n          await yee.send_message(message.channel, msg+'```')\n          a = 0\n          msg = '```\\n'\n      msg += '```'\n      print(msg)\n      await yee.send_message(message.channel, msg)\n      return\n  else:\n    if message.content.startswith('b@'):\n      await yee.send_message(message.channel, message.author.mention + ', you do not have access to this command!')\n\nyee.run(TOKEN)\n\nimport keep_alive\nkeep_alive.keep_alive() \nActual Behavior\nThis code does not update the JSON file\nNo errors\nEnvironment\nPython version: 3.6\nFlask version: 0.12\nWerkzeug version:N/A", "issue_status": "Closed", "issue_reporting_time": "2019-04-08T14:57:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "160": {"issue_url": "https://github.com/pallets/flask/issues/3145", "issue_id": "#3145", "issue_summary": "Cannot visit demo web page", "issue_description": "Kobeyond commented on 8 Apr 2019\nAsk help for my demo\nHey, guys. I deploy the simple demo on my server, and then use 'export FLASK_APP=demo.py' , 'flask run --host=0.0.0.0' to launch the program.\nHowever, I have tried every possible way to visit my web page, but failed all the same. It shows time out. I'm waiting sincerely for your help!!\nMy code:\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n   return 'Hello, World!'\n\nif __name__ == '__main__':\n   app.run( host='0.0.0.0',port=5000)\nNote:\nI am sure there firewall(iptables) is closed on my server.\nI used Chrome to visit the web page, and got the result time out.", "issue_status": "Closed", "issue_reporting_time": "2019-04-08T13:23:44Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "161": {"issue_url": "https://github.com/pallets/flask/issues/3144", "issue_id": "#3144", "issue_summary": "Flask throwing AssertionError: View function mapping is overwriting an existing endpoint function: register", "issue_description": "Zhavi221 commented on 8 Apr 2019\n(I am not very exprienced)\nWhenever I try to run the code, I get this error:\nTraceback (most recent call last):\nFile \"C:\\Users\\User\\source\\repos\\FlaskWebProject1\\FlaskWebProject1\\FlaskWebProject1\\views.py\", line 48, in\n@app.route('/register', methods=['GET', 'POST'])\nFile \"C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Anaconda3_64\\lib\\site-packages\\flask\\app.py\", line 1250, in decorator\nself.add_url_rule(rule, endpoint, f, **options)\nFile \"C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Anaconda3_64\\lib\\site-packages\\flask\\app.py\", line 66, in wrapper_func\nreturn f(self, *args, **kwargs)\nFile \"C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Anaconda3_64\\lib\\site-packages\\flask\\app.py\", line 1221, in add_url_rule\n'existing endpoint function: %s' % endpoint)\nAssertionError: View function mapping is overwriting an existing endpoint function: register\nPress any key to continue . . .\nThis is the function register:\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\nform = RegistrationForm(request.form)\nif request.method == 'POST' and form.validate():\nuser = User(form.username.data, form.email.data,\nform.password.data)\ndb_session.add(user)\nflash('Thanks for registering')\nreturn redirect(url_for('/home'))\nelse:\nreturn render_template(\n'register.html',\nyear=datetime.now().year,\nmonth=datetime.now().month,\nday=datetime.now().day,\nhour=datetime.now().hour,\nminute=datetime.now().minute,\nform=form\n)\nCan anyone help me?\n6", "issue_status": "Closed", "issue_reporting_time": "2019-04-08T11:25:05Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "162": {"issue_url": "https://github.com/pallets/flask/issues/3143", "issue_id": "#3143", "issue_summary": "I am not an expert, but I want to solve this error: AssertionError: View function mapping is overwriting an existing endpoint function: register", "issue_description": "Zhavi221 commented on 8 Apr 2019\nI don't know what's causing this error, as I've just added few lines of code and it just seemed to ruin the code.\nHere is the function register and it's class + app.route.\nclass RegistrationForm(Form):\nusername = StringField('Username', [validators.Length(min=4, max=25, message='Username must be 4-25 chars long')])\nemail = StringField('Email Address', [validators.Length(min=6, max=35, message='Email must be 6-35 chars long')])\npassword = PasswordField('Password', [validators.Length(min=8, max=12, message='Passwords must be 8-12 chars long')])\nconfirm = PasswordField('Repeat Password')\naccept_tos = BooleanField('I accept the new user', [validators.DataRequired()])\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\nform = RegistrationForm(request.form)\nif request.method == 'POST' and form.validate():\nuser = User(form.username.data, form.email.data,\nform.password.data)\ndb_session.add(user)\nflash('Thanks for registering')\nreturn redirect(url_for('/home'))\nreturn render_template(\n'register.html',\nyear=datetime.now().year,\nmonth=datetime.now().month,\nday=datetime.now().day,\nhour=datetime.now().hour,\nminute=datetime.now().minute,\nform=form\n)\nThere's just this error:\nTraceback (most recent call last):\nFile \"C:\\Users\\User\\source\\repos\\FlaskWebProject1\\FlaskWebProject1\\FlaskWebProject1\\views.py\", line 47, in\n@app.route('/register', methods=['GET', 'POST'])\nFile \"C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Anaconda3_64\\lib\\site-packages\\flask\\app.py\", line 1250, in decorator\nself.add_url_rule(rule, endpoint, f, **options)\nFile \"C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Anaconda3_64\\lib\\site-packages\\flask\\app.py\", line 66, in wrapper_func\nreturn f(self, *args, **kwargs)\nFile \"C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Anaconda3_64\\lib\\site-packages\\flask\\app.py\", line 1221, in add_url_rule\n'existing endpoint function: %s' % endpoint)\nAssertionError: View function mapping is overwriting an existing endpoint function: register\nPress any key to continue . . .\nPython version: newest\nFlask version: newest", "issue_status": "Closed", "issue_reporting_time": "2019-04-08T09:20:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "163": {"issue_url": "https://github.com/pallets/flask/issues/3141", "issue_id": "#3141", "issue_summary": "RuntimeError: Attempted to use a closed Session. with flask", "issue_description": "manuel3265 commented on 7 Apr 2019\nI'm trying to run a Tacotron-2 training in flask, get parameters in json format. but the following error arises when I execute the training:\nARNING: The TensorFlow contrib module will not be included in TensorFlow 2.0.\nFor more information, please see:\n  * https://github.com/tensorflow/community/blob/master/rfcs/20180907-contrib-sunset.md\n  * https://github.com/tensorflow/addons\nIf you depend on functionality not listed there, please file an issue.\nUsing TensorFlow backend.\n * Serving Flask app \"server\" (lazy loading)\n * Environment: production\n   WARNING: Do not use the development server in a production environment.\n   Use a production WSGI server instead.\n * Debug mode: on\n * Running on http://0.0.0.0:8891/ (Press CTRL+C to quit)\n * Restarting with stat\n/usr/local/lib/python3.6/dist-packages/numba/errors.py:105: UserWarning: Insufficiently recent colorama version found. Numba requires colorama >= 0.3.9\n  warnings.warn(msg)\nWARNING: The TensorFlow contrib module will not be included in TensorFlow 2.0.\nFor more information, please see:\n  * https://github.com/tensorflow/community/blob/master/rfcs/20180907-contrib-sunset.md\n  * https://github.com/tensorflow/addons\nIf you depend on functionality not listed there, please file an issue.\nUsing TensorFlow backend.\n * Debugger is active!\n * Debugger PIN: 303-138-053\nCheckpoint path: logs-Tacotron-2/taco_pretrained/tacotron_model.ckpt\nLoading training data from: tacotron-files/servex-tacotron/training_data/train.txt\nUsing model: Tacotron\nHyperparameters:\n  GL_on_GPU: True\n  NN_init: True\n  NN_scaler: 0.3\n  allow_clipping_in_normalization: True\n  attention_dim: 128\n  attention_filters: 32\n  attention_kernel: (31,)\n  attention_win_size: 7\n  batch_norm_position: after\n  cbhg_conv_channels: 128\n  cbhg_highway_units: 128\n  cbhg_highwaynet_layers: 4\netc...\nTacotron Parameters       29.039 Million.\nWARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/losses/losses_impl.py:667: to_float (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse tf.cast instead.\ninitialisation done /gpu:0\nInitialized Tacotron model. Dimensions (? = dynamic shape): \n  Train mode:               False\n  Eval mode:                True\n  GTA mode:                 False\n  Synthesis mode:           False\n  Input:                    (?, ?)\n  device:                   0\n  embedding:                (?, ?, 512)\n  enc conv out:             (?, ?, 512)\n  encoder out:              (?, ?, 512)\n  decoder out:              (?, ?, 80)\n  residual out:             (?, ?, 512)\n  projected residual out:   (?, ?, 80)\n  mel out:                  (?, ?, 80)\n  linear out:               (?, ?, 1025)\n  <stop_token> out:         (?, ?)\n  Tacotron Parameters       29.039 Million.\nTacotron training set to a maximum of 200000 steps\nholaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nLoading checkpoint logs-Tacotron-2/taco_pretrained/tacotron_model.ckpt-0\nWARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/training/saver.py:1266: checkpoint_exists (from tensorflow.python.training.checkpoint_management) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse standard file APIs to check for files with this prefix.\nExiting due to exception: '<' not supported between instances of 'int' and 'str'\nTraceback (most recent call last):\n  File \"/home/manuel_garcia02/Tacotron/tacotron/train.py\", line 224, in train\n    while not coord.should_stop() and step < args.tacotron_train_steps:\nTypeError: '<' not supported between instances of 'int' and 'str'\n186.179.100.228 - - [07/Apr/2019 02:52:15] \"POST /tts/train HTTP/1.1\" 200 -\nGenerated 15 test batches of size 32 in 0.891 sec\nGenerated 64 train batches of size 32 in 2.169 sec\nException in thread background:\nTraceback (most recent call last):\n  File \"/usr/lib/python3.6/threading.py\", line 916, in _bootstrap_inner\n    self.run()\n  File \"/usr/lib/python3.6/threading.py\", line 864, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/home/manuel_garcia02/Tacotron/tacotron/feeder.py\", line 169, in _enqueue_next_train_group\n    self._session.run(self._enqueue_op, feed_dict=feed_dict)\n  File \"/usr/local/lib/python3.6/dist-packages/tensorflow/python/client/session.py\", line 929, in run\n    run_metadata_ptr)\n  File \"/usr/local/lib/python3.6/dist-packages/tensorflow/python/client/session.py\", line 1075, in _run\n    raise RuntimeError('Attempted to use a closed Session.')\nWhy can it be produced?\nExpected Behavior\nI should start training normally\nPaste a minimal example that causes the problem.\nPaste the full traceback if there was an exception.\nEnvironment\nPython version: 3.6\nFlask version: 1.0.2\nWerkzeug version:", "issue_status": "Closed", "issue_reporting_time": "2019-04-07T03:11:46Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "164": {"issue_url": "https://github.com/pallets/flask/issues/3140", "issue_id": "#3140", "issue_summary": "Status code on flask.wrappers.Response is incorrect", "issue_description": "johnnymetz commented on 6 Apr 2019\nExpected Behavior\nI'm trying to add a decorator to a flask route, but the status code of the Response object is wrong. Here's an example (note I changed the status code to 202 just as an example):\nfrom flask import Flask, jsonify\nfrom functools import wraps\n\ndef my_decorator(og_func):\n    @wraps(og_func)\n    def wrapper(*args, **kwargs):\n        result, status_code = og_func(*args, **kwargs)\n        print(f\"status code of flask.wrappers.Response object: {result.status_code}\")\n        print(f\"status code of actual response: {status_code}\")\n        # log status code somewhere\n        return result, status_code\n    return wrapper\n\napp = Flask(__name__)\n\n@app.route(\"/\")\n@my_decorator\ndef home():\n    data = {\"hello\": \"world\"}\n    return jsonify(data), 202\nI'd image the status code on the response object would be the same as the status code I returned.\nActual Behavior\nIf I run this flask api and hit the home endpoint using postman or curl, I get the following logs on my backend:\nstatus code of Response object: 200\nstatus code of actual response: 202\n127.0.0.1 - - [04/Apr/2019 11:44:42] \"GET / HTTP/1.1\" 202 -\nAny reason why the status code on the response object is incorrect? Am I doing something wrong or is this a bug?\nEnvironment\nPython version: 3.6.8\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2019-04-05T20:48:03Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "165": {"issue_url": "https://github.com/pallets/flask/issues/3139", "issue_id": "#3139", "issue_summary": "Deprecated code in proxy-setups document", "issue_description": "linnil1 commented on 5 Apr 2019 \u2022\nedited\nIn the document of proxy-setup,\nfrom werkzeug.contrib.fixers import ProxyFix has been deprecated since werkzeug 0.15.\nThe sample code should be from werkzeug.middleware.proxy_fix import ProxyFix.\nThe sample usage become app.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1) that\nworks for my application behind HTTPS proxy.\nReference:\nhttps://werkzeug.palletsprojects.com/en/0.15.x/contrib/fixers/\nhttps://werkzeug.palletsprojects.com/en/0.15.x/middleware/proxy_fix", "issue_status": "Closed", "issue_reporting_time": "2019-04-05T10:10:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "166": {"issue_url": "https://github.com/pallets/flask/issues/3138", "issue_id": "#3138", "issue_summary": "MethodView methods not inherited", "issue_description": "aparamon commented on 3 Apr 2019\nTo reproduce:\nimport flask\nimport flask.views\n\nclass BaseView(flask.views.MethodView):\n    methods = ['GET', 'PROPFIND']\n\nclass MyView(BaseView):\n    def get(self):\n        return None, 200\n    def propfind(self):\n        return None, 200\n\napp = flask.Flask(__name__)\napp.add_url_rule('/test', view_func=MyView.as_view('test'))\n\nfor rule in app.url_map.iter_rules():\n    print(rule, ','.join(rule.methods))\nExpected Behavior\n/test OPTIONS,PROPFIND,GET,HEAD\n/static/<path:filename> OPTIONS,GET,HEAD\nActual Behavior\n/test OPTIONS,GET,HEAD\n/static/<path:filename> OPTIONS,GET,HEAD\nEnvironment\nPython version: 3.7.1\nFlask version: Python 3.7.1 (default, Dec 10 2018, 22:54:23) [MSC v.1915 64 bit (AMD64)] :: Anaconda, Inc. on win32\nWerkzeug version: 0.15.2", "issue_status": "Closed", "issue_reporting_time": "2019-04-03T16:58:21Z", "fixed_by": "#3179", "pull_request_summary": "Fix MethodView inheritance Error (#3138)", "pull_request_description": "Contributor\nLee-W commented on 7 May 2019 \u2022\nedited by davidism\nDescribe what this patch does to fix the issue.\nFix the error that methods variable in MethodView won't be inherited when it's not overwritten.\nLink to any relevant issues or pull requests.\ncloses #3138", "pull_request_status": "Merged", "issue_fixed_time": "2019-05-17T21:18:41Z", "files_changed": [["5", "CHANGES.rst"], ["4", "flask/views.py"], ["21", "tests/test_views.py"]]}, "167": {"issue_url": "https://github.com/pallets/flask/issues/3135", "issue_id": "#3135", "issue_summary": "Flask + gevent: possible sockets leaks (in the CLOSE_WAIT state)", "issue_description": "chubin commented on 2 Apr 2019 \u2022\nedited\n@app.route('/', defaults={'path': ''}, methods=['GET', 'POST'])\ndef catch_all(path):\n     session_id = 'session1'\n     if session_id not in sessions:\n         session = Session()\n         sessions[session_id] = session\n     else:\n         session = sessions[session_id]\n\n     session.start()\n     queue = register_queue()\n     def events():\n         try:\n             if queue:\n                 while True:\n                     for _, data in queue:\n                         yield data\n         finally:\n             # THIS POINT HERE IS NEVER BEING REACHED\n             # FOR SOME CLIENTS, becase the connection\n             # is getting stuck in the CLOSE_WAIT state\n\n             deregister_queue(queue)\n             if len(queues) == 0:\n                 session.kill()\n                 del sessions[session_id]\n\n  return Response(events(), content_type='text/event-stream')\nExpected Behavior\nAll sockets are getting closed after they are closed from the client side.\nActual Behavior\nSome sockets are getting stuck in the CLOSE_WAIT state\nafter they are closed from the client side.\nEnvironment\nPython version: Python 2.7.16rc1\nFlask version: Flask==1.0.2\nWerkzeug version: Werkzeug==0.15.1\ngevent version: gevent==1.4.0", "issue_status": "Closed", "issue_reporting_time": "2019-04-02T18:06:20Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "168": {"issue_url": "https://github.com/pallets/flask/issues/3134", "issue_id": "#3134", "issue_summary": "static_url_path doesn't work if it ends with a slash", "issue_description": "qwdm commented on 29 Mar 2019\nflask/flask/app.py\nLine 560 in a74864e\n self.static_url_path + '/<path:filename>', \nUrljoin seems like more robust way to join urls. I just tried to set static_url_path = '/' and it failed, but static_url_path = '' succeed. IMHO, this is bad and unexpected behaviour.", "issue_status": "Closed", "issue_reporting_time": "2019-03-29T14:50:07Z", "fixed_by": "#3182", "pull_request_summary": "Remove ending slash from static_url_path", "pull_request_description": "Contributor\nqil026 commented on 7 May 2019 \u2022\nedited by davidism\nDescribe what this patch does to fix the issue.\nFixes #3134 where flask fails if static_url_path ends with a slash, e.g. /foo/\nBecause the /<path:filename> param already starts with a slash, it is imperative the the static_url_path prefix does NOT end with a forward slash.", "pull_request_status": "Merged", "issue_fixed_time": "2019-05-19T04:27:31Z", "files_changed": [["2", "CHANGES.rst"], ["2", "flask/app.py"], ["2", "flask/blueprints.py"], ["11", "tests/test_basic.py"]]}, "169": {"issue_url": "https://github.com/pallets/flask/issues/3133", "issue_id": "#3133", "issue_summary": "App run with debug mode raise OSError", "issue_description": "khs123 commented on 29 Mar 2019\nExpected Behavior\nApp run with debug mode raise OSError\napp = make_app()\ncelery = make_celery(app)\nKafkaProducerExt(app)\nif __name__ == \"__main__\":\n    app.run(debug=True)\nActual Behavior\nApp run with debug mode raise OSError, when i change debug to False, everything ok\n * Environment: production\n   WARNING: Do not use the development server in a production environment.\n   Use a production WSGI server instead.\n * Debug mode: on\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n * Restarting with stat\nTraceback (most recent call last):\n  File \"app/app.py\", line 8, in <module>\n    app.run(debug=True)\n  File \"/home/khanhdv/.virtualenvs/api_jd/lib/python3.5/site-packages/flask/app.py\", line 943, in run\n    run_simple(host, port, self, **options)\n  File \"/home/khanhdv/.virtualenvs/api_jd/lib/python3.5/site-packages/werkzeug/serving.py\", line 988, in run_simple\n    run_with_reloader(inner, extra_files, reloader_interval, reloader_type)\n  File \"/home/khanhdv/.virtualenvs/api_jd/lib/python3.5/site-packages/werkzeug/_reloader.py\", line 332, in run_with_reloader\n    sys.exit(reloader.restart_with_reloader())\n  File \"/home/khanhdv/.virtualenvs/api_jd/lib/python3.5/site-packages/werkzeug/_reloader.py\", line 176, in restart_with_reloader\n    exit_code = subprocess.call(args, env=new_environ, close_fds=False)\n  File \"/usr/lib/python3.5/subprocess.py\", line 557, in call\n    with Popen(*popenargs, **kwargs) as p:\n  File \"/usr/lib/python3.5/subprocess.py\", line 947, in __init__\n    restore_signals, start_new_session)\n  File \"/usr/lib/python3.5/subprocess.py\", line 1551, in _execute_child\n    raise child_exception_type(errno_num, err_msg)\nOSError: [Errno 8] Exec format error\nEnvironment\nPython version: Python 3.5.2\nFlask version:1.0.2\nWerkzeug version:0.15.1", "issue_status": "Closed", "issue_reporting_time": "2019-03-29T03:55:22Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "170": {"issue_url": "https://github.com/pallets/flask/issues/3132", "issue_id": "#3132", "issue_summary": "Need help with getting the SID of the first connection", "issue_description": "bjtuinman commented on 28 Mar 2019\nThis issue tracker is a tool to address bugs in Flask itself.\nPlease use the #pocoo IRC channel on freenode or Stack Overflow for general\nquestions about using Flask or issues not related to Flask.\nIf you'd like to report a bug in Flask, fill out the template below. Provide\nany extra information that may be useful / related to your problem.\nIdeally, create an MCVE, which helps us\nunderstand the problem and helps check that it is not caused by something in\nyour code.\nExpected Behavior\nTell us what should happen.\nPaste a minimal example that causes the problem.\nActual Behavior\nTell us what happens instead.\nPaste the full traceback if there was an exception.\nEnvironment\nPython version:\nFlask version:\nWerkzeug version:", "issue_status": "Closed", "issue_reporting_time": "2019-03-28T14:00:27Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "171": {"issue_url": "https://github.com/pallets/flask/issues/3131", "issue_id": "#3131", "issue_summary": "can't run app with latest Werkzeug", "issue_description": "cielpy commented on 27 Mar 2019 \u2022\nedited\nThis issue tracker is a tool to address bugs in Flask itself.\nPlease use the #pocoo IRC channel on freenode or Stack Overflow for general\nquestions about using Flask or issues not related to Flask.\nIf you'd like to report a bug in Flask, fill out the template below. Provide\nany extra information that may be useful / related to your problem.\nIdeally, create an MCVE, which helps us\nunderstand the problem and helps check that it is not caused by something in\nyour code.\nExpected Behavior\nrun should work\nthis is the project can reproduce the bug\nhttps://github.com/cielpy/flask_bug\n\npipenv install\npipenv run python run.py\nActual Behavior\ncrashed\n$ pipenv run python run.py\n * Serving Flask app \"app\" (lazy loading)\n * Environment: production\n   WARNING: Do not use the development server in a production environment.\n   Use a production WSGI server instead.\n * Debug mode: on\n * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)\n * Restarting with stat\nTraceback (most recent call last):\n  File \"run.py\", line 3, in <module>\n    app.run(host='0.0.0.0', debug=True)\n  File \"/Users/xxx/Documents/workspace/flask_bug/.venv/lib/python3.6/site-packages/flask/app.py\", line 943, in run\n    run_simple(host, port, self, **options)\n  File \"/Users/xxx/Documents/workspace/flask_bug/.venv/lib/python3.6/site-packages/werkzeug/serving.py\", line 988, in run_simple\n    run_with_reloader(inner, extra_files, reloader_interval, reloader_type)\n  File \"/Users/xxx/Documents/workspace/flask_bug/.venv/lib/python3.6/site-packages/werkzeug/_reloader.py\", line 332, in run_with_reloader\n    sys.exit(reloader.restart_with_reloader())\n  File \"/Users/xxx/Documents/workspace/flask_bug/.venv/lib/python3.6/site-packages/werkzeug/_reloader.py\", line 176, in restart_with_reloader\n    exit_code = subprocess.call(args, env=new_environ, close_fds=False)\n  File \"/Users/xxx/.pyenv/versions/3.6.5/lib/python3.6/subprocess.py\", line 267, in call\n    with Popen(*popenargs, **kwargs) as p:\n  File \"/Users/xxx/.pyenv/versions/3.6.5/lib/python3.6/subprocess.py\", line 709, in __init__\n    restore_signals, start_new_session)\n  File \"/Users/xxx/.pyenv/versions/3.6.5/lib/python3.6/subprocess.py\", line 1344, in _execute_child\n    raise child_exception_type(errno_num, err_msg, err_filename)\nFileNotFoundError: [Errno 2] No such file or directory: '/Users/xxx/Documents/workspace/flask_bug/run.py': '/Users/xxx/Documents/workspace/flask_bug/run.py'\nEnvironment\nPython version: 3.6.5\nFlask version: 1.0.2\nWerkzeug version: 0.15.1\nwith Werkzeug 0.14.1, this will not happened", "issue_status": "Closed", "issue_reporting_time": "2019-03-27T10:14:35Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "172": {"issue_url": "https://github.com/pallets/flask/issues/3130", "issue_id": "#3130", "issue_summary": "Cannot differentiate between a regular text input field and a non-uploaded file", "issue_description": "senabIsShort commented on 26 Mar 2019\nIssue came up while trying to send an empty file (and filename) to an HTTPbin form.\nUsing Flask you're unable to differentiate between the content of a text field in a form and a non-uploaded file from the request object\nExample test\nUsing flask alone;\nUser @moy helped with this and prompted me to post this bug report\nfrom flask import Flask, flash, request, redirect, url_for, escape\n\napp = Flask(__name__)\n\n@app.route('/', methods=['GET', 'POST'])\ndef upload_file():\n    if request.method == 'POST':\n        return '<pre>{}</pre>'.format(escape(str(request.form) + '\\n' + str(request.files)))\n    return '''\n    <!doctype html>\n    <title>Upload new Files</title>\n    <h1>Upload new Files</h1>\n    <form method=post enctype=multipart/form-data>\n      <input name=\"normal_field\" value=\"field_value\" />\n      <input type=file name=file>\n      <input type=file name=secondfile>\n      <input type=submit value=Upload>\n    </form>\n    '''\nExpected Behavior\nSubmitting with only the first file field set in the browser,\none would expect to find :\nthe content of both file fields in the same object ;\nthe content of normal text input fields in a separate objects ;\nSo something along the lines of\nImmutableMultiDict([('normal_field', 'field_value')])\nImmutableMultiDict([('file', <FileStorage: 'tmp-rg1.xpi' ('application/x-xpinstall')>), \n                    ('secondfile', <FileStorage: '' ('...')>)\n                   ])\nActual Behavior\nSubmitting with only one file (the first field) set in the browser gives:\nImmutableMultiDict([('normal_field', 'field_value'), ('secondfile', '')])\nImmutableMultiDict([('file', <FileStorage: 'tmp-rg1.xpi' ('application/x-xpinstall')>)])\nThe first is the form's field, the second the actual files uploaded. I see no way to distinguish between an empty text field and a non-uploaded file from the request object.\nIs this behavior intended ?", "issue_status": "Closed", "issue_reporting_time": "2019-03-26T15:34:56Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "173": {"issue_url": "https://github.com/pallets/flask/issues/3127", "issue_id": "#3127", "issue_summary": "Werkzeug 0.15 breaks logging in and out example in testing docs", "issue_description": "zgoda commented on 21 Mar 2019\nThe code as shown in http://flask.pocoo.org/docs/1.0/testing/#logging-in-and-out should authenticate and log out user but with Werkzeug 0.15 it does not cause log out. Downgrading to 0.14.1 makes the code to work as expected.", "issue_status": "Closed", "issue_reporting_time": "2019-03-20T23:47:32Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "174": {"issue_url": "https://github.com/pallets/flask/issues/3126", "issue_id": "#3126", "issue_summary": "Import error in dev mode, not with wsgi virtualhost (virtualenv and vagrant)", "issue_description": "quoidautre commented on 20 Mar 2019\nExpected Behavior\nIn my Flask project (Debian 8.10 VM, vagrant and virtualenvs), I use mapnik, and it's installed with apt-get (with pip, there's a lot of errors) :\n$ sudo apt-get install libmapnik2.2 mapnik-utils python-mapnik python-mapnik2    \n\n$ dpkg -l | grep mapnik\nii  libmapnik2.2                         2.2.0+ds1-7+b2                     amd64        C++/Python toolkit for developing GIS applications (libraries)\nii  mapnik-utils                         2.2.0+ds1-7+b2                     amd64        C++/Python toolkit for developing GIS applications (utilities)\nii  python-mapnik                        2.2.0+ds1-7+b2                     amd64        C++/Python toolkit for developing GIS applications (Python)\nii  python-mapnik2                       2.2.0+ds1-7                        all          C++/Python toolkit for developing GIS applications (dummy)\nI use an apache's virtualhost :\n<VirtualHost *:80>\n        ServerName vm.my_app\n        DocumentRoot /var/www/my_app/my_app\n        WSGIDaemonProcess flask_my_app user=www-data group=www-data python-path=/var/www/my_app/my_app:/home/vagrant/.virtualenvs/my_app/lib/python2.7/site-packages display-name=%{GROUP}\n        WSGIProcessGroup flask_my_app\n        WSGIScriptAlias / /var/www/my_app/my_app/flask_my_app/flask_my_app.wsgi\n        WSGIApplicationGroup %{GLOBAL}\n        WSGIPassAuthorization on\n        WSGIScriptReloading On\n\n        Alias /site_media/ /var/www/my_app/my_app/site_media/\n        Alias /media/ /var/www/my_app/my_app/media/\n        Alias /static/ /var/www/my_app/my_app/static/\n        AliasMatch /([/]*\\.css) /var/www/my_app/my_app/static/css/$1\n\n        <Directory /var/www/my_app/my_app>\n            Order allow,deny\n            Allow from all\n            Require all granted\n        </Directory>\n\n        <Directory /var/www/my_app/my_app/flask_my_app>\n            Order allow,deny\n            Allow from all\n            Require all granted\n        </Directory>\n\n</VirtualHost>\nOk, it's fine..., except that I must add some characters in the wsgi file when I change my code :(\nAnd, so here the error :\n(No module named mapnik --> <type 'exceptions.ImportError'> => \nTraceback (most recent call last): \nFile \"/var/www/my_app/my_app/flask_my_app/views.py\", line 202, in zonesmeteo t = importlib.import_module('cron_dept_treatments.%s' % dept_code) \nFile \"/usr/lib/python2.7/importlib/__init__.py\", line 37, in import_module __import__(name) \nFile \"/var/www/my_app/my_app/cron_dept_treatments/20.py\", line 17, in <module> import mapnik ImportError: No module named mapnik )\n(my_env)    \n$ python\nPython 2.7.12 (default, Nov 12 2018, 14:36:49)\n[GCC 5.4.0 20160609] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import flask\n>>> flask.__path__\n['/home/vagrant/.virtualenvs/my_app/local/lib/python2.7/site-packages/flask']\n>>> import mapnik\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nImportError: No module named mapnik\n>>> quit()\n\n(my_env)\n$ deactivate\n\n$ python\nPython 2.7.9 (default, Sep 25 2018, 20:42:16)\n[GCC 4.9.2] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import mapnik\n>>> mapnik.__path__\n['/usr/lib/python2.7/dist-packages/mapnik']\n>>>\nEnvironment\nPython version: 2.7\nFlask version: 1.0.2\nWerkzeug version: 0.14.1\nThanks\nF.", "issue_status": "Closed", "issue_reporting_time": "2019-03-20T13:15:54Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "175": {"issue_url": "https://github.com/pallets/flask/issues/3125", "issue_id": "#3125", "issue_summary": "Use Werkzeug's JSON mixin", "issue_description": "Member\ndavidism commented on 20 Mar 2019\npallets/werkzeug#1445 moved Flask's JSONMixin to Werkzeug. Flask should now use Werkzeug's version, with some overrides. Will need to bump minimum Werkzeug version.\n1", "issue_status": "Closed", "issue_reporting_time": "2019-03-20T00:20:13Z", "fixed_by": "#3181", "pull_request_summary": "Use Werkzeug's JSONMixin class (moved from Flask) and update tests", "pull_request_description": "Contributor\nEtiennePelletier commented on 7 May 2019\nFixes #3125\nWorked on with @seawolf42\nRemove Flask's JSONMixin class to use Werkzeug's, which in version >=0.15 imported Flask's JSONMixin.\nUpdate minimum Werkzeug version to >=0.15\nRemove one test that no longer applies (referencing app's debug mode - not applicable in Werkzeug environment)\nUpdate two test cases to remove app custom encoder and decoder and instead compare raw responses.", "pull_request_status": "Merged", "issue_fixed_time": "2019-05-19T04:10:12Z", "files_changed": [["7", "CHANGES.rst"], ["90", "flask/wrappers.py"], ["2", "setup.py"], ["48", "tests/test_helpers.py"], ["2", "tox.ini"]]}, "176": {"issue_url": "https://github.com/pallets/flask/issues/3123", "issue_id": "#3123", "issue_summary": "Response header filename dynamic value", "issue_description": "deepakchandra00 commented on 18 Mar 2019 \u2022\nedited by davidism\nreturn Response(\n            csv, \n            mimetype=\"text/csv\",\n            headers={\"Content-disposition\":\n                    \"attachment; filename={{**here i want to dynamic variable**}}\"})\n2", "issue_status": "Closed", "issue_reporting_time": "2019-03-18T13:29:15Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "177": {"issue_url": "https://github.com/pallets/flask/issues/3122", "issue_id": "#3122", "issue_summary": "Basic example with Flask -routing does not work", "issue_description": "biswala commented on 14 Mar 2019\nThis issue tracker is a tool to address bugs in Flask itself.\nPlease use the #pocoo IRC channel on freenode or Stack Overflow for general\nquestions about using Flask or issues not related to Flask.\nIf you'd like to report a bug in Flask, fill out the template below. Provide\nany extra information that may be useful / related to your problem.\nIdeally, create an MCVE, which helps us\nunderstand the problem and helps check that it is not caused by something in\nyour code.\nExpected Behavior\nTell us what should happen.\nPaste a minimal example that causes the problem.\nActual Behavior\nTell us what happens instead.\nPaste the full traceback if there was an exception.\nEnvironment\nPython version:\nFlask version:\nWerkzeug version:", "issue_status": "Closed", "issue_reporting_time": "2019-03-14T08:10:59Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "178": {"issue_url": "https://github.com/pallets/flask/issues/3120", "issue_id": "#3120", "issue_summary": "\u9047\u5230\u4e00\u4e9bpipenv \u5b89\u88c5\u95ee\u9898", "issue_description": "JerryWuGitHub commented on 11 Mar 2019\n\u5b89\u88c5\u865a\u62df\u73af\u5883\u7684\u65f6\u5019\uff0c\u62a5\u4e86\u5982\u4e0b\u9519\u8bef\uff0c\u8bf7\u95ee\u6709\u4ec0\u4e48\u529e\u6cd5\u89e3\u51b3\uff0cpipfile\u91cc\u9762\u7684url\u5df2\u7ecf\u5931\u6548\u4e86\uff0c\u662f\u5426\u6709\u65b0\u7684\u53ef\u63d0\u4f9b\u4e00\u4e0b\uff1f\nD:\\personal-study\\helloflask>pipenv install\nCreating a virtualenv for this project...\nPipfile: D:\\personal-study\\helloflask\\Pipfile\nUsing c:\\python27\\python.exe (None) to create virtualenv...\nTraceback (most recent call last):\nFile \"c:\\python27\\lib\\runpy.py\", line 162, in _run_module_as_main\n\"main\", fname, loader, pkg_name)\nFile \"c:\\python27\\lib\\runpy.py\", line 72, in _run_code\nexec code in run_globals", "issue_status": "Closed", "issue_reporting_time": "2019-03-11T13:16:24Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "179": {"issue_url": "https://github.com/pallets/flask/issues/3119", "issue_id": "#3119", "issue_summary": "hello can i use the cassandra nosql database in my flask application?", "issue_description": "a108483 commented on 11 Mar 2019\nif i can use the cassandra ,so how to do it?", "issue_status": "Closed", "issue_reporting_time": "2019-03-11T08:03:33Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "180": {"issue_url": "https://github.com/pallets/flask/issues/3117", "issue_id": "#3117", "issue_summary": "Docs/Config.rst - Configuring From Environment Variables has an invalid code snippet", "issue_description": "Contributor\nJBonser commented on 9 Mar 2019\nExpected Behavior\nIn the docs/config.rst#configuring-from-environment-variables\nThere is a code snippet that should get the Debug config value from the DEBUG environment variable.\nActual Behavior\nThe code snippet for getting the Debug value from an environment variable produces an error.\nHere is a minimal example:\nimport os\n\nENVIRONMENT_DEBUG = os.environ.get(\"DEBUG\", default=False)\nif ENVIRONMENT_DEBUG.lower() in (\"f\", \"false\"):\n    ENVIRONMENT_DEBUG = False\nThis produces the error:\nTraceback (most recent call last):\n  File \"simple_test.py\", line 4, in <module>\n    if ENVIRONMENT_DEBUG.lower() in (\"f\", \"false\"):\nAttributeError: 'bool' object has no attribute 'lower'\nEnvironment\nPython version: Python 3.7.0\nFlask version: N/A\nWerkzeug version: N/A\nAnalysis\nThis is due to the default value for the os.environ.get being set to a bool value, which you cannot use the .lower() function on.", "issue_status": "Closed", "issue_reporting_time": "2019-03-09T00:33:48Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "181": {"issue_url": "https://github.com/pallets/flask/issues/3116", "issue_id": "#3116", "issue_summary": "DeprecationWarning: python 3.8 will not work", "issue_description": "ak-ambi commented on 8 Mar 2019\nI know that problems listed below are solved in both jinja2 and werkzeug repos, but they are not released. Without new releases of both, users will be stuck with python 3.7.\nCurrently running pytest in my projects produces following warnings:\n============================== warnings summary ===============================\nC:\\Program Files\\Python37\\lib\\site-packages\\werkzeug\\datastructures.py:16\nC:\\Program Files\\Python37\\lib\\site-packages\\werkzeug\\datastructures.py:16\nC:\\Program Files\\Python37\\lib\\site-packages\\werkzeug\\datastructures.py:16\n  C:\\Program Files\\Python37\\lib\\site-packages\\werkzeug\\datastructures.py:16: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\n    from collections import Container, Iterable, MutableSet\n\nC:\\Program Files\\Python37\\lib\\site-packages\\jinja2\\utils.py:485\n  C:\\Program Files\\Python37\\lib\\site-packages\\jinja2\\utils.py:485: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\n    from collections import MutableMapping\n\nC:\\Program Files\\Python37\\lib\\site-packages\\jinja2\\runtime.py:318\n  C:\\Program Files\\Python37\\lib\\site-packages\\jinja2\\runtime.py:318: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\n    from collections import Mapping\nExpected Behavior\nNo warning preventing usage of python 3.8 should be displayed.\nActual Behavior\nWarnings pasted above are displayed ;)\nEnvironment\nPython version: 3.7\nFlask version: 1.0.2\nWerkzeug version: 0.14.1\nJinja2 version: 2.10\n1", "issue_status": "Closed", "issue_reporting_time": "2019-03-08T14:03:41Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "182": {"issue_url": "https://github.com/pallets/flask/issues/3115", "issue_id": "#3115", "issue_summary": "flask run command won't run python files with .wsgi extension (or any other than .py)", "issue_description": "koyuch commented on 7 Mar 2019\nDescription\nIf you have python file with wsgi extension (or any other than .py), you can't execute flask run command. (When you execute the script with .run() in it, it works fine).\nExample\nFor example when you create file app.wsgi with simple content:\nfrom flask import Flask\napp = Flask(__name__)\nAnd of course you set the environment variable FLASK_APP=app.wsgi\nyou actually get:\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/flask/cli.py\", line 325, in __call__\n    self._flush_bg_loading_exception()\n  File \"/usr/local/lib/python2.7/dist-packages/flask/cli.py\", line 313, in _flush_bg_loading_exception\n    reraise(*exc_info)\n  File \"/usr/local/lib/python2.7/dist-packages/flask/cli.py\", line 302, in _load_app\n    self._load_unlocked()\n  File \"/usr/local/lib/python2.7/dist-packages/flask/cli.py\", line 317, in _load_unlocked\n    self._app = rv = self.loader()\n  File \"/usr/local/lib/python2.7/dist-packages/flask/cli.py\", line 372, in load_app\n    app = locate_app(self, import_name, name)\n  File \"/usr/local/lib/python2.7/dist-packages/flask/cli.py\", line 246, in locate_app\n    'Could not import \"{name}\".'.format(name=module_name)\nNoAppException: Could not import \"app.wsgi\".\nI think it's essential to run also wsgi files (you can run \"default\" wsgi.py, but not anything with .wsgi in the end)\nEnvironment\nPython version: 2.7.15rc1\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2019-03-07T13:28:17Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "183": {"issue_url": "https://github.com/pallets/flask/issues/3114", "issue_id": "#3114", "issue_summary": "flask process block twisted", "issue_description": "yiwong commented on 6 Mar 2019 \u2022\nedited\nflask01.py\n@app.route('/')\ndef hello_world1():\nclient = papirpcclient01.RPCMSG()\ndata = {'jsonrpc': '2.0', 'method': 'get_bdevs', 'id': 1}\ntime.sleep(15)\nrecvdata = json.dumps(client.receivemsg())\nprint(\"route1:\", recvdata)\nreturn Response(recvdata, mimetype='application/json')\n@app.route('/1')\ndef papihello():\nprint(\"/route1\")\npapirpcclient01.reactor.run()\n#papirpcclient01.reactor.run(installSignalHandlers=0)\nreturn \"reactor.run\"+'\\n'\npapirpcclient01.py\nclass RPCClient(protocol.Protocol):\ndef connectionMade(self):\nprint(\"connectionMade:\")\n\ndef dataReceived(self, data):\n    \"As soon as any data is received, write it back.\"\n    #print(\"Server said:\", data)\n    log.msg(\"dataReceived=:\"+data)\nresponse = json.loads(data)\n#recvmsg.append(response)\n    reactor.callInThread(sendtoqueue,response)\n\ndef connectionLost(self, reason):\n    print(\"connection lost\")\nclass RPCClientFactory(protocol.ClientFactory):\ndef __init__(self):\n self.deferred=defer.Deferred()\n     self.protocol = None\n\ndef startedConnecting(self, connector):\n print('Started to connect.')\n\ndef buildProtocol(self, addr):\n     print('Connected.')\n     self.protocol = RPCClient()\n     return self.protocol\ndef clientConnectionFailed(self, connector, reason):\n     print(\"Connection failed - goodbye!\")\n self.deferred.errback(reason)\n    #reactor.stop()\n def clientConnectionLost(self, connector, reason):\n     print(\"Connection lost - goodbye!\")\n self.deferred.errback(reason)\n    #reactor.stop()\ndef Send(sendmsg):\nif factory.protocol and factory.protocol.connected:\nprint(\"send said:\", sendmsg)\nif (len(recvmsg)> 0):\nrecvmsg.pop()\nfactory.protocol.transport.write(sendmsg)\nfactory= RPCClientFactory ()\nreactor.connectTCP(host,port,factory)\npmasterconnet=factory.deferred\npmasterconnet.addCallback(connectSuccess,port)\npmasterconnet.addErrback(connectFailure,port)\nExpected Behavior\nTell us what should happen.\nrun \"curl http://127.0.0.1:5000/1\" block the flask process,but run \"curl http://127.0.0.1:5000\" still work\npls tell how to resoule it , thank you\nPaste a minimal example that causes the problem.\nActual Behavior\nTell us what happens instead.\nPaste the full traceback if there was an exception.\nEnvironment\nPython version:2.7.5\nFlask version:1.0.2\nTwisted version:18.9.0\nWerkzeug version:", "issue_status": "Closed", "issue_reporting_time": "2019-03-06T07:17:29Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "184": {"issue_url": "https://github.com/pallets/flask/issues/3110", "issue_id": "#3110", "issue_summary": "Testing with TestClient and a custom response_class calls constructor twice", "issue_description": "ekor15 commented on 3 Mar 2019\nWhen working with a custom response class the test_client calls the response class constructor, after the make_response already called the response class constructor\nThis causes a CustomResponse object to be passed to the constructor of the CustomResponse class.\nA basic example of the problem\nimport json\nfrom unittest import TestCase\n\nfrom flask import Response, Flask\nfrom hamcrest import has_entry\nfrom hamcrest.core import assert_that\nfrom hamcrest.core.core import is_\n\n\nclass TestMediaAppRestResponse(TestCase):\n\n    def setUp(self):\n        self.media_app = MyApp(__name__)\n        self.client = self.media_app.test_client()\n\n    def _test_client(self):\n        return self.media_app.test_client()\n\n    def test_rest_response__dict_register_response_class_before_test_client(self):\n        return_value = {'dict_prop': 'dict_value'}\n        self.media_app.route('/')(_make_handler_with_response(return_value))\n        self.media_app.register_response_class()\n\n        test_client = self._test_client()\n\n        response = test_client.get('/')\n        print ('will never get here')\n\n    def test_rest_response__dict_register_response_class_after_test_client(self):\n        return_value = {'dict_prop': 'dict_value'}\n\n        test_client = self._test_client()\n\n        self.media_app.register_response_class()\n        self.media_app.route('/')(_make_handler_with_response(return_value))\n\n        response = test_client.get('/')\n        assert_that(response.get_json(), has_entry('payload', is_(return_value)))\n\n\ndef _make_handler_with_response(response):\n    def wrapped_handler():\n        return response\n    return wrapped_handler\n\n\nclass MyApp(Flask):\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def register_response_class(self):\n        self.response_class = MyResponse\n\n    def make_response(self, response_value):\n        if isinstance(response_value, self.response_class):\n            return response_value\n        return self.response_class(response_value, http_status=200, code=0, message='ok')\n\n\nclass MyResponse(Response):\n    def __init__(self, payload=None, http_status: int = 200,\n                 code: int = None,\n                 message: str = '', *args, **kwargs):\n        message = message\n        code = code if code is not None else http_status\n        payload = payload\n        body_str = json.dumps({'code': code, 'message': message, 'payload': payload}, separators=(',', ':'))\n\n        super().__init__(body_str, status=http_status, mimetype='application/json', *args, **kwargs)\nExpected Behavior\nThe custom response class constructor should only be called by the make_response method\nActual Behavior\nThe constructor was called by the make_response method then by the test_client becuase the custom response class is passed to the client when it is created by the app.\nTraceback (most recent call last):\n  File \"/usr/local/Cellar/python/3.7.1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/case.py\", line 59, in testPartExecutor\n    yield\n  File \"/usr/local/Cellar/python/3.7.1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/case.py\", line 615, in run\n    testMethod()\n  File \"/Users/elirans/projects/media-framework/tests/media_framework_test/http/flask/test_media_app_rest_response_multiple_calls.py\", line 26, in test_rest_response__dict_register_response_class_before_test_client\n    response = test_client.get('/')\n  File \"/Users/elirans/projects/media-framework/run/lib/python3.7/site-packages/werkzeug/test.py\", line 830, in get\n    return self.open(*args, **kw)\n  File \"/Users/elirans/projects/media-framework/run/lib/python3.7/site-packages/flask/testing.py\", line 200, in open\n    follow_redirects=follow_redirects\n  File \"/Users/elirans/projects/media-framework/run/lib/python3.7/site-packages/werkzeug/test.py\", line 822, in open\n    response = self.response_wrapper(*response)\n  File \"/Users/elirans/projects/media-framework/tests/media_framework_test/http/flask/test_media_app_rest_response_multiple_calls.py\", line 72, in __init__\n    body_str = json.dumps({'code': code, 'message': message, 'payload': payload}, separators=(',', ':'))\n  File \"/usr/local/Cellar/python/3.7.1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/__init__.py\", line 238, in dumps\n    **kw).encode(obj)\n  File \"/usr/local/Cellar/python/3.7.1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/encoder.py\", line 199, in encode\n    chunks = self.iterencode(o, _one_shot=True)\n  File \"/usr/local/Cellar/python/3.7.1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/encoder.py\", line 257, in iterencode\n    return _iterencode(o, 0)\n  File \"/usr/local/Cellar/python/3.7.1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/encoder.py\", line 179, in default\n    raise TypeError(f'Object of type {o.__class__.__name__} '\nTypeError: Object of type Headers is not JSON serializable\nEnvironment\nPython version: 3.7.1\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2019-03-02T20:33:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "185": {"issue_url": "https://github.com/pallets/flask/issues/3107", "issue_id": "#3107", "issue_summary": "Due of database access : \"Truncated or oversized response headers received from daemon process...\"", "issue_description": "quoidautre commented on 28 Feb 2019 \u2022\nedited\nHi,\nI've post this issue #3090, past days but, for now, I've some news :).\nSo, I've the same error Truncated or oversized response headers received from daemon process 'my_app': /var/www/python/flask/first_app/my_app/my_app.wsgi when I access the database !.\nIt's works when I comment the 2 lines of routes.py, and it's work when I use the flask run --host=0.0.0.0 --port=5000 command.\ndef index():\n    #d = Departement()\n    #query =  d.query.all()\nHere the tree of my application :\n$ tree ..\n..\n\u2514\u2500\u2500 first_app\n    \u251c\u2500\u2500 my_app\n    \u2502   \u251c\u2500\u2500 config.py\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 models.py\n    \u2502   \u251c\u2500\u2500 my_app.wsgi\n    \u2502   \u251c\u2500\u2500 routes.py\n    \u2502   \u2514\u2500\u2500 templates\n    \u2502       \u251c\u2500\u2500 base.html\n    \u2502       \u2514\u2500\u2500 index.html\n    \u2514\u2500\u2500 my_app.py\ninit.py :\nfrom flask import Flask\nfrom config import Config\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_migrate import Migrate\n\nmy_app = Flask(__name__)\nmy_app.config.from_object(Config)\n\ndb = SQLAlchemy(my_app)\nmigrate = Migrate(my_app, db)\n\nfrom my_app import routes,models\nroutes.py :\nfrom flask import render_template, flash, redirect, url_for\nfrom my_app import my_app\nfrom my_app.models import Departement\n\n@my_app.route('/')\n@my_app.route('/index')\ndef index():\n    d = Departement()\n    query =  d.query.all()\n    \n    return render_template('index.html', title='Home', departements=query)\nmy_app.py :\nfrom my_app import my_app\nmodels.py :\nfrom my_app import db\n\nclass Departement(db.Model):\n    __tablename__ = \"departements\"\n    code_dept = db.Column(db.Integer, primary_key=True)\n    nom_dept = db.Column(db.String(50), index=True)\n    passwd  = db.Column(db.String(50))\n    \n    def __repr__(self):\n        return '<Departement(s) : {0}, {1}, {2}>'.format(self.code_dept, self.nom_dept,self.passwd)    \nconfig.py :\nimport os\nbasedir = os.path.abspath(os.path.dirname(__file__))\n\nclass Config(object):\n    SECRET_KEY = os.environ.get('SECRET_KEY') or 'you-will-never-guess'\n    \n    DATABASE_CONFIG = {\n        'username':'***',\n        'password':'***',\n        'host':'localhost',\n        'database':'***'\n        }\n\n    SQLALCHEMY_DATABASE_URI = 'postgresql+psycopg2://' + DATABASE_CONFIG['username'] + ':' + DATABASE_CONFIG['password'] + '@' + DATABASE_CONFIG['host'] + '/' + DATABASE_CONFIG['database']\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\nmy_app.wsgi :\nfrom my_app import my_app as application\nThe templates (for testing)\nbase.html :\n<html>\n    <head>\n      {% if title %}\n      <title>{{ title }} - My App</title>\n      {% else %}\n      <title>Welcome to My App!</title>\n      {% endif %}\n    </head>\n    <body>\n        <div>App :: \n            <a href=\"{{ url_for('index') }}\">Home</a>\n        </div>\n        <hr>\n        {% with messages = get_flashed_messages() %}\n        {% if messages %}\n        <ul>\n            {% for message in messages %}\n            <li>{{ message }}</li>\n            {% endfor %}\n        </ul>\n        {% endif %}\n        {% endwith %}\n        {% block content %}{% endblock %}\n    </body>\n</html>\nindex.html :\n{% extends \"base.html\" %}\n\n{% block content %}\n    {% for d in departements %}\n    <div><p>{{ d.code_dept }} => <b>{{ d.nom_dept }}</b></p></div>\n    {% endfor %}\n{% endblock %}\nthe vhost :\n<VirtualHost *:80>\n      ServerName vm.basicflaskapp\n      DocumentRoot /var/www/python/flask/first_app\n      LogLevel info\n\n       WSGIDaemonProcess my_app user=www-data group=www-data python-path=/var/www/python/flask/first_app:/home/vagrant/.virtualenvs/first_app_flask/lib/python2.7/site-packages\n       WSGIScriptAlias / /var/www/python/flask/first_app/my_app/my_app.wsgi\n\n        <Directory /var/www/python/flask/first_app>\n            Require all granted\n        </Directory>\n\n        <Directory /var/www/python/flask/first_app/my_app>\n            WSGIProcessGroup my_app\n            WSGIApplicationGroup %{GLOBAL}\n            Require all granted\n        </Directory>\n\n        ErrorLog ${APACHE_LOG_DIR}/first_app_flask-error.log\n        CustomLog ${APACHE_LOG_DIR}/first_app_flask-access.log combined\n</VirtualHost>\nActual Behavior\n[Thu Feb 28 14:34:43.850678 2019] [mpm_worker:notice] [pid 4932:tid 140038462543744] AH00297: SIGUSR1 received.  Doing graceful restart\n[Thu Feb 28 14:34:43.908680 2019] [wsgi:warn] [pid 4932:tid 140038462543744] mod_wsgi: Compiled for Python/2.7.11+.\n[Thu Feb 28 14:34:43.908700 2019] [wsgi:warn] [pid 4932:tid 140038462543744] mod_wsgi: Runtime using Python/2.7.12.\n[Thu Feb 28 14:34:43.909245 2019] [mpm_worker:notice] [pid 4932:tid 140038462543744] AH00292: Apache/2.4.38 (Ubuntu) OpenSSL/1.1.1a mod_wsgi/4.5.2 Python/2.7.12 configured -- resuming normal operations\n[Thu Feb 28 14:34:43.909293 2019] [core:notice] [pid 4932:tid 140038462543744] AH00094: Command line: '/usr/sbin/apache2'\n\n==> /var/log/apache2/first_app_flask-error.log <==\n[Thu Feb 28 14:34:43.924834 2019] [wsgi:info] [pid 20347:tid 140038462543744] mod_wsgi (pid=20347): Attach interpreter ''.\n[Thu Feb 28 14:34:43.925160 2019] [wsgi:info] [pid 20347:tid 140038462543744] mod_wsgi (pid=20347): Adding '/var/www/python/flask/first_app' to path.\n[Thu Feb 28 14:34:43.929157 2019] [wsgi:info] [pid 20347:tid 140038462543744] mod_wsgi (pid=20347): Adding '/home/vagrant/.virtualenvs/first_app_flask/lib/python2.7/site-packages' to path.\n[Thu Feb 28 14:34:45.846737 2019] [wsgi:info] [pid 20347:tid 140038331447040] [remote 192.168.56.1:0] mod_wsgi (pid=20347, process='my_app', application=''): Loading WSGI script '/var/www/python/flask/first_app/my_app/my_app.wsgi'.\n[Thu Feb 28 14:34:46.273215 2019] [wsgi:error] [pid 20347:tid 140038331447040] /home/vagrant/.virtualenvs/first_app_flask/lib/python2.7/site-packages/psycopg2/__init__.py:144: UserWarning: The psycopg2 wheel package will be renamed from release 2.8; in order to keep installing from binary please use \"pip install psycopg2-binary\" instead. For details see: <http://initd.org/psycopg/docs/install.html#binary-install-from-pypi>.\n[Thu Feb 28 14:34:46.273426 2019] [wsgi:error] [pid 20347:tid 140038331447040]   \"\"\")\n[Thu Feb 28 14:34:46.390437 2019] [wsgi:error] [pid 20350:tid 140038213990144] [client 192.168.56.1:29516] Truncated or oversized response headers received from daemon process 'my_app': /var/www/python/flask/first_app/my_app/my_app.wsgi\n\n==> /var/log/apache2/first_app_flask-access.log <==\n192.168.56.1 - - [28/Feb/2019:14:34:45 +0100] \"GET / HTTP/1.1\" 500 613 \"-\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0\"\n\n==> /var/log/apache2/error.log <==\n[Thu Feb 28 14:34:46.912778 2019] [core:notice] [pid 4932:tid 140038462543744] AH00051: child pid 20347 exit signal Segmentation fault (11), possible coredump in /etc/apache2\n\n==> /var/log/apache2/first_app_flask-error.log <==\n[Thu Feb 28 14:34:46.919359 2019] [wsgi:info] [pid 20442:tid 140038462543744] mod_wsgi (pid=20442): Attach interpreter ''.\n[Thu Feb 28 14:34:46.919460 2019] [wsgi:info] [pid 20442:tid 140038462543744] mod_wsgi (pid=20442): Adding '/var/www/python/flask/first_app' to path.\n[Thu Feb 28 14:34:46.920621 2019] [wsgi:info] [pid 20442:tid 140038462543744] mod_wsgi (pid=20442): Adding '/home/vagrant/.virtualenvs/first_app_flask/lib/python2.7/site-packages' to path\nEnvironment\n$ pip freeze\nalembic==1.0.7\nClick==7.0\nFlask==1.0.2\nFlask-Migrate==2.4.0\nFlask-SQLAlchemy==2.3.2\nFlask-WTF==0.14.2\nitsdangerous==1.1.0\nJinja2==2.10\nMako==1.0.7\nMarkupSafe==1.1.1\npsycopg2==2.7.7\npython-dateutil==2.8.0\npython-dotenv==0.10.1\npython-editor==1.0.4\nsix==1.12.0\nSQLAlchemy==1.2.18\nWerkzeug==0.14.1\nWTForms==2.2.1\n\n$ apachectl -v\nServer version: Apache/2.4.38 (Ubuntu)\nServer built:   2019-02-11T07:27:00\n\n$ uname -a\nLinux vm 4.4.0-45-generic #66-Ubuntu SMP Wed Oct 19 14:12:37 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux\n\n$ cat /etc/lsb-release\nDISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=16.04\nDISTRIB_CODENAME=xenial\nDISTRIB_DESCRIPTION=\"Ubuntu 16.04.6 LTS\"\nHave you an idea please ? :)\nThanks\nF.", "issue_status": "Closed", "issue_reporting_time": "2019-02-28T14:09:47Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "186": {"issue_url": "https://github.com/pallets/flask/issues/3106", "issue_id": "#3106", "issue_summary": "Please adds init-db in readme", "issue_description": "MagicGary commented on 26 Feb 2019\nReadMe\nplease add flask init-db right before flask run section in the tutorial README.", "issue_status": "Closed", "issue_reporting_time": "2019-02-26T13:47:56Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "187": {"issue_url": "https://github.com/pallets/flask/issues/3105", "issue_id": "#3105", "issue_summary": "Allow passing cert and key to `flask run` via env var / .flaskenv", "issue_description": "Member\njab commented on 26 Feb 2019 \u2022\nedited\nCurrently the only way to pass cert and key to flask run is via CLI options. Would you accept a patch to allow passing via FLASK_RUN_CERT / KEY env vars (settable in .flaskenv) as well? This would make these consistent with FLASK_RUN_HOST / PORT.", "issue_status": "Closed", "issue_reporting_time": "2019-02-26T06:14:13Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "188": {"issue_url": "https://github.com/pallets/flask/issues/3099", "issue_id": "#3099", "issue_summary": "Using Flask as a back end system for reviews?", "issue_description": "GiacomoLaw commented on 18 Feb 2019 \u2022\nedited\nhttps://www.freecodecamp.org/forum/t/adding-a-dynamic-reviews-section-to-a-website/259492/3?u=dipperdolphin\nIs there a guide to do this? I'd like to add it to a HTML website so people can leave reviews.\nThanks", "issue_status": "Closed", "issue_reporting_time": "2019-02-17T20:05:34Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "189": {"issue_url": "https://github.com/pallets/flask/issues/3098", "issue_id": "#3098", "issue_summary": "The flask interface does not print request information,Return data directly", "issue_description": "Ericliu68 commented on 13 Feb 2019 \u2022\nedited\nHappened twice,The requester can receive my return data, but there is nothing printed on my side.\n@app.route('/appdata', methods=['POST'])\ndef appdata():\nlogging.info(request)\nimport json\nlogging.info(request.values.to_dict())\na = request.values.to_dict()['msg']\ndict1 = json.loads(a)\nfrom datetime import datetime\ndict1['resivetime'] = datetime.now()\nlogging.info(dict1)\nqueues.put(dict1)\nreturn '200'\nThe requester will have this data, the recipient, as above, did not print any logs, and appeared almost once a week or so.And There is no error message here.", "issue_status": "Closed", "issue_reporting_time": "2019-02-13T07:51:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "190": {"issue_url": "https://github.com/pallets/flask/issues/3097", "issue_id": "#3097", "issue_summary": "The flask interface does not print request information,Return data directly", "issue_description": "Ericliu68 commented on 13 Feb 2019 \u2022\nedited\nHapped twice,The requester can receive my return data, but there is nothing printed on my side.\n@app.route('/appdata', methods=['POST'])\ndef appdata():\nlogging.info(request)\nimport json\nlogging.info(request.values.to_dict())\na = request.values.to_dict()['msg']\ndict1 = json.loads(a)\nfrom datetime import datetime\ndict1['resivetime'] = datetime.now()\nlogging.info(dict1)\nqueues.put(dict1)\nreturn '200'\nThe requester will have this data, but the recipient, as above, did not print any logs, and appeared almost once a week or so.And There is no error message here.", "issue_status": "Closed", "issue_reporting_time": "2019-02-13T07:27:59Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "191": {"issue_url": "https://github.com/pallets/flask/issues/3095", "issue_id": "#3095", "issue_summary": "\"flask run\" should accept a command line option for FLASK_APP", "issue_description": "Member\njab commented on 10 Feb 2019 \u2022\nedited\nCurrently, flask run can be controlled via one set of environment variables and a different set of command line options. In some cases there is overlap (e.g. FLASK_RUN_PORT and --port), but in other cases there is not.\nThe most problematic example is the flask app object. The only way to specify this explicitly is via the FLASK_APP environment variable; there is no command line option you can pass flask run to specify this instead.\n(This is especially asymmetrical when using Flask with e.g. gunicorn, where the wsgi app must be passed via required positional command line argument.)\nWould you accept a patch to allow passing a command line option for FLASK_APP? Being forced to use an environment variable to set this value is less than ideal, as it forces writing this important value out-of-band into a shared mutable global namespace (the environment), rather than being able to pass it directly in-band to flask run.", "issue_status": "Closed", "issue_reporting_time": "2019-02-10T17:38:34Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "192": {"issue_url": "https://github.com/pallets/flask/issues/3094", "issue_id": "#3094", "issue_summary": "SOAP requests cause 500's in Flask code", "issue_description": "ddevault commented on 9 Feb 2019\nTraceback:\nTraceback (most recent call last):\n  File \"/usr/lib/python3.6/site-packages/flask/app.py\", line 1982, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/usr/lib/python3.6/site-packages/flask/app.py\", line 1614, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"/usr/lib/python3.6/site-packages/flask/app.py\", line 1517, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/usr/lib/python3.6/site-packages/flask/_compat.py\", line 33, in reraise\n    raise value\n  File \"/usr/lib/python3.6/site-packages/flask/app.py\", line 1610, in full_dispatch_request\n    rv = self.preprocess_request()\n  File \"/usr/lib/python3.6/site-packages/flask/app.py\", line 1831, in preprocess_request\n    rv = func()\n  File \"/usr/lib/python3.6/site-packages/srht/flask.py\", line 197, in _csrf_check\n    view = \"{0}.{1}\".format(view.__module__, view.__name__)\nAttributeError: 'NoneType' object has no attribute '__module__'\nRequest body:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?><soap:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\nxmlns=\"http://microsoft.com/webservices/\"><soap:Body><QueryNodes></QueryNodes></soap:Body></soap:Envelope>\nRequest headers:\nHost: 127.0.0.1:5001\nConnection: close\nContent-Length: 313\nAccept: */*\nUser-Agent: git/git-import/0.4.3\nSoapaction: \"http://microsoft.com/webservices/QueryNodes\"\nContent-Type: text/xml; charset=UTF-8", "issue_status": "Closed", "issue_reporting_time": "2019-02-09T15:15:08Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "193": {"issue_url": "https://github.com/pallets/flask/issues/3093", "issue_id": "#3093", "issue_summary": "custom error handler not being called for HTTP error 412", "issue_description": "GiancarloFusiello commented on 7 Feb 2019\nI have created a custom error_handler function like so:\ndef http_error_handler(error: HTTPException) -> Response:\n    # rest of the code here\nI then register all default http errors to use the above handler like so:\nfrom werkzeug.exceptions import default_exceptions\n\nfor code in default_exceptions:\n    app.errorhandler(code)(http_error_handler)\nI can confirm that my handler function has registered for all http errors in default_exceptions:\napp.error_handler_spec\n{None: {400: {<class 'werkzeug.exceptions.BadRequest'>: <function http_error_handler at 0x7f0d3cd688c8>},\n        401: {<class 'werkzeug.exceptions.Unauthorized'>: <function http_error_handler at 0x7f0d3cd688c8>},\n        403: {<class 'werkzeug.exceptions.Forbidden'>: <function http_error_handler at 0x7f0d3cd688c8>},\n        404: {<class 'werkzeug.exceptions.NotFound'>: <function http_error_handler at 0x7f0d3cd688c8>},\n        405: {<class 'werkzeug.exceptions.MethodNotAllowed'>: <function http_error_handler at 0x7f0d3cd688c8>},\n        406: {<class 'werkzeug.exceptions.NotAcceptable'>: <function http_error_handler at 0x7f0d3cd688c8>},\n        408: {<class 'werkzeug.exceptions.RequestTimeout'>: <function http_error_handler at 0x7f0d3cd688c8>},\n        409: {<class 'werkzeug.exceptions.Conflict'>: <function http_error_handler at 0x7f0d3cd688c8>},\n        410: {<class 'werkzeug.exceptions.Gone'>: <function http_error_handler at 0x7f0d3cd688c8>},\n        411: {<class 'werkzeug.exceptions.LengthRequired'>: <function http_error_handler at 0x7f0d3cd688c8>},\n        412: {<class 'werkzeug.exceptions.PreconditionFailed'>: <function http_error_handler at 0x7f0d3cd688c8>},\n        413: {<class 'werkzeug.exceptions.RequestEntityTooLarge'>: <function http_error_handler at 0x7f0d3cd688c8>},\n        414: {<class 'werkzeug.exceptions.RequestURITooLarge'>: <function http_error_handler at 0x7f0d3cd688c8>},\n        415: {<class 'werkzeug.exceptions.UnsupportedMediaType'>: <function http_error_handler at 0x7f0d3cd688c8>},\n        416: {<class 'werkzeug.exceptions.RequestedRangeNotSatisfiable'>: <function http_error_handler at 0x7f0d3cd688c8>},\n        417: {<class 'werkzeug.exceptions.ExpectationFailed'>: <function http_error_handler at 0x7f0d3cd688c8>},\n        418: {<class 'werkzeug.exceptions.ImATeapot'>: <function http_error_handler at 0x7f0d3cd688c8>},\n        422: {<class 'werkzeug.exceptions.UnprocessableEntity'>: <function http_error_handler at 0x7f0d3cd688c8>},\n        423: {<class 'werkzeug.exceptions.Locked'>: <function http_error_handler at 0x7f0d3cd688c8>},\n        428: {<class 'werkzeug.exceptions.PreconditionRequired'>: <function http_error_handler at 0x7f0d3cd688c8>},\n        429: {<class 'werkzeug.exceptions.TooManyRequests'>: <function http_error_handler at 0x7f0d3cd688c8>},\n        431: {<class 'werkzeug.exceptions.RequestHeaderFieldsTooLarge'>: <function http_error_handler at 0x7f0d3cd688c8>},\n        451: {<class 'werkzeug.exceptions.UnavailableForLegalReasons'>: <function http_error_handler at 0x7f0d3cd688c8>},\n        500: {<class 'werkzeug.exceptions.InternalServerError'>: <function http_error_handler at 0x7f0d3cd688c8>},\n        501: {<class 'werkzeug.exceptions.NotImplemented'>: <function http_error_handler at 0x7f0d3cd688c8>},\n        502: {<class 'werkzeug.exceptions.BadGateway'>: <function http_error_handler at 0x7f0d3cd688c8>},\n        503: {<class 'werkzeug.exceptions.ServiceUnavailable'>: <function http_error_handler at 0x7f0d3cd688c8>},\n        504: {<class 'werkzeug.exceptions.GatewayTimeout'>: <function http_error_handler at 0x7f0d3cd688c8>},\n        505: {<class 'werkzeug.exceptions.HTTPVersionNotSupported'>: <function http_error_handler at 0x7f0d3cd688c8>}}}\nI'm then testing each error using an endpoint that accepts requests like so /error?code=404 which in tern calls flask.abort(404) that then calls http_error_handler I created.\nI noticed that all http errors are calling my custom error function except for http error 412 even though you can see it has registered above. Any ideas?\nSide note, if there is a better way of testing custom error pages then please advise.\nThanks in advance.\nEnvironment\nPython version: 3.7.2-alpine3.8 docker image\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2019-02-07T14:50:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "194": {"issue_url": "https://github.com/pallets/flask/issues/3092", "issue_id": "#3092", "issue_summary": "Flask-Angular issue for Uploading file through api call", "issue_description": "akshayklr057 commented on 7 Feb 2019 \u2022\nedited by ThiefMaster\nHi team,\nFor my project, I am using Flask at server side and Angular at the client side. When I call a flask API to upload a CSV file then sometimes the file gets uploaded successfully and sometimes it throws the keyError on the file name.\nI am continuously facing this issue and have tried various methods to handle the header while calling the API, but no luck in that.\nTraceback (most recent call last):\n  File \"C:\\Users\\deepak.saini\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\flask\\app.py\", line 2309, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\deepak.saini\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\flask\\app.py\", line 2295, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\deepak.saini\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\flask_cors\\extension.py\", line 161, in wrapped_function\n    return cors_after_request(app.make_response(f(*args, **kwargs)))\n  File \"C:\\Users\\deepak.saini\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\flask_restful\\__init__.py\", line 273, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\deepak.saini\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\flask\\app.py\", line 1741, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\deepak.saini\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\flask\\_compat.py\", line 35, in reraise\n    raise value\n  File \"C:\\Users\\deepak.saini\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\flask\\app.py\", line 2292, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\deepak.saini\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\flask\\app.py\", line 1815, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\deepak.saini\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\flask_cors\\extension.py\", line 161, in wrapped_function\n    return cors_after_request(app.make_response(f(*args, **kwargs)))\n  File \"C:\\Users\\deepak.saini\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\flask_restful\\__init__.py\", line 273, in error_router\n    return original_handler(e)\n  File \"C:\\Users\\deepak.saini\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\flask\\app.py\", line 1718, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\deepak.saini\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\flask\\_compat.py\", line 35, in reraise\n    raise value\n  File \"C:\\Users\\deepak.saini\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\flask\\app.py\", line 1813, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\deepak.saini\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\flask\\app.py\", line 1799, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"D:\\6-feb\\intent-python\\src\\intent\\incident\\incidenttraining.py\", line 20, in db_insert_training_tickets\n    return IncidentTraining.db_insert_training_tickets(customer_id, dataset_name, team_name)\n  File \"D:\\6-feb\\intent-python\\src\\intent\\incident\\incidenttraining.py\", line 41, in db_insert_training_tickets\n    file = request.files['trainingData']\n  File \"C:\\Users\\deepak.saini\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\werkzeug\\datastructures.py\", line 431, in __getitem__\n    raise exceptions.BadRequestKeyError(key)\nwerkzeug.exceptions.HTTPException.wrap.<locals>.newcls: 400 Bad Request: KeyError: 'trainingData'\nError in atexit._run_exitfuncs:", "issue_status": "Closed", "issue_reporting_time": "2019-02-07T08:40:11Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "195": {"issue_url": "https://github.com/pallets/flask/issues/3091", "issue_id": "#3091", "issue_summary": "Flask-Angular issue for Uploading file through api call", "issue_description": "akshayklr057 commented on 7 Feb 2019 \u2022\nedited by ThiefMaster\nNo description provided.", "issue_status": "Closed", "issue_reporting_time": "2019-02-07T08:31:27Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "196": {"issue_url": "https://github.com/pallets/flask/issues/3090", "issue_id": "#3090", "issue_summary": "Truncated or oversized response headers received from daemon process", "issue_description": "quoidautre commented on 5 Feb 2019\nExpected Behavior :\nSubmiting a form (using flask_wtf.Form), in WSGI mod (apache 2.4)\nTell us what should happen.\nThe apache2 (2.4) log :\n[wsgi:error] [pid 13836:tid 140457635997440] [client 192.168.56.1:19524] Truncated or oversized response headers received from daemon process 'flask_myapp': /var/www/myapp/myapp/flask_myapp/flask_myapp.wsgi, referer: http://vm.myapp/\n\n==> /var/log/apache2/error.log <==\n[core:notice] [pid 13820:tid 140457840961408] AH00051: child pid 13927 exit signal Segmentation fault (11), possible coredump in /etc/apache2\nAnd my virtualhost :\n<VirtualHost *:80>\n       ServerName vm.myapp\n       #ServerAlias vm.myapp\n       DocumentRoot /var/www/myapp/myapp\n\n       WSGIDaemonProcess flask_myapp python-path=/var/www/myapp/myapp:/home/vagrant/.virtualenvs/myapp/lib/python2.7/site-packages\n       WSGIProcessGroup flask_myapp\n       WSGIScriptAlias / /var/www/myapp/myapp/flask_myapp/flask_myapp.wsgi\n       WSGIApplicationGroup %{GLOBAL}\n\n        Alias /favicon.ico /var/www/myapp/myapp/static/favicon.ico\n        Alias /site_media/ /var/www/myapp/myapp/site_media/\n        Alias /media/ /var/www/myapp/myapp/media/\n        Alias /static/ /var/www/myapp/myapp/static/\n        AliasMatch /([/]*\\.css) /var/www/myapp/myapp/static/css/$1\n\n        <Directory /var/www/myapp/myapp>\n            Order allow,deny\n            Allow from all\n            Require all granted\n        </Directory>\n\n        <Directory /var/www/myapp/myapp/flask_myapp>\n            Order allow,deny\n            Allow from all\n            Require all granted\n        </Directory>\n\n        ErrorLog ${APACHE_LOG_DIR}/myapp-error.log\n        CustomLog ${APACHE_LOG_DIR}/myapp-access.log combined\n</VirtualHost>\nAnd, if I'm running the app in console mode (flask run --host=0.0.0.0) :(, it's fine, but I can't see the static contents (see Alias section in VH) :\nINFO - 14:36:24 - _internal.py (88)  : 192.168.56.1 - - [05/Feb/2019 14:36:24] \"POST /login?next=%2F HTTP/1.1\" 302 -\nINFO - 14:36:24 - _internal.py (88)  : 192.168.56.1 - - [05/Feb/2019 14:36:24] \"GET / HTTP/1.1\" 200 -\nINFO - 14:36:24 - _internal.py (88)  : 192.168.56.1 - - [05/Feb/2019 14:36:24] \"GET /static/css/main.css HTTP/1.1\" 404 -\nINFO - 14:57:30 - _internal.py (88)  : 192.168.56.1 - - [05/Feb/2019 14:57:30] \"GET /zm?data=1402201904 HTTP/1.1\" 200 -\nINFO - 14:57:30 - _internal.py (88)  : 192.168.56.1 - - [05/Feb/2019 14:57:30] \"GET /static/img/84/zones_meteo.jpg HTTP/1.1\" 404 -\nINFO - 14:57:30 - _internal.py (88)  : 192.168.56.1 - - [05/Feb/2019 14:57:30] \"GET /static/img/84/CorrespZM.png HTTP/1.1\" 404 -\nINFO - 14:57:30 - _internal.py (88)  : 192.168.56.1 - - [05/Feb/2019 14:57:30] \"GET /static/css/main.css HTTP/1.1\" 404 -\nActual Behavior\nTell us what happens instead.\n$ python --version\nPython 2.7.12\n$ cat requirements.txt\nclick==6.7\nFlask==1.0.2\nFlask-Caching==1.4.0\nFlask-Login==0.4.1\nFlask-SQLAlchemy==2.3.2\nFlask-WTF==0.14.2\nitsdangerous==0.24\nJinja2==2.10\nMarkupSafe==1.0\npsycopg2==2.7.5\nSQLAlchemy==1.2.8\nWerkzeug==0.14.1\nWTForms==2.2.1\nEnvironment\nPython version: 2.7.12\nFlask version: 1.0.2\nWerkzeug version: 0.14.1\nThanks a lot.\nF.", "issue_status": "Closed", "issue_reporting_time": "2019-02-05T14:02:42Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "197": {"issue_url": "https://github.com/pallets/flask/issues/3089", "issue_id": "#3089", "issue_summary": "\"Lift\" Flask (et al.) on Tidelift", "issue_description": "Member\njab commented on 1 Feb 2019 \u2022\nedited\nIt's possible to donate to support Flask, but (despite several Flask extensions being lifted), neither Flask itself nor other Pallets projects are available via Tidelift subscription.\nAccording to current estimates, Flask, Werkzeug, Jinja2, Click, and ItsDangerous could each be earning USD $417/month (a total of over $2K/month).\n(I recently lifted an open source project I've been maintaining for over 10 years \u2013 which has been in use at Google, Venmo, Bank of America Merrill Lynch, et al. \u2013 and only today got my first cent of financial support thanks to Tidelift.)\nJust wanted to make sure you knew about Tidelift in case it's an option for you.\n2", "issue_status": "Closed", "issue_reporting_time": "2019-02-01T05:27:08Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "198": {"issue_url": "https://github.com/pallets/flask/issues/3088", "issue_id": "#3088", "issue_summary": "URL Converters should have access to app context", "issue_description": "tedivm commented on 31 Jan 2019\nExpected Behavior\nThe following code should create a new URL converter that converts a specific field to a model (or None).\nclass ModelConverter(BaseConverter):\n\n    def to_python(self, value):\n        return models.Example.query.filter(models.Example.name == value).first()\n\n    def to_url(self, value):\n        if isinstance(value, str):\n            return value\n        return value.name\nActual Behavior\nThe converters don't have access to the app context so an error is thrown.\nBad Solution\nclass OrganizationConverter(BaseConverter):\n    app = None\n    def to_python(self, value):\n        with self.app.app_context():\n            return repositories.Organization.query.filter(repositories.Organization.name == value).first()\n\n    def to_url(self, value):\n        if isinstance(value, str):\n            return value\n        return value.name\nThis solution tries to get around it by creating a new app context. The problem is that the context disappears, killing the database session at the same time. This prevents SQLAlchemy features (such as lazy loading).\nEnvironment\nPython version: 3.6 and 3.7\nFlask version: 1.0.2\nSQLAlchemy version: 1.2.17\nFlask-SQLAlchemy version: 2.3.2\nWerkzeug version: 0.14.1\nAdditional Resources\nThis issue has also come up on stack overflow", "issue_status": "Closed", "issue_reporting_time": "2019-01-31T01:33:08Z", "fixed_by": "#3104", "pull_request_summary": "moving match_request to RequestContext.push to enable ModelConverter", "pull_request_description": "Contributor\neladm26 commented on 25 Feb 2019 \u2022\nedited by davidism\nmatch_request will be called in RequestContext.push after current_app, request, and session are already populated.\ncloses #3088", "pull_request_status": "Merged", "issue_fixed_time": "2019-06-13T19:46:54Z", "files_changed": [["4", "CHANGES.rst"], ["10", "src/flask/ctx.py"], ["20", "tests/test_basic.py"], ["40", "tests/test_converters.py"], ["4", "tests/test_testing.py"]]}, "199": {"issue_url": "https://github.com/pallets/flask/issues/3087", "issue_id": "#3087", "issue_summary": "banner statements not directed to log when app starts", "issue_description": "bandtank commented on 30 Jan 2019 \u2022\nedited\nThe initial banner messages emitted from flask to the console are not routed to the log handler as expected. The only way to work around this is to change all log statements to go to stderr and then redirect stdout to /dev/null. Otherwise, the statements appear in the console with no obvious way to enable suppression or reroute them to a log handler.\nI suspect this is intentional, but I think the statements should be able to be suppressed or rerouted in some manner. Something as simple as a flag to show or hide the banner would suffice in flask/app.py:\n938         if self.show_banner:\n939             cli.show_server_banner(self.env, self.debug, self.name, False)\nConsole excerpt showing the statements not redirecting to the log handler:\n[2019-01-30 07:20:02.254] [DBUG] [api.py:35              ] Starting API\n * Serving Flask app \"api\" (lazy loading)\n * Environment: production\n   WARNING: Do not use the development server in a production environment.\n   Use a production WSGI server instead.\n * Debug mode: off\n[2019-01-30 07:20:02.264] [DBUG] [fps.py:23              ] FPS[0] main loop\nInstantiation is from a class that is called as part of a larger application, which embeds the API:\n  def __init__():\n    self.app = flask.Flask(__name__)\n    self.app.config.from_object(\"config\")\n    self.bp  = flask.Blueprint(\"fpsApi\", __name__)\n    self.api = flask_restful.Api(self.bp)\n    self.api.add_resource(Hello, \"/Hello\")\n    self.app.register_blueprint(self.bp, url_prefix = \"/api\")\n    \n  def run(self):\n    logging.debug(f\"Starting API\")\n    self.app.run(\n      debug = self.dbgMode,\n      use_reloader = self.useReloader,\n      port = self.cfg[\"apiPort\"],\n      host = self.hostIp\n    )\nVersion information:\n$ python --version\nPython 3.7.2\n\n$ pip freeze\naniso8601==4.1.0\nClick==7.0\nFlask==1.0.2\nFlask-RESTful==0.3.7\ngnureadline==6.3.8\nitsdangerous==1.1.0\nJinja2==2.10\nMarkupSafe==1.1.0\nmysqlclient==1.4.1\npbr==5.1.1\npython-dotenv==0.10.1\npytz==2018.9\nschema==0.6.8\nsix==1.12.0\nstevedore==1.30.0\nvirtualenv==16.2.0\nvirtualenv-clone==0.5.1\nvirtualenvwrapper==4.8.2\nWerkzeug==0.14.1", "issue_status": "Closed", "issue_reporting_time": "2019-01-30T14:34:03Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "200": {"issue_url": "https://github.com/pallets/flask/issues/3086", "issue_id": "#3086", "issue_summary": "Autoredirect", "issue_description": "rasidmusic commented on 30 Jan 2019\nHey guys,\nI am trying to achieve a automatic redirect to the '/' node on either timeout or if a variable is set to a specific value. And this should work from all pages. So it doesnt matter on which site the user is, the automatic logout will trigger.\nI thought something like\nwhile redirect = False:\ndo routing and stuff\nat some point redirect = True\nredirect(url_for('index'))\nAny ideas? If the while thing is posible, how can I wrap the whole application? There has to be a better solution", "issue_status": "Closed", "issue_reporting_time": "2019-01-30T12:16:48Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "201": {"issue_url": "https://github.com/pallets/flask/issues/3085", "issue_id": "#3085", "issue_summary": "not able to serve html file with all the css and js linked in flask", "issue_description": "RajibKDey commented on 30 Jan 2019\nHi i am new to the flask environment and i am currently working on a project which involves me hosting a server to run a dashboard for IoT devices (freeboard). I have already copied all the freeboard files to the static folder. But the index page of the freeboard when called through flask doesnt include any css and javascript files that have been mentioned in the index file of freeboard.\nThe file structure is a follows\nMyproject/static/(freeboard files)\nI am expecting the freeboard index-page to load with all the necessary css and javascript files linked as mentioned in the index page.\nI would like a know a way to host freeboard through flask without changing any of the original files from freeboard.", "issue_status": "Closed", "issue_reporting_time": "2019-01-30T07:16:32Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "202": {"issue_url": "https://github.com/pallets/flask/issues/3084", "issue_id": "#3084", "issue_summary": "Unable to remap dll to same address as parent on cygwin when running in debug mode", "issue_description": "mbkupfer commented on 29 Jan 2019 \u2022\nedited\nExpected Behavior\nCreating an app using dash which is built onto of flask. App worked fine until I had the genius idea to try running it in the background. I'm now in a situation where I cannot use my app in development mode in cygwin, although it does work on main OS and deployed on server, so this isn't an issue w/codebase.\nSorry, this is only reproduceable in my environment\nActual Behavior\n $ python app.py\nRunning on http://127.0.0.1:8050/\nDebugger PIN: 962-843-370\n * Serving Flask app \"app\" (lazy loading)\n * Environment: development\n * Debug mode: on\n      2 [main] python3.6m 37104 child_info_fork::abort: unable to remap _lbfgsb.cpython-36m-x86_64-cygwin.dll to same address as parent (0x48E0000) - try running rebaseall\nTraceback (most recent call last):\n  File \"app.py\", line 644, in <module>\n    app.run_server(debug=util.DEBUG)\n  File \"/cygdrive/c/Users/mkupfer/Desktop/my_documents/01_Visualizations/eurostat/venv/lib/python3.6/site-packages/dash/dash.py\", line 1293, in run_server\n    **flask_run_options)\n  File \"/cygdrive/c/Users/mkupfer/Desktop/my_documents/01_Visualizations/eurostat/venv/lib/python3.6/site-packages/flask/app.py\", line 943, in run\n    run_simple(host, port, self, **options)\n  File \"/cygdrive/c/Users/mkupfer/Desktop/my_documents/01_Visualizations/eurostat/venv/lib/python3.6/site-packages/werkzeug/serving.py\", line 812, in run_simple\n    reloader_type)\n  File \"/cygdrive/c/Users/mkupfer/Desktop/my_documents/01_Visualizations/eurostat/venv/lib/python3.6/site-packages/werkzeug/_reloader.py\", line 275, in run_with_reloader\n    sys.exit(reloader.restart_with_reloader())\n  File \"/cygdrive/c/Users/mkupfer/Desktop/my_documents/01_Visualizations/eurostat/venv/lib/python3.6/site-packages/werkzeug/_reloader.py\", line 132, in restart_with_reloader\n    close_fds=False)\n  File \"/usr/lib/python3.6/subprocess.py\", line 267, in call\n    with Popen(*popenargs, **kwargs) as p:\n  File \"/usr/lib/python3.6/subprocess.py\", line 709, in __init__\n    restore_signals, start_new_session)\n  File \"/usr/lib/python3.6/subprocess.py\", line 1275, in _execute_child\n    restore_signals, start_new_session, preexec_fn)\nBlockingIOError: [Errno 11] Resource temporarily unavailable\nEnvironment\nPython version: 3.6.4\nFlask version: 1.0.2\nWerkzeug version: 0.14.1\nThings I have already tried:\nRebasing\nRe-installing cygwin", "issue_status": "Closed", "issue_reporting_time": "2019-01-29T07:35:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "203": {"issue_url": "https://github.com/pallets/flask/issues/3083", "issue_id": "#3083", "issue_summary": "Jsonify does not take allow_nan", "issue_description": "david-cortes commented on 25 Jan 2019\nIt seems passing argument allow_nan = False to flask.jsonify will not actually turn NaNs into something else like null - e.g. flask.jsonify({\u201ca\u201d : numpy.nan}) will produce {\u201ca\u201d : NaN}", "issue_status": "Closed", "issue_reporting_time": "2019-01-25T13:43:02Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "204": {"issue_url": "https://github.com/pallets/flask/issues/3081", "issue_id": "#3081", "issue_summary": "What can I do to translate flask documentation to Russian language?", "issue_description": "blueboar2 commented on 25 Jan 2019\nI want to translate latest Flask documentation to Russian language. I searched in the Google, and found this page: https://flask-russian-docs.readthedocs.io/ru/latest/. It is good russian translation, but it is bit outdated. I want to renew it, and continue to maintain.\nBut then I encountered an issue (#1023) about the Korean language, so I want to ask:\nOK, you can't check translation because you don't have any russian developers, so you can't make it as official translation.\nBut then, what I (and other translators) can do? Can you give a link to that translation, and say, that this is unofficial? Can I search for russian developers on some other sites and ask them to check translation? What if I translate docs commit-by-commit, so you will always see, is it new or outdated? So, if I want to translate it \"right-way\", how can I do it?\n1", "issue_status": "Closed", "issue_reporting_time": "2019-01-25T03:54:56Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "205": {"issue_url": "https://github.com/pallets/flask/issues/3080", "issue_id": "#3080", "issue_summary": "Session variable is not saved", "issue_description": "rasidmusic commented on 24 Jan 2019 \u2022\nedited by davidism\nHey guys,\nI have a problem with the session variable functionality.\nI am assigning some variables that contain JSON Objects to session variables.\nSomething like\nvariable = {'modell': 'Vertrag', 'lagerort': '4-01-N', 'lagerid': 306816, 'p3barcode': 'L18100017', 'devicegroup': 'SIM Karten', 'devicegroupid': 10, 'verliehenan': 'EBP (Bernd Eppinger)', 'lagerbarcode': 'L16050068', 'hersteller': 'T-Mobile', 'status': 'Mitarbeiter zugewiesen'}\nsession['abc'] = variable\nThis is working BUT\nif the data in varaible gets too big, the session variable is not beeing saved.\nI thought it is a issue with the cookie size, however on the https://www.tutorialspoint.com/flask/flask_sessions.htm is metioned, that sessions are stored on the server - so there should not be a limit?\nIs there a way how can I store a large variable a session variable?\nThanks in advance", "issue_status": "Closed", "issue_reporting_time": "2019-01-24T15:58:34Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "206": {"issue_url": "https://github.com/pallets/flask/issues/3078", "issue_id": "#3078", "issue_summary": "setuptools finds flask-mail instead of flask", "issue_description": "Zethson commented on 18 Jan 2019 \u2022\nedited\nExpected Behavior\nRunning it on a new VPS. setup.py used is:\nhttps://github.com/Zethson/dark-proteome-visualization/blob/development/setup.py\nwith requirements.txt used:\nhttps://github.com/Zethson/dark-proteome-visualization/blob/development/requirements.txt\npython setup.py clean --all install\nFinds flask and installs flask.\nActual Behavior\nSearching for flask\nDownloading https://files.pythonhosted.org/packages/05/2f/6a545452040c2556559779db87148d2a85e78a26f90326647b51dc5e81e9/Flask-Mail-0.9.1.tar.gz#sha256=22e5eb9a940bf407bcf30410ecc3708f3c56cc44b29c34e1726fe85006935f41\nBest match: Flask Mail-0.9.1\nProcessing Flask-Mail-0.9.1.tar.gz\nI tried pretty much all combinations of capital/lowercase for flask and flask-mail. No success. Interestingly enough, if I run the install script again (same virtual environment), it finds flask.\nerror: The 'flask' distribution was not found and is required by flask-Mail\nEnvironment\nPython version: Python 3.6.7\nFlask version: latest\nWerkzeug version: latest", "issue_status": "Closed", "issue_reporting_time": "2019-01-18T17:12:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "207": {"issue_url": "https://github.com/pallets/flask/issues/3076", "issue_id": "#3076", "issue_summary": "The data for app.url_map.converters is not passed to the blueprint", "issue_description": "pcloth commented on 17 Jan 2019\nExpected Behavior\nI created a custom url regular handler, which works in the app.route, but does not take effect in the api.route of the blueprint. The error message is: File \"d:\\Anaconda3\\lib\\site-packages\\ Werkzeug\\routing.py\", line 696, in get_converter\n     Raise LookupError('the converter %r does not exist' % converter_name)\nLookupError: the converter 'regex' does not exist\n\u00b7\nfrom werkzeug.routing import BaseConverter\n\nclass RegexConverter(BaseConverter):\n    def __init__(self, map, *args):\n        self.map = map\n        self.regex = args[0]\n\napp.url_map.converters['regex'] = RegexConverter\n\nmanager = Manager(app)\n\n# Printed here has regex\nprint('\\n\\n',app.url_map.converters,'<---------------->',manager.app.url_map.converters,'\\n\\n')\nBut I printed it in routing.Rule.get_converter but there is no regex in self.map.converters\n  {'default': <class 'werkzeug.routing.UnicodeConverter'>, 'string': <class 'werkzeug.routing.UnicodeConverter'>, 'any': <class 'werkzeug.routing.AnyConverter'>, 'path': <class 'werkzeug.routing.PathConverter'>, 'int': <class 'werkzeug.routing.IntegerConverter'>, 'float': <class 'werkzeug.routing.FloatConverter'>, 'uuid': <class 'werkzeug. routing.UUIDConverter'>}\nActual Behavior\nThe data for app.url_map.converters is not passed to the blueprint\nTraceback (most recent call last):\n  File \"devServer.py\", line 5, in <module>\n    from manage import app\n  File \"D:\\py3\\ytt\\manage.py\", line 30, in <module>\n    app = create_app('development')\n  File \"D:\\py3\\ytt\\app\\__init__.py\", line 62, in create_app\n    app.register_blueprint(api_bp)\n  File \"d:\\Anaconda3\\lib\\site-packages\\flask\\app.py\", line 66, in wrapper_func\n    return f(self, *args, **kwargs)\n  File \"d:\\Anaconda3\\lib\\site-packages\\flask\\app.py\", line 1115, in register_blueprint\n    blueprint.register(self, options, first_registration)\n  File \"d:\\Anaconda3\\lib\\site-packages\\flask\\blueprints.py\", line 187, in register\n    deferred(state)\n  File \"d:\\Anaconda3\\lib\\site-packages\\flask\\blueprints.py\", line 208, in <lambda>\n    s.add_url_rule(rule, endpoint, view_func, **options))\n  File \"d:\\Anaconda3\\lib\\site-packages\\flask\\blueprints.py\", line 80, in add_url_rule\n    view_func, defaults=defaults, **options)\n  File \"d:\\Anaconda3\\lib\\site-packages\\flask\\app.py\", line 66, in wrapper_func\n    return f(self, *args, **kwargs)\n  File \"d:\\Anaconda3\\lib\\site-packages\\flask\\app.py\", line 1216, in add_url_rule\n    self.url_map.add(rule)\n  File \"d:\\Anaconda3\\lib\\site-packages\\werkzeug\\routing.py\", line 1217, in add\n    rule.bind(self)\n  File \"d:\\Anaconda3\\lib\\site-packages\\werkzeug\\routing.py\", line 687, in bind\n    self.compile()\n  File \"d:\\Anaconda3\\lib\\site-packages\\werkzeug\\routing.py\", line 741, in compile\n    _build_regex(self.is_leaf and self.rule or self.rule.rstrip('/'))\n  File \"d:\\Anaconda3\\lib\\site-packages\\werkzeug\\routing.py\", line 730, in _build_regex\n    variable, converter, c_args, c_kwargs)\n  File \"d:\\Anaconda3\\lib\\site-packages\\werkzeug\\routing.py\", line 696, in get_converter\n    raise LookupError('the converter %r does not exist' % converter_name)\nLookupError: the converter 'regex' does not exist\nEnvironment\nPython version:3.6\nFlask version:1.02\nWerkzeug version:0.14.1", "issue_status": "Closed", "issue_reporting_time": "2019-01-17T07:55:43Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "208": {"issue_url": "https://github.com/pallets/flask/issues/3074", "issue_id": "#3074", "issue_summary": "send_file doesn't urlencode ':/' in unicode attachment_filename", "issue_description": "i-akhmadullin commented on 15 Jan 2019 \u2022\nedited\nExpected Behavior\nWhen sending files with unicode filename (with : or /) they should be downloaded with name from filename* field.\n# -*- coding: utf-8 -*-\nimport os\nfrom flask import Flask, send_from_directory\napp = Flask(__name__)\n@app.route('/test/', methods=['GET'])\ndef test_route():\n    tmp_dir = os.getcwd()\n    tmp_filename = __file__\n    attachment_filename = u'\u0442\u0435\u0441\u0442:\u0442\u0435\u0441\u0442_\u0442\u0435\u0441\u0442.py'\n    return send_from_directory(\n        tmp_dir,\n        tmp_filename,\n        as_attachment=True,\n        attachment_filename=attachment_filename\n    )\nif __name__ == '__main__':\n    app.run(host='::', port=5000)\nActual Behavior\nSome browsers (Chrome-based/Safari) ignore filename* field when it contains colon or slash. For example file \u0442\u0435\u0441\u0442:\u0442\u0435\u0441\u0442_\u0442\u0435\u0441\u0442.py gets downloaded in Chrome/Safari as __.py but in Firefox as \u0442\u0435\u0441\u0442_\u0442\u0435\u0441\u0442_\u0442\u0435\u0441\u0442.py which is acceptable in my opinion.\nFlask response:\nContent-Disposition: attachment; filename*=\"UTF-8''%D1%82%D0%B5%D1%81%D1%82:%D1%82%D0%B5%D1%81%D1%82_%D1%82%D0%B5%D1%81%D1%82.py\"; filename=\":_.py\"\nEnvironment\nPython version: 2.7.15\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2019-01-15T09:39:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "209": {"issue_url": "https://github.com/pallets/flask/issues/3072", "issue_id": "#3072", "issue_summary": "new installation of flask, can't get around the 404 Not Found error locally", "issue_description": "squarewave24 commented on 12 Jan 2019 \u2022\nedited\njust installed flask on python 3.6 using pip3\n$ pip3 install flask\nRequirement already satisfied: flask in /Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages (1.0.2)\nRequirement already satisfied: Werkzeug>=0.14 in /Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages (from flask) (0.14.1)\nRequirement already satisfied: itsdangerous>=0.24 in /Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages (from flask) (0.24)\nRequirement already satisfied: click>=5.1 in /Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages (from flask) (6.7)\nRequirement already satisfied: Jinja2>=2.10 in /Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages (from flask) (2.10)\nRequirement already satisfied: MarkupSafe>=0.23 in /Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages (from Jinja2>=2.10->flask) (1.0)\nYou are using pip version 18.0, however version 18.1 is available.\nYou should consider upgrading via the 'pip install --upgrade pip' command.\ni followed 20 posts on this issue, and no matter what i do, i can't get around the 404 Not Found issue.\nfrom flask import Flask\n\napp = Flask(__name__)\napp.config['SERVER_NAME'] = \"127.0.0.1:5000\" # attempting to set explicitly, as it defaults to None \n\napp.route('/')\ndef home():\n    return \"home...\"\n\nprint('server name ', app.config[\"SERVER_NAME\"])\n\napp.run(debug=True)\ntried specifying port, using default, specifying server name, using default.. console prints the url to use but that default url does not work", "issue_status": "Closed", "issue_reporting_time": "2019-01-12T17:00:44Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "210": {"issue_url": "https://github.com/pallets/flask/issues/3061", "issue_id": "#3061", "issue_summary": "Fail to run flask when flask test", "issue_description": "xxxxsk commented on 4 Jan 2019\nIWhen I want to test test_selenium.py in Chapter 15: Unit tests with Selenium (15d), I failed .This is the traceback\n` flask test\ntest_404 (test_api.APITestCase) ... ok\ntest_anonymous (test_api.APITestCase) ... ok\ntest_bad_auth (test_api.APITestCase) ... ok\ntest_comments (test_api.APITestCase) ... ok\ntest_no_auth (test_api.APITestCase) ... ok\ntest_posts (test_api.APITestCase) ... ok\ntest_token_auth (test_api.APITestCase) ... ok\ntest_unconfirmed_account (test_api.APITestCase) ... ok\ntest_users (test_api.APITestCase) ... ok\ntest_app_exists (test_basics.BasicTestCase) ... ok\ntest_app_is_testing (test_basics.BasicTestCase) ... ok\ntest_home_page (test_client.FlaskClientTestCase) ... ok\ntest_register_and_login (test_client.FlaskClientTestCase) ... ok\n/anaconda3/lib/python3.7/threading.py:865: Warning: Silently ignoring app.run() because the application is run from the flask command line executable. Consider putting app.run() behind an if name == \"main\" guard to silence this warning.\nself._target(*self._args, **self._kwargs)\ntest_admin_home_page (test_selenium.SeleniumTestCase) ... FAIL\ntest_administrator_role (test_user_model.UserModelTestCase) ... ok\ntest_anonymous_user (test_user_model.UserModelTestCase) ... ok\ntest_duplicate_email_change_token (test_user_model.UserModelTestCase) ... ok\ntest_expired_confirmation_token (test_user_model.UserModelTestCase) ... ok\ntest_follows (test_user_model.UserModelTestCase) ... ok\ntest_gravatar (test_user_model.UserModelTestCase) ... ok\ntest_invalid_confirmation_token (test_user_model.UserModelTestCase) ... ok\ntest_invalid_email_change_token (test_user_model.UserModelTestCase) ... ok\ntest_invalid_reset_token (test_user_model.UserModelTestCase) ... ok\ntest_moderator_role (test_user_model.UserModelTestCase) ... ok\ntest_no_password_getter (test_user_model.UserModelTestCase) ... ok\ntest_password_salts_are_random (test_user_model.UserModelTestCase) ... ok\ntest_password_setter (test_user_model.UserModelTestCase) ... ok\ntest_password_verification (test_user_model.UserModelTestCase) ... ok\ntest_ping (test_user_model.UserModelTestCase) ... ok\ntest_timestamps (test_user_model.UserModelTestCase) ... ok\ntest_to_json (test_user_model.UserModelTestCase) ... ok\ntest_user_role (test_user_model.UserModelTestCase) ... ok\ntest_valid_confirmation_token (test_user_model.UserModelTestCase) ... ok\ntest_valid_email_change_token (test_user_model.UserModelTestCase) ... ok\ntest_valid_reset_token (test_user_model.UserModelTestCase) ... ok\n======================================================================\nFAIL: test_admin_home_page (test_selenium.SeleniumTestCase)\nTraceback (most recent call last):\nFile \"/Users/xueshuaikang/learn_flask/tests/test_selenium.py\", line 84, in test_admin_home_page\nself.client.page_source))\nAssertionError: None is not true\nRan 35 tests in 11.375s\nFAILED (failures=1)`\nI think I failed to run flask app when test_admin_home_page.Counld you help me?\nSorry that I am not good at English!\nPython version:3.7.0\nFlask version:1.0.2\nWerkzeug version:0.14.1", "issue_status": "Closed", "issue_reporting_time": "2019-01-04T13:40:23Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "211": {"issue_url": "https://github.com/pallets/flask/issues/3057", "issue_id": "#3057", "issue_summary": "Flask auto reload does not refresh browser", "issue_description": "glinskyc commented on 2 Jan 2019\nHello,\nThis is directly related to the SO question:\nhttps://stackoverflow.com/questions/51379705/flask-auto-reload-does-not-refresh-browser\nExpected Behavior\nUpon changing an HTML template file while running the Flask development server, I thought the browser view would update to reflect the new HTML.\nActual Behavior\nThe browser view does not update upon changing an HTML template file. To see the HTML changes, the browser must be manually refreshed. I did not expect this to be the case. I am unsure if this is a bug or intended behavior of the Flask development server.\nIf this behavior is intended, I would like to have this considered for a Feature Request for the Flask development server.\nEnvironment\nPython version: 3.6.3\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2019-01-02T02:47:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "212": {"issue_url": "https://github.com/pallets/flask/issues/3055", "issue_id": "#3055", "issue_summary": "How to connect SQL sever/MSSQL database with flask are there any libraries available", "issue_description": "gaurikadam commented on 31 Dec 2018\nThis issue tracker is a tool to address bugs in Flask itself.\nPlease use the #pocoo IRC channel on freenode or Stack Overflow for general\nquestions about using Flask or issues not related to Flask.\nIf you'd like to report a bug in Flask, fill out the template below. Provide\nany extra information that may be useful / related to your problem.\nIdeally, create an MCVE, which helps us\nunderstand the problem and helps check that it is not caused by something in\nyour code.\nExpected Behavior\nTell us what should happen.\nPaste a minimal example that causes the problem.\nActual Behavior\nTell us what happens instead.\nPaste the full traceback if there was an exception.\nEnvironment\nPython version:\nFlask version:\nWerkzeug version:", "issue_status": "Closed", "issue_reporting_time": "2018-12-31T05:52:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "213": {"issue_url": "https://github.com/pallets/flask/issues/3053", "issue_id": "#3053", "issue_summary": "DeprecationWarning in flask.sessions", "issue_description": "Contributor\ntirkarthi commented on 29 Dec 2018\nflask.session imports MutableMapping from collections which is deprecated in Python 3.7 and will be removed in 3.8. For some reason since there are similar warnings in other libraries like werkzeug and jinja that are fixed seems to hide this warning. Importing session directly from flask folder causes this warning\nExpected Behavior\nDeprecationWarning should not be shown since it causes incompatibility with 3.8\nActual Behavior\nTell us what happens instead.\nPython 3.8.0a0 (heads/master:78de01198b, Dec 29 2018, 11:36:21)\n[GCC 5.4.0 20160609] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import warnings\n>>> warnings.filterwarnings(\"default\", category=DeprecationWarning)\n>>> import sessions\n/home/karthi/flask/flask/sessions.py:14: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\n  from collections import MutableMapping\nEnvironment\nPython version: Python 3.8.0a0\nFlask version: 1.1dev\nWerkzeug version: 0.14\nUpstream PR : python/cpython#10596", "issue_status": "Closed", "issue_reporting_time": "2018-12-29T12:07:33Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "214": {"issue_url": "https://github.com/pallets/flask/issues/3048", "issue_id": "#3048", "issue_summary": "Add a tool to decode session cookie", "issue_description": "Contributor\nwgwz commented on 26 Dec 2018\nHi, all. I have a feature request that I've been thinking about for a while. Some times I want to look at what is in the session cookie. Obviously one way to do that is by logging the cookie at various points in your server-side code. But some times I want to inspect the cookie outside of the application, directly from the browser. There are various ways of doing this (1, 2, 3). But it requires defining a snippet of code each time you want to do it.\nThat said this feature request is to add in a utility, perhaps a CLI tool that decode a session cookie, e.g.:\n$ flask decode <cookie-from-browser>\nThis would prevent users from needing to define this snippet each time, and provide an easy to use interface. I'm curious to hear what others think and if this is indeed a feature that the community thinks will be useful.", "issue_status": "Closed", "issue_reporting_time": "2018-12-26T15:23:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "215": {"issue_url": "https://github.com/pallets/flask/issues/3046", "issue_id": "#3046", "issue_summary": "View returning 204 takes very long (+65s) when using NGINX and any WSGI implementation", "issue_description": "eliaperantoni commented on 24 Dec 2018\nExpected Behavior\nThe request shouldn't take 65 seconds to complete.\nfrom flask import Flask\napp = Flask(__name__)\n@app.route(\"/\")\ndef index():\n    return \"anything\", 204\nActual Behavior\nThe request takes 65 seconds to complete. According to the logs, uWSGI processes the request in some milliseconds, but somehow nginx hangs for more than a minute when a response with 204 code is provided.\nThis happens with any WSGI implementation. I've tried it with 2 different versions of uWSGI and Gunicorn. The result is the same.\nEnvironment\nPython version: 3.6.7\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-12-24T15:15:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "216": {"issue_url": "https://github.com/pallets/flask/issues/3045", "issue_id": "#3045", "issue_summary": "Advice on Flask hooks", "issue_description": "adapt-to commented on 24 Dec 2018\nThe request hook in Flask, is there a hook that can be executed before the request processing of a view function?", "issue_status": "Closed", "issue_reporting_time": "2018-12-24T12:28:37Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "217": {"issue_url": "https://github.com/pallets/flask/issues/3043", "issue_id": "#3043", "issue_summary": "test_basic.test_trapping_of_bad_request_key_errors failed in Travis-CI", "issue_description": "Member\ngreyli commented on 23 Dec 2018 \u2022\nedited\nflask.tests.test_basic.test_trapping_of_bad_request_key_errors failed in Travis-CI with enviroment devel.\nSource\nflask.tests.test_basic.test_trapping_of_bad_request_key_errors\ndef test_trapping_of_bad_request_key_errors(app, client):\n    @app.route('/key')\n    def fail():\n        flask.request.form['missing_key']\n\n    @app.route('/abort')\n    def allow_abort():\n        flask.abort(400)\n\n    rv = client.get('/key')\n    assert rv.status_code == 400\n    assert b'missing_key' not in rv.data  # unpassed\nTraceback\nhttps://travis-ci.org/pallets/flask/builds/471002531\ndevel create: /home/travis/build/pallets/flask/.tox/devel\ndevel installdeps: pytest>=3, coverage, greenlet, blinker, python-dotenv, \nhttps://github.com/pallets/werkzeug/archive/master.tar.gz, \nhttps://github.com/pallets/markupsafe/archive/master.tar.gz, \nhttps://github.com/pallets/jinja/archive/master.tar.gz, \nhttps://github.com/pallets/itsdangerous/archive/master.tar.gz, \nhttps://github.com/pallets/click/archive/master.tar.gz\ndevel inst: /home/travis/build/pallets/flask/.tox/.tmp/package/1/Flask-1.0.3.dev0.zip\n...\n___________________ test_trapping_of_bad_request_key_errors ____________________\napp = <Flask 'flask_test'>, client = <FlaskClient <Flask 'flask_test'>>\n    def test_trapping_of_bad_request_key_errors(app, client):\n        @app.route('/key')\n        def fail():\n            flask.request.form['missing_key']\n    \n        @app.route('/abort')\n        def allow_abort():\n            flask.abort(400)\n    \n        rv = client.get('/key')\n        assert rv.status_code == 400\n>       assert b'missing_key' not in rv.data\nE       assert 'missing_key' not in \"<!DOCTYPE HTML PUBL...'</code></pre></p>\\n\"\nE         'missing_key' is contained here:\nE           yError: \\'missing_key\\'</code></pre></p>\nE         ?           +++++++++++", "issue_status": "Closed", "issue_reporting_time": "2018-12-23T05:35:56Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "218": {"issue_url": "https://github.com/pallets/flask/issues/3039", "issue_id": "#3039", "issue_summary": "I need to manually refresh the web page when I use the \u201credirect\u201d function", "issue_description": "bingws commented on 20 Dec 2018 \u2022\nedited\nWhen I go from a web application to a Jupyter application on a new port using the \"redirect\" function, I need to manually refresh the page to open it. Is there an automatic refresh method?\nThe following is my server key code\uff1a\ndef open_comment(comment_id):\n    comment = Comment.query.get_or_404(comment_id)\n    docker.from_env().containers.get(comment.body).restart(timeout=10)\n    host = request.host.split(':')[0]\n    url = \"http://\" + host + ':' + str(comment.port) + '/lab'\n    return redirect(url)\nThe following is my client key code\uff1a\n<form class=\"inline\" method=\"post\" target=\"_blank\"\n      action=\"{{ url_for('.open_comment', comment_id=comment.id) }}\">\n<input type=\"hidden\" name=\"csrf_token\" value=\"{{ csrf_token() }}\">\n<button type=\"submit\" class=\"dropdown-item\">\n    <span class=\"oi oi-warning\" aria-hidden=\"true\"></span> Open\n</button>\n</form>", "issue_status": "Closed", "issue_reporting_time": "2018-12-20T09:42:05Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "219": {"issue_url": "https://github.com/pallets/flask/issues/3037", "issue_id": "#3037", "issue_summary": "get data from mongodb please discuss it i attached screenshot", "issue_description": "ahsankhan530 commented on 19 Dec 2018\n**This issue tracker is a tool to address bugs in Flask itself.\nPlease use the #pocoo IRC ch\n\nannel on freenode or Stack Overflow for general\nquestions about using Flask or issues not related to Flask.**\nIf you'd like to report a bug in Flask, fill out the template below. Provide\nany extra information that may be useful / related to your problem.\nIdeally, create an MCVE, which helps us\nunderstand the problem and helps check that it is not caused by something in\nyour code.\nExpected Behavior\nTell us what should happen.\nPaste a minimal example that causes the problem.\nActual Behavior\nTell us what happens instead.\nPaste the full traceback if there was an exception.\nEnvironment\nPython version:\nFlask version:\nWerkzeug version:", "issue_status": "Closed", "issue_reporting_time": "2018-12-19T15:35:32Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "220": {"issue_url": "https://github.com/pallets/flask/issues/3036", "issue_id": "#3036", "issue_summary": "Creating flask_wtf forms for a list of values through a for loop generates the same inputs several times within each form", "issue_description": "devalvarado200 commented on 19 Dec 2018 \u2022\nedited\nExpected Behavior\nI want create a loop for a list of data and generate a form for every record among a edit button, this to prevent pass in url the id of the record when i use the edit button.\nIn this form i put a hidden field with the id value and a submit button\nWhen i press submit it make the POST, but in the route that receive the value get nothing.\nThis is my code source:\n{% for worker in workers %}\n <form method=\"POST\" action=\"{{ url_for('worker.edit_middleware') }}\">\n                    <td>\n                      {{ form.hidden_tag() }}\n                      {{ form.worker_id(value=worker.id) }}\n                   <input class=\"btn btn-login\"  type=\"submit\" name=\"editar\" value=\"Editar\">\n                    </td>               \n                 </form>\n{% endfor %}\nWhen i inspect the page i see this:\n<td>\n<input id=\"worker_id\" name=\"worker_id\" type=\"hidden\" value=\"\">\n<input id=\"hidden_id\" name=\"hidden_id\" type=\"hidden\" value=\"\">\n<input id=\"csrf_token\" name=\"csrf_token\" type=\"hidden\" value=\"SECRET_ABBREV\">\n<input id=\"worker_id\" name=\"worker_id\" type=\"hidden\" value=\"453\">\n<input class=\"btn btn-login\" type=\"submit\" name=\"editar\" value=\"Editar\">\n</td>\nThe page get two times the fields for every row, in the first time all of the field in the form class appear created with no values, although they are not called in the code, later of the crsf_token get the field that i called in my code with the values..\nActual Behavior\nTo resolve this i remove the form hidden_tag and implement manual input field\n<form method=\"POST\" action=\"{{ url_for('worker.edit_middleware') }}\">\n     <td>\n       <input type=\"hidden\" name=\"worker_id\" value=\"{{ worker.id }}\">\n        <input class=\"btn btn-login\"  type=\"submit\" name=\"editar\" value=\"Editar\">\n    </td>               \n</form>\nAnd this is that i get in inspect:\n<td>\n    <input type=\"hidden\" name=\"worker_id\" value=\"453\">\n    <input class=\"btn btn-login\" type=\"submit\" name=\"editar\" value=\"Editar\">\n</td>\nBut is posible to loop the form without getting two times the fields?.\nI think this is a bug or maybe bad implementation\nEnvironment\nPython version: 3.6.4\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-12-19T15:22:31Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "221": {"issue_url": "https://github.com/pallets/flask/issues/3035", "issue_id": "#3035", "issue_summary": "yum install virtualenv instead of python-virtualenv on Fedora", "issue_description": "rht commented on 18 Dec 2018\nExpected Behavior\nyum install python-virtualenv in the install instruction doesn't lead to having a virtualenv binary on the path, as the problem is exactly described by https://unix.stackexchange.com/questions/27877/install-virtualenv-on-fedora-16 (the question is outdated, but it also applies to Fedora 29 I have been testing).\nsudo yum install python-virtualenv\nThe solution is to do sudo yum install virtualenv instead, which is an alias to python3-virtualenv. And so an explicit -p python2.7 is needed to start a python2 env.\nEnvironment\nPython version: N/A\nFlask version: N/A\nWerkzeug version: N/A", "issue_status": "Closed", "issue_reporting_time": "2018-12-17T20:23:14Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "222": {"issue_url": "https://github.com/pallets/flask/issues/3034", "issue_id": "#3034", "issue_summary": "404 for all routes", "issue_description": "italojs commented on 18 Dec 2018\nMy Problem\nI'm getting 404 for all routes, my flask api is running, and when i run it, the api receive the request and log it, but, it give 404 http status for every request;\n127.0.0.1 - - [17/Dec/2018 16:49:12] \"GET /api/ping/ HTTP/1.1\" 404 -\n127.0.0.1 - - [17/Dec/2018 16:50:10] \"POST /api/blur/ HTTP/1.1\" 404 -\nMy code\nI' have a class Server, this Server class receive a Flask app and run it:\nfrom jsonmerge import merge\n\nclass Server():\n    def __init__(self, app):\n        self.__app = app\n        self.__config = #snip\n        #snip\n\n    def start(self, options=None):\n        #snip\n        \n        self.__app.run(debug=self.__config[\"debug\"], port=self.__config[\"server\"][\"port\"], host=self.__config[\"server\"][\"ip\"])\nand i have my run.py that run my aplication:\nif __name__ == '__main__':\n    srv = Server(app)\n    srv.start(config)\nwhen I print my self.__app infromations, i get:\n<Flask 'appfly.app'>\n\n<Config {'ENV': 'production', 'DEBUG': False, 'TESTING': False, 'PROPAGATE_EXCEPTIONS': None, 'PRESERVE_CONTEXT_ON_EXCEPTION': None, 'SECRET_KEY': None, 'PERMANENT_SESSION_LIFETIME': datetime.timedelta(days=31), 'USE_X_SENDFILE': False, 'SERVER_NAME': None, 'APPLICATION_ROOT': '/', 'SESSION_COOKIE_NAME': 'session', 'SESSION_COOKIE_DOMAIN': None, 'SESSION_COOKIE_PATH': None, 'SESSION_COOKIE_HTTPONLY': True, 'SESSION_COOKIE_SECURE': False, 'SESSION_COOKIE_SAMESITE': None, 'SESSION_REFRESH_EACH_REQUEST': True, 'MAX_CONTENT_LENGTH': None, 'SEND_FILE_MAX_AGE_DEFAULT': datetime.timedelta(seconds=43200), 'TRAP_BAD_REQUEST_ERRORS': None, 'TRAP_HTTP_EXCEPTIONS': False, 'EXPLAIN_TEMPLATE_LOADING': False, 'PREFERRED_URL_SCHEME': 'http', 'JSON_AS_ASCII': True, 'JSON_SORT_KEYS':True, 'JSONIFY_PRETTYPRINT_REGULAR': False, 'JSONIFY_MIMETYPE': 'application/json', 'TEMPLATES_AUTO_RELOAD': None, 'MAX_COOKIE_SIZE': 4093}>\n\nMap([<Rule '/api/ping' (GET, HEAD, OPTIONS) -> ping>,\n <Rule '/api/blur' (POST, OPTIONS) -> blur>,\n <Rule '/static/<filename>' (GET, HEAD, OPTIONS) -> static>])\nlook, my url_map list all my routes, the api/ping route and api/blur route is there.\nMy faill solutions\nmany stackover flow responses say to change the config[\"server_name\"] but it doesnt works\nI already tried set SERVER_NAME to 0.0.0.0:9000,localhost:9000, 127.0.0.1:9000\nI make an flask tutorial to verify the SERVER_NAME and it is None\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello World!\"\n\nif __name__ == '__main__':\nprint(app.config[\"SERVER_NAME\"])\n#app.run(...)\n> None\nI tried set the to Flask ENV to development but it doest works to:\nself.__app.config[\"ENV\"]='development'\nhow it works before\nI aways used Flask in this way and aways worked fine:\n---> app.py\nfrom flask import Flask\n\napp = Flask(__name__)\n\n# Routes files\nfrom app.presentation.routes import ping\nfrom app.presentation.routes import rg as rg_scan\n\n# Routes rules\napp.add_url_rule('/api/ping', 'Ping', ping.route, methods=['GET'])\napp.add_url_rule('/api/rg', 'RG', rg_scan.route, methods=['POST'])\nprint('API is running...')\n---> run.py\nfrom app import app\n\nif __name__ == '__main__':\n    app.run(debug=True, port=9000, host='0.0.0.0')\nbut now i wanna do it in a diferent way, i wanna use my Server Class to start my flask api.\nEnvironment\nPython version: 3.7.0\nFlask version: 1.0.2\nOS Version: Manjaro Linux 18.0.0-rc", "issue_status": "Closed", "issue_reporting_time": "2018-12-17T19:26:42Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "223": {"issue_url": "https://github.com/pallets/flask/issues/3033", "issue_id": "#3033", "issue_summary": "TypeError: __name__ must be set to a string object", "issue_description": "chuck-bass commented on 16 Dec 2018 \u2022\nedited\nExpected Behavior\nI wanna write code capable of python3. So i add \"from future import unicode_literals\" on the top of file.Meanwhile, i use MethodView to build rest api in the same file. I wish it could work fine.\nHere is an example:\n  # -*- coding: utf-8 -*-\n\n  from __future__ import unicode_literals\n  from flask import Flask\n  from flask import Blueprint, request, current_app, g, abort\n  from flask.views import MethodView\n\n  masterviews = Blueprint('newmasterviews', __name__)\n\n\n  class TeamAPI(MethodView):\n\n      def get(self):\n          pass\n\n\n  team_view = TeamAPI.as_view('team_api')\n\n  app = Flask(__name__)\n\n  app.register_blueprint(masterviews, url_prefix='/rest/master')\nActual Behavior\nHowever, when i run the web app, it thows the error,\n\"lib/python2.7/site-packages/flask/views.py\", line 98, in as_view\nview.__name__ = name\nTypeError: __name__ must be set to a string object\". \nI soon realize that because i use the \"from future import unicode_literals\" in py2 so the function name is unicode type, but the name of a function should be string type.So i wonder is it possible to change the\nsource code in the views.py and add the if-then workflow to convert name of function from unicode type into string type to handle the situation .\nEnvironment\npython2.7\nFlask==1.0.2\nWerkzeug==0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-12-16T11:49:15Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "224": {"issue_url": "https://github.com/pallets/flask/issues/3032", "issue_id": "#3032", "issue_summary": "request.path doesn't include request.script_root when running under a subdirectory", "issue_description": "ColdHeat commented on 16 Dec 2018\nI have an application which can be configured to run under a subdomain/domain or a subdirectory. This is controlled by setting APPLICATION_ROOT to a value other than /.\nSome of my decorators use request.path to determine where to redirect the user after logging in. However, when running under a subdirectory, request.path does not include request.script_root and the user could get redirected somewhere they shouldn't. Using request.url creates full URLs when we should only need relative ones.\nBased on docs it is intentional that request.path doesn't include request.script_root.\nUltimately because my application has a plugin interface and I don't want to deviate too much from Flask documentation, what is the optimal way to get this behavior to be consistent between deployment strategies?\nUsing url_for() doesn't seem optimal because certain target endpoints could require arguments to be passed in which might not work without parsing request.path anyway.\nCombining request.script_root and request.path in every usage seems like an easy way to introduce bugs\nCreating a BaseRequest subclass seems like the smartest solution but should there be a new request property (e.g. request.script_path)? Or should I replace the existing path and full_path?\nThe PR I have in preparation to fix this issue uses a BaseRequest subclass but I don't feel great about it:\nhttps://github.com/CTFd/CTFd/pull/802/files#diff-1dec134679d6639679743763954061d5R28", "issue_status": "Closed", "issue_reporting_time": "2018-12-15T21:01:34Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "225": {"issue_url": "https://github.com/pallets/flask/issues/3029", "issue_id": "#3029", "issue_summary": "Execution time not stable", "issue_description": "taosean commented on 14 Dec 2018 \u2022\nedited\nHi guys, I used Flask as a server for my image object detection program, but I found that the execution time of object detection are not stable some times.\nThe main goal of my program is doing object detection on an image with neural network. Since it takes too much time loading the neural netwrok model every time an input image comes, I used Flask as server and the server loads the neural network model once when the server starts up. Then, when the server is running, another program, the clinet, will send a request to the server with the image directory as the parameter. When received the request, the server will read in the specified image, do object detection (executing some functions) and output the detection results in JSON format.\nThis process works fine most of the time and finishes within about 500ms. However, in some rare cases, the process of performing object detection took several seconds, even up to a minute . I looked into my log files and found that they halted at different functions when this case happened.\nI'm wondering if this has something to do with the Flask.\nI'm sorry for this long description and I'm grateful if someone can give any advices.\nExpected Behavior\nExecution time should be around 500ms.\nThe following are normal cases\ncase 1\n2018-12-12 04:00:03,822:fpn_server.py:_clip_boxes:122:2500:11848:DEBUG:start\n2018-12-12 04:00:03,822:fpn_server.py:_clip_boxes:131:2500:11848:DEBUG:end\ncase2\n2018-12-12 17:40:36,674:fpn_server.py:calc_num:225:2500:11848:DEBUG:end\n2018-12-12 17:40:36,676:fpn_server.py:detect_and_save:968:2500:11848:INFO:Writing file C:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\detection_results\\cls_nums_2.pkl\nActual Behavior\nSometimes it takes several seconds or even a minute to finish.\nThe following are unusual cases.\ncase 1\n2018-12-12 04:00:04,834:fpn_server.py:_clip_boxes:122:2500:11848:DEBUG:start\n2018-12-12 04:00:08,553:fpn_server.py:_clip_boxes:131:2500:11848:DEBUG:end\ncase 2\n2018-12-12 17:40:28,677:fpn_server.py:calc_num:225:2500:11848:DEBUG:end\n2018-12-12 17:40:31,210:fpn_server.py:detect_and_save:968:2500:11848:INFO:Writing file C:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\detection_results\\cls_nums_2.pkl\nEnvironment\nPython version: 2.7.14\nFlask version: 0.12.2\nWerkzeug version: 0.14.1\nPS:\nThe server can receive the request from client quickly, it was the execution after receving request halts sometimes.\nI was runing app.run() to launch the server since the server and client runs on the same machine.\nServer runs in single thread is not a problem for me, I just need to process the image one at a time.\nI'm running on Windows 10.\nThank you!", "issue_status": "Closed", "issue_reporting_time": "2018-12-14T02:58:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "226": {"issue_url": "https://github.com/pallets/flask/issues/3028", "issue_id": "#3028", "issue_summary": "View Args Contain url escape characters", "issue_description": "kg-2 commented on 13 Dec 2018\nExpected Behavior\nview_args are unescaped and passed to view functions as the original strings\n@app.route(\"/testurl/<string:test_arg>)\ndef test_func(test_arg):\n    print(f\"test arg is: {test_arg}\")\n    # args with spaces produce \"arg%20with%20spaces\"\n\n\n#------------------------\nimport requests\nrequests.get(\"testurl/arg with spaces\")\nActual Behavior\nThe view args are passed in url percent escape format\nOther Info\nI recently changed servers. It was working fine previously. Maybe an encoding issue?\nEnvironment\nPython version: 3.6.5\nFlask version: 1.02\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-12-12T19:53:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "227": {"issue_url": "https://github.com/pallets/flask/issues/3027", "issue_id": "#3027", "issue_summary": "Flask==1.0.2 is not compatible with python-env", "issue_description": "sakshi094 commented on 11 Dec 2018 \u2022\nedited by ThiefMaster\nNo description provided.", "issue_status": "Closed", "issue_reporting_time": "2018-12-11T13:58:10Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "228": {"issue_url": "https://github.com/pallets/flask/issues/3025", "issue_id": "#3025", "issue_summary": "paginate error:paginated page returned 404.", "issue_description": "wedojava commented on 11 Dec 2018\nerror source code:\nhttps://github.com/wedojava/exloger\nExpected Behavior\nThere is a form with email and ip at index for search and show response, the response should be paginated.\nfrom flask import render_template, flash, redirect, url_for, request, g, current_app, session\nfrom app.main import bp\nfrom app.main.forms import SearchForm\n\n@bp.before_app_request\ndef before_request():\n    if current_user.is_authenticated:\n        current_user.last_seen = datetime.utcnow()\n        db.session.commit()\n    \n    try:\n        session['email'] = session['email'] if session['email'] else 'example@example.com'\n    except KeyError as ke:\n        session['email'] = 'example@example.com'\n\n\n@bp.route('/', methods=['GET', 'POST'])\n@bp.route('/index', methods=['GET', 'POST'])\ndef index():\n    form = SearchForm()\n    page = request.args.get('page', 1, type=int)\n    if form.validate_on_submit():\n        words_email = [\"%\" + form.email.data + \"%\"]\n        rule_email = and_(*[LogImported.sender_address.like(w) for w in words_email])\n        # pay attention these two lines below:\n        l = LogImported.query.filter(rule_email)\n        pagination = l.paginate(page, per_page=50, error_out=True)\n        pageitems = pagination.items\n        session['email'] = form.email.data\n        return render_template('index.html', title=_('Home'), form=form, loglist = l, \\\n        pageitems = pageitems, pagination = pagination)\n    elif session['email'] is not 'example@example.com':\n        words_email = [\"%\" + form.email.data + \"%\"]\n        rule_email = and_(*[LogImported.sender_address.like(w) for w in words_email])\n        # pay attention these two lines below:\n        l = LogImported.query.filter(rule_email)\n        pagination = l.paginate(page, per_page=50, error_out=True)\n        pageitems = pagination.items\n        session['email'] = form.email.data\n        return render_template('index.html', title=_('Home'), form=form, loglist = l, \\\n        pageitems = pageitems, pagination = pagination)\n    else:\n        return render_template('index.html', title=_('Home'), form=form)\nmain/forms.py:\nclass SearchForm(FlaskForm):\n    email = StringField(_l('Email'))\n    ip = StringField('IP', validators=[Length(min=0, max=140)])\n    submit = SubmitField(_l('Submit'))\nmain/__init__.py:\nfrom flask import Blueprint\n\nbp = Blueprint('main', __name__)\n\nfrom app.main import routes\n/models.py:\nclass LogImported(db.Model):\n    id = db.Column(db.Integer, index=True, primary_key=True)\n    date = db.Column(db.DateTime, default=datetime.utcnow)\n    sender_address = db.Column(db.String(255), index=True)\n    recipient_address = db.Column(db.String(255))\n    recipient_count = db.Column(db.Integer)\n    return_path = db.Column(db.String(255))\n    client_hostname = db.Column(db.String(255))\n    client_ip = db.Column(db.String(100))\n    server_hostname = db.Column(db.String(255))\n    server_ip = db.Column(db.String(100))\n    original_client_ip = db.Column(db.String(100))\n    original_server_ip = db.Column(db.String(100))\n    event_id = db.Column(db.String(50))\n    total_bytes = db.Column(db.Integer)\n    connector_id = db.Column(db.String(50))\n    message_subject = db.Column(db.String(255))\n    source = db.Column(db.String(50))\ntemplates/index.html:\n{% extends \"base.html\" %}\n{% from 'bootstrap/form.html' import render_form %}\n{% from 'bootstrap/pagination.html' import render_pagination %}\n\n\n...\n\n{{ render_pagination(pagination) }}\n\n...\nActual Behavior\nIn short, get result from index's form then paginated,but any paginated links cannot work right.\nI set email and ip to session as session['email'] and session['ip'].\nThen,I click page 2,search these keywords by session to a object and paginate,but paginate() cannot work right, link like http://127.0.0.1:5000/index?page=2,response an error page:404.\nelif in routes.py:\nl = LogImported.query.filter(rule)\npagination = l.paginate(page, per_page=50, error_out=True)\nReturn type of l = LogImported.query.filter(rule) is right, but l.paginate(page, per_page=50, error_out=True) throw an error.\ncode blocked by if is work right, by in elif,same code response error.\nparameter rule is same at these two place. Why these bug raised?\n127.0.0.1 - - [11/Dec/2018 12:44:51] \"GET /index?page=2 HTTP/1.1\" 404 -\nEnvironment\nPython version: 3.7.1\nFlask version:1.0.2\nWerkzeug version:0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-12-11T04:53:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "229": {"issue_url": "https://github.com/pallets/flask/issues/3024", "issue_id": "#3024", "issue_summary": "static_host not requesting https", "issue_description": "BrendanMartin commented on 10 Dec 2018\nI have a Flask app on Google App Engine and my static files are in a Google bucket.\nI'm using static_host like so:\ndef create_app(config_name):\n    app = Flask(__name__, host_matching=True, static_host='storage.googleapis.com/mybucket')\nAnd I'm also using Flask-SSLify for the basic redirect from http to https:\napp = create_app(os.getenv('FLASK_CONFIG') or 'default')\nsslify = SSLify(app, permanent=True)\nBut when I launch on App Engine my static files won't load because they are being requested with http. In other words, my app is successfully on https but the static file URLs are being built like http://storage.googleapis.com/mybucket/... without https.\nIt seems SSLify is just building a before_request to do redirects, so I'm not sure where to tell Flask to request my static host with https.", "issue_status": "Closed", "issue_reporting_time": "2018-12-10T16:10:24Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "230": {"issue_url": "https://github.com/pallets/flask/issues/3023", "issue_id": "#3023", "issue_summary": "Cross-Site Scripting when using templates", "issue_description": "afd3dea commented on 9 Dec 2018\nExpected Behavior\nUsing templates should provide some protection against Cross-Site Scripting, based on the information at http://flask.pocoo.org/docs/1.0/security/\nFlask configures Jinja2 to automatically escape all values unless explicitly told otherwise. This should rule out all XSS problems caused in templates...\nActual Behavior\nI'm able to inject code into the page.\nDemo: https://github.com/afd3dea/example1\nhttp://127.0.0.1/?m=<script>alert(1);</script> executes (assuming XSS Auditor / AV doesn't block it)\nEnvironment\nPython version: Python 3.6.7\nFlask version: Tried on 0.12.1 and 1.0.2\nWerkzeug version: ?", "issue_status": "Closed", "issue_reporting_time": "2018-12-09T00:26:05Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "231": {"issue_url": "https://github.com/pallets/flask/issues/3022", "issue_id": "#3022", "issue_summary": "cli shouldn't mess with sys.argv", "issue_description": "Member\ndavidism commented on 9 Dec 2018 \u2022\nedited\nJust merged pallets/werkzeug#1416 so Werkzeug's reloader detects python -m module correctly. All of flask.cli.main() can be replaced with:\ndef main(as_module=False):\n    cli.main(prog_name=\"python -m flask\" if as_module else None)\nNeed to wait until Werkzeug 0.15 has been out for a bit before we can bump Flask's min version.", "issue_status": "Closed", "issue_reporting_time": "2018-12-08T22:35:36Z", "fixed_by": "#3185", "pull_request_summary": "Simplify flask.cli.main", "pull_request_description": "Contributor\nEtiennePelletier commented on 7 May 2019\nWerkzeug>=0.15's reloader now properly detects python -m module.\nFixes #3022\nThe PR #3181 is the one updating Werkzeug to >=0.15, so it should be merged first.", "pull_request_status": "Merged", "issue_fixed_time": "2019-05-19T04:19:58Z", "files_changed": [["3", "CHANGES.rst"], ["18", "flask/cli.py"]]}, "232": {"issue_url": "https://github.com/pallets/flask/issues/3020", "issue_id": "#3020", "issue_summary": "Build error when using url_for(request.endpoint)", "issue_description": "brenwickham commented on 8 Dec 2018 \u2022\nedited\nExpected Behavior\nI put this IF statement in my base.html template:\n    {% if \"dashboard\" in url_for(request.endpoint)  %}\n    <script src={{ url_for('static', filename='js/dashboard.js') }}></script>\n    {% endif %}\nI added an endpoint with a value. For example:\n@app.route(\"/accountmgmt/<int:userid>\",methods=[\"GET\",\"POST\"])\n@login_required\ndef accountmgmt(userid):\n   ... etc\nActual Behavior\nThe above code causes a build error, but only when an endpoint has a value (as above).\nWhen I remove the above IF statement from the template, the code does not error. But when it is included, I get this error (I am using the URL: http://127.0.0.1:5000/accountmgmt/123):\nCould not build url for endpoint 'accountmgmt'. Did you forget to specify values ['userid']?\nFile \"/Users/brendon/dev/nelliedata/flask/lib/python3.6/site-packages/flask/app.py\", line 2309, in __call__\nreturn self.wsgi_app(environ, start_response)\nFile \"/Users/brendon/dev/nelliedata/flask/lib/python3.6/site-packages/flask/app.py\", line 2295, in wsgi_app\nresponse = self.handle_exception(e)\nFile \"/Users/brendon/dev/nelliedata/flask/lib/python3.6/site-packages/flask/app.py\", line 1741, in handle_exception\nreraise(exc_type, exc_value, tb)\nFile \"/Users/brendon/dev/nelliedata/flask/lib/python3.6/site-packages/flask/_compat.py\", line 35, in reraise\nraise value\nFile \"/Users/brendon/dev/nelliedata/flask/lib/python3.6/site-packages/flask/app.py\", line 2292, in wsgi_app\nresponse = self.full_dispatch_request()\nFile \"/Users/brendon/dev/nelliedata/flask/lib/python3.6/site-packages/flask/app.py\", line 1815, in full_dispatch_request\nrv = self.handle_user_exception(e)\nFile \"/Users/brendon/dev/nelliedata/flask/lib/python3.6/site-packages/flask/app.py\", line 1718, in handle_user_exception\nreraise(exc_type, exc_value, tb)\nFile \"/Users/brendon/dev/nelliedata/flask/lib/python3.6/site-packages/flask/_compat.py\", line 35, in reraise\nraise value\nFile \"/Users/brendon/dev/nelliedata/flask/lib/python3.6/site-packages/flask/app.py\", line 1813, in full_dispatch_request\nrv = self.dispatch_request()\nFile \"/Users/brendon/dev/nelliedata/flask/lib/python3.6/site-packages/flask/app.py\", line 1799, in dispatch_request\nreturn self.view_functions[rule.endpoint](**req.view_args)\nFile \"/Users/brendon/dev/nelliedata/flask/lib/python3.6/site-packages/flask_login/utils.py\", line 261, in decorated_view\nreturn func(*args, **kwargs)\nFile \"/Users/brendon/dev/nelliedata/nellieapp/routes.py\", line 43, in accountmgmt\nreturn render_template(\"accountmgmt.html\",users=userlist, current_user=current_user,title=\"Nellie Data: Account Management\")\nFile \"/Users/brendon/dev/nelliedata/flask/lib/python3.6/site-packages/flask/templating.py\", line 135, in render_template\ncontext, ctx.app)\nFile \"/Users/brendon/dev/nelliedata/flask/lib/python3.6/site-packages/flask/templating.py\", line 117, in _render\nrv = template.render(context)\nFile \"/Users/brendon/dev/nelliedata/flask/lib/python3.6/site-packages/jinja2/asyncsupport.py\", line 76, in render\nreturn original_render(self, *args, **kwargs)\nFile \"/Users/brendon/dev/nelliedata/flask/lib/python3.6/site-packages/jinja2/environment.py\", line 1008, in render\nreturn self.environment.handle_exception(exc_info, True)\nFile \"/Users/brendon/dev/nelliedata/flask/lib/python3.6/site-packages/jinja2/environment.py\", line 780, in handle_exception\nreraise(exc_type, exc_value, tb)\nFile \"/Users/brendon/dev/nelliedata/flask/lib/python3.6/site-packages/jinja2/_compat.py\", line 37, in reraise\nraise value.with_traceback(tb)\nFile \"/Users/brendon/dev/nelliedata/nellieapp/templates/accountmgmt.html\", line 1, in top-level template code\n{% extends \"base.html\" %}\nFile \"/Users/brendon/dev/nelliedata/nellieapp/templates/base.html\", line 115, in top-level template code\n{% if \"test\" in url_for(request.endpoint)  %}\nFile \"/Users/brendon/dev/nelliedata/flask/lib/python3.6/site-packages/flask/helpers.py\", line 356, in url_for\nreturn appctx.app.handle_url_build_error(error, endpoint, values)\nFile \"/Users/brendon/dev/nelliedata/flask/lib/python3.6/site-packages/flask/app.py\", line 2061, in handle_url_build_error\nreraise(exc_type, exc_value, tb)\nFile \"/Users/brendon/dev/nelliedata/flask/lib/python3.6/site-packages/flask/_compat.py\", line 35, in reraise\nraise value\nFile \"/Users/brendon/dev/nelliedata/flask/lib/python3.6/site-packages/flask/helpers.py\", line 345, in url_for\nforce_external=external)\nFile \"/Users/brendon/dev/nelliedata/flask/lib/python3.6/site-packages/werkzeug/routing.py\", line 1776, in build\nraise BuildError(endpoint, values, method, self)\nwerkzeug.routing.BuildError: Could not build url for endpoint 'accountmgmt'. Did you forget to specify values ['userid']?\nEnvironment\nPython version: 3.6.5\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-12-08T00:46:56Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "233": {"issue_url": "https://github.com/pallets/flask/issues/3017", "issue_id": "#3017", "issue_summary": "Issues while using redis session", "issue_description": "Jatinbalodhi96 commented on 7 Dec 2018\nImplementing redis session by following this example http://flask.pocoo.org/snippets/75/ but getting\nraise TypeError('Expected bytes')\ncode I'm using\nError", "issue_status": "Closed", "issue_reporting_time": "2018-12-07T07:44:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "234": {"issue_url": "https://github.com/pallets/flask/issues/3016", "issue_id": "#3016", "issue_summary": "Request multiple files - New update old syntax does not work", "issue_description": "DanielKrsek commented on 6 Dec 2018 \u2022\nedited\nHi\nI have form(Form) which contains\n<form method=\"POST\" enctype=\"multipart/form-data\" action=\"{{ url_for('xxx') }}\">\n  <input type=\"file\" name=\"MultipleFileUpload\" multiple=\"\">\n  <input type=\"hidden\" name=\"csrf_token\" value=\"{{ csrf_token() }}\" />     \n  <input type=\"submit\" value=\"add\">\n</form>\nIt should upload multiple files but it does not.\nPython code\nob = request.files.getlist(\"MultipleFileUpload[]\")\nfor x in ob:\n     etc..\nThis was my old code which works perfectly\nI presume it was caused by update\nso I change it code to:\nob = request.files.getlist(\"MultipleFileUpload\")\nob = request.files.to_dict()\nNone of them works\nIt just upload 1 file or none\nPython version: 2.7.12 64-bit\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-12-06T10:09:24Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "235": {"issue_url": "https://github.com/pallets/flask/issues/3014", "issue_id": "#3014", "issue_summary": "server banner seems works not as expected", "issue_description": "lt94 commented on 5 Dec 2018 \u2022\nedited\nExpected Behavior\nI had already config the variable \"ENV\" in the config, which was set as 'development', It seemed that the banner should display \"Environment: development\",actually,it didn't. What's more, it worked with env development.\n# config\nclass Config:\n    # ...\n    @staticmethod\n    def init_app(app):\n        pass\nclass DevelopmentConfig(Config):\n    ENV='development'\n\ndef create_app(config_name):\n    app = Flask(__name__, static_folder='static', static_url_path='')\n\n    app.config.from_object(config[config_name])\n    config[config_name].init_app(app)\n    # ...\n    print(\"*Actual Environment: {}\".format(app.config['ENV']))\n    return app\n\n# wsgi.py\nfrom app import create_app\n\napplication = create_app('default')\nActual Behavior\n * Serving Flask app \"wsgi.py\"\n * Environment: production\n   WARNING: Do not use the development server in a production environment.\n   Use a production WSGI server instead.\n * Debug mode: off\n*Actual Environment:development\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\nEnvironment\nPython version: 3.6.5\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-12-05T01:50:47Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "236": {"issue_url": "https://github.com/pallets/flask/issues/3013", "issue_id": "#3013", "issue_summary": "I cant run more than one test case in flask", "issue_description": "southpush commented on 4 Dec 2018\nExpected Behavior\nI want to run my test case but it does not work if there are more than one case\nIf it's just one case ,everything is ok\nclass FlaskClientTestCase(unittest.TestCase):\ndef setUp(self):\nself.app = create_app(\"testing\")\nself.app_context = self.app.app_context()\nself.app_context.push()\ndb.create_all()\n    self.client = self.app.test_client(use_cookies=True)\n\ndef tearDown(self):\n    db.session.remove()\n    db.drop_all()\n    self.app_context.pop()\n\ndef test_one(self):\n    print(\"first test\")\n\ndef test_two(self):\n    print(\"second test\")\nPaste a minimal example that causes the problem.\nActual Behavior\nfirst test\nRan 2 tests in 4.127s\nFAILED (errors=1)\nError\nTraceback (most recent call last):\nFile \"C:\\Python35\\lib\\unittest\\case.py\", line 59, in testPartExecutor\nyield\nFile \"C:\\Python35\\lib\\unittest\\case.py\", line 597, in run\nself.setUp()\nFile \"E:\\pythonDump\\ordermeals\\tests\\test_client.py\", line 13, in setUp\nself.app = create_app(\"testing\")\nFile \"E:\\pythonDump\\ordermeals\\app_init_.py\", line 30, in create_app\ndb.init_app(app)\nAttributeError: module 'app.db' has no attribute 'init_app'\nProcess finished with exit code 1\nPaste the full traceback if there was an exception.\nEnvironment\nPython version:3.5\nFlask version:1.0.2\nWerkzeug version:0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-12-04T03:44:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "237": {"issue_url": "https://github.com/pallets/flask/issues/3012", "issue_id": "#3012", "issue_summary": "I can't get cookies in the decorator", "issue_description": "T-baby commented on 2 Dec 2018 \u2022\nedited\nExpected Behavior\ndef loged_validator(func):\n    @wraps(func)\n    def decorator(*args, **kwargs):\n        print(request.cookies)\n        token = request.cookies.get('token')\n        return func(*args, **kwargs)\n\n    return decorator\nActual Behavior\nI can't get cookies in the decorator. The token is None, but i can get token in the routing\u3002\n### Environment\n\n* Python version:3.7\n* Flask version:1.0.2", "issue_status": "Closed", "issue_reporting_time": "2018-12-02T14:13:15Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "238": {"issue_url": "https://github.com/pallets/flask/issues/3010", "issue_id": "#3010", "issue_summary": "Requests stop being processed when basic auth is expected but not provided", "issue_description": "sajohn2 commented on 1 Dec 2018 \u2022\nedited\nExpected Behavior\nSteps to reproducing the problem:\nMake a request that provides any basic auth\nMake a request without basic auth\nMake a request that provides any basic auth (this request is not being processed)\nI would expect the server to continue processing requests.\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n\n@app.route('/')\n@app.route('/api')\ndef api():\n    auth = request.authorization\n    if not auth:\n        return jsonify({'status': 'NO AUTH'})\n    return jsonify({'status': 'GOT AUTH'})\nActual Behavior\nThe server seems to hang on request 3.\nEnvironment\nPython version: 3.6.6\nFlask version: 1.0.2\nWerkzeug version: 0.14.1\nFull environment info:\nMacOS 10.13.6\nPython 3.6.6 (Anaconda)\nAll packages:\naniso8601==4.0.1\nClick==7.0\nFlask==1.0.2\nFlask-RESTful==0.3.6\nitsdangerous==1.1.0\nJinja2==2.10\nMarkupSafe==1.1.0\npytz==2018.7\nsix==1.11.0\nWerkzeug==0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-11-30T19:36:02Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "239": {"issue_url": "https://github.com/pallets/flask/issues/3008", "issue_id": "#3008", "issue_summary": "Unprintable characters found in log file", "issue_description": "chyun commented on 29 Nov 2018\nI found unprintable characters in log file, when flask got requests.\n2018-11-29 16:24:44,471 - INFO - _internal.py - _log - 88 - 192.168.241.129 - - [29/Nov/2018 16:24:44] \"^[[37mPOST /collection_act HTTP/1.1^[[0m\" 200 -$\n2018-11-29 16:24:44,481 - INFO - _internal.py - _log - 88 - 192.168.64.54 - - [29/Nov/2018 16:24:44] \"^[[37mPOST /classify HTTP/1.1^[[0m\" 200 -$\n2018-11-29 16:24:44,674 - INFO - _internal.py - _log - 88 - 100.116.37.130 - - [29/Nov/2018 16:24:44] \"^[[37mGET / HTTP/1.0^[[0m\" 200 -$\n2018-11-29 16:24:45,549 - INFO - _internal.py - _log - 88 - 100.116.38.1 - - [29/Nov/2018 16:24:45] \"^[[37mGET / HTTP/1.0^[[0m\" 200 -$\nThe strange \"^[[37m\" between \" and POST.\nEnvironment\nPython version: 2.7\nFlask version: 1.0.1\nWerkzeug version:0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-11-29T08:36:46Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "240": {"issue_url": "https://github.com/pallets/flask/issues/3007", "issue_id": "#3007", "issue_summary": "it is not working using flask_apscheduler in flask withoud reload", "issue_description": "imqi0qi commented on 28 Nov 2018\nExpected Behavior\ni hope people visit index, the flask application can create a schedule task and we can see the terminate print \"hello,world\" immediately.\n#--coding:utf-8 --*--\nimport sys\nimport os \nreload(sys)  \nsys.setdefaultencoding('utf-8')\n \nfrom flask import Flask\nfrom flask_apscheduler import APScheduler\n \nfrom apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore\n \nclass Config():\n    SCHEDULER_JOBSTORES = {\n            'default': SQLAlchemyJobStore(url='sqlite:///flask_aps_test.db')\n        }\n \n    SCHEDULER_API_ENABLED = True\n \n    JSON_AS_ASCII = False\n \n    ENSURE_ASCII = False\n \n    ENCODING = 'utf8'\n \n    DEBUG = True\n \n    THREADED = True\n \n    JSON_AS_ASCII = False\n \napp = Flask(__name__)\n \napp.config.from_object(Config())\n \nscheduler = APScheduler()\n \nscheduler.init_app(app)\n \nscheduler.start()\n \n \ndef hello():\n \n    print \"hello, world.\"\n \n@app.route('/index')\ndef test_aps():\n    print \"before,\",scheduler.get_jobs()\n \n    if scheduler.get_job(id='1001'):\n \n        scheduler.remove_job(id = '1001')\n \n    else:\n        scheduler.add_job( id = '1001',\n                        func = hello,\n                        trigger = 'interval',\n                        seconds = 5,\n                        replace_existing = True)\n \n    print \"after,\",scheduler.get_jobs()\n \n    return \"ok.\"\n \n \nif __name__ == '__main__':\n \n    app.run(processes = 2)\nActual Behavior\nwe can't see anything, no error and warning. if i reload the code or set processes = 1 then it work immediately.\nEnvironment\nPython version:2.7.14\nFlask version:0.12.2", "issue_status": "Closed", "issue_reporting_time": "2018-11-28T10:34:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "241": {"issue_url": "https://github.com/pallets/flask/issues/3006", "issue_id": "#3006", "issue_summary": "How can I achieve this structure?", "issue_description": "acodercat commented on 28 Nov 2018\nExpected Behavior\nHow can I achieve this structure?\nEnvironment\nPython version:3.7\nFlask version:1.0.3\nWerkzeug version:", "issue_status": "Closed", "issue_reporting_time": "2018-11-28T09:51:48Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "242": {"issue_url": "https://github.com/pallets/flask/issues/3005", "issue_id": "#3005", "issue_summary": "Default help messages for Flask CLI use inconsistent tenses (in English)", "issue_description": "chardbury commented on 28 Nov 2018\nExpected Behavior\nHelp texts for commands (and options) should consistently use either the imperative or present tense, not a mixture of both. This has no impact on the functional behaviours of the CLI, just a minor UX error.\nActual Behavior\nExecuting flask --help gives:\n[... snip ...]\n\nOptions:\n  --version  Show the flask version\n  --help     Show this message and exit.\n\nCommands:\n  routes           Show the routes for the app.\n  run              Runs a development server.\n  shell            Runs a shell in the app context.\nNote that run and shell are using present tense whereas routes, --version and --help are using the imperative.\nEnvironment\nPython version: 3.7.0\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-11-28T01:34:23Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "243": {"issue_url": "https://github.com/pallets/flask/issues/3003", "issue_id": "#3003", "issue_summary": "Stop raising FormDataRoutingRedirect", "issue_description": "Member\ndavidism commented on 23 Nov 2018\npallets/werkzeug#1342 sets the status code for RequestRedirect to 308, so the request body (form data) will be preserved. We no longer need to fail with FormDataRoutingRedirect. @pgjones", "issue_status": "Closed", "issue_reporting_time": "2018-11-22T18:34:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "244": {"issue_url": "https://github.com/pallets/flask/issues/3002", "issue_id": "#3002", "issue_summary": "cannot deepcopy flask request ?", "issue_description": "iyaozhen commented on 20 Nov 2018\nMy code:\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport copy\n\nfrom flask import Flask\nfrom flask import request\n\napp = Flask(__name__)\n\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n\n\n@app.before_request\ndef before_request():\n    request_copy = copy.deepcopy(request)\n    print request_copy.path\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\nAs you see, I want copy request and log something. But it is not work.\n\u2026\u2026\n  File \"\u2026\u2026/python2.7/copy.py\", line 163, in deepcopy\n    y = copier(x, memo)\n  File \"\u2026\u2026/python2.7/copy.py\", line 257, in _deepcopy_dict\n    y[deepcopy(key, memo)] = deepcopy(value, memo)\n  File \"\u2026\u2026/python2.7/copy.py\", line 174, in deepcopy\n    y = copier(memo)\nTypeError: cannot deepcopy this pattern object\nAnd copy.copy() work well.\nEnvironment\nPython version: 2.7.15\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-11-20T07:54:10Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "245": {"issue_url": "https://github.com/pallets/flask/issues/3000", "issue_id": "#3000", "issue_summary": "Online documentation correction (Standalone WSGI Containers)", "issue_description": "jefmud commented on 19 Nov 2018\nTiny correction to the documentation on GEvent as a WSGI standalone container.\nhttp://flask.pocoo.org/docs/1.0/deploying/wsgi-standalone/#gevent\nfrom gevent.wsgi import WSGIServer # incorrect\nfrom gevent.pywsgi import WSGIServer # correct\nfrom yourapplication import app\n\nhttp_server = WSGIServer(('', 5000), app)\nhttp_server.serve_forever()\nThanks for all the hard work!\nJeff", "issue_status": "Closed", "issue_reporting_time": "2018-11-19T15:15:15Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "246": {"issue_url": "https://github.com/pallets/flask/issues/2999", "issue_id": "#2999", "issue_summary": "Running flask in a thread with Kivy causes no requests to be printed out", "issue_description": "s1113950 commented on 18 Nov 2018\nExpected Behavior\nServer errors or I see a traceback. I'm trying to run a little flask app as part of a kivy frontend (goal to make a multiplayer card game app). In a later endpoint I typed njwfnof to simulate an error and nothing happened when the endpoint was hit. Is this intended?\nclass FlaskThread(Thread):\n    def __init__(self, *args, **kwargs):\n        self.root = kwargs.pop('root')\n        super().__init__(*args, **kwargs)\n\n    def run(self):\n        app.root = self.root\n        app.run(\n            host='127.0.0.1', port=8888, debug=True, use_debugger=True,\n            # setting use_reloader to False because it can't be True if not run in main thread\n            use_reloader=False)\nActual Behavior\nServer stays up but nothing happens\nEnvironment\nPython version: 3.6.4\nFlask version: Flask 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-11-18T03:15:28Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "247": {"issue_url": "https://github.com/pallets/flask/issues/2998", "issue_id": "#2998", "issue_summary": "Using logging's root logger before app.run() breaks Flask logging", "issue_description": "ramnes commented on 17 Nov 2018\nOn latest PyPI's release (1.0.2), using logging's root logger before running Flask breaks its logging.\nFor example, with such a run.py file:\nimport logging\nimport flask\n\nlogging.info(\"it breaks\")\nflask.Flask(__name__).run()\npython run.py outputs this:\n * Serving Flask app \"run\" (lazy loading)\n * Environment: production\n   WARNING: Do not use the development server in a production environment.\n   Use a production WSGI server instead.\n * Debug mode: off\nand then stops any kind of logging.\nThe application is running and answering, but you don't get the Running on http://... line, nor any request logging.\nIt's worth noting that using the root logger inside a route doesn't break Flask.\n2", "issue_status": "Closed", "issue_reporting_time": "2018-11-16T19:38:10Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "248": {"issue_url": "https://github.com/pallets/flask/issues/2995", "issue_id": "#2995", "issue_summary": "How to get a handle_request method for just handle one request", "issue_description": "liudonghua123 commented on 13 Nov 2018\nExpected Behavior\nI tried to write a flask builder for now, and from the exist HTTPServer example https://github.com/liudonghua123/now-builders/blob/master/packages/now-python/now_handler.py, I should get a handle_request method executed when a new incoming request arrived.\nBut after driving into the acturally code, I could not found such a method. Some code may be add into flask and werkzeug both.\nimport json\nimport requests\nfrom __NOW_HANDLER_FILENAME import app\nimport _thread\n\n\ndef now_handler(event, context):\n    _thread.start_new_thread(app.handle_request, ())\n    payload = json.loads(event['body'])\n    path = payload['path']\n    headers = payload['headers']\n    method = payload['method']\n    \n    res = requests.request(method, 'http://0.0.0.0:3000' + path, headers=headers)\n\n    return {\n        'statusCode': res.status_code,\n        'headers': dict(res.headers),\n        'body': res.text\n    }\nThe __NOW_HANDLER_FILENAME file contents may like this\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\nActual Behavior\nThe handle_request or like method does not exist.\nEnvironment\nPython version: 3.7.0\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-11-13T01:21:30Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "249": {"issue_url": "https://github.com/pallets/flask/issues/2992", "issue_id": "#2992", "issue_summary": "Custom exception handler not working when an exception is thrown from streaming a generator", "issue_description": "trstringer commented on 9 Nov 2018\nExpected Behavior\nWhen streaming from a generator, if there is an exception thrown then the application's custom exception handler should catch this exception.\nfrom flask import Flask, Response\n\napp = Flask(__name__)\n\n@app.route('/')\ndef default_route():\n    return 'hello world'\n\n@app.route('/error')\ndef error_route():\n    raise Exception('error in error_route')\n\n@app.route('/streamingerror')\ndef streaming_error_route():\n    def inner_gen():\n        raise Exception('error from streaming_error_route')\n        yield 'hello'\n    return Response(inner_gen())\n\n@app.errorhandler(Exception)\ndef custom_exception_handler(_):\n    return 'handled by custom exception handler'\nActual Behavior\n $ curl localhost:5000\nhello world~\n $ curl localhost:5000/error\nhandled by custom exception handler~\n $ curl localhost:5000/streamingerror\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<title>500 Internal Server Error</title>\n<h1>Internal Server Error</h1>\n<p>The server encountered an internal error and was unable to complete your request.  Either the server is overloaded or there is an error in the application.</p>\nThe request to /streamingerror should also pass through the custom exception handler.\nEnvironment\nPython version: 3.6.3\nFlask version: 1.0.2\nWerkzeug version: 0.14.1\nOther notes\nI had tried with stream_with_context and the same behavior still exists.\n4", "issue_status": "Closed", "issue_reporting_time": "2018-11-09T15:28:44Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "250": {"issue_url": "https://github.com/pallets/flask/issues/2989", "issue_id": "#2989", "issue_summary": "Flask doesn't auto-escape files not ending in html, htm, xml, xhtml", "issue_description": "ColdHeat commented on 7 Nov 2018\n    def select_jinja_autoescape(self, filename):\n        \"\"\"Returns ``True`` if autoescaping should be active for the given\n        template name. If no template name is given, returns `True`.\n\n        .. versionadded:: 0.5\n        \"\"\"\n        if filename is None:\n            return True\n        return filename.endswith(('.html', '.htm', '.xml', '.xhtml'))\nThis seems odd. Why not just autoescape all file extensions. Or at least include .j2 and .jinja2?", "issue_status": "Closed", "issue_reporting_time": "2018-11-07T04:18:28Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "251": {"issue_url": "https://github.com/pallets/flask/issues/2988", "issue_id": "#2988", "issue_summary": "Relationship error", "issue_description": "Tryptich commented on 4 Nov 2018 \u2022\nedited by ThiefMaster\nHi, I have two classes with one-to-many relation type between them. when I want to retrieve one element on the parent objet, I get the error:\nrelationship 'recipes' expects a class or a mapper argument (received: <class 'sqlalchemy.sql.schema.Table'>)\nthis is my classes ;\nparent :\nclass UserJsonSerializer(JsonSerializer):\n    __json_public__ = ['id', 'email']\n\n\nclass User(UserJsonSerializer, db.Model):\n    __tablename__ = 'users'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    public_id = db.Column(db.String(36),  primary_key=True,\n                          default=str(uuid.uuid4()))\n    username = db.Column(db.String(255))\n    email = db.Column(db.String(255), unique=True)\n    password_hash = db.Column(db.String(128))\n    _avatar_url = db.Column(db.String(260), nullable=True)\n    reputation = db.Column(db.Integer, default=0)\n    email_confirmation_sent_on = db.Column(\n        db.DateTime,  default=datetime.datetime.utcnow)\n    email_confirmed = db.Column(db.Boolean, nullable=True, default=False)\n    email_confirmed_on = db.Column(\n        db.DateTime, default=datetime.datetime.utcnow)\n    registered_on = db.Column(db.DateTime, default=datetime.datetime.utcnow)\n    last_login_at = db.Column(db.DateTime())\n    current_login_at = db.Column(db.DateTime())\n    last_login_ip = db.Column(db.String(100))\n    current_login_ip = db.Column(db.String(100))\n    login_count = db.Column(db.Integer)\n    roles = db.relationship('Role', secondary=roles_users,\n                            backref=db.backref('users', lazy='dynamic'))\n    recipes = db.relationship('Recipe', backref='user', lazy='dynamic')\n\n    @property\n    def password(self):\n        raise AttributeError('password: write-only field')\n\n    @password.setter\n    def password(self, password):\n        self.password_hash = bcrypt.generate_password_hash(\n            password).decode('utf-8')\n\n    def check_password(self, password):\n        return bcrypt.check_password_hash(self.password_hash, password)\n\n    @property\n    def avatar_url(self):\n        if not self._avatar_url:\n            return None\n        if self._avatar_url.startswith('http'):\n            return self._avatar_url\n        base = current_app.config['ZERQU_AVATAR_BASE']\n        return '%s%s' % (base, self._avatar_url)\nchild : \nclass Recipe(db.Model):\n    \"\"\"Recipe fields to add:\n        date last modified\n    \"\"\"\n    __tablename__ = \"Recipes\"\n\n    id = db.Column(db.Integer, autoincrement=True, primary_key=True)\n    public_id = db.Column(db.String(100), unique=True,\n                          default=str(uuid.uuid4()))\n    recipe_title = db.Column(db.String, nullable=True)\n    recipe_description = db.Column(db.String, nullable=True)\n    is_public = db.Column(db.Boolean, nullable=True)\n    image_filename = db.Column(db.String, default=None, nullable=True)\n    image_url = db.Column(db.String, default=None, nullable=True)\n    recipe_type = db.Column(db.String, default=None,\n                            nullable=True)  # TODO:recipe type update\n    rating = db.Column(db.Integer, default=None, nullable=True)\n    ingredients = db.Column(db.Text, default=None, nullable=True)\n    ingredients_html = db.Column(db.Text, default=None, nullable=True)\n    recipe_steps = db.Column(db.Text, default=None, nullable=True)\n    recipe_steps_html = db.Column(db.Text, default=None, nullable=True)\n    inspiration = db.Column(db.String, default=None, nullable=True)\n    dairy_free_recipe = db.Column(db.Boolean, nullable=True)\n    soy_free_recipe = db.Column(db.Boolean, nullable=True)\n    cholesterol_free_recipe = db.Column(db.Boolean, nullable=True)\n    created_on = db.Column(db.DateTime, nullable=False,\n                           default=datetime.datetime.utcnow)\n    updated_on = db.Column(db.DateTime, onupdate=datetime.datetime.utcnow)\n    created_by = db.Column(db.Integer, db.ForeignKey('users.id'))\n    category_id = db.Column(\n        db.Integer, db.ForeignKey('categories.id'))\n\nand this is the query: \n@staticmethod\n    def login_user(data):\n        try:\n            # fetch the user data\n            user = User.query.filter_by(email=data.get('email')).first() <-- this is the query\n            if user and user.check_password(data.get('password')):\n                auth_token = user.encode_auth_token(user.id)\n                if auth_token:\n                    response_object = {\n                        'status': 'success',\n                        'message': 'Successfully logged in.',\n                        'Authorization': auth_token.decode()\n                    }\n                    return response_object, 200\n            else:\n                response_object = {\n                    'status': 'fail',\n                    'message': 'email or password does not match.'\n                }\n                return response_object, 401\n\n        except Exception as e:\n            print(e)\n            response_object = {\n                'status': 'fail',\n                'message': 'Try again'\n            }\n            return response_object, 500\nEnvironment\nPython version: 3.7.0\nFlask version: 0.12.2\nWerkzeug version:", "issue_status": "Closed", "issue_reporting_time": "2018-11-03T20:10:24Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "252": {"issue_url": "https://github.com/pallets/flask/issues/2987", "issue_id": "#2987", "issue_summary": "Documentation: Request object API documentation refers to \"trusted_hosts\" - not clear", "issue_description": "dannystaple commented on 3 Nov 2018\nExpected Behavior\nAt the flask documentation for the request context/object http://flask.pocoo.org/docs/1.0/api/#incoming-request-data many items in the section say \"see also trusted_hosts\". For example http://flask.pocoo.org/docs/1.0/api/#flask.Request.host.\nThis should be a link, or obvious where to follow to understand what this is.\nActual Behavior\nThere isn't a link, and it's not clear what the see also is referring to (perhaps in werkzeug?)\nEnvironment\nhttp://flask.pocoo.org/docs/1.0/api/#incoming-request-data", "issue_status": "Closed", "issue_reporting_time": "2018-11-03T12:12:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "253": {"issue_url": "https://github.com/pallets/flask/issues/2985", "issue_id": "#2985", "issue_summary": "Improper digest_method", "issue_description": "travisreed-wf commented on 2 Nov 2018 \u2022\nedited\nExpected Behavior\nFlask should be able to read session data\nActual Behavior\nwith itsdangerous >= 1.0.0 flask cannot read session data if the session data was written by itsdangerous < 1.0.0\nSession: <SecureCookieSession {}>\nitsdangerous.exc.BadTimeSignature is being raised and then caught here\nitsdangerous is allowed to bump major versions\nitsdangerous recently changed its digest_method\nThis digest method is now wrong\nEnvironment\nPython version: Python 2.7.6\nFlask version: 0.10.1\nWerkzeug version: 0.14.1\nitsdangerous version: 1.1.0", "issue_status": "Closed", "issue_reporting_time": "2018-11-01T20:08:02Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "254": {"issue_url": "https://github.com/pallets/flask/issues/2984", "issue_id": "#2984", "issue_summary": "HTTPException handler catches non-error exceptions like RequestRedirect", "issue_description": "Contributor\ntaion commented on 2 Nov 2018 \u2022\nedited\nThis is related to #2841, but the emphasis is different.\nExpected Behavior\nNon-error exceptions should not be caught by registered error handlers.\napp.register_error_handler(HTTPException, my_error_handler)\n\n@app.route('/path-with-slash/')\ndef my_route():\n    return '', 204\nAttempting to visit /path-with-slash should redirect to /path-with-slash/, without invoking my_error_handler.\nActual Behavior\nAs the RequestRedirect raised internally in Werkzeug is a subclass of HTTPException, my_error_handler will get called. This is unexpected because no error has occurred, and the only appropriate way to handle this case is to add boilerplate to re-raise any Werkzeug RoutingExceptions.\nEnvironment\nPython version: 3.7.0\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-11-01T18:48:57Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "255": {"issue_url": "https://github.com/pallets/flask/issues/2981", "issue_id": "#2981", "issue_summary": "Patterns Method Overrides", "issue_description": "Bernardoow commented on 1 Nov 2018\nI tried use Method override pattner and it was crashed when method.encode('ascii', 'replace') because the next method needs string value and not byte value.", "issue_status": "Closed", "issue_reporting_time": "2018-10-31T20:53:51Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "256": {"issue_url": "https://github.com/pallets/flask/issues/2980", "issue_id": "#2980", "issue_summary": "Hot Reloader Causing Re-initialization Issues after Exception", "issue_description": "cancan101 commented on 31 Oct 2018 \u2022\nedited\nI am running flask dev server using the flask command. If an exception is thrown (such as syntax error) and then fixed. The next reload fails with some sort of issues having to due with attempting to reinitialize extensions. For example I get the following error from flask-admin (though depending on order of imports I get similar errors from other extensions):\nAssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x1118b96d8> and <flask.blueprints.Blueprint object at 0x1042880b8>. Both share the same name \"admin\". Blueprints that are created on the fly need unique names.\nI don't think this is the same issue as #2423 as I can trigger the problem with non syntax error (ie a name error a module scope).\nEnvironment\nPython version:\n3.7\nFlask version:\nflask==1.0.2\nWerkzeug version:\nwerkzeug==0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-10-31T17:07:31Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "257": {"issue_url": "https://github.com/pallets/flask/issues/2979", "issue_id": "#2979", "issue_summary": "Importing module breaks Flask logging", "issue_description": "Nolaan commented on 31 Oct 2018 \u2022\nedited\nExpected Behavior\nThe following code should be able to log to stderr, however app.logger.* does nothing\nimport os                                             \n                                                      \nfrom flask import Flask                               \nimport bitcoinlib # Un/commenting this line will brake flask logger                                 \n                                                      \napp = Flask(__name__, instance_relative_config=True)  \n                                                      \n@app.route('/hello')                                  \ndef hello():                                          \n    return 'Hello, World!'                            \n                                                      \n                                                      \nif __name__ == '__main__':                            \n    app.debug = True                                  \n    app.logger.debug(\"Launched\")                      \n    app.run()                                         \nActual Behavior\nNo log messages on the console when using app.logger.*\nEnvironment\nPython version: 2.7.15\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-10-31T09:10:57Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "258": {"issue_url": "https://github.com/pallets/flask/issues/2978", "issue_id": "#2978", "issue_summary": "blueprint in a blueprint", "issue_description": "Yar-R commented on 30 Oct 2018\nit woul be great if it would be possible to register a blueprint inside of an other blueprint\nto increase modularity", "issue_status": "Closed", "issue_reporting_time": "2018-10-30T08:50:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "259": {"issue_url": "https://github.com/pallets/flask/issues/2977", "issue_id": "#2977", "issue_summary": "Serial port access problem in DEBUG mode.", "issue_description": "edouin commented on 30 Oct 2018 \u2022\nedited\nExpected Behavior\nSending commands through the serial port.\napp = Flask(__name__)\nserialPort = serial.Serial(port = \"COM5\", baudrate=1000000,\n                           bytesize=8, timeout=2, stopbits=serial.STOPBITS_ONE)\n\nlamp = {\n   1 : {'name' : 'n1', 'state' : True},\n   2 : {'name' : 'n2', 'state' : True} \n}\n\n@app.route(\"/\")\ndef hello():\n   templateData = {\n      'lamp': lamp\n      }\n\n   \n   return render_template('main.html', **templateData)\n\n\n@app.route(\"/setPin/<action>\")\ndef action(action):\n\n   if action == \"on\":\n\n      serialPort.write(b\"n2c1111\\r\\n\")\n      lamp[1][\"state\"] = True\n\n   if action == \"off\":\n      serialPort.write(b\"n2c0000\\r\\n\")\n      lamp[1][\"state\"] = False\n\n\n   templateData = {\n      'lamp': lamp\n   }\n\n   return render_template('main.html', **templateData)\n\nif __name__ == \"__main__\":\n   app.run(host='0.0.0.0', port=5000, debug=True)\nActual Behavior\nI can not access the serial port with FLASK_ENV = development and FLASK_DEBUG = 1. Everything works fine with DEBUG mode disabled.\nFLASK_APP = app.py\nFLASK_ENV = development\nFLASK_DEBUG = 1\nIn folder C:/Users/user/PycharmProjects/Ho_server\nC:\\Users\\user\\Anaconda3\\python.exe -m flask run\n * Serving Flask app \"app.py\" (lazy loading)\n * Environment: development\n * Debug mode: on\n * Restarting with stat\n * Debugger is active!\n * Debugger PIN: 138-068-963\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n127.0.0.1 - - [30/Oct/2018 10:49:27] \"GET /setPin/on HTTP/1.1\" 500 -\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Anaconda3\\lib\\site-packages\\flask\\_compat.py\", line 35, in reraise\n    raise value\n  File \"C:\\Users\\user\\PycharmProjects\\H_server\\app.py\", line 8, in <module>\n    bytesize=8, timeout=2, stopbits=serial.STOPBITS_ONE)\n  File \"C:\\Users\\user\\Anaconda3\\lib\\site-packages\\serial\\serialwin32.py\", line 31, in __init__\n    super(Serial, self).__init__(*args, **kwargs)\n  File \"C:\\Users\\user\\Anaconda3\\lib\\site-packages\\serial\\serialutil.py\", line 240, in __init__\n    self.open()\n  File \"C:\\Users\\user\\Anaconda3\\lib\\site-packages\\serial\\serialwin32.py\", line 62, in open\n    raise SerialException(\"could not open port {!r}: {!r}\".format(self.portstr, ctypes.WinError()))\nserial.serialutil.SerialException: could not open port 'COM5': PermissionError(13, 'Access is denied.', None, 5)\nEnvironment\nPython version: 3.6.5\nFlask version: 1.0.2", "issue_status": "Closed", "issue_reporting_time": "2018-10-30T02:01:18Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "260": {"issue_url": "https://github.com/pallets/flask/issues/2974", "issue_id": "#2974", "issue_summary": "myissues", "issue_description": "zahedbri commented on 29 Oct 2018\nThis issue tracker is a tool to address bugs in Flask itself.\nPlease use the #pocoo IRC channel on freenode or Stack Overflow for general\nquestions about using Flask or issues not related to Flask.\nIf you'd like to report a bug in Flask, fill out the template below. Provide\nany extra information that may be useful / related to your problem.\nIdeally, create an MCVE, which helps us\nunderstand the problem and helps check that it is not caused by something in\nyour code.\nExpected Behavior\nTell us what should happen.\nPaste a minimal example that causes the problem.\nActual Behavior\nTell us what happens instead.\nPaste the full traceback if there was an exception.\nEnvironment\nPython version:\nFlask version:\nWerkzeug version:", "issue_status": "Closed", "issue_reporting_time": "2018-10-29T11:36:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "261": {"issue_url": "https://github.com/pallets/flask/issues/2972", "issue_id": "#2972", "issue_summary": "Examples page", "issue_description": "Jonesn11 commented on 27 Oct 2018 \u2022\nedited by ThiefMaster\nOn the examples page: http://flask.pocoo.org/community/poweredby/\nmany links are dead.\nI think this prevents newcomers from being awe-inspired by what one can do with flask.", "issue_status": "Closed", "issue_reporting_time": "2018-10-27T18:23:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "262": {"issue_url": "https://github.com/pallets/flask/issues/2967", "issue_id": "#2967", "issue_summary": "Documentation: Explicitly stating where to run `flask run` command for Tutorial", "issue_description": "Contributor\nstepharr commented on 26 Oct 2018\nWould it be beneficial to others following the tutorial to explicitly say that you should run the flask run command in the parent directory of \"flaskr\" and not in \"flaskr\"? I stumbled on this getting an error when trying to run the flask developer server from the flaskr directory while following along in the tutorial\nhttps://github.com/pallets/flask/blob/master/docs/tutorial/factory.rst", "issue_status": "Closed", "issue_reporting_time": "2018-10-26T01:43:34Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "263": {"issue_url": "https://github.com/pallets/flask/issues/2965", "issue_id": "#2965", "issue_summary": "Template not update", "issue_description": "nkthanh98 commented on 25 Oct 2018\nJinja2 template not update\nExpected Behavior\nTell us what should happen.\nPaste a minimal example that causes the problem.\nActual Behavior\nTell us what happens instead.\nPaste the full traceback if there was an exception.\nEnvironment\nPython version: 3.6.4\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-10-25T02:01:28Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "264": {"issue_url": "https://github.com/pallets/flask/issues/2961", "issue_id": "#2961", "issue_summary": "Flask doens't run when APP is specified with full path", "issue_description": "stillesjo commented on 23 Oct 2018 \u2022\nedited\nExpected Behavior\nPreviously in our development environment we ran flask app from vscode but after we updated to the latest version of flask we started experiencing problems. After some investigation I found out that in our run configuration we specify the whole path to the app.py-file. Changing to just referencing it directly (i.e. app.py instead of C:\\Path\\To\\My\\app.py) I got it to work.\nI recreated the fault in another simpler environment:\nThe following command runs\nenv \"FLASK_APP=`pwd`/app.py\" \"FLASK_ENV=Development\" \"FLASK_DEBUG=1\" env/Scripts/python.exe -m flask run\nbut when you try to access localhost:5000/ you get the following error\n  File \"C:\\Users\\AlexanderS\\code\\flask-bugg\\env\\lib\\site-packages\\flask\\cli.py\", line 330, in __call__\n    rv = self._load_unlocked()\n  File \"C:\\Users\\AlexanderS\\code\\flask-bugg\\env\\lib\\site-packages\\flask\\cli.py\", line 317, in _load_unlocked\n    self._app = rv = self.loader()\n  File \"C:\\Users\\AlexanderS\\code\\flask-bugg\\env\\lib\\site-packages\\flask\\cli.py\", line 372, in load_app\n    app = locate_app(self, import_name, name)\n  File \"C:\\Users\\AlexanderS\\code\\flask-bugg\\env\\lib\\site-packages\\flask\\cli.py\", line 246, in locate_app\n    'Could not import \"{name}\".'.format(name=module_name)\nflask.cli.NoAppException: Could not import \"C\".\nActual Behavior\nThe application should run without errors.\nEnvironment\nPython version: 3.6.5\nFlask version: 1.0.2\nWerkzeug version: 0.14.1\nRecreated the bug with the follow app.py\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello world2'", "issue_status": "Closed", "issue_reporting_time": "2018-10-23T12:15:47Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "265": {"issue_url": "https://github.com/pallets/flask/issues/2960", "issue_id": "#2960", "issue_summary": "Deep copy of request in copy_current_request_context function?", "issue_description": "okeuday commented on 23 Oct 2018 \u2022\nedited\nDesiring a deep copy of session RequestContext data is present as a separate issue and pull request. This issue is focused on desiring a deep copy of the request RequestContext data for use in a separate thread. To pursue this, it is necessary to copy the environ data in a new function or the same copy_current_request_context function with a boolean argument to enable the deep copy.\nExpected Behavior\nFor using a thread with a copy of a request, it is advantageous to have the functionality present in copy_current_request_context, though the request needs a deep copy instead of a shallow copy. Based on the code comment of the RequestContext copy function, the intent of the function was a shallow copy, due to \"Because the actual request object is the same this cannot be used to move a request context to a different thread unless access to the request object is locked.\".\nFor having a copy of a request for a separate thread, I found it necessary to modify the flask.copy_current_request_context function to be:\ndef _copy_current_request_context(function):\n    top = _request_ctx_stack.top\n    if top is None:\n        raise RuntimeError('This decorator can only be used at local scopes '\n                           'when a request context is on the stack.  '\n                           'For instance within view functions.')\n    reqctx = top.copy()\n    # environ is used by headers too, so only a copy of environ is necessary\n    reqctx.request.environ = reqctx.request.environ.copy()\n    def wrapper(*args, **kwargs):\n        with reqctx:\n            return function(*args, **kwargs)\n    return update_wrapper(wrapper, function)\nIf the request environ is not copied, it is possible with flask 1.0.2 to have older requests in a separate thread read the environ data from newer requests with methods like request.method, which is not desirable at all. I am not suggesting modifying flask.copy_current_request_context to be like the source code above (1 line change), but rather suggesting the RequestContext copy function could be modified to create a deep copy of a request by providing an environ.copy() to the RequestContext class to create a new request object. The deep copy could occur based on a boolean keyword argument added to flask.copy_current_request_context.\nHowever, if you want that functionality for threads, you also need to be able to copy the current_app context:\ndef _copy_current_app_context(function):\n    app_context = _app_ctx_stack.top\n    def current_app_context_decorator(*args, **kwargs):\n        with app_context:\n            return function(*args, **kwargs)\n    return current_app_context_decorator\nThen you would want to use them together with a single decorator:\ndef bind_context(function):\n    function = _copy_current_request_context(function)\n    function = _copy_current_app_context(function)\n    return function\nActual Behavior\nflask.copy_current_request_context will only do a shallow copy and the copy_current_app_context decorator is not provided, nor is the bind_context decorator. That makes development with threads require more custom source code and be more error-prone than it needs to be.\nEnvironment\nPython version: 2.7.9\nFlask version: 1.0.2\nWerkzeug version: 0.14.1\n2", "issue_status": "Closed", "issue_reporting_time": "2018-10-23T05:04:31Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "266": {"issue_url": "https://github.com/pallets/flask/issues/2959", "issue_id": "#2959", "issue_summary": "Tutorial coverage section needs update", "issue_description": "cheeseinvert commented on 23 Oct 2018\nThis issue tracker is a tool to address bugs in Flask itself.\nPlease use the #pocoo IRC channel on freenode or Stack Overflow for general\nquestions about using Flask or issues not related to Flask.\nIf you'd like to report a bug in Flask, fill out the template below. Provide\nany extra information that may be useful / related to your problem.\nIdeally, create an MCVE, which helps us\nunderstand the problem and helps check that it is not caused by something in\nyour code.\nExpected Behavior\n$ coverage run -m pytest\nName                 Stmts   Miss Branch BrPart  Cover\n------------------------------------------------------\nflaskr/__init__.py      22      0      2      0   100%\nflaskr/auth.py          54      0     22      0   100%\nflaskr/blog.py          54      0     16      0   100%\nflaskr/db.py            24      0      4      0   100%\n------------------------------------------------------\nTOTAL                  154      0     44      0   100%\nActual Behavior\n$ coverage run -m pytest\n============================================================== test session starts ==============================================================\nplatform darwin -- Python 2.7.10, pytest-3.9.1, py-1.7.0, pluggy-0.8.0\nrootdir: /Users/adamg9999/Development/flask-tutorial, inifile: setup.cfg\ncollected 24 items\n\ntests/test_auth.py ........                                                                                                               [ 33%]\ntests/test_blog.py ............                                                                                                           [ 83%]\ntests/test_db.py ..                                                                                                                       [ 91%]\ntests/test_factory.py ..                                                                                                                  [100%]\n\n=========================================================== 24 passed in 1.15 seconds ===========================================================\nfor coverage > 4.0 need to first run coverage run -m pytest this will print the pytest output to STDOUT, then a followup coverage report will output the expected report:\nName                 Stmts   Miss Branch BrPart  Cover\n------------------------------------------------------\nflaskr/__init__.py      22      0      2      0   100%\nflaskr/auth.py          54      0     22      0   100%\nflaskr/blog.py          54      0     16      0   100%\nflaskr/db.py            24      0      4      0   100%\n------------------------------------------------------\nTOTAL                  154      0     44      0   100%```\n\n### Environment\n\n$ python --version\nPython 2.7.10 :: Continuum Analytics, Inc.\n(py2.7.10) adamg9999 flask-tutorial\n$ flask --version\nFlask 1.0.2\n$ coverage --version\nCoverage.py, version 4.5.1 with C extension", "issue_status": "Closed", "issue_reporting_time": "2018-10-22T21:46:33Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "267": {"issue_url": "https://github.com/pallets/flask/issues/2958", "issue_id": "#2958", "issue_summary": "Bug in the Tutorial Testing - Resolved", "issue_description": "flibedin commented on 22 Oct 2018 \u2022\nedited\nThis issue tracker is a tool to address bugs in Flask itself.\nPlease use the #pocoo IRC channel on freenode or Stack Overflow for general\nquestions about using Flask or issues not related to Flask.\nIf you'd like to report a bug in Flask, fill out the template below. Provide\nany extra information that may be useful / related to your problem.\nIdeally, create an MCVE, which helps us\nunderstand the problem and helps check that it is not caused by something in\nyour code.\nExpected Behavior\nFollowing the Tutorial step by step I received errors when testing HTTP requests.\nThe errors where caused for a missing 'WTF_CSRF_ENABLED' in the app config.\nin file conftest.py changed the create_app to:\napp = create_app({\n'TESTING': True,\n'DATABASE': db_path,\n'WTF_CSRF_ENABLED': False # this solved the problem\n})\nPaste a minimal example that causes the problem.\nActual Behavior\nTell us what happens instead.\nPaste the full traceback if there was an exception.\nEnvironment\nPython version: 3.7\nFlask version: 1.0.2\nWerkzeug version:", "issue_status": "Closed", "issue_reporting_time": "2018-10-21T21:10:05Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "268": {"issue_url": "https://github.com/pallets/flask/issues/2956", "issue_id": "#2956", "issue_summary": "saving session raises an exception from itsdangerous", "issue_description": "rasteroid commented on 20 Oct 2018 \u2022\nedited by davidism\nExpected Behavior\nLogin form is rendered correctly\nreturn render_template('login.html', form=LoginForm())\nActual Behavior\nWe've reviewed this using pdb; it seems that the return value from dumps isn't always bytes, and when serializing the csrf_token on the second pass it comes back as dict.\nTraceback (most recent call last):\n  File \"C:\\Users\\jburke\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 2308, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\jburke\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\beaker\\middleware.py\", line 156, in __call__\n    return self.wrap_app(environ, session_start_response)\n  File \"C:\\Users\\jburke\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 2294, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\jburke\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 1739, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\jburke\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\flask\\_compat.py\", line 35, in reraise\n    raise value\n  File \"C:\\Users\\jburke\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 2291, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\jburke\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 1815, in full_dispatch_request\n    return self.finalize_request(rv)\n  File \"C:\\Users\\jburke\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 1832, in finalize_request\n    response = self.process_response(response)\n  File \"C:\\Users\\jburke\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\flask\\app.py\", line 2113, in process_response\n    self.session_interface.save_session(self, ctx.session, response)\n  File \"C:\\Users\\jburke\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\flask\\sessions.py\", line 375, in save_session\n    val = self.get_signing_serializer(app).dumps(dict(session))\n  File \"C:\\Users\\jburke\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\itsdangerous\\serializer.py\", line 114, in dumps\n    payload = want_bytes(self.dump_payload(obj))\n  File \"C:\\Users\\jburke\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\itsdangerous\\url_safe.py\", line 45, in dump_payload\n    compressed = zlib.compress(json)\nTypeError: a bytes-like object is required, not 'dict'\nThe problem is the return from:\njson = super(URLSafeSerializerMixin, self).dump_payload(obj)\nand as mentioned above we see the key serialized with one serializer (TaggedJSONSerializer) which returns bytes, while the value itself appears to be serialized with another(_CompactJSON) which fails.\nEnvironment\nPython version: 3.6.5\nFlask version: 1.0.2/1.1dev0\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-10-19T19:25:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "269": {"issue_url": "https://github.com/pallets/flask/issues/2954", "issue_id": "#2954", "issue_summary": "Pin versions to avoid major updates of dependencies", "issue_description": "Member\nThiefMaster commented on 19 Oct 2018\nCurrently we set minimum versions only, with no maximum version requirement. Should we prevent implicit updates to new major versions of any of our dependencies?", "issue_status": "Closed", "issue_reporting_time": "2018-10-19T12:41:18Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "270": {"issue_url": "https://github.com/pallets/flask/issues/2952", "issue_id": "#2952", "issue_summary": "New itsdangerous version invalidates cookie based sessions", "issue_description": "benvand commented on 19 Oct 2018\nExpected Behaviour\nUser sessions should remain valid across versions.\nActual Behaviour\nitsdangerous v1.0 was release about 16 hours ago.\nUsers are signed out when an build of flask that has depended on the new itsdangerous v1.0 is released. This is because the new version has a breaking change that changes the session hashing algorithm.\nhttps://github.com/pallets/itsdangerous/blob/master/CHANGES.rst\nhttps://github.com/pallets/flask/blob/master/flask/sessions.py#L6\nhttps://github.com/pallets/flask/blob/master/setup.py#L39\nhttps://pypi.org/project/itsdangerous/#history\nEnvironment\nPython version: 3.6\nFlask version: 1+", "issue_status": "Closed", "issue_reporting_time": "2018-10-19T12:19:05Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "271": {"issue_url": "https://github.com/pallets/flask/issues/2951", "issue_id": "#2951", "issue_summary": "Serial port give access denied when running flask in debug", "issue_description": "diogorolo commented on 18 Oct 2018\nExpected Behavior\nThis snippet should open a serial port and start flask in debug mode.\nfrom flask import Flask\nimport serial \n\nser = serial.Serial('\\\\\\\\.\\\\COM3',9600)\napp = Flask(__name__)\n\napp.run(debug=True)\nActual Behavior\nAn exception is thrown saying that the serial port is in use.\nThis only happens if debug=True is present.\nIt works as expected if I only have app.run()\nEnvironment\nPython version: 3.6.5\nFlask version: 1.0.2'", "issue_status": "Closed", "issue_reporting_time": "2018-10-18T12:51:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "272": {"issue_url": "https://github.com/pallets/flask/issues/2950", "issue_id": "#2950", "issue_summary": "Questions: why do we need if __name__ == '__main__'?", "issue_description": "jingsong-liu commented on 18 Oct 2018\nflask/flask/__main__.py\nLine 12 in 673772c\n if __name__ == '__main__': \nIt's always true.\nBecause of usual practice?", "issue_status": "Closed", "issue_reporting_time": "2018-10-18T08:18:08Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "273": {"issue_url": "https://github.com/pallets/flask/issues/2949", "issue_id": "#2949", "issue_summary": "Documentation \"Testing Flask Applications\" should show client teardown", "issue_description": "ncraike commented on 18 Oct 2018 \u2022\nedited\nThe flask.testing FlaskClient has clean-up which only happens if you use the test client in a with block:\nclass FlaskClient(Client):\n\n    # ...\n\n    def __exit__(self, exc_type, exc_value, tb):\n        self.preserve_context = False\n\n        # on exit we want to clean up earlier.  Normally the request context\n        # stays preserved until the next request in the same thread comes\n        # in.  See RequestGlobals.push() for the general behavior.\n        top = _request_ctx_stack.top\n        if top is not None and top.preserved:\n            top.pop()\nThis is described in the API documentation for app.test_client(), but isn't mentioned in the Testing Flask Applications chapter of the documentation, and the \"testing skeleton\" code doesn't use test_client() in a with block:\n@pytest.fixture\ndef client():\n    db_fd, flaskr.app.config['DATABASE'] = tempfile.mkstemp()\n    flaskr.app.config['TESTING'] = True\n    client = flaskr.app.test_client()\n\n    with flaskr.app.app_context():\n        flaskr.init_db()\n\n    yield client\nThe Testing Flask Applications chapter should demonstrate using the test client in some way which does teardown.\nI raise this because I used the skeleton code as basis for a pytest fixture, and I believe I've run into intermittent test failure issues which are caused by request context leaking between tests.\n1", "issue_status": "Closed", "issue_reporting_time": "2018-10-18T06:50:46Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "274": {"issue_url": "https://github.com/pallets/flask/issues/2948", "issue_id": "#2948", "issue_summary": "@app.errorhandler scope too wide", "issue_description": "StoneMoe commented on 18 Oct 2018\nExpected Behavior\nHandle any exception in route function\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom flask import Flask, Blueprint\n\nbp = Blueprint('section', __name__)\n\n\n@bp.route(\"/\")\ndef hello():\n    return \"you are visiting 'http://hostname/section/'\"\n\n@bp.route(\"/exc\")\ndef exc_test():\n    raise Exception(\"bug\")\n\napp = Flask(__name__)\n\n\n@app.errorhandler(Exception)\ndef any_unknown_error(e):\n    upload_exception_to_log_server(e)\n    if app.debug:\n        raise e  # Show Werkzeug debugger while debugging\n\n    # return api json with message\n    # rather than break front-end page ajax\n    return '{\"code\": 5, \"message\": \"%s\"}' % e\n\n\napp.register_blueprint(bp, url_prefix='/%s' % bp.name)\nActual Behavior\nThis break strict_slash redirect, which raised a werkzeug.routing.RequestRedirect: 301 Moved Permanently: None to do the redirection\nTo reproduce this, visit localhost:5000/section (without trailing slash)\nFile \"f:\\code\\flask_bug_test\\venv\\lib\\site-packages\\flask\\app.py\", line 2309, in __call__\n    return self.wsgi_app(environ, start_response)\nFile \"f:\\code\\flask_bug_test\\venv\\lib\\site-packages\\flask\\app.py\", line 2295, in wsgi_app\n    response = self.handle_exception(e)\nFile \"f:\\code\\flask_bug_test\\venv\\lib\\site-packages\\flask\\app.py\", line 1741, in handle_exception\n    reraise(exc_type, exc_value, tb)\nFile \"f:\\code\\flask_bug_test\\venv\\lib\\site-packages\\flask\\_compat.py\", line 35, in reraise\n    raise value\nFile \"f:\\code\\flask_bug_test\\venv\\lib\\site-packages\\flask\\app.py\", line 2292, in wsgi_app\n    response = self.full_dispatch_request()\nFile \"f:\\code\\flask_bug_test\\venv\\lib\\site-packages\\flask\\app.py\", line 1815, in full_dispatch_request\n    rv = self.handle_user_exception(e)\nFile \"f:\\code\\flask_bug_test\\venv\\lib\\site-packages\\flask\\app.py\", line 1713, in handle_user_exception\n    return self.handle_http_exception(e)\nFile \"f:\\code\\flask_bug_test\\venv\\lib\\site-packages\\flask\\app.py\", line 1644, in handle_http_exception\n    return handler(e)\nFile \"F:\\Code\\flask_bug_test\\start.py\", line 21, in any_unknown_error\n    raise e  # Show exception while debugging\nFile \"f:\\code\\flask_bug_test\\venv\\lib\\site-packages\\flask\\app.py\", line 1813, in full_dispatch_request\n    rv = self.dispatch_request()\nFile \"f:\\code\\flask_bug_test\\venv\\lib\\site-packages\\flask\\app.py\", line 1791, in dispatch_request\n    self.raise_routing_exception(req)\nFile \"f:\\code\\flask_bug_test\\venv\\lib\\site-packages\\flask\\app.py\", line 1774, in raise_routing_exception\n    raise request.routing_exception\nFile \"f:\\code\\flask_bug_test\\venv\\lib\\site-packages\\flask\\ctx.py\", line 336, in match_request\nself.url_adapter.match(return_rule=True)\nFile \"f:\\code\\flask_bug_test\\venv\\lib\\site-packages\\werkzeug\\routing.py\", line 1542, in match\nsafe='/:|+') + '/', query_args))\n    werkzeug.routing.RequestRedirect: 301 Moved Permanently: None\nEnvironment\nPython version: 3.6.6\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-10-18T03:48:55Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "275": {"issue_url": "https://github.com/pallets/flask/issues/2947", "issue_id": "#2947", "issue_summary": "Review Flask-MailboxValidator extension for listing", "issue_description": "MailboxValidator commented on 17 Oct 2018\nDear Flask Team,\nMailboxValidator had introduced a new Flask extension that can help Flask users to validate email in various purpose. We would like to submit this extension for listing in the Flask Extension Registry.\nExtension Name: Flask_MailboxValidator\nPYPI link: https://pypi.org/project/flask-MailboxValidator/\nVersion: 1.0.1\nMaintainer: MailboxValidator support@mailboxvalidator.com\nRepository: https://github.com/MailboxValidator/Flask_MailboxValidator\nLicense: MIT\nDocumentation link: https://flask-mailboxvalidator.readthedocs.io/en/latest/\nThank You.", "issue_status": "Closed", "issue_reporting_time": "2018-10-17T07:01:20Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "276": {"issue_url": "https://github.com/pallets/flask/issues/2946", "issue_id": "#2946", "issue_summary": "the app start run error", "issue_description": "davidzhang9990 commented on 17 Oct 2018\nasync_mode = None\napp = Flask(name)\napp.config['SECRET_KEY'] = 'secret!'\nsocketio = SocketIO(app, async_mode=async_mode)\nthread = None\n@app.route('/')\ndef index():\nemit('response', {'code': '200', 'msg': 'start to process...'})\nreturn render_template('index.html')\nif name == \"main\":\nsocketio.run(app, host='0.0.0.0', debug=True, port=5001)\nExpected Behavior\nWebSocket transport not available. Install eventlet or gevent and gevent-websocket for improved performance.\nE:\\Project\\JDGoods\\venv\\lib\\site-packages\\flask_socketio_init_.py:496: Warning: Silently ignoring app.run() because the application is run from the flask command line executable. Consider putting app.run() behind an if name == \"main\" guard to silence this warning.\nuse_reloader=use_reloader, **kwargs)\nEnvironment\nPython version: 2.7\nFlask version: 1.0.2\nWerkzeug version:1.0\nFlask-SocketIO version 3.0.2", "issue_status": "Closed", "issue_reporting_time": "2018-10-17T00:58:13Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "277": {"issue_url": "https://github.com/pallets/flask/issues/2945", "issue_id": "#2945", "issue_summary": "Query hive from flask", "issue_description": "ziedbf commented on 16 Oct 2018\nHi, I am new to flask and i am using the following flask cookiecutter to start with a quick prototype. The main idea of project is to collect data from hive cluster and push it to the end user using flask.\nAlthough, i was successfully able to connect flask to the hive server using pyhive connector but I am getting a weird issue that's the related to the select limit where i am trying to query more than 50 items.\nIn my case i built just Hive class similar to the flask extension development around for pyhive similar demo:\nfrom pyhive import hive\nfrom flask import current_app\n\n# Find the stack on which we want to store the database connection.\n# Starting with Flask 0.9, the _app_ctx_stack is the correct one,\n# before that we need to use the _request_ctx_stack.\ntry:\n    from flask import _app_ctx_stack as stack\nexcept ImportError:\n    from flask import _request_ctx_stack as stack\n\n\nclass Hive(object):\n\n    def __init__(self, app=None):\n        self.app = app\n        if app is not None:\n            self.init_app(app)\n\n    def init_app(self, app):\n        # Use the newstyle teardown_appcontext if it's available,\n        # otherwise fall back to the request context\n        if hasattr(app, 'teardown_appcontext'):\n            app.teardown_appcontext(self.teardown)\n        else:\n            app.teardown_request(self.teardown)\n\n    def connect(self):\n        return hive.connect(current_app.config['HIVE_DATABASE_URI'], database=\"orc\")\n\n    def teardown(self, exception):\n        ctx = stack.top\n        if hasattr(ctx, 'hive_db'):\n            ctx.hive_db.close()\n        return None\n\n    @property\n    def connection(self):\n        ctx = stack.top\n        if ctx is not None:\n            if not hasattr(ctx, 'hive_db'):\n                ctx.hive_db = self.connect()\n            return ctx.hive_db\nand created an endpoint to load data from hive:\n@blueprint.route('/hive/<limit>')\ndef connect_to_hive(limit):\n    cur = hive.connection.cursor()\n    query = \"select * from part_raw where year=2018 LIMIT {0}\".format(limit)\n    cur.execute(query)\n    res = cur.fetchall()\n    return jsonify(data=res)\nAt the first run everything works fine if i try to load things with limited to 50 items, but as soon as i increase it keeps in state where nothing load. However when i load data using jupyter notebooks it works fine that's why i suspect that i might missed something from my flask code.", "issue_status": "Closed", "issue_reporting_time": "2018-10-16T14:22:24Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "278": {"issue_url": "https://github.com/pallets/flask/issues/2943", "issue_id": "#2943", "issue_summary": "Trouble with function send_file and range", "issue_description": "PavelProkhorov commented on 15 Oct 2018\nHi!\nWhy function send_file don't support Range header in request?\nI send request with next header: Range: bytes=0-10.\nthis is part of my code:\nreturn send_file(file, attachment_filename=filename, conditional=True)\nBut flask application return status code 200 instead 206.\nExpected Behavior\nstatus code = 206\nActual Behavior\nstatus code = 200\nEnvironment\nPython version: 3.5.3\nFlask version: 1.0.2\nWerkzeug version:", "issue_status": "Closed", "issue_reporting_time": "2018-10-15T13:46:53Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "279": {"issue_url": "https://github.com/pallets/flask/issues/2941", "issue_id": "#2941", "issue_summary": "Testing API with 1.0.2: <Response streamed [404 NOT FOUND]>", "issue_description": "edouard-lopez commented on 15 Oct 2018 \u2022\nedited\nrelated: flask-restful/flask-restful#782\nComplete cource code can be found in coaxis-asp/opt repository.\nRequirements\nPython 3.6.6\nFlask==1.0.2\nFlask-RESTful==0.3.6\nProject Layout\n./api/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 tests\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 test_views.py  \n\u2514\u2500\u2500 views.py  # declare API (cf. below)\nviews.py\nfrom flask import Flask, Response, request\nfrom flask_restful import Api, Resource, abort\n\napp = Flask(__name__)\napi = Api(app, prefix='/api')\n\nclass Root(Resource):\n    def get(self):\n        return {\n            'results': None\n        }\n\napi.add_resource(Root, '/')\n\nif __name__ == \"__main__\":\n    app.run(debug=True, host='0.0.0.0')\ntest_views.py\nfrom pprint import pprint\nfrom unittest import TestCase\n\nfrom views import app\n\nclass TestIntegrations(TestCase):\n    def setUp(self):\n        self.app = app.test_client()\n\n    def test_thing(self):\n        response = self.app.get('/sites/')\n        pprint(response)\n        self.assertDictEqual(response.json, {'results': None})\nError\n$ python3 -m unittest tests.test_views --verbose\ntest_thing (tests.test_views.TestIntegrations) ... \n<Response streamed [404 NOT FOUND]>\nFAIL\n\n======================================================================\nFAIL: test_thing (tests.test_views.TestIntegrations)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/data/projects/coaxis-opt/daemon/api/tests/test_views.py\", line 13, in test_thing\n    self.assertDictEqual(response.json, {'results': None})\nAssertionError: None is not an instance of <class 'dict'> : First argument is not a dictionary\n\n----------------------------------------------------------------------\nRan 1 test in 0.007s\n\nFAILED (failures=1)\nQuestion\nDespite my API responding correctly in the browser and all my other tests running with unittest, the test case for the API fail with an error 404. What the matter ?", "issue_status": "Closed", "issue_reporting_time": "2018-10-15T08:40:28Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "280": {"issue_url": "https://github.com/pallets/flask/issues/2938", "issue_id": "#2938", "issue_summary": "flask redirect failed", "issue_description": "wiwengweng commented on 11 Oct 2018 \u2022\nedited by ThiefMaster\nExpected Behavior\nI have templates layout.html, index.html and 200.html, index and 200 inherit layout.html\nI try to submit a picture(base64 encoded) in index page, and if successful, redirect to 200.html\n<!-- extend base layout -->\n{% extends \"layout.html\" %}\n\n{% block content %}\n<body>\n\n<div align=\"center\" id=\"container\">\n\n    <h2>Demo</h2>\n\n    <video playsinline autoplay></video>\n    <button type=\"submit\" class=\"btn btn-primary\">snapshot</button>\n    <canvas></canvas>\n    <br>\n    <label>name\uff1a</label><input type=\"text\">\n        <br><br>\n <button id=\"submit\" type=\"submit\" class=\"btn btn-primary\">submit</button>\n\n\n</div>\n<div id=\"myDiv\"></div>\n<script type=\"text/javascript\" src=\"{{ url_for('static', filename='js/lib/adapter.js') }}\"></script>\n<script type=\"text/javascript\" src=\"{{ url_for('static', filename='js/main.js') }}\" async></script>\n\n</body>\n{% endblock %}\nmain.js\nconst submit = document.getElementById(\"submit\");\n\nsubmit.onclick = function() {  // post submit\nconst xmlhttp =new XMLHttpRequest();\n xmlhttp.onreadystatechange=function()\n   {\n   if (xmlhttp.readyState==4 && xmlhttp.status==200)\n  {\n  document.getElementById(\"myDiv\").innerHTML=xmlhttp.responseText;\n  }\n   }\nconst name = document.querySelector('input').value;   \nxmlhttp.open(\"POST\",\"/save_img/\"+name,true);\nxmlhttp.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\");\n// dataURL = dataURL.replaceAll(\"\\\\+\", \"%2B\");\ndataURL = encodeURIComponent(dataURL)\n    xmlhttp.send(\"img=\" + dataURL);\n}\n@app.route('/save_img/<string:name>', methods=['POST', 'GET'])\ndef save_image(name):\n    # todo feature code\n    img_base64 = request.form.get(\"img\")\n    base64_data = re.sub('^data:image/.+;base64,', '', img_base64).encode()\n    feature_code = codec.func_call(base64_data, name)\n    # todo save img and name to db\n    data = Feature(feature_code, name)\n    db.session.add(data)\n    db.session.commit()\n    flash('successful!!')\n    return redirect(url_for('successful'))\n\n@app.route('/successful')\ndef successful():\n    return render_template('200.html')\nActual Behavior\ncontent of index.html still remains in the page, and content in 200.html also show on the page.\nno exception\nEnvironment\nPython version: 2.7.13\nFlask version:1.0.2 and 0.12\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-10-11T08:09:40Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "281": {"issue_url": "https://github.com/pallets/flask/issues/2937", "issue_id": "#2937", "issue_summary": "load_dotenv returns true even if no file exists", "issue_description": "lec00q commented on 10 Oct 2018\nExpected Behavior\nIf no file is loaded/exists, flask.cli.load_dotenv should return False.\nActual Behavior\nThis code:\nfrom flask import Flask\nfrom flask.cli import load_dotenv\n\napp = Flask(__name__)\nresult = load_dotenv('not-exist')\nassert result\ndoes not fail.\nEnvironment\nPython version: 3.5.5\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-10-10T11:17:22Z", "fixed_by": "#2939", "pull_request_summary": "Fix #2937: Ensure the consistency in load_dotenv's return type", "pull_request_description": "Contributor\nsharmaadarsh563 commented on 11 Oct 2018 \u2022\nedited by davidism\nIn the flask.cli module, the load_dotenv function is not consistent in its return type. It should either return True or False depending on whether it has loaded the file or not, respectively.\nfixes #2937\nCommit checklist:\nadd tests that fail without the patch\nensure all tests pass with pytest\nadd documentation to the relevant docstrings or pages\nadd versionadded or versionchanged directives to relevant docstrings\nadd a changelog entry if this patch changes code", "pull_request_status": "Merged", "issue_fixed_time": "2019-05-19T19:03:46Z", "files_changed": [["3", "CHANGES.rst"], ["14", "flask/cli.py"], ["5", "tests/test_cli.py"]]}, "282": {"issue_url": "https://github.com/pallets/flask/issues/2935", "issue_id": "#2935", "issue_summary": "copy_current_request_context copies old session object", "issue_description": "Contributor\ndchevell commented on 6 Oct 2018 \u2022\nedited\nExpected Behavior\nWhen using copy_current_request_context in the middle of a request, I'm expecting it to copy the current state of flask.request and flask.session at the time it's called.\nActual Behavior\nThe current state of flask.request is copied, but flask.session is from before the current request and doesn't contain changes made during the current request, before copy_current_request_context was called. To me this seems like unexpected behaviour. If it's not I'd like to understand a bit more about why, and also to find out whether there's any workaround or alternative approach I can take.\nExample\nHere's a fully functional example you can save and run. It adds a test value to flask.request and flask.session during the request, then uses copy_current_request_context to decorate a method that will retrieve those same values in another thread. Two requests are made; on the first request the copied context can find the new value added to flask.request but cannot find the value added to flask.session. On the second request, the copied context can find the value added to flask.request, and now finds the value that was previously added to flask.session in the first request.\nimport concurrent.futures\nimport random\n\nfrom flask import Flask, copy_current_request_context, request, session\n\n\napp = Flask(__name__)\napp.config['SECRET_KEY'] = 'test'\nexecutor = concurrent.futures.ThreadPoolExecutor()\n\n\n@app.route('/')\ndef session_context():\n    test_value = random.randint(1, 1001)\n    request.test_value = test_value\n    session['TEST_VALUE'] = test_value\n\n    original_context = (\n        ('request', request.test_value),\n        ('session', session.get('TEST_VALUE'))\n    )\n\n    @copy_current_request_context\n    def debug_session():\n        return (\n            ('request', request.test_value),\n            ('session', session.get('TEST_VALUE'))\n        )\n\n    future = executor.submit(debug_session)\n    print('original_context:', original_context)\n    print('copied_context:', future.result())\n    return 'ok'\n\n\nif __name__ == '__main__':\n    client = app.test_client()\n    print('### First request ###')\n    client.get('/')\n    print('### Second request ###')\n    client.get('/')\nExample output:\n$ python session_context.py\n### First request ###\noriginal_context: (('request', 27), ('session', 27))\ncopied_context: (('request', 27), ('session', None))\n### Second request ###\noriginal_context: (('request', 63), ('session', 63))\ncopied_context: (('request', 63), ('session', 27))\nEnvironment\nPython version: 3.7.0\nFlask version: Flask==1.0.2\nWerkzeug version: Werkzeug==0.14.1\nAlso, for whatever it's worth: I'm investigating this as part of improving this project: https://github.com/dchevell/flask-executor", "issue_status": "Closed", "issue_reporting_time": "2018-10-05T22:56:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "283": {"issue_url": "https://github.com/pallets/flask/issues/2933", "issue_id": "#2933", "issue_summary": "flask.send_file can't handle some attachment_filename with unicode characters", "issue_description": "Contributor\nremyroy commented on 4 Oct 2018\nExpected Behavior\nUsing flask.send_file should just work no matter what the attachment_filename string parameter contains including unicode characters.\n# -*- coding: utf-8 -*-\nfrom flask import Flask, send_file\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    fn = '\u00e9.py'\n    # alternate value\n    # fn = '\\xc3\\xa9.py'\n    return send_file('hello.py', as_attachment=True, attachment_filename=fn)\nActual Behavior\nException is thrown. UnicodeDecodeError is not handled with a proper fallback.\nTraceback (most recent call last):\n  File \"/home/remyroy/VirtualEnvs/TestingFlask/local/lib/python2.7/site-packages/flask/app.py\", line 2292, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/home/remyroy/VirtualEnvs/TestingFlask/local/lib/python2.7/site-packages/flask/app.py\", line 1815, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"/home/remyroy/VirtualEnvs/TestingFlask/local/lib/python2.7/site-packages/flask/app.py\", line 1718, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/home/remyroy/VirtualEnvs/TestingFlask/local/lib/python2.7/site-packages/flask/app.py\", line 1813, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"/home/remyroy/VirtualEnvs/TestingFlask/local/lib/python2.7/site-packages/flask/app.py\", line 1799, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"/home/remyroy/Projects/TestingFlask/hello.py\", line 10, in hello\n    return send_file('hello.py', as_attachment=True, attachment_filename=fn)\n  File \"/home/remyroy/VirtualEnvs/TestingFlask/local/lib/python2.7/site-packages/flask/helpers.py\", line 567, in send_file\n    attachment_filename = attachment_filename.encode('latin-1')\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 0: ordinal not in range(128)\nEnvironment\nPython version: 2.7.12\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-10-03T19:27:20Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "284": {"issue_url": "https://github.com/pallets/flask/issues/2932", "issue_id": "#2932", "issue_summary": "unable to import module InUniKeeper", "issue_description": "techaks commented on 3 Oct 2018\ni was trying to run it , packaging it but it fails to import module", "issue_status": "Closed", "issue_reporting_time": "2018-10-03T14:07:40Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "285": {"issue_url": "https://github.com/pallets/flask/issues/2931", "issue_id": "#2931", "issue_summary": "Click==7.0 incompatibles with Flask 1.0.2", "issue_description": "uwevil commented on 3 Oct 2018 \u2022\nedited\nI can not run Flask commands with Click 7.0 which is released the last week. When I replace it with the version 6.7, it works fine.\nEnvironment\nOS: Windows 10\nPython version: 3.6.4\nFlask version: 1.0.2\nWerkzeug version: 0.14\nastroid==2.0.4\nbeautifulsoup4==4.6.0\nclick==6.7\ncloudpickle==0.5.6\ncolorama==0.3.9\ncoverage==4.5.1\ndoit==0.31.1\nFlask==1.0.2\ngunicorn==19.9.0\nisort==4.3.4\nitsdangerous==0.24\nJinja2==2.10\nlazy-object-proxy==1.3.1\nMarkupSafe==1.0\nmccabe==0.6.1\nnose==1.3.7\nnosexcover==1.0.11\npycryptodome==3.4.7\npylint==2.1.0\npymongo==3.7.1\nPyYAML==3.12\nsix==1.11.0\ntyped-ast==1.1.0\nurllib3==1.22\nWerkzeug==0.14.1\nwrapt==1.10.11\n \n\n(env) flask clean_db\n[2018-10-03 16:34:13,364 INFO] Running ...\nIf I install Click==7.0, my error is:\n(env) flask clean_db\nUsage: flask [OPTIONS] COMMAND [ARGS]...\nTry \"flask --help\" for help.\n \nError: No such command \"clean_db\".", "issue_status": "Closed", "issue_reporting_time": "2018-10-03T07:22:35Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "286": {"issue_url": "https://github.com/pallets/flask/issues/2927", "issue_id": "#2927", "issue_summary": "'301' is not a recognized HTTP error code", "issue_description": "jvannier commented on 29 Sep 2018\nI just upgraded to Flask 1.0.2 and my code (which was working):\nfrom http.client import MOVED_PERMANENTLY\n\n@app.errorhandler(MOVED_PERMANENTLY)\ndef error_handler(err):\n    print(err)\nnow fails with:\n mod_wsgi (pid=66451): Target WSGI script 'app.py' cannot be loaded as Python module.\n mod_wsgi (pid=66451): Exception occurred processing WSGI script 'app.py'.\n Traceback (most recent call last):\n   File \"app.py\", line 128, in <module>\n     @app.errorhandler(MOVED_PERMANENTLY)\n   File \"python2.7/site-packages/flask/app.py\", line 1316, in decorator\n     self._register_error_handler(None, code_or_exception, f)\n   File \"python2.7/site-packages/flask/app.py\", line 66, in wrapper_func\n     return f(self, *args, **kwargs)\nFile \"python2.7/site-packages/flask/app.py\", line 1349, in _register_error_handler\n\" HTTPException with that code instead.\".format(code_or_exception)\nKeyError: \"'301' is not a recognized HTTP error code. Use a subclass of HTTPException with that code instead.\"\nAm I doing something wrong?", "issue_status": "Closed", "issue_reporting_time": "2018-09-28T20:19:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "287": {"issue_url": "https://github.com/pallets/flask/issues/2926", "issue_id": "#2926", "issue_summary": "Default port overrides requesting a system assigned port", "issue_description": "Ben-RK commented on 29 Sep 2018\nExpected Behavior\nWhen running a flask application with app.run(port=0), flask should pass the '0' port down to werkzeug to use a port assigned by the operating system.\nActual Behavior\nThe logic in flask/app.py:932 sets the port to the default 5000, which can cause port conflicts, which is the exact situation that setting port=0 should avoid. This is a regression from the behaviour exhibited in prior versions.\n>>> app.run(port=0)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/.../lib/python3.6/site-packages/flask/app.py\", line 943, in run\n    run_simple(host, port, self, **options)\n  File \"/.../lib/python3.6/site-packages/werkzeug/serving.py\", line 814, in run_simple\n    inner()\n  File \"/.../lib/python3.6/site-packages/werkzeug/serving.py\", line 774, in inner\n    fd=fd)\n  File \"/.../lib/python3.6/site-packages/werkzeug/serving.py\", line 660, in make_server\n    passthrough_errors, ssl_context, fd=fd)\n  File \".../lib/python3.6/site-packages/werkzeug/serving.py\", line 577, in __init__\n    self.address_family), handler)\n  File \"/.../lib/python3.6/socketserver.py\", line 453, in __init__\n    self.server_bind()\n  File \"/.../lib/python3.6/http/server.py\", line 136, in server_bind\n    socketserver.TCPServer.server_bind(self)\n  File \"/.../lib/python3.6/socketserver.py\", line 467, in server_bind\n    self.socket.bind(self.server_address)\nOSError: [Errno 98] Address already in use\nEnvironment\nPython version: 3.6\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-09-28T19:16:43Z", "fixed_by": "#2928", "pull_request_summary": "Fix #2926 `Default port overrides requesting a system assigned port`", "pull_request_description": "Contributor\nvorelq commented on 29 Sep 2018\nFix #2926\nIn app.py, compare possible port values with None explicitly, instead of relying on bool casting. Thanks to this, 0 is treated as legitimate port value, and not overwritten by the default value.", "pull_request_status": "Merged", "issue_fixed_time": "2019-05-19T18:40:55Z", "files_changed": [["2", "CHANGES.rst"], ["3", "flask/app.py"], ["17", "tests/test_basic.py"]]}, "288": {"issue_url": "https://github.com/pallets/flask/issues/2925", "issue_id": "#2925", "issue_summary": "Very repeatable timeout issue", "issue_description": "mgeorgiadis commented on 28 Sep 2018 \u2022\nedited\nExpected Behavior\nI have a piece of hardware that only supplies a 32 bit .dll, but it needs to be integrated into a piece of software that must be 64 bit for other reasons. So I used the opportunity to setup a 32-bit python server in Flask to communicate with device and be controlled by a client in my existing 64-bit program.\nThe 32 bit server should simply just exist as a pass through for my 64 bit client to the hardware.\nActual Behavior\nThis all works well and fine for some number of function calls, however I get very repeatable timeouts after a specific number of function calls to the server. I have been able to reproduce this using a very simple simulation without any hardware that I can share below.\nIn my program, the 64 bit version of python spins up a 32-bit python exe and specifies the server .py file. So to run this, you'll need to specify a location to your 32-bit version of python. Simply specify the location of the 32 bit python .exe in client.py and then run client.py in a 64 bit version of python.\nIn any event, I'm finding that after 54 calls to the server from the client, the server just doesn't respond anymore. I initially remedied this by killing all 32 bit python processes and restarting the server, but this is really unstable to do over a long time, and this program needs to run for weeks without crashing. This seems like some sort of bug, but I've been unable to troubleshoot further since this is a bit out of my experience area.\nCode Examples\nPut the code below into a file called \"server.py\"\n# Simple server.py example to demonstrate timeout\n\nfrom flask import Flask\nimport json\n\napp = Flask(__name__)\n\n@app.route('/')\ndef start():\n    # Do nothing on root other than verify that server connects successfully\n    response={}\n    response[\"Connection\"]=0\n    return json.dumps(response)\n\n@app.route('/dosomething')\ndef hardwaredoessomething():\n    # in the full use case the client would tell the server to tell the\n    # hardware to do something, and then the function would return\n    # when that is done.  This is simulated here.\n    response={}\n    response[\"Status\"]=0\n    response[\"Complete\"]=0\n    return json.dumps(response)\n          \napp.run()\nPut the code below into a file called client.py, in the same folder as server.py\n# Simple client.py example\n\nimport os\nimport urllib.request\nimport subprocess\nimport json\nimport time\n\n# insert path to your 32 bit version of python here\npython32bitpath = r'C:\\Python\\32 bit Python 3\\python-3.4.4\\python.exe'\nserverpath = os.getcwd() + r'\\server.py'\n\n# Start the 32 bit python server\np1 = subprocess.Popen([python32bitpath,serverpath],\\\n                           stdout=subprocess.PIPE,\n                           stderr=subprocess.PIPE)\n\n\n\n# Specify the location of the server\nroot = 'http://localhost:5000/'\n\n# give a couple seconds for the server to initialize\ntime.sleep(3)\n\n# Verify you can connect to the server\nret = urllib.request.urlopen(root)\nresponse = ret.read().decode()\nprint(response)\n\nnumCalls = 0\n\nfor i in range(100):\n    ret = urllib.request.urlopen(root+'dosomething')\n    response = ret.read().decode()\n    print('response',response)\n    print(\"number of calls\",numCalls)\n    numCalls+=1\n    time.sleep(0.5)\nEnvironment\nPython version: I've seen this on python 3.4 and python 3.6\nFlask version: 0.11.1\nFollow up\nAlso just as a follow up, I also tested this code by having a 64 bit client and a 64 bit server as well. Still stops at 54 calls. I definitely would appreciate the help as this would enable my program to be much more robust. I just wish hardware vendors would get modern and supply 64 bit .dlls.", "issue_status": "Closed", "issue_reporting_time": "2018-09-28T16:31:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "289": {"issue_url": "https://github.com/pallets/flask/issues/2924", "issue_id": "#2924", "issue_summary": "Broken link in deployment docs", "issue_description": "vlade11115 commented on 27 Sep 2018\nActual Behavior\nLink to the section \"For a more optimized setup, see configuring uWSGI and NGINX.\" on this page answers 404.", "issue_status": "Closed", "issue_reporting_time": "2018-09-27T08:14:44Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "290": {"issue_url": "https://github.com/pallets/flask/issues/2923", "issue_id": "#2923", "issue_summary": "Timestamps fillup documentation shown by `pydoc3 flask`", "issue_description": "SergKolo commented on 24 Sep 2018\nExpected Behavior\nWhen you open documentations with pydoc3 <modulename> most modules just display documentation, and that's it.\nActual Behavior\nWhen called from same directory as the user's script, pydoc3 flask will also start executing the script\nitself an display timestamps, which also eventually overwrite the documentation display.\nAt first you see delay:\n1537766131.0147438\nThen overtime timestamps fill the screen. An example:\nDESCRIPTION\n    flask\n    ~~~~~\n    \n    A microframework based on Werkzeug.  It's extensively documented\n:1537766141.022547\n1537766146.0282607\n1537766151.0338132\n1537766156.0372663\nUsing the following does not help:\n if __name__ == '__main__':\n       app.run()\nEnvironment\nPython version: 3.6.5\nFlask version: 1.0.2-1 as reported by apt-cache policy python3-flask\nWerkzeug version: unsure how to check that", "issue_status": "Closed", "issue_reporting_time": "2018-09-24T05:21:48Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "291": {"issue_url": "https://github.com/pallets/flask/issues/2911", "issue_id": "#2911", "issue_summary": "Flaskr tutorial: auth.py raise a type error: tuple indices must be integers not str", "issue_description": "tim-gnue commented on 17 Sep 2018\nIn the tutorial of flaskr, an error is raised when running the auth.py. In the development server, the following error is raised:\nFile \"~\\flaskr\\auth.py\", line 90, in login\nelif not check_password_hash(user['password'], password):\nTypeError: tuple indices must be integers or slices, not str\nAnd then I trace back, in line 84, the following code:\nuser = db.execute(\n        'SELECT * FROM user WHERE username = ?', (username,)\n).fetchone().\nThe function fetchone() should return a tuple. But in line 90, the function try to access the tuple by user['password']. Can tuple be accessed by this calling? I'm not pretty sure. But I can access the tuple by calling user[2] instead of user['password']. And actually the same situation in other python scripts. I'm not sure what is the case.\nEnvironment\nPython version: 3.7.0\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-09-17T15:44:44Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "292": {"issue_url": "https://github.com/pallets/flask/issues/2909", "issue_id": "#2909", "issue_summary": "Double slashed urls are routed erroneously", "issue_description": "ostefano commented on 17 Sep 2018\nThis simple flask app has one resource routed:\nfrom flask import Flask\napp = Flask(__name__)\n \n@app.route(\"/test.html\")\ndef index():\n    return \"Hello World!\"\n \nif __name__ == \"__main__\":\n    app.run(host='0.0.0.0', port=4000)\nWhile the following returns 200\nhttp://127.0.0.1/test.html\nAnd the following (correctly) returns 404:\nhttp://127.0.0.1/asd/test.html\nThe following returns 200 and output Hello World! while it shouldn't:\nhttp://127.0.0.1//asd/test.html\nEnvironment\nPython version: 2.7.15\nFlask version: 0.12.2 (but tested also 1.0.2)\nWerkzeug version: 0.12.2 (but tested also 0.14.1)", "issue_status": "Closed", "issue_reporting_time": "2018-09-16T20:10:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "293": {"issue_url": "https://github.com/pallets/flask/issues/2908", "issue_id": "#2908", "issue_summary": "[Tutorial] Pytest don't find flaskr package", "issue_description": "lvlsun commented on 16 Sep 2018\nExpected Behavior\nI follow the tutorial on http://flask.pocoo.org/docs/1.0/tutorial/ and try to run tests\n(venv) ...\\flaskproj>pytest\nActual Behavior\n  File \"...\\flaskproj\\venv\\lib\\site-packages\\_pytest\\config\\__init__.py\", line 381, in _getconftestmodules\n    return self._path2confmods[path]\nKeyError: local('...\\\\flaskproj\\\\tests')\n\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File \"...\\flaskproj\\venv\\lib\\site-packages\\_pytest\\config\\__init__.py\", line 412, in _importconftest\n    return self._conftestpath2mod[conftestpath]\nKeyError: local('...\\\\flaskproj\\\\tests\\\\conftest.py')\n\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File \"...\\flaskproj\\venv\\lib\\site-packages\\_pytest\\config\\__init__.py\", line 418, in _importconftest\n    mod = conftestpath.pyimport()\n  File \"...\\flaskproj\\venv\\lib\\site-packages\\py\\_path\\local.py\", line 668, in pyimport\n    __import__(modname)\n  File \"...\\flaskproj\\venv\\lib\\site-packages\\_pytest\\assertion\\rewrite.py\", line 296, in load_module\n    six.exec_(co, mod.__dict__)\n  File \"...\\flaskproj\\tests\\conftest.py\", line 5, in <module>\n    from flaskr import create_app\nModuleNotFoundError: No module named 'flaskr'\nERROR: could not load ...\\flaskproj\\tests\\conftest.py\nEnvironment\nPython version: 3.6.5\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-09-15T23:11:08Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "294": {"issue_url": "https://github.com/pallets/flask/issues/2907", "issue_id": "#2907", "issue_summary": "Remove MongoKit page from \"Patterns for Flask\" docs section", "issue_description": "igortg commented on 16 Sep 2018\nI was just starting a little project with Flask + Mongo + Python3.\nSince the only reference to Mongo in the official docs is the \"MongoKit in Flask\" page, I went straight to install and create my schema using MongoKit. Just to find out that this lib is not updated since 2015 and has no support for recent versions of PyMongo.\nShouldn't we remove that from the docs?\n1", "issue_status": "Closed", "issue_reporting_time": "2018-09-15T20:27:37Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "295": {"issue_url": "https://github.com/pallets/flask/issues/2906", "issue_id": "#2906", "issue_summary": "Flask `test_client` could not find endpoints registred from namesapces", "issue_description": "flask-pro commented on 12 Sep 2018\nFlask test_client could not find endpoints registred from namesapces\nI get this problem too.\nWhat resolve this? Or it's bug?", "issue_status": "Closed", "issue_reporting_time": "2018-09-12T07:25:10Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "296": {"issue_url": "https://github.com/pallets/flask/issues/2905", "issue_id": "#2905", "issue_summary": "Mocking functions contained in blueprints", "issue_description": "karlcow commented on 12 Sep 2018\nBoth in http://flask.pocoo.org/docs/1.0/testing/ and http://flask.pocoo.org/docs/1.0/blueprints/\nthere's not much said about Blueprint and unittesting.\nLet's say that the project is organized such as:\nmyapp/\n  __init__.py\n  other_stuff.py\n  myblueprint/\n    __init__.py\n    utils.py\ntests/\n  __init__.py\n  some_unit_tests.py\nIn myapp/__init__.py, we register the blueprint\nfrom myblueprint import myblueprint\napp.register_blueprint(myblueprint)\nIn utils.py, we import do_amazing from other_stuff.py.\nThen for mocking do_amazing, we usually import it in the context of utils.py. This is done by something like:\nwith patch('myapp.myblueprint.utils.do_amazing') as mock_amazing:\n    # More stuff and test.\nWhen there is no blueprint, this is working well.\nAs soon as myblueprint is a Blueprint object we end up having an error as soon as we hit the patch context.\nAttributeError: 'Blueprint' object has no attribute 'utils'\nIf we print in the test before the patch.\n        print 'myapp', myapp\n        print 'myapp.myblueprint', myapp.myblueprint\n        print 'myapp.myblueprint.utils', myapp.myblueprint.utils\nWe get:\nmyapp <module 'myapp' from '/Users/well/code/project/myapp/__init__.pyc'>\nmyapp.myblueprint <flask.blueprints.Blueprint object at 0x108847450>\nERROR\nI still wonder if\nit is the ambiguity of using the same name for folder and blueprint keywords\nit is a limitation of the Mock library when patching.\nit is a limitation of Blueprints themselves.\nBut it would be probably good to have something in the documentation under Blueprints or Testing addressing either the limitations or a minimal example of a test scenario for Blueprint cases.\n1", "issue_status": "Closed", "issue_reporting_time": "2018-09-12T02:39:20Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "297": {"issue_url": "https://github.com/pallets/flask/issues/2903", "issue_id": "#2903", "issue_summary": "when flask request code use multiprocessing, request maybe deadlock.", "issue_description": "woshihaoren commented on 11 Sep 2018\nExpected Behavior\nTell us what should happen.\nCode\ndef check(s,c):\n    print(22222222222222)\n    app = current_app._get_current_object()\n    logger = current_app.logger\n    ...\n\nclass fix_service(Resource):\n    def post(self, service_id):\n            ...\n            logger.info('fix: {name} done\uff0cstart check'.format(name=service.name))\n            # check\n            with multiprocessing.Pool() as pool:\n                print(111111111)\n                check_results = pool.starmap(check, containers)\n\n            logger.info('fix: check done')\n            ...\nActual Behavior\nTell us what happens instead.\n#### console just can see 111111111 and 6730  was deadlock . Not often, but occasionally#### \n# ps -elf\n0 S root       6517   5322  0  80   0 - 50490 poll_s 10:54 ?        00:00:00 /usr/local/bin/python3.5 /usr/local/bin/gunicorn --threads 8 app:create_app(\"test\") -b 0.0.0.0:18113 --access-lo\n1 S root       6520   6517  1  80   0 - 290893 ep_pol 10:54 ?       00:00:10 /usr/local/bin/python3.5 /usr/local/bin/gunicorn --threads 8 app:create_app(\"test\") -b 0.0.0.0:18113 --access-lo\n1 S root       6730   6520  0  80   0 - 290690 futex_ 11:01 ?       00:00:00 /usr/local/bin/python3.5 /usr/local/bin/gunicorn --threads 8 app:create_app(\"test\") -b 0.0.0.0:18113 --access-lo\n\n(gdb) bt\n#0  0x00007f99c0e31a00 in sem_wait () from /lib64/libpthread.so.0\n#1  0x00007f99b5950ff1 in semlock_acquire (self=0x7f99ace44688, args=<value optimized out>, kwds=<value optimized out>) at /opt/soft/Python-3.5.2/Modules/_multiprocessing/semaphore.c:307\n#2  0x00007f99c10fd961 in PyCFunction_Call (func=0x7f99ad2000d8, args=0x7f99c16ff048, kwds=<value optimized out>) at Objects/methodobject.c:98\n#3  0x00007f99c1184f25 in call_function (f=<value optimized out>, throwflag=<value optimized out>) at Python/ceval.c:4705\n#4  PyEval_EvalFrameEx (f=<value optimized out>, throwflag=<value optimized out>) at Python/ceval.c:3236\n#5  0x00007f99c1185e99 in _PyEval_EvalCodeWithName (_co=<value optimized out>, globals=<value optimized out>, locals=<value optimized out>, args=<value optimized out>, argcount=1, \nEnvironment\nPython version:3.5.2\nFlask version:0.11.1\nWerkzeug version:", "issue_status": "Closed", "issue_reporting_time": "2018-09-11T03:25:06Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "298": {"issue_url": "https://github.com/pallets/flask/issues/2902", "issue_id": "#2902", "issue_summary": "Infinite load", "issue_description": "MrSentex commented on 8 Sep 2018 \u2022\nedited\nNo description provided.", "issue_status": "Closed", "issue_reporting_time": "2018-09-08T14:56:59Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "299": {"issue_url": "https://github.com/pallets/flask/issues/2901", "issue_id": "#2901", "issue_summary": "Pip inclusion of simplejson mysteriously breaks custom json encoder", "issue_description": "chadjaros commented on 7 Sep 2018\nThis issue tracker is a tool to address bugs in Flask itself.\nPlease use the #pocoo IRC channel on freenode or Stack Overflow for general\nquestions about using Flask or issues not related to Flask.\nIf you'd like to report a bug in Flask, fill out the template below. Provide\nany any extra information that may be useful / related to your problem.\nIdeally, create an MCVE, which helps us\nunderstand the problem and helps check that it is not caused by something in\nyour code.\nExpected Behavior\nTell us what should happen.\nProviding a custom JSON encoder doesn't break if simplejson happens to be included in the pip dependencies\n    pip install simplejson #OR install any library that has simplejson as a dependency\n\n    ----\n\n    import json\n    \n    class JsonSerializer:\n      def __init__(self, encodings=None, **kwargs):\n\n        if encodings:\n            self._encodings = encodings\n        else:\n            self._encodings = self._get_default_type_encodings()\n        # dict of kwargs\n        if kwargs is None:\n            self._kwargs = {}\n        else:\n            self._kwargs = kwargs\n\n      def encode(self, o):\n        return self.dumps(o)\n\n      def dumps(self, obj, kwargs_dict=None):\n        kwargs = self._kwargs.copy()\n\n        # Override init kwargs\n        if kwargs_dict is not None:\n            kwargs.update(kwargs_dict)\n\n        return json.dumps(obj, **kwargs_dict)\n\n    ----\n\n    application.json_encoder = JsonSerializer\n\n    jsonify({\"some\": \"object})\nActual Behavior\nTell us what happens instead.\nResults in\n    ....\n    File \"/opt/pyenv/versions/***/lib/python3.5/site-packages/flask/json.py\", line 263, in jsonify\n      (dumps(data, indent=indent, separators=separators), '\\n'),\n    File \"/opt/pyenv/versions/***/lib/python3.5/site-packages/flask/json.py\", line 123, in dumps\n      rv = _json.dumps(obj, **kwargs)\n    File \"/opt/pyenv/versions/***/lib/python3.5/site-packages/simplejson/__init__.py\", line 399, in dumps\n      **kw).encode(obj)\n    ...\n    File \"/opt/pyenv/versions/3.5.4/lib/python3.5/json/__init__.py\", line 237, in dumps\n    **kw).encode(obj)\n    TypeError: __init__() got an unexpected keyword argument 'for_json'\nNoticed this conversation #1602. It's unfortunate that it was closed with no action being taken, implicitly switching between incompatible json implementations based on presence of a library seems like an egregiously bad design decision.\nEnvironment\nPython version: 3.5\nFlask version: 0.12.1\nWerkzeug version: 0.12.1", "issue_status": "Closed", "issue_reporting_time": "2018-09-06T21:21:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "300": {"issue_url": "https://github.com/pallets/flask/issues/2900", "issue_id": "#2900", "issue_summary": "avoid creating a new app context when using json argument in test client", "issue_description": "mbarakaja commented on 2 Sep 2018\nAt this moment, when a Flask test client method uses the json argument, a new application context is created in the line below.\nflask/flask/testing.py\nLine 82 in b9b88b0\n with app.app_context(): \nThe problem is that when the above created context goes out of scope, anything registered to teardown_appcontext is called. This is the case of Flask-SQLAlchemy, which remove the current session when that happens.\nThis is problematic is some tests scenarios.\nI am using PostgreSQL SAVEPOINT to rollback any changes made by a test case. My approach is similar to this example provided by SQLAlchemy here, so I'm not going to put all my code here, just a shallow example.\nI have a class that creates a nested transaction and rollback everything when needed.\nclient = app.test_client()\ntrn = TransactionManager(database)\n\nwith app.app_context():\n    trn.start() # start a new nested transaction\n\n    client.post('/products', data=json.dumps({'name': 'Cake'}))\n    client.get('/products')\n    \n    trn.end() # Rollback before the session is removed.\nThe above works well because everything happens inside the same transaction and each test client interaction can see changes made to the database by previous client calls.\nBut using the json argument, the POST call will first create an application context, which immediately will go out of scope making Flask-SQLAlchemy's teardown_appcontext registered function remove the current session before the next client call, making each database interaction in a different transaction.\nWhy do we need an application context to dump the JSON string?\nflask/flask/testing.py\nLine 83 in b9b88b0\n kwargs['data'] = json_dumps(kwargs.pop('json')) \nI don't understand, but if the the above logic is necessary I think the code should check first if there is an application context pushed already using has_app_context.\nAm I doing something wrong or I am missing something?", "issue_status": "Closed", "issue_reporting_time": "2018-09-02T01:36:15Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "301": {"issue_url": "https://github.com/pallets/flask/issues/2899", "issue_id": "#2899", "issue_summary": "EXPORT FLASK_APP dont load config in app", "issue_description": "johndiego commented on 1 Sep 2018\ni'm trying factory app in flask\n\n\n\n\n\nBUT my factory dont work!!\nSomeone help-me solved this question!!\nThnaks for advanced!", "issue_status": "Closed", "issue_reporting_time": "2018-09-01T03:34:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "302": {"issue_url": "https://github.com/pallets/flask/issues/2897", "issue_id": "#2897", "issue_summary": "Define reloader extra_files in `flask run` CLI", "issue_description": "Contributor\nrochacbruno commented on 31 Aug 2018\nExpected Behavior\nI expected to have FLASK_RUN_EXTRA_FILES to be processed in the same way of FLASK_RUN_PORT and FLASK_RUN_HOST\nWhen using the old style app.run we can define an extra_files to be watched for changes by the reloader, that is useful for example, if you have a static settings file like settings.toml (using dynaconf) or another kind of static config or themed templates loaded from other paths\nActual Behavior\nIn the run command https://github.com/pallets/flask/blob/master/flask/cli.py#L775 the argument extra_files is not being passed to wekzeug.run_simple https://github.com/pallets/werkzeug/blob/master/werkzeug/serving.py#L738\nSuggestion\nAdd FLASK_RUN_EXTRA_FILES=\"path1,path2,path\" to flask run command.\nor\nMap all variables from werkzeug.run_simple - https://github.com/pallets/werkzeug/blob/master/werkzeug/serving.py#L738\nIn to FLASK_RUN_* prefixed env var or WERKZEUG_RUN_* prefixed env var.\nEnvironment\nPython version: 3.6\nFlask version: 1.0.2\nWerkzeug version: 0.14.1\n1", "issue_status": "Closed", "issue_reporting_time": "2018-08-31T15:17:43Z", "fixed_by": "#2898", "pull_request_summary": "Fix #2897 - Add `extra_files` option to `flask run` CLI", "pull_request_description": "Contributor\nrochacbruno commented on 1 Sep 2018 \u2022\nedited\nFix #2897\nTo define a list of files the reloader should watch additionally to the modules\nas in extra_files argument used in the app.run and werkzeug.serving.run_simple\nyou can either use the --extra-files (or multiple -f) option or define the\nFLASK_RUN_EXTRA_FILES environment variable.\n    # on windows use ``;`` instead of ``:`` to separate paths\n    export FLASK_RUN_EXTRA_FILES=/path/to/file1:/path/to/file2\n    flask run\n     * Running on http://127.0.0.1:8000/\n     * Detected change in '/path/to/file1', reloading\nOn command line the same can be achieved with flask run -f /path/to/file1 -f /path/to/file2.", "pull_request_status": "Merged", "issue_fixed_time": "2019-05-24T14:32:46Z", "files_changed": [["4", "CHANGES.rst"], ["19", "docs/cli.rst"], ["26", "flask/cli.py"]]}, "303": {"issue_url": "https://github.com/pallets/flask/issues/2896", "issue_id": "#2896", "issue_summary": "Spyder not showing output", "issue_description": "25pritesh commented on 30 Aug 2018 \u2022\nedited by davidism\nExpected Behavior\nStarting the server should show all the information lines:\n* Serving Flask app \"testfla\" (lazy loading)\n * Environment: production\n   WARNING: Do not use the development server in a production environment.\n   Use a production WSGI server instead.\n * Debug mode: on\n * Restarting with stat\n * Debugger is active!\n * Debugger PIN: 222-285-885\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n   return 'This is the homepage'\n\nif __name__ == '__main__':\n   app.run(debug=True\nActual Behavior\nOnly the following line is displayed when starting the server:\n* Restarting with stat\nEnvironment\nPython version: 3.6\nFlask version: 1.0.2\nWerkzeug version:\nAnaconda 5.2, Spyder 3.1", "issue_status": "Closed", "issue_reporting_time": "2018-08-30T17:30:31Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "304": {"issue_url": "https://github.com/pallets/flask/issues/2895", "issue_id": "#2895", "issue_summary": "To much logic in view url generation", "issue_description": "riklaunim commented on 30 Aug 2018\nAfter some use-cases of flask microservices I find url_for helper to be quite problematic to use.\nIf I use an app via two subdomains then by default url_for will use the request host name to generate the full url. As I want to use only one subdomain (app.sitename.com/view/ and not api.sitename.com/view/; and without subdomain routing setup) for the urls I have to handle this - _external=False and do it on my own.\nIf I use a custom flask command to execute some code that reverses an url then it needs the app context and SERVER_NAME even when it's explicitely _external=False (as url_adapter won't be present without SERVER_NAME set). SERVER_NAME has other usages and causes side effects (and breaks health checks on kubernetes deployment if set globally).\nSo there is a lot of magic going on in reversing view name to an url. There should be path-only equivalent for url_for to avoid all those requirements if absolute urls aren't needed.", "issue_status": "Closed", "issue_reporting_time": "2018-08-30T09:46:33Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "305": {"issue_url": "https://github.com/pallets/flask/issues/2894", "issue_id": "#2894", "issue_summary": "Chained exceptions should be logged properly", "issue_description": "gabbard commented on 30 Aug 2018\nExpected Behavior\nWhen a chained exception is thrown, the full exception chain should be logged.\nfrom flask import Flask\n\napp = Flask(__name__)\n\n\ndef do_something():\n  raise ValueError(\"Foo\")\n\n\n@app.route('/exception_test', methods=['GET', 'POST'])\ndef process():\n  try:\n    do_something()\n  except Exception as e:\n    raise ValueError(\"Wrapper\") from e\n\nif __name__ == '__main__':\n  app.debug = True\n  app.config['PROPAGATE_EXCEPTIONS'] = True\n  app.run(debug=True)\nThen wget http://127.0.0.1:5000/exception_test\nActual Behavior\nInstead only the exception at the \"end of the chain\" is logged:\n127.0.0.1 - - [29/Aug/2018 17:18:56] \"GET /exception_test HTTP/1.1\" 500 -\nTraceback (most recent call last):\n  File \"/Users/gabbard/anaconda3/envs/gaia-alternatives/lib/python3.6/site-packages/flask/app.py\", line 2309, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/Users/gabbard/anaconda3/envs/gaia-alternatives/lib/python3.6/site-packages/flask/app.py\", line 2295, in wsgi_app\n    response = self.handle_exception(e)\n  File \"/Users/gabbard/anaconda3/envs/gaia-alternatives/lib/python3.6/site-packages/flask/app.py\", line 1741, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/Users/gabbard/anaconda3/envs/gaia-alternatives/lib/python3.6/site-packages/flask/_compat.py\", line 35, in reraise\n    raise value\n  File \"/Users/gabbard/anaconda3/envs/gaia-alternatives/lib/python3.6/site-packages/flask/app.py\", line 2292, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/Users/gabbard/anaconda3/envs/gaia-alternatives/lib/python3.6/site-packages/flask/app.py\", line 1815, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"/Users/gabbard/anaconda3/envs/gaia-alternatives/lib/python3.6/site-packages/flask/app.py\", line 1718, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/Users/gabbard/anaconda3/envs/gaia-alternatives/lib/python3.6/site-packages/flask/_compat.py\", line 35, in reraise\n    raise value\n  File \"/Users/gabbard/anaconda3/envs/gaia-alternatives/lib/python3.6/site-packages/flask/app.py\", line 1813, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"/Users/gabbard/anaconda3/envs/gaia-alternatives/lib/python3.6/site-packages/flask/app.py\", line 1799, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"/Users/gabbard/projects/gaia/gaia-alternatives/repos/vista-nlp-jvm/vista_nlp_serialization/chained_exception_mcve.py\", line 22, in process\n    raise ValueError(\"Wrapper\") from e\nValueError: Wrapper\nThe same problem appears in the HTML stack traces.\nThis problem was also mentioned by @mscheper in this comment\nEnvironment\nPython version: 3.6\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-08-29T21:24:10Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "306": {"issue_url": "https://github.com/pallets/flask/issues/2893", "issue_id": "#2893", "issue_summary": "Environment variables in .env file not refreshing after re-running application", "issue_description": "davidhariri commented on 29 Aug 2018 \u2022\nedited\nTLDR;\nUse PIPENV_DONT_LOAD_ENV=1 pipenv shell\nExpected Behavior\nFlask sets/overrides environment variables specified in .env each time flask run is run.\nActual Behavior\nFlask is unaware that the .env file in my project directory has changed and does not refresh it's own environment variables.\nEnvironment\nPipenv\nPython version: 3.6.5\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-08-28T23:48:26Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "307": {"issue_url": "https://github.com/pallets/flask/issues/2891", "issue_id": "#2891", "issue_summary": "request.get_json(force=True) not working as expected", "issue_description": "a2x commented on 23 Aug 2018\nrequesting without {'Content-Type': 'application/json'}\nrequest.get_json(force=True) returns nothing (not as expected)\nrequest.get_json(force=False) returns None (not as expected)\nrequesting with {'Content-Type': 'application/json'}\nrequest.get_json(force=True) returns the JSON parsed to dict\nrequest.get_json(force=False) returns the JSON parsed to dict\nExpected behavior:\nShouldn't request.get_json(force=True) like mentioned in the docs \"Ignore the mimetype and always try to parse JSON.\"?\nthx, and keep up the great work", "issue_status": "Closed", "issue_reporting_time": "2018-08-22T19:16:55Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "308": {"issue_url": "https://github.com/pallets/flask/issues/2890", "issue_id": "#2890", "issue_summary": "Broken RTD builds/links", "issue_description": "lafrech commented on 22 Aug 2018\nApparently there's been some changes in the way the docs are generated on RTD.\nI see there's a rtd branch with a commit (86acd84) dedicated to RTD adding docs/requirements.txt.\nThe build on this branch passes but there's that warning on top of the page:\nWarning: This is an old version. The latest stable version is Version 1.0.2..\nThe other builds (1.0.2 and master) fail: https://readthedocs.org/projects/flask/builds/.\nI suppose the config was change in RTD to look for that requirements.txt file that only appears in rtd branch.\nAs a user, I don't mind the warning, but I'm building a documentation for a lib using Flask with this intersphinx mapping:\nintersphinx_mapping = {\n    'flask': ('http://flask.readthedocs.io/en/latest/', None),\n}\nI get an error due to the failed build as http://flask.readthedocs.io/en/latest/objects.inv is not fetchable.\nShould I use https://flask.readthedocs.io/en/rtd/objects.inv or is this temporary?\nThanks.", "issue_status": "Closed", "issue_reporting_time": "2018-08-22T10:21:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "309": {"issue_url": "https://github.com/pallets/flask/issues/2888", "issue_id": "#2888", "issue_summary": "No post information from firefox form", "issue_description": "strifel commented on 19 Aug 2018\nExpected Behavior\nFlask gets POST Data from form in every browser via request.form\n@app.route('/backend', methods=['GET', 'POST'])\ndef backend():\n    print(request.form)\nActual Behavior\nIn Chrome it gets the information of the form correctly, in firefox not.\n(I have not tested more browser)\nThe echoed request.form in firefox\nImmutableMultiDict([])\nEnvironment\nPython version: Python 3.6.5\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-08-18T19:31:03Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "310": {"issue_url": "https://github.com/pallets/flask/issues/2887", "issue_id": "#2887", "issue_summary": "Subdomains with dynamic domains", "issue_description": "BrendanMartin commented on 16 Aug 2018 \u2022\nedited\nI need to map multiple domains to a single app but each unique domain also has an \"admin\" subdomain.\nExamples:\nadmin.example1.com\nadmin.example2.com\nwhere the subdomain and domains are essentially the same blueprints with just different things pulled from the db.\nSo far I've only seen that you need to hardcode the SERVER_NAME in the config. Is there another way to do this?", "issue_status": "Closed", "issue_reporting_time": "2018-08-16T16:26:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "311": {"issue_url": "https://github.com/pallets/flask/issues/2886", "issue_id": "#2886", "issue_summary": "ImportError: cannot import name '_overlapped'", "issue_description": "DoubleBlock commented on 13 Aug 2018\nThis issue tracker is a tool to address bugs in Flask itself.\nPlease use the #pocoo IRC channel on freenode or Stack Overflow for general\nquestions about using Flask or issues not related to Flask.\nIf you'd like to report a bug in Flask, fill out the template below. Provide\nany any extra information that may be useful / related to your problem.\nIdeally, create an MCVE, which helps us\nunderstand the problem and helps check that it is not caused by something in\nyour code.\nExpected Behavior\nTell us what should happen.\n`from flask import Flask\n\n\napp = Flask(__name__)\n\n\n@app.route('/')\ndef index():\n    return 'hello world'\n\n\nif __name__ == '__main__':\n    app.run()`\nActual Behavior\nTell us what happens instead.\n`C:\\Users\\Administrator\\venv\\Scripts\\python.exe E:/flaskproject/ihome/hello.py\nTraceback (most recent call last):\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36-32\\Lib\\asyncio\\__init__.py\", line 16, in <module>\n    from . import _overlapped\nImportError: cannot import name '_overlapped'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"E:/flaskproject/ihome/hello.py\", line 1, in <module>\n    from flask import Flask\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\flask\\__init__.py\", line 19, in <module>\n    from jinja2 import Markup, escape\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\jinja2\\__init__.py\", line 82, in <module>\n    _patch_async()\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\jinja2\\__init__.py\", line 78, in _patch_async\n    from jinja2.asyncsupport import patch_all\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\jinja2\\asyncsupport.py\", line 13, in <module>\n    import asyncio\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python36-32\\Lib\\asyncio\\__init__.py\", line 18, in <module>\n    import _overlapped  # Will also be exported.\nImportError: DLL load failed: \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002`\nEnvironment\nPython version:3.6.4\nFlask version:1.0.2\nWerkzeug version:0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-08-13T16:07:46Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "312": {"issue_url": "https://github.com/pallets/flask/issues/2885", "issue_id": "#2885", "issue_summary": "Proposal: Rename `endpoint` to `routename`", "issue_description": "abitrolly commented on 13 Aug 2018\nExpected Behavior\nflask.url_for(endpoint, **values) prototype should be intuitively understood by general public. That could be done if Flask doesn't redefine common understanding of endpoint its own abstraction.\nThe common understanding is that endpoint is an URL.\nhttps://stackoverflow.com/questions/9807382/what-is-a-web-service-endpoint\nhttps://en.wikipedia.org/wiki/Web_API#Endpoints\nIf Flask uses routename instead of endpoint, then documentation could make sense for people not aware with Flask specifics. I mean this is not normal - https://stackoverflow.com/questions/19261833/what-is-an-endpoint-in-flask - 77 votes, 52 favorites (means people need to get back to it), 176 upvotes (about 99 people who maybe thought they know what endpoint is, but maybe was confused about real meaning or function).\nAlternative text.\n flask.url_for(routename, **values)\n\n    Generates a URL for the given `routename` with URL arguments converted from `values`.\n\n    `values` that are missing from route declaration are appended to the generated URL as query \narguments. If the value of a query argument is None, the whole pair is skipped. In case blueprints are \nactive you can shortcut references to the same blueprint by prefixing the local endpoint with a dot (.).\n\n    This will reference the index function local to the current blueprint:\n\n    url_for('.index')\n\n    For more information, head over to the Quickstart.\n\n    To integrate applications, Flask has a hook to intercept URL build errors through \nFlask.url_build_error_handlers. The url_for function results in a BuildError when the current app does \nnot have a URL for the given routename and values.\n...\nActual Behavior\nhttp://flask.pocoo.org/docs/1.0/api/#flask.url_for\nEnvironment\nFlask version: 1.0.2\n1", "issue_status": "Closed", "issue_reporting_time": "2018-08-13T09:33:02Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "313": {"issue_url": "https://github.com/pallets/flask/issues/2884", "issue_id": "#2884", "issue_summary": "app.logger can't work", "issue_description": "BeanWei commented on 11 Aug 2018 \u2022\nedited\nthe vscode error info:\n\"message\": \"E1101:Method 'logger' has no 'info' member\",\n\"message\": \"E1101:Method 'logger' has no 'addHandler' member\",\nbut I can still run it python test.py, I don't know why and i get nothing in app.log.\ntest.py\nfrom flask import Flask\n\nimport logging\nfrom logging.handlers import RotatingFileHandler\n\napp = Flask(__name__)\n\nhand_log = RotatingFileHandler('app.log')\nhand_log.setFormatter(logging.Formatter(\n    '[%(asctime)s]%(levelname)s: %(message)s'))\nhand_log.setLevel(logging.INFO)\napp.logger.addHandler(hand_log)\n\n@app.route('/')\ndef foo():\n    app.logger.info('welcome')\n    return \"hello\"\n\napp.run(debug=True)\nEnvironment\nPython version: 3.6.2\nFlask version: 1.0.2", "issue_status": "Closed", "issue_reporting_time": "2018-08-11T15:26:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "314": {"issue_url": "https://github.com/pallets/flask/issues/2883", "issue_id": "#2883", "issue_summary": "jinja2 compiled templates not working", "issue_description": "iljau commented on 11 Aug 2018\nExpected Behavior\nIt should be possible to use jinja2 precompiled templates using loader shown in documentation: http://jinja.pocoo.org/docs/2.10/api/#jinja2.ModuleLoader\nSample repo: https://github.com/iljau/flask_precompiled_templates_issue\nfrom flask import Flask, render_template\nfrom jinja2 import ChoiceLoader, FileSystemLoader, ModuleLoader\n\napp = Flask(__name__)\n\napp.jinja_env.compile_templates(\n    target='templates_compiled', zip=None,\n    ignore_errors=False\n)\n\nloader = ChoiceLoader([\n    ModuleLoader('templates_compiled'),\n    FileSystemLoader('templates')\n])\napp.jinja_loader = loader\n\n@app.route('/')\ndef hello_world():\n    return render_template(\"index.jinja2\")\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\nActual Behavior\nTell us what happens instead.\n  File ..\\lib\\site-packages\\flask\\app.py\", line 1813, in full_dispatch_request\n    rv = self.dispatch_request()\n  File ..\\lib\\site-packages\\flask\\app.py\", line 1799, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Ilja\\Code\\flowers_v2\\flowers\\flowers_app.py\", line 301, in general_expenses_list\n    return render_template(\"general_expenses.jinja2\", transactions=transactions, form=form)\n  File ..\\lib\\site-packages\\flask\\templating.py\", line 134, in render_template\n    return _render(ctx.app.jinja_env.get_or_select_template(template_name_or_list),\n  File ..\\lib\\site-packages\\jinja2\\environment.py\", line 869, in get_or_select_template\n    return self.get_template(template_name_or_list, parent, globals)\n  File ..\\lib\\site-packages\\jinja2\\environment.py\", line 830, in get_template\n    return self._load_template(name, self.make_globals(globals))\n  File ..\\lib\\site-packages\\jinja2\\environment.py\", line 804, in _load_template\n    template = self.loader.load(self, name, globals)\n  File ..\\lib\\site-packages\\jinja2\\loaders.py\", line 113, in load\n    source, filename, uptodate = self.get_source(environment, name)\n  File ..\\lib\\site-packages\\flask\\templating.py\", line 58, in get_source\n    return self._get_source_fast(environment, template)\n  File ..\\lib\\site-packages\\flask\\templating.py\", line 83, in _get_source_fast\n    return loader.get_source(environment, template)\n  File ..\\lib\\site-packages\\jinja2\\loaders.py\", line 90, in get_source\n    self.__class__.__name__)\nRuntimeError: ModuleLoader cannot provide access to the source\nEnvironment\nPython version: 3.7.0\nFlask version: 1.0.2\nWerkzeug version: 0.14.1\n3", "issue_status": "Closed", "issue_reporting_time": "2018-08-10T22:03:16Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "315": {"issue_url": "https://github.com/pallets/flask/issues/2882", "issue_id": "#2882", "issue_summary": "RuntimeError: can't start new thread, Exception happened during processing of request from", "issue_description": "DarKWinGTM commented on 9 Aug 2018 \u2022\nedited\nException happened during processing of request from ('xxx.xxx.xxx.xxx', xxxxx)\nTraceback (most recent call last):\nFile \"C:\\Users\\USER\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\socketserver.py\", line 313, in _handle_request_noblock\nself.process_request(request, client_address)\nFile \"C:\\Users\\USER\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\socketserver.py\", line 662, in process_request\nt.start()\nFile \"C:\\Users\\USER\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\threading.py\", line 847, in start\n_start_new_thread(self._bootstrap, ())\nRuntimeError: can't start new thread\nI get error like this when run in few hour\nThis issue tracker is a tool to address bugs in Flask itself.\nPlease use the #pocoo IRC channel on freenode or Stack Overflow for general\nquestions about using Flask or issues not related to Flask.\nIf you'd like to report a bug in Flask, fill out the template below. Provide\nany any extra information that may be useful / related to your problem.\nIdeally, create an MCVE, which helps us\nunderstand the problem and helps check that it is not caused by something in\nyour code.\nExpected Behavior\nTell us what should happen.\nPaste a minimal example that causes the problem.\nActual Behavior\nTell us what happens instead.\nPaste the full traceback if there was an exception.\nEnvironment\nPython version:3.7\nFlask version: 0.12.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-08-09T04:05:29Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "316": {"issue_url": "https://github.com/pallets/flask/issues/2881", "issue_id": "#2881", "issue_summary": "Sorry for writing here, i'm, really ashamed :(", "issue_description": "hackRussiaVKA commented on 5 Aug 2018\nHellow. I know that this platform is for bag-tracking and i'm so sorry to write here about my silly question. But my question on stackoverflow was mostly ignored and i tried to find a way to write to you cause i often see your answers there and I really need help. Moreover, it seems to me that for you it's just a couple of minute to solve that question. Pls, just take a look on in https://stackoverflow.com/questions/51687362/how-can-i-edit-data-fetched-from-db-in-html-table-flask-jinja2.", "issue_status": "Closed", "issue_reporting_time": "2018-08-05T06:24:02Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "317": {"issue_url": "https://github.com/pallets/flask/issues/2880", "issue_id": "#2880", "issue_summary": "Document clearly why the flask executable is recommended over app.run()", "issue_description": "asmaier commented on 2 Aug 2018\nCiting from issue #1575:\nThe biggest one is to somehow make it clear why the flask executable is recommended over app.run() for local development and to gently guide this through from the documentation. ( #1575 (comment))\nLooking through http://flask.pocoo.org/docs/1.0/quickstart/ I cannot see any explanation in this regard. I also don't understand why the name of the app must be exported as environment variable and cannot simply be an argument to the flask command. Without an explanation that seems very cumbersome to me. And what is the recommendation on how to run a flask app not for local development?", "issue_status": "Closed", "issue_reporting_time": "2018-08-02T09:40:16Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "318": {"issue_url": "https://github.com/pallets/flask/issues/2879", "issue_id": "#2879", "issue_summary": "https://flask.pocoo.org responds 400", "issue_description": "devhero commented on 2 Aug 2018\nThe website https://flask.pocoo.org response 400, it's practically down.", "issue_status": "Closed", "issue_reporting_time": "2018-08-02T08:00:31Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "319": {"issue_url": "https://github.com/pallets/flask/issues/2878", "issue_id": "#2878", "issue_summary": "`flask.helpers.get_root_path` returns unexpected path", "issue_description": "takisawa commented on 30 Jul 2018\nExpected Behavior\nimport flask\n\n# in /tmp/flask\napp = flask.Flask('tmp_name', root_path='/tmp')\nprint(flask.helpers.get_root_path('tmp_name'))\n# => expect `/tmp` but `/tmp/flask`\nEnvironment\nPython version: 3.6.5\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-07-30T08:47:53Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "320": {"issue_url": "https://github.com/pallets/flask/issues/2876", "issue_id": "#2876", "issue_summary": "flask issue", "issue_description": "YousufSafwan commented on 28 Jul 2018\nhow do i solve\nInternal Server Error\nThe server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.\nyousufs-MacBook-Pro:flask yousufsafwan$ flask run\nServing Flask app \"template.py\"\nEnvironment: production\nWARNING: Do not use the development server in a production environment.\nUse a production WSGI server instead.\nDebug mode: off\nRunning on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n[2018-07-28 16:08:41,337] ERROR in app: Exception on / [GET]\nTraceback (most recent call last):\nFile \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/flask/app.py\", line 2292, in wsgi_app\nresponse = self.full_dispatch_request()\nFile \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/flask/app.py\", line 1815, in full_dispatch_request\nrv = self.handle_user_exception(e)\nFile \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/flask/app.py\", line 1718, in handle_user_exception\nreraise(exc_type, exc_value, tb)\nFile \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/flask/_compat.py\", line 35, in reraise\nraise value\nFile \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/flask/app.py\", line 1813, in full_dispatch_request\nrv = self.dispatch_request()\nFile \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/flask/app.py\", line 1799, in dispatch_request\nreturn self.view_functionsrule.endpoint\nFile \"/Users/yousufsafwan/Documents/flask/template.py\", line 8, in index\nreturn render_template(\"first.html\")\nFile \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/flask/templating.py\", line 134, in render_template\nreturn _render(ctx.app.jinja_env.get_or_select_template(template_name_or_list),\nFile \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/jinja2/environment.py\", line 869, in get_or_select_template\nreturn self.get_template(template_name_or_list, parent, globals)\nFile \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/jinja2/environment.py\", line 830, in get_template\nreturn self._load_template(name, self.make_globals(globals))\nFile \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/jinja2/environment.py\", line 804, in _load_template\ntemplate = self.loader.load(self, name, globals)\nFile \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/jinja2/loaders.py\", line 113, in load\nsource, filename, uptodate = self.get_source(environment, name)\nFile \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/flask/templating.py\", line 58, in get_source\nreturn self._get_source_fast(environment, template)\nFile \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/flask/templating.py\", line 86, in _get_source_fast\nraise TemplateNotFound(template)\njinja2.exceptions.TemplateNotFound: first.html\n127.0.0.1 - - [28/Jul/2018 16:08:41] \"GET / HTTP/1.1\" 500 -", "issue_status": "Closed", "issue_reporting_time": "2018-07-28T11:09:10Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "321": {"issue_url": "https://github.com/pallets/flask/issues/2869", "issue_id": "#2869", "issue_summary": "Flask reloader problems in development mode using Docker", "issue_description": "angadkalra commented on 19 Jul 2018 \u2022\nedited by ThiefMaster\nExpected Behavior\nIn development mode, flask should detect changes in my files and reload the debugger successfully.\nActual Behavior\nIt outputs to terminal: \"Detected change in /flask/flaskr/api.py, reloading\" then never reloads.\nEnvironment\nPython version: 3.6.2\nFlask version: 1.0.2", "issue_status": "Closed", "issue_reporting_time": "2018-07-19T17:41:11Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "322": {"issue_url": "https://github.com/pallets/flask/issues/2868", "issue_id": "#2868", "issue_summary": "Solve the redirect problem", "issue_description": "ThunderboltSmile commented on 19 Jul 2018 \u2022\nedited by ThiefMaster\nExpected Behavior\nWhen a view return redirect('/') , it redirect to www.example.com\nif error is None:\n    session.clear()\n    session['user_id'] = user['id']\n    return url_for('index')\nActual Behavior\nWhen a view return redirect('/') , it changeed the domain to 127.0.0.1\nEnvironment\nPython version:3.6\nFlask version:latest\nWerkzeug version:latest", "issue_status": "Closed", "issue_reporting_time": "2018-07-19T16:10:28Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "323": {"issue_url": "https://github.com/pallets/flask/issues/2867", "issue_id": "#2867", "issue_summary": "request.full_path shouldn't contain a trailing ? if there was none in the URL", "issue_description": "Contributor\nExplodingCabbage commented on 19 Jul 2018\nExpected Behavior\nIf I make a request to http://localhost:5000/foo, then request.full_path should contain /foo.\nActual Behavior\nIt contains /foo?\nMinimal example\nSave this to a file and run it:\nfrom flask import Flask, request\napp = Flask(__name__)\n@app.route('/test')\ndef test():\n    return request.full_path\napp.run()\nThen go to http://localhost:5000/test\nYou will see /test? in the browser.\nEnvironment\nPython version: 3.6.1\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-07-19T11:22:30Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "324": {"issue_url": "https://github.com/pallets/flask/issues/2866", "issue_id": "#2866", "issue_summary": "DispatcherMiddleware with different loggers per app in flask 1.0", "issue_description": "jwldk commented on 18 Jul 2018\nAfter upgrading to flask 1.0 logging from different apps using DispatcherMiddleware, each log emitted is written to all handlers in the different apps. I assume this caused by app.logger always having the name flask.app, maybe?\nHere is a example:\nfrom werkzeug.wsgi import DispatcherMiddleware\nfrom flask import Flask\nfrom logging.handlers import RotatingFileHandler\n\n\nhandler1 = RotatingFileHandler('app1.log')\napp1 = Flask('app1')\napp1.logger.addHandler(handler1)\n\nhandler2 = RotatingFileHandler('app2.log')\napp2 = Flask('app2')\napp2.logger.addHandler(handler2)\n\n\n@app1.route(\"/\")\ndef hello():\n    app1.logger.error(\"from app1\")\n    return ''\n\n\n@app2.route(\"/\")\ndef hello2():\n    app2.logger.error(\"from app2\")\n    return ''\n\n\napp = DispatcherMiddleware(app1, {\n    '/app2': app2\n})\nRun with\nuwsgi --socket 0.0.0.0:8000 --protocol=http -w app --callable app\nAnd then make a request to / and /app2/. Each error log will be written in both logfiles.\nEnvironment\nPython version: 3.6.5\nFlask version: 1.0.2\nWerkzeug version: 0.14.1\nMy actual app is using current_app.logger with blueprints with the same behaviour, but I assume it the same issue.", "issue_status": "Closed", "issue_reporting_time": "2018-07-18T12:18:21Z", "fixed_by": "#3282", "pull_request_summary": "use app.name as app.logger name", "pull_request_description": "Member\ndavidism commented on 2 Jul 2019\n#2436 greatly simplified how logging is set up in Flask. Part of that removed the LOGGER_NAME config and hard-coded \"flask.app\". However, #2866 points out that due to this it is no longer possible to distinguish logs when dispatching multiple apps.\nThis partially reverts the logger name behavior change from 1.0. There is still no config, but the logger's name is now the same as app.name (basically the value passed to Flask(import_name)).\nThe information that's currently logged does make sense as coming from the user's project rather than Flask itself, although we may introduce the \"flask.app\" logger again in the future for logging things truly internal to Flask and not the user's app.\nThis may require projects to update their logging config to reference their app's name instead of \"flask.app\".\nCloses #2866", "pull_request_status": "Merged", "issue_fixed_time": "2019-07-02T00:42:51Z", "files_changed": [["6", "CHANGES.rst"], ["2", "docs/config.rst"], ["2", "docs/errorhandling.rst"], ["12", "docs/logging.rst"], ["28", "src/flask/app.py"], ["7", "src/flask/logging.py"], ["4", "tests/test_logging.py"], ["4", "tests/test_templating.py"]]}, "325": {"issue_url": "https://github.com/pallets/flask/issues/2865", "issue_id": "#2865", "issue_summary": "How to change url before route?", "issue_description": "hcaihao commented on 14 Jul 2018\nI have some urls with DES encoded, for example: http://host/p?XXXXXXXX\nXXXXXXXX == DES(\"a=1&b=2\")\nI need decode the args before route. In the before_request cannot change request.url, How to do this, thanks!", "issue_status": "Closed", "issue_reporting_time": "2018-07-14T13:04:10Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "326": {"issue_url": "https://github.com/pallets/flask/issues/2864", "issue_id": "#2864", "issue_summary": "add option timeout for redirect", "issue_description": "TechComet commented on 14 Jul 2018\nHi,\nadd option timeout for redirect", "issue_status": "Closed", "issue_reporting_time": "2018-07-13T19:47:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "327": {"issue_url": "https://github.com/pallets/flask/issues/2863", "issue_id": "#2863", "issue_summary": "UnsupportedOperation: not writable utils.py, line 259, in echo file.write(message)", "issue_description": "gadzet commented on 12 Jul 2018\nExpected Behavior\nRunning this code worked previously, then i switched form code editor to spyder IDE.\nfrom flask import Flask\nfrom flask_restful import Api\nfrom flask_jwt import JWT\n\nfrom security import authenticate, identity\nfrom resources.user import UserRegister\nfrom resources.product import Product, ProductList\n\napp = Flask(__name__)\napp.secret_key = 'longandcomplicated'\napi = Api(app)\n\njwt = JWT(app, authenticate, identity)\n\napi.add_resource(ProductList, '/products')\napi.add_resource(Product, '/product/<string:name>')\napi.add_resource(UserRegister, '/register')\n\napp.run(port=5000, debug=True)\nActual Behavior\nTell us what happens instead.\nrunfile('D:/pEshop/code/app.py', wdir='D:/pEshop/code')\nTraceback (most recent call last):\n\n  File \"<ipython-input-1-84a080c78298>\", line 1, in <module>\n    runfile('D:/pEshop/code/app.py', wdir='D:/pEshop/code')\n\n  File \"C:\\Users\\user\\Anaconda3\\envs\\pShop\\lib\\site-packages\\spyder\\utils\\site\\sitecustomize.py\", line 705, in runfile\n    execfile(filename, namespace)\n\n  File \"C:\\Users\\user\\Anaconda3\\envs\\pShop\\lib\\site-packages\\spyder\\utils\\site\\sitecustomize.py\", line 102, in execfile\n    exec(compile(f.read(), filename, 'exec'), namespace)\n\n  File \"D:/pEshop/code/app.py\", line 19, in <module>\n    app.run(port=5000, debug=True)\n\n  File \"C:\\Users\\user\\Anaconda3\\envs\\pShop\\lib\\site-packages\\flask\\app.py\", line 938, in run\n    cli.show_server_banner(self.env, self.debug, self.name, False)\n\n  File \"C:\\Users\\user\\Anaconda3\\envs\\pShop\\lib\\site-packages\\flask\\cli.py\", line 629, in show_server_banner\n    click.echo(message)\n\n  File \"C:\\Users\\user\\Anaconda3\\envs\\pShop\\lib\\site-packages\\click\\utils.py\", line 259, in echo\n    file.write(message)\n\nUnsupportedOperation: not writable \nEnvironment\nPython version: 3.6.6\nFlask version: 1.0.2\nWerkzeug version: 0.14.1\nExpected Behavior\nAfter i've commentd out the line with the error it started to work fine, but I'm not getting messages in console anymore.", "issue_status": "Closed", "issue_reporting_time": "2018-07-12T14:56:21Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "328": {"issue_url": "https://github.com/pallets/flask/issues/2860", "issue_id": "#2860", "issue_summary": "Use of dotenv causes flask cli to fail.", "issue_description": "DanCardin commented on 11 Jul 2018\nExpected Behavior\nInstall dotenv\n** (In my case, dotenv is installed for reasons other than flask)\nput a .env file in a folder somewhere above the python package\n** (In my case, a .env file is being used with docker-compose.yml in a containing folder)\ncreate a minimal flask app and run flask (it should just work)\nActual Behavior\nYour app wont work if run, and flask prints the following traceback.\nTraceback (most recent call last):\n  File \"./lib/python3.6/site-packages/flask/cli.py\", line 235, in locate_app\n    __import__(module_name)\nModuleNotFoundError: No module named 'manage'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"./lib/python3.6/site-packages/flask/cli.py\", line 529, in list_commands\n    rv.update(info.load_app().cli.list_commands(ctx))\n  File \"./lib/python3.6/site-packages/flask/cli.py\", line 372, in load_app\n    app = locate_app(self, import_name, name)\n  File \"./lib/python3.6/site-packages/flask/cli.py\", line 246, in locate_app\n    'Could not import \"{name}\".'.format(name=module_name)\nflask.cli.NoAppException: Could not import \"manage\".\nEnvironment\nFlask version: 1.0\nIf I create a .env file at the top level of my python package/distribution (e.g. next to setup.py), the issue is solved.\nTo me, it appears that the problem is in flask/cli.py, line 617 on master.\n    if new_dir and os.getcwd() != new_dir:\n        os.chdir(new_dir)\nnew_dir is the result of dotenv.find_dotenv which looks upwards in the folder hierarchy. The resultant directory is then outside the context of the project, and the os.chdir causes any attempted imports of local code to fail.\nI would have submitted a PR removing that os.chdir, but I wasn't sure it would have been accepted. I assume its there to allow someone to run flask from inside a subfolder of their application, but the location of the .env file isn't necessarily indicative of that.", "issue_status": "Closed", "issue_reporting_time": "2018-07-11T12:22:06Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "329": {"issue_url": "https://github.com/pallets/flask/issues/2857", "issue_id": "#2857", "issue_summary": "Jsonify always returns datetime objects as GMT timezone", "issue_description": "wayneworkman commented on 10 Jul 2018 \u2022\nedited\nIssue\nJsonify always returns datetime objects as GMT timezone. Seems like this has been a problem in the past with these issues:\n#2392\n#2374\nEnvironment\nPython version: 2.7.5\nFlask version: 1.0.2\nWerkzeug version: 0.14.1\npytz version: 2018.5\nTestcode\n#!/usr/bin/env python2.7\n\nfrom werkzeug.http import http_date\nfrom datetime import datetime\nimport pytz\n\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('/')\ndef root():\n    # Localize time\n    local_time = pytz.timezone(\"America/Chicago\")\n    time = datetime.utcnow().replace(microsecond=0).replace(tzinfo=pytz.utc)\n    time = time.astimezone(local_time)\n\n    print(\"iso format:\", time.isoformat())\n    print(\"object:\", time.tzinfo)\n    print(\"http date:\", http_date(time))\n\n    result = [time]\n\n    print(\"Test object: %s\" % result)\n\n    return jsonify(result)\n\napp.run(host='127.0.0.1', port=8080, debug=False)\nConsole output:\nTest object: [datetime.datetime(2018, 7, 10, 11, 45, 20, tzinfo=<DstTzInfo 'America/Chicago' CDT-1 day, 19:00:00 DST>)]\nJsonify output:\n[\"Tue, 10 Jul 2018 16:45:20 GMT\"]", "issue_status": "Closed", "issue_reporting_time": "2018-07-10T16:47:53Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "330": {"issue_url": "https://github.com/pallets/flask/issues/2856", "issue_id": "#2856", "issue_summary": "An end-to-end workflow: Token based authorization using Flask and rest API.", "issue_description": "sridharp2992 commented on 10 Jul 2018\nThis issue tracker is a tool to address bugs in Flask itself.\nPlease use the #pocoo IRC channel on freenode or Stack Overflow for general\nquestions about using Flask or issues not related to Flask.\nIf you'd like to report a bug in Flask, fill out the template below. Provide\nany any extra information that may be useful / related to your problem.\nIdeally, create an MCVE, which helps us\nunderstand the problem and helps check that it is not caused by something in\nyour code.\nExpected Behavior\nTell us what should happen.\nPaste a minimal example that causes the problem.\nActual Behavior\nTell us what happens instead.\nPaste the full traceback if there was an exception.\nEnvironment\nPython version:\nFlask version:\nWerkzeug version:", "issue_status": "Closed", "issue_reporting_time": "2018-07-09T22:53:11Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "331": {"issue_url": "https://github.com/pallets/flask/issues/2853", "issue_id": "#2853", "issue_summary": "@property for configuration objects?", "issue_description": "Contributor\ndougthor42 commented on 3 Jul 2018\nAre properties supported for configuration objects? It doesn't look like it.\nBeing able to use @property on configuration objects could simplify some of the more complex configurations out there:\n# Without @property\nclass BaseConfig(object)\n    NAME = \"a\"\n    HELLO = \"Hello, \" + NAME\n\nclass ProdConfig(BaseConfig):\n    NAME = \"b\"\n    HELLO = \"Hello, \" + NAME           # repeated code! Makes me \ud83d\ude22\n\n# With @property\nclass BaseConfig(object)\n    NAME = \"a\"\n\n    @property\n    def HELLO(self)\n        return \"Hello, \" + self.NAME\n\nclass ProdConfig(BaseConfig):\n    NAME = \"b\"                         # Don't need to define HELLO again, yay!\nExpected Behavior\nIt seems like it would be useful to be able to use properties when defining config variables using from_object:\n# my_config.py\nclass BaseConfig(object):\n    NAME = \"Terry Gilliam\"\n\n    @property\n    def HELLO(self):\n        return \"Hello, \" + self.NAME\n\nclass ProdConfig(BaseConfig):\n     NAME = \"Monty Python\"\n# example.py\nfrom flask import Flask\napp = Flask(__name__)\napp.config.from_object('my_config.ProdConfig')\nprint(app.config['HELLO'])\n# \"Hello, Monty Python\"\nActual Behavior\nBecause the config class is not actually instantiated, the HELLO property is simply a <property object at 0x...> rather than Hello, Terry Gilliam or Hello, Monty Python.\n# example.py\nfrom flask import Flask\napp = Flask(__name__)\napp.config.from_object('my_config.ProdConfig')\nprint(app.config['HELLO'])\n# <property object at 0x000001EC5404D458>\nEnvironment\nPython version: 3.5.2\nFlask version: 1.0.2\nWerkzeug version: 0.14.1\nPossible Resolution\nIf configuration objects are called ProdConfig(), then the property resolves. I'm sure that there's a reason for not instantiating the config object, but I thought it would be worth a discussion. I'm sure it's security related.\nThe fix might look like:\n# flask.config.Config.from_object\n...\nfor key in dir(obj):\n    if key.isupper():\n        self[key] = getattr(obj, key)\n        # only instantiate the object if a property is detected\n        if isinstance(self[key], type(property())):\n            self[key] = getattr(obj(), key)", "issue_status": "Closed", "issue_reporting_time": "2018-07-02T19:51:26Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "332": {"issue_url": "https://github.com/pallets/flask/issues/2852", "issue_id": "#2852", "issue_summary": "Examples wiki?", "issue_description": "Nadav-Ruskin commented on 2 Jul 2018\nHello again,\nI've made a flask example project for simple uses because I feel those are scarce. I wonder if you would consider making a wiki page or something for flask where example projects can be stored?", "issue_status": "Closed", "issue_reporting_time": "2018-07-02T13:16:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "333": {"issue_url": "https://github.com/pallets/flask/issues/2847", "issue_id": "#2847", "issue_summary": "http://127.0.0.1:5000/post/0 not working", "issue_description": "iamkaustubh1019 commented on 28 Jun 2018 \u2022\nedited by davidism\nfrom flask import Flask\n\napp = Flask(__name__)\nposts = {\n    0: dict(title='Hello World', content='This is my first ever post !')\n}\n\n@app.route('/')\ndef home():\n    return 'Hello World!'\n\n@app.route('/post/<int:post_id>') \ndef post(post_id):\n    post = posts.get(post_id)\n    return f\"Post {post['title']} , content:\\n\\n{post['content']}\"\n\nif __name__ == '__main__':\n    app.run(debug=True)\n1", "issue_status": "Closed", "issue_reporting_time": "2018-06-28T17:09:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "334": {"issue_url": "https://github.com/pallets/flask/issues/2846", "issue_id": "#2846", "issue_summary": "The file name called \u2018frozenAccount\u2019 may be shielded", "issue_description": "shinylion commented on 28 Jun 2018\nThis issue tracker is a tool to address bugs in Flask itself.\nPlease use the #pocoo IRC channel on freenode or Stack Overflow for general\nquestions about using Flask or issues not related to Flask.\nIf you'd like to report a bug in Flask, fill out the template below. Provide\nany any extra information that may be useful / related to your problem.\nIdeally, create an MCVE, which helps us\nunderstand the problem and helps check that it is not caused by something in\nyour code.\nExpected Behavior\nCreate a file called frozenAccount.py to import the file and call the same name function defined in the file.\nAttributeError: 'function' object has no attribute'frozenAccount'.\nReplace the file name with others, and the program can be executed normally. So why can't this name be?\nOr because it's a reserved word\uff1f\nActual Behavior\nTell us what happens instead.\nPaste the full traceback if there was an exception.\nEnvironment\nPython version:2.7.13\nFlask version:0.12.2\nWerkzeug version:0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-06-28T10:33:12Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "335": {"issue_url": "https://github.com/pallets/flask/issues/2841", "issue_id": "#2841", "issue_summary": "Flask 1.0: global exception handler handles not found now?", "issue_description": "danieljacobs1 commented on 26 Jun 2018\nHi,\nWe're looking at upgrading from Flask 0.12 to 1.0, and have run into an issue with routes that don't exist.\nWe have a custom error handler that we install for Python's built-in Exception class so that we can have a useful error message should any error occur during request execution. With Flask 1.0, we are finding that URLs that don't exist are triggering a call to the custom error handler.\nWe would like to preserve the behaviour so that non-existent URLs continue to return a 404/Not Found response.\nI've tried reading the docs and couldn't see a way, so might have missed something:\nhttp://flask.pocoo.org/docs/1.0/errorhandling/#error-handlers\nWhat is the recommended way of doing this? Or is this a bug?\nI wasn't 100% sure, but this could be the same as #2778?\nExpected Behavior\nWith the Flask app running as below, the following command:\ncurl -XGET http://127.0.0.1:5001/does-not-exist\nshould return 404/Not Found.\n#! python\n\n\"\"\"\nSimple Flask app with a global exception handler.\n\"\"\"\n\nfrom http import HTTPStatus\n\nfrom flask import Flask\n\n\napp = Flask(__name__)\n\n\n@app.errorhandler(Exception)\ndef global_exception_handler(err):\n    \"\"\" Global exception handler.\n    \"\"\"\n    print(\"In global_exception_handler\", err)\n    return \"From global_exception_handler\\n\", HTTPStatus.INTERNAL_SERVER_ERROR\n\n\n@app.route(\"/error\")\ndef error():\n    \"\"\" Simple endpoint that raises an exception\n    \"\"\"\n    # simulate a real error that can occur during request processing\n    raise AttributeError(\"These aren't the attributes you are looking for.\")\n\n\n@app.route(\"/simple\")\ndef simple():\n    \"\"\" Simple endpoint\n    \"\"\"\n    # sanity check\n    return \"Hello World!\\n\", HTTPStatus.OK\n\n\ndef main():\n    \"\"\" The entry point\n    \"\"\"\n    app.run(port=5001)\n\n\nif __name__ == \"__main__\":\n    main()\nActual Behavior\nOur global exception handler is invoked and instead of 404/Not found we get what it returns (500/internal server error).\nCommand line output when running the app with Flask 1.0.2:\ndan@dan-desktop:/tmp $ curl -XGET http://127.0.0.1:5001/error\nFrom global_exception_handler\ndan@dan-desktop:/tmp $ curl -XGET http://127.0.0.1:5001/does-not-exist\nFrom global_exception_handler\ndan@dan-desktop:/tmp $ curl -XGET http://127.0.0.1:5001/simple\nHello World!\nCommand line output when running the app with Flask 0.12.4:\ndan@dan-desktop:/tmp $ curl -XGET http://127.0.0.1:5001/error\nFrom global_exception_handler\ndan@dan-desktop:/tmp $ curl -XGET http://127.0.0.1:5001/does-not-exist\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again.</p>\ndan@dan-desktop:/tmp $ curl -XGET http://127.0.0.1:5001/simple\nHello World!\nEnvironment\nPython version: Python 3.6.2\nFlask version: 1.0.2\nWerkzeug version: 0.14.1\n8", "issue_status": "Closed", "issue_reporting_time": "2018-06-26T11:41:53Z", "fixed_by": "#3266", "pull_request_summary": "always pass InternalServerError instance to 500 handler", "pull_request_description": "Member\ndavidism commented on 20 Jun 2019 \u2022\nedited\nDue to multiple PRs over the last 5 years, the error handler behavior has slowly changed with the goal of being more consistent. However, after #2314 was merged in 1.0.0, these changes all cascaded together to make some inconsistent behavior finally visible.\nAfter extensive discussion in #1281, #1291, and #1429, the goal was to make error handlers trigger for exceptions in MRO order, rather than registration order. It formalized the idea that HTTP exception classes and status codes were aliases. Registering a handler for 401 was the same as Unauthorized.\nHowever, it (unintentionally?) preserved some old behavior where user errors would only be looked up against a 500 error handler, not a InternalServerError handler, even though the goal was for these to be aliases.\n#2314 ensured a more consistent lookup order between blueprints and app error handlers for codes and exception classes. #2362 simplified the code even more, and made it more correct for subclass handling. A side effect of these refactors was that it fixed the preserved behavior, so 500 and InternalServerError handlers were equivalent.\nAll these changes had the goal of making error handler registration and triggering more intuitive, and making maintenance easier.\nWhen an unhandled exception is raised, handle_exception is triggered so that a final, generic internal server error is returned. Previously, the behavior was to pass the unhandled exception to the 500 error handler, rather than the generic InternalServerError. Now that 500 and InternalServerError were the same thing and were both considered as handlers for generic error, users who registered a handler for InternalServerError or the HTTPException base class were surprised to get other random exceptions passed to the handler, rather than strict subclasses (#2778, #2841).\nA fix was proposed in #2983 which continued to preserve the old behavior by making a handler for 500 receive any error, while a handler for InternalServerError only received InternalServerError. I think this made the code harder to reason about, both for maintainers and for app devs.\nInstead, I'm going the opposite direction and ensuring that those handlers only ever receive InternalServerError instances. For unhandled errors, the exception has a new original_exception attribute that has the original unhandled error. This will be formalized in Werkzeug 1.0.0, until then getattr can be used to check if the attribute is set. The upside of this is that it is safe to assume that all codes and classes are aliases, and will only receive matching classes of errors, which seems to have been the intention of previous discussions, and makes the most sense to me.\nThe downside is that there is no way for this to be 100% backwards compatible for 500 handlers that were written assuming any exception would be passed to them, and I couldn't think of a way to have a useful deprecation warning transition. e will always look like InternalServerError, possibly making existing generic error pages less useful. However, with the availability of e.original_exception, it should be straightforward to get the intended behavior back. Code shouldn't fail in the mean time, only be less specific. I think the benefit of more consistent behavior outweighs the drawback.\ncloses #2778\ncloses #2841\ncloses #2983\nWhile fixing this, I noticed that finalize_request was only called if a 500 error handler was found. If no custom handler was registered, then an unhandled error would skip after_request functions, saving the session, and sending the request_finished signal. This is now fixed, so finalize_request is always called.\nTo clear up related confusion about very generic error handlers such as HTTPException and Exception, more docs have been added to the errorhandling.rst page. handle_exception has much clearer explanations of what it does too.\n1", "pull_request_status": "Merged", "issue_fixed_time": "2019-06-21T15:34:00Z", "files_changed": [["11", "CHANGES.rst"], ["90", "docs/errorhandling.rst"], ["49", "src/flask/app.py"], ["97", "tests/test_user_error_handler.py"]]}, "336": {"issue_url": "https://github.com/pallets/flask/issues/2838", "issue_id": "#2838", "issue_summary": "Logging example fails outside request context", "issue_description": "kaldown commented on 20 Jun 2018 \u2022\nedited\nExpected Behavior\nFLASK_APP=src/app.py flask run # doesn't work\nshould run server as well as\nFLASK_ENV=development FLASK_APP=src/app.py flask run  # works\nActual Behavior\nFLASK_ENV=production FLASK_APP=src/app.py flask run\n * Serving Flask app \"src/app.py\"\n * Environment: production\n   WARNING: Do not use the development server in a production environment.\n   Use a production WSGI server instead.\n * Debug mode: off\n--- Logging error ---\nTraceback (most recent call last):\n  File \"/usr/lib/python3.5/logging/__init__.py\", line 986, in emit\n    msg = self.format(record)\n  File \"/usr/lib/python3.5/logging/__init__.py\", line 836, in format\n    return fmt.format(record)\n  File \"/home/user/projects/phenom/-api/src/loggers.py\", line 10, in format\n    record.url = request.url\n  File \"/home/user/.local/share/virtualenvs/-api-GbHiIKAL/lib/python3.5/site-packages/werkzeug/local.py\", line 347, in __getattr__\n    return getattr(self._get_current_object(), name)\n  File \"/home/user/.local/share/virtualenvs/-api-GbHiIKAL/lib/python3.5/site-packages/werkzeug/local.py\", line 306, in _get_current_object\n    return self.__local()\n  File \"/home/user/.local/share/virtualenvs/-api-GbHiIKAL/lib/python3.5/site-packages/flask/globals.py\", line 37, in _lookup_req_object\n    raise RuntimeError(_request_ctx_err_msg)\nRuntimeError: Working outside of request context.\n\nThis typically means that you attempted to use functionality that needed\nan active HTTP request.  Consult the documentation on testing for\ninformation about how to avoid this problem.\nCall stack:\n  File \"/home/user/.local/share/virtualenvs/-api-GbHiIKAL/bin/flask\", line 11, in <module>\n    sys.exit(main())\n  File \"/home/user/.local/share/virtualenvs/-api-GbHiIKAL/lib/python3.5/site-packages/flask/cli.py\", line 894, in main\n    cli.main(args=args, prog_name=name)\n  File \"/home/user/.local/share/virtualenvs/-api-GbHiIKAL/lib/python3.5/site-packages/flask/cli.py\", line 557, in main\n    return super(FlaskGroup, self).main(*args, **kwargs)\n  File \"/home/user/.local/share/virtualenvs/-api-GbHiIKAL/lib/python3.5/site-packages/click/core.py\", line 697, in main\n    rv = self.invoke(ctx)\n  File \"/home/user/.local/share/virtualenvs/-api-GbHiIKAL/lib/python3.5/site-packages/click/core.py\", line 1066, in invoke\n    return _process_result(sub_ctx.command.invoke(sub_ctx))\n  File \"/home/user/.local/share/virtualenvs/-api-GbHiIKAL/lib/python3.5/site-packages/click/core.py\", line 895, in invoke\n    return ctx.invoke(self.callback, **ctx.params)\n  File \"/home/user/.local/share/virtualenvs/-api-GbHiIKAL/lib/python3.5/site-packages/click/core.py\", line 535, in invoke\n    return callback(*args, **kwargs)\n  File \"/home/user/.local/share/virtualenvs/-api-GbHiIKAL/lib/python3.5/site-packages/click/decorators.py\", line 64, in new_func\n    return ctx.invoke(f, obj, *args[1:], **kwargs)\n  File \"/home/user/.local/share/virtualenvs/-api-GbHiIKAL/lib/python3.5/site-packages/click/core.py\", line 535, in invoke\n    return callback(*args, **kwargs)\n  File \"/home/user/.local/share/virtualenvs/-api-GbHiIKAL/lib/python3.5/site-packages/flask/cli.py\", line 771, in run_command\n    threaded=with_threads, ssl_context=cert)\n  File \"/home/user/.local/share/virtualenvs/-api-GbHiIKAL/lib/python3.5/site-packages/werkzeug/serving.py\", line 814, in run_simple\n    inner()\n  File \"/home/user/.local/share/virtualenvs/-api-GbHiIKAL/lib/python3.5/site-packages/werkzeug/serving.py\", line 776, in inner\n    log_startup(srv.socket)\n  File \"/home/user/.local/share/virtualenvs/-api-GbHiIKAL/lib/python3.5/site-packages/werkzeug/serving.py\", line 764, in log_startup\n    display_hostname, port, quit_msg)\n  File \"/home/user/.local/share/virtualenvs/-api-GbHiIKAL/lib/python3.5/site-packages/werkzeug/_internal.py\", line 88, in _log\nI think that the problem is in:\n# src/loggers.py\n\nimport logging\nfrom logging.config import dictConfig\n\nfrom flask import request\n\nclass RequestFormatter(logging.Formatter):\n    def format(self, record):\n        record.url = request.url\n        record.remote_addr = request.remote_addr\n        return super().format(record)\n\n\ndef init_logger():\n    dictConfig({\n        'version': 1,\n        'formatters': {\n            'default': {\n                '()': 'src.loggers.RequestFormatter',\n                'format': '[%(asctime)s] [%(process)d] %(remote_addr)s requested %(url)s\\n'\n                          '%(levelname)s in %(module)s: %(message)s'\n            }\n        },\n        'handlers': {\n            'views': {\n                'class': 'logging.StreamHandler',\n                'formatter': 'default'\n            },\n        },\n        'root': {\n            'level': 'INFO',\n            'handlers': ['views']\n        },\n    })\ninit_logger()\ncalled before app = Flask()\npython3.5\nFlask 1.0.2\n1", "issue_status": "Closed", "issue_reporting_time": "2018-06-20T13:41:43Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "337": {"issue_url": "https://github.com/pallets/flask/issues/2833", "issue_id": "#2833", "issue_summary": "Documentation for testing need to be updated", "issue_description": "Member\ngreyli commented on 16 Jun 2018 \u2022\nedited\nThe chapter Testing Flask Applications in docs need to be updated to compatible with the rewritten flaskr application.\nSee #2831 for more info.\n2", "issue_status": "Closed", "issue_reporting_time": "2018-06-16T14:39:26Z", "fixed_by": "#3349", "pull_request_summary": "Update testing.rst", "pull_request_description": "Contributor\nnathanmp commented on 2 Sep 2019\nIt now describes how to install flaskr using pip so that all tests pass.\nAll tests in examples/tutorial/tests failed because the module flaskr could not be loaded, so I added a line describing how to install flaskr as an editable module. This should fix #2833 .", "pull_request_status": "Merged", "issue_fixed_time": "2019-09-02T16:05:06Z", "files_changed": [["5", "docs/testing.rst"]]}, "338": {"issue_url": "https://github.com/pallets/flask/issues/2831", "issue_id": "#2831", "issue_summary": "First example in \"Testing Flask Applications\" doc fails", "issue_description": "anthony-aylward commented on 16 Jun 2018 \u2022\nedited\nExpected Behavior\nI am attempting to follow the example in http://flask.pocoo.org/docs/1.0/testing/\nI expect to see all tests pass after these steps:\ngit clone https://github.com/pallets/flask.git\ncd flask\ngit checkout 1.0.2\ncd examples/tutorial\npython3 -m venv venv\n. venv/bin/activate\npip install -e .\npip install '.[test]'\npytest\npip install pytest\nprintf 'import os\\nimport tempfile\\n\\nimport pytest\\n\\nfrom flaskr import flaskr\\n' > tests/test_flaskr.py\npytest\nActual Behavior\nInstead, the result of the final pytest call is:\n======================= test session starts ========================\nplatform darwin -- Python 3.6.5, pytest-3.6.1, py-1.5.3, pluggy-0.6.0\nrootdir: /Users/anthonyaylward/Documents/web-projects/flask/examples/tutorial, inifile: setup.cfg\ncollected 24 items / 1 errors\n\n============================== ERRORS ==============================\n______________ ERROR collecting tests/test_flaskr.py _______________\nImportError while importing test module '/Users/anthonyaylward/Documents/web-projects/flask/examples/tutorial/tests/test_flaskr.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\ntests/test_flaskr.py:6: in <module>\n    from flaskr import flaskr\nE   ImportError: cannot import name 'flaskr'\n!!!!!!!!!!!!! Interrupted: 1 errors during collection !!!!!!!!!!!!!!\n===================== 1 error in 0.52 seconds ======================\nEnvironment\nPython version: 3.6.5\nFlask version: 1.0.2", "issue_status": "Closed", "issue_reporting_time": "2018-06-16T01:25:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "339": {"issue_url": "https://github.com/pallets/flask/issues/2830", "issue_id": "#2830", "issue_summary": "Cannot fork Flask repository", "issue_description": "Contributor\ngcrsaldanha commented on 15 Jun 2018\nExpected Behavior\nWhen I click the \"fork\" button or go to https://github.com/pallets/flask/fork I should be able to choose the location where I want to fork the flask repository.\nI am able to fork other repositories.\nActual Behavior\nIf I click \"Fork\", the following dialog is loading forever:\nIf I go to \"fork page\" (https://github.com/pallets/flask/fork) I receive a HTTP 500 as following:\nEnvironment\nChrome version: 67.0.3396.87 (Official Build) (64-bit)", "issue_status": "Closed", "issue_reporting_time": "2018-06-15T12:43:02Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "340": {"issue_url": "https://github.com/pallets/flask/issues/2829", "issue_id": "#2829", "issue_summary": "Bad import in flash_cache/jinja2ext.py", "issue_description": "JAdata commented on 15 Jun 2018\nThis issue tracker is a tool to address bugs in Flask itself.\nPlease use the #pocoo IRC channel on freenode or Stack Overflow for general\nquestions about using Flask or issues not related to Flask.\nIf you'd like to report a bug in Flask, fill out the template below. Provide\nany any extra information that may be useful / related to your problem.\nIdeally, create an MCVE, which helps us\nunderstand the problem and helps check that it is not caused by something in\nyour code.\nExpected Behavior\nThere is an \"old type\" import statement in flask_cache/jinja2ext.py\nimport flask_cache.jinja2ext\nActual Behavior\njinja2ext.py does \"from flask.ext.cache import make_template_fragment_key\" which is referring to\nan old module structure - flask.ext.cache has moved to flask_cache, hasn't it?\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/jensand/ve_unpin/local/lib/python2.7/site-packages/flask_cache/jinja2ext.py\", line 33, in <module>\n    from flask.ext.cache import make_template_fragment_key\nImportError: No module named ext.cache\nEnvironment\nPython version: 2.7.12\nFlask version: 1.0.2\nFlask-Cache: 0.13.1\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-06-15T12:17:27Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "341": {"issue_url": "https://github.com/pallets/flask/issues/2824", "issue_id": "#2824", "issue_summary": "flask --version should output werkzeug version", "issue_description": "Contributor\njaapz commented on 11 Jun 2018\nExpected Behavior\nRunning flask --version should output Flask, Python and Werkzeug versions, as those are the versions asked in the issue template on github.\nActual Behavior\nflask --version only outputs Flask and Python versions (and GCC, for some reason?).\nEnvironment\nPython version: 3.6.5\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-06-11T08:16:14Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "342": {"issue_url": "https://github.com/pallets/flask/issues/2823", "issue_id": "#2823", "issue_summary": "Flask complains a .env file exists when not using python-dotenv, even though that .env is a directory", "issue_description": "Contributor\njaapz commented on 11 Jun 2018\nI place my virtualenvs in a .env directory in my project directory. Flask 1.x sees this directory and thinks it might be a \"dotenv\" file (even though it is a directory).\nExpected Behavior\nflask should ignore a .env directory when python-dotenv is not installed.\nActual Behavior\nflask says:\nTip: There are .env files present. Do \"pip install python-dotenv\" to use them.\nEnvironment\nPython version: 3.6.5\nFlask version: 1.0.2\nWerkzeug version: 0.14.1\n2", "issue_status": "Closed", "issue_reporting_time": "2018-06-11T08:13:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "343": {"issue_url": "https://github.com/pallets/flask/issues/2822", "issue_id": "#2822", "issue_summary": "Flask jsonify is not working. It removes keys from json response.", "issue_description": "vimox-shah commented on 11 Jun 2018 \u2022\nedited\n        ```org_schema = OrganisationSearchSerializer()\n        result = org_schema.dump({'organisations': organisation_data})\n       return jsonify(result)```\nSample Code\nit gives output as\n    {\n        \"organisations\": []\n    },\n    {}\n]```\n\nActual output should be\n\n```[\n    \"data\":{\n        \"organisations\": []\n    },\n    \"error\": {}\n]```\n\nthere is some bug in jsonify it removes the key", "issue_status": "Closed", "issue_reporting_time": "2018-06-11T05:47:43Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "344": {"issue_url": "https://github.com/pallets/flask/issues/2821", "issue_id": "#2821", "issue_summary": "Exceptions in before_request methods prevent later before_request methods from running", "issue_description": "skylerberg commented on 11 Jun 2018\nExpected Behavior\nAll methods added with @app.before_request should be run.\nPaste a minimal example that causes the problem.\nActual Behavior\nIf an exception occurs in a single @app.before_request method, all following @app.before_request methods will not run.\nContext\nFor a detailed example of this causing an issue, see GoogleCloudPlatform/flask-talisman#22.\nIn summary, Flask-Talisman does setup in an @app.before_request method which is expected to be done by the time it runs an @app.after_request method. However, if an exception occurs in an @app.before_request method that runs before Flask-Talisman's, and that exception is caught by an @app.errorhandler, then Flask-Talisman's @app.after_request method can be run without the setup work ever being done.", "issue_status": "Closed", "issue_reporting_time": "2018-06-10T18:36:55Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "345": {"issue_url": "https://github.com/pallets/flask/issues/2820", "issue_id": "#2820", "issue_summary": "Inconsistent behavior of `static_url_path`", "issue_description": "dimmg commented on 8 Jun 2018\nI've encountered a strange behavior when passing the static_url_path on Flask app initialization and on a already instantiated app.\nBelow examples are built based on a structure as follows:\nrun.py\nstatic\n  |_main.css\nCase Study 1:\nfrom flask import Flask\n\napp = Flask(__name__, static_url_path='/media')\n\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8080, debug=True)\nExpected Behavior\nmain.css file should be accessible on /media/main.css\nActual Behavior\nmain.css file is accessible on /media/main.css as it should be\nCase Study 2:\nfrom flask import Flask\n\napp = Flask(__name__)\n\n\nif __name__ == '__main__':\n    app.static_url_path = '/media'    \n\n    app.run(host='0.0.0.0', port=8080, debug=True)\nExpected Behavior\nmain.css file should be accessible on /media/main.css\nActual Behavior\nmain.css file is not accessible on /media/main.css, instead is accessible on default static_url_path\n127.0.0.1 - - [08/Jun/2018 17:11:48] \"GET /media/main.css HTTP/1.1\" 404 -\n127.0.0.1 - - [08/Jun/2018 17:11:53] \"GET /static/main.css HTTP/1.1\" 200 -\nEnvironment\nPython version: 3.6.5\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-06-08T14:15:57Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "346": {"issue_url": "https://github.com/pallets/flask/issues/2819", "issue_id": "#2819", "issue_summary": "Traceback not flushed immediately", "issue_description": "Faboor commented on 6 Jun 2018\nExpected Behavior\nWhen an error occurs and traceback is printed out, the stderr should be flushed.\nFile app.py:\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef err():\n  return i_will_cause_an_error(\" :'( \")\n\nif __name__ == '__name__':\n  app.run()\nAnd then run it with python app.py 2>out.txt and connect to the server, e.g. using curl http://localhost:5000/\nHere I'd expect to see the 127.0.0.1 - - [<date>] \"GET / HTTP/1.1 500 - and a full traceback for the AttributeError raised in the file out.txt\nActual Behavior\nOnly 127.0.0.1 - - [<date>] \"GET / HTTP/1.1 500 - shows up in the out.txt file. Only when a new request is made the full traceback is flushed to the file, together with the new response log line.\nEnvironment\nversion\nPython 3.5.2\nFlask 1.0.2\nWerkzeug 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-06-06T16:52:54Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "347": {"issue_url": "https://github.com/pallets/flask/issues/2818", "issue_id": "#2818", "issue_summary": "Render_Template failes after using multithreaded .pyd file", "issue_description": "schmetzyannick commented on 6 Jun 2018\nThis issue tracker is a tool to address bugs in Flask itself.\nPlease use the #pocoo IRC channel on freenode or Stack Overflow for general\nquestions about using Flask or issues not related to Flask.\nIf you'd like to report a bug in Flask, fill out the template below. Provide\nany any extra information that may be useful / related to your problem.\nIdeally, create an MCVE, which helps us\nunderstand the problem and helps check that it is not caused by something in\nyour code.\nExpected Behavior\nTemplate should be renderd\ntaSession=Transaktionshandler(path,username,sha1pw[0][0])\n...some basic session stuff....\nreturn render_template(index.html)\nActual Behavior\nI am importing a Module that wraps my c++ code (python capi). That Modul contains a struct. When I create the struct some connections and threads are initialized. Nothing fails. After this i am doing some Session handling, nothing failes. But at the moment i want to render a template python crashes. When i return instate of render template somthing like return \"TEST\", python do not crash.\nOn the other hand, when I don't load my Modul there is no problem.\nI am Debugging with msvc and i can see that the render_template function runs, but i cant't jump into the _render function of the templatin.py file.\nEnvironment\nPython version: 3.5.4\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-06-06T13:13:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "348": {"issue_url": "https://github.com/pallets/flask/issues/2817", "issue_id": "#2817", "issue_summary": "Importing from PWD using `python -m` fails in development environment", "issue_description": "jwg4 commented on 6 Jun 2018\nExpected Behavior\nWe have a Flask app defined in a file which sits inside a folder, say app/run.py:\nfrom flask import Flask\n\nfrom foo import bar\n\napp = Flask(__name__)\n\napp.run()\nThe file imports from the top-level directory, in this case foo.py\nbar = \"SOMETHING TO IMPORT\"\nThe empty file __init__.py exists in the directory app.\nUsing the default environment (production), we can run the Flask app by invoking the module from the top-level directory, using -m\npython -m app.run\nThe foo module is imported correctly and the app runs.\n * Serving Flask app \"run\" (lazy loading)\n * Environment: production\n   WARNING: Do not use the development server in a production environment.\n   Use a production WSGI server instead.\n * Debug mode: off\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\nActual Behavior\nIf we try to use the development environment, setting the FLASK_ENV variable, it fails.\nFLASK_ENV=development python -m app.run\n * Serving Flask app \"run\" (lazy loading)\n * Environment: development\n * Debug mode: on\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n * Restarting with stat\nTraceback (most recent call last):\n  File \"/home/jack/z/flask_dev/app/run.py\", line 3, in <module>\n    from foo import bar\nImportError: No module named foo\nEnvironment\nPython version:\nPython 2.7.12 (default, Nov 20 2017, 18:23:56)\n[GCC 5.4.0 20160609] on linux2\npackage versions:\nclick==6.7\nFlask==1.0.2\nitsdangerous==0.24\nJinja2==2.10\nMarkupSafe==1.0\nWerkzeug==0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-06-06T11:16:34Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "349": {"issue_url": "https://github.com/pallets/flask/issues/2816", "issue_id": "#2816", "issue_summary": "No upgrade notes for flask 1.x", "issue_description": "davidt99 commented on 5 Jun 2018\nAre there any plans to write upgrade notes from 0.12 to 1.x?", "issue_status": "Closed", "issue_reporting_time": "2018-06-05T14:31:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "350": {"issue_url": "https://github.com/pallets/flask/issues/2815", "issue_id": "#2815", "issue_summary": "Tutorial fails with error", "issue_description": "Nadav-Ruskin commented on 4 Jun 2018\nExpected Behavior\nFollowing the steps documented in https://github.com/pallets/flask/tree/1.0.2/examples/tutorial results in a functioning website in http://127.0.0.1:5000\nActual Behavior\nTell us what happens instead.\n(venv) Main@DESKTOP-4DUIS04 C:\\Git\\flask\\examples\\tutorial\n$ flask run\n * Serving Flask app \"flaskr\" (lazy loading)\n * Environment: development\n * Debug mode: on\n * Restarting with stat\n * Debugger is active!\n * Debugger PIN: 204-731-212\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n127.0.0.1 - - [04/Jun/2018 11:35:09] \"GET / HTTP/1.1\" 500 -\nTraceback (most recent call last):\n  File \"c:\\git\\flask\\flask\\app.py\", line 2309, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"c:\\git\\flask\\flask\\app.py\", line 2295, in wsgi_app\n    response = self.handle_exception(e)\n  File \"c:\\git\\flask\\flask\\app.py\", line 1741, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"c:\\git\\flask\\flask\\_compat.py\", line 35, in reraise\n    raise value\n  File \"c:\\git\\flask\\flask\\app.py\", line 2292, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"c:\\git\\flask\\flask\\app.py\", line 1815, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"c:\\git\\flask\\flask\\app.py\", line 1718, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"c:\\git\\flask\\flask\\_compat.py\", line 35, in reraise\n    raise value\n  File \"c:\\git\\flask\\flask\\app.py\", line 1813, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"c:\\git\\flask\\flask\\app.py\", line 1799, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Git\\flask\\examples\\tutorial\\flaskr\\blog.py\", line 17, in index\n    'SELECT p.id, title, body, created, author_id, username'\nsqlite3.OperationalError: no such table: post\n127.0.0.1 - - [04/Jun/2018 11:35:09] \"GET /?__debugger__=yes&cmd=resource&f=style.css HTTP/1.1\" 200 -\n127.0.0.1 - - [04/Jun/2018 11:35:09] \"GET /?__debugger__=yes&cmd=resource&f=jquery.js HTTP/1.1\" 200 -\n127.0.0.1 - - [04/Jun/2018 11:35:09] \"GET /?__debugger__=yes&cmd=resource&f=debugger.js HTTP/1.1\" 200 -\n127.0.0.1 - - [04/Jun/2018 11:35:09] \"GET /?__debugger__=yes&cmd=resource&f=ubuntu.ttf HTTP/1.1\" 200 -\n127.0.0.1 - - [04/Jun/2018 11:35:10] \"GET /?__debugger__=yes&cmd=resource&f=console.png HTTP/1.1\" 200 -\n127.0.0.1 - - [04/Jun/2018 11:37:07] \"GET / HTTP/1.1\" 500 -\nReproduction steps\nI've tried this multiple times, using both Windows python and Ubuntu on WSL, same issues. I've made sure to both read the documentation from 1.0.2 and checkout 1.0.2 from the documentation. I have made sure not to have flask or flaskr installed on my actual environments in case that matters, only in venv.\nEnvironment\nPython version: 3.6\nFlask version: 1.0.2\nWerkzeug version: Don't know what that is. It is not mentioned in the tutorial.", "issue_status": "Closed", "issue_reporting_time": "2018-06-04T08:42:20Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "351": {"issue_url": "https://github.com/pallets/flask/issues/2814", "issue_id": "#2814", "issue_summary": "UnicodeDecodeError when rendering template", "issue_description": "doctormilos commented on 3 Jun 2018 \u2022\nedited\nExpected Behavior\nReturns template\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xa9 in position 17727: invalid start byte\nActual Behavior\nTell us what happens instead.\nbuiltins.UnicodeDecodeError\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xa9 in position 17727: invalid start byte\nEnvironment\nPython version: 3.6\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-06-02T19:12:06Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "352": {"issue_url": "https://github.com/pallets/flask/issues/2813", "issue_id": "#2813", "issue_summary": "Allow flexible routing with SERVER_NAME config", "issue_description": "Contributor\njarus commented on 1 Jun 2018 \u2022\nedited\nExpected Behavior\nDeployed a flask application which is reachable over multiple domains and ports:\nexternal via load balancer: client - Host: example.org -> LB -> flask app\ninternal via DNS service discovery without load balancer: client - Host: instance-1231.example.org -> flask app\nIf the client connects directly (Host: instance-1231.example.org) the app should be able to return absolute and stable URLs like http://example.org/path/to/my/view as the URL (http://instance-1231.example.org/path/to/my/view) with the internal DNS name is ephemeral.\nTherefore I configured the SERVER_NAME config key and url_for generates the intended absolute URL by using _external=True within and without request context. But the app should be still able to route requests coming with Host: instance-1231.example.org.\nActual Behavior\nFlasks creates the werkzeug.routing.MapAdapter with server_name=app.config['SERVER_NAME'] and therefore no view method will match to incoming requests with Host: instance-1231.example.org.\nEnvironment\nPython version: 2.7.13 (I'm sorry)\nFlask version: 1.0.2\nWerkzeug version: 0.14.1\nApplied workaround:\nOverwrite Flask.create_url_adapter and create MapAdapter for request context without server_name parameter. Routing and URL generation works fine.", "issue_status": "Closed", "issue_reporting_time": "2018-06-01T11:46:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "353": {"issue_url": "https://github.com/pallets/flask/issues/2812", "issue_id": "#2812", "issue_summary": "Flask start new thread - RuntimeError: Working outside of request context", "issue_description": "ryrithgithub commented on 31 May 2018 \u2022\nedited by ThiefMaster\nI am using flask to run my long process that already related to session which hold user id and other information. i try to use new thread with both following methods but still got error 'RuntimeError: Working outside of request context.'\nMethod 1\nimport threading\nThread(target=lambda: fn(**args)).start()\nMethod 2\nimport thread\nthread.start_new_thread(fn, (), args)", "issue_status": "Closed", "issue_reporting_time": "2018-05-31T09:16:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "354": {"issue_url": "https://github.com/pallets/flask/issues/2810", "issue_id": "#2810", "issue_summary": "Missing `Content-Disposition` leads to empty `requests.form`", "issue_description": "julian-r commented on 30 May 2018\nExpected Behavior\nIf a multipart/form-data body is not conforming to RFC return an HTTP error, do log a message or parse the data anyways.\nStrangly werkzeug.formparser does throw an error, but I don't know what happens then in flask with it.\nPOST /garmin-inbox HTTP/1.1\nContent-Type: multipart/form-data; boundary=Boundary_19_110302338_1527600550018\n\n--Boundary_19_110302338_1527600550018\nContent-Type: application/octet-stream\n\nHello123\n\n--Boundary_19_110302338_1527600550018\nContent-Type: application/json\n\nblabla\n--Boundary_19_110302338_1527600550018--\n@app.route('/inbox', methods=['POST'])\ndef inbox():\n    pprint(request.form) # will be empty\n    pprint(request.files) # will be empty\nActual Behavior\nIf a http client behaves not like defined in RFC7578 the request.form and request.files fields are just empty.\nEnvironment\nPython version: 3.6.5\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-05-30T10:19:22Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "355": {"issue_url": "https://github.com/pallets/flask/issues/2803", "issue_id": "#2803", "issue_summary": "flask.redirect fails on audio file upload.", "issue_description": "viper6277 commented on 28 May 2018 \u2022\nedited\nI have a setup where one route behaves as a form processor for various forms. Under the normal circumstance of uploading an audio file... (mp3)... I would be using \"flask.request.files\" to process this file.\nBut what if I do not have any forms on the site that upload files... what I have noticed and provided a file for to duplicate the issue ... is in the event of an audio file POST upload to a form processor that does not have a control to process files... ie \"flask.request.files\".... the \"flask.redirect([route])\" fails...\nLine 61 of the sample file is purposely left commented out...to demonstrate the redirect failure... by removing comment and enabling ...\"posted_files = flask.request.files\" .... the redirect magically works again...\nThere seems to be an issue in the fact that an audio file is being posted... the same test run with images file formats entered into line 40.....ie.... accept=\".jpg, .png\" do not effect the redirect...\nflask_error.zip\nIn case anyone is interested.... I'm running Flask v1.0.2 on Python v3.6.3", "issue_status": "Closed", "issue_reporting_time": "2018-05-28T04:56:52Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "356": {"issue_url": "https://github.com/pallets/flask/issues/2802", "issue_id": "#2802", "issue_summary": "Broken link on flask docs", "issue_description": "mingrammer commented on 28 May 2018 \u2022\nedited\nIn flask/docs/deploying/wsgi-standalone.rst, https://github.com/pallets/flask/blob/master/docs/deploying/uwsgi.html#starting-your-app-with-uwsgi link which is on For a more optimized setup, see configuring uWSGI and NGINX. line is broken.", "issue_status": "Closed", "issue_reporting_time": "2018-05-28T02:26:23Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "357": {"issue_url": "https://github.com/pallets/flask/issues/2801", "issue_id": "#2801", "issue_summary": "AttributeError: 'FileWrapper' due to click", "issue_description": "2press commented on 26 May 2018\nSince a few days I am facing this error when running Flask.run() caused by click on Windows 10.0.17134 with Python 3.6.5, flask 1.0.2 and click6.7:\nTraceback (most recent call last):\n  File \"D:\\Code\\GitHub\\StarCraft-Casting-Tool\\scctool\\tasks\\webapp.py\", line 189, in run\n    self.application.run(port=65010)\n  File \"c:\\users\\tasch\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\flask\\app.py\", line 938, in run\n    cli.show_server_banner(self.env, self.debug, self.name, False)\n  File \"c:\\users\\tasch\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\flask\\cli.py\", line 629, in show_server_banner\n    click.echo(message)\n  File \"c:\\users\\tasch\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\click\\utils.py\", line 217, in echo\n    file = _default_text_stdout()\n  File \"c:\\users\\tasch\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\click\\_compat.py\", line 621, in func\n    rv = wrapper_func()\n  File \"c:\\users\\tasch\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\click\\_compat.py\", line 385, in get_text_stdout\n    rv = _get_windows_console_stream(sys.stdout, encoding, errors)\n  File \"c:\\users\\tasch\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\click\\_winconsole.py\", line 264, in _get_windows_console_stream\n    f = getattr(f, 'buffer')\nAttributeError: 'FileWrapper' object has no attribute 'buffer'\nCan anybody help me?", "issue_status": "Closed", "issue_reporting_time": "2018-05-26T16:03:18Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "358": {"issue_url": "https://github.com/pallets/flask/issues/2800", "issue_id": "#2800", "issue_summary": "[0.12.2] Weird error when using custom response object", "issue_description": "mcdallas commented on 24 May 2018\nI am using the following snippet to wrap an api result which i got from this talk by @mitsuhiko (page 36-37)\n# api.py\nclass ApiResult:\n    def __init__(self, value, status=200):\n        self.value = value\n        self.status = status\n\n    def to_response(self):\n        return make_response(jsonify(self.value), self.status)\n\n# app.py\nclass ApiFlask(Flask):\n\n    def make_response(self, rv):\n        if isinstance(rv, ApiResult):\n            return rv.to_response()\n        return super().make_response(rv)\nI've been using this code for a while in an App and everything worked fine. Now I am creating a new app and I am trying to use the same snippet but I get the following error:\nTraceback (most recent call last):\n  File \"xxx\\site-packages\\flask\\app.py\", line 1997, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"xxx\\site-packages\\flask\\app.py\", line 1985, in wsgi_app\n    response = self.handle_exception(e)\n  File \"xxx\\site-packages\\flask\\app.py\", line 1540, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"xxx\\site-packages\\flask\\_compat.py\", line 33, in reraise\n    raise value\n  File \"xxx\\site-packages\\flask\\app.py\", line 1982, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"xxx\\site-packages\\flask\\app.py\", line 1615, in full_dispatch_request\n    return self.finalize_request(rv)\n  File \"xxx\\site-packages\\flask\\app.py\", line 1630, in finalize_request\n    response = self.make_response(rv)\n  File \"yyy\\source\\app.py\", line 28, in make_response\n    return super().make_response(rv)\n  File \"xxx\\site-packages\\flask\\app.py\", line 1740, in make_response\n    rv = self.response_class.force_type(rv, request.environ)\n  File \"xxx\\site-packages\\werkzeug\\wrappers.py\", line 921, in force_type\n    response = BaseResponse(*_run_wsgi_app(response, environ))\n  File \"xxx\\site-packages\\werkzeug\\wrappers.py\", line 59, in _run_wsgi_app\n    return _run_wsgi_app(*args)\n  File \"xxx\\site-packages\\werkzeug\\test.py\", line 923, in run_wsgi_app\n    app_rv = app(environ, start_response)\nTypeError: 'ApiResult' object is not callable\nwhich is super weird because both apps use the same flask and werkzeug versions.\nAny idea what is going on ?\nEnvironment\nPython version: 3.6\nFlask version: 0.12.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-05-24T13:44:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "359": {"issue_url": "https://github.com/pallets/flask/issues/2798", "issue_id": "#2798", "issue_summary": "International URLs Implementation", "issue_description": "ufo911 commented on 24 May 2018\nI have already done some coding and get app with 3 lang urls but it may not be clear\nhttps://stackoverflow.com/questions/49496761/two-language-flask-site-with-or-without-blueprints/49948870#49948870\nhttp://flask.pocoo.org/docs/1.0/patterns/deferredcallbacks/\ndocumentation for this is not clear too\nCan anyone put the full example for international URLs in documentation ? and also using it in jinja and switching between languages and also using it without Babel", "issue_status": "Closed", "issue_reporting_time": "2018-05-24T10:23:11Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "360": {"issue_url": "https://github.com/pallets/flask/issues/2794", "issue_id": "#2794", "issue_summary": "Python flask threads does not close", "issue_description": "sjd12 commented on 21 May 2018 \u2022\nedited\nMy python flask app runs using nohup. ie it is always live. I see that it creates a thread every time user submits from page. It is because flask.run is with multithread=true. But my problem is even after the processing is over, the thread doesn't seem to be closed. I'm checking this with the ps -eLf |grep userid command. where i see many threads still active long after the code execution is over. and it gets added when another submit is done. All threads are removed when the app itself is restarted.\nWhat is the criteria for the thread to close without restarting the app?\nis it because the memory not getting released?\napp = Flask(__name__)\n@app.route('/submit',methods = ['GET','POST'])\ndef submit():\n    #obj1=class1()\n    #obj2=class2(obj1)\n    #obj3=class3(obj1)\n    #refer objects\n    #process data\n    #done\n\nif __name__ == \"__main__\":\n    app.run(host='0.0.0.0', port=4000, threaded=True, debug=False)", "issue_status": "Closed", "issue_reporting_time": "2018-05-21T06:44:20Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "361": {"issue_url": "https://github.com/pallets/flask/issues/2791", "issue_id": "#2791", "issue_summary": "Addition of Click breaks Flask apps in some deployments", "issue_description": "fluffy-critter commented on 18 May 2018 \u2022\nedited\nExpected Behavior\nWhen Flask isn't running from the command line, it should not try to initialize Click, or should not fail to start due to locale mismatches.\nActual Behavior\nI am running a Flask app on Dreamhost shared hosting using their Passenger-WSGI wrapper. As their wrapper is not configured to work with Pipenv, I use the following passenger_wsgi.py (based on Dreamhost's instructions) to shunt my interpreter over to my pipenv's Python 3.6 and then import my app object from main.py:\nimport sys\nimport os\nimport subprocess\n\nINTERP = subprocess.check_output(\n    ['pipenv', 'run', 'which', 'python3']).strip().decode('utf-8')\nif sys.executable != INTERP:\n    os.execl(INTERP, INTERP, *sys.argv)\n\nsys.path.append(os.getcwd())\nfrom main import app as application\nThis was working fine before Flask added the Click dependency; however, after upgrading, I got the following error at startup:\nTraceback (most recent call last):\nFile \"/home/plaidfluff/opt/python-3.6.5/bin/pipenv\", line 11, in <module>\nsys.exit(cli())\nFile \"/home/plaidfluff/opt/python-3.6.5/lib/python3.6/site-packages/pipenv/vendor/click/core.py\", line 722, in __call__\nreturn self.main(*args, **kwargs)\nFile \"/home/plaidfluff/opt/python-3.6.5/lib/python3.6/site-packages/pipenv/vendor/cl ck/core.py\", line 676, in main\n_verify_python3_env()\nFile \"/home/plaidfluff/opt/python-3.6.5/lib/python3.6/site-packages/pipenv/vendor/click/_unicodefun.py\", line 118, in _verify_python3_env\n'for mitigation steps.' + extra)\nRuntimeError: Click will abort further execution because Python 3 was configured to use ASCII as encoding for the environment. Consult http://click.pocoo.org/python3/for mitigation steps.\n\nThis system supports the C.UTF-8 locale which is recommended.\nYou might be able to resolve your issue by exporting the\nfollowing environment variables:\n\nexport LC_ALL=C.UTF-8\nexport LANG=C.UTF-8\n\nTraceback (most recent call last):\nFile \"/home/plaidfluff/opt/python-3.6.5/bin/pipenv\", line 11, in <module>\nsys.exit(cli())\nFile \"/home/plaidfluff/opt/python-3.6.5/lib/python3.6/site-packages/pipenv/vendor/click/core.py\", line 722, in __call__\nreturn self.main(*args, **kwargs)\nFile \"/home/plaidfluff/opt/python-3.6.5/lib/python3.6/site-packages/pipenv/vendor/click/core.py\", line 676, in main\n_verify_python3_env()\nFile \"/home/plaidfluff/opt/python-3.6.5/lib/python3.6/site-packages/pipenv/vendor/click/_unicodefun.py\", line 118, in _verify_python3_env\n'for mitigation steps.' + extra)\nRuntimeError: Click will abort further execution because Python 3 was configured to use ASCII as encoding for the environment. Consult http://click.pocoo.org/python3/for mitigation steps.\n\nThis system supports the C.UTF-8 locale which is recommended.\nYou might be able to resolve your issue by exporting the\nfollowing environment variables:\n\nexport LC_ALL=C.UTF-8\nexport LANG=C.UTF-8\nTraceback (most recent call last):\nFile \"/dh/passenger/helper-scripts/wsgi-loader.py\", line 320, in <module>\napp_module = load_app()\nFile \"/dh/passenger/helper-scripts/wsgi-loader.py\", line 61, in load_app\nreturn imp.load_source('passenger_wsgi', startup_file)\nFile \"passenger_wsgi.py\", line 33, in <module>\n['pipenv', 'run', 'which', 'python3']).strip().decode('utf-8')\nFile \"/usr/lib/python2.7/subprocess.py\", line 573, in check_output\nraise CalledProcessError(retcode, cmd, output=output)\nsubprocess.CalledProcessError: Command '['pipenv', 'run', 'which', 'python3']' returned non-zero exit status 1\nUnfortunately, I don't have any control over the LC_ALL or LANG environment variables at startup, and simply overriding them via os.execle() or os.putenv() had no effect. However, I did find that adding these two lines to the beginning of my passenger_wsgi.py file worked to override this check:\nos.environ['LANG'] = 'C.UTF-8'\nos.environ['LC_ALL'] = 'C.UTF-8'\nThis is inelegant, but since I am not actually using Click (at least not directly) this felt like an okay compromise, although I am concerned it may have other encoding-related side-effects on other parts of my application.\nIn any case, it doesn't seem like Click should even be getting imported in a context where I have a Python script that instantiates a Flask app directly rather than through its command-line processor. Any mechanism that would prevent this RuntimeError from taking down my entire website would be greatly appreciated.\nThanks!\nEnvironment\nPython version: 3.6.5\nFlask version: 1.0.2\nWerkzeug version: 0.14.1\n1", "issue_status": "Closed", "issue_reporting_time": "2018-05-18T08:37:57Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "362": {"issue_url": "https://github.com/pallets/flask/issues/2790", "issue_id": "#2790", "issue_summary": "Blueprint view function name should not contain dots", "issue_description": "gdude2002 commented on 17 May 2018 \u2022\nedited\nI've done some homework and read up on #2450. I don't really understand the rationale behind that PR, and I don't think it really helps with Flask usage overall. To explain a bit...\nI maintain a relatively complex project that builds its own API on top of Flask. This change heavily breaks our application structure, as we currently use dots as separators for view classes under our blueprints. Consider the following:\nYou have sets of blueprints - we use one for each subdomain\nEach blueprint has a name - for example, main\nUnder a blueprint might be a logical section - for example, there might be an \"about\" section, so let's call this main.about\nThe logical section will have pages under it - to me, the logical thing to do is use more dots as separators, so main.about.privacy for example\nNow, one solution would be to use some other separator. Why not about/privacy? about-privacy? The thing is, regardless of what separator you decide to use there, blueprints must always be separated from the view name using a .. So in, url_for() for example, we would have to use url_for(\"main.about/privacy\"), which just looks plain ugly.\nSome sample code\nA sample route:\nSo, to summarize, here's what I'm asking:\nWhy exactly was this change made in the first place?\nWhat should we be doing otherwise?\n4", "issue_status": "Closed", "issue_reporting_time": "2018-05-17T15:34:13Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "363": {"issue_url": "https://github.com/pallets/flask/issues/2788", "issue_id": "#2788", "issue_summary": "Log level being ignored and example in docs broken", "issue_description": "manoadamro commented on 17 May 2018 \u2022\nedited\nUsing the example in the docs:\nimport flask\nimport logging.config\n\nlogging.config.dictConfig({\n    'version': 1,\n    'formatters': {'default': {\n        'format': '[%(asctime)s] %(levelname)s in %(module)s: %(message)s',\n    }},\n    'handlers': {'wsgi': {\n        'class': 'logging.StreamHandler',\n        'stream': 'ext://flask.logging.wsgi_errors_stream',\n        'formatter': 'default'\n    }},\n    'root': {\n        'level': 'INFO',\n        'handlers': ['wsgi']\n    }\n})\n\napp = flask.Flask(__name__)\nproduces the following error:\nValueError: Unable to configure handler 'wsgi': Cannot resolve 'flask.logging.wsgi_errors_stream': No module named 'flask.logging.wsgi_errors_stream'; 'flask.logging' is not a package\nchanging ext://flask.logging.wsgi_errors_stream to stdout stops the error, but log level is still ignored.\nUsing the following:\nimport flask\nimport logging.config\n\nlogging.config.dictConfig({\n    'version': 1,\n    'formatters': {\n        'default': {\n            'format': '[%(asctime)s] %(levelname)s in %(module)s: %(message)s',\n        }\n    },\n    'handlers': {\n        'wsgi': {\n            'class': 'logging.StreamHandler',\n            'stream': 'stdout',\n            'formatter': 'default',\n        }\n    },\n    'root': {\n        'level': 'DEBUG',\n        'handlers': ['wsgi']\n    }\n})\n\n\napp = flask.Flask(__name__)\n\napp.logger.debug('I WORK')\napp.logger.info('I WORK')\napp.logger.warning('I WORK')\napp.logger.error('I WORK')\napp.logger.critical('I WORK')\n(Note the log level set to DEBUG)\nActual Output:\n[2018-05-17 11:35:20,069] ERROR in __init__: I WORK\n[2018-05-17 11:35:20,069] CRITICAL in __init__: I WORK\nExpected output:\n[2018-05-17 11:35:20,069] DEBUG in __init__: I WORK\n[2018-05-17 11:35:20,069] INFO in __init__: I WORK\n[2018-05-17 11:35:20,069] WARNING in __init__: I WORK\n[2018-05-17 11:35:20,069] ERROR in __init__: I WORK\n[2018-05-17 11:35:20,069] CRITICAL in __init__: I WORK\nI have also tried both setting the level in the handler and formatter and calling app.logger.setLevel('DEBUG')\nneither made any difference.\nTL;DR:\nlogging example in docs errors.\nunable to set log level\nEnvironment\nPython version: 3.6.4\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-05-17T10:55:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "364": {"issue_url": "https://github.com/pallets/flask/issues/2785", "issue_id": "#2785", "issue_summary": "Issues run flask tutorial", "issue_description": "laipham commented on 16 May 2018\nHi,\nI follow readme in tutorial.\nset FLASK_APP=flaskr\nset FLASK_ENV=development\nflask run\nBut i got\nError: Failed to find application in module \"flaskr\". Are you sure it contains a Flask application? Maybe you wrapped it in a WSGI middleware or you are using a factory function.\nI try to read many fixed issues about that and follow carefully http://flask.pocoo.org/docs/0.12/ but :(", "issue_status": "Closed", "issue_reporting_time": "2018-05-16T07:27:56Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "365": {"issue_url": "https://github.com/pallets/flask/issues/2780", "issue_id": "#2780", "issue_summary": "Blueprint error handling with url_prefix and lang_code", "issue_description": "ufo911 commented on 13 May 2018\nPlease add error handlers to Blueprint (404 and others)\nFor multi language Site I had to write app error handlers and cookies and after requests with session and cookie and a bit mess in my code so may error handling inside blueprint is good idea\nThanks", "issue_status": "Closed", "issue_reporting_time": "2018-05-13T17:30:40Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "366": {"issue_url": "https://github.com/pallets/flask/issues/2779", "issue_id": "#2779", "issue_summary": "TypeErrorTypeError: set_cookie() got an unexpected keyword argument 'samesite'", "issue_description": "Cosbgn commented on 13 May 2018 \u2022\nedited\nThis issue tracker is a tool to address bugs in Flask itself.\nPlease use the #pocoo IRC channel on freenode or Stack Overflow for general\nquestions about using Flask or issues not related to Flask.\nIf you'd like to report a bug in Flask, fill out the template below. Provide\nany any extra information that may be useful / related to your problem.\nIdeally, create an MCVE, which helps us\nunderstand the problem and helps check that it is not caused by something in\nyour code.\nExpected Behavior\nI should be able to log in just by session['profile'] = current_user\nBefore Flask 1.X I could login simply by adding a user profile returned by `auth0` to flask session.\nThen check if session['profile'] is set to know if the user is logged in and who he is.\nActual Behavior\nTell us what happens instead.\nI get: set_cookie() got an unexpected keyword argument 'samesite'\nI've added to my config file the following:\nSESSION_COOKIE_SAMESITE='Lax'\nI've also tried with\nSESSION_COOKIE_SAMESITE='Strict'\nPaste the full traceback if there was an exception.\n\nTraceback (most recent call last):\n  File \"/Users/c/Dev/Metri/Code/menv/lib/python3.6/site-packages/flask/app.py\", line 2309, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/Users/c/Dev/Metri/Code/menv/lib/python3.6/site-packages/flask/app.py\", line 2295, in wsgi_app\n    response = self.handle_exception(e)\n  File \"/Users/c/Dev/Metri/Code/menv/lib/python3.6/site-packages/flask/app.py\", line 1741, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/Users/c/Dev/Metri/Code/menv/lib/python3.6/site-packages/flask/_compat.py\", line 35, in reraise\n    raise value\n  File \"/Users/c/Dev/Metri/Code/menv/lib/python3.6/site-packages/flask/app.py\", line 2292, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/Users/c/Dev/Metri/Code/menv/lib/python3.6/site-packages/flask/app.py\", line 1816, in full_dispatch_request\n    return self.finalize_request(rv)\n  File \"/Users/c/Dev/Metri/Code/menv/lib/python3.6/site-packages/flask/app.py\", line 1833, in finalize_request\n    response = self.process_response(response)\n  File \"/Users/c/Dev/Metri/Code/menv/lib/python3.6/site-packages/flask/app.py\", line 2114, in process_response\n    self.session_interface.save_session(self, ctx.session, response)\n  File \"/Users/c/Dev/Metri/Code/menv/lib/python3.6/site-packages/flask/sessions.py\", line 384, in save_session\n    samesite=samesite\nTypeError: set_cookie() got an unexpected keyword argument 'samesite'\nEnvironment\nPython version: Python 3.6.3\nFlask version:1.0.2\nWerkzeug version:0.12", "issue_status": "Closed", "issue_reporting_time": "2018-05-13T11:58:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "367": {"issue_url": "https://github.com/pallets/flask/issues/2778", "issue_id": "#2778", "issue_summary": "Registered error handler (using register_error_handler) processes inappropriate exceptions", "issue_description": "woxcab commented on 13 May 2018\nIf register an error handler for exception class A then this error handler will be called for any exception B that isn't A or subclass of A.\nExpected Behavior\nGiven error handler must be called only for exceptions that's instance of A or instance of subclass of A.\nActual Behavior\nError handler processes any exception.\nHow to reproduce\nMinimal code:\nimport flask\nfrom werkzeug.exceptions import HTTPException\n\napp = flask.Flask(__name__)\napp.register_error_handler(HTTPException, lambda e: (str(e), e.code))\n\n@app.route('/')\ndef index():\n    raise ValueError()\n\napp.run()\nRun script\nGo to http://127.0.0.1:5000/\nServer logs exception AttributeError: 'ValueError' object has no attribute 'code', i.e. registered error handler is called for ValueError exception, but the error handler is registered only for HTTPException and its subclasses.\nEnvironment\nPython version: 3.5.2\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-05-13T05:45:26Z", "fixed_by": "#3266", "pull_request_summary": "always pass InternalServerError instance to 500 handler", "pull_request_description": "Member\ndavidism commented on 20 Jun 2019 \u2022\nedited\nDue to multiple PRs over the last 5 years, the error handler behavior has slowly changed with the goal of being more consistent. However, after #2314 was merged in 1.0.0, these changes all cascaded together to make some inconsistent behavior finally visible.\nAfter extensive discussion in #1281, #1291, and #1429, the goal was to make error handlers trigger for exceptions in MRO order, rather than registration order. It formalized the idea that HTTP exception classes and status codes were aliases. Registering a handler for 401 was the same as Unauthorized.\nHowever, it (unintentionally?) preserved some old behavior where user errors would only be looked up against a 500 error handler, not a InternalServerError handler, even though the goal was for these to be aliases.\n#2314 ensured a more consistent lookup order between blueprints and app error handlers for codes and exception classes. #2362 simplified the code even more, and made it more correct for subclass handling. A side effect of these refactors was that it fixed the preserved behavior, so 500 and InternalServerError handlers were equivalent.\nAll these changes had the goal of making error handler registration and triggering more intuitive, and making maintenance easier.\nWhen an unhandled exception is raised, handle_exception is triggered so that a final, generic internal server error is returned. Previously, the behavior was to pass the unhandled exception to the 500 error handler, rather than the generic InternalServerError. Now that 500 and InternalServerError were the same thing and were both considered as handlers for generic error, users who registered a handler for InternalServerError or the HTTPException base class were surprised to get other random exceptions passed to the handler, rather than strict subclasses (#2778, #2841).\nA fix was proposed in #2983 which continued to preserve the old behavior by making a handler for 500 receive any error, while a handler for InternalServerError only received InternalServerError. I think this made the code harder to reason about, both for maintainers and for app devs.\nInstead, I'm going the opposite direction and ensuring that those handlers only ever receive InternalServerError instances. For unhandled errors, the exception has a new original_exception attribute that has the original unhandled error. This will be formalized in Werkzeug 1.0.0, until then getattr can be used to check if the attribute is set. The upside of this is that it is safe to assume that all codes and classes are aliases, and will only receive matching classes of errors, which seems to have been the intention of previous discussions, and makes the most sense to me.\nThe downside is that there is no way for this to be 100% backwards compatible for 500 handlers that were written assuming any exception would be passed to them, and I couldn't think of a way to have a useful deprecation warning transition. e will always look like InternalServerError, possibly making existing generic error pages less useful. However, with the availability of e.original_exception, it should be straightforward to get the intended behavior back. Code shouldn't fail in the mean time, only be less specific. I think the benefit of more consistent behavior outweighs the drawback.\ncloses #2778\ncloses #2841\ncloses #2983\nWhile fixing this, I noticed that finalize_request was only called if a 500 error handler was found. If no custom handler was registered, then an unhandled error would skip after_request functions, saving the session, and sending the request_finished signal. This is now fixed, so finalize_request is always called.\nTo clear up related confusion about very generic error handlers such as HTTPException and Exception, more docs have been added to the errorhandling.rst page. handle_exception has much clearer explanations of what it does too.\n1", "pull_request_status": "Merged", "issue_fixed_time": "2019-06-21T15:34:00Z", "files_changed": [["11", "CHANGES.rst"], ["90", "docs/errorhandling.rst"], ["49", "src/flask/app.py"], ["97", "tests/test_user_error_handler.py"]]}, "368": {"issue_url": "https://github.com/pallets/flask/issues/2773", "issue_id": "#2773", "issue_summary": "make audit still available, whereas the corresponding setup command is gone", "issue_description": "Contributor\nnicolaiarocci commented on 12 May 2018\nWhen the audit command was removed (4fca38c), the corresponding shortcut in Makefile was not deleted.\n$ make audit\n\nerror: invalid command 'audit'\nmake: *** [audit] Error 1\nThe shortcut was never documented, so it is unlikely that anyone will use it, but still...", "issue_status": "Closed", "issue_reporting_time": "2018-05-12T08:33:40Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "369": {"issue_url": "https://github.com/pallets/flask/issues/2772", "issue_id": "#2772", "issue_summary": "\"flask init-db\" isn't working", "issue_description": "naveenmalla046 commented on 12 May 2018 \u2022\nedited\nThis code must be placed in the init.py as per the documentation: http://flask.pocoo.org/docs/1.0/tutorial/database/ (Section: Register with the Application)\nflaskr/__init__.py\ndef create_app():\n  app = ...\n  # existing code omitted\n\nfrom . import db\ndb.init_app(app)\n\nreturn app\nThis is the init.py code after copying that code\nimport os\n\nfrom flask import Flask\n\ndef create_app(test_config=None):\n# create and configure the app\napp = Flask(__name__, instance_relative_config=True)\napp.config.from_mapping(\n    SECRET_KEY='dev',\n    DATABASE=os.path.join(app.instance_path, 'flaskr.sqlite'),\n)\n\nif test_config is None:\n    # load the instance config, if it exists, when not testing\n    app.config.from_pyfile('config.py', silent=True)\nelse:\n    # load the test config if passed in\n    app.config.from_mapping(test_config)\n\n# ensure the instance folder exists\ntry:\n    os.makedirs(app.instance_path)\nexcept OSError:\n    pass\n\n# a simple page that says hello\n@app.route('/hello')\ndef hello():\n    return 'Hello, World!'\n\n#database \nfrom . import db\ndb.init_app(app)\n\nreturn app\nExpected output:\nRun the init-db command:\nflask init-db\nInitialized the database.\nThere will now be a flaskr.sqlite file in the instance folder in your project.\nI'm getting an error while executing the above command:\nflask init-db\nUsage: flask [OPTIONS] COMMAND [ARGS]...\nError: No such command \"init-db\".\nI even tried copying the exact code from the repo https://github.com/pallets/flask/blob/746b91dfced525651c9b71a3bd075a78d2b9262f/examples/tutorial/flaskr/__init__.py\nit is not working even though, same error.\nPls help me with this I'm new to flask and i'm stuck here. cannot proceed further in the documentation unless this code executes", "issue_status": "Closed", "issue_reporting_time": "2018-05-11T20:10:59Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "370": {"issue_url": "https://github.com/pallets/flask/issues/2771", "issue_id": "#2771", "issue_summary": "can't run flask demo direct with F5 (idle) after upgrade to flask1.0?", "issue_description": "aekojiang commented on 11 May 2018\nafter upgrade to flask 1.0.2, it seems not possible to direct run even the simple demo app through direct pressing F5 within idle?\nbut it can still be run through command \"flask run\" or in shell with \"python demo.py\"\nis this normal case after upgrade?\nthe python shell feedback see below:\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello World!'\n\nif __name__ == '__main__':\n    app.run(port=80, debug=False, threaded=True)\nActual Behavior\nTell us what happens instead.\nTraceback (most recent call last):\n  File \"C:\\Users\\dell\\AppData\\Local\\Programs\\Python\\Python36\\flasktest.py\", line 9, in <module>\n    app.run(port=80, debug=False, threaded=True)\n  File \"C:\\Users\\dell\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\flask\\app.py\", line 938, in run\n    cli.show_server_banner(self.env, self.debug, self.name, False)\n  File \"C:\\Users\\dell\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\flask\\cli.py\", line 629, in show_server_banner\n    click.echo(message)\n  File \"C:\\Users\\dell\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\click\\utils.py\", line 217, in echo\n    file = _default_text_stdout()\n  File \"C:\\Users\\dell\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\click\\_compat.py\", line 621, in func\n    rv = wrapper_func()\n  File \"C:\\Users\\dell\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\click\\_compat.py\", line 385, in get_text_stdout\n    rv = _get_windows_console_stream(sys.stdout, encoding, errors)\n  File \"C:\\Users\\dell\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\click\\_winconsole.py\", line 261, in _get_windows_console_stream\n    func = _stream_factories.get(f.fileno())\nio.UnsupportedOperation: fileno\nEnvironment\nPython version: python3.6.4\nFlask version: flask1.0.2\nWerkzeug version:", "issue_status": "Closed", "issue_reporting_time": "2018-05-11T16:46:22Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "371": {"issue_url": "https://github.com/pallets/flask/issues/2768", "issue_id": "#2768", "issue_summary": "Traceback shown when running `flask` without any args or an app", "issue_description": "Member\nThiefMaster commented on 9 May 2018\nExpected Behavior\nOnly the error message / usage information being printed\nActual Behavior\nA traceback shows up above the usage information.\nEnvironment\nPython version: 2.7.14\nFlask version: 1.0.2\nWerkzeug version: 0.14.1\n[adrian@blackhole:/tmp]> virtualenv testenv\nNew python executable in /tmp/testenv/bin/python2.7\nAlso creating executable in /tmp/testenv/bin/python\nInstalling setuptools, pip, wheel...done.\n\n[adrian@blackhole:/tmp]> ./testenv/bin/pip install flask\nCollecting flask\n  Using cached https://files.pythonhosted.org/packages/7f/e7/08578774ed4536d3242b14dacb4696386634607af824ea997202cd0edb4b/Flask-1.0.2-py2.py3-none-any.whl\nCollecting Werkzeug>=0.14 (from flask)\n  Using cached https://files.pythonhosted.org/packages/20/c4/12e3e56473e52375aa29c4764e70d1b8f3efa6682bef8d0aae04fe335243/Werkzeug-0.14.1-py2.py3-none-any.whl\nCollecting click>=5.1 (from flask)\n  Using cached https://files.pythonhosted.org/packages/34/c1/8806f99713ddb993c5366c362b2f908f18269f8d792aff1abfd700775a77/click-6.7-py2.py3-none-any.whl\nCollecting itsdangerous>=0.24 (from flask)\nCollecting Jinja2>=2.10 (from flask)\n  Using cached https://files.pythonhosted.org/packages/7f/ff/ae64bacdfc95f27a016a7bed8e8686763ba4d277a78ca76f32659220a731/Jinja2-2.10-py2.py3-none-any.whl\nCollecting MarkupSafe>=0.23 (from Jinja2>=2.10->flask)\nInstalling collected packages: Werkzeug, click, itsdangerous, MarkupSafe, Jinja2, flask\nSuccessfully installed Jinja2-2.10 MarkupSafe-1.0 Werkzeug-0.14.1 click-6.7 flask-1.0.2 itsdangerous-0.24\n\n\n[adrian@blackhole:/tmp]> ./testenv/bin/flask\nTraceback (most recent call last):\n  File \"/tmp/testenv/lib/python2.7/site-packages/flask/cli.py\", line 529, in list_commands\n    rv.update(info.load_app().cli.list_commands(ctx))\n  File \"/tmp/testenv/lib/python2.7/site-packages/flask/cli.py\", line 384, in load_app\n    'Could not locate a Flask application. You did not provide '\nNoAppException: Could not locate a Flask application. You did not provide the \"FLASK_APP\" environment variable, and a \"wsgi.py\" or \"app.py\" module was not found in the current directory.\nUsage: flask [OPTIONS] COMMAND [ARGS]...\n\n  A general utility script for Flask applications.\n\n  Provides commands from Flask, extensions, and the application. Loads the\n  application defined in the FLASK_APP environment variable, or from a\n  wsgi.py file. Setting the FLASK_ENV environment variable to 'development'\n  will enable debug mode.\n\n    $ export FLASK_APP=hello.py\n    $ export FLASK_ENV=development\n    $ flask run\n\nOptions:\n  --version  Show the flask version\n  --help     Show this message and exit.\n\nCommands:\n  routes  Show the routes for the app.\n  run     Runs a development server.\n  shell   Runs a shell in the app context.", "issue_status": "Closed", "issue_reporting_time": "2018-05-09T08:35:46Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "372": {"issue_url": "https://github.com/pallets/flask/issues/2767", "issue_id": "#2767", "issue_summary": "[Regression] Test client's response.status_code is always 500 when an exception is raised", "issue_description": "Depau commented on 9 May 2018\nExpected Behavior\nWhat used to happen before, i.e. on\nraise NotFound()\nthe test client's response.status_code should be 404.\nActual Behavior\nIt's always 500.\nEnvironment\nSee my failing Travis CI builds:\nhttps://travis-ci.org/poliedro-polimi/Crowdfunding-Backend\nOne of the tests that fails because of this issue: link\nCode that makes it fail: link\nPython version: >3.5, pypy3 (not tested on other versions)\nFlask version: 1.0.2 from pypi (worked as expected in 0.12.2)\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-05-09T01:27:44Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "373": {"issue_url": "https://github.com/pallets/flask/issues/2766", "issue_id": "#2766", "issue_summary": "send_file: latin-1 encoding not compatible with gunicorn", "issue_description": "jrast commented on 9 May 2018 \u2022\nedited by davidism\nWith the latest release (flask 1.0.0), unicode attachement filenames are allowed by flask.\nI was waiting for this change and it seems to work great using the builtin dev server. However, gunicorn on the production server does not support latin-1 encoding for the headers and only supports ascii.\nOriginaly flask also opted for ASCII encoding, however commit 336d6a4 changed this and since then latin-1 is used.\nWhat was the rational to switch to latin-1? I know, officially it's allowed, however gunicorn decided to only support ASCII: (see related issue)\nit's well documented around the web that HTTP headers should be ASCII\nIs there a change that flask also switches back to ASCII?\nRelated Issues:\n#2223\nbenoitc/gunicorn#1353\nbenoitc/gunicorn#1778", "issue_status": "Closed", "issue_reporting_time": "2018-05-08T19:37:23Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "374": {"issue_url": "https://github.com/pallets/flask/issues/2763", "issue_id": "#2763", "issue_summary": "Request files are left in memory", "issue_description": "AggressivelyMeows commented on 8 May 2018\nExpected Behaviour\nWhen the request is over, the incoming files and JSON should be removed from memory\nActual Behavior\nThe files and other request data is left in memory with no apparent way to close the objects. i have tried using the python garbage collector but that fails to find the files and other related data.\nThe memory is silently used up until flask is killed by the host\nEnvironment\nPython version: 3.6\nFlask version: 1.0.2\nWerkzeug version: 2.10", "issue_status": "Closed", "issue_reporting_time": "2018-05-08T10:12:46Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "375": {"issue_url": "https://github.com/pallets/flask/issues/2762", "issue_id": "#2762", "issue_summary": "url_for() breaks just before POSTing to a specific endpoint", "issue_description": "Kangaroux commented on 7 May 2018 \u2022\nedited\nThe Problem\nI have a few routes which are as follows:\napi.auth -> /api/auth\napi.user -> /api/user\n         -> /api/user/<user_id>\nAnytime I do a POST to api.auth, the variable rules for my routes break when I call url_for.\n# Prints `/api/user/1`\nprint(url_for(\"api.user\", user_id=1))\n\n# Login\nclient.post(url_for(\"api.auth\"), json={\n  \"email\": \"test@test.com\",\n  \"password\": \"password123\"\n})\n\n# Prints `/api/user?user_id=1`\nprint(url_for(\"api.user\", user_id=1))\n\n# Logout\nclient.delete(url_for(\"api.auth\"))\n\n# Prints `/api/user/1`\nprint(url_for(\"api.user\", user_id=1))\nThe URL lookups breaking are not a result of something in the api.auth views. If I call url_for in post() or dispatch_request() of my AuthAPI view class, it's already broken.\nCalling client.post(url_for(\"api.auth\"), json={...}) multiple times does not undo the problem.\nRelevant Code\nThe test that is failing: https://github.com/Kangaroux/Kanban/blob/master/tests/user/test_user.py#L75\nThe test app and client: https://github.com/Kangaroux/Kanban/blob/master/tests/conftest.py#L39\nThe full app factory: https://github.com/Kangaroux/Kanban/blob/master/config/app.py#L9\nEnvironment\nPython version: 3.6.5\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-05-07T03:12:02Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "376": {"issue_url": "https://github.com/pallets/flask/issues/2761", "issue_id": "#2761", "issue_summary": "Proper Using Blueprint (prefixed with lang_code) URLs in Html", "issue_description": "ufo911 commented on 6 May 2018 \u2022\nedited\nHello,\nthis may not be issue but please help me..\nI have solved the task getting lang code in URL some weeks ago and may anyone confirm it is relevant and good for any project ?\nhttps://stackoverflow.com/questions/49496761/two-language-flask-site-with-or-without-blueprints\nI have a problem using URLs in HTML\nHow is it relevant to use Blueprint URLs in HTML ?\nfor example:\n<a href=\"/{{sess_lang}}/home/hale/\">Home</a>\nI have to insert lang_code before Blueprint URL to go to the right page\nor\n<a href=\"home/hale/\">Home</a>\nI have to use URL without first slash ?!\nIn general this Blueprint must be main blueprint but I have to develop bigger App than any simple site and need help for such configuration about URLs ..\nIn addition I will be getting translations from Mongodb collection and need to switch language on any page without redirecting to any other page...\nIn addition can I change language without JS only with get request ? need example..", "issue_status": "Closed", "issue_reporting_time": "2018-05-06T12:41:56Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "377": {"issue_url": "https://github.com/pallets/flask/issues/2760", "issue_id": "#2760", "issue_summary": "send_file bug", "issue_description": "faststare08 commented on 6 May 2018\nThis issue tracker is a tool to address bugs in Flask itself.\nPlease use the #pocoo IRC channel on freenode or Stack Overflow for general\nquestions about using Flask or issues not related to Flask.\nIf you'd like to report a bug in Flask, fill out the template below. Provide\nany any extra information that may be useful / related to your problem.\nIdeally, create an MCVE, which helps us\nunderstand the problem and helps check that it is not caused by something in\nyour code.\nExpected Behavior\nI expect \\n escape character every line of my specialized csv file but\nTell us what should happen.\nit never include the \\n escape character for every line of my csv when I send it to the user\nPaste a minimal example that causes the problem.\nexample\nfoo bar\nspam and egg\nActual Behavior\nfoo barspam and egg\nTell us what happens instead.\nPaste the full traceback if there was an exception.\nno trackback\nEnvironment\nPython version: pythonanywhere 3.6\nFlask version: 0.12\nWerkzeug version: 0.11.15", "issue_status": "Closed", "issue_reporting_time": "2018-05-06T07:25:08Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "378": {"issue_url": "https://github.com/pallets/flask/issues/2759", "issue_id": "#2759", "issue_summary": "Flask in subpath doesn't work as expected", "issue_description": "galuszkak commented on 6 May 2018\nExpected Behavior\nFlask should work on subpath with proper url generation by url_for.\nSo url in example below should be: /myapp/static/css/bootstrap.min.css\nfrom flask import Flask\nfrom flask.views import MethodView\n\nclass ListConsumer(MethodView):\n    def get(self):\n        return render_template('list.html')\n\napp = Flask(name)\napp.config['APPLICATION_ROOT'] = '/myapp'\napp.add_url_rule('/', view_func=ListView.as_view('list_view'))\n\n# list.html\n# <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/bootstrap.min.css') }}\">\nActual Behavior\nActual generated URL is /static/css/bootstrap.min.css and this should be /myapp/static/css/bootstrap.min.css. Although this is when application just work.\nIf I add env SCRIPT_NAME=/myapp I get error:\n  File \"/usr/local/lib/python3.6/site-packages/gunicorn/workers/sync.py\", line 135, in handle\n    self.handle_request(listener, req, client, addr)\n  File \"/usr/local/lib/python3.6/site-packages/gunicorn/workers/sync.py\", line 167, in handle_request\n    listener.getsockname(), self.cfg)\n  File \"/usr/local/lib/python3.6/site-packages/gunicorn/http/wsgi.py\", line 193, in create\n    path_info = path_info.split(script_name, 1)[1]\nIndexError: list index out of range\nEnvironment\nPython version: 3.6.4\nFlask version: 1.0.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-05-06T06:13:32Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "379": {"issue_url": "https://github.com/pallets/flask/issues/2758", "issue_id": "#2758", "issue_summary": "run \"flask init-db\" first before executing \"flask run\"", "issue_description": "MrMalleable commented on 5 May 2018\nWhen i download this project on my computer , I followed the README.rst and executed these instructions ,but i found that there was something wrong , the database wasn't initialized.\nSo, before you run \"flask run\", be sure to run \"flask init-db\" first.", "issue_status": "Closed", "issue_reporting_time": "2018-05-05T10:06:15Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "380": {"issue_url": "https://github.com/pallets/flask/issues/2757", "issue_id": "#2757", "issue_summary": "functions added by after_request execute in reversed order", "issue_description": "joshuaavalon commented on 4 May 2018\nExpected Behavior\nPrint in following order:\nfoo\nbar\ndef foo(response):\n    print(\"foo\")\n    return response\ndef bar(response):\n    print(\"bar\")\n    return response\n\napp = Flask(__name__)\napp.after_request(foo)\napp.after_request(bar)\nActual Behavior\nPrint in following order:\nbar\nfoo\nEnvironment\nPython version: 3.6.5\nFlask version: 1.0.2\nWerkzeug version: 0.14.1\nThis is very counter intuitive. Is there a reason to execute reversed order? It seems like it is reversed on purpose in process_response in app.py. The order actually matters. I found out this when I apply gzip and html minifier which gzip is apply first and the minifier is unable to read the data as string.", "issue_status": "Closed", "issue_reporting_time": "2018-05-04T08:24:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "381": {"issue_url": "https://github.com/pallets/flask/issues/2755", "issue_id": "#2755", "issue_summary": "templates_auto_reload not taken into account", "issue_description": "romuald commented on 3 May 2018\nSynopsis\nIf the configuration templates_auto_reload is set up after has set up it's jinja environment (example: after setting up some filters), it is ignored by Flask\nExpected Behavior\nTemplates should be reloaded when app.config['TEMPLATES_AUTO_RELOAD'] is set to True\n# application.py\nfrom flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello(name=None):\n    return render_template('hello.html', name=name)\n\n# Templates are reloaded if configuration is set up before the template filter\n# app.config.update({'TEMPLATES_AUTO_RELOAD': True})\n\n@app.template_filter('dummy')\ndef dummy(value):\n    return value\n\n# Setting this up here does not do anything\napp.config.update({'TEMPLATES_AUTO_RELOAD': True})\n\n# Neither does this:\napp.templates_auto_reload = True\n\napp.run()\n\n#% python application.py\nActual Behavior\nThe option is ignored because the jinja environment was already created\nEnvironment\nPython version: 3.6.5\nFlask version: 1.0.2\nWerkzeug version: 0.14.1\ndebug is set to False in this case", "issue_status": "Closed", "issue_reporting_time": "2018-05-03T11:28:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "382": {"issue_url": "https://github.com/pallets/flask/issues/2751", "issue_id": "#2751", "issue_summary": "`flask routes` crashes if there is no route available", "issue_description": "timothyqiu commented on 2 May 2018\nFlask has a route for static files by default, and I disabled that by setting static_folder to None.\nfrom flask import Flask\n\napp = Flask(__name__, static_folder=None)\nExpected Behavior\nWith the code above, I expect the output of flask routes to be like this:\nEndpoint  Methods  Rule\n--------  -------  -----------------------\nor some message saying there is no route available.\nActual Behavior\nBut it crashed instead:\nTraceback (most recent call last):\n  File \"/Users/timothy/.virtualenvs/sample/bin/flask\", line 11, in <module>\n    sys.exit(main())\n  File \"/Users/timothy/.virtualenvs/sample/lib/python3.6/site-packages/flask/cli.py\", line 890, in main\n    cli.main(args=args, prog_name=name)\n  File \"/Users/timothy/.virtualenvs/sample/lib/python3.6/site-packages/flask/cli.py\", line 557, in main\n    return super(FlaskGroup, self).main(*args, **kwargs)\n  File \"/Users/timothy/.virtualenvs/sample/lib/python3.6/site-packages/click/core.py\", line 697, in main\n    rv = self.invoke(ctx)\n  File \"/Users/timothy/.virtualenvs/sample/lib/python3.6/site-packages/click/core.py\", line 1066, in invoke\n    return _process_result(sub_ctx.command.invoke(sub_ctx))\n  File \"/Users/timothy/.virtualenvs/sample/lib/python3.6/site-packages/click/core.py\", line 895, in invoke\n    return ctx.invoke(self.callback, **ctx.params)\n  File \"/Users/timothy/.virtualenvs/sample/lib/python3.6/site-packages/click/core.py\", line 535, in invoke\n    return callback(*args, **kwargs)\n  File \"/Users/timothy/.virtualenvs/sample/lib/python3.6/site-packages/click/decorators.py\", line 17, in new_func\n    return f(get_current_context(), *args, **kwargs)\n  File \"/Users/timothy/.virtualenvs/sample/lib/python3.6/site-packages/flask/cli.py\", line 412, in decorator\n    return __ctx.invoke(f, *args, **kwargs)\n  File \"/Users/timothy/.virtualenvs/sample/lib/python3.6/site-packages/click/core.py\", line 535, in invoke\n    return callback(*args, **kwargs)\n  File \"/Users/timothy/.virtualenvs/sample/lib/python3.6/site-packages/flask/cli.py\", line 841, in routes_command\n    max(len(rule.endpoint) for rule in rules),\nValueError: max() arg is an empty sequence\nEnvironment\nPython version: 3.6.3\nFlask version: 1.0.1\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-05-02T07:31:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "383": {"issue_url": "https://github.com/pallets/flask/issues/2750", "issue_id": "#2750", "issue_summary": "Broken links on pypi", "issue_description": "guillaumevincent commented on 2 May 2018\nHello,\non https://pypi.org/project/Flask/ issue tracker and code links in the left menu are pointing to https://github.com/pallets/pallets-sphinx-themes/issues not https://github.com/pallets/flask/issues.", "issue_status": "Closed", "issue_reporting_time": "2018-05-02T07:01:15Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "384": {"issue_url": "https://github.com/pallets/flask/issues/2744", "issue_id": "#2744", "issue_summary": "Issue loading images when threading is enabled", "issue_description": "evelyndooley commented on 30 Apr 2018 \u2022\nedited\nI have a Flask app to display profiles based on LDAP data. After updating to 1.0 I'm having crashes when loading the data. Running the app with threaded=False works, but I'd like to have threads.\nExpected Behavior\nThe app would pull an image from the LDAP server and return it to the client. It would be displayed in HTML.\n@app.route(\"/image/<uid>\", methods=[\"GET\"])\ndef image(uid):\n    return get_image(uid)\ndef get_image(uid):\n    account = ldap_get_member(uid)\n    return account.jpegPhoto\n{% for m in members %}\n <a href=\"/user/{{ m['uid'] }}\" class=\"card-block clearfix\">\n  <div class=\"card user-card\">\n   <div class=\"card-profile-pic card-img-top card-img-top-crop\" style=\"background-image: url('/image/{{m['uid']}}');\" >\n   </div>\n  </div>\n </a>\n{% endfor %}\nActual Behavior\nThe application crashes some way through loading the images. It usually loads 1 or 2 before exiting like this.\nThis behavior is only observed when attempting to load a large amount of images, such as on a page with a group of users. It does not happen on a single profile which only loads a single image.\nflask_pyoidc.flask_pyoidc\n * Serving Flask app \"profiles\" (lazy loading)\n * Environment: production\n   WARNING: Do not use the development server in a production environment.\n   Use a production WSGI server instead.\n * Debug mode: on\n * Running on http://localhost:8080/ (Press CTRL+C to quit)\n * Restarting with stat\nflask_pyoidc.flask_pyoidc\n * Debugger is active!\n * Debugger PIN: 252-481-398\n/home/nate/.local/lib/python3.6/site-packages/flask/sessions.py:208: UserWarning: \"localhost\" is not a valid cookie domain, it must contain a \".\". Add an entry to your hosts file, for example \"localhost.localdomain\", and use that instead.\n  ' \"{rv}.localdomain\", and use that instead.'.format(rv=rv)\n127.0.0.1 - - [29/Apr/2018 15:55:42] \"GET /group/active HTTP/1.1\" 302 -\n127.0.0.1 - - [29/Apr/2018 15:55:42] \"GET /redirect_uri?state=sb25ldwdXoNE6xlu&session_state=3f2de3ad-d4f8-431e-8d9a-09cfb811322b&code=eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..p7LHT5Z6Bzljz08mV4TzeQ.eG0Tnq9LJJ4OZtspH2qBOyYQkPsqp1gKYUATkQ8ANJbSsRmfI7wUgcEEgvNrVWq5ZcchfYeYqpxixCvVv0I53DdRkrS9IfNa4hv0UOFa4i7txNv1kxHBWfDnjULMTsP7exdpVc0fWxvO1S3fIHeuIm0kxaAsPBdt83wEmj147RnMhrHS6MTjAEICsBRehphzmLi1qWDn9aSoMISCTyc7kjqPikLCyMlpcn-7NPGgGVtQ4olCerE3lmNl-UqZFtYH.yZF3w47VEuMs4-hrboYW2w HTTP/1.1\" 302 -\nINFO:werkzeug:127.0.0.1 - - [29/Apr/2018 15:55:42] \"GET /redirect_uri?state=sb25ldwdXoNE6xlu&session_state=3f2de3ad-d4f8-431e-8d9a-09cfb811322b&code=eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..p7LHT5Z6Bzljz08mV4TzeQ.eG0Tnq9LJJ4OZtspH2qBOyYQkPsqp1gKYUATkQ8ANJbSsRmfI7wUgcEEgvNrVWq5ZcchfYeYqpxixCvVv0I53DdRkrS9IfNa4hv0UOFa4i7txNv1kxHBWfDnjULMTsP7exdpVc0fWxvO1S3fIHeuIm0kxaAsPBdt83wEmj147RnMhrHS6MTjAEICsBRehphzmLi1qWDn9aSoMISCTyc7kjqPikLCyMlpcn-7NPGgGVtQ4olCerE3lmNl-UqZFtYH.yZF3w47VEuMs4-hrboYW2w HTTP/1.1\" 302 -\n127.0.0.1 - - [29/Apr/2018 15:55:43] \"GET /group/active HTTP/1.1\" 200 -\nINFO:werkzeug:127.0.0.1 - - [29/Apr/2018 15:55:43] \"GET /group/active HTTP/1.1\" 200 -\n127.0.0.1 - - [29/Apr/2018 15:55:43] \"GET /image/dooley HTTP/1.1\" 200 -\nINFO:werkzeug:127.0.0.1 - - [29/Apr/2018 15:55:43] \"GET /image/dooley HTTP/1.1\" 200 -\nFatal Python error: saving thread twice?\n\nThread 0x00007f0263fff700 (most recent call first):\n  File \"/usr/lib/python3.6/hmac.py\", line 93 in update\n  File \"/usr/lib/python3.6/hmac.py\", line 84 in __init__\n  File \"/usr/lib/python3.6/hmac.py\", line 144 in new\n  File \"/home/nate/.local/lib/python3.6/site-packages/itsdangerous.py\", line 268 in get_signature\n  File \"/home/nate/.local/lib/python3.6/site-packages/itsdangerous.py\", line 243 in verify_signature\n  File \"/home/nate/.local/lib/python3.6/site-packages/itsdangerous.py\", line 362 in verify_signature\n  File \"/home/nate/.local/lib/python3.6/site-packages/itsdangerous.py\", line 371 in unsign\n  File \"/home/nate/.local/lib/python3.6/site-packages/itsdangerous.py\", line 422 in unsign\n  File \"/home/nate/.local/lib/python3.6/site-packages/itsdangerous.py\", line 643 in loads\n  File \"/home/nate/.local/lib/python3.6/site-packages/flask/sessions.py\", line 343 in open_session\n  File \"/home/nate/.local/lib/python3.6/site-packages/flask/ctx.py\", line 377 in push\n  File \"/home/nate/.local/lib/python3.6/site-packages/flask/app.py\", line 2283 in wsgi_app\n  File \"/home/nate/.local/lib/python3.6/site-packages/flask/app.py\", line 2301 in __call__\n  File \"/home/nate/.local/lib/python3.6/site-packages/werkzeug/debug/__init__.py\", line 288 in debug_application\n  File \"/home/nate/.local/lib/python3.6/site-packages/werkzeug/serving.py\", line 260 in execute\n  File \"/home/nate/.local/lib/python3.6/site-packages/werkzeug/serving.py\", line 270 in run_wsgi\n  File \"/home/nate/.local/lib/python3.6/site-packages/werkzeug/serving.py\", line 328 in handle_one_request\n  File \"/usr/lib/python3.6/http/server.py\", line 418 in handle\n  File \"/home/nate/.local/lib/python3.6/site-packages/werkzeug/serving.py\", line 293 in handle\n  File \"/usr/lib/python3.6/socketserver.py\", line 696 in __init__\n  File \"/usr/lib/python3.6/socketserver.py\", line 361 in finish_request\n  File \"/usr/lib/python3.6/socketserver.py\", line 639 in process_request_thread\n  File \"/usr/lib/python3.6/threading.py\", line 864 in run\n  File \"/usr/lib/python3.6/threading.py\", line 916 in _bootstrap_inner\n  File \"/usr/lib/python3.6/threading.py\", line 884 in _bootstrap\n\nThread 0x00007f0278997700 (most recent call first):\n  File \"/usr/lib/python3.6/socket.py\", line 586 in readinto\n  File \"/home/nate/.local/lib/python3.6/site-packages/werkzeug/serving.py\", line 324 in handle_one_request\n  File \"/usr/lib/python3.6/http/server.py\", line 418 in handle\n  File \"/home/nate/.local/lib/python3.6/site-packages/werkzeug/serving.py\", line 293 in handle\n  File \"/usr/lib/python3.6/socketserver.py\", line 696 in __init__\n  File \"/usr/lib/python3.6/socketserver.py\", line 361 in finish_request\n  File \"/usr/lib/python3.6/socketserver.py\", line 639 in process_request_thread\n  File \"/usr/lib/python3.6/threading.py\", line 864 in run\n  File \"/usr/lib/python3.6/threading.py\", line 916 in _bootstrap_inner\n  File \"/usr/lib/python3.6/threading.py\", line 884 in _bootstrap\n\nThread 0x00007f0279198700 (most recent call first):\n  File \"/home/nate/.local/lib/python3.6/site-packages/ldap/ldapobject.py\", line 293 in _ldap_call\n  File \"/home/nate/.local/lib/python3.6/site-packages/ldap/ldapobject.py\", line 792 in search_ext\n  File \"/home/nate/.local/lib/python3.6/site-packages/ldap/ldapobject.py\", line 796 in search_ext_s\n  File \"/home/nate/.local/lib/python3.6/site-packages/ldap/ldapobject.py\", line 1148 in _apply_method_s\n  File \"/home/nate/.local/lib/python3.6/site-packages/ldap/ldapobject.py\", line 1210 in search_ext_s\n  File \"/home/nate/.local/lib/python3.6/site-packages/ldap/ldapobject.py\", line 803 in search_s\n  File \"/home/nate/.local/lib/python3.6/site-packages/csh_ldap/member.py\", line 26 in __init__\n  File \"/home/nate/.local/lib/python3.6/site-packages/csh_ldap/__init__.py\", line 43 in get_member\n  File \"/home/nate/src/profiles/profiles/ldap.py\", line 49 in ldap_get_member\n  File \"/home/nate/src/profiles/profiles/ldap.py\", line 312 in get_image\n  File \"/home/nate/src/profiles/profiles/__init__.py\", line 133 in image\n  File \"/home/nate/.local/lib/python3.6/site-packages/flask/app.py\", line 1791 in dispatch_request\n  File \"/home/nate/.local/lib/python3.6/site-packages/flask/app.py\", line 1805 in full_dispatch_request\n  File \"/home/nate/.local/lib/python3.6/site-packages/flask/app.py\", line 2284 in wsgi_app\n  File \"/home/nate/.local/lib/python3.6/site-packages/flask/app.py\", line 2301 in __call__\n  File \"/home/nate/.local/lib/python3.6/site-packages/werkzeug/debug/__init__.py\", line 288 in debug_application\n  File \"/home/nate/.local/lib/python3.6/site-packages/werkzeug/serving.py\", line 260 in execute\n  File \"/home/nate/.local/lib/python3.6/site-packages/werkzeug/serving.py\", line 270 in run_wsgi\n  File \"/home/nate/.local/lib/python3.6/site-packages/werkzeug/serving.py\", line 328 in handle_one_request\n  File \"/usr/lib/python3.6/http/server.py\", line 418 in handle\n  File \"/home/nate/.local/lib/python3.6/site-packages/werkzeug/serving.py\", line 293 in handle\n  File \"/usr/lib/python3.6/socketserver.py\", line 696 in __init__\n  File \"/usr/lib/python3.6/socketserver.py\", line 361 in finish_request\n  File \"/usr/lib/python3.6/socketserver.py\", line 639 in process_request_thread\n  File \"/usr/lib/python3.6/threading.py\", line 864 in run\n  File \"/usr/lib/python3.6/threading.py\", line 916 in _bootstrap_inner\n  File \"/usr/lib/python3.6/threading.py\", line 884 in _bootstrap\n\nCurrent thread 0x00007f0279999700 (most recent call first):\n  File \"/home/nate/.local/lib/python3.6/site-packages/ldap/ldapobject.py\", line 293 in _ldap_call\n  File \"/home/nate/.local/lib/python3.6/site-packages/ldap/ldapobject.py\", line 722 in result4\n  File \"/home/nate/.local/lib/python3.6/site-packages/ldap/ldapobject.py\", line 715 in result3\n  File \"/home/nate/.local/lib/python3.6/site-packages/ldap/ldapobject.py\", line 708 in result2\n  File \"/home/nate/.local/lib/python3.6/site-packages/ldap/ldapobject.py\", line 704 in result\n  File \"/home/nate/.local/lib/python3.6/site-packages/ldap/ldapobject.py\", line 797 in search_ext_s\n  File \"/home/nate/.local/lib/python3.6/site-packages/ldap/ldapobject.py\", line 1148 in _apply_method_s\n  File \"/home/nate/.local/lib/python3.6/site-packages/ldap/ldapobject.py\", line 1210 in search_ext_s\n  File \"/home/nate/.local/lib/python3.6/site-packages/ldap/ldapobject.py\", line 803 in search_s\n  File \"/home/nate/.local/lib/python3.6/site-packages/csh_ldap/member.py\", line 26 in __init__\n  File \"/home/nate/.local/lib/python3.6/site-packages/csh_ldap/__init__.py\", line 43 in get_member\n  File \"/home/nate/src/profiles/profiles/ldap.py\", line 49 in ldap_get_member\n  File \"/home/nate/src/profiles/profiles/ldap.py\", line 312 in get_image\n  File \"/home/nate/src/profiles/profiles/__init__.py\", line 133 in image\n  File \"/home/nate/.local/lib/python3.6/site-packages/flask/app.py\", line 1791 in dispatch_request\n  File \"/home/nate/.local/lib/python3.6/site-packages/flask/app.py\", line 1805 in full_dispatch_request\n  File \"/home/nate/.local/lib/python3.6/site-packages/flask/app.py\", line 2284 in wsgi_app\n  File \"/home/nate/.local/lib/python3.6/site-packages/flask/app.py\", line 2301 in __call__\n  File \"/home/nate/.local/lib/python3.6/site-packages/werkzeug/debug/__init__.py\", line 288 in debug_application\n  File \"/home/nate/.local/lib/python3.6/site-packages/werkzeug/serving.py\", line 260 in execute\n  File \"/home/nate/.local/lib/python3.6/site-packages/werkzeug/serving.py\", line 270 in run_wsgi\n  File \"/home/nate/.local/lib/python3.6/site-packages/werkzeug/serving.py\", line 328 in handle_one_request\n  File \"/usr/lib/python3.6/http/server.py\", line 418 in handle\n  File \"/home/nate/.local/lib/python3.6/site-packages/werkzeug/serving.py\", line 293 in handle\n  File \"/usr/lib/python3.6/socketserver.py\", line 696 in __init__\n  File \"/usr/lib/python3.6/socketserver.py\", line 361 in finish_request\n  File \"/usr/lib/python3.6/socketserver.py\", line 639 in process_request_thread\n  File \"/usr/lib/python3.6/threading.py\", line 864 in run\n  File \"/usr/lib/python3.6/threading.py\", line 916 in _bootstrap_inner\n  File \"/usr/lib/python3.6/threading.py\", line 884 in _bootstrap\n\nThread 0x00007f027a431700 (most recent call first):\n  File \"/usr/lib/python3.6/ssl.py\", line 689 in do_handshake\n  File \"/usr/lib/python3.6/ssl.py\", line 1068 in do_handshake\n  File \"/usr/lib/python3.6/ssl.py\", line 814 in __init__\n  File \"/usr/lib/python3.6/ssl.py\", line 407 in wrap_socket\n  File \"/usr/lib/python3.6/http/client.py\", line 1400 in connect\n  File \"/usr/lib/python3.6/http/client.py\", line 964 in send\n  File \"/usr/lib/python3.6/http/client.py\", line 1026 in _send_output\n  File \"/usr/lib/python3.6/http/client.py\", line 1234 in endheaders\n  File \"/usr/lib/python3.6/http/client.py\", line 1285 in _send_request\n  File \"/usr/lib/python3.6/http/client.py\", line 1239 in request\n  File \"/usr/lib/python3.6/urllib/request.py\", line 1318 in do_open\n  File \"/usr/lib/python3.6/urllib/request.py\", line 1361 in https_open\n  File \"/usr/lib/python3.6/urllib/request.py\", line 504 in _call_chain\n  File \"/usr/lib/python3.6/urllib/request.py\", line 544 in _open\n  File \"/usr/lib/python3.6/urllib/request.py\", line 526 in open\n  File \"/usr/lib/python3.6/urllib/request.py\", line 223 in urlopen\n  File \"/home/nate/src/profiles/profiles/ldap.py\", line 324 in get_image\n  File \"/home/nate/src/profiles/profiles/__init__.py\", line 133 in image\n  File \"/home/nate/.local/lib/python3.6/site-packages/flask/app.py\", line 1791 in dispatch_request\n  File \"/home/nate/.local/lib/python3.6/site-packages/flask/app.py\", line 1805 in full_dispatch_request\n  File \"/home/nate/.local/lib/python3.6/site-packages/flask/app.py\", line 2284 in wsgi_app\n  File \"/home/nate/.local/lib/python3.6/site-packages/flask/app.py\", line 2301 in __call__\n  File \"/home/nate/.local/lib/python3.6/site-packages/werkzeug/debug/__init__.py\", line 288 in debug_application\n  File \"/home/nate/.local/lib/python3.6/site-packages/werkzeug/serving.py\", line 260 in execute\n  File \"/home/nate/.local/lib/python3.6/site-packages/werkzeug/serving.py\", line 270 in run_wsgi\n  File \"/home/nate/.local/lib/python3.6/site-packages/werkzeug/serving.py\", line 328 in handle_one_request\n  File \"/usr/lib/python3.6/http/server.py\", line 418 in handle\n  File \"/home/nate/.local/lib/python3.6/site-packages/werkzeug/serving.py\", line 293 in handle\n  File \"/usr/lib/python3.6/socketserver.py\", line 696 in __init__\n  File \"/usr/lib/python3.6/socketserver.py\", line 361 in finish_request\n  File \"/usr/lib/python3.6/socketserver.py\", line 639 in process_request_thread\n  File \"/usr/lib/python3.6/threading.py\", line 864 in run\n  File \"/usr/lib/python3.6/threading.py\", line 916 in _bootstrap_inner\n  File \"/usr/lib/python3.6/threading.py\", line 884 in _bootstrap\n\nThread 0x00007f027ac32700 (most recent call first):\n  File \"/usr/lib/python3.6/threading.py\", line 295 in wait\n  File \"/usr/lib/python3.6/threading.py\", line 551 in wait\n  File \"/usr/lib/python3.6/threading.py\", line 851 in start\n  File \"/usr/lib/python3.6/socketserver.py\", line 650 in process_request\n  File \"/usr/lib/python3.6/socketserver.py\", line 317 in _handle_request_noblock\n  File \"/usr/lib/python3.6/socketserver.py\", line 238 in serve_forever\n  File \"/home/nate/.local/lib/python3.6/site-packages/werkzeug/serving.py\", line 612 in serve_forever\n  File \"/home/nate/.local/lib/python3.6/site-packages/werkzeug/serving.py\", line 777 in inner\n  File \"/usr/lib/python3.6/threading.py\", line 864 in run\n  File \"/usr/lib/python3.6/threading.py\", line 916 in _bootstrap_inner\n  File \"/usr/lib/python3.6/threading.py\", line 884 in _bootstrap\n\nThread 0x00007f028a0fd540 (most recent call first):\n  File \"/home/nate/.local/lib/python3.6/site-packages/werkzeug/_reloader.py\", line 164 in run\n  File \"/home/nate/.local/lib/python3.6/site-packages/werkzeug/_reloader.py\", line 273 in run_with_reloader\n  File \"/home/nate/.local/lib/python3.6/site-packages/werkzeug/serving.py\", line 812 in run_simple\n  File \"/home/nate/.local/lib/python3.6/site-packages/flask/app.py\", line 941 in run\n  File \"app.py\", line 4 in <module>\nEnvironment\nPython version: 3.6.5\nFlask version: 1.0\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-04-29T20:24:14Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "385": {"issue_url": "https://github.com/pallets/flask/issues/2743", "issue_id": "#2743", "issue_summary": "Documentation search broken", "issue_description": "Member\nlepture commented on 29 Apr 2018 \u2022\nedited\nHow to reproduce\nTry search \"request\", it goes to this page: http://flask.pocoo.org/docs/1.0/search/?q=request\nClick on the result, it will be 404\nThe urls built on the search page are wrong, for instance:\nhttp://flask.pocoo.org/docs/1.0/search/api/?highlight=request#flask.request\nShould be\nhttp://flask.pocoo.org/docs/1.0/api/?highlight=request#flask.request\n@davidism this should be fixed in the pallets themes.", "issue_status": "Closed", "issue_reporting_time": "2018-04-29T10:57:08Z", "fixed_by": "pallets/pallets-sphinx-themes#3", "pull_request_summary": "Switch to explicit request object passing", "pull_request_description": "Contributor\njustquick commented on 13 Apr 2010\nThis makes it more to type (because you now have something to pass around) but it makes it a whole lot easier to debug hairy situations and to test the code.", "pull_request_status": "Merged", "issue_fixed_time": "2010-04-13T03:31:57Z", "files_changed": []}, "386": {"issue_url": "https://github.com/pallets/flask/issues/2742", "issue_id": "#2742", "issue_summary": "Flask 1.0 backwards incompatible root url_prefix", "issue_description": "albertyw commented on 29 Apr 2018\nSome of the recent PRs in blueprint.py seem to make Flask 1.0 not backwards compatible with 0.x versions. When url_prefix='', url_prefix='/', or url_prefix is not specified, a ValueError('urls must start with a leading slash') is now raised.\nExpected Behavior\nI would have assumed, given the discussion in #2629, that '' and maybe / would be acceptable url_prefixes to indicate the blueprint is meant for the root.\nAn example of a broken library is flask-sitemap (https://github.com/inveniosoftware/flask-sitemap/blob/master/flask_sitemap/__init__.py#L120) which uses\n            app.register_blueprint(\n                self.blueprint,\n                url_prefix=app.config.get('SITEMAP_BLUEPRINT_URL_PREFIX') # default is '/'\n            )\nActual Behavior\nIn my testing, I continually get\n    self.init_app(app)\n  File \"/home/albertyw/.virtualenvs/baseflask/local/lib/python2.7/site-packages/flask_sitemap/__init__.py\", line 120, in init_app\n    url_prefix='' # app.config.get('SITEMAP_BLUEPRINT_URL_PREFIX')\n  File \"/home/albertyw/.virtualenvs/baseflask/local/lib/python2.7/site-packages/flask/app.py\", line 64, in wrapper_func\n    return f(self, *args, **kwargs)\n  File \"/home/albertyw/.virtualenvs/baseflask/local/lib/python2.7/site-packages/flask/app.py\", line 1113, in register_blueprint\n    blueprint.register(self, options, first_registration)\n  File \"/home/albertyw/.virtualenvs/baseflask/local/lib/python2.7/site-packages/flask/blueprints.py\", line 186, in register\n    deferred(state)\n  File \"/home/albertyw/.virtualenvs/baseflask/local/lib/python2.7/site-packages/flask/blueprints.py\", line 207, in <lambda>\n    s.add_url_rule(rule, endpoint, view_func, **options))\n  File \"/home/albertyw/.virtualenvs/baseflask/local/lib/python2.7/site-packages/flask/blueprints.py\", line 79, in add_url_rule\n    view_func, defaults=defaults, **options)\n  File \"/home/albertyw/.virtualenvs/baseflask/local/lib/python2.7/site-packages/flask/app.py\", line 64, in wrapper_func\n    return f(self, *args, **kwargs)\n  File \"/home/albertyw/.virtualenvs/baseflask/local/lib/python2.7/site-packages/flask/app.py\", line 1211, in add_url_rule\n    rule = self.url_rule_class(rule, methods=methods, **options)\n  File \"/home/albertyw/.virtualenvs/baseflask/local/lib/python2.7/site-packages/werkzeug/routing.py\", line 603, in __init__\n    raise ValueError('urls must start with a leading slash')\nValueError: urls must start with a leading slash\nunless I set url_prefix='//', in which case the url_prefix is the root.\nEnvironment\nPython version: python 2.7 and 3.6\nFlask version: 1.0\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-04-29T10:18:59Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "387": {"issue_url": "https://github.com/pallets/flask/issues/2736", "issue_id": "#2736", "issue_summary": "make_response changes breaks custom response class", "issue_description": "jesseops commented on 27 Apr 2018 \u2022\nedited\nExpected Behavior\nI should be able to return a single value from my view(that is, not a tuple) and have my value passed to my custom response class. In this case I have a response class that detects whether JSON or pickle data was requested by the client and dumps the return value appropriately. This allows me to simply return a list or dict from my view without having to detect and dump the appropriate type.\n@mod.route('/')\ndef return_json_or_pickle():\n    return ['foo', 'bar', 'bat']\nAs of Flask 0.12.2 this worked - make_response would pass the list to my custom response class and my client would get what it wanted.\nActual Behavior\nAs of 1.0, commit #2256 was merged which added an explicit check to see if the return value was a list; treating a list as a tuple return in that case. I now get a typeerror:\nTypeError: The view function did not return a valid response tuple. The tuple must have the form (body, status, headers), (body, status), or (body, headers).\nIf I change my view function to return a tuple:\n@mod.route('/')\ndef return_json_or_pickle():\n    return ['foo', 'bar', 'bat'], 200\nthe previous functionality is restored! This confirms that tuple handling is of course perfectly fine. I have a pull request prepared which should do a very nice job of resolving the issue - it simply omits list from the type check in make_response. Since a list is not a valid response anyway, there's no reason I can see for it to be there.\nEnvironment\nPython version: 3.6\nFlask version: 1.0\nWerkzeug version: n/a", "issue_status": "Closed", "issue_reporting_time": "2018-04-27T17:05:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "388": {"issue_url": "https://github.com/pallets/flask/issues/2735", "issue_id": "#2735", "issue_summary": "flask.abort() behavioral change in debug mode", "issue_description": "pypingou commented on 27 Apr 2018\nExpected Behavior\nIn flask 1.0, calling flask.abort(400) returns a 500 error in debug mode\nimport flask\nimport werkzeug\n\nAPP = flask.Flask(__name__)\nprint(flask.__version__)\nprint(werkzeug.__version__)\n\n@APP.route('/<arg>')\ndef index(arg):\n    return flask.abort(400)\n\nAPP.debug = True\nAPP.run()\nActual Behavior\nWhen App.debug = True is set:\n127.0.0.1 - - [27/Apr/2018 17:39:16] \"GET /tes HTTP/1.1\" 500 -\nTraceback (most recent call last):\n  File \"/home/pingou/.local/share/virtualenvs/pag/lib/python2.7/site-packages/flask/app.py\", line 2301, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/home/pingou/.local/share/virtualenvs/pag/lib/python2.7/site-packages/flask/app.py\", line 2287, in wsgi_app\n    response = self.handle_exception(e)\n  File \"/home/pingou/.local/share/virtualenvs/pag/lib/python2.7/site-packages/flask/app.py\", line 1733, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/home/pingou/.local/share/virtualenvs/pag/lib/python2.7/site-packages/flask/app.py\", line 2284, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/home/pingou/.local/share/virtualenvs/pag/lib/python2.7/site-packages/flask/app.py\", line 1807, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"/home/pingou/.local/share/virtualenvs/pag/lib/python2.7/site-packages/flask/app.py\", line 1710, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/home/pingou/.local/share/virtualenvs/pag/lib/python2.7/site-packages/flask/app.py\", line 1805, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"/home/pingou/.local/share/virtualenvs/pag/lib/python2.7/site-packages/flask/app.py\", line 1791, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"/home/pingou/reproducer.py\", line 12, in index\n    return flask.abort(400)\n  File \"/home/pingou/.local/share/virtualenvs/pag/lib/python2.7/site-packages/werkzeug/exceptions.py\", line 707, in abort\n    return _aborter(status, *args, **kwargs)\n  File \"/home/pingou/.local/share/virtualenvs/pag/lib/python2.7/site-packages/werkzeug/exceptions.py\", line 687, in __call__\n    raise self.mapping[code](*args, **kwargs)\nBadRequest: 400 Bad Request: The browser (or proxy) sent a request that this server could not understand.\nCalling the endpoint via requests show:\n>>> requests.get('http://127.0.0.1:5000/tes')\n<Response [500]>\nWhen App.debug = True is commented out, I get the expected behavior:\n>>> requests.get('http://127.0.0.1:5000/tes')\n<Response [400]>\nEnvironment\nPython version: in this case 2.7.14\nFlask version: 1.0\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-04-27T15:44:05Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "389": {"issue_url": "https://github.com/pallets/flask/issues/2734", "issue_id": "#2734", "issue_summary": "Running pytest on flask 1.0 (ModuleNotFoundError: No module named 'flask.json.tag'; 'flask.json' is not a package)", "issue_description": "claygorman commented on 27 Apr 2018\nExpected Behavior\nWhen I run pytest on my code it should complete all tests successfully. This does work fine in 0.12.2.\nActual Behavior\nAfter upgrading to flask 1.0 I get a strange error when running pytest. I was hoping you might have some insight\nTraceback (most recent call last):\n  File \"/Volumes/Storage/Users/claygorman/.pyenv/versions/3.6.4/envs/testproj-1/lib/python3.6/site-packages/_pytest/config.py\", line 371, in _importconftest\n    mod = conftestpath.pyimport()\n  File \"/Volumes/Storage/Users/claygorman/.pyenv/versions/3.6.4/envs/testproj-1/lib/python3.6/site-packages/py/_path/local.py\", line 668, in pyimport\n    __import__(modname)\n  File \"/Volumes/Storage/Users/claygorman/.pyenv/versions/3.6.4/envs/testproj-1/lib/python3.6/site-packages/_pytest/assertion/rewrite.py\", line 213, in load_module\n    py.builtin.exec_(co, mod.__dict__)\n  File \"/Volumes/Storage/clay-dev/testproj/tests/conftest.py\", line 13, in <module>\n    from testproj import create_app\n  File \"/Volumes/Storage/clay-dev/testproj/testproj/__init__.py\", line 8, in <module>\n    from flask import Flask\n  File \"/Volumes/Storage/Users/claygorman/.pyenv/versions/3.6.4/envs/testproj-1/lib/python3.6/site-packages/flask/__init__.py\", line 21, in <module>\n    from .app import Flask, Request, Response\n  File \"/Volumes/Storage/Users/claygorman/.pyenv/versions/3.6.4/envs/testproj-1/lib/python3.6/site-packages/_pytest/assertion/rewrite.py\", line 213, in load_module\n    py.builtin.exec_(co, mod.__dict__)\n  File \"/Volumes/Storage/Users/claygorman/.pyenv/versions/3.6.4/envs/testproj-1/lib/python3.6/site-packages/flask/app.py\", line 34, in <module>\n    from .sessions import SecureCookieSessionInterface\n  File \"/Volumes/Storage/Users/claygorman/.pyenv/versions/3.6.4/envs/testproj-1/lib/python3.6/site-packages/_pytest/assertion/rewrite.py\", line 213, in load_module\n    py.builtin.exec_(co, mod.__dict__)\n  File \"/Volumes/Storage/Users/claygorman/.pyenv/versions/3.6.4/envs/testproj-1/lib/python3.6/site-packages/flask/sessions.py\", line 21, in <module>\n    from flask.json.tag import TaggedJSONSerializer\nModuleNotFoundError: No module named 'flask.json.tag'; 'flask.json' is not a package\nERROR: could not load /Volumes/Storage/clay-dev/testproj/tests/conftest.py\nEnvironment\nPython version: 3.6.4\nFlask version: 1.0\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-04-27T15:13:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "390": {"issue_url": "https://github.com/pallets/flask/issues/2732", "issue_id": "#2732", "issue_summary": "support for \" url_for('api.book', book_id='${bookId}') \"", "issue_description": "fushall1104 commented on 27 Apr 2018 \u2022\nedited\nCould you add a optional param to flask.url_for ? :)\nwhen I call url_for('api.book', book_id=\"${bookId}\"),\nreturned value will be '/api/book/%{bookId}' ,\ninstead of '/api/book/%24%7BbookId%7D'\na snippet in index.html\n<script>\n    let bookId = '123';\n    let url = `{{ url_for('api.books', book_id='${bookId}') }}`\n axios.get(url)\n ...\n ...\n</script>\na blueprint\napi = Blueprint(xx,xx,xx, url_prefix='api')\n@api.route('/book/<str: book_id>')\ndef books(book_id):\n    xxxxxx\n    xxxxxx\n    return xxx", "issue_status": "Closed", "issue_reporting_time": "2018-04-27T13:45:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "391": {"issue_url": "https://github.com/pallets/flask/issues/2731", "issue_id": "#2731", "issue_summary": "Flask 1.0 backwards-incompat with double-slash/no-slash re. #2629", "issue_description": "brianmhunt commented on 27 Apr 2018\nThis is a major backwards-compat breaking change, but I suspect not the intended design and hopefully easy to fix.\nThe issue is related to PR #2629, and this example follows from that:\nGiven blueprint bp and app app:\n@bp.route('b/')\ndef tmp():\n    return \"URI should be '/a/b/\"\n\napp.register_blueprint(bp, url_prefix='/a/')\nIn Flask 0.12 the URL is correctly /a/b, but in Flask 1.0 it's /ab.\nSince issue #2629 relates to resolve double-slashes, I imagine this is a bug (and not a design decision) - and the correct solution would be to remove a slash only when there are two.", "issue_status": "Closed", "issue_reporting_time": "2018-04-27T13:12:55Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "392": {"issue_url": "https://github.com/pallets/flask/issues/2728", "issue_id": "#2728", "issue_summary": "Wrong wheel for Flask 0.12.3 in PyPI", "issue_description": "lafrech commented on 27 Apr 2018\nhttps://pypi.org/project/Flask/0.12.3/#files\nFlask-0.12.3-py2.py3-none-any.whl contains a flask/json directory.\nIt does not correspond to the 0.12.3 tag. Looks like it is a more recent revision.\nThe .tag.gz looks fine (I just checked it contains flask/json.py and no flask/json directory).", "issue_status": "Closed", "issue_reporting_time": "2018-04-27T09:34:05Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "393": {"issue_url": "https://github.com/pallets/flask/issues/2726", "issue_id": "#2726", "issue_summary": "New tuple requirement for response is restrictive", "issue_description": "harveyslash commented on 27 Apr 2018\nI had written a simple wrapper to take all the response primitives, and jsonify them before returning to client like so:\nclass JSONifyResponseWrapper(Response):\n    default_mimetype = 'application/json'\n\n    @classmethod\n    def force_type(cls, rv, environ=None):\n        try:\n            rv = jsonify(rv)\n        finally:\n            return super(JSONifyResponseWrapper, cls).force_type(rv, environ)\nThen i set app.response_class to the class above.\nHowever, in flask 1.0 , the routes are required to return a tuple.\nThis means if I have a route like this:\n@base_blueprint.route('', methods=['Post'])\ndef hello():\n    a = {\"hello\":\"world\"} \n   return a\nThe client receives a valid json object.\nBut if I do this:\n@base_blueprint.route('', methods=['Post'])\ndef hello():\n    a = [i for i in range(100)]\n   return a\nFlask will throw this error:\nTypeError: The view function did not return a valid response tuple. The tuple must have the form (body, status, headers), (body, status), or (body, headers)`", "issue_status": "Closed", "issue_reporting_time": "2018-04-27T03:17:59Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "394": {"issue_url": "https://github.com/pallets/flask/issues/2725", "issue_id": "#2725", "issue_summary": "[help] flask 1.0 app run in click", "issue_description": "ngxlua commented on 27 Apr 2018\nExpected Behavior\nWhen I try to upgrade to 1.0, my code is not compatible with 1.0 flask, how should I solve it?\n@cli.command(\"run\", help=\"run server\")\n@click.option('--mode', help=\"Application running mode\", default=\"dev\")\ndef runserver(mode, daemon, reload, preload, spew):\n    if mode == 'prod':\n        \"\"\"\n        do something\n        \"\"\"\n\n    app.run(host=app.config[\"HOST\"], port=app.config[\"PORT\"], use_reloader=True)\n\nif __name__ == '__main__':\n    sys.exit(cli.main())\nActual Behavior\nmanage.py:110: Warning: Silently ignoring app.run() because the application is run from the flask command line executable.  Consider putting app.run() behind an if __name__ == \"__main__\" guard to silence this warning.\n  app.run(host=app.config[\"HOST\"], port=app.config[\"PORT\"], use_reloader=True)\nEnvironment\nPython version: 3.6.4\nFlask version: 1.0\n1", "issue_status": "Closed", "issue_reporting_time": "2018-04-27T02:18:56Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "395": {"issue_url": "https://github.com/pallets/flask/issues/2723", "issue_id": "#2723", "issue_summary": "Where are all the issues?", "issue_description": "westonplatter commented on 27 Apr 2018\nAsking because I'm interested in contributed and would think there are more than 18 issues.\nFeel free to close this.", "issue_status": "Closed", "issue_reporting_time": "2018-04-26T22:44:22Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "396": {"issue_url": "https://github.com/pallets/flask/issues/2722", "issue_id": "#2722", "issue_summary": "Add a parameter to disable load dotenv using Flask CLI", "issue_description": "fabiocerqueira commented on 27 Apr 2018\nRunning Flask CLI with pipenv using the new version(1.0)\npipenv run flask run\nI always get the tip message about the load_dotenv feature. Since pipenv already load the .env file, It might be interesting have some parameter to disable Flask to load .env and does not show the tip message.\nExpected Behavior\nDisable load dotenv using the Flask CLI. Example:\npipenv run flask run --ignore-dotenv\nOr just remove the tip message and let it only in the documentation.\nActual Behavior\nShowing the dotenv tip message even if the developer doesn't want to use it\n* Tip: There are .env files present. Do \"pip install python-dotenv\" to use them\nEnvironment\nPython version: 3.6.4\nFlask version: 1.0\nWerkzeug version: 0.14.1\n5", "issue_status": "Closed", "issue_reporting_time": "2018-04-26T22:15:06Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "397": {"issue_url": "https://github.com/pallets/flask/issues/2718", "issue_id": "#2718", "issue_summary": "Why can not load a sklearn model by the request for Flask", "issue_description": "Wingoom commented on 23 Apr 2018 \u2022\nedited\nI saved a sklearn model by joblib.load()\u3002\n    model = RandomForestClassifier(n_estimators=100)\n    model.fit(feature_train, target_train)\n    joblib.dump(model, \"%s/%s\" % (model_path,\"RandomForest.pkl\"))\nAnd I want to load the model through sending a request\u3002\n@app.route('/getClassification/',methods=['GET','POST'])\ndef classify():\n    load_model = joblib.load( \"%s/%s\" % (model_path,\"RandomForest.pkl\"))\n    return  \"test\"\ntry:\n    reponse = requests.post(monitor_url, data=params, timeout=60)\n    print reponse.content\nexcept Exception, e:\n    print e\nBut the request never responded until it Read timed out\u3002\nI dont save a sklearn model \uff0cinstead I save a string for testing\u3002\njoblib.dump(\"111222\", \"%s/%s\" % (model_path,\"RandomForest.pkl\"))\nIt loaded successfully\u3002\nIf I load the model alone\uff0cno use request for Flask\uff0cIt can also load successfully.\nWhy can not load a sklearn model by the request for Flask\nEnvironment\nPython version: 2.7.14\nFlask version:0.12.2", "issue_status": "Closed", "issue_reporting_time": "2018-04-23T09:02:35Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "398": {"issue_url": "https://github.com/pallets/flask/issues/2716", "issue_id": "#2716", "issue_summary": "Port Issue", "issue_description": "PyDever commented on 22 Apr 2018\nNot sure if this is a bug or a system issue.\n(debug=True, port=3000)\nyet my app still runs on 5000 (default port)", "issue_status": "Closed", "issue_reporting_time": "2018-04-22T02:21:14Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "399": {"issue_url": "https://github.com/pallets/flask/issues/2715", "issue_id": "#2715", "issue_summary": "E-commerce", "issue_description": "KeithCu commented on 21 Apr 2018\nFlask is a very well-designed project to build many kinds of small to big websites, but you run into a problem if you want to do e-commerce.\nI think you should consider porting this to Flask:\nhttps://github.com/django-oscar/django-oscar\nIt seems to be the most popular Django e-commerce solution.\nI'm not sure how much would have to be changed. Note you would need to port over some of the plugins like for Paypal, which is 1200 lines.\nMaybe it is even possible to have some if Django and if Flask lines and keep it all in one codebase.\nI realize this is not an easy bug, but maybe if enough people are interested, something could happen one day.", "issue_status": "Closed", "issue_reporting_time": "2018-04-21T06:07:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "400": {"issue_url": "https://github.com/pallets/flask/issues/2714", "issue_id": "#2714", "issue_summary": "Flask website has broken links", "issue_description": "KeithCu commented on 21 Apr 2018\nIf you go to: http://flask.pocoo.org/\nAnd you try to click on the microblog link or the twitter clone link, neither of them work because the URLs have changed.", "issue_status": "Closed", "issue_reporting_time": "2018-04-20T23:48:21Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "401": {"issue_url": "https://github.com/pallets/flask/issues/2713", "issue_id": "#2713", "issue_summary": "Support for more environment variables for Flask CLI", "issue_description": "JhossePaul commented on 21 Apr 2018\nIt would be great to add support for more environment variables for Flask CLI. For example,\nFLASK_PORT=8080 flask run\nshould run the app in port 8080 instead of default. Thus, we can have a single .flaskenv file that sets our environment and just flask run without further arguments.", "issue_status": "Closed", "issue_reporting_time": "2018-04-20T19:49:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "402": {"issue_url": "https://github.com/pallets/flask/issues/2712", "issue_id": "#2712", "issue_summary": "Typo in fileuploads guide?", "issue_description": "davejonesbkk commented on 20 Apr 2018\nJust a typo here with the fileuploads guide I guess?\nhttp://flask.pocoo.org/docs/0.12/patterns/fileuploads/\nExpected Behavior\nWhen running the code from the quickstart guide for fileuploads the return statement should call 'upload_file' and not 'uploaded_file'\nActual Behavior\nThe following error and recommendation is returned:\n raise BuildError(endpoint, values, method, self)\nwerkzeug.routing.BuildError: Could not build url for endpoint 'uploaded_file' with values ['filename']. Did you mean 'upload_file' instead?\nEnvironment\nPython version: 3.5.1\nFlask version: 0.12.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-04-20T09:27:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "403": {"issue_url": "https://github.com/pallets/flask/issues/2708", "issue_id": "#2708", "issue_summary": "flask.flash() not working", "issue_description": "PyDever commented on 18 Apr 2018\nwhenever I try using flash, which everything says should display a message, I get nothing.\n@app.route('/')\ndef home():\n      flash('hello')\nthe above does not work. i have been using Flask for a while but never used this feature.\nI checked stack exchange for answers already. Sorry to open an issue.", "issue_status": "Closed", "issue_reporting_time": "2018-04-18T16:48:08Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "404": {"issue_url": "https://github.com/pallets/flask/issues/2706", "issue_id": "#2706", "issue_summary": "Different app discovery behavior on commands run and shell", "issue_description": "Contributor\nrochacbruno commented on 18 Apr 2018\nThe commands run and shell are behaving differently to locate the app, I can send a PR but first I want to confirm if this is a problem or expected behavior.\nExpected Behavior\nAssuming the tree\n/topdir\n|____/appdir\n|_________/app.py \nthen\nexport FLASK_APP=app.py\ncd topdir\nIf you run\nflask run\nThe command can find the app in the subfolder and run successfully\nExpected the same to happen for shell\ncd topdir\nflask shell\n>>> \nActual Behavior\ncd topdir\nflask shell\n\n# in 0.12.2\nError: The file/path provided (app.py) does not appear to exist.  Please verify the path is correct.  If app is not on PYTHONPATH, ensure the extension is .py\n\n# n 0.13.dev\nError: Could not import \"app\".\"\nLooks like the run command is traversing the subfolders to locate an app while the shell command is not doing the same.\nand the same applies for the new routes on master\n$ cd topdir\n$ flask routes                                                          \nUsage: flask routes [OPTIONS]\n\nError: Could not import \"app\".\"\nEnvironment\nPython version: 3.6.0\nFlask version: 0.12.2 & 0.13.dev (master branch)\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-04-18T14:45:01Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "405": {"issue_url": "https://github.com/pallets/flask/issues/2705", "issue_id": "#2705", "issue_summary": "os.stat(path) TypeError: stat() argument 1 must be encoded string without null bytes, not str", "issue_description": "dhinar1991 commented on 17 Apr 2018 \u2022\nedited\nI am trying to read contents of files like .txt,.docx,.pdf and so on with textract and flask microframework. I am using POST method to get input file and send it to textract.\n@app.route('/upload', methods=['POST'])\n    def upload():\n        request_file = request.files['file']\n        r = request_file.read()\n        text = textract.process(r)\n        return (text)\nwhen i uploaded a docx file,\nFile \"/usr/lib/python2.7/genericpath.py\", line 26, in exists os.stat(path) TypeError: stat() argument 1 must be encoded string without null bytes, not str 10.0.2.2 -- [17/Apr/2018 03:56:58] \"POST /upload HTTP/1.1\" 500 -\nI don't want to save the file. All i need is to send the file into textract and process the file. I don't want to send the contents of the file. I want to send it as it is (.pdf). I haven't got any solution in stackoverflow too and I didn't find anything related to this error. Why does it show path error?\nEnvironment\nPython version: 2.7\nFlask version: 0.12.2\nWerkzeug version: 0.14\n1", "issue_status": "Closed", "issue_reporting_time": "2018-04-17T09:40:31Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "406": {"issue_url": "https://github.com/pallets/flask/issues/2704", "issue_id": "#2704", "issue_summary": "Cannot change default formatter", "issue_description": "achanda commented on 16 Apr 2018\nExpected Behavior\nI am trying to add an extra header to flask logs, code below. I expected that flask will log in the new format that I put in.\nfrom pomegranate.routes import app\nimport os\n\nfrom flask import request\nfrom flask.logging import Formatter, StreamHandler, DEBUG\n\nclass RequestFormatter(Formatter):\n    def format(self, record):\n        record.url = request.url\n        record.remote_addr = request.remote_addr\n        record.request_id = request.headers.get('X-Request-Id', '')\n        return super().format(record)\n\nformatter = RequestFormatter(\n    '[%(asctime)s] %(request_id)s %(remote_addr)s %(url)s\\n'\n    '%(levelname)s %(module)s: %(message)s'\n)\n\nstream_handler = StreamHandler()\nstream_handler.setLevel(DEBUG)\napp.logger.addHandler(stream_handler)\nfor handler in app.logger.handlers:\n    handler.setFormatter(formatter)\n\ndev = int(os.getenv('FLASK_DEBUG', 0))\n\nif __name__ == '__main__':\n    host = '0.0.0.0' if dev == 1 else '127.0.0.1'\n    app.run(host=host, port=8081, debug=True)\nActual Behavior\nFlask continues to use the default format.\nEnvironment\nPython version: Python 3.6.1 :: Continuum Analytics, Inc.\nFlask version: 0.12.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-04-16T09:45:59Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "407": {"issue_url": "https://github.com/pallets/flask/issues/2703", "issue_id": "#2703", "issue_summary": "Error: Failed to find application in module \"flaskr\". Are you sure it contains a Flask application? Maybe you wrapped it in a WSGI middleware or you are using a factory function.", "issue_description": "jxsoftyanlinyu commented on 16 Apr 2018\nclick (6.7)\nFlask (0.12.2)\nflaskr (1.0.0, f:\\python-flask\\flask\\examples\\tutorial)\nitsdangerous (0.24)\nJinja2 (2.10)\nMarkupSafe (1.0)\npip (9.0.1)\nsetuptools (28.8.0)\nWerkzeug (0.14.1)\n(venv) PS F:\\python-flask\\flask\\examples\\tutorial> flask run\nUsage: flask run [OPTIONS]\nError: Failed to find application in module \"flaskr\". Are you sure it contains a Flask application? Maybe you wrapped\nit in a WSGI middleware or you are using a factory function.\n(venv) PS F:\\python-flask\\flask\\examples\\tutorial>", "issue_status": "Closed", "issue_reporting_time": "2018-04-16T05:24:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "408": {"issue_url": "https://github.com/pallets/flask/issues/2702", "issue_id": "#2702", "issue_summary": "Ability to check if client connection is still open", "issue_description": "MaxNoe commented on 16 Apr 2018 \u2022\nedited\nFor things like server sent events, it would be really great to have an easy option to check if the client connection of a streamed request is still open.\nSomething like this:\nfrom flask import Flask, Response, client, stream_with_context\n\napp = Flask('sse')\n\n@app.route('/stream')\ndef sse():\n    def gen_sse():\n        with open('log.txt') as f:\n            while client.is_connected(): \n                lines = f.read()\n                if lines:\n                    yield build_sse(lines)\n                time.sleep(1)\n\n    return Response(\n        stream_with_context(gen_sse()),\n        mimetype='text/event-stream',\n    )\n\ndef build_sse(message, id_=None):\n    sse = ''\n    if id_ is not None:\n        sse += f'id: {id_}\\n'\n    sse += 'data: ' + '\\ndata:'.join(message.splitlines())\n    sse += '\\n\\n'\n    return sse\n2", "issue_status": "Closed", "issue_reporting_time": "2018-04-15T20:33:54Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "409": {"issue_url": "https://github.com/pallets/flask/issues/2701", "issue_id": "#2701", "issue_summary": "Flask Python Login w/LDAP Auth", "issue_description": "PythonNubie commented on 13 Apr 2018 \u2022\nedited by ThiefMaster\nHello world, I have Python/Flask application with a login screen. My goal is to utilize LDAP authentication in unison with my Python/Flask app. The issue that i am running into is this:\nRuntimeError: The session is unavailable because no secret key was set. Set the secret_key on the application to something unique and secret.\"\nI have a secret key and i still get the error same error when i comment it out.\nHere is my code:\nimport token\nfrom flask import Flask, session\nfrom flask.ext.sqlalchemy import SQLAlchemy\nfrom flask.ext.login import LoginManager\n\napp = Flask(__name__)\n#app.secret_key = 'welfhwdlhwdlfhwelfhwlehfwlehfelwehflwefwlehflwefhlwefhlewjfhwelfjhweflhweflhwel'\napp.config['SESSION_TYPE'] = 'filesystem'\napp.config['LDAP_AUTH_SERVER'] = 'LDAPLocation.com'\napp.config['LDAP_PORT'] = '636'\napp.config['LDAP_TOP_DN'] = 'CN=something here,OU=somethingHere,OU=SomeService Accounts,dc=magic,dc=pumpum,DC=com Xe'\napp.config['LDAP_BIND_USER_PASSWORD'] = 'pssword'\napp.register_blueprint(token, url_prefix='/auth')\n\n\ndb = SQLAlchemy(app)\n\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'login'\n\nfrom app.auth.views import auth\n\napp.register_blueprint(auth)\nThank you in advance....", "issue_status": "Closed", "issue_reporting_time": "2018-04-13T14:52:37Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "410": {"issue_url": "https://github.com/pallets/flask/issues/2700", "issue_id": "#2700", "issue_summary": "TypeError: is not JSON serializable", "issue_description": "santhoshdc1590 commented on 13 Apr 2018\nCan anyone help fix this issue?\nExpected Behavior\nI'm running cloud-function-python using flask.\nError is being pointed to a file called flask-handler.py\nCode of flask-handler.py link\nimport json\nimport sys\nfrom io import StringIO\n\nimport six\nfrom six.moves.urllib_parse import urlparse\nfrom werkzeug.datastructures import Headers\n\n# from .wsgi_util import wsgi\n\n\ndef handle_http_event(app):\n    req_json = json.loads(sys.stdin.read())\n    c = urlparse(req_json['url'])\n    path = c.path\n    if path == '':\n        path = '/'\n\n    body = StringIO(req_json.get('body', u''))\n\n    req_headers = req_json.get('headers', None)\n    h = Headers()\n    if req_headers is not None:\n        for key, value in six.iteritems(req_headers):\n            h.add(key, value)\n\n    with app.test_request_context(\n            path=path,\n            input_stream=body,\n            method=req_json.get('method', 'GET'),\n            headers=h,\n            query_string=c.query):\n        resp = app.full_dispatch_request()\n        body = resp.get_data()\n        try:\n            body = json.loads(body)\n        except:\n            pass\n\n        headers = {}\n        for header in resp.headers:\n            if header[0] in headers:\n                headers[header[0]] += ', ' + header[1]\n            else:\n                headers[header[0]] = header[1]\n\n        sys.stdout.write(json.dumps({\n            'body': body,\n            'status_code': resp.status_code,\n            'headers': headers,\n        }))\nActual Behavior\nI'm getting back this error\nline 50 this code resides\n        sys.stdout.write(json.dumps({\n            'body': body,\n            'status_code': resp.status_code,\n            'headers': headers,\n        }))\nI tried json.dump instead of json.dumps but still I'm getting the same error\nFailed to execute script function Traceback (most recent call last): \nFile \"function.py\", line 33, in <module> File \"site-packages/cloudfn/flask_handler.py\", \nline 50, in handle_http_event File \"json/__init__.py\", \nline 230, in dumps File \"json/encoder.py\", \nline 198, in encode File \"json/encoder.py\", \nline 256, in iterencode File \"json/encoder.py\", \nline 179, in default TypeError: b'{\\n \"json\": {\\n \"empID\": \"I123\", \\n \"image\": \"http://image\", \\n \"refID\": \"69\", \\n \"refTable\": \"123456\"\\n }, \\n \"message\": \"Hello world!\"\\n}\\n' is not JSON serializable\nI even raised an issue in cloud-function-python but still haven't received any response.\nEnvironment\nPython version: 3.5\nFlask version: 0.12.2\nflack-Cors: 3.0.3\nWerkzeug version: 0.12", "issue_status": "Closed", "issue_reporting_time": "2018-04-13T08:07:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "411": {"issue_url": "https://github.com/pallets/flask/issues/2698", "issue_id": "#2698", "issue_summary": "Flask logging issue with gunicorn", "issue_description": "amirgohar-AG commented on 12 Apr 2018 \u2022\nedited\nExpected Behavior\nExpecting to get Log messages other than ERROR level into gunicorn error.log file in order to persist my logs.\nLogging Configuration:\ngunicorn_logger = logging.getLogger('gunicorn.error')\napp.logger.handlers = gunicorn_logger.handlers\napp.logger.setLevel(gunicorn_logger.level)\n\nCommand to run Gunicorn:\ngunicorn --access-logfile \"access.log\" --error-logfile \"error.log\" --log-level info --worker-class gevent --workers=3 --timeout 60 --bind 0.0.0.0:8081 manage:app\nActual Behavior\nSometimes when an error message is logged it keeps on logging the same message for some time and then throws this error mentioned below. It doesn't happen all the time or on a certain log message but will occur randomly. App keeps working fine doesn't stop responding to the requests but adds too much noise in logs. If i use simple StreamHandler then it doesn't through any errors but the INFO or DEBUG messages or not written to Gunicorn error.log file as it doesn't capture stdout may be\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\nweb_1           | [2018-04-10 04:48:34,793] ERROR in api: AUTH_ERROR: cannot get Auth-Token for user 'amir@wanclouds.net'\n\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/gunicorn/http/wsgi.py\", line 70, in write\nweb_1           |     stream.write(data)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/werkzeug/local.py\", line 347, in __getattr__\nweb_1           |     return getattr(self._get_current_object(), name)\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/werkzeug/local.py\", line 306, in _get_current_object\nweb_1           |     return self.__local()\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/flask/logging.py\", line 37, in _proxy_stream\nweb_1           |     ctx = _request_ctx_stack.top\nweb_1           |   File \"/usr/local/lib/python2.7/site-packages/werkzeug/local.py\", line 166, in top\nweb_1           |     return self._local.stack[-1]\nweb_1           | RuntimeError: maximum recursion depth exceeded\nEnvironment\nPython version: 2.7\nFlask version: 0.12.2\nWerkzeug version: 0.12.2", "issue_status": "Closed", "issue_reporting_time": "2018-04-12T06:56:44Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "412": {"issue_url": "https://github.com/pallets/flask/issues/2696", "issue_id": "#2696", "issue_summary": "Tutorial: Use different names for top-level directory, subdirectory, and .py file rather than using \"flaskr\" for all three", "issue_description": "SamiSousa commented on 11 Apr 2018\nI found the tutorial rather confusing in how it gives the same name to three different things: the top-level directory of the project, the subdirectory containing all project-specific code (the package directory?), and the main .py script. In many spots in the tutorial, we set variables to the value \"flaskr\" (in setup.py and in environment variables) and we import from .flaskr as well. Maybe this is common practice in making flask applications or python apps in general, but I think for beginners it might help to rename some of these to make it clearer which \"flaskr\" is being referenced in setup.py, init.py, environment variables, etc. Thank you.", "issue_status": "Closed", "issue_reporting_time": "2018-04-11T02:56:03Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "413": {"issue_url": "https://github.com/pallets/flask/issues/2692", "issue_id": "#2692", "issue_summary": "Backport #2691 detect JSON encoding", "issue_description": "Member\ndavidism commented on 10 Apr 2018 \u2022\nedited\nBackport #2691 to 0.12.", "issue_status": "Closed", "issue_reporting_time": "2018-04-10T16:48:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "414": {"issue_url": "https://github.com/pallets/flask/issues/2690", "issue_id": "#2690", "issue_summary": "MAX_CONTENT_LENGTH is not respected", "issue_description": "yanglu0106 commented on 10 Apr 2018 \u2022\nedited\nWhen I send a large payload to the service, the flask config is not respecting the config and let the program continue to run.\nThis line is not hit ever: https://github.com/pallets/werkzeug/blob/6df9e5bdb9d216fcf2989ce051cd11b763cef4a0/werkzeug/formparser.py#L194\nExpected Behavior\nI am expecting to get 413 error in response.\nfrom flask import Flask, request, jsonify, abort\n\napp = Flask(__name__)\napp.config['MAX_CONTENT_LENGTH'] = 100\n\n...\n\n@app.route('/myendpoint', methods=['POST'])\n\n...\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=12345, debug=True)\nActual Behavior\nTell us what happens instead.\nPaste the full traceback if there was an exception.\nEnvironment\nPython version: Both python 2.7 and 3.6\nFlask version: 0.12.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-04-10T15:51:28Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "415": {"issue_url": "https://github.com/pallets/flask/issues/2689", "issue_id": "#2689", "issue_summary": "How to install this module in ironpython?", "issue_description": "Hemitr commented on 10 Apr 2018 \u2022\nedited\nExpected Behavior\nI want to use this module in ironpython which provided by Ansys Electronics Desktop as a script languange. So what should I do?", "issue_status": "Closed", "issue_reporting_time": "2018-04-10T09:11:16Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "416": {"issue_url": "https://github.com/pallets/flask/issues/2688", "issue_id": "#2688", "issue_summary": "PEP484 static typing support", "issue_description": "jdemilledt commented on 9 Apr 2018\nAre there any plans to add type stubs for PEP484-compliant static typing?\n6", "issue_status": "Closed", "issue_reporting_time": "2018-04-09T18:09:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "417": {"issue_url": "https://github.com/pallets/flask/issues/2687", "issue_id": "#2687", "issue_summary": "Suggest: support post json.dumps with unicode.", "issue_description": "ahuigo commented on 9 Apr 2018 \u2022\nedited\nI found that flask post not supports json.dumps with unicode.\nimport request as \nr.post('http://localhost/test', json={'bar':'\u7a0b\u5e8f\u5458'})\nSo I suggest that support unicode in vim modles.py +458:\nbody = complexjson.dumps(json, ensure_ascii=True)", "issue_status": "Closed", "issue_reporting_time": "2018-04-09T12:50:51Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "418": {"issue_url": "https://github.com/pallets/flask/issues/2683", "issue_id": "#2683", "issue_summary": "[New Feature] Flask init utility", "issue_description": "DefCon-007 commented on 7 Apr 2018\nEvery time we use flask there is some basic code we need to write and some directories we need to create. We can automate that particular cumbersome task by something like flask init which will let's say create an app.py file containing the basic imports statements, a basic hello world route, code to start the server on the default port, basic directories like a template, static etc.\nBasically something like Django's django-admin startproject .", "issue_status": "Closed", "issue_reporting_time": "2018-04-07T16:13:30Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "419": {"issue_url": "https://github.com/pallets/flask/issues/2681", "issue_id": "#2681", "issue_summary": "I want to send a json from the front end and update it to the postgresql DB with that data.", "issue_description": "passion044 commented on 5 Apr 2018\n//run.py\nfrom flask import Flask, render_template, jsonify, request\nfrom flask_cors import CORS\nfrom src.models.models import Memeber0\nfrom src.models.dbconn3 import db\napp = Flask(name)\nCORS(app)\n@app.route('/json_test', methods=['GET', 'POST'])\ndef json_test():\nif request.method == \"POST\":\nindex = jsonify(request.json.get('index'))\nagency = jsonify(request.json.get('agency'))\nname = jsonify(request.json.get('name'))\nfeature = jsonify(request.json.get('feature'))\ndepiction = jsonify(request.json.get('depiction'))\nMemeber0.query.filter(Memeber0.index == index).update(dict(\nagency=agency, name=name, feature=feature, depiction=depiction\n))\ndb.session.commit()\nreturn index\nI want to send a json from the front end and update it to the postgresql DB with that data.\nBut I did this, but I can not do it. What should I do?\nI would like you to give us a simple example.", "issue_status": "Closed", "issue_reporting_time": "2018-04-05T11:33:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "420": {"issue_url": "https://github.com/pallets/flask/issues/2680", "issue_id": "#2680", "issue_summary": "How to return also json and render_template in Flask?", "issue_description": "Villuck commented on 3 Apr 2018\nI've implemented a service in Python3 with Flask, to create the server. My service (MyService) take a query from the user and return a response, like a chatbot. So, i want to return both a text respons modifying the Html template, and a json containing response for using service as command line. At the moment my service only return a render template,how I can do?\nMy app:\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef main():\n    return render_template('index.html')\n\n@app.route(\"/result\", methods=['POST', 'GET'])\ndef result():\n   if request.method == 'POST':\n       query = request.form['query']\n       response = MyService.retrieve_response(query)\n       return render_template(\"index.html\", value=response)\n\nif __name__ == \"__main__\":\n    app.run()\nAnd my simple index.html:\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<body>\n\n<h2>Wellcome!/h2>\n\n<form action=\"http://localhost:5000/result\" method=\"POST\">\n  Make a question:<br>\n  <br>\n  <input type=\"text\" name=\"query\" id=\"query\">\n  <br><br>\n  <input type=\"submit\" value=\"submit\"/>\n</form>\n\n\n<br>\n<h3>Response is: </h3>\n<br>\n{{value}}\n</body>\n</html>", "issue_status": "Closed", "issue_reporting_time": "2018-04-03T13:36:56Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "421": {"issue_url": "https://github.com/pallets/flask/issues/2679", "issue_id": "#2679", "issue_summary": "Hooks in session_interface", "issue_description": "ak04nv commented on 3 Apr 2018\nHI there!\nI'm trying to get session data from table in my custom session interface in Flask and I'm getting the error Connection already open. This exception appears because connection opens automatically when I get a session data from open_session method in session interface. And after that Flask runs hooks before_request where the method to connect to database was registered.\nimport peewee as pw\n\nfrom flask import Flask, jsonify\nfrom flask.sessions import SessionInterface, SessionMixin\nfrom werkzeug.datastructures import CallbackDict\n\nfrom playhouse.flask_utils import FlaskDB\nfrom playhouse.sqlite_ext import JSONField\n\nfrom datetime import datetime\n\n\napp = Flask(__name__)\ndb = FlaskDB(app, 'sqlite:///test_db.sqlite')\n\n\nclass Session(CallbackDict, SessionMixin):\n\n    def __init__(self, store={}):\n        def on_update(self):\n            self.modified = True\n\n        self._store = store\n        self.modified = False\n\n        CallbackDict.__init__(self, store.get('data', {}), on_update)\n\n    @classmethod\n    def find(cls, sid):\n        try:\n            store = SessionStore.get(sid=sid)\n        except SessionStore.DoesNotExist:\n            store = {}\n        return cls(store)\n\n    def save(self):\n        if hasattr(self._store, 'data') and self.modified:\n            self._store.data = self\n        self._store.save()\n\n\nclass MySI(SessionInterface):\n    null_session_class = Session\n\n    def open_session(self, app, request):\n        sid = request.cookies.get('sid')\n        # This is a point where request object already exists\n        # but hooks before_request are not called\n        return Session.find(sid) if sid else None\n\n    def save_session(self, app, session, response):\n        if session.modified:\n            session.save()\n\n\nclass SessionStore(db.Model):\n    sid = pw.CharField(primary_key=True)\n    data = JSONField()\n    expired = pw.DateTimeField(default=datetime.now)\n\n    class Meta:\n        table_name = 'sessions'\n\n\napp.session_interface = MySI()\n\n@app.route('/')\ndef main():\n    return jsonify(ok=1)\n\nif __name__ == '__main__':\n    if not SessionStore.table_exists():\n        SessionStore.create_table()\n    app.run(debug=True)\nTraceback:\n127.0.0.1 - - [03/Apr/2018 11:42:35] \"GET / HTTP/1.1\" 500 -\nTraceback (most recent call last):\n  File \"/home/ak04nv/.virtualenvs/web-app-boilerplate/lib/python3.6/site-packages/flask/app.py\", line 1997, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/home/ak04nv/.virtualenvs/web-app-boilerplate/lib/python3.6/site-packages/flask/app.py\", line 1985, in wsgi_app\n    response = self.handle_exception(e)\n  File \"/home/ak04nv/.virtualenvs/web-app-boilerplate/lib/python3.6/site-packages/flask/app.py\", line 1540, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/home/ak04nv/.virtualenvs/web-app-boilerplate/lib/python3.6/site-packages/flask/_compat.py\", line 33, in reraise\n    raise value\n  File \"/home/ak04nv/.virtualenvs/web-app-boilerplate/lib/python3.6/site-packages/flask/app.py\", line 1982, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/home/ak04nv/.virtualenvs/web-app-boilerplate/lib/python3.6/site-packages/flask/app.py\", line 1614, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"/home/ak04nv/.virtualenvs/web-app-boilerplate/lib/python3.6/site-packages/flask/app.py\", line 1517, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/home/ak04nv/.virtualenvs/web-app-boilerplate/lib/python3.6/site-packages/flask/_compat.py\", line 33, in reraise\n    raise value\n  File \"/home/ak04nv/.virtualenvs/web-app-boilerplate/lib/python3.6/site-packages/flask/app.py\", line 1610, in full_dispatch_request\n    rv = self.preprocess_request()\n  File \"/home/ak04nv/.virtualenvs/web-app-boilerplate/lib/python3.6/site-packages/flask/app.py\", line 1831, in preprocess_request\n    rv = func()\n  File \"/home/ak04nv/.virtualenvs/web-app-boilerplate/lib/python3.6/site-packages/playhouse/flask_utils.py\", line 174, in connect_db\n    self.database.connect()\n  File \"/home/ak04nv/.virtualenvs/web-app-boilerplate/lib/python3.6/site-packages/peewee.py\", line 2463, in connect\n    raise OperationalError('Connection already opened.')\npeewee.OperationalError: Connection already opened.\n$ pip install flask peewee\n$ python test.py &\n$ curl -b sid=123 localhost:5000\nPython: 3.6.4\nFlask: 0.12.2\nWerkzeug: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-04-03T03:52:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "422": {"issue_url": "https://github.com/pallets/flask/issues/2678", "issue_id": "#2678", "issue_summary": "Incorrect endpoint name in fileuploads doc", "issue_description": "MayankVachher commented on 3 Apr 2018 \u2022\nedited by ThiefMaster\nExpected Behavior\nhttp://flask.pocoo.org/docs/0.12/patterns/fileuploads/ should have the following code snippet:\n            return redirect(url_for('upload_file',\n                                    filename=filename))\nActual Behavior\nThe doc instead has:\n            return redirect(url_for('uploaded_file',\n                                    filename=filename))\nIt's a quick fix. Just need to rename url_for('uploaded_file', to url_for('upload_file',\nEnvironment\nPython version: Any\nFlask version: 0.12\nWerkzeug version: Any", "issue_status": "Closed", "issue_reporting_time": "2018-04-02T22:46:56Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "423": {"issue_url": "https://github.com/pallets/flask/issues/2677", "issue_id": "#2677", "issue_summary": "AssertionError on app.test_client().session_transaction()", "issue_description": "ghost commented on 1 Apr 2018\nExpected Behavior\nTesting with pytest and using the context manager app.test_client().session_transaction()\nto set the session configuration.\n@pytest.fixture()\ndef client():\n    app.config['TESTING'] = True\n\n    app.secret_key = 'test_views'\n    with app.test_client() as client:\n        yield client\n\ndef test_phase1(client, mocker):\n    with client.session_transaction() as session:\n        session['logged_in'] = True\n        response = client.get('/phase1')\n        print(response)\nActual Behavior\n    def do_teardown_request(self, exc=_sentinel):\n        \"\"\"Called after the actual request dispatching and will\n            call every as :meth:`teardown_request` decorated function.  This is\n            not actually called by the :class:`Flask` object itself but is always\n            triggered when the request context is popped.  That way we have a\n            tighter control over certain resources under testing environments.\n    \n            .. versionchanged:: 0.9\n               Added the `exc` argument.  Previously this was always using the\n               current exception information.\n            \"\"\"\n        if exc is _sentinel:\n            exc = sys.exc_info()[1]\n        funcs = reversed(self.teardown_request_funcs.get(None, ()))\n>       bp = _request_ctx_stack.top.request.blueprint\nE           AssertionError: Popped wrong request context.  (None instead of <RequestContext 'http://localhost/' [GET])\n\n\nDuring handling of the above exception, another exception occurred:\n\n    def pop(self, exc=_sentinel):\n        \"\"\"Pops the request context and unbinds it by doing that.  This will\n            also trigger the execution of functions registered by the\n            :meth:`~flask.Flask.teardown_request` decorator.\n    \n            .. versionchanged:: 0.9\n               Added the `exc` argument.\n            \"\"\"\n        app_ctx = self._implicit_app_ctx_stack.pop()\n    \n        try:\n            clear_request = False\n            if not self._implicit_app_ctx_stack:\n                self.preserved = False\n                self._preserved_exc = None\n                if exc is _sentinel:\n                    exc = sys.exc_info()[1]\n                self.app.do_teardown_request(exc)\n    \n                # If this interpreter supports clearing the exception information\n                # we do that now.  This will only go into effect on Python 2.x,\n                # on 3.x it disappears automatically at the end of the exception\n                # stack.\n                if hasattr(sys, 'exc_clear'):\n                    sys.exc_clear()\n    \n                request_close = getattr(self.request, 'close', None)\n                if request_close is not None:\n                    request_close()\n                clear_request = True\n        finally:\n            rv = _request_ctx_stack.pop()\n    \n            # get rid of circular dependencies at the end of the request\n            # so that we don't require the GC to be active.\n            if clear_request:\n                rv.request.environ['werkzeug.request'] = None\n    \n            # Get rid of the app as well if necessary.\n            if app_ctx is not None:\n                app_ctx.pop(exc)\n    \n            assert rv is self, 'Popped wrong request context.  ' \\\n>               '(%r instead of %r)' % (rv, self)\nE          AssertionError: Popped wrong request context.  (None instead of <RequestContext 'http://localhost/' [GET])\ntried with with app.config['PRESERVE_CONTEXT_ON_EXCEPTION'] = False but it doesn't work\nEnvironment\nPython version: 3.5.3\nFlask version: 0.12.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-04-01T12:49:56Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "424": {"issue_url": "https://github.com/pallets/flask/issues/2675", "issue_id": "#2675", "issue_summary": "Allow wsgi files to specify the application instance in FLASK_APP", "issue_description": "Contributor\nwgwz commented on 29 Mar 2018\nI'm wondering if we can be slightly more permissive in the type of file we can use to specify the application instance. .wsgi seems to be a paradigm that it might sense to include. Look forward to hearing back on this!\nExpected Behavior\nexport FLASK_APP=/path/to/app.wsgi\nflask shell\n>>> working terminal yay! (i can import the sqla db object and do stuff)\nActual Behavior\nexport FLASK_APP=/path/to/app.wsgi\nflask shell\nTraceback (most recent call last):\n ...\n ...\nflask.cli.NoAppException: The file provided (/path/to/python.wsgi) does exist but is not a valid Python file.  This means that it cannot be used as application.  Please change the extension to .py\nEnvironment\nPython version: Python 3.5.2\nFlask version: Flask==0.12.2\nWerkzeug version: Werkzeug==0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-03-28T20:24:17Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "425": {"issue_url": "https://github.com/pallets/flask/issues/2674", "issue_id": "#2674", "issue_summary": "Multiple Blueprints mounted at same url_prefix (keyword argument to app#register_blueprint)", "issue_description": "alexanderankin commented on 29 Mar 2018 \u2022\nedited by davidism\nExpected Behavior\nI have mounted multiple blueprints for serving static files at the same base url, as I use this pattern when developing with other web frameworks (though I am unfamiliar with the limitations of python web programming). Perhaps this is the incorrect suggested mechanism for accomplishing this with Flask?\napp.register_blueprint(Blueprint('mybp', __name__, static_folder='static', static_url_path=''), url_prefix='/a')\napp.register_blueprint(Blueprint('mybp1', __name__, static_folder='static_', static_url_path=''), url_prefix='/a')\nActual Behavior\nThe files in static where accessible and the ones in static_ were not. The behavior was silent, there was no traceback.\nEnvironment\nPython version: 2.7.12\nFlask version: 0.12.2\nWerkzeug version: 0.14.1\nthanks so much, y'all! I'm just trying to figure out how to make an abstraction for my many folders to be accessible from a single route that serves static files.", "issue_status": "Closed", "issue_reporting_time": "2018-03-28T18:37:01Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "426": {"issue_url": "https://github.com/pallets/flask/issues/2673", "issue_id": "#2673", "issue_summary": "teardown_request can't remove session's attribute", "issue_description": "MrLiupython commented on 27 Mar 2018 \u2022\nedited\nI use before_request to set session's attribute,and use teardown_request to remove it.But only first request don't have session's attribute in before_request,other requests all decide request have session's attribute in before_request.Why?\nSample code:\nfrom flask import Flask,session app = Flask(__name__) app.secret_key='sdf' @app.route('/') def index(): return \"\"\"sessoin: {}\"\"\".format(session['hello']) @app.before_request def before(): if not session.get('hello'): session['hello'] = 'Hello!' print('before: add hello') else: print('beforeL: have',session['hello']) @app.teardown_request def teardown(exception): if session.get('hello'): session.pop('hello') print('teardown: delete hello') try: print(session['hello']) except: print('teardown: no have')\nOutput:\n`* Serving Flask app \"app\"\nRunning on http://127.0.0.1:5000/ (Press CTRL+C to quit)\nbefore: add hello\nteardown: delete hello\nteardown: no have\n127.0.0.1 - - [27/Mar/2018 18:17:35] \"GET / HTTP/1.1\" 200 -\nbeforeL: have Hello!\nteardown: delete hello\nteardown: no have\n127.0.0.1 - - [27/Mar/2018 18:17:35] \"GET /favicon.ico HTTP/1.1\" 404 -\nbeforeL: have Hello!\nteardown: delete hello\nteardown: no have\n127.0.0.1 - - [27/Mar/2018 18:17:35] \"GET /favicon.ico HTTP/1.1\" 404 -\nbeforeL: have Hello!\nteardown: delete hello\nteardown: no have\n127.0.0.1 - - [27/Mar/2018 18:17:43] \"GET / HTTP/1.1\" 200 -\nbeforeL: have Hello!\nteardown: delete hello\nteardown: no have\n127.0.0.1 - - [27/Mar/2018 18:17:46] \"GET / HTTP/1.1\" 200 -\nbeforeL: have Hello!\nteardown: delete hello\nteardown: no have\n127.0.0.1 - - [27/Mar/2018 18:17:47] \"GET / HTTP/1.1\" 200 -\nbeforeL: have Hello!\nteardown: delete hello\nteardown: no have\n127.0.0.1 - - [27/Mar/2018 18:17:50] \"GET / HTTP/1.1\" 200 -`\nPython version: 3.6.3\nFlask version: 0.12.2\nWerkzeug version: 0.12.2", "issue_status": "Closed", "issue_reporting_time": "2018-03-27T10:22:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "427": {"issue_url": "https://github.com/pallets/flask/issues/2671", "issue_id": "#2671", "issue_summary": "HTML output is missing the last few lines.", "issue_description": "wilphan commented on 23 Mar 2018\nThis issue tracker is a tool to address bugs in Flask itself.\nPlease use the #pocoo IRC channel on freenode or Stack Overflow for general\nquestions about using Flask or issues not related to Flask.\nIf you'd like to report a bug in Flask, fill out the template below. Provide\nany any extra information that may be useful / related to your problem.\nIdeally, create an MCVE, which helps us\nunderstand the problem and helps check that it is not caused by something in\nyour code.\nExpected Behavior\nThe client browser should see all the HTML code, but it's missing the last few lines.\nI'm running CGI on Apache 2.4.29 on Windows 10. The problem occurs in other browers on Windows and Macs. The problem does not happen on RHEL 7, or when using the webserver built into Flask. The output is small, about one screenful. I tried stripping almost all the HTML and code out of the template to a bare minimum but the results were the same. Sending HTML directly from the Python script (without using the template) has the same results. There are also no problems when I remove Flask and just have a simple Python script over CGI.\ntest.py:\n#!c:/usr/lib/python2.7/python.exe\nfrom cgi import escape\nfrom flask import Flask, render_template\nimport os, sys\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return render_template('layout.html', title='Test ', user='username',\n     hostnames=['host1','host2','host3','host4'])\ntemplates/layout.html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>{{title}}</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{{url_for('static', filename='styles.css')}}\">\n</head>\n\n<body>\n<div id=\"main\">\n\n    <p> Hello <b>{{user}}</b>, welcome.\n    </p>\n\n\n    <form action=\"/rss/\" method=\"post\">\n    <table id=\"main\">\n <tr>\n     <th id=\"main\">Host(s)</th>\n </tr>\n <tr>\n     <td id=\"main\">\n  {% for hostname in hostnames %}\n      <label><input type=\"checkbox\" name=\"hostnames\" value=\"{{hostname}}\">{{hostname}}</label>\n      {% endfor %}\n     </td>\n </tr>\n    </table>\n    <br>\n    <br>\n    <input type=\"submit\" value=\"submit\" name=\"submit\">\n    </form>\n</div>\n\n</body>\n</html>\ntest.cgi\n#!c:/usr/lib/python2.7/python.exe\nfrom wsgiref.handlers import CGIHandler\nfrom test import app\n\nCGIHandler().run(app)\nEnvironment\nPython version: 2.7.13\nFlask version: 0.12.2\nWerkzeug version: 0.12.2", "issue_status": "Closed", "issue_reporting_time": "2018-03-23T18:04:16Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "428": {"issue_url": "https://github.com/pallets/flask/issues/2670", "issue_id": "#2670", "issue_summary": "TypeError: 'ScriptInfo' object is not iterable", "issue_description": "anselal commented on 23 Mar 2018\nExpected Behavior\nThe template should render without any error.\nWhen I run the app using python manage.py run I get an error when I open the app in the browser.\nBut when I start the app using gunicorn like gunicorn -b 0.0.0.0:5000 --access-logfile - \"project.app:create_app()\" the error does not occur.\napp.py\ndef create_app(settings_override=None):\n    \"\"\"\n    Create a Flask application using the app factory pattern.\n\n    :return: Flask app\n    \"\"\"\n    app = Flask(__name__, instance_relative_config=True)\n    app.config.from_object('config.settings')\n    app.config.from_pyfile('settings.py', silent=True)\n    \n    app.register_blueprint(antminer)\n    app.register_blueprint(antminer_json)\n    extensions(app)\n\n    if settings_override:\n       app.config.update(settings_override)\n\n    @app.shell_context_processor\n    def make_shell_context():\n        return dict(app=app, db=db)\n\n    \n    return app\nmanage.py\nfrom flask.cli import FlaskGroup\nfrom project.app import create_app\n\ncli = FlaskGroup(create_app=create_app)\n\n@cli.command()\ndef create_db():\n    pass\n\n@cli.command()\ndef update_db():\n    pass\n\nif __name__ == \"__main__\":\n    cli()\nActual Behavior\nTraceback (most recent call last):\n  File \"/home/pi/Projects/project/project/app.py\", line 60, in create_app\n    app.config.update(settings_override)\nTypeError: 'ScriptInfo' object is not iterable\nEnvironment\nPython version: 2.7.9\nFlask version: 0.12.2\nWerkzeug version: 0.12.2", "issue_status": "Closed", "issue_reporting_time": "2018-03-23T01:57:37Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "429": {"issue_url": "https://github.com/pallets/flask/issues/2669", "issue_id": "#2669", "issue_summary": "import error when running flask via apache", "issue_description": "gborrageiro commented on 22 Mar 2018 \u2022\nedited by ThiefMaster\nhello,\nI've spent the best part of a week trying to get flask working with Apache, without success.\nI am running\nRedhat Linux lonrs12363 3.10.0-327.10.1.el7.x86_64\nconda version : 4.5.0\nconda-build version : 3.7.1\npython version : 3.6.4.final.0\nmod_wsgi-py36.cpython-36m-x86_64-linux-gnu.so\nApache/2.4.6 (Red Hat Enterprise Linux) mod_fcgid/2.3.9 PHP/5.4.16 mod_wsgi/3.4 Python/2.7.5\nNow my Anaconda uses Python 3.6.4, and Red Hat's Apache appears to use Python 2.7.5.\nNot sure how big a problem this is, but there are no Python 3 packages available via yum in the standard repo.\nhttpd.conf is configured as follows (with some details obfuscated):\nLoadModule wsgi_module /pathto/anaconda3/lib/myProject3.6/site-packages/mod_wsgi/server/mod_wsgi-py36.cmyProject-36m-x86_64-linux-gnu.so\nWSGISocketPrefix /var/run/wsgi\nWSGImyProjectPath /pathto/anaconda3/lib/myProject3.6/site-packages:/pathto/myProject/code\n\n<VirtualHost *>\n    ServerName www.namechanged.com\n\n    WSGIDaemonProcess foo myProject-path=/pathto/anaconda3/lib/myProject3.6/site-packages:/pathto/myProject/code user=user group=user threads=5\n    WSGIProcessGroup %{GLOBAL}\n    WSGIApplicationGroup %{GLOBAL}\n    WSGIScriptAlias /foo /home/user/www/wsgi-scripts/foo.wsgi process-group=foo application-group=%{GLOBAL}\n\n    <Directory /home/user/www/wsgi-scripts>\n        WSGIProcessGroup foo\n        WSGIApplicationGroup %{GLOBAL}\n        Require all granted\n    </Directory>\n</VirtualHost>\nmy .wsgi file looks like:\n#!pathto/anaconda3/bin/python\nimport sys\nimport site\n\nif sys.platform == 'win32':\n    ALLDIRS = ['python-path=C:\\\\dev\\\\apps\\\\Anaconda3\\\\Lib\\\\site-packages']\nelse:\n    ALLDIRS = []\n    ALLDIRS.append('pathto/myProject/code')\n    ALLDIRS.append('pathto/anaconda3/lib/python36.zip')\n    ALLDIRS.append('pathto/anaconda3/lib/python3.6')\n    ALLDIRS.append('pathto/anaconda3/lib/python3.6/lib-dynload')\n    ALLDIRS.append('pathto/anaconda3/lib/python3.6/site-packages')\n\n# Remember original sys.path.\nprev_sys_path = list(sys.path)\n\n# Add each new site-packages directory.\nfor directory in ALLDIRS:\n    site.addsitedir(directory)\n\n# Reorder sys.path so new directories at the front.\nnew_sys_path = []\nfor item in list(sys.path):\n    if item not in prev_sys_path:\n        new_sys_path.append(item)\n    sys.path.remove(item)\n\nsys.path[:0] = new_sys_path\nprint(sys.path)\n\nfrom analytics.signal import app as application\nWhen I try access the web page made available by Apache, I get import errors of the form:\nimport numpy as np\nImportError: No module named numpy\nWhen I run a standard Flask server, everything works perfectly fine.\nhelp!\nthank you.", "issue_status": "Closed", "issue_reporting_time": "2018-03-22T16:42:02Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "430": {"issue_url": "https://github.com/pallets/flask/issues/2667", "issue_id": "#2667", "issue_summary": "keep-alive by default", "issue_description": "ghost commented on 21 Mar 2018\ni want to keep-alive requests with flask apps, but actually, i send some requests in a tcp stream, it closed http connection,not tcp connection soon. so i want to know flask keep-alive time ,(like nginx keep-alive time can config by myself, only in conf writes like : keep-alive: 300s). is by default?", "issue_status": "Closed", "issue_reporting_time": "2018-03-21T09:48:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "431": {"issue_url": "https://github.com/pallets/flask/issues/2666", "issue_id": "#2666", "issue_summary": "Backport #2359 fix for import warning when using reloader", "issue_description": "Member\ndavidism commented on 19 Mar 2018\nPyCharm has added support for running using python -m as an alternative to script paths. Backport #2359 so users who remain on 0.12 don't see this confusing warning.", "issue_status": "Closed", "issue_reporting_time": "2018-03-19T18:01:01Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "432": {"issue_url": "https://github.com/pallets/flask/issues/2664", "issue_id": "#2664", "issue_summary": "Option to change blueprints' templates precedence", "issue_description": "wonkydonky commented on 19 Mar 2018\nWhen I create a new blueprint, the template_folder is added to a Flask defined path, and the precedence to locate a template is\napp/templates/ first\napp/my-blueprint/templates/ second\nI understand this makes sense from the point of view of a developer who's trying to reuse the same blueprints on many different projects. He can plug in an existing blueprint and replace the templates from the main app if needed.\nThere is a different use case however, where this behavior is unwanted and problematic. That is, when I'm structuring my applications into independent \"modules\" such that different teams can work independently on their own model/blueprint. The biggest problems is, that blueprints hits templates outside their domain, that is templates defied somewhere else in another blueprint folder. With large projects, this becomes a pretty difficult model to reason on and debug, and the blueprints are too much coupled to one another. Secondly, in this development context I would prefer a blueprint to have precedence over the base templates.\nIdeally, I think Flask should have an option to change the precedence of templates. For example use the current behavior by default, but introduce a new config option \"blueprints_templates_first=True/False\" to be defined somewhere (either at the app level, or for every single blueprint). The expected behavior would be the opposite of the default behavior:\nlook in app/my-blueprint/templates/ first\nlook in app/templates/ second\ndo not look into other blueprints folders\nI've seen other people come up with the same issue over the years, and I don't understand why there is so much resistance against supporting this feature. There is a real use case for this. I've always appreciated Flask because it's minimalist, concise, powerful, and doesn't get in the way I choose to structure my project. Opposing this option just seems to me as going against the nature of Flask itself, because the framework is dictating to me how I have to structure my files on disk, something that only bigger frameworks do and that Flask has proudly never done. Every workaround to this, such as adding a new inner folder my-blueprint/templates/my-blueprint/, just feels like a hack that goes against the ideas of simplicity and clarity.\nI, and I believe a lot of other Flask users as well, would really appreciate if you guys could add this configuration option to Flask. Thanks.", "issue_status": "Closed", "issue_reporting_time": "2018-03-19T08:49:41Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "433": {"issue_url": "https://github.com/pallets/flask/issues/2661", "issue_id": "#2661", "issue_summary": "`flask run` provides no way to have a port configured by default", "issue_description": "antialiasis commented on 17 Mar 2018\nI have a number of sites that I may be working on simultaneously, and to facilitate this I've arbitrarily designated a particular port that I run each site on in development, rather than running on the default port. I used to do this by having each project specify a hardcoded port when it called app.run:\napp.run(debug=True, port=8050)\nWith Flask 0.12, the recommended way to run Flask is using the flask run command, which seems like a good change overall. In each application's virtualenv setup, I can set the FLASK_APP and FLASK_DEBUG environment variables so that I don't have to set them manually every time I start up the development server. However, there is no environment variable or anything of the sort to set the port, so every time I run an application, I still need to manually specify the appropriate port each time - flask run --port 8050 instead of just flask run.\nIn #2113 joelhed wanted to use the port in the SERVER_NAME config variable, and the issue was closed on the basis that it's technically infeasible to load app config before starting up the server, which makes sense. However, a FLASK_PORT environment variable would presumably not have this problem, and it would reduce friction significantly both for people like me and joelhed (and anyone else who for any reason can't run all their Flask applications on port 5000). Is there any chance for this to be added? I can make a pull request for this if necessary.\n3\n1", "issue_status": "Closed", "issue_reporting_time": "2018-03-17T17:19:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "434": {"issue_url": "https://github.com/pallets/flask/issues/2660", "issue_id": "#2660", "issue_summary": "blueprint_register with two different controller with subdomain but url_for use first problem", "issue_description": "broject commented on 16 Mar 2018 \u2022\nedited\nfrom app.controllers.dashboard.admin import dashboard1\nfrom app.controllers.dashboard.supply import dashboard2\napp.register_blueprint(dashboard1, subdomain='admin')\napp.register_blueprint(dashboard2, subdomain='supply')\nbut\n@dashboard2.route('/')\ndef index():\nreturn url_for('company.index')\nis always appear that \"http://admin.domain.com:5000/company\"", "issue_status": "Closed", "issue_reporting_time": "2018-03-16T08:59:52Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "435": {"issue_url": "https://github.com/pallets/flask/issues/2659", "issue_id": "#2659", "issue_summary": "Flask test_client retaining lock on files, preventing os.remove() on Windows", "issue_description": "andymantell commented on 15 Mar 2018 \u2022\nedited\nExpected Behavior\nGiven the barest possible flask app (See this repo for full example: https://github.com/andymantell/flask-test-client-sendfile-lock)\nfrom flask import Flask\n\n\napp = Flask(__name__)\n\nif __name__ == \"__main__\":\n    app.run()\nAnd the following test script:\nimport os\nfrom app import app\n\n\ntest_client = app.test_client()\n\nfilename = 'static/test.txt'\nwith open(filename, 'w+') as file:\n    file.write('Hello')\n\nresponse = test_client.get('/static/test.txt')\n\nresponse_data = response.data.decode('utf-8')\nassert response_data == 'Hello'\n\nos.remove(filename)  # This throws an exception on windows, claiming that the file is busy\nI would expect that the file /static/test.txt will be created, requested from the test_client, and then removed again. And indeed this is what happens on Linux.\nActual Behavior\nOn Windows, the os.remove line throws an exception saying that the file is busy. It appears as if something inside the test client is locking the file.\nIf I switch to requests.get and fetch /static/test.txt over http instead of through the test client, the error does not occur, the file is not locked, and Windows successfully deletes the file.\n(env) C:\\projects\\flask-test-client-sendfile-lock-master>python test.py\nTraceback (most recent call last):\n  File \"test.py\", line 15, in <module>\n    os.remove(filename)  # This throws an exception on windows, claiming\n that the file is busy\nPermissionError: [WinError 32] The process cannot access the file because it is\nbeing used by another process: 'static/test.txt'\nEnvironment\nWindows 7\nPython version: 3.4\nFlask version: 0.12\nWerkzeug version: 0.7", "issue_status": "Closed", "issue_reporting_time": "2018-03-15T11:12:32Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "436": {"issue_url": "https://github.com/pallets/flask/issues/2658", "issue_id": "#2658", "issue_summary": "Why flask do not have a cookie object as request object?", "issue_description": "Andru1999 commented on 14 Mar 2018\nNow, work with cookies, we need to create a response object and then run it through all functions, but I suggest adding a global cookie object that allows you reading and setting cookies as request object.", "issue_status": "Closed", "issue_reporting_time": "2018-03-14T14:21:06Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "437": {"issue_url": "https://github.com/pallets/flask/issues/2657", "issue_id": "#2657", "issue_summary": "Reloader different behavior Windows vs Linux", "issue_description": "jgyates commented on 11 Mar 2018\nI have a simple flask app that I want to restart if the server port is changed in a config file. I have the following code:\n#!/usr/bin/env python\n\nfrom flask import Flask, redirect\nimport os\nimport configparser\n\nconfig = configparser.ConfigParser()\nconfig.read('portnumber.ini')\n\napp = Flask(__name__,static_url_path='')\n\nHTTPPort = config['MAIN'].getint('portnumber')\n\n\ndef touchMe():\n    with open(__file__, 'a'):\n        print(\" - setting timestamp of \" + __file__ )\n        os.utime(__file__, None)\n\n@app.route(\"/newport/<newport>\")\ndef changeRoute(newport):\n    HTTPPort = newport\n    name = newport\n    config['MAIN']['portnumber'] = newport\n    with open('portnumber.ini', 'w') as configfile:\n        config.write(configfile)\n    touchMe()\n    newurl = \"http://192.168.11.15:\" + HTTPPort + \"/\"\n    print(\"Redirecting to \" + newurl)\n\n    return redirect(newurl, code=302)\n\n\n#------------------------------------------------------------\nif __name__ == \"__main__\":\n\n    # load options from file, which change HTTPPort value\n    # LoadConfig()\n    while True:\n        app.run(host=\"0.0.0.0\", port=HTTPPort, debug=True, use_reloader=True)\nThe this code works as expected on Windows 10, however the port fails to change on Linux (or ssl_context also does not change if used). I am running Raspbian Jessie. I have also tried disabling the reloader and replacing the python process with the following call:\nos.execl(sys.executable, 'python', __file__, *sys.argv[1:])\nThis works on Windows, however on Linux, app.run() fails on reload with \"\"Address already in use\"\" error. I have reviewed the documentation and past issues however I have not found anything specific to these symptoms.\nI have found that, on Linux, if I use and external script to kill the python script (pkill) and reload the script it works about half of the time. When it fails it is due the \"Address already in use\" error.\nI have also tried this with Watchdog and I get the same results on Linux. I have duplicated this with python 2.7.9 and 3.6.4. I am using Flask 0.12.2\nIs this a known issue and if so are there any workarounds? Is there another way to pragmatically change the port and ssl_context of a running Flask app on Linux?\nEnvironment\nWindows 10 and Raspbian Jessie\nPython version: 2.7.9 and 3.6.4\nFlask version: 0.12.2\nWerkzeug version: 0.12.2", "issue_status": "Closed", "issue_reporting_time": "2018-03-11T12:49:46Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "438": {"issue_url": "https://github.com/pallets/flask/issues/2656", "issue_id": "#2656", "issue_summary": "Documentation is wrong at https://www.palletsprojects.com/p/flask/", "issue_description": "ghost commented on 11 Mar 2018\nExpected Behavior\nTaken directly from https://www.palletsprojects.com/p/flask/\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello World!\"\n\nif __name__ == \"__main__\":\n    app.run()  # claim is that argument port=some_port is not needed\nActual Behavior\nNothing happens. Script executes, but flask web server never starts.\nSeems like\n...this is required\napp.run(port=5000)\nEnvironment\nPython version: 3.6.4\nFlask version: 0.12.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-03-11T06:26:01Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "439": {"issue_url": "https://github.com/pallets/flask/issues/2655", "issue_id": "#2655", "issue_summary": "CSRF session Token is missing(400 Bad Request)", "issue_description": "guruganesh26 commented on 9 Mar 2018\nIn our Flask web application we are facing 'CSRF Session Token is missing' only when morning first request. we have used the default session, csrf configuration not changed anything. cookie secret key only given.\nWe are using Nginx as our load balancer. We debugged the problem, For our HTML page Rquest cookies don't send 'session cookie', So we are Receiving session cookie in 'Response Cookies'\nThe logic here used is if we not send session cookie, server returns session cookie in response as per our understanding.\nSo can anyone help why there is session cookie not received in response for first time of a day in a HTML page or is that cookie expired and due to that we are facing this problem?(Note: we are not using any cookie expiration time using default value)\nEnvironment\nPython version: 2.7.3\nFlask version:0.12\nWerkzeug version:0.11.15", "issue_status": "Closed", "issue_reporting_time": "2018-03-09T06:46:29Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "440": {"issue_url": "https://github.com/pallets/flask/issues/2654", "issue_id": "#2654", "issue_summary": "Use of multiprocessing in before_first_request causes first request to hang, subsequent requests succeed, only under uwsgi, not standalone", "issue_description": "dlparker commented on 8 Mar 2018 \u2022\nedited\nEnvironment\nPython version: 3.6.3\nFlask version: 0.12.2\nWerkzeug version: 0.14.1\nUWSGI version: 2.0.17\nHost: Raspberry Pi 3 running Raspbian stretch\nNginx version: 1.10.3\nIf a function starts a subprocess and uses queues to coordinate with it, and the function is run from @app.before_first_request, the first request hangs. This only happens under uwsgi, and only the first request hangs, everything is fine after that.\nI can work around this problem by starting the subprocess from a separate thread. I can also work around the process by having the subprocess exit quickly instead of hanging around waiting for more work.\nSince it works under Werkzeug, I realize that it may be a UWSGI bug, but I don't know how to diagnose it further.\nBelow is example code that does it. This was run on a Raspberry Pi (3) on stretch.\nNote that, using the more complex real code, which also uses Flask JSON RPC, attempting to browse the API with chrome timed out after a minute and reported ERR_INCOMPLETE_CHUNKED_ENCODING.\nTest it with:\ncurl -i http://your_host_here/ping\nand it will hang. Kill that process, do it again, and you'll get a response.\nYou can change global variables in the code to switch the behavior to broken or either of the two work arounds (see comments in code).\nCode was run with this command:\nsudo /usr/local/bin/uwsgi --ini /mypath/ts.ini --uid www-data --gid www-data  >& /dev/null &\nand the ini file contents shown below the code.\nimport sys\nimport os\nimport json\nimport time\nimport threading\nimport multiprocessing as mp\nimport queue as Queue\nfrom flask import Flask\n\napp = Flask(__name__)\n# change this to True and it works\ndo_in_thread=False\n# or change this to True and it works\none_loop_only=False\n    \ndef worker(job_q, result_q):\n    go_command = job_q.get()\n    result_q.put_nowait(\"ok\")\n    while(True):\n        if not job_q.empty():\n            try:\n                message = job_q.get_nowait()\n                if message == None:\n                    result_q.put_nowait('gone')\n                    return\n                command = message.get('command', None)\n                if command is not None:\n                    if command == 'ping':\n                        result = \"pong\"\n                    else:\n                        result = \"error, invalid command {}\".format(command)\n                else:\n                    result = \"error invalid message, no command {}\".format(message)\n                result_q.put(result)\n            except Queue.Empty:\n                pass\n        time.sleep(0.1)\n\ndef cmd_init_thread():\n    job_queue = mp.Queue() # type: ignore\n    result_queue = mp.Queue() # type: ignore\n    p = mp.Process(target=worker, args=(job_queue, result_queue)) # type: ignore\n    job_queue.put(dict(command=\"go\"))\n    p.start()\n    start_res = result_queue.get()\n    if start_res != 'ok':\n        job_queue.put(None)\n        raise Exception('got {}'.format(start_res))\n    if one_loop_only:\n        job_queue.put(None)\n        return\n    job_queue.put(dict(command=\"ping\"))\n    pong_res = result_queue.get()\n    if pong_res != 'pong':\n        job_queue.put(None)\n        raise Exception('got {}'.format(pong_res))\n\n@app.before_first_request\ndef cmd_init():\n    if do_in_thread:\n        thread = threading.Thread(target=cmd_init_thread, daemon=True)\n        thread.start()\n    else:\n        cmd_init_thread()\n        \n@app.route('/ping', methods=['GET'])\ndef ping():\n    return json.dumps({\"pong\": True})\n\ndef startup(host=\"0.0.0.0\", port=5001):\n    cmd_init()\n    try:\n        app.run(host=host, port=port)\n    except RuntimeError:\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    startup()\n[uwsgi]\nchdir = /mypath\nmodule = ts\ncallable = app\n\nmaster = true\nprocesses = 1\nthreads = 2\n\nuid = www-data\ngid = www-data\nsocket = /tmp/my.sock\nchmod-socket = 664\nvacuum = true\n\ndie-on-term = true\nreq-logger = file:/mypath/req.log\nlogger = file:/mypath/error.log", "issue_status": "Closed", "issue_reporting_time": "2018-03-07T21:33:15Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "441": {"issue_url": "https://github.com/pallets/flask/issues/2653", "issue_id": "#2653", "issue_summary": "Support for multipart/mixed Content-Type?", "issue_description": "dimmg commented on 7 Mar 2018 \u2022\nedited\nDoes Flask have support for working with multipart/mixed Content-Type?\nIf so, HOW? I'm having really hard time trying to understand how to do this.\nRequest example:\ncurl -i -X POST 'http://localhost:5000/mixed' \\\n          -H 'Content-type:multipart/mixed' \\\n          -F 'file=@image.png;type=image/png' \\\n          -F 'foobar={\n                \"foo\": \"bar\",\n                \"bar\": \"foo\"\n          }; type=application/json'\nFlask request object output:\n...\n>> request.content_type\n>> 'multipart/mixed; boundary=------------------------ef723eaaa4c75a7b'\n\n>> request.files\n>> ImmutableMultiDict([])\n\n>> request.get_json()\n\n>> request.data\n>> b'--------------------------f1d947d065515352\\r\\nContent-Disposition: attachment; name=\"file\"; filename=\"image.png\"\\r\\nContent-Type: image/png\\r\\n\\r\\n\\r\\n--------------------------f1d947d065515352\\r\\nContent-Disposition: attachment; name=\"foobar\"\\r\\nContent-Type: application/json\\r\\n\\r\\n{\\n\"foo\": \"bar\",\\n\"bar\": \"foo\"\\n}\\r\\n--------------------------f1d947d065515352--\\r\\n'\n...", "issue_status": "Closed", "issue_reporting_time": "2018-03-07T14:30:57Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "442": {"issue_url": "https://github.com/pallets/flask/issues/2651", "issue_id": "#2651", "issue_summary": "get_json's silent option cache None and causes weird side-effect", "issue_description": "RobertDeRose commented on 6 Mar 2018\nExpected Behavior\nSample Code\napp = Flask(__name__)\n\n@app.route(\"/\", methods=[\"POST\"])\ndef broke_behvior():\n    print(request.is_json)\n    rv = request.get_json(silent=True)\n    print(rv)\n    rv = request.get_json()\n    print(rv)\n    return \"\", 200\n\nclient = app.test_client()\nclient.post(\"/\", data=\"'invalid json'\")\nOutput\nFalse\nNone\n<Response streamed [400 BAD REQUEST]>\nActual Behavior\nFalse\nNone\nNone\n<Response streamed [200 OK]>\nThe fact that calling get_json with silent and then calling it without silent seems to break expected behavior. When I don't call silent I am depending on the exception being thrown, however, because the code caches even on error, you get this weird behavior.\nWhile this might be expected behavior by the authors, the docs don't make this clear.\nI would think, invalid json should not be cached, yet I can see the value of it, however, it adds an layer of uncertainty and therefore, I my opinion, is a bug.\nEnvironment\nPython version: 3.4\nFlask version: 0.12.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-03-05T20:09:06Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "443": {"issue_url": "https://github.com/pallets/flask/issues/2649", "issue_id": "#2649", "issue_summary": "error in init_db()", "issue_description": "simple321vip commented on 4 Mar 2018\nI do like that the site of \"http://www.pythondoc.com/flask/tutorial/dbinit.html#tutorial-dbinit\" writes,\nbut it shows a ValueError.\nthe following is my code:\n+++++++++++++++++++++++++++++++++++++\nPython 3.6.4 (default, Mar 4 2018, 12:03:44)\n[GCC 4.8.5 20150623 (Red Hat 4.8.5-16)] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\nfrom flaskr import init_db\ninit_db()\nTraceback (most recent call last):\nFile \"\", line 1, in\nFile \"/home/saber/flaskr/flaskr.py\", line 29, in init_db\ndb.cursor().executescript(f.read())\nValueError: script argument must be unicode.", "issue_status": "Closed", "issue_reporting_time": "2018-03-04T10:15:28Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "444": {"issue_url": "https://github.com/pallets/flask/issues/2645", "issue_id": "#2645", "issue_summary": "Flask.test_client() methods should support files argument", "issue_description": "aparamon commented on 28 Feb 2018 \u2022\nedited\nCurrently Flask.test_client() methods get(), put(), post() accept \"data\" argument but not \"files\" argument, which makes it incompatible with requests:\nhttp://docs.python-requests.org/en/master/user/quickstart/#post-a-multipart-encoded-file\nMaking Flask.test_client() compatible with requests enables seamless transition between Flask unit and integration testing, e.g. via pytest fixtures.\nA work-around via monkey-patching:\norig_make_test_environ_builder = flask.testing.make_test_environ_builder\ndef make_test_environ_builder(*args, files=None, **kwargs):\n    env = orig_make_test_environ_builder(*args, **kwargs)\n    if files:\n        env.files.update(files)\n    return env\nflask.testing.make_test_environ_builder = make_test_environ_builder", "issue_status": "Closed", "issue_reporting_time": "2018-02-28T09:09:14Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "445": {"issue_url": "https://github.com/pallets/flask/issues/2644", "issue_id": "#2644", "issue_summary": "Broken link to flaskext_compat.py in all versions of the docs", "issue_description": "glenwinters commented on 28 Feb 2018\nExpected Behavior\nEach published version of the \"Flask Extensions\" docs page should have a valid link to scripts/flaskext_compat.py under the \"Flask Before 0.8\" section.\nLinks:\nhttp://flask.pocoo.org/docs/0.10/extensions/\nhttp://flask.pocoo.org/docs/0.11/extensions/\nhttp://flask.pocoo.org/docs/0.12/extensions/\nhttp://flask.pocoo.org/docs/dev/extensions/\nActual Behavior\nEach version of the docs points to scripts/flaskext_compat.py on Flask's master branch on GitHub. Since that file was removed from the current master branch via 715a9a3, all of the links to this script are broken.\nFor example, the docs for the version 0.12 uses this URL, which results in a 404:\nhttps://raw.githubusercontent.com/pallets/flask/master/scripts/flaskext_compat.py\nAlso, the master branch version of the docs still show how to use this script that's been removed:\nhttps://github.com/pallets/flask/blob/master/docs/extensions.rst\nEnvironment\nViewing different versions of Flasks docs on flask.pocoo.org in Google Chrome 64 on Windows 10.", "issue_status": "Closed", "issue_reporting_time": "2018-02-28T08:15:37Z", "fixed_by": "#2647", "pull_request_summary": "remove old extension docs", "pull_request_description": "Member\ndavidism commented on 28 Feb 2018\nRemove flask.ext from api docs.\nRemove section about flaskext_compat.py.\nNo longer need to fall back to _request_ctx_stack and teardown_request.\nGeneral rewrite of extensions introduction.\ncloses #2644\n1", "pull_request_status": "Merged", "issue_fixed_time": "2018-02-28T16:03:05Z", "files_changed": [["16", "docs/api.rst"], ["82", "docs/extensiondev.rst"], ["71", "docs/extensions.rst"]]}, "446": {"issue_url": "https://github.com/pallets/flask/issues/2643", "issue_id": "#2643", "issue_summary": "Url path params <int: matches only unsigned int", "issue_description": "KromDaniel commented on 27 Feb 2018\nI'm having this small issue where match route by type int matches actually unsigned int\nExpected Behavior\nDoing a request with negative integer should match the route\n@app.route('/by_user/<int:user_id>', methods=[\"GET\"])\ndef handle_user(user_id):\n  # rest of the code\nActual Behavior\nwhen doing a GET request to the server, with the path /by_user/-1 it won't match\nwhen doing with unsigned int /by_user/1 it works\nEnvironment\nPython version: Python 3.6.3\nFlask version: Flask 0.12.2\nNote\nI'm running the server via gunicorn, if it matters\nThanks a lot", "issue_status": "Closed", "issue_reporting_time": "2018-02-27T17:14:27Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "447": {"issue_url": "https://github.com/pallets/flask/issues/2642", "issue_id": "#2642", "issue_summary": "Can not download Flask.pdf", "issue_description": "Bedivere-Sun commented on 27 Feb 2018\nI want to get a copy of flask pdf file. But I found a chapter 404 error message while clicking the pdf link.\nPlease fix it.", "issue_status": "Closed", "issue_reporting_time": "2018-02-27T01:46:54Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "448": {"issue_url": "https://github.com/pallets/flask/issues/2640", "issue_id": "#2640", "issue_summary": "Error: request.args.to_dict", "issue_description": "kenhks commented on 26 Feb 2018\nwhen use\nfunction: request.args.to_dict()\nit returns single value only\nExample:\nif url = 'http/?a=1&a=2'\nfunction return {a:1}\ndesires return {a:[1,2]}\ni think it should sensitive on multiple values", "issue_status": "Closed", "issue_reporting_time": "2018-02-25T19:31:03Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "449": {"issue_url": "https://github.com/pallets/flask/issues/2639", "issue_id": "#2639", "issue_summary": "flask.pocoo.org points to jinja2 docs", "issue_description": "yprez commented on 25 Feb 2018\nPretty self explanatory :)", "issue_status": "Closed", "issue_reporting_time": "2018-02-25T14:48:48Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "450": {"issue_url": "https://github.com/pallets/flask/issues/2638", "issue_id": "#2638", "issue_summary": "How to trigger a REST API based on a condition in Flask?", "issue_description": "Souvikray commented on 25 Feb 2018 \u2022\nedited by ThiefMaster\nI have a Flask application where I let users access third party applications and fetch data from them and perform some visualizations.Now the user has to provide the application name and it's credentials in order to fetch the data.Now I want to avoid putting the application name in the url and rather all of the data should be sent as a POST request where I will parse the POST data, connect to the required app with the given credentials and perform some visualizations.This is what the user will send as a POST data\n{\n    \"application_name\": \"appdynamics\",\n    \"account_id\": \"sdf632sef\",\n    \"username\": \"kuhku86tg\",\n    \"password\": \"oihsd832\"\n}\nNow I want to trigger my particular REST API class based on the application name provided by the user.\nThe way I planned was to create a seperate file that involves getting the POST data using request parser and then calling it in the main application where I will trigger my REST API class with a if condition based on the application name.Below is the file parse.py\nfrom flask_restful import reqparse\n\n# create a parser object\nparser = reqparse.RequestParser()\n# add agruments to the parser object\nparser.add_argument('account_id', type=str, required=False, help=\"Please define 'account_id'\")\nparser.add_argument('username', type=str, required=False, help=\"Please define 'username'\")\nparser.add_argument('password', type=str, required=False, help=\"Please define 'password'\")\nparser.add_argument('application_name', type=str, required=False, help=\"Please define 'application name'\")\n\ndata = parser.parse_args()\nNow I call it in the main application app.py\nfrom parser import data\nfrom flask import Flask\nfrom flask_restful import Api\n\napp = Flask(__name__)\n# create an API for the Flask app\napi = Api(app)\n\n# if the user demands info for appdynamics, trigger the Appdynamics API class\nif data['application_name'] == \"appdynamics\":\n    api.add_resource(AppdynamicsAPI, \"/<string:name>\")  # the string will contain the metric requirement\n\nif __name__ == \"__main__\":\n    app.run(port=5000, debug=True)\nBelow is the section where the logic for the REST API is written\nfrom parser import data\nfrom flask_restful import Resource, reqparse\nfrom fetch_data.appdynamics import fetch_all_apps, fetch_avg_resp_time, calls_per_min\nfrom models.user import *\n\nclass AppdynamicsAPI(Resource):\n    # authenticate users\n    def post(self, name):\n        first_data = data\n        # if the user passes the credentials, insert it into the database otherwise use the last known credentials\n        # ensure you only insert valid credentials\n        if all([first_data['account_id'], first_data['password'], first_data['username']]):\n            users.update(first_data, {i: j for i, j in first_data.items()}, upsert=True)\n            print({i: j for i, j in first_data.items()})\n        credentials = users.find_one({})\n        print(\"Credentials\", credentials)\n        account_id = credentials['account_id']\n        username = credentials['username']\n        password = credentials['password']\n        t_duration = first_data['t_duration']\n\n\n        if name == \"allapps\":\n            status_code, result = fetch_all_apps(account_id, username, password)\n            if status_code == 200:\n                return {\"information\": result}, status_code\n            return {\"message\": \"Please enter correct credentials\"}, status_code\nHowever I receive the below error\nTraceback (most recent call last):\n  File \"/home/souvik/PycharmProjects/ServiceHandler/app.py\", line 3, in <module>\n    from resource.appdynamics_resource import AppdynamicsAPI\n  File \"/home/souvik/PycharmProjects/ServiceHandler/resource/appdynamics_resource.py\", line 4, in <module>\n    from authentication.parser import data\n  File \"/home/souvik/PycharmProjects/ServiceHandler/authentication/parser.py\", line 14, in <module>\n    data = parser.parse_args()\n  File \"/home/souvik/utorapp/lib/python3.5/site-packages/flask_restful/reqparse.py\", line 302, in parse_args\n    req.unparsed_arguments = dict(self.argument_class('').source(req)) if strict else {}\n  File \"/home/souvik/utorapp/lib/python3.5/site-packages/werkzeug/local.py\", line 364, in <lambda>\n    __setattr__ = lambda x, n, v: setattr(x._get_current_object(), n, v)\n  File \"/home/souvik/utorapp/lib/python3.5/site-packages/werkzeug/local.py\", line 306, in _get_current_object\n    return self.__local()\n  File \"/home/souvik/utorapp/lib/python3.5/site-packages/flask/globals.py\", line 37, in _lookup_req_object\n    raise RuntimeError(_request_ctx_err_msg)\nRuntimeError: Working outside of request context.\n\nThis typically means that you attempted to use functionality that needed\nan active HTTP request.  Consult the documentation on testing for\ninformation about how to avoid this problem.", "issue_status": "Closed", "issue_reporting_time": "2018-02-25T08:55:32Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "451": {"issue_url": "https://github.com/pallets/flask/issues/2634", "issue_id": "#2634", "issue_summary": "url_for fails to use route parameters for non-POST routes during POST requests", "issue_description": "antialiasis commented on 19 Feb 2018\nThis is a bit of a weird one cropping up under very particular circumstances, but I spent a while last week puzzling over the issue. Probably best explained through the example.\nExpected Behavior\nEntering \"Todd\" into the form field in this simple example app and submitting the form takes the user to /hello/Todd, just like clicking the \"Click here if your name is Todd\" link does.\nfrom flask import Flask, redirect, request, url_for\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef form():\n    return \"\"\"\n        <p><a href=\"{}\">Click here if your name is Todd</a><p>\n        <form action=\"{}\" method=\"post\">\n            <input type=\"text\" name=\"name\">\n            <button type=\"submit\">This is my name!</button>\n        </form>\n    \"\"\".format(\n        url_for(\"hello\", name=\"Todd\"),\n        url_for(\"hello\")\n    )\n\n@app.route(\"/hello\", methods=[\"GET\", \"POST\"])\n@app.route(\"/hello/<name>\")\ndef hello(name=None):\n    if request.method == \"POST\":\n        return redirect(url_for(\"hello\", name=request.form.get(\"name\")))\n    if name:\n        return \"Hello {}!\".format(name)\n    else:\n        return \"Hello World!\"\nActual Behavior\nSubmitting the form instead takes you to /hello?name=Todd.\nThrough my own testing I've concluded that url_for(\"hello\", name=\"Todd\") will return /hello?name=Todd if\nwe are currently processing a POST request, and\nthe target endpoint has a parameter-less route with the POST method allowed (/hello), but the route we actually want (/hello/<name>) only allows GET requests.\nThis seems obviously bizarre and counterintuitive.\nEnvironment\nPython version: 3.6.4\nFlask version: 0.12.2\nWerkzeug version: 0.13", "issue_status": "Closed", "issue_reporting_time": "2018-02-19T11:18:25Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "452": {"issue_url": "https://github.com/pallets/flask/issues/2632", "issue_id": "#2632", "issue_summary": "Unique URLs and relative URLs", "issue_description": "SergiyKolesnikov commented on 17 Feb 2018\nIn the documentation, under Quick Start/Unique URLs it is stated: \"This behavior allows relative URLs to continue working even if the trailing slash is omitted\" It is unclear what the described behavior has to do with relative URLs and how it helps to keep them working. Please clarify.", "issue_status": "Closed", "issue_reporting_time": "2018-02-17T11:37:36Z", "fixed_by": "#2637", "pull_request_summary": "rewrite quickstart Unique URLs section", "pull_request_description": "Member\ndavidism commented on 24 Feb 2018\ncloses #2632\n1", "pull_request_status": "Merged", "issue_fixed_time": "2018-02-24T16:10:26Z", "files_changed": [["27", "docs/quickstart.rst"]]}, "453": {"issue_url": "https://github.com/pallets/flask/issues/2631", "issue_id": "#2631", "issue_summary": "Reloader drops datas after tables creation", "issue_description": "LionelR commented on 16 Feb 2018\nAfter tables creation, I want to populate them with initial datas (fixtures). For that I use sqlalchemy.event like in the code below. But in DEV mode, the automatic reloader \"removes\" these fixtures and lets the tables empty.\nimport os\n\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy, event\n\ndb = SQLAlchemy()\n\n\nclass Test(db.Model):\n    __tablename__ = 'test_table'\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String, unique=True, nullable=False)\n\n\nINITIAL_TABLES = {\n    Test: [\n        {'name': 'NAME1'},\n        {'name': 'NAME2'},\n        {'name': 'NAME3'},\n    ],\n}\n\n\ndef initial_datas():\n    def create(param):\n        def callee(table, connection, **kwargs):\n            for values in INITIAL_TABLES[param]:\n                t = param(**values)\n                db.session.add(t)\n        return callee\n\n    for table_class in INITIAL_TABLES:\n        event.listen(table_class.__table__, 'after_create', create(table_class))\n\n    db.session.commit()\n\n\nclass Config(object):\n    ENV = 'dev'\n    DEBUG = True\n    DB_NAME = 'test.db'\n    APP_DIR = os.path.abspath(os.path.dirname(__file__))\n    PROJECT_ROOT = os.path.abspath(os.path.join(APP_DIR, os.pardir))\n    DB_PATH = os.path.join(PROJECT_ROOT, DB_NAME)\n    SQLALCHEMY_DATABASE_URI = 'sqlite:///{0}'.format(DB_PATH)\n    SQLALCHEMY_TRACK_MODIFICATIONS = True\n\n\nif __name__ == '__main__':\n    app = Flask(__name__)\n    app.config.from_object(Config)\n    # if os.path.exists(Config.DB_PATH):\n    #     print('drop db')\n    #     os.remove(Config.DB_PATH)\n    app.app_context().push()\n    db.init_app(app=app)\n    initial_datas()\n    db.create_all(app=app)\n    print(Test.query.all())\n\n    app.run()\nThe resulting output shows the table is empty after reload:\n[<Test 1>, <Test 2>, <Test 3>]\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n * Restarting with stat\n[]\n * Debugger is active!\n * Debugger PIN: 110-171-224\nAs a fix, app.run(use_reloader=False) does the trick, or uncommenting the last lines for dropping the db...\nEnvironment\nPython version: 3.5\nFlask version: last\nWerkzeug version: last", "issue_status": "Closed", "issue_reporting_time": "2018-02-16T12:14:59Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "454": {"issue_url": "https://github.com/pallets/flask/issues/2628", "issue_id": "#2628", "issue_summary": "Add nl2br filter", "issue_description": "Member\ndavidism commented on 10 Feb 2018\nThe tutorial currently describes why escaping in Jinja is good, then proceeds to do {{ entry.text|safe }}. There's an explanation for this in the introduction, \"This HTML is not sanitized because we trust the user here.\" but that's not reiterated near the safe call, and isn't really a good pattern to teach in a tutorial anyway.\nMany users end up copying the nl2br filter from the Jinja docs or Flask snippet. I think it's a common and reasonable use case between \"trust user input\" and \"use markdown\". It would allow nicely formatted posts in the tutorial without sacrificing security.", "issue_status": "Closed", "issue_reporting_time": "2018-02-10T15:32:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "455": {"issue_url": "https://github.com/pallets/flask/issues/2627", "issue_id": "#2627", "issue_summary": "Docs are inconsistent on what test_request_context() returns", "issue_description": "Contributor\nsersorrel commented on 10 Feb 2018\nSome of the docs say (afaict, correctly) that app.test_request_context() returns a RequestContext:\nThe test_request_context method can create us a RequestContext:\n>>> ctx = app.test_request_context('/?next=http://example.com/')\nfrom http://flask.pocoo.org/docs/0.12/reqcontext/\nHowever, the API reference says that app.test_request_context() returns \"a WSGI environment\":\nCreates a WSGI environment from the given values (see werkzeug.test.EnvironBuilder for more information, this function accepts the same arguments).\nfrom http://flask.pocoo.org/docs/0.12/api/#flask.Flask.test_request_context", "issue_status": "Closed", "issue_reporting_time": "2018-02-10T13:15:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "456": {"issue_url": "https://github.com/pallets/flask/issues/2626", "issue_id": "#2626", "issue_summary": "Official Guide on how to structure Flask application", "issue_description": "Member\nlepture commented on 10 Feb 2018\nI've just learned that many people are learning \"how to structure Flask application\" with this post: https://www.digitalocean.com/community/tutorials/how-to-structure-large-flask-applications via lepture/authlib#8 (comment)\nThis guide however it really a bad example and many people new to Flask are learning from it. I'd like to create a guide on this topic in the official docs. Here is my thoughts:\nUse MVC pattern\nUse factory pattern\nAnother simple example on other folder structure\napp/\n   __init__.py\n   templates/\n   models/\n   controllers/  (or other names)\n10\n1", "issue_status": "Closed", "issue_reporting_time": "2018-02-10T07:21:44Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "457": {"issue_url": "https://github.com/pallets/flask/issues/2625", "issue_id": "#2625", "issue_summary": "Flask run gives misleading error message on actual import error", "issue_description": "gnebehay commented on 9 Feb 2018\nExpected Behavior\nUsing flask run should result in appropriate import error messages if erroneous imports are used in a flask app.\nConsider the two flask apps worksjustfine.py:\nfrom flask import Flask\napp = Flask(__name__)\nand completelymisleading.py:\nimport flask\nimport batrachomyomachy\napp = flask.Flask(__name__)\nIf you fire up worksjustfine.py, it works just fine:\n$ FLASK_APP=worksjustfine.py flask run\n * Serving Flask app \"worksjustfine\"\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\nIf you fire up completelymisleading.py, you would expect something like this:\n$ FLASK_APP=completelymisleading.py flask run\n...\nImportError: No module named 'batrachomyomachy'\nActual Behavior\n$ FLASK_APP=completelymisleading.py flask run\nUsage: flask run [OPTIONS]\n\nError: The file/path provided (completelymisleading) does not appear to exist.  Please verify the path is correct.  If app is not on PYTHONPATH, ensure the extension is .py\nThis error message is completely misleading, because the file does exist and flask run also starts to import this file. I imagine that somewhere in the flask run code there is a try ... except ImportError that is meant for the situation when the actual flask app can not be found, but one would definitely need a more specific error message for other import errors.\nEnvironment\nPython version: 3.5.3\nFlask version: 0.12", "issue_status": "Closed", "issue_reporting_time": "2018-02-08T21:19:40Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "458": {"issue_url": "https://github.com/pallets/flask/issues/2621", "issue_id": "#2621", "issue_summary": "Can't capture custom validator Exception", "issue_description": "grillorafael commented on 5 Feb 2018\nExpected Behavior\n_Validator throw a custom exception if it fails which I was expecting to capture through @errorhandler.\n_Validator = ???\nclass MyConverter(BaseConverter):\n    def to_python(self, value):\n        return _Validator.parsed(value)\n\n    def to_url(self, value):\n        return ','.join(value)\n\napp.url_map.converters['my'] = MyConverter\nActual Behavior\nCauses Internal Server Error not going through my 500 handler.\nEnvironment\nPython version: 3.6\nFlask version: 0.12.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-02-05T12:37:02Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "459": {"issue_url": "https://github.com/pallets/flask/issues/2620", "issue_id": "#2620", "issue_summary": "Add 'python3 -m venv' information to the mod_wsgi docs", "issue_description": "jonascj commented on 5 Feb 2018\nIt would be nice if http://flask.pocoo.org/docs/0.12/deploying/mod_wsgi/ and hence flask/docs/deploying/mod_wsgi.rst sported some information on Python 3's venv virtual environment:\nThe information needed to deploy with venvis available here:\nhttps://modwsgi.readthedocs.io/en/develop/user-guides/virtual-environments.html\nBasically no activate_this-code is needed in the .wsgi file, just WSGIDaemonProcess myapp python-home=/usr/local/venvs/myapp in your httpd/apache config.\nI'll draft something to merge if you think it is a good idea, otherwise this will have to serve as reference.", "issue_status": "Closed", "issue_reporting_time": "2018-02-05T09:03:40Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "460": {"issue_url": "https://github.com/pallets/flask/issues/2618", "issue_id": "#2618", "issue_summary": "Document \"routes\" command", "issue_description": "italomaia commented on 2 Feb 2018\nCommand \"routes\" is available at https://github.com/pallets/flask/blob/master/flask/cli.py#L798 but not documented. I tried it here, locally and it did not work ('function' object has no attribute 'make_context'). Not sure if I'm missing something or if the command is broken. Anyways, reporting.\nEnvironment\nFlask version: 0.12.x", "issue_status": "Closed", "issue_reporting_time": "2018-02-01T19:36:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "461": {"issue_url": "https://github.com/pallets/flask/issues/2617", "issue_id": "#2617", "issue_summary": "Issue with sending large-ish CSV files to Flask", "issue_description": "mdemin914 commented on 1 Feb 2018 \u2022\nedited\nI am trying to send a csv file as a base64 encoded string in the body of a post request to a flask server. It works find for small files. But when I try to post a file above ~150k the server does not respond and there is no error message. It seems to get hung up on body = request.get_json(). This non-responsiveness happens through postman and node. To throw a wrench into the problem, I can submit the file fine using pythons requests library. I am not sure what is causing this or what the difference between the three requests. The headers all look really similar and are included in the repo. I have included the minimal server (server.py), working python request (test.py), the not working node request (jstest.js) and the not working postman collection. Thanks for any help.\nHere is a simple reproduction MCVE https://github.com/mdemin914/flask-largeish-csv-file-error-reproduction\nEnvironment\nPython version: 2.7.13\nFlask version: 0.12.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-02-01T02:49:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "462": {"issue_url": "https://github.com/pallets/flask/issues/2616", "issue_id": "#2616", "issue_summary": "A setup function was called after the first request was handled", "issue_description": "lkiarest commented on 1 Feb 2018\nI see that there is an suggestion saying \"To fix this make sure to import all your view modules, database models and everything related at a central place before the application starts serving requests.\"\nWe have encountered this problem while adding an first-installation page for our app like WordPress. Now we are using Flask-Security for user management. When our app is visited at the first time, the installation page will display and allow user to config the database, admin account etc.\nThe problem is that we need to setup the Flask-Security after the first request that providing the database setting because the Security instance can't be inited without a datastore.\nDo you have any suggestions about this situation ?\nThanks ~", "issue_status": "Closed", "issue_reporting_time": "2018-02-01T02:32:13Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "463": {"issue_url": "https://github.com/pallets/flask/issues/2615", "issue_id": "#2615", "issue_summary": "Flask does not terminate on CTRL+C", "issue_description": "andydevs commented on 31 Jan 2018\nExpected Behavior\nFlask terminates when CTRL+C is pressed\nActual Behavior\nNothing happens.... even when you hold CTRL+C down for a long time\nEnvironment\nFlask 0.12.2 (Werkzeug 0.14.1)\nPython 3.6.3 (py launcher)\nWindows CMD line (Windows 10 v1709 build 16299.192 on Intel Core i7-5500U @ 2.40 GHz / 2.39 GHz with 8 GB of RAM)", "issue_status": "Closed", "issue_reporting_time": "2018-01-31T17:37:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "464": {"issue_url": "https://github.com/pallets/flask/issues/2613", "issue_id": "#2613", "issue_summary": "Dont repeat `len(mapping)` in flask/config.py", "issue_description": "VishvajitP commented on 31 Jan 2018\nThis the minimal code optimisation done to avoid code repetition.", "issue_status": "Closed", "issue_reporting_time": "2018-01-31T10:07:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "465": {"issue_url": "https://github.com/pallets/flask/issues/2612", "issue_id": "#2612", "issue_summary": "No TLS listener with flask run", "issue_description": "snobu commented on 30 Jan 2018\nIs flask run supposed to spin up a TLS listener if the app is configured with TLS?\nTake this app.py:\nif __name__ == \"__main__\":\n    app.run(ssl_context=('cert.pem', 'key.pem'))\nIf i run python app.py i get the expected Listening on https://... and all is well - note the https.\nIf i run flask run i get an HTTP listener, Listening on http://.... No TLS.\nIs this expected behaviour? May i suggest mentioning this somewhere in the quickstart? - http://flask.pocoo.org/docs/0.12/quickstart/\nWould be great if someone would lay out the difference between the two invocations.\nRef:\nhttps://stackoverflow.com/questions/48518584/", "issue_status": "Closed", "issue_reporting_time": "2018-01-30T15:48:59Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "466": {"issue_url": "https://github.com/pallets/flask/issues/2605", "issue_id": "#2605", "issue_summary": "FLASK_APP factory export doesn't work when invoked with parentheses and quotations but works otherwise", "issue_description": "amir-rahnama commented on 22 Jan 2018 \u2022\nedited by ThiefMaster\nI have an app factory under a function called create_app:\n\"\"\"Factory for flask app.\"\"\"\nimport os\nfrom flask import Flask\n\ndef create_app(config=None):\n    \"\"\"Create the app and add extra config.\"\"\"\n    app = Flask('mini')\n\n    app.config.update(dict(\n        DATABASE=os.path.join(app.root_path, 'mini.db'),\n        DEBUG=True,\n        SECRET_KEY=b'thisisnolongersecret',\n        USERNAME='admin',\n        PASSWORD='default'\n    ))\n\n    return app\nExpected Behavior\nI should be able to export my FLASK_APP and use that function like the following:\nexport FLASK_APP=\"app.factory:create_app()\"\nflask run \nActual Behavior\nI am receiving:\nRuntimeError: Failed to find application in module \"mini.factory\"\nTraceback (most recent call last):\n  File \"/Users/ara/anaconda/bin/flask\", line 11, in <module>\n    sys.exit(main())\n  File \"/Users/ara/anaconda/lib/python2.7/site-packages/flask/cli.py\", line 513, in main\n    cli.main(args=args, prog_name=name)\n  File \"/Users/ara/anaconda/lib/python2.7/site-packages/flask/cli.py\", line 380, in main\n    return AppGroup.main(self, *args, **kwargs)\n  File \"/Users/ara/anaconda/lib/python2.7/site-packages/click/core.py\", line 696, in main\n    rv = self.invoke(ctx)\n  File \"/Users/ara/anaconda/lib/python2.7/site-packages/click/core.py\", line 1060, in invoke\n    return _process_result(sub_ctx.command.invoke(sub_ctx))\n  File \"/Users/ara/anaconda/lib/python2.7/site-packages/click/core.py\", line 889, in invoke\n    return ctx.invoke(self.callback, **ctx.params)\n  File \"/Users/ara/anaconda/lib/python2.7/site-packages/click/core.py\", line 534, in invoke\n    return callback(*args, **kwargs)\n  File \"/Users/ara/anaconda/lib/python2.7/site-packages/click/decorators.py\", line 64, in new_func\n    return ctx.invoke(f, obj, *args[1:], **kwargs)\n  File \"/Users/ara/anaconda/lib/python2.7/site-packages/click/core.py\", line 534, in invoke\n    return callback(*args, **kwargs)\n  File \"/Users/ara/anaconda/lib/python2.7/site-packages/flask/cli.py\", line 423, in run_command\n    app = DispatchingApp(info.load_app, use_eager_loading=eager_loading)\n  File \"/Users/ara/anaconda/lib/python2.7/site-packages/flask/cli.py\", line 152, in __init__\n    self._load_unlocked()\n  File \"/Users/ara/anaconda/lib/python2.7/site-packages/flask/cli.py\", line 176, in _load_unlocked\n    self._app = rv = self.loader()\n  File \"/Users/ara/anaconda/lib/python2.7/site-packages/flask/cli.py\", line 237, in load_app\n    rv = locate_app(self.app_import_path)\n  File \"/Users/ara/anaconda/lib/python2.7/site-packages/flask/cli.py\", line 109, in locate_app\n    % module)\nRuntimeError: Failed to find application in module \"mini.factory\"\nWorkaround\nI can get it to work by setting:\nexport FLASK_APP=factory.create_app\nEnvironment\nFlask 0.12.2\nPython 2.7.9 |Anaconda custom (x86_64)| (default, Dec 15 2014, 10:37:34)\n[GCC 4.2.1 (Apple Inc. build 5577)]", "issue_status": "Closed", "issue_reporting_time": "2018-01-22T10:51:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "467": {"issue_url": "https://github.com/pallets/flask/issues/2604", "issue_id": "#2604", "issue_summary": "Flask shell: Give readline a completer that is aware of shell context", "issue_description": "namedots commented on 22 Jan 2018 \u2022\nedited\nProblem\ncli.py:shell_command (flask shell) creates a context and passes it to code.interact\nThis leaves tab completion broken:\n>>> stuff = 5\n>>> stuTABTABTABTAB <- no match\nSuggestion\nThis can be remedied by supplying a completer to readline:\n>>> import readline\n>>> import rlcompleter\n>>> readline.set_completer(rlcompleter.Completer(globals()).complete)\n>>> stuTAB <- stuff! yay!\nOr perhaps flask/__main__.py could be used as the context:\nfile: flask/cli.py\n...\ndef shell_command():\n...\n    import __main__\n    ctx = __main__.__dict__\n...\n2", "issue_status": "Closed", "issue_reporting_time": "2018-01-22T06:07:06Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "468": {"issue_url": "https://github.com/pallets/flask/issues/2602", "issue_id": "#2602", "issue_summary": "Server Side Template Injection?", "issue_description": "benjaminweb commented on 18 Jan 2018\nIs this relevant?\nhttps://www.lanmaster53.com/2016/03/11/exploring-ssti-flask-jinja2-part-2/\nhttps://twitter.com/_qll_/status/707714873774448640\nIf, how can it be mitigated?\nEnvironment\nFlask version: all", "issue_status": "Closed", "issue_reporting_time": "2018-01-18T16:16:03Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "469": {"issue_url": "https://github.com/pallets/flask/issues/2601", "issue_id": "#2601", "issue_summary": "Internal error when requesting route with url-part == defaults", "issue_description": "d3QUone commented on 18 Jan 2018\nhttp://flask.pocoo.org/docs/0.12/api/#url-route-registrations\nGetting a 5xx-error when requesting a route with defaults parameter\nCode Example\nview = Blueprint(\"a\", __name__, url_prefix=\"/a\")\n\n@view.route(\"/b\", defaults={\"consumer_id\": \"test\"}, methods=[\"POST\"])\n@view.route(\"/b/<consumer_id>\", methods=[\"POST\"])\ndef check_consumers(consumer_id):\n    return \"consumer_id: {}\".format(consumer_id)\nExpected Behavior\nSend any other parameter - OK\ncurl -X POST '0.0.0.0:5500/a/b/anything'\nconsumer_id: anything\nSend parameter == default one\ncurl -X POST '0.0.0.0:5500/a/b/test'\nconsumer_id: test\nActual Behavior\nSend parameter == defaults and get an internal error\ncurl -X POST '0.0.0.0:5500/a/b/test' -vvv\n* Hostname was NOT found in DNS cache\n*   Trying 0.0.0.0...\n* Connected to 0.0.0.0 (127.0.0.1) port 5500 (#0)\n> POST /a/b/test HTTP/1.1\n> User-Agent: curl/7.35.0\n> Host: 0.0.0.0:5500\n> Accept: */*\n> \n* Empty reply from server\n* Connection #0 to host 0.0.0.0 left intact\ncurl: (52) Empty reply from server\nTraceback:\nNote: this exception is only raised in debug mode\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1612, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1590, in dispatch_request\n    self.raise_routing_exception(req)\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1576, in raise_routing_exception\n    raise FormDataRoutingRedirect(request)\nFormDataRoutingRedirect: A request was sent to this URL (http://0.0.0.0:5500/a/b/test) but a redirect was issued automatically by the routing system to \"http://0.0.0.0:5500/a/b\".  Make sure to directly send your POST-request to this URL since we can't make browsers or HTTP clients redirect with form data reliably or without user interaction.\nEnvironment\nPython version: 2.7.6\nFlask version: 0.12.2\nWerkzeug version: 0.14.1\n1", "issue_status": "Closed", "issue_reporting_time": "2018-01-18T10:51:31Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "470": {"issue_url": "https://github.com/pallets/flask/issues/2599", "issue_id": "#2599", "issue_summary": "Usage of deprecated function `Request.is_xhr` in flask.jsonify", "issue_description": "Contributor\nRyanSquared commented on 17 Jan 2018\nowner@Owners-MacBook-Pro ~/Library/Python 14:12:19 % ag \"is_xhr\"\n2.7/lib/python/site-packages/flask/json.py\n251:    if current_app.config['JSONIFY_PRETTYPRINT_REGULAR'] and not request.is_xhr:\n\n2.7/lib/python/site-packages/werkzeug/wrappers.py\n687:    def is_xhr(self):\n697:            'Request.is_xhr is deprecated. Given that the X-Requested-With '\nFull error:\n/Users/owner/Library/Python/2.7/lib/python/site-packages/werkzeug/local.py:347:\nDeprecationWarning: Request.is_xhr is deprecated. Given that the X-Requested-With\nheader is not a part of any spec, it is not reliable\nEnvironment\nPython version: 2.7.10\nFlask version: 0.12.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-01-16T20:17:30Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "471": {"issue_url": "https://github.com/pallets/flask/issues/2598", "issue_id": "#2598", "issue_summary": "Unclear documentation on 'Request' object", "issue_description": "rangerscience commented on 17 Jan 2018 \u2022\nedited\nRegarding this documentation: http://flask.pocoo.org/docs/0.12/api/#incoming-request-data\n(Note: I'd just edit and PR myself, but I can't find these docs in this repo, or any instructions for contributing to it)\nWhat mime-types does Flask recognize, and what does it do when it encounters them?\nReading data also reads stream, so if you call data and then stream, stream will be empty.\nSimilarly, reading stream before data results in an empty data\nSending a JSON payload in a GET request results in a populated form attribute (which, as per docs, only populates on POST and PUT)\nThese are very much not clear from the documentation, and led me to great frustration.\nNote 2: Although it's reasonable that form does not automagically take JSON payloads and interpret them as form data.... it might be nice to point that out explicitly, given how much use JSON has.", "issue_status": "Closed", "issue_reporting_time": "2018-01-16T20:10:18Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "472": {"issue_url": "https://github.com/pallets/flask/issues/2597", "issue_id": "#2597", "issue_summary": "pdf link broken (flask 0.12)", "issue_description": "roymath commented on 15 Jan 2018\nThe link http://flask.pocoo.org/docs/0.12/.latex/Flask.pdf referenced from http://flask.pocoo.org/ is broken.", "issue_status": "Closed", "issue_reporting_time": "2018-01-15T14:18:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "473": {"issue_url": "https://github.com/pallets/flask/issues/2595", "issue_id": "#2595", "issue_summary": "Documentation typo in /patterns/fileuploads.rst", "issue_description": "Contributor\nNickatak commented on 15 Jan 2018 \u2022\nedited\nExpected Behavior:\nI expect examples in documentation to provide a fully working script with no errors. The snippet in question is a basic example of saving a file in an uploads directory. When ran, the file should be saved to the given upload directory designated by the global variable UPLOAD_FOLDER and then user should be redirected to a URL for the newly uploaded file.\nNotes:\nI am using windows, so the upload folder works fine without a beginning '/' for os.join() [tested], but that really isn't the issue.\nWhen the redirect is called from within upload_file(), the supplied name for url_for() is 'uploaded_file' instead of 'upload_file'.\nimport os\nfrom flask import Flask, request, redirect, url_for, render_template, flash\nfrom werkzeug.utils import secure_filename\napp = Flask(__name__)\napp.secret_key = \"ThisIsSecret\"\n\nUPLOAD_FOLDER = 'uploads'\nALLOWED_EXTENSIONS = set(['txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif'])\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\ndef allowed_file(filename):\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n\n@app.route('/', methods=['GET', 'POST'])\ndef upload_file():\n    if request.method == 'POST':\n        # check if the post request has the file part\n        if 'file' not in request.files:\n            flash('No file part')\n            return redirect(request.url)\n        file = request.files['file']\n        # if user does not select file, browser also\n        # submit an empty part without filename\n        if file.filename == '':\n            flash('No selected file')\n            return redirect(request.url)\n        if file and allowed_file(file.filename):\n            filename = secure_filename(file.filename)\n            file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))\n            return redirect(url_for('uploaded_file',\n                                    filename=filename))\n    return '''\n    <!doctype html>\n    <title>Upload new File</title>\n    <h1>Upload new File</h1>\n    <form method=post enctype=multipart/form-data>\n      <input type=file name=file>\n      <input type=submit value=Upload>\n    </form>\n    '''\n\napp.run(debug=True)\nActual Behavior\nThe file is indeed saved, but upon redirect, the endpoint 'uploaded_file' cannot be found and thus produces the following traceback upon trying to build the endpoint.\nTraceback (most recent call last):\n  File \"C:\\Users\\Nickatak\\downloads\\venv\\lib\\site-packages\\flask\\app.py\", line 1997, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\Nickatak\\downloads\\venv\\lib\\site-packages\\flask\\app.py\", line 1985, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\Nickatak\\downloads\\venv\\lib\\site-packages\\flask\\app.py\", line 1540, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Nickatak\\downloads\\venv\\lib\\site-packages\\flask\\app.py\", line 1982, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Nickatak\\downloads\\venv\\lib\\site-packages\\flask\\app.py\", line 1614, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Nickatak\\downloads\\venv\\lib\\site-packages\\flask\\app.py\", line 1517, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Nickatak\\downloads\\venv\\lib\\site-packages\\flask\\app.py\", line 1612, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Nickatak\\downloads\\venv\\lib\\site-packages\\flask\\app.py\", line 1598, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"C:\\Users\\Nickatak\\downloads\\testing\\server.py\", line 32, in upload_file\n    filename=filename))\n  File \"C:\\Users\\Nickatak\\downloads\\venv\\lib\\site-packages\\flask\\helpers.py\", line 333, in url_for\n    return appctx.app.handle_url_build_error(error, endpoint, values)\n  File \"C:\\Users\\Nickatak\\downloads\\venv\\lib\\site-packages\\flask\\app.py\", line 1805, in handle_url_build_error\n    reraise(exc_type, exc_value, tb)\n  File \"C:\\Users\\Nickatak\\downloads\\venv\\lib\\site-packages\\flask\\helpers.py\", line 323, in url_for\n    force_external=external)\n  File \"C:\\Users\\Nickatak\\downloads\\venv\\lib\\site-packages\\werkzeug\\routing.py\", line 1776, in build\n    raise BuildError(endpoint, values, method, self)\nBuildError: Could not build url for endpoint 'uploaded_file' with values ['filename']. Did you mean 'upload_file' instead?\nIssue recreation steps:\nCreate a venv and activate it.\npip install flask.\nProceed to the following available documentation page: http://flask.pocoo.org/docs/0.12/patterns/fileuploads/#a-gentle-introduction\nAssemble the two pieces of the script given under the above section as one server.py file ^.\nCreate a folder that has the same name as your UPLOAD_FOLDER variable/app.config['UPLOAD_FOLDER'].\nRun the development server.\nNavigate to localhost:5000.\nSelect a file to upload (any file in the allowed extensions will recreate this error) with the 'Choose File' button.\nAttempt to upload the file with the 'Upload' button.\nSuggested solution:\nChange this line in the function called upload_file:\nreturn redirect(url_for('uploaded_file', filename=filename))\nTo this:\nreturn redirect(url_for('upload_file', filename=filename))\nAlso, if you don't mind, I'd like to work on this issue (be assigned it as a newcomer), if this is sufficiently seen as an error.\nEnvironment\nPython version: 2.7.14\nFlask version: 0.12.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-01-14T19:14:01Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "474": {"issue_url": "https://github.com/pallets/flask/issues/2594", "issue_id": "#2594", "issue_summary": "add ssl_context option to `flask run`", "issue_description": "jscn commented on 11 Jan 2018\nExpected Behaviour\nI expect to be able to pass the flask run command any of the options which are valid for the Flask.run() method:\n$ FLASK_APP=myapp/run.py FLASK_DEBUG=1 flask run --host=0.0.0.0 --ssl_context=adhoc\n* Running on https://0.0.0.0:5000/ (Press CTRL+C to quit)\nSpecifically, I want to pass ssl_context=adhoc, but it seems sensible to extend the command to accept all valid keyword arguments for Flask.run() / werkzeug.serving.run_simple().\nActual Behaviour\nError: no such option: --ssl_context\nflask run --host=0.0.0.0 --ssl_context=adhoc exited with code 2\nEnvironment\nPython version: 3.5.2\nFlask version: 0.12.2\nWerkzeug version: 0.12.2", "issue_status": "Closed", "issue_reporting_time": "2018-01-11T02:48:48Z", "fixed_by": "#2606", "pull_request_summary": "add HTTPS support for flask run command", "pull_request_description": "Member\ndavidism commented on 23 Jan 2018 \u2022\nedited\ncloses #2594\nPreferred use case is to manually generate a cert and key and pass them.\nAn interesting config is using .flaskenv and setting FLASK_RUN_CERT and FLASK_RUN_KEY instead of passing them in the command line.", "pull_request_status": "Merged", "issue_fixed_time": "2018-01-23T18:09:43Z", "files_changed": [["3", "CHANGES"], ["99", "flask/cli.py"], ["65", "tests/test_cli.py"]]}, "475": {"issue_url": "https://github.com/pallets/flask/issues/2590", "issue_id": "#2590", "issue_summary": "`app.run` does not match behavior of `flask run`", "issue_description": "Member\ndavidism commented on 11 Jan 2018 \u2022\nedited\nflask run outputs some extra information when starting. Extract this and print it when calling app.run too.\napp.run runs after the app is loaded and the config created. It can call load_dotenv, which could change the ENV or DEBUG env vars, but the config won't be updated. If using dotenv, reconfigure env and debug if the env vars are set.\nflask run enables threading by default, app.run does not.\nWorking on this, just creating the issue for tracking.", "issue_status": "Closed", "issue_reporting_time": "2018-01-10T19:13:50Z", "fixed_by": "#2591", "pull_request_summary": "match run command behavior in app.run", "pull_request_description": "Member\ndavidism commented on 11 Jan 2018\noutput extra server information\nhandle env var changed by load_dotenv\nenable threading by default\ncloses #2590", "pull_request_status": "Merged", "issue_fixed_time": "2018-01-10T20:14:45Z", "files_changed": [["27", "flask/app.py"], ["70", "flask/cli.py"]]}, "476": {"issue_url": "https://github.com/pallets/flask/issues/2589", "issue_id": "#2589", "issue_summary": "Tests fail when FLASK_DEBUG is set", "issue_description": "Member\ndavidism commented on 11 Jan 2018\nI had a .flaskenv file for running an example, and when I tried to run the tests, one of them called app.run which called load_dotenv and changed the debug flag for future tests. Can also reproduce by just setting the env var and running in a terminal, without dotenv.\nNeed a pytest fixture to clear these vars at the beginning of the session, and to reset them after each test.\nWorking on this, just creating the issue for tracking.", "issue_status": "Closed", "issue_reporting_time": "2018-01-10T19:09:55Z", "fixed_by": "#2592", "pull_request_summary": "reset standard os env after each test", "pull_request_description": "Member\ndavidism commented on 11 Jan 2018 \u2022\nedited\nUses monkeypatch to unset env vars for the test session, and also reset them after each test in case they were changed without cleanup.\nThis doesn't affect Travis, but local tests will now pass if you happen to have a var set or a .flaskenv file.\ncloses #2589", "pull_request_status": "Merged", "issue_fixed_time": "2018-01-10T22:01:59Z", "files_changed": [["42", "tests/conftest.py"], ["19", "tests/test_cli.py"]]}, "477": {"issue_url": "https://github.com/pallets/flask/issues/2587", "issue_id": "#2587", "issue_summary": "Document SameSite cookie and add session support", "issue_description": "Member\ndavidism commented on 7 Jan 2018 \u2022\nedited\nWerkzeug added support, need to update the security docs to reflect this. Add a new config to set the value for the session cookie, possibly default it to true. ref #2030\n1", "issue_status": "Closed", "issue_reporting_time": "2018-01-07T17:53:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "478": {"issue_url": "https://github.com/pallets/flask/issues/2586", "issue_id": "#2586", "issue_summary": "Bump dependency versions", "issue_description": "Member\ndavidism commented on 7 Jan 2018 \u2022\nedited\nCurrently we require:\nWerkzeug>=0.9 (4.5 years ago) (latest 0.14)\nJinja2>=2.4 (8 years ago) (latest 2.10)\nitsdangerous>=0.21 (4.5 years ago) (latest 0.24)\nclick>=4.0 (3 years ago) (latest 6.0, stable 5.0)\nShould we bump these all to the latest versions?\n4", "issue_status": "Closed", "issue_reporting_time": "2018-01-06T21:24:42Z", "fixed_by": "#2622", "pull_request_summary": "bump dependency versions", "pull_request_description": "Member\ndavidism commented on 6 Feb 2018\ncloses #2586", "pull_request_status": "Merged", "issue_fixed_time": "2018-02-06T16:14:10Z", "files_changed": [["7", "CHANGES.rst"], ["19", "flask/helpers.py"], ["29", "setup.py"], ["6", "tox.ini"]]}, "479": {"issue_url": "https://github.com/pallets/flask/issues/2585", "issue_id": "#2585", "issue_summary": "Generic HTTPException error handler is not called due to logic error in _find_error_handler", "issue_description": "zackw commented on 6 Jan 2018\nExpected Behavior\nThe documentation leads me to believe that an error handler registered like so:\napp.config[\"TRAP_HTTP_EXCEPTIONS\"] = True\n@app.errorhandler(HTTPException)\ndef handle_http_error(err):\n    return flask.render_template(\"_error.html\",\n                                 errcode=err.code,\n                                 errname=err.name,\n                                 errdescription=err.description), err.code\n... should be called for any HTTP error. (The requirement to set TRAP_HTTP_EXCEPTIONS is inadequately clear, but that's an unrelated problem.)\nActual Behavior\nInstead, this configuration causes any HTTP error to turn into a 500 internal server error with this traceback:\n127.0.0.1 - - [06/Jan/2018 13:09:57] \"GET /fnord.html HTTP/1.1\" 500 -\nTraceback (most recent call last):\n  File \"/usr/lib/python3/dist-packages/flask/app.py\", line 1997, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/usr/lib/python3/dist-packages/flask/app.py\", line 1985, in wsgi_app\n    response = self.handle_exception(e)\n  File \"/usr/lib/python3/dist-packages/flask/app.py\", line 1540, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/usr/lib/python3/dist-packages/flask/_compat.py\", line 33, in reraise\n    raise value\n  File \"/usr/lib/python3/dist-packages/flask/app.py\", line 1982, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/usr/lib/python3/dist-packages/flask/app.py\", line 1614, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"/usr/lib/python3/dist-packages/flask/app.py\", line 1517, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/usr/lib/python3/dist-packages/flask/_compat.py\", line 33, in reraise\n    raise value\n  File \"/usr/lib/python3/dist-packages/flask/app.py\", line 1612, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"/usr/lib/python3/dist-packages/flask/app.py\", line 1598, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"/home/.../mysite.py\", line 35, in page\n    flask.abort(404)\n  File \"/usr/lib/python3/dist-packages/werkzeug/exceptions.py\", line 707, in abort\n    return _aborter(status, *args, **kwargs)\n  File \"/usr/lib/python3/dist-packages/werkzeug/exceptions.py\", line 687, in __call__\n    raise self.mapping[code](*args, **kwargs)\nI dug around in the debugger a little: this is from the perspective of the handle_user_exception frame:\n>>> self.error_handler_spec\n{None: {None: {<class 'werkzeug.exceptions.HTTPException'>: <function handle_http_error at 0x7fe7f49b4400>}}}\nMy application does not use blueprints, so the outer None in this structure is correct, and _find_error_handler understands it. However, the inner None does not correspond to any HTTP code, and so _find_error_handler is unable to pass through that layer of nesting and do the intended lookup by class.\nEnvironment\nPython version: 3.6.4\nFlask version: 0.12.2\nWerkzeug version: 0.13", "issue_status": "Closed", "issue_reporting_time": "2018-01-06T18:27:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "480": {"issue_url": "https://github.com/pallets/flask/issues/2578", "issue_id": "#2578", "issue_summary": "How to set up the flask listen backlog\uff1f", "issue_description": "wangfakang commented on 4 Jan 2018\nAs the title says, I didn't find the parameters to set the listen backlog.\ndef run(\n        self, host=None, port=None, debug=None, load_dotenv=True, **options\n    ):", "issue_status": "Closed", "issue_reporting_time": "2018-01-04T02:11:54Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "481": {"issue_url": "https://github.com/pallets/flask/issues/2576", "issue_id": "#2576", "issue_summary": "Body of 412 responses not sent", "issue_description": "Contributor\neruvanos commented on 3 Jan 2018 \u2022\nedited by davidism\nExpected Behaviour\nBody of a 412 response should be included on all Platforms.\n(Works on OS X, but not on linux system)\nfrom flask import Flask\napp = Flask(__name__)\n@app.route('/')\ndef r():\n    return 'This should be visible\\n', 412\napp.run('0.0.0.0', port=8080)\ncurl localhost:8080\n\n# Expected:\n# > 127.0.0.1 - - [03/Jan/2018 17:00:15] \"GET / HTTP/1.1\" 412 -\n# > This should be visible\nActual Behavior\nThe response does have an empty body if executed on a linux system. (docker-image python)\ncurl localhost:8080\n\n# Actual:\n# > 127.0.0.1 - - [03/Jan/2018 17:00:15] \"GET / HTTP/1.1\" 412 -\nEnvironment\nPython version: 3.6.4\nFlask version: 0.12.2\nWerkzeug version: 0.14.1", "issue_status": "Closed", "issue_reporting_time": "2018-01-03T17:09:23Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "482": {"issue_url": "https://github.com/pallets/flask/issues/2574", "issue_id": "#2574", "issue_summary": "Can't install flask on windows 10", "issue_description": "tibetegya commented on 2 Jan 2018 \u2022\nedited by ThiefMaster\nBelow is what i get when i try to install it\nC:\\Users\\TIBZY>pip install flask\nCollecting flask\n  Using cached Flask-0.12.2-py2.py3-none-any.whl\nCollecting itsdangerous>=0.21 (from flask)\n  Using cached itsdangerous-0.24.tar.gz\n    Complete output from command python setup.py egg_info:\n    running egg_info\n    creating pip-egg-info\\itsdangerous.egg-info\n    writing pip-egg-info\\itsdangerous.egg-info\\PKG-INFO\n    writing dependency_links to pip-egg-info\\itsdangerous.egg-info\\dependency_links.txt\n    writing top-level names to pip-egg-info\\itsdangerous.egg-info\\top_level.txt\n    writing manifest file 'pip-egg-info\\itsdangerous.egg-info\\SOURCES.txt'\n    error: [Errno 2] No such file or directory: 'c:\\\\users\\\\tibzy\\\\python36\\\\python36.zip\\\\lib2to3\\\\Grammar.txt'\n\n    ----------------------------------------\nCommand \"python setup.py egg_info\" failed with error code 1 in C:\\Users\\TIBZY\\AppData\\Local\\Temp\\pip-build-az__2i6f\\itsdangerous\\", "issue_status": "Closed", "issue_reporting_time": "2018-01-02T11:10:23Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "483": {"issue_url": "https://github.com/pallets/flask/issues/2573", "issue_id": "#2573", "issue_summary": "TypeError when serving static files (304 NOT MODIFIED)", "issue_description": "Vlad-Shcherbina commented on 1 Jan 2018\nRepro\nCreate minimal hello world application as in http://flask.pocoo.org/\nAlso create file /static/my_style.css with arbitrary content\nRun the application: FLASK_APP=hello.py flask run\nVisit http://localhost:5000/static/my_style.css\nRefresh the page to trigger \"not modified\" response\nExpected behavior\nOnly request log to appear in stderr:\n127.0.0.1 - - [31/Dec/2017 22:24:38] \"GET /static/my_style.css HTTP/1.1\" 200 -\n127.0.0.1 - - [31/Dec/2017 22:24:38] \"GET /favicon.ico HTTP/1.1\" 404 -\n127.0.0.1 - - [31/Dec/2017 22:24:43] \"GET /static/my_style.css HTTP/1.1\" 304 -\nActual behavior\nThe following also appears in stderr:\nError on request:\nTraceback (most recent call last):\n  File \"c:\\python36\\lib\\site-packages\\werkzeug\\serving.py\", line 270, in run_wsgi\n    execute(self.server.app)\n  File \"c:\\python36\\lib\\site-packages\\werkzeug\\serving.py\", line 263, in execute\n    write(b'')\n  File \"c:\\python36\\lib\\site-packages\\werkzeug\\serving.py\", line 232, in write\n    status < 200 or status in (204, 304)):\nTypeError: '<' not supported between instances of 'str' and 'int'\nWhen this happens, status is '304 NOT MODIFIED'.\nI think this defect became visible after 0c5cad57.\nEnvironment\nPython version: Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC v.1900 32 bit (Intel)] on win32\nFlask version: 0.12.2\nWerkzeug version: 0.14", "issue_status": "Closed", "issue_reporting_time": "2017-12-31T19:42:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "484": {"issue_url": "https://github.com/pallets/flask/issues/2572", "issue_id": "#2572", "issue_summary": "Override env var when using python-dotenv", "issue_description": "Member\ngreyli commented on 30 Dec 2017 \u2022\nedited\nCurrently, the env var in .env or .flaskenv will not override existing value. However, if a user installed python-dotenv and created a .flaskenv, he will expect the variables in .flaskenv override the old values. It's inconvenience when you develop multiple applications at the same time.\n1", "issue_status": "Closed", "issue_reporting_time": "2017-12-30T10:14:57Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "485": {"issue_url": "https://github.com/pallets/flask/issues/2571", "issue_id": "#2571", "issue_summary": "Flask app can't debug within jpype", "issue_description": "zhangjiajie023 commented on 27 Dec 2017 \u2022\nedited by ThiefMaster\nExpected Behavior\nDebugging a app with app.run(debug=True) should work, where started a JVM by jpype\nstartJVM(getDefaultJVMPath(), '-ea')\nif not isThreadAttachedToJVM():\n      attachThreadToJVM()\nActual Behavior\napp exited.\n#\n# A fatal error has been detected by the Java Runtime Environment:\n#\n#  SIGSEGV (0xb) at pc=0x00007fb74759d090, pid=8686, tid=140425282705152\n#\n# JRE version: Java(TM) SE Runtime Environment (7.0_79-b15) (build 1.7.0_79-b15)\n# Java VM: Java HotSpot(TM) 64-Bit Server VM (24.79-b02 mixed mode linux-amd64 compressed oops)\n# Problematic frame:\n# C  [_jpype.cpython-35m-x86_64-linux-gnu.so+0x65090]  JPJavaEnv::FindClass(char const*)+0x20\n#\n# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try \"ulimit -c unlimited\" before starting Java again\n#\n# An error report file with more information is saved as:\n# /home/jiajie/project/superset/superset/bin/hs_err_pid8686.log\n#\n# If you would like to submit a bug report, please visit:\n#   http://bugreport.java.com/bugreport/crash.jsp\n#\nEnvironment\nPython version: 3.5.2\nFlask version: 0.12.2\nWerkzeug version: 0.11.10\nJpype1 version: 0.6.2", "issue_status": "Closed", "issue_reporting_time": "2017-12-27T01:33:35Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "486": {"issue_url": "https://github.com/pallets/flask/issues/2569", "issue_id": "#2569", "issue_summary": "Flask Multi-Server Development Hooks", "issue_description": "Member\nmitsuhiko commented on 25 Dec 2017\nI don't have a good description for the issue yet but one of the issues I keep running into myself in 2017 is that it's not convenient to marry Flask and webpack. The issue here is that one wants to both have a server app as well as a client app and each uses a hot reloader for code.\nThere is a lot of boilerplate to make two services work and there is absolutely no support on the side of Flask to make it work. So here is what Flask most likely should do:\nEnvironment Awareness\nFlask needs to know about environments. For now I would propose to mirror the node model where we have an environment flag and depending on the environment flag some flags get flipped automatically. In development for instance we would turn on debug by default. This discourages apps to make too many assumptions about the debug flag but instead use an environment flag instead.\nThis means debug can be flipped on and off in development mode. A potential webpack integration extension can then forward that flag to webpack.\nProxy or be-proxied Capabilities\nRight now one either needs front/backend to be running different servers on different ports or use some manual proxy setup to make this work. Right now the webpack server can pass through to the Flask server but it's quite hacky and non trivial.\nIn an ideal case Flask in development mode can spawn another process (like a webpack server, ngrok etc.) and manage this process. It would work independently of the Flask reloader but shut down together.\nIf it spawns a process on a different port Flask should itself be proxied through that other server or proxy to another server if that's easier. This would most likely require that the Werkzeug server learns HTTP proxying as we might not be able to do this on the WSGI level.\n15", "issue_status": "Closed", "issue_reporting_time": "2017-12-25T17:48:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "487": {"issue_url": "https://github.com/pallets/flask/issues/2567", "issue_id": "#2567", "issue_summary": "`flask.g` not reset when using `test_client()` inside app context", "issue_description": "malthejorgensen commented on 21 Dec 2017\nUsing the test_client() inside an app context, seemingly prevents the flask.g-object from being reset.\nA test case like this\napp = flask.Flask(__name__)\n\n@app.route('/')\ndef index():\n    if hasattr(flask.g, 'value'):\n        flask.g.value += 1\n    else:\n        flask.g.value = 0\n    return bytes(flask.g.value)\n\nwith app.app_context():\n    with app.test_client() as client:\n        resp = client.get('/')\n        # `resp.data` will be '0'\n\n        resp = client.get('/')\n        # `resp.data` will be '1' here\nwill return '1' from the second request made by the test client. As the flask.g-object is local to the request, I would expect a '0' to be returned.\nThis may outside of the scope of supported use-cases, or simply the way it should behave. I can accept that, but I just wanted it here at least for future users.\nRationale for using test_client() inside an app context\nThe reason I do this is to be able to use url_for() inside my view tests, and have code like\nresponse = client.post(\n    url_for('blueprint_api.add_user'),\n    json={'name': 'John', 'email': 'john@example.org'},\n)\nBasically I believe that my view tests shouldn't be testing a hard-coded URL (the single source of truth for that should be the route), but rather the logic of the view function.\nEnvironment\nPython version: 2.7.13\nFlask version: 0.13.0\nWerkzeug version: 0.13", "issue_status": "Closed", "issue_reporting_time": "2017-12-21T14:08:43Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "488": {"issue_url": "https://github.com/pallets/flask/issues/2564", "issue_id": "#2564", "issue_summary": "session.new is never true", "issue_description": "d-ganchar commented on 19 Dec 2017\nAccording to the documentation, new attribute returns True if the session is new. Otherwise False, but it's not like that. How to reproduce:\nfrom flask import Flask, session\n\napp = Flask(__name__)\napp.config[\"SECRET_KEY\"] = \"thisisasecret\"\napp.config['SESSION_TYPE'] = 'filesystem'\n\n@app.route(\"/\")\ndef index():\n    if 'user_id' not in session:\n        session['user_id'] = 'jon'\n    print(session.new)\n    print(session.modified)\n    return 'testing sessions'\n# just for debugging\n@app.route(\"/clear\")\ndef clear():\n    session.clear()\n    return 'clear'\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\nRun app and call / endpoint twice. Output:\n127.0.0.1 - - [19/Dec/2017 16:18:20] \"GET /clear HTTP/1.1\" 200 -\nFalse # value of session.new\nTrue\n127.0.0.1 - - [19/Dec/2017 16:18:25] \"GET / HTTP/1.1\" 200 -\nFalse # value of session.new\nFalse\nAs I Understood when we initialize session, session.new should return True(when we call endpoint at first time). Is it right?\nEnvironment\nPython version: 2.7.13\nFlask version: 0.12.2\nWerkzeug version: 0.13\nLink to question on SO", "issue_status": "Closed", "issue_reporting_time": "2017-12-19T13:37:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "489": {"issue_url": "https://github.com/pallets/flask/issues/2563", "issue_id": "#2563", "issue_summary": "teardown_request not executing on first request in debug/uwsgi (works without debug)", "issue_description": "iScrE4m commented on 19 Dec 2017\nExpected Behavior\nGiven we have an app with a teardown_request and a route that always raises exception, when the app is first launched either with debug=True or through uWSGI, the teardown request should execute.\nfrom flask import Flask\n\napp = Flask(__name__)\n\n\n@app.teardown_request\ndef teardown(exc):\n    print('Teardown request executed')\n\n@app.route('/')\ndef error_route():\n    e = 3 / 0\n\nif __name__ == '__main__':\n    app.run(debug=True)\nActual Behavior\nInstead for the first request (in uWSGI case, for each worker's first request), the teardown does not execute. After few hours debugging with PyCharm the best information we can share (I hope it's actually useful) is that in flask.ctx.RequestContext.push() the _request_ctx_stack.top is None.\nEnvironment\nPython version: 3.5\nFlask version: 0.12.2\nWerkzeug version: 0.13", "issue_status": "Closed", "issue_reporting_time": "2017-12-19T12:57:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "490": {"issue_url": "https://github.com/pallets/flask/issues/2562", "issue_id": "#2562", "issue_summary": "app.run(debug=True) and @app.template_filter() Bug", "issue_description": "S1M0N38 commented on 19 Dec 2017\nI always use app.run(debug=True) during the developer session. When I update a .htlm file the server restart and you can see the change.\nNow I started to work with\n@app.template_filter()\nbut even if you are in the debug mode, if you change a .html file, you have to restart the server manually to see your change. I notice this weird behavior only when you define an @app.template_filter()\nEnvironment\nPython version: Python 3.5.2\nFlask version: 0.12.2\nWerkzeug version: 0.13\nJinja2 version: 2.10\nMarkupSafe version: 1.0\nBrowser : Chrome (version 63.0.3239.90)", "issue_status": "Closed", "issue_reporting_time": "2017-12-18T22:40:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "491": {"issue_url": "https://github.com/pallets/flask/issues/2550", "issue_id": "#2550", "issue_summary": "Some of tests fail on running pytest", "issue_description": "djmgit commented on 13 Dec 2017\nExpected Behavior\nOn running pytest all tests should pass.\nTo reproduce please execute pytest\nActual Behavior\n5 tests fail\nHere is the full output of pytest: https://paste.ubuntu.com/26177622/\nEnvironment\nPython version: 3.5.2", "issue_status": "Closed", "issue_reporting_time": "2017-12-13T17:12:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "492": {"issue_url": "https://github.com/pallets/flask/issues/2549", "issue_id": "#2549", "issue_summary": "\"Request.is_xhr deprecated\" warning during jsonify()", "issue_description": "simlu commented on 11 Dec 2017\nIt seems Request.is_xhr is deprecated. Getting warnings here... How do we fix this?\nflask.jsonify(**{...})\nFile \"/usr/local/lib/python2.7/site-packages/flask/json.py\", line 251, in jsonify\nif current_app.config['JSONIFY_PRETTYPRINT_REGULAR'] and not request.is_xhr:\nFile \"/usr/local/lib/python2.7/site-packages/werkzeug/local.py\", line 347, in __getattr__\nreturn getattr(self._get_current_object(), name)\nFile \"/usr/local/lib/python2.7/site-packages/werkzeug/wrappers.py\", line 689, in is_xhr\n), stacklevel=2)\nDeprecationWarning: Request.is_xhr is deprecated. Given that the X-Requested-With header is not a part of any spec, it is not reliable", "issue_status": "Closed", "issue_reporting_time": "2017-12-11T17:54:11Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "493": {"issue_url": "https://github.com/pallets/flask/issues/2547", "issue_id": "#2547", "issue_summary": "Document which servers support wsgi.input_terminated", "issue_description": "Contributor\nDiegoAlbertoTorres commented on 8 Dec 2017\nI learned from multiple issues (like postmanlabs/httpbin#340, pallets/werkzeug#1149, #367) that Flask developers are making a push to implement wsgi.input_terminated as a way for wsgi servers and apps to support chunked requests.\nHowever, it is extremely hard to navigate these issues and figure out what works and what does not. Is there an intention to document the support for this flag? This is a great feature, but from the user's perspective it is currently very hard to even figure out how it works. I propose at least keeping an issue alive with information on which environments will support it.\nHere is what worked for me:\nFlask 0.12.2 + Gunicorn 19.7.1\nFlask 0.12.2 + Werkzeug 0.13\nWhat did not work for me\nFlask 0.12.2 + uWSGI 2.0.15", "issue_status": "Closed", "issue_reporting_time": "2017-12-08T18:21:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "494": {"issue_url": "https://github.com/pallets/flask/issues/2546", "issue_id": "#2546", "issue_summary": "send_from_directory() and send_file() fails on Windows", "issue_description": "kuba-baku commented on 7 Dec 2017 \u2022\nedited\nOn Windows send_from_directory() fails because posix path from safe_join() and Windows path from current_app.root_path gets mixed up.\nI see problem in this line:\nflask/flask/helpers.py\nLine 691 in eb1c2fa\n filename = os.path.join(current_app.root_path, filename) \n\nE.g. running app from C:\\PythonApps\\FlaskApp:\nsend_from_directory(\"instance/data\", \"file1.txt\")\nfilename = safe_join(directory, filename)\n# filename == \"instance/data/file1.txt\"\nif not os.path.isabs(filename):\n        filename = os.path.join(current_app.root_path, filename)\n        # here's the problem -> filename == \"C:\\\\PythonApps\\\\FlaskApp\\\\instance/data/file1.txt\"\n    try:\n        if not os.path.isfile(filename):\n            # here it fails\n            raise NotFound()\nReturning posix path from safe join is imo ok (see #2284) but joining with non posix path fails.\nI think solution can be using os.path.normpath after joining path parts:\nfilename = os.path.normpath(os.path.join(current_app.root_path, filename))\nSame problem is with send_file():\nflask/flask/helpers.py\nLine 520 in d08d96a\n filename = os.path.join(current_app.root_path, filename) \nEnvironment\nPython version 3.5.4:\nFlask version 0.12.2:\nWerkzeug version 0.12.2:", "issue_status": "Closed", "issue_reporting_time": "2017-12-07T16:43:17Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "495": {"issue_url": "https://github.com/pallets/flask/issues/2545", "issue_id": "#2545", "issue_summary": "Treat errno.ENOTDIR like errno.EISDIR when silently absorbing IOErrors in config.from_pyfile (from_json, etc.)", "issue_description": "init-js commented on 7 Dec 2017 \u2022\nedited\nIn flask/config.py when loading a config file in silent=True mode, can you add ENOTDIR as part of the errnos that are absorbed?\nflask/flask/config.py\nLine 132 in 789715a\n if silent and e.errno in (errno.ENOENT, errno.EISDIR): \n(and the other similar lines)\nI've installed a package with pip, which stores its settings into directory ~/.grip as one of the potential locations to store its config flags. But the ubuntu package grip uses the same path as a regular file.\nWhen the python-grip tries config.from_pyfile(x, silent=True) to figure out its settings, it borks.\nIt's definitely a packaging bug with the grip tools to use the same path to store their settings (and I'll file that with them), but it remains that I believe in the case of loading config files, passing a non-existent file should silently fail. I don't see the case as being that different than EISDIR (which is already handled).\nI'm happy to do a pull request on this.\nExpected Behavior\nWhen loading a config with Config.from_pyfile() and friends, from a path in which a (non-basename) component in the path is a regular file, I would expect the config loading to silently fail when silent=True,\nPaste a minimal example that causes the problem.\n# I use Xresources here, because it probably already exists on most systems. but in my\n# case it's \".grip\".\nimport os, os.path\nimport flask\nAPPNAME = \"Xresources\"\nSETTINGS_FILE = os.path.expanduser(\n    os.path.join(\"~\", \".\" + APPNAME, \"settings.py\"))\n\ncfg = flask.Config(\".\")\n\n# borks -- ~/.Xresources already exists as a regular file\ncfg.from_pyfile(SETTINGS_FILE, silent=True)\nActual Behavior\nENOTDIR is not absorbed and is raised.\nPaste the full traceback if there was an exception.\nTraceback (most recent call last):\n  File \"sample.py\", line 11, in <module>\n    cfg.from_pyfile(SETTINGS_FILE, silent=True)\n  File \"/usr/local/lib/python2.7/dist-packages/flask/config.py\", line 129, in from_pyfile\n    with open(filename, mode='rb') as config_file:\nIOError: [Errno 20] Unable to load configuration file (Not a directory): \n'/home/me/.Xresources/settings.py'\nEnvironment\nPython version: 2.7.x\nFlask version: 0.12.2\nWerkzeug version: x", "issue_status": "Closed", "issue_reporting_time": "2017-12-07T02:20:54Z", "fixed_by": "#2581", "pull_request_summary": "silence ENOTDIR when loading config file", "pull_request_description": "Member\ndavidism commented on 5 Jan 2018\ncloses #2545", "pull_request_status": "Merged", "issue_fixed_time": "2018-01-05T15:55:41Z", "files_changed": [["8", "CHANGES"], ["4", "flask/config.py"]]}, "496": {"issue_url": "https://github.com/pallets/flask/issues/2544", "issue_id": "#2544", "issue_summary": "typos in docs/patterns/distribute page", "issue_description": "wlongxiang commented on 6 Dec 2017\nHi, I am currently using flask to build a small web service, and I was looking at this doc page about \"deploying flask using setuptools\", and found a minor issue.\nIn this chapter: Tagging Builds,\nthere is a missing double quote about the aliases settings, also it might be better to have newlines.\nThe correct formatting should be like below:\n\n@davidism", "issue_status": "Closed", "issue_reporting_time": "2017-12-06T09:50:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "497": {"issue_url": "https://github.com/pallets/flask/issues/2543", "issue_id": "#2543", "issue_summary": "SyntaxError: Non-UTF-8 code starting with '\\x90' in file flask.exe", "issue_description": "whg517 commented on 6 Dec 2017 \u2022\nedited\nExpected Behavior\nIn flask website use tutorials, in the third step flask run to run my web, appear this mistake.\nIn py files line first, I use the # - coding: utf-8 -- specified utf-8.\nI'm writing code in Pycharm. Start the web with the CMD run command.\nI copy the project directory into ubuntu and it works.\nNo related problems were found on the Internet.\nPlease give us some ideas and solve this problem.\nthank you\nBelow is a screenshot of the Pycharm\nTell us what should happen.\nkevin@DESKTOP-5KM5T43:~/workspaces/flaskr$ flask run\n * Serving Flask app \"flaskr\"\n * Forcing debug mode on\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n * Restarting with stat\n * Debugger is active!\n * Debugger PIN: 244-441-781\nActual Behavior\nTell us what happens instead.\nD:\\workspace\\development\\python\\WebProject\\flaskr>flask run\n * Serving Flask app \"flaskr\"\n * Forcing debug mode on\n * Restarting with stat\n  File \"D:\\ProgramData\\Anaconda3\\Scripts\\flask.exe\", line 1\nSyntaxError: Non-UTF-8 code starting with '\\x90' in file D:\\ProgramData\\Anaconda3\\Scripts\\flask.exe on line 1, but no encoding declared; see http://python.org/dev/peps/pep-0263/ for details\nEnvironment\nOperating system\nOS name: Microsoft Windows 10 professional edition\nOS version: 10.0.16299 temporary lack of Build 16299\nPython version:\nD:\\workspace\\development\\python\\WebProject\\flaskr>python --version\nPython 3.6.3 :: Anaconda, Inc.\nFlask version:\nD:\\workspace\\development\\python\\WebProject\\flaskr>python -m flask --version\nFlask 0.12.2\nPython 3.6.3 |Anaconda, Inc.| (default, Oct 15 2017, 03:27:45) [MSC v.1900 64 bit (AMD64)]\nWerkzeug version:\nWerkzeug (0.12.2)", "issue_status": "Closed", "issue_reporting_time": "2017-12-06T09:49:57Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "498": {"issue_url": "https://github.com/pallets/flask/issues/2539", "issue_id": "#2539", "issue_summary": "ImportError: cannot import name BooleanFiled", "issue_description": "yangchnet commented on 2 Dec 2017 \u2022\nedited by ThiefMaster\nExpected Behavior\nTell us what should happen.\nPaste a minimal example that causes the problem.\nfrom wtforms import StringField\nfrom wtforms import BooleanFiled\nActual Behavior\nTell us what happens instead.\nImportError: cannot import name BooleanFiled\nPaste the full traceback if there was an exception.\nEnvironment\nPython version:Anaconda 4.1.0\nFlask version:\nWerkzeug version:", "issue_status": "Closed", "issue_reporting_time": "2017-12-02T07:42:28Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "499": {"issue_url": "https://github.com/pallets/flask/issues/2535", "issue_id": "#2535", "issue_summary": "Update PyCharm instructions", "issue_description": "Member\ndavidism commented on 30 Nov 2017\n2017.3 added the ability to run modules instead of needing to find the flask executable in the virtualenv. The instructions in cli.rst should be updated to show selecting \"Module name:\" and then typing \"flask\".\ncc @doobeh", "issue_status": "Closed", "issue_reporting_time": "2017-11-30T15:18:23Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "500": {"issue_url": "https://github.com/pallets/flask/issues/2534", "issue_id": "#2534", "issue_summary": "export FLASK_APP=run.py doesn't recompile .pyc files (BUG)", "issue_description": "patientplatypus commented on 30 Nov 2017\nI noticed the following error while compiling something and it was irksome. Maybe it is worth looking at idk.\nThe issue is the following.\nSay I have the entrypoint to my app be main.py and I export it with export FLASK_APP=main.py. If I then later go back and rename the entrypoint run.py and export it, then sometimes flask will continue to use the main.pyc file which will break the application. It may be that this sometimes also occurs with other .pyc files in general, I am not sure - it irks me that previous .pyc files are not destroyed between FLASK_APP runs if shadowing is a possibility.\nJust thought I would point this out - it took me some debugging time and maybe it will save someone else a bit of time.\nThanks.", "issue_status": "Closed", "issue_reporting_time": "2017-11-29T20:52:16Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "501": {"issue_url": "https://github.com/pallets/flask/issues/2531", "issue_id": "#2531", "issue_summary": "0.12.2: two test failures", "issue_description": "0-wiz-0 commented on 25 Nov 2017\nWhen running the selftests for the 0.12.2 distfile from pypi on NetBSD 8.99.7/amd64 with python-3.6.3 and werkzeug 0.12.2, I see two failures:\n======================================================================================= ERRORS ========================================================================================\n____________________________________________________________________ ERROR at teardown of test_session_expiration _____________________________________________________________________\n\nrecwarn = WarningsRecorder(record=True)\n\n    @pytest.yield_fixture(autouse=True)\n    def catch_deprecation_warnings(recwarn):\n        yield\n        gc.collect()\n>       assert not recwarn.list\nE       assert not [<warnings.WarningMessage object at 0x7ede1af11d58>]\nE        +  where [<warnings.WarningMessage object at 0x7ede1af11d58>] = WarningsRecorder(record=True).list\n\nconftest.py:134: AssertionError\n====================================================================================== FAILURES =======================================================================================\n______________________________________________________________________________ test_no_error_swallowing _______________________________________________________________________________\n\nflaskext_broken = None\n\n    def test_no_error_swallowing(flaskext_broken):\n        with pytest.raises(ImportError) as excinfo:\n            import flask.ext.broken\n    \n>       assert excinfo.type is ImportError\nE       AssertionError: assert <class 'ModuleNotFoundError'> is ImportError\nE        +  where <class 'ModuleNotFoundError'> = <ExceptionInfo ModuleNotFoundError tblen=4>.type\n\ntest_ext.py:183: AssertionError\n============================================================== 1 failed, 314 passed, 10 skipped, 1 error in 7.12 seconds ==============================================================\n*** Error code 1", "issue_status": "Closed", "issue_reporting_time": "2017-11-25T12:23:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "502": {"issue_url": "https://github.com/pallets/flask/issues/2526", "issue_id": "#2526", "issue_summary": "Invalid range with send_file() and xsendfile causes ValueError", "issue_description": "Member\nThiefMaster commented on 23 Nov 2017 \u2022\nedited\nfrom flask import Flask, send_file\n\napp = Flask(__name__)\napp.use_x_sendfile = True\n\n\n@app.route('/')\ndef index():\n    return send_file('/etc/passwd', mimetype='text/plain', conditional=True)\nhttp get http://127.0.0.1:8009/ Range:bytes=10000- (the range needs to be invalid, so depending on the file sent the number needs to be higher) fails with this ValueError:\nTraceback (most recent call last):\n  File \"/home/adrian/dev/indico/env/lib/python2.7/site-packages/flask/app.py\", line 1982, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/home/adrian/dev/indico/env/lib/python2.7/site-packages/flask/app.py\", line 1614, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"/home/adrian/dev/indico/env/lib/python2.7/site-packages/flask/app.py\", line 1517, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/home/adrian/dev/indico/env/lib/python2.7/site-packages/flask/app.py\", line 1612, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"/home/adrian/dev/indico/env/lib/python2.7/site-packages/flask/app.py\", line 1598, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"/home/adrian/dev/indico/src/flasktest.py\", line 10, in index\n    return send_file('/etc/passwd', mimetype='text/plain', conditional=True)\n  File \"/home/adrian/dev/indico/env/lib/python2.7/site-packages/flask/helpers.py\", line 594, in send_file\n    file.close()\nAttributeError: 'NoneType' object has no attribute 'close'\nProbably just a missing if file is not None check.", "issue_status": "Closed", "issue_reporting_time": "2017-11-23T09:13:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "503": {"issue_url": "https://github.com/pallets/flask/issues/2524", "issue_id": "#2524", "issue_summary": "Docs for change default logging format / Log would print twice after add a stream handler", "issue_description": "eromoe commented on 22 Nov 2017 \u2022\nedited\nHello,\nflask stable version 0.12 , docs doesn't cover this. Only dev version has , which not work for 0.12.\nI want to change the logging format , after I add below code\n    steam_formatter = logging.Formatter(\"[STREAM][%(levelname)s][%(asctime)s][%(name)s][Line:%(lineno)d] %(message)s\")\n    stream_handler = logging.StreamHandler()\n    stream_handler.setLevel(logging.DEBUG)\n    stream_handler.setFormatter(steam_formatter)\n    app.logger.addHandler(stream_handler)\nI find flask would print two log message with different format . Soon I understand flask still keep its original stream handler . I think reset logging format should be clarified in stable docs.", "issue_status": "Closed", "issue_reporting_time": "2017-11-22T06:16:43Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "504": {"issue_url": "https://github.com/pallets/flask/issues/2523", "issue_id": "#2523", "issue_summary": "Missing import statement in \"Uploading Files\" doc section", "issue_description": "wrznr commented on 17 Nov 2017\nExpected Behavior\nExamples in the documentation should be running after copying them. In this case the import statement for the flash function is missing in the example code.\nActual Behavior\nRunning the example from Uploading Files results in\nNameError: global name 'flash' is not defined", "issue_status": "Closed", "issue_reporting_time": "2017-11-17T17:14:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "505": {"issue_url": "https://github.com/pallets/flask/issues/2521", "issue_id": "#2521", "issue_summary": "Flask.create_url_adapter should use SCRIPT_NAME, not APPLICATION_NAME", "issue_description": "ghost commented on 15 Nov 2017 \u2022\nedited by ghost\nWhen Flask.create_url_adapter is supplied with a request, it passes the request on to Map.bind_to_environment from werkzeug.routing. This will result in a call to Map.bind, where the script_name argument is set to the value of the environment variable SCRIPT_NAME.\nHowever, when it isn't supplied with a request, Flask.create_url_adapter will call Map.bind directly. Instead of SCRIPT_NAME, it passes the value of APPLICATION_NAME via the script_name argument. Per #1714, I understand that APPLICATION_NAME has nothing to do with routing. I guess this should change, but I'm not sure.\nI discovered this when debugging a tangentially related issue that turned out to be in my own code (I assumed MapAdapter could ultimately be used to translate whole URL paths to endpoints, but it seems I have to strip off SCRIPT_NAME myself).", "issue_status": "Closed", "issue_reporting_time": "2017-11-14T19:06:20Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "506": {"issue_url": "https://github.com/pallets/flask/issues/2518", "issue_id": "#2518", "issue_summary": "A strange error when a \u201c/a/b/c\u201d route render to a template", "issue_description": "MrKiven commented on 13 Nov 2017\nMacOS\nPython version: 2.7.10\nFlask version: 0.12.2\nWerkzeug version: 0.12.2\nI have a view function that render a html template named \"MyViewFunc\", then I add a route rule to this function app.add_url_rule(\"/a/b/c\", \"MyViewFunc\", MyViewFunc).\nThis caused a strange mistake in browser:\nBut when write as app.add_url_rule(\"/a\", \"MyViewFunc\", MyViewFunc), it's ok", "issue_status": "Closed", "issue_reporting_time": "2017-11-13T02:58:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "507": {"issue_url": "https://github.com/pallets/flask/issues/2517", "issue_id": "#2517", "issue_summary": "Exception while opening session causes auto_pop not to be executed on the context", "issue_description": "ottonello commented on 10 Nov 2017 \u2022\nedited\nExpected Behavior\nauto_pop of the request context should be executed regardless of whether an exception happened after pushing the context(for example, when opening a session).\nWe're using Redis sessions from flask_session:\ndef _setup_session(app):\n    from util.cache.region import cache_region\n    from dogpile.cache.backends.null import NullBackend\n    from flask_session import RedisSessionInterface\n\n    if not isinstance(cache_region.backend, NullBackend):\n        redis = cache_region.backend.client\n        session_interface = RedisSessionInterface(redis, 'test.session.', use_signer=False, permanent=False)\n        app.session_interface = session_interface\nActual Behavior\nThe request context is not popped whenever there is a timeout getting the session from Redis.\nWe can see in following requests the 'g' object still holds information from the failing request.\nIn ctx.py the context is first pushed and then the session is opened:\n        _request_ctx_stack.push(self)\n\n        # Open the session at the moment that the request context is\n        # available. This allows a custom open_session method to use the\n        # request context (e.g. code that access database information\n        # stored on `g` instead of the appcontext).\n        self.session = self.app.open_session(self.request)\nBut if open_session() fails, then ctx.auto_pop() is not executed. Perhaps ctx.push() should also be under the try...finally block in app.py?\nThis is the exception that triggers the context not to be popped:\nredis.exceptions:TimeoutError: Timeout reading from socket\nTraceback (most recent call last):\nFile \"/var/www/censored_production/env/lib/python2.7/site-packages/newrelic-2.74.0.54/newrelic/api/web_transaction.py\", line 738, in __iter__\nFile \"/var/www/censored_production/env/lib/python2.7/site-packages/newrelic-2.74.0.54/newrelic/api/web_transaction.py\", line 1114, in __call__\nFile \"/var/www/censored_production/env/lib/python2.7/site-packages/werkzeug/contrib/fixers.py\", line 152, in __call__\nFile \"/var/www/censored_production/www/censored/util/logging.py\", line 136, in __call__\nFile \"/var/www/censored_production/env/lib/python2.7/site-packages/flask/app.py\", line 1813, in wsgi_app\nFile \"/var/www/censored_production/env/lib/python2.7/site-packages/flask/ctx.py\", line 321, in push\nFile \"/var/www/censored_production/env/lib/python2.7/site-packages/flask/app.py\", line 825, in open_session\nFile \"/var/www/censored_production/env/lib/python2.7/site-packages/flask_session/sessions.py\", line 132, in open_session\nFile \"/var/www/censored_production/env/lib/python2.7/site-packages/newrelic-2.74.0.54/newrelic/hooks/datastore_redis.py\", line 67, in _nr_wrapper_Redis_method_\nFile \"/var/www/censored_production/env/lib/python2.7/site-packages/redis/client.py\", line 880, in get\nFile \"/var/www/censored_production/env/lib/python2.7/site-packages/redis/client.py\", line 573, in execute_command\nFile \"/var/www/censored_production/env/lib/python2.7/site-packages/redis/client.py\", line 585, in parse_response\nFile \"/var/www/censored_production/env/lib/python2.7/site-packages/redis/connection.py\", line 577, in read_response\nFile \"/var/www/censored_production/env/lib/python2.7/site-packages/redis/connection.py\", line 238, in read_response\nFile \"/var/www/censored_production/env/lib/python2.7/site-packages/redis/connection.py\", line 168, in readline\nFile \"/var/www/censored_production/env/lib/python2.7/site-packages/redis/connection.py\", line 139, in _read_from_socket\nEnvironment\nPython version: 2.7.6\nFlask version: 0.10.1\nWerkzeug version: 0.11.11\n1", "issue_status": "Closed", "issue_reporting_time": "2017-11-10T12:31:10Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "508": {"issue_url": "https://github.com/pallets/flask/issues/2516", "issue_id": "#2516", "issue_summary": "Minor bug in examples/flaskr/README", "issue_description": "Contributor\ndomandinho commented on 10 Nov 2017\nExpected Behavior\nLine which exports FLASK_APP ends with success.\nActual Behavior\nLine which exports FLASK_APP ends with error:\nbash syntax error near unexpected token ('\nPR: #2515", "issue_status": "Closed", "issue_reporting_time": "2017-11-09T22:02:10Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "509": {"issue_url": "https://github.com/pallets/flask/issues/2514", "issue_id": "#2514", "issue_summary": "Unable to generate the PDF version of the documentation", "issue_description": "Contributor\nmatrixise commented on 9 Nov 2017\ncommit rev: 470112d\npython: 3.6.2\nin the docs directory, just execute make latexpdf, there are issues with \\maketitle and an unicode char.\n(/usr/share/texlive/texmf-dist/tex/latex/hyperref/nameref.sty\n(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/gettitlestring.sty))\n! Undefined control sequence.\n\\maketitle ...tnoterule \\relax \\ifsphinxpdfoutput \n                                                  \\begingroup \\def \\\\{, } \\p...\nl.66 \\maketitle\n               \n? \n! Package inputenc Error: Unicode char \ud83c\udf89 (U+1F389)\n(inputenc)                not set up for use with LaTeX.\n\nSee the inputenc package documentation for explanation.\nType  H <return>  for immediate help.\n ...                                              \n                                                  \nl.20767 Celebrate \ud83c\udf89\n                      \n? \nCollected error summary (may duplicate other messages):\n  pdflatex: Command for 'pdflatex' gave return code 1\n      Refer to 'Flask.log' for details\nLatexmk: Use the -f option to force complete processing,\n unless error was exceeding maximum runs of latex/pdflatex.\nmake[1]: *** [Makefile:33: Flask.pdf] Error 12\nmake[1] : on quitte le r\u00e9pertoire \u00ab /home/stephane/src/github.com/pallets/flask/docs/_build/latex \u00bb\nmake: *** [Makefile:101: latexpdf] Error 2", "issue_status": "Closed", "issue_reporting_time": "2017-11-09T07:00:59Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "510": {"issue_url": "https://github.com/pallets/flask/issues/2513", "issue_id": "#2513", "issue_summary": "Rewrite tutorial and example", "issue_description": "Member\ndavidism commented on 9 Nov 2017 \u2022\nedited\nRewrite the tutorial and corresponding example, taking into account new and common patterns for Flask.\nexample\ntutorial\n1", "issue_status": "Closed", "issue_reporting_time": "2017-11-08T20:34:02Z", "fixed_by": "#2676", "pull_request_summary": "rewrite tutorial docs and example", "pull_request_description": "Member\ndavidism commented on 30 Mar 2018 \u2022\nedited\nThis is a complete rewrite of the tutorial, both the docs and the example code. The goal is to provide a better foundation for new developers to work with. There's a bit more code, and it's a bit more complex, but I'm hoping it sets up patterns and concepts better so that developers start with better habits.\nUse the application factory and blueprints from the start.\nUse the instance folder for config and the database.\nMultiple users, stored in the database with hashed passwords.\nDelete posts.\nBuild a Wheel file, install it in another virtualenv.\nOverride SECRET_KEY using config in the instance folder.\nUse other WSGI server in production (Waitress, since it works on Windows).\n100% test coverage using pytest and coverage.\nAll described code links to the API docs.\nGeneral reorganization.\nI've removed all the other examples. I'm going to add a JavaScript example back in but wanted to rewrite it as well. That will be the next PR. The other examples are all covered by the tutorial now.\nAdded a gh Sphinx role that adds links to GitHub files. It will select the correct tag on GitHub based on the docs version being built. I'll expand this to work with issues and extract it to pallets-sphinx-themes at some point.\nYou can find the rendered docs here: http://flask-dev.davidism.com/tutorial/. The only change is in the installation instructions, Flask needs to be installed from GitHub since 1.0 isn't released yet. You can find the example project on my branch: https://github.com/davidism/flask/tree/tutorial/examples/tutorial.\ncloses #2513\n7\n7\n7", "pull_request_status": "Merged", "issue_fixed_time": "2018-04-09T08:09:04Z", "files_changed": [["2", "CONTRIBUTING.rst"], ["BIN", "-64.7", "KB", "docs/_static/flaskr.png"], ["39", "docs/conf.py"], ["2", "docs/installation.rst"], ["6", "docs/patterns/jquery.rst"], ["16", "docs/patterns/packages.rst"], ["5", "docs/testing.rst"]]}, "511": {"issue_url": "https://github.com/pallets/flask/issues/2512", "issue_id": "#2512", "issue_summary": "Idea: `flask run`-like command for production", "issue_description": "Member\nThiefMaster commented on 7 Nov 2017\nSentry has this for example, and they simply run uWSGI (which can be installed via pip); configured with sane defaults through environment variables: https://github.com/getsentry/sentry/blob/master/src/sentry/services/http.py\nI think this would make sense for Flask too since it'd make simple use cases easier (people just wanting to run a small application without having to configure much).\nThis could be done in a separate standalone package providing a new cli command instead of having it in the Flask core, but I think having an issue here is a good idea anyway in case someone is looking for something to contribute.\n8\n2", "issue_status": "Closed", "issue_reporting_time": "2017-11-07T08:24:48Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "512": {"issue_url": "https://github.com/pallets/flask/issues/2511", "issue_id": "#2511", "issue_summary": "No documentation for how to test CLI commands", "issue_description": "fgblomqvist commented on 6 Nov 2017\nThere is currently no documentation for how to \"officially\" test Flask CLI commands. It seems appropriate that there should be a section about it on this page: http://flask.pocoo.org/docs/0.12/testing/.\nI know there was a previous issue (#1709) that got closed, but I do believe it is an issue that there is no documentation on this very important topic. Furthermore, it is also very hard to find information about how to do it online (that old issue is literally the only page I found that is relevant).", "issue_status": "Closed", "issue_reporting_time": "2017-11-06T07:54:29Z", "fixed_by": "#2611", "pull_request_summary": "document testing cli commands", "pull_request_description": "Member\ndavidism commented on 29 Jan 2018\ncloses #2511", "pull_request_status": "Merged", "issue_fixed_time": "2018-01-29T02:56:46Z", "files_changed": [["3", "docs/cli.rst"], ["47", "docs/testing.rst"]]}, "513": {"issue_url": "https://github.com/pallets/flask/issues/2510", "issue_id": "#2510", "issue_summary": "Improve README for flaskr example", "issue_description": "Bubblemelon commented on 5 Nov 2017\nPlease improve the readme file for the flaskr example.\nInclude more details on how to set it up, especially for step 1.\nI could not get step 3 to work probably because I didn't get step 1 to work. This is the error I'm getting:\n$ export FLASK_APP=flaskr.factory:create_app()\n-bash: syntax error near unexpected token (' `\nThanks !", "issue_status": "Closed", "issue_reporting_time": "2017-11-05T09:53:57Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "514": {"issue_url": "https://github.com/pallets/flask/issues/2508", "issue_id": "#2508", "issue_summary": "Provide a \"media\" route", "issue_description": "Member\ndavidism commented on 2 Nov 2017\nSimilar to the static route, add configuration and a route to serve uploaded files. Default to os.path.join(app.instance_path, 'uploads') and /media/<path:filename>. I've observed new developers thinking they should place user uploads in the static folder, which is not a good pattern (since that would be modifying package assets). A separate media folder will hopefully help with this.\n1", "issue_status": "Closed", "issue_reporting_time": "2017-11-02T15:10:27Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "515": {"issue_url": "https://github.com/pallets/flask/issues/2507", "issue_id": "#2507", "issue_summary": "Percent encoded forward slash is stil treated as a URL component delimiter", "issue_description": "heartsucker commented on 28 Oct 2017 \u2022\nedited\nExpected Behavior\nWhen a forward slash (/) is percent encoded, it should not be treated as a delimiter in a URL but instead should be treated as a string character.\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/<string:foo>')\ndef index(foo):\n    return foo\n\napp.run('localhost', 3000)\n$ curl localhost:3000/foo%2Fbar\nfoo/bar\nActual Behavior\n$ curl localhost:3000/foo%2Fbar\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again.</p>\nEnvironment\nPython version: Python 3.5.3\nFlask version: 0.12.2\nWerkzeug version: 0.12.2\nvenv:\nclick==6.7\nFlask==0.12.2\nitsdangerous==0.24\nJinja2==2.9.6\nMarkupSafe==1.0\nWerkzeug==0.12.2\nUse Case\nA website has the URL rule /<string:company>/<string:user>. Company names and users would have to have the slash character disallowed otherwise they would not be able to be cleanly represented as a URL.\nA Second Example\nA second issue that I assume is directly related is that url_for doesn't escape the forward slash.\nfrom flask import Flask, Markup, request, redirect, url_for\napp = Flask(__name__)\n\n@app.route('/', methods=('GET', 'POST'))\ndef index():\n    if request.method == 'POST':\n        return redirect(url_for('other', foo=request.form['foo'], bar=request.form['bar']))\n    else:\n        return Markup(\n            '''<form method=\"POST\">\n                 <input name=\"foo\" type=\"text\">\n                 <input name=\"bar\" type=\"text\">\n                 <input type=\"submit\" value=\"Submit\">\n               </form>\n            ''')\n\n\n@app.route('/other/<string:foo>/<string:bar>')\ndef other(foo, bar):\n    return '{}<br>{}'.format(foo, bar)\n\n\napp.run('localhost', 3000)\nIn the browser, submitting foo/moarfoo and bar into the two fields yields the URL /foo/moarfoo/bar instead of /foo%2Fmoarfoo/bar.", "issue_status": "Closed", "issue_reporting_time": "2017-10-28T15:13:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "516": {"issue_url": "https://github.com/pallets/flask/issues/2505", "issue_id": "#2505", "issue_summary": "Flask server not running on Arch Linux", "issue_description": "robsonsilv4 commented on 27 Oct 2017\nI get this error with: python -m app.py\nError while finding module specification for 'app.py' (AttributeError: module 'app' has no attribute 'path')\nand with python app.py nothing happening, either in venv or system.", "issue_status": "Closed", "issue_reporting_time": "2017-10-26T18:32:59Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "517": {"issue_url": "https://github.com/pallets/flask/issues/2503", "issue_id": "#2503", "issue_summary": "WAV files cannot play in Safari", "issue_description": "evanmiltenburg commented on 25 Oct 2017 \u2022\nedited\nExpected Behavior\nI'm trying to embed an audio player in my Flask website. Here's the relevant part of my index.html:\n<audio controls>\n<source src=\"/static/{{audio_file}}\" type=\"audio/wav\">\nYour browser does not support the audio element.\n</audio>\nThis works well in Firefox, but not in Safari.\nActual Behavior\nSafari does show the audio controls, but the audio doesn't load.\nI can download the file in Safari if I right-click the audio player.\n'Open audio in new window' gives me a window with the 'play' button with a line struck through, indicating that Safari cannot play the file.\nWhat's frustrating is that the exact same HTML (replacing {{audio_file}} with the actual filename) does work in Safari when I'm not using Flask (i.e. just opening static html in Safari). So something inside Flask keeps the audio from working.\nI just tried a different file type (mp3, using house_lo.mp3 copied from the pygame examples), and that works fine in Safari. So the problem only occurs when using .wav files. mp3 could solve the problem for me (just convert everything), but it's not ideal.\n<audio controls>\n<source src=\"/static/house_lo.mp3\" type=\"audio/mp3\">\nYour browser does not support the audio element.\n</audio>\nEnvironment\nPython version: 3.6.1 , Anaconda, OS X Sierra\nFlask version: 0.12\nWerkzeug version: 0.11.15\nI've posted this issue on StackOverflow as well.", "issue_status": "Closed", "issue_reporting_time": "2017-10-24T22:46:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "518": {"issue_url": "https://github.com/pallets/flask/issues/2501", "issue_id": "#2501", "issue_summary": "Add CODE OF CONDUCT", "issue_description": "ajiteshr7 commented on 24 Oct 2017\nIt is recommended by GitHub as a part of its community standards.\nAs it facilitates healthy and constructive community behavior.\nMore on this here.", "issue_status": "Closed", "issue_reporting_time": "2017-10-24T03:45:52Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "519": {"issue_url": "https://github.com/pallets/flask/issues/2498", "issue_id": "#2498", "issue_summary": "Flask uploaded files successfully and the database changed but can't find the uploaded file in in the server", "issue_description": "ym13349140 commented on 19 Oct 2017\nhi,I used Flask to upload files to the server,.while I was uploading,nothing went wrong and there were not any bugs either, after the file was uploaded,the database was also modified, but when uploading finished, I clicked on the file link to find that no corresponding file on the server so the downloading process failed.Actually,there was a judgment after uploading,only when the file saved successfully success that it would write the database, but now the result turned out to be opposite,so I don't know where went wrong.Can somebody have a look?\nmy upload file function\ndef upload_file(file_src, des_path, allowed_type=None):\n    if file_src.filename == '':\n        message = gettext('No selected file')\n        return False, message\n\n    extension = file_src.filename[file_src.filename.rfind('.')+1:]\n    file_type = extension_to_file_type(extension)\n    folder = des_path[:des_path.rfind('/')]\n\n    if not allowed_type:\n        allowed_type = current_app.config['ALLOWED_RESOURCE_TYPE']\n\n    if file_src and '.' in file_src.filename and file_type in allowed_type:\n        if not os.path.exists(folder):\n            os.makedirs(folder)\n        file_src.save(des_path)\n        unique_uri = os.stat(des_path).st_mtime\n        if os.path.exists(des_path):\n            return True, unique_uri\n        else:\n            message = gettext(\"Save File Failed!\")\n            return False, message\n    else:\n        message = gettext(\"Invalid file\")\n        return False, message\nPaste a minimal example that causes the problem.\nEnvironment\nPython version: 2.7.14\nFlask version: 0.11.1\nWerkzeug version:", "issue_status": "Closed", "issue_reporting_time": "2017-10-19T10:33:43Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "520": {"issue_url": "https://github.com/pallets/flask/issues/2497", "issue_id": "#2497", "issue_summary": "Support \"immutable\" Cache-Control extension", "issue_description": "mfr-itr commented on 18 Oct 2017 \u2022\nedited\nhttps://bitsup.blogspot.fr/2016/05/cache-control-immutable.html\nIt would mean adding the immutable attribute to ResponseCacheControl (default to False).", "issue_status": "Closed", "issue_reporting_time": "2017-10-18T09:16:05Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "521": {"issue_url": "https://github.com/pallets/flask/issues/2496", "issue_id": "#2496", "issue_summary": "Unable to execute Flask.", "issue_description": "sungjinp11 commented on 18 Oct 2017\ni installed flask and flask-ask . and then i wrote flask run command but error occured\nit says : Could not locate Flask application. You did not provide the FLASK_APP environment variable.\ni'm stuck here.\nplz help me.", "issue_status": "Closed", "issue_reporting_time": "2017-10-18T06:17:34Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "522": {"issue_url": "https://github.com/pallets/flask/issues/2495", "issue_id": "#2495", "issue_summary": "Support for Config(None) initialization", "issue_description": "dmulter commented on 18 Oct 2017\nExpected Behavior\nIt may be an unusual case, but I initialize Config objects just to load remote secure environment variables in addition to my normal app config loading. I've always just initialized with Config(None) under Python 2, but have just switched over to Python 3 and it throws an exception as described below. Note that the file is loaded into a local temp file.\nI can work around the problem by putting anything in for root_path, but it would be cleaner if I could pass None for the root_path. I would expect Flask to assume fully qualified paths for files if root_path is not set.\nconfig = Config(None)\nwith tempfile.NamedTemporaryFile() as s3_file:\n    if get_config_file(stage, s3_file.name):\n        config.from_pyfile(s3_file.name)\nActual Behavior\nThe os.path.join() call fails since the root_path is None.\n  File \"/app/config.py\", line 28, in _from_s3\n    config.from_pyfile(s3_file.name)\n  File \"/usr/lib/python3.6/site-packages/flask/config.py\", line 125, in from_pyfile\n    filename = os.path.join(self.root_path, filename)\n  File \"/usr/lib/python3.6/posixpath.py\", line 78, in join\n    a = os.fspath(a)\nTypeError: expected str, bytes or os.PathLike object, not NoneType\nEnvironment\nPython version: 3.6\nFlask version: 0.12.2\nWerkzeug version: 0.12.2", "issue_status": "Closed", "issue_reporting_time": "2017-10-17T20:30:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "523": {"issue_url": "https://github.com/pallets/flask/issues/2494", "issue_id": "#2494", "issue_summary": "The FlaskClient.open(test_client) parameter could be explict", "issue_description": "geekKeen commented on 16 Oct 2017 \u2022\nedited\nHi,\nI'm always confuse about keyword args in test method(GET, POST...).\nFor example, test post files or json, but I find solutions in StackOverFlow everytimes.\nI debug in source code, find FlaskClient.open and werkzeug.EnvironBuilder .\nMaybe, we could give some test demo in Testing and give more explict description in FakeClient.open like requests", "issue_status": "Closed", "issue_reporting_time": "2017-10-16T16:29:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "524": {"issue_url": "https://github.com/pallets/flask/issues/2489", "issue_id": "#2489", "issue_summary": "pickle and cPickle can't find class from import", "issue_description": "dav1nci commented on 10 Oct 2017\nExpected Behavior\ninside blueprints.flaskr.py from flask examples I add some code\nfrom foo import Foo\n\n@bp.route('/')\ndef index():\n    a = Foo()\n    print a\n    # a is valid Foo object, no error here\n    with open('some_pkl_file', 'rb') as f:\n        # Foo object in some_pkl_file\n        my_foo = cPickle.load(f)\n    print my_foo\n    # other things\nActual Behavior\ncPickle and pickle can't find Foo. Even after I installed foo as package. Looks like import inside flask application imports packages to some special namespace or context, where pickle or cPicke can't find them. I open this issue because I spent a day and didn't find any information about this. If someone know how to fix this, help me =)\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1997, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1985, in wsgi_app\n    response = self.handle_exception(e)\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1540, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1982, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1614, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1517, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1612, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1598, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"/path/flaskr/flaskr/blueprints/flaskr.py\", line 58, in index\n    my_foo = cPickle.load(f)\nAttributeError: 'module' object has no attribute 'Foo'\nEnvironment\nPython version: 2.7\nFlask version:0.12.2\nWerkzeug version:'0.12.2'", "issue_status": "Closed", "issue_reporting_time": "2017-10-10T15:39:57Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "525": {"issue_url": "https://github.com/pallets/flask/issues/2488", "issue_id": "#2488", "issue_summary": "\"flask_wtf.Form\" has been renamed to \"FlaskForm\" and will be removed in 1.0.", "issue_description": "balaraju1278 commented on 10 Oct 2017\nI working from i didn't face any issues but now i'm getting issues when i am submitting form data like this \"flask_wtf.Form\" has been renamed to \"FlaskForm\" and will be removed in 1.0.", "issue_status": "Closed", "issue_reporting_time": "2017-10-10T12:42:29Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "526": {"issue_url": "https://github.com/pallets/flask/issues/2487", "issue_id": "#2487", "issue_summary": "RE: Errors and BeagleBone Black/Flask and Python", "issue_description": "silver2row commented on 9 Oct 2017 \u2022\nedited\nHello,\nI have an issue. I am basically reading out of a book. I run a Debian Distro kernel 4.4.x on a beagleBone Black Wireless.\nI am using Adafruit_BBIO for software to hardware connections. Adafruit_BBIO is basically a Rasp. Pi build for the BBB with PWM, i2c, UART, ADC, and others.\nExpected Behavior of the Program:\nThis software runs a Flask app to allow me to know when, while online via 192.168.7.2:5000, someone has opened my door and for how long. I have followed some directions out of a book I purchased.\nThere is also a LED that should allow for dimming and brightening via Web address and a numerical value of that address.\nfrom flask import Flask, render_template\napp = Flask(__name__)\nimport Adafruit_BBIO.GPIO as GPIO\nimport Adafruit_BBIO.PWM as PWM\n\nPWM.start(\"P8_13\", 0.0)\n\n@app.route(\"/\")\ndef hello():\n    if GPIO.input(P8_11):\n        doorStatus = \"open\"\n    else:\n        doorStatus = \"closed\"\n    templateData = {\n        'doorStatus': doorStatus,\n    }\n    return render_template('main-door.html', **templateData)\n\n@app.route('/ledLevel/<level>')\ndef pin_state(level):\n    PWM.set_duty_cycle(\"P8_13\", float(level))\n    return \"LED level set to \" + \".\"\n\nif __name__ == \"__main__\":\n    app.run(host='192.168.7.2', port=5000, debug=True)\nI get an error code.\nException in thread Thread-1 (most likely raised during interpreter shutdown):\nTraceback (most recent call last):\n  File \"/usr/lib/python2.7/threading.py\", line 801, in __bootstrap_inner\n  File \"/usr/lib/python2.7/threading.py\", line 754, in run\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 702, in inner\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 539, in serve_forever\n  File \"/usr/lib/python2.7/SocketServer.py\", line 236, in serve_forever\n  File \"/usr/lib/python2.7/threading.py\", line 585, in set\n  File \"/usr/lib/python2.7/threading.py\", line 407, in notifyAll\n<type 'exceptions.TypeError'>: 'NoneType' object is not callable\nEnvironment\nPython version: 2.7.13\nFlask version: 0.12.2\nWerkzeug version: I cannot find what version is located on my system. I did find this when trying to sudo pip install flask: Werkzeug>=0.7\nSeth\nP.S. If you have time to review all this mess, please let me know. If you want me to look up items, please direct me. Thank you again for any support.", "issue_status": "Closed", "issue_reporting_time": "2017-10-09T00:47:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "527": {"issue_url": "https://github.com/pallets/flask/issues/2485", "issue_id": "#2485", "issue_summary": "running flask with debug mode throws an error", "issue_description": "timbicker commented on 8 Oct 2017\nExpected Behavior\nIf I active debug mode the program fails as is shown below. However with deactivated debug mode the program runs fine.\nfrom flask import Flask\n\napp = Flask(__name__)\n\n\n@app.route('/')\ndef hello_world():\n    return 'Hello World!'\n\n\nif __name__ == '__main__':\n    app.run()\nActual Behavior\n* Serving Flask app \"flask_hello_world\"\n * Forcing debug mode on\n * Restarting with stat\n  File \"C:\\Users\\Tim\\Anaconda3\\envs\\flaskr\\Scripts\\flask.exe\", line 1\nSyntaxError: Non-UTF-8 code starting with '\\x90' in file C:\\Users\\Tim\\Anaconda3\\envs\\flaskr\\Scripts\\flask.exe on line 1, but no encoding declared; see http://python.org/dev/peps/pep-0263/ for details\nEnvironment\nI am running it on Windows 10. Python and packages are installed through Anaconda.\nPython version: 3.6\nFlask version: 0.12.2\nWerkzeug version: 12.2", "issue_status": "Closed", "issue_reporting_time": "2017-10-08T12:10:10Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "528": {"issue_url": "https://github.com/pallets/flask/issues/2483", "issue_id": "#2483", "issue_summary": "AttributeError: 'module' object has no attribute 'app'", "issue_description": "leninworld commented on 4 Oct 2017 \u2022\nedited by ThiefMaster\nI pulled the latest master branch and ran \"python setup.py install\".\nThen, I tried to load flask.app.test_client(), but it fails.\nPlease let me know how to overcome this. Thank you!\nMOOLE04mac1231:flask moole04$ python\nPython 2.7.10 (default, Feb  7 2017, 00:08:15)\n[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.34)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import flaskr\n>>> t= flaskr.app.test_client()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'module' object has no attribute 'app'\n>>>", "issue_status": "Closed", "issue_reporting_time": "2017-10-04T15:37:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "529": {"issue_url": "https://github.com/pallets/flask/issues/2482", "issue_id": "#2482", "issue_summary": "TypeError: Decimal('1.600') is not JSON serializable", "issue_description": "biertie commented on 3 Oct 2017 \u2022\nedited\nI've encountered an avoidable bug in Flask's jsonify module.\nWhen trying to push a dictionary with includes one (or multiple) Decimal objects through jsonify we encounter the following error:\nTypeError: Decimal('1.600') is not JSON serializable\nI've traced back the error to the following python file:\n/usr/lib64/python2.7/site-packages/flask/json.py\nThe JSON module used by Flask comes from 'itsdangerous' which doesn't seem like a great idea, mostly because the version seems depreciated.\nSince a lot of users run queries from the database through jsonify it is not unthinkable that more users are facing this issue, and have to jump around in hoolaphoops to get it working.\nBy using the 'simplejson' module ( > 2.1 ; released on 11 Mar 2010) we can avoid this and use the 'use_decimals' option in simplejson.dump.\nThefore I would like to propose the following codechange in flask/json.py:\n[import statement]\n# Try to use the default simplejson implementation. This is good for performance and stability.\n# Otherwise use the same json implementation as itsdangerous on which we\n# depend anyways.\ntry:\n    import simplejson as _json\nexcept ImportError:\n    try:\n        from itsdangerous import simplejson as _json\n    except ImportError:\n        from itsdangerous import json as _json\nEnvironment\nPython version: 2.7\nFlask version: 0.12.2\nWerkzeug version: 0.12\nsimplejson version: 3.11.1", "issue_status": "Closed", "issue_reporting_time": "2017-10-03T09:43:05Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "530": {"issue_url": "https://github.com/pallets/flask/issues/2481", "issue_id": "#2481", "issue_summary": "stop travis irc notifications from forks", "issue_description": "Member\ndavidism commented on 30 Sep 2017\nSee travis-ci/travis-ci#1094 (comment) and\nmozilla/build-tools@c13a297. Using a secure value for the IRC channel prevents notifications from forks.", "issue_status": "Closed", "issue_reporting_time": "2017-09-30T16:38:18Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "531": {"issue_url": "https://github.com/pallets/flask/issues/2480", "issue_id": "#2480", "issue_summary": "Flask complete demo app", "issue_description": "cheikhnadiouf commented on 30 Sep 2017 \u2022\nedited by davidism\nHi all,\n[removed link]\nIf it can help you in study and practices, I would like to share with you a complete flask demo app, easy professional examples of common web services we can get with this great micro-framework flask ; Featurng bootstrap themes, authentication and backoffice admin, Secured admin panel, pagination, resources CRUD, modular structure, REST json responses or Html renders, some utils like config files for Nginx and Gunicorn and much more.\nEnvironment\nPython version: 2 and 3\nFlask version: 0.12\nWerkzeug version: 0.11.15", "issue_status": "Closed", "issue_reporting_time": "2017-09-30T15:31:28Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "532": {"issue_url": "https://github.com/pallets/flask/issues/2479", "issue_id": "#2479", "issue_summary": "Flask crashes on startup", "issue_description": "ignaloidas commented on 30 Sep 2017\nExpected Behavior\nThe app should've run\nany flask app really\nActual Behavior\nFlask didn't startup properly and threw an errorcode\n$ flask run\n* Serving Flask app \"falsker\"\n* Forcing debug mode on\n* Restarting with stat\nFile \"C:\\Anaconda3\\envs\\flaskui\\Scripts\\flask.exe\", line 1\nSyntaxError: Non-UTF-8 code starting with '\\x90' in file C:\\Anaconda3\\envs\\flaskui\\Scripts\\flask.exe on line 1, but no encoding declared; see http://python.org/dev/peps/pep-0263/ for details\nEnvironment\nPython version: 3.6.2 on Anaconda\nFlask version:0.12.2\nWerkzeug version:0.12.2", "issue_status": "Closed", "issue_reporting_time": "2017-09-30T08:12:25Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "533": {"issue_url": "https://github.com/pallets/flask/issues/2478", "issue_id": "#2478", "issue_summary": "Adding elements to a dictionary global to an app", "issue_description": "denysthegitmenace commented on 29 Sep 2017\nInside my flask app, I want to have a dictionary to which key-value pairs can be added throughout the app lifecycle.\nHere is what I am trying to do:\napp = Flask(__name__)\n\n@app.route('/incoming_key_value', methods=['POST'])\ndef add_dic_element():\n    global results\n    results[time.time()] = time.time()\n    print (results)\n    return 'OK'\n\nif __name__ == '__main__':\n    results = {'test':00000}\n    app.run()\nI want to add a key-value pair to the dictionary with every POST request.\nSo, after hitting add_dic_element function twice I would expect my results to look like this:\n{1506672672.252906: 1506672672.2529054, 1506672665.4726737: 1506672665.472673, 'test': 00000}\nBut regardless how many times I hit the add_dic_element function the results will only have the initial element and the last value added by add_dic_element. Like this:\n{1506672672.252906: 1506672672.2529054, 'test': 0}\nHow do I make so that I keep adding elements to the global dictionary?", "issue_status": "Closed", "issue_reporting_time": "2017-09-29T09:14:48Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "534": {"issue_url": "https://github.com/pallets/flask/issues/2474", "issue_id": "#2474", "issue_summary": "flask thread is always running, can't stop", "issue_description": "boringwork commented on 22 Sep 2017\nflask thread is always running, can't stop\nI use flask as http server, for Multi-threaded support, I set threaded=True, The Call Stack shows every thread is running and not cancel when function finished.\nAnd the memory has been growing until crashed.\n[2017-09-22 21:05:07,303] ERROR in app: Exception on /api [POST]\nTraceback (most recent call last):\n  File \"D:\\Program_Files\\Python\\Python2\\lib\\site-packages\\flask-0.12.2-py2.7.egg\\flask\\app.py\", line 1982, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"D:\\Program_Files\\Python\\Python2\\lib\\site-packages\\flask-0.12.2-py2.7.egg\\flask\\app.py\", line 1614, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"D:\\Program_Files\\Python\\Python2\\lib\\site-packages\\flask-0.12.2-py2.7.egg\\flask\\app.py\", line 1517, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"D:\\Program_Files\\Python\\Python2\\lib\\site-packages\\flask-0.12.2-py2.7.egg\\flask\\app.py\", line 1612, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"D:\\Program_Files\\Python\\Python2\\lib\\site-packages\\flask-0.12.2-py2.7.egg\\flask\\app.py\", line 1598, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"d:\\Workspace\\python\\ftp-server\\code\\Http_Server.py\", line 37, in api\n    for index in socket_map:\nRuntimeError: dictionary changed size during iteration\nEnvironment\nPython version: 2.7.13\nFlask version: flask-0.12.2-py2.7.egg\nWerkzeug version: werkzeug-0.12.2-py2.7.egg", "issue_status": "Closed", "issue_reporting_time": "2017-09-22T13:25:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "535": {"issue_url": "https://github.com/pallets/flask/issues/2473", "issue_id": "#2473", "issue_summary": "Error: The file/path provided (server) does not appear to exist. Please verify the path is correct.", "issue_description": "verhovsky commented on 19 Sep 2017 \u2022\nedited\nExpected Behavior\nWhen I import some_package_that_doesnt_exist I should get ImportError: No module named 'some_package_that_doesnt_exist', but something is swallowing the ImportError and assuming it means I mistyped the filename of my server code.\nfrom flask import Flask\napp = Flask(__name__)\n\nimport aoeu\nwhat happens\n$ export FLASK_APP='flask_error_demonstration.py'\n$ flask run\nUsage: flask run [OPTIONS]\n\nError: The file/path provided (flask_error_demonstration) does not appear to exist.  Please verify the path is correct.  If app is not on PYTHONPATH, ensure the extension is .py\nwhat should happen\n$ export FLASK_APP='flask_error_demonstration.py'\n$ flask run\nImportError: No module named 'aoeu'\nPython version: 3.5.3\nFlask version: 0.12.2", "issue_status": "Closed", "issue_reporting_time": "2017-09-19T14:18:06Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "536": {"issue_url": "https://github.com/pallets/flask/issues/2472", "issue_id": "#2472", "issue_summary": "nvm", "issue_description": "s2tu commented on 16 Sep 2017 \u2022\nedited\nNo description provided.", "issue_status": "Closed", "issue_reporting_time": "2017-09-15T18:37:42Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "537": {"issue_url": "https://github.com/pallets/flask/issues/2471", "issue_id": "#2471", "issue_summary": "Link to PDF version of docs on website is broken", "issue_description": "glyndon commented on 12 Sep 2017 \u2022\nedited\nWebsite link to PDF documentation is broken.\nhttp://flask.pocoo.org/docs/0.12/.latex/Flask.pdf", "issue_status": "Closed", "issue_reporting_time": "2017-09-12T17:42:52Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "538": {"issue_url": "https://github.com/pallets/flask/issues/2469", "issue_id": "#2469", "issue_summary": "url_for uses _request_ctx for its choice of default_methods, this seems wrong", "issue_description": "jeffrey commented on 9 Sep 2017\nIn response to a POST, I wanted to construct a URL pointing at a different URL (the home of the created object) which did NOT support POST.\nIt turns out, this doesn't work with Flask==0.12.2. The rule I want doesn't match, so I end up matching a less specific rule, with the distinguishing name treated as a parameter, not a path.\nWhat appears to be happening is that default method is being pulled out of _request_ctx early in url_for(). In this case, that method will be a POST.\nI'm not sure if defaulting to the request's current method is really desirable. How often are you responding to a POST and want url_for to respond with the best match for POST? I think typically most endpoints will respond to a GET, but many endpoints won't respond to a POST.\nThe workaround is to include the undocumented _method keyword argument. That will work (hopefully permanently), but I'd prefer:\nA) for this to be explicitly supported by the API, and\nB) I think the default should probably always be GET. My guess is that will be correct far more", "issue_status": "Closed", "issue_reporting_time": "2017-09-08T20:32:20Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "539": {"issue_url": "https://github.com/pallets/flask/issues/2468", "issue_id": "#2468", "issue_summary": "helpers.send_file doesn't close file", "issue_description": "xliiv commented on 8 Sep 2017 \u2022\nedited\nExpected Behavior\nsend_file closes the file which it opens\nhttps://github.com/pallets/flask/blob/0.12.2/flask/helpers.py#L549\nActual Behavior\nFile is not closed.\nTests are yelling:\ntests2.py:14: ResourceWarning: unclosed file <_io.BufferedReader name='path/tests2.py'>\n> python3 tests2.py \ntests2.py:14: ResourceWarning: unclosed file <_io.BufferedReader name='path/tests2.py'>\n  self.client.get('/')\n.\n----------------------------------------------------------------------\nRan 1 test in 0.012s\n\nOK\n\n> cat tests2.py \nimport unittest\nfrom flask import Flask\nfrom flask import current_app, send_from_directory\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return send_from_directory('.', __file__)\n\nclass TestCase(unittest.TestCase):\n    def test_x(self):\n        self.client = app.test_client()\n\n        self.client.get('/')\n\n\nif __name__ == '__main__':\n    unittest.main()\nEnvironment\nPython version: Python 3.5.3\nFlask version: Flask==0.12.2\nWerkzeug version: Werkzeug==0.12.2", "issue_status": "Closed", "issue_reporting_time": "2017-09-08T10:11:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "540": {"issue_url": "https://github.com/pallets/flask/issues/2466", "issue_id": "#2466", "issue_summary": "Flask Custom jinja2 extension caching template states after new request", "issue_description": "hyperking commented on 6 Sep 2017\nI'm Looking to create a similar custom extension to push any javascript code blocks to a designated area on the page or below footer.\nMy version works using Python 3.6,Flask and Jinja 2.9. However I have a major\nissue that occurs after changing the line number or content within the blocks.\nThe content will appear multiple times on render.\nfrom jinja2 import nodes\nfrom jinja2.ext import Extension\n\nclass JavascriptBuilderExtension(Extension):\n    tags = set(['push'])\n\n    def __init__(self, environment):\n        super(JavascriptBuilderExtension, self).__init__(environment)\n        self._myScope = {}\n        environment.extend(\n            pull = self._myScope\n            )\n    def parse(self, parser):\n        \"\"\"Parse tokens \"\"\"\n        tag = parser.stream.__next__()\n        args = [parser.parse_expression(), nodes.Const(tag.lineno)]\n        body = parser.parse_statements(['name:endpush'], drop_needle=True)\n        callback = self.call_method('compiled', args)\n        return nodes.CallBlock(callback,[], [], body).set_lineno(tag.lineno)\n\n    def compiled(self,tagname,linenum,caller):\n        tagname = \"{}_{}\".format( tagname, linenum)\n        self._myScope[tagname] = caller()\n        return \"<!-- moved {} from line {} -->\".format(tagname,linenum)\nMy template code looks like this\n<html> <head></head> <body> <h1>Test template</h1>\n{% push 'js' %} X {% endpush %}\n{% push 'html' %} Z {% endpush %}\n{% push 'js' %} Y {% endpush %}\n{{ pull }}\n</body> </html>\nMy rendered output is below:\n<html> <head></head> <body> <h1>Test template</h1>\nname = hyper testing jinja\ndate = right now\n<!-- moved js_4 from line 4 -->\n<!-- moved html_5 from line 5 -->\n<!-- moved js_6 from line 6 -->\n{'js_4': ' X ', 'html_5': ' Z ', 'js_6': ' Y '}\n</body> </html>\nThe Problem happens after I change the template block line number or content.\nAfter changing content and line numbers\n<html> <head></head> <body> <h1>Test template</h1>\n{% push 'js' %} ABC {% endpush %}\n\n{% push 'html' %} Z {% endpush %}\n\n{% push 'js' %} 123{% endpush %}\n{{ pull }}\n</body> </html>\nRender changed blocks now has prior content\n<html> <head></head> <body> <h1>Test template</h1>\nname = hyper testing jinja\ndate = right now\n<!-- moved js_4 from line 4 -->\n\n<!-- moved html_7 from line 7 -->\n\n<!-- moved js_9 from line 9 -->\n{'js_4': ' X ABC', 'html_5': ' Z ', 'js_6': ' Y ','js_9':'123','html_7':'Z'}\n</body> </html>\nThis issue causes duplicate content to be added into the response.\nIs there a way to call the extension on ever page request to re-parse the template for new changes? or Possible to not cache the enclosed extension blocks?\nI have already tried adding the code below to auto reload templates but does not help the issue.\napp.jinja_env.auto_reload = True\nEnvironment\nPython version: 3.6\nFlask version:0.10\nWerkzeug version:0.12.2", "issue_status": "Closed", "issue_reporting_time": "2017-09-06T12:52:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "541": {"issue_url": "https://github.com/pallets/flask/issues/2464", "issue_id": "#2464", "issue_summary": "flask hang up during debug mode enabled", "issue_description": "freeyssu commented on 5 Sep 2017 \u2022\nedited\nHi guys.\nWhen I tested the example code(hello world) with debug mode, the flask did NOT respond from web request.\nBut without debug mode, the code was working very well.\nI have tested both of python3 and python2 also a few version of flask.\nI cannot imagine what is the root cause..\nSomebody experienced this issue?\nEnvironment\nPython version: 3.6.2, 2.6\nFlask version: 0.12.2, 0.12, 0.11\nWerkzeug version: 0.12", "issue_status": "Closed", "issue_reporting_time": "2017-09-05T07:25:59Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "542": {"issue_url": "https://github.com/pallets/flask/issues/2462", "issue_id": "#2462", "issue_summary": "Missing module Markupsafe on \"flask run\"", "issue_description": "xgrimauu commented on 3 Sep 2017\nMigrated a project to Python3 and when using the \"Flask run\" command on the windows cmd it throws me a \"missing module\" error:\npytr\n(venv1) C:\\Users\\usrname\\projectfolder>flask run\nTraceback (most recent call last):\nFile \"c:\\users\\usrname\\appdata\\local\\programs\\python\\python36-32\\Lib\\runpy.py\", line 193, in run_module_as_main\n\"main\", mod_spec)\nFile \"c:\\users\\usrname\\appdata\\local\\programs\\python\\python36-32\\Lib\\runpy.py\", line 85, in run_code\nexec(code, run_globals)\nFile \"C:\\Users\\usrname\\Envs\\venv1\\Scripts\\flask.exe_main.py\", line 5, in\nFile \"c:\\users\\usrname\\envs\\venv1\\lib\\site-packages\\flask_init.py\", line 19, in\nfrom jinja2 import Markup, escape\nFile \"c:\\users\\usrname\\envs\\venv1\\lib\\site-packages\\jinja2_init_.py\", line 33, in\nfrom jinja2.environment import Environment, Template\nFile \"c:\\users\\usrname\\envs\\venv1\\lib\\site-packages\\jinja2\\environment.py\", line 15, in\nfrom jinja2 import nodes\nFile \"c:\\users\\usrname\\envs\\venv1\\lib\\site-packages\\jinja2\\nodes.py\", line 19, in\nfrom jinja2.utils import Markup\nFile \"c:\\users\\usrname\\envs\\venv1\\lib\\site-packages\\jinja2\\utils.py\", line 624, in\nfrom markupsafe import Markup, escape, soft_unicode\nFile \"c:\\users\\usrname\\envs\\venv1\\lib\\site-packages\\markupsafe_init_.py\", line 14, in\nfrom markupsafe._compat import text_type, string_types, int_types,\nModuleNotFoundError: No module named 'markupsafe._compat'\nHowever markupsafe is installed in the venv:\n(venv1) >pip show markupsafe\nName: MarkupSafe\nVersion: 1.0\nSummary: Implements a XML/HTML/XHTML Markup safe string for Python\nHome-page: http://github.com/pallets/markupsafe\nAuthor: Armin Ronacher\nAuthor-email: armin.ronacher@active-4.com\nLicense: BSD\nLocation: c:\\users...\\lib\\site-packages\nRequires:\nEnvironment\nPython version: 3.6\nFlask version: 0.12.2\nWerkzeug version: 0.12.2", "issue_status": "Closed", "issue_reporting_time": "2017-09-03T17:43:05Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "543": {"issue_url": "https://github.com/pallets/flask/issues/2461", "issue_id": "#2461", "issue_summary": "Command to set FLASK_APP variable in flask/examples/flasker README is not compatible with released version of Flask(0.12.2)", "issue_description": "prasadghagare commented on 3 Sep 2017\nExpected Behavior\nIn README of the example of flask/examples/flasker has following step to set FLASK_APP env variable:\nexport FLASK_APP=flaskr.factory:create_app()\nNext step is to initialize the DB:\nAnd it should produce output as follows:\nInitialized the database.\nActual Behavior\nThis method to set FLASK_APP env is not compatible with the current released version of flask.\nIf set this way following error is observed while running next step \"flask initdb\":\nRuntimeError: Failed to find application in module \"flaskr.factory\".\nThe issue is resolved in master branch. Still, this being starting example for many people, should be corrected.\nflask initdb\nTraceback (most recent call last):\n  File \"/Users/prasadghagare/Desktop/projects/repo/.my_env/bin/flask\", line 11, in <module>\n    sys.exit(main())\n  File \"/Users/prasadghagare/Desktop/projects/repo/.my_env/lib/python2.7/site-packages/flask/cli.py\", line 513, in main\n    cli.main(args=args, prog_name=name)\n  File \"/Users/prasadghagare/Desktop/projects/repo/.my_env/lib/python2.7/site-packages/flask/cli.py\", line 380, in main\n    return AppGroup.main(self, *args, **kwargs)\n  File \"/Users/prasadghagare/Desktop/projects/repo/.my_env/lib/python2.7/site-packages/click/core.py\", line 697, in main\n    rv = self.invoke(ctx)\n  File \"/Users/prasadghagare/Desktop/projects/repo/.my_env/lib/python2.7/site-packages/click/core.py\", line 1061, in invoke\n    cmd_name, cmd, args = self.resolve_command(ctx, args)\n  File \"/Users/prasadghagare/Desktop/projects/repo/.my_env/lib/python2.7/site-packages/click/core.py\", line 1100, in resolve_command\n    cmd = self.get_command(ctx, cmd_name)\n  File \"/Users/prasadghagare/Desktop/projects/repo/.my_env/lib/python2.7/site-packages/flask/cli.py\", line 351, in get_command\n    rv = info.load_app().cli.get_command(ctx, name)\n  File \"/Users/prasadghagare/Desktop/projects/repo/.my_env/lib/python2.7/site-packages/flask/cli.py\", line 237, in load_app\n    rv = locate_app(self.app_import_path)\n  File \"/Users/prasadghagare/Desktop/projects/repo/.my_env/lib/python2.7/site-packages/flask/cli.py\", line 109, in locate_app\n    % module)\nRuntimeError: Failed to find application in module \"flaskr.factory\"\nEnvironment\nPython version: 2.7.13\nFlask version: 0.12.2\nWerkzeug version: 0.7", "issue_status": "Closed", "issue_reporting_time": "2017-09-03T13:06:17Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "544": {"issue_url": "https://github.com/pallets/flask/issues/2460", "issue_id": "#2460", "issue_summary": "Apps importing grequests crash when a restart/reload is attempted", "issue_description": "bpaterni commented on 2 Sep 2017 \u2022\nedited\nExpected Behavior\nFlask apps run in debug mode (importing grequests) should reload when filesystem changes are detected.\nActual Behavior\nInstead, the following app crashes as changes are introduced and an app reload is attempted. Oddly enough, if the app is started with grequests commented out, and then uncommented, reloads process successfully.\nimport flask              \n\nimport grequests          \nimport sys                \n\napp = flask.Flask(__name__)                          \napp.debug = True          \n\n@app.route('/syspath')    \ndef syspath():            \n    return '\\n'.join(sys.path) + '\\n'       \n$ FLASK_APP=demo.py FLASK_DEBUG=1 flask run --host=0.0.0.0\n * Serving Flask app \"demo\"                          \n * Forcing debug mode on                             \n * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)                                                 \n * Restarting with stat                              \n * Debugger is active!                               \n * Debugger PIN: 313-109-065                         \n * Detected change in '/home/bpaterni/usr/local/src/python/flask-app-restart-demo/demo.py', reloading     \n * Restarting with stat                              \nTraceback (most recent call last):                   \n  File \"/home/bpaterni/usr/local/src/python/venvs/venv-01/bin/flask\", line 11, in <module>                \n    sys.exit(main())                                 \n  File \"/home/bpaterni/usr/local/src/python/venvs/venv-01/lib/python3.5/site-packages/flask/cli.py\", line 513, in main                                                                                              \n    cli.main(args=args, prog_name=name)              \n  File \"/home/bpaterni/usr/local/src/python/venvs/venv-01/lib/python3.5/site-packages/flask/cli.py\", line 380, in main                                                                                              \n    return AppGroup.main(self, *args, **kwargs)      \n  File \"/home/bpaterni/usr/local/src/python/venvs/venv-01/lib/python3.5/site-packages/click/core.py\", line 697, in main                                                                                             \n    rv = self.invoke(ctx)                            \n  File \"/home/bpaterni/usr/local/src/python/venvs/venv-01/lib/python3.5/site-packages/click/core.py\", line 1066, in invoke                                                                                          \n    return _process_result(sub_ctx.command.invoke(sub_ctx))                                               \n  File \"/home/bpaterni/usr/local/src/python/venvs/venv-01/lib/python3.5/site-packages/click/core.py\", line 895, in invoke                                                                                           \n    return ctx.invoke(self.callback, **ctx.params)   \n  File \"/home/bpaterni/usr/local/src/python/venvs/venv-01/lib/python3.5/site-packages/click/core.py\", line 535, in invoke                                                                                           \n    return callback(*args, **kwargs)                 \n  File \"/home/bpaterni/usr/local/src/python/venvs/venv-01/lib/python3.5/site-packages/click/decorators.py\", line 64, in new_func                                                                                    \n    return ctx.invoke(f, obj, *args[1:], **kwargs)   \n  File \"/home/bpaterni/usr/local/src/python/venvs/venv-01/lib/python3.5/site-packages/click/core.py\", line 535, in invoke                                                                                           \n    return callback(*args, **kwargs)                 \n  File \"/home/bpaterni/usr/local/src/python/venvs/venv-01/lib/python3.5/site-packages/flask/cli.py\", line 438, in run_command                                                                                       \n    use_debugger=debugger, threaded=with_threads)    \n  File \"/home/bpaterni/usr/local/src/python/venvs/venv-01/lib/python3.5/site-packages/werkzeug/serving.py\", line 737, in run_simple                                                                                 \n    reloader_type)                                   \n  File \"/home/bpaterni/usr/local/src/python/venvs/venv-01/lib/python3.5/site-packages/werkzeug/_reloader.py\", line 265, in run_with_reloader                                                                        \n    sys.exit(reloader.restart_with_reloader())       \n  File \"/home/bpaterni/usr/local/src/python/venvs/venv-01/lib/python3.5/site-packages/werkzeug/_reloader.py\", line 124, in restart_with_reloader                                                                    \n    close_fds=False)                                 \n  File \"/home/bpaterni/usr/local/src/python/venvs/venv-01/lib/python3.5/site-packages/gevent/subprocess.py\", line 234, in call                                                                                      \n    with Popen(*popenargs, **kwargs) as p:           \n  File \"/home/bpaterni/usr/local/src/python/venvs/venv-01/lib/python3.5/site-packages/gevent/subprocess.py\", line 554, in __init__                                                                                  \n    restore_signals, start_new_session)              \n  File \"/home/bpaterni/usr/local/src/python/venvs/venv-01/lib/python3.5/site-packages/gevent/subprocess.py\", line 1160, in _execute_child                                                                           \n    self.pid = fork_and_watch(self._on_child, self._loop, True, fork)                                     \n  File \"/home/bpaterni/usr/local/src/python/venvs/venv-01/lib/python3.5/site-packages/gevent/os.py\", line 375, in fork_and_watch                                                                                    \n    watcher = loop.child(pid, ref=ref)               \n  File \"gevent.libev.corecext.pyx\", line 518, in gevent.libev.corecext.loop.child (src/gevent/libev/gevent.corecext.c:7601)                                                                                         \n  File \"gevent.libev.corecext.pyx\", line 1886, in gevent.libev.corecext.child.__init__ (src/gevent/libev/gevent.corecext.c:21676)                                                                                   \nTypeError: child watchers are only available on the default loop\nEnvironment\nPython version: 3.5.4\nFlask version: 0.12.2\nWerkzeug version: 0.12.2\ngrequests: 0.3.0\ngevent version: 1.2.2\nClick version: 6.7", "issue_status": "Closed", "issue_reporting_time": "2017-09-02T16:48:32Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "545": {"issue_url": "https://github.com/pallets/flask/issues/2459", "issue_id": "#2459", "issue_summary": "jsonify() silently strips timezone from datetime objects", "issue_description": "codl commented on 31 Aug 2017\nExpected Behavior\nWhen given a tz-aware datetime object, I would expect jsonify to either raise an exception (because there is no native representation of a datetime in json) or at least convert it to a string format while keeping the timezone intact\nimport flask\nfrom datetime import datetime, timezone, timedelta\n\napp = flask.Flask(__name__)\n\n@app.route('/')\ndef index():\n    tz = timezone(timedelta(hours=2))\n    t = datetime(2017, 1, 1, 12, 0, 0, tzinfo=tz)\n    return flask.jsonify(t)\n\nwith app.app_context():\n    resp = app.test_client().get('/')\n    print(resp.data)\nActual Behavior\nThe datetime object is converted to a RFC 1123 date string, ignoring the timezone entirely and assuming GMT\nb'\"Sun, 01 Jan 2017 12:00:00 GMT\"\\n'\nEnvironment\nPython version: 3.6\nFlask version: 0.12.2\nWerkzeug version: 0.12.2", "issue_status": "Closed", "issue_reporting_time": "2017-08-31T15:55:55Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "546": {"issue_url": "https://github.com/pallets/flask/issues/2458", "issue_id": "#2458", "issue_summary": "Float converter does not match number values lacking a decimal", "issue_description": "nathan-rice commented on 31 Aug 2017\nThe behavior of the float converter not matching decimal-less values is a poor choice in my opinion. The problem is that Javascript lacks separate number types, and it will happily produce decimal-less number values from operations on several floating point values (e.g. 0.5 + 0.5). As a result, some combinations of user input cause a route with a float converter to fail to resolve.\nI think better behavior would be for the float converter to match decimal-less values, but at a lower priority than the integer converter. This would avoid the problem edge case route failures while still letting people define overlapping routes if they really wanted to.\nEnvironment\nPython version: 3.6.1\nFlask version: 0.12.2\nWerkzeug version: 0.12.2", "issue_status": "Closed", "issue_reporting_time": "2017-08-31T14:59:01Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "547": {"issue_url": "https://github.com/pallets/flask/issues/2456", "issue_id": "#2456", "issue_summary": "The request method to another website in views function didn't run correctly", "issue_description": "peakhell commented on 29 Aug 2017 \u2022\nedited\nUnexpected Behavior\nI have a simple function to get json data from a website using \"POST\" method, for convenience, I save it as get_music.py file. Here is the code.\nimport requests\ndef get_music():\n baseUrl = \"http://music.163.com/api/search/get/\"\n parameters = {\n     's': \"acg\",\n     'limit': 100,\n     'type': 1\n }\n response = requests.post(baseUrl, data=parameters)\n answer = response.json()\n return answer\nand when we call the function, a json data will returned, that's no problems. But when i call it in the views function, things become strange. here is views.py.\nfrom .get_music import get_music\nfrom flask import render_template\nfrom . import main\n\n@main.route('/', methods=['GET', 'POST'])\ndef index():\n    music = get_music()\n    return render_template(\"index.html\", music=music)\nWhen I run the flask program, the json data is \" {'msg': \"Request method 'GET' not supported\", 'code': 400}\", it's not correct.\nAfter debug i found the request method is \"GET\" when i use flask, but if run the get_music.py without flask , the request method is \"POST\". it's any problem in views funtion change the request method?", "issue_status": "Closed", "issue_reporting_time": "2017-08-29T02:35:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "548": {"issue_url": "https://github.com/pallets/flask/issues/2455", "issue_id": "#2455", "issue_summary": "The link for downloadable PDF documentation is not working", "issue_description": "Itisfilipe commented on 28 Aug 2017\nI have tried to download the documentation in PDF from the official site (http://flask.pocoo.org/) and the link there (http://flask.pocoo.org/docs/0.12/.latex/Flask.pdf) is returning error 404.", "issue_status": "Closed", "issue_reporting_time": "2017-08-28T00:07:31Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "549": {"issue_url": "https://github.com/pallets/flask/issues/2453", "issue_id": "#2453", "issue_summary": "Cannot login with Google provider", "issue_description": "wushaobo commented on 24 Aug 2017\nThe link http://flask.pocoo.org/login/?provider=google will not redirect to anywhere for me to input the OpenID from my google account.\nIf I paste the OpenID from google into the http://flask.pocoo.org/login page, the following error message is always shown.\nError: The OpenID was invalid\nIs this a bug? How to login with google?", "issue_status": "Closed", "issue_reporting_time": "2017-08-24T01:30:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "550": {"issue_url": "https://github.com/pallets/flask/issues/2452", "issue_id": "#2452", "issue_summary": "Feature request : Highlight 'user code' in traceback interpreter output", "issue_description": "elliotwoods commented on 22 Aug 2017 \u2022\nedited\nExpected Behavior\nIn debug mode, a very helpful call trace page comes up when an exception is thrown. Thanks for that!\nA quick improvement would be to highlight the blocks which represent user's code. I believe this would give a decent speed boost when recognizing where errors come from. I think this could be as simple as giving a light red-tint on any code boxes which comes from the file defined in the FLASK_APP variable.\nThis would be unobtrusive, and would help speed up use for many users.\ne.g. we could highlight this line:\nAlternatively, the call trace could automatically collapse the 'app runner' code which the user is likely uninterested in.\nApologies if this place is for bugs only (not features)", "issue_status": "Closed", "issue_reporting_time": "2017-08-22T13:12:06Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "551": {"issue_url": "https://github.com/pallets/flask/issues/2451", "issue_id": "#2451", "issue_summary": "Dynamically appending templates one after another", "issue_description": "RutujaWanjari commented on 21 Aug 2017 \u2022\nedited\nHi all,\nI am building a chatbot. There are few child templates like login.html, messages.html, transaction.html, etc. I want to append these templates in base.html. I am extending base.html in all these templates. My problem is only one template is rendered at a time. Is there any solution for appending these templates one after another? I have used {%include%} but it's a static approach. I need dynamic.\nprinter.py looks like -\n@app.route('/respond', methods=['GET','POST'])\ndef respond_def():\nmessage = request.form['message_input']\nif message == \"l\":\nreturn render_template('printer/login.html')\nelif message == \"t\":\nreturn render_template('printer/transactionID.html')\nbase.html looks like -\n//some code here\n{% block template %}{% endblock %}\n//some code here\nmessage.html looks like -\n{% extends \"base.html\" %}\n{% block template %}\nMessage template called\n{% endblock %}", "issue_status": "Closed", "issue_reporting_time": "2017-08-21T12:08:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "552": {"issue_url": "https://github.com/pallets/flask/issues/2449", "issue_id": "#2449", "issue_summary": "Flask Python3 ?", "issue_description": "pypycoder commented on 16 Aug 2017\nIs Flask Python3 compatible ?\n3", "issue_status": "Closed", "issue_reporting_time": "2017-08-16T15:04:30Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "553": {"issue_url": "https://github.com/pallets/flask/issues/2448", "issue_id": "#2448", "issue_summary": "Changing SESSION_COOKIE_NAME invalidates session cookies earlier than permanent_session_lifetime", "issue_description": "ginkoid commented on 15 Aug 2017 \u2022\nedited\nExpected Behavior\nNormally, if you want a permanent cookie, you can set\nsession.permanent = True\napp.permanent_session_lifetime = datetime.timedelta(weeks=156)  # 3 years\nHowever, if you also change SESSION_COOKIE_NAME in app.config to something else, this should only change the name of the cookie, however, it also makes the session cookies invalidate after a browser session, not the permanent_session_lifetime.\nDemo:\nimport datetime\nfrom flask import Flask, session\n\napp = Flask(__name__)\napp.secret_key = 'super_secret'\n\n@app.before_request\ndef settings():\n    app.config['PERMANENT_SESSION_LIFETIME'] = datetime.timedelta(weeks=156)  # 3 years\n    # app.config['SESSION_COOKIE_NAME'] = 'other_name'\n\n@app.route('/')\ndef index():\n    if 'test' in session:\n        return 'You have a cookie'\n    return 'You do not have a cookie'\n    \n@app.route('/get_cookie')\ndef get_cookie():\n    session['test'] = 'testcookie'\n    return 'Cookie sent'\n\napp.run()\nActual Behavior\nIf you run the above script, and visit /get_cookie, then visit /, notice that it works as expected. You can also close and reopen the browser, and the cookie stays, as expected, because of the permanent_session_lifetime.\nHowever, if you uncomment the bit that sets the SESSION_COOKIE_NAME, then re-run the script, and follow the above steps again (including reopening the browser), you will notice that the session is invalidated upon reopening the browser.\nEnvironment\nPython version: 3.5.2\nFlask version: 0.12.2\nWerkzeug version: 0.12.2", "issue_status": "Closed", "issue_reporting_time": "2017-08-15T14:16:34Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "554": {"issue_url": "https://github.com/pallets/flask/issues/2444", "issue_id": "#2444", "issue_summary": "While streaming back long responses, Flask loses encodings or alters the stream", "issue_description": "priyaananthasankar commented on 9 Aug 2017\nI have a large response in the order of 2MB. I generate it in my Python code and send it back using jsonify(resp) and the server cut short the response and delivered partial response. - Issue 1\nto overcome this issue I streamed the response into a file and exposed a GET api using send_from_directory(absolute_file_path, filename) - it sends back the file but has compressed some items like byte streams inside!\nPlease find attached an example of this file.\ntrain_response.zip", "issue_status": "Closed", "issue_reporting_time": "2017-08-08T23:48:05Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "555": {"issue_url": "https://github.com/pallets/flask/issues/2441", "issue_id": "#2441", "issue_summary": "web: URL to PDF on home doesn't work", "issue_description": "plavcik commented on 4 Aug 2017\nURL to download documentation in PDF on http://flask.pocoo.org/\nhttp://flask.pocoo.org/docs/0.12/.latex/Flask.pdf\nreturns\nChapter 404: The Lost Page\nA careful and diligent search has been made for the desired page, but it just cannot be found.\nAnd so they returned to familiar waters.", "issue_status": "Closed", "issue_reporting_time": "2017-08-04T06:43:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "556": {"issue_url": "https://github.com/pallets/flask/issues/2440", "issue_id": "#2440", "issue_summary": "Suggestion : decorated blueprints", "issue_description": "johaven commented on 2 Aug 2017\nIt would be useful to be able to decorate a blueprints or then pass it a function rather than adding decorators to each road.\nFor an admin module that requires admin privileges for example.", "issue_status": "Closed", "issue_reporting_time": "2017-08-02T13:12:24Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "557": {"issue_url": "https://github.com/pallets/flask/issues/2437", "issue_id": "#2437", "issue_summary": "The example flaskr can't easily be run by a beginner in Flask framework", "issue_description": "dlee992 commented on 29 Jul 2017 \u2022\nedited\nEven if I followed the instruction sequences in the README file in the project flaskr, I still couldn't correctly run this application. It's so depressing. I have already seen another similar issue #1902, but it is not helpful.", "issue_status": "Closed", "issue_reporting_time": "2017-07-29T08:54:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "558": {"issue_url": "https://github.com/pallets/flask/issues/2435", "issue_id": "#2435", "issue_summary": "Execute/debug flask CLI from IDE", "issue_description": "fgblomqvist commented on 28 Jul 2017\nHow does one debug flask CLI commands from an IDE?\nE.g. if I want to debug the flask run command, or even more importantly my custom commands (in my case, flask initdb).\nDo I have to manually create a separate script file that executes the functions that I want to debug?", "issue_status": "Closed", "issue_reporting_time": "2017-07-28T16:41:34Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "559": {"issue_url": "https://github.com/pallets/flask/issues/2434", "issue_id": "#2434", "issue_summary": "Idiomatic way to stop pylint complaining about flask route unused function names?", "issue_description": "tomjaguarpaw commented on 28 Jul 2017\nMy Python Flask application contains a lot of route definitions like\n@app.route('/')\ndef index():\nThen pylint complains\nW: 72, 4: Unused variable 'index' (unused-variable)\nwhich is technically correct. I can't replace all the function names by _, say, because then Flask complains\nAssertionError: View function mapping is overwriting an existing endpoint function: _\nI could replace all the handler function names with their underscore-prefixed equivalents, i.e. change index to _index, etc.. Is there another idiomatic way of dealing with this problem?\n(I also asked this question on StackOverflow but got no responses.)\n2", "issue_status": "Closed", "issue_reporting_time": "2017-07-28T14:43:59Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "560": {"issue_url": "https://github.com/pallets/flask/issues/2433", "issue_id": "#2433", "issue_summary": "Suggestion for jsonify", "issue_description": "tomwei7 commented on 28 Jul 2017\nHi, Where i use jsonify to return JSON response i can't change any http header. It is possible to make jsonify support this feature.\nlike use double underline param\njsonify(a=1, b=2, __headers={'X-TOKEN': 'token'})", "issue_status": "Closed", "issue_reporting_time": "2017-07-28T03:18:41Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "561": {"issue_url": "https://github.com/pallets/flask/issues/2432", "issue_id": "#2432", "issue_summary": "Distribute documentation mis-formatted", "issue_description": "pmatos commented on 27 Jul 2017\nI think the documentation for http://flask.pocoo.org/docs/dev/patterns/distribute/ is mis-formatted when discussing Tagging builds when it shows:\n    [egg_info] tag_build = .dev tag_date = 1\n\n    [aliases] release = egg_info -RDb \u201d", "issue_status": "Closed", "issue_reporting_time": "2017-07-27T13:37:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "562": {"issue_url": "https://github.com/pallets/flask/issues/2431", "issue_id": "#2431", "issue_summary": "TCP port 5000 blocked by corporate firewalls", "issue_description": "hex-m commented on 27 Jul 2017\nUsing TCP/5000 as the default port for flask may be a bad choice. I just had to debug a problem where I wasn't able to reach my service from outside of my network because the firewall (and I assume many firewalls do this) blocks incoming requests on port 5000.\nThis port is used for universal plug-and-play (UPNP) and it's considered a security problem if it's reachable from the internet says source1 and source2.\nI therefore suggest to change the default port or mention this possible problem in the documentation so others don't have to search for this problem as long as I did.\n2", "issue_status": "Closed", "issue_reporting_time": "2017-07-27T12:49:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "563": {"issue_url": "https://github.com/pallets/flask/issues/2429", "issue_id": "#2429", "issue_summary": "Tagging builds section in docs have misleading information", "issue_description": "rogalski commented on 27 Jul 2017\nExpected Behavior\nTagging builds docs are unambiguous.\nActual Behavior\nDocs introduced confusion, as shown in stack overflow question\nEnvironment\nNone - problem is in docs.\nSuggested solution\nwrapping setup.cfg snippet with markdown, similar to other code snippets.\nmaking sure that encoding of this snippet is correct (likely an ASCII).", "issue_status": "Closed", "issue_reporting_time": "2017-07-27T05:57:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "564": {"issue_url": "https://github.com/pallets/flask/issues/2428", "issue_id": "#2428", "issue_summary": "Werid behaviour of BuildError", "issue_description": "Member\ngreyli commented on 27 Jul 2017 \u2022\nedited\nExpected Behaviour\nI register a route to serve avatar image directly on app:\n@app.route('/avatar/<filename>/<size>')\ndef avatar(filename, size='m'):\n    path = current_app.config['AVATARS_UPLOAD_PATH']\n    filename = '%s_%s.png' % (filename, size)\n    return send_from_directory(path, filename)\nThen I use this in template to get avatar:\n{{ url_for('avatar', filename=user.avatar, size='l') }}\nActual Behaviour\nI have four templates use this code, but only one template got the image, others got the error below:\nBuildError: Could not build url for endpoint 'avatar' with values ['size']. Did you forget to specify values ['filename']?\n...\nFile \"C:\\Users\\Administrator\\projects\\moments-dev\\moments\\templates\\home\\index.html\", line 16, in block \"page_content\"\nsrc=\"{{ url_for('avatar', filename=photo.author.avatar, size='s') }}\">\nFile \"c:\\users\\administrator\\projects\\moments-dev\\venv\\lib\\site-packages\\flask\\helpers.py\", line 333, in url_for\nreturn appctx.app.handle_url_build_error(error, endpoint, values)\nFile \"c:\\users\\administrator\\projects\\moments-dev\\venv\\lib\\site-packages\\flask\\app.py\", line 1805, in handle_url_build_error\nreraise(exc_type, exc_value, tb)\nFile \"c:\\users\\administrator\\projects\\moments-dev\\venv\\lib\\site-packages\\flask\\helpers.py\", line 323, in url_for\nforce_external=external)\nFile \"c:\\users\\administrator\\projects\\moments-dev\\venv\\lib\\site-packages\\werkzeug\\routing.py\", line 1768, in build\nraise BuildError(endpoint, values, method, self)\nHowever, I actually did specify the filename, you can see it in error output.\nHere is the templates structure:\ntemplates/\n    home/\n        - photo.html ---- error\n        - index.html ---- error\n    user/\n        - index.html ---- ok\n    macros.html ---- error\nI tried to request the URL, such as http://127.0.0.1:5000/avatar/<filename>/<size>, it works fine on every size.\nEnvironment\nPython version: 2.7\nFlask version: 0.12.2\nWerkzeug version: 0.12.2\nOS: Windows 7", "issue_status": "Closed", "issue_reporting_time": "2017-07-27T01:17:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "565": {"issue_url": "https://github.com/pallets/flask/issues/2427", "issue_id": "#2427", "issue_summary": "Flask mangles traceback for Syntax Errors", "issue_description": "henniss commented on 27 Jul 2017\nExample:\n#min.py\nfrom flask import Flask\napp = Flask(__name__)\n\n\n@app.route('/')\ndef hello_world():\nFLASK_DEBUG=1 FLASK_APP=min.py python -m flask run \nExpected Behavior\nTraceback (most recent call last):\n  File \"/home/henniss/envs/min-flask/lib/python3.6/site-packages/flask/cli.py\", line 189, in __call__\n    rv = self._load_unlocked()\n  File \"/home/henniss/envs/min-flask/lib/python3.6/site-packages/flask/cli.py\", line 176, in _load_unlocked\n    self._app = rv = self.loader()\n  File \"/home/henniss/envs/min-flask/lib/python3.6/site-packages/flask/cli.py\", line 237, in load_app\n    rv = locate_app(self.app_import_path)\n  File \"/home/henniss/envs/min-flask/lib/python3.6/site-packages/flask/cli.py\", line 90, in locate_app\n    __import__(module)\n  File \"/home/henniss/gitlab/min-flask/min.py\", line 6\n    def hello_world():\n                     ^\nSyntaxError: unexpected EOF while parsing\nActual Behavior\nTraceback (most recent call last):\n  File \"/home/henniss/envs/min-flask/lib/python3.6/site-packages/flask/cli.py\", line 189, in __call__\n    rv = self._load_unlocked()\n  File \"/home/henniss/envs/min-flask/lib/python3.6/site-packages/flask/cli.py\", line 176, in _load_unlocked\n    self._app = rv = self.loader()\n  File \"/home/henniss/envs/min-flask/lib/python3.6/site-packages/flask/cli.py\", line 237, in load_app\n    rv = locate_app(self.app_import_path)\n  File \"/home/henniss/envs/min-flask/lib/python3.6/site-packages/flask/cli.py\", line 90, in locate_app\n    __import__(module)\nFile \"/home/henniss/gitlab/min-flask/min.py\", line 6\n    def hello_world():\n                     ^\nSyntaxError: unexpected EOF while parsing\nNote incorrect indentation on the 4th line from the end.\nI know this seems super pedantic, but it seems to mean that flask-failsafe won't detect that it needs to reload when min.py changes, since it doesn't see that portion of the traceback.\nEnvironment\nPython version: 3.6.1\nFlask version: 0.12.2\nWerkzeug version: 0.12.2", "issue_status": "Closed", "issue_reporting_time": "2017-07-26T19:32:21Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "566": {"issue_url": "https://github.com/pallets/flask/issues/2426", "issue_id": "#2426", "issue_summary": "PDF version of docs unavailable", "issue_description": "thodnev commented on 24 Jul 2017 \u2022\nedited\nThe main page flask.pocoo.org points to the PDF, but it's unavailable\nI understand the PDF could be also built from source, but it's much more convenient to have that link working.\nUPD: found pdf here", "issue_status": "Closed", "issue_reporting_time": "2017-07-24T01:32:34Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "567": {"issue_url": "https://github.com/pallets/flask/issues/2424", "issue_id": "#2424", "issue_summary": "The reloader fails on SyntaxError when using a custom cli entry point", "issue_description": "segevfiner commented on 20 Jul 2017\nExpected Behavior\nThe reloader should keep working even on SyntaxError when using a custom cli entry point. Obviously it might be diffcult to make it work as is, so it might require the cli entry point to be written in a certain way for this to work. For example it should be in a separate file that is not modified often during app development and should import the app only from the create_app function. This might just require documenting this more clearly.\nimport click\nfrom flask import Flask\nfrom flask.cli import FlaskGroup\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n\n@click.group(cls=FlaskGroup, create_app=lambda info: app)\ndef cli():\n    pass\n\nif __name__ == '__main__':\n    cli()\nset FLASK_DEBUG=1\npython app.py run\nActual Behavior\nIntroucing a SyntaxError into the file will cause the reloader to exit.\nEnvironment\nPython version: 2.7.13\nFlask version: 0.12.2\nWerkzeug version: 0.12.2", "issue_status": "Closed", "issue_reporting_time": "2017-07-20T07:46:15Z", "fixed_by": "#2610", "pull_request_summary": "add note about syntax errors in custom scripts", "pull_request_description": "Member\ndavidism commented on 29 Jan 2018\ncloses #2424\nIf you use a custom entry point and introduce a module-level error, the reloader can't recover. Mention this as a reason to use the flask command.\nUnrelated, mention which version of PyCharm adds Flask support.", "pull_request_status": "Merged", "issue_fixed_time": "2018-01-28T22:48:38Z", "files_changed": [["16", "docs/cli.rst"]]}, "568": {"issue_url": "https://github.com/pallets/flask/issues/2423", "issue_id": "#2423", "issue_summary": "Reloader fails to reload after SyntaxError when the app is in an __init__.py file", "issue_description": "segevfiner commented on 19 Jul 2017\nExpected Behavior\nThe reloader should work correctly even for an app in a package's __init__.py file.\nIn hello/__init__.py:\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\nset FLASK_APP=hello\nset FLASK_DEBUG=1\nflask run\nThan edit __init__.py and introduce a syntax error.\nActual Behavior\nI get the SyntaxError the first time I try to browse and afterwards get:\nTraceback (most recent call last):\n  File \"flask\\cli.py\", line 48, in find_best_app\n    'using a factory function.' % modules.__name__)\nNoAppException: Failed to find application in module \"hello\". Are you sure it contains a Flask application? Maybe you wrapped it in WSGI middleware or you are using a factory function.\nCause\nThis is caused by weird CPython behavior which might be a bug:\n>>> __import__('syntax_error')\n...\nSyntaxError: ...\n>>> a = __import__('syntax_error')  # woot it works?!\n>>> a.__file__\n'<path to the directory containing __init__.py>'  # Instead of path to __init__.py\nAfter the SyntaxError in the app, the Wekzeug reloader won't know about the __init__.py file any more since it iterates sys.modules and the entry there contains the path to the directory instead of the path to the __init__.py file, and Flask will call __import__ repeatedly but will get the weird empty module and will fail to find an app in it, leading to the described exception.\nEnvironment\nPython version: 2.7.13\nFlask version: 0.12.2\nWerkzeug version: 0.12.2\nNot sure if this happens in Python 3.\n2", "issue_status": "Closed", "issue_reporting_time": "2017-07-19T08:23:42Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "569": {"issue_url": "https://github.com/pallets/flask/issues/2421", "issue_id": "#2421", "issue_summary": "Tutorial: step 3 (Installing as package) needs rationale", "issue_description": "uvtc commented on 18 Jul 2017\nStep 3 of the tutorial (installing flaskr as a package) needs rationale at the top. As it stands, that section of the tutorial tells the user out of the blue that they should install their webapp as a package, but doesn't say why. The user can already run their webapp via flask run, so it's not clear why they should at this point set up and install their package into their venv.\n1", "issue_status": "Closed", "issue_reporting_time": "2017-07-18T14:37:21Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "570": {"issue_url": "https://github.com/pallets/flask/issues/2420", "issue_id": "#2420", "issue_summary": "Typeo in readme for flaskr example", "issue_description": "sshevlyagin commented on 17 Jul 2017\nReally simple bug.\nReadme file in flaskr has a typo, there shouldn't be parentheses at the end of this line:\nexport FLASK_APP=flaskr.factory:create_app()", "issue_status": "Closed", "issue_reporting_time": "2017-07-17T02:13:03Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "571": {"issue_url": "https://github.com/pallets/flask/issues/2415", "issue_id": "#2415", "issue_summary": "404 error when using debug=True", "issue_description": "jodhi commented on 15 Jul 2017 \u2022\nedited\nI created simple script using flask, it run smoothly, but when using app.run(debug=True) it returns 404 error\nRun with:\nexport FLASK_APP=main.py\nflask run\nfrom flask import Flask,request\napp = Flask(__name__)\napp.run(debug=True)\n@app.route('/')\ndef hello_world():\n    return 'hellow'\nIt return 404 error\n127.0.0.1 - - [15/Jul/2017 16:41:56] \"GET / HTTP/1.1\" 404 -\n127.0.0.1 - - [15/Jul/2017 16:43:03] \"GET /favicon.ico HTTP/1.1\" 404 -\nEnvironment\nPython version: 3.5.3\nFlask version: 0.12.2\nWerkzeug version: 0.12.1", "issue_status": "Closed", "issue_reporting_time": "2017-07-15T02:53:42Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "572": {"issue_url": "https://github.com/pallets/flask/issues/2413", "issue_id": "#2413", "issue_summary": "Flaskr example code RuntimeError", "issue_description": "alexander-jiang commented on 13 Jul 2017 \u2022\nedited\nExpected Behavior\nThe flaskr example code (in examples/flaskr) should work off-the-shelf. But I was able to reproduce the following issue by forking a clean copy of the repository and following the instructions in the README.md of the flaskr example. Namely, these are the commands I'm executing:\n$ git clone https://github.com/alexander-jiang/flask.git\n$ cd flask/examples/flaskr\n$ virtualenv venv\n$ venv\\Scripts\\activate\n$ pip install -e .\n$ set FLASK_APP=flaskr.factory:create_app()\n$ flask initdb\n$ flask run\nActual Behavior\nThe flask initdb command fails with a RuntimeError:\nTraceback (most recent call last):\n  File \"c:\\users\\xxxxxxxxx\\appdata\\local\\programs\\python\\python36-32\\Lib\\runpy.py\", line 193, in _run_module_as_main\n    \"__main__\", mod_spec)\n  File \"c:\\users\\xxxxxxxxx\\appdata\\local\\programs\\python\\python36-32\\Lib\\runpy.py\", line 85, in _run_code\n    exec(code, run_globals)\n  File \"C:\\Users\\xxxxxxxxx\\flask\\examples\\flaskr\\venv\\Scripts\\flask.exe\\__main__.py\", line 9, in <module>\n  File \"c:\\users\\xxxxxxxxx\\flask\\examples\\flaskr\\venv\\lib\\site-packages\\flask\\cli.py\", line 513, in main\n    cli.main(args=args, prog_name=name)\n  File \"c:\\users\\xxxxxxxxx\\flask\\examples\\flaskr\\venv\\lib\\site-packages\\flask\\cli.py\", line 380, in main\n    return AppGroup.main(self, *args, **kwargs)\n  File \"c:\\users\\xxxxxxxxx\\flask\\examples\\flaskr\\venv\\lib\\site-packages\\click\\core.py\", line 697, in main\n    rv = self.invoke(ctx)\n  File \"c:\\users\\xxxxxxxxx\\flask\\examples\\flaskr\\venv\\lib\\site-packages\\click\\core.py\", line 1061, in invoke\n    cmd_name, cmd, args = self.resolve_command(ctx, args)\n  File \"c:\\users\\xxxxxxxxx\\flask\\examples\\flaskr\\venv\\lib\\site-packages\\click\\core.py\", line 1100, in resolve_command\n    cmd = self.get_command(ctx, cmd_name)\n  File \"c:\\users\\xxxxxxxxx\\flask\\examples\\flaskr\\venv\\lib\\site-packages\\flask\\cli.py\", line 351, in get_command\n    rv = info.load_app().cli.get_command(ctx, name)\n  File \"c:\\users\\xxxxxxxxx\\flask\\examples\\flaskr\\venv\\lib\\site-packages\\flask\\cli.py\", line 237, in load_app\n    rv = locate_app(self.app_import_path)\n  File \"c:\\users\\xxxxxxxxx\\flask\\examples\\flaskr\\venv\\lib\\site-packages\\flask\\cli.py\", line 109, in locate_app\n    % module)\nRuntimeError: Failed to find application in module \"flaskr.factory\"\nEnvironment\nOS: Windows 10 (64 bit)\nPython version: 3.6.1\nFlask version: 0.12.2\nWerkzeug version: 0.12.2", "issue_status": "Closed", "issue_reporting_time": "2017-07-13T18:24:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "573": {"issue_url": "https://github.com/pallets/flask/issues/2411", "issue_id": "#2411", "issue_summary": "TestClient: EnvironBuilder cannot be passed in", "issue_description": "Member\nmitsuhiko commented on 11 Jul 2017\nIn a normal test client from werkzeug you can pass the environment builder in. With Flask that is currently not possible. In some situations people might want to interface with the builder directly.", "issue_status": "Closed", "issue_reporting_time": "2017-07-11T12:38:44Z", "fixed_by": "#2412", "pull_request_summary": "support passing environ to test client", "pull_request_description": "Member\ndavidism commented on 13 Jul 2017 \u2022\nedited\nThis allows passing an EnvironBuilder or dict as the only argument to flask.testing.FlaskClient.open, similar to werkzeug.test.Client.open. Since FlaskClient does some other configuration for the environ, this makes sure that a passed environ is copied and modified appropriately.\ncloses #2411", "pull_request_status": "Merged", "issue_fixed_time": "2017-07-13T15:42:53Z", "files_changed": [["3", "CHANGES"], ["40", "flask/testing.py"], ["18", "tests/test_testing.py"]]}, "574": {"issue_url": "https://github.com/pallets/flask/issues/2408", "issue_id": "#2408", "issue_summary": "Suggestions for Tutorial", "issue_description": "laranzu commented on 7 Jul 2017 \u2022\nedited by davidism\nEnvironment\nPython version: 3.5\nFlask version: 0.12\nNotes and suggestions from working through the 0.12 Tutorial:\nStep 1\nSo ... do I run this schema.sql file? Will Flask run it for me?\nStep 2\nThat \"import ... g ...\"\" looks like a typo. I left it out until I\nread step 4.\n\"The SECRET_KEY is needed...\"\nWhat do real systems do? No need to go into details, just mention\nsomething. SHA1? SSH keys?\nStep 3\n\"Flask is now shipped with built-in support for Click.\"\nThat's nice I guess, but what does it have to do with anything else\nin this step?\n\"A useful pattern to manage a Flask application...\"\nWhy? Will it make deployment in my production environment easier? To\nother people? What happens if I don't?\nIt would be better if the text said which directory to use\nbefore the command\nStep 4\n\"def get_db():\"\nLooks like an unsafe singleton. Does Flask use threads or processes?\n\"Hint: Where do I put this code?\"\nI'd been using Flask for 30 minutes, I had no idea where to put the\ncode. This should be at the start.\nStep 5\n(flask) /home/hugh/Flask/Tutorial/flaskr/$ flask initdb\nUsage: flask [OPTIONS] COMMAND [ARGS]...\nError: No such command \"initdb\".\nHmm, function has to have same name as in decorator?\nNo\nMaybe the command is really flask --initdb?\nNo\nHave I screwed up the environment var?\n$ flask run\nThat seems to work.\n(And yes I worked out shortly afterwards that this is an illusion, trying\nto load a page will throw a \"does not appear to exist\" exception.)\n$ cd flaskr\n$ flask initdb\nAha!\nGeneral note: having two identically named dirs is confusing, need\nto be clearer about where you should be at each step\nUseful exercise that could be added:\nIf you want the second database attribute, the blog entry HTML, to\nbe named \"body\" instead of \"text\", how many files do you need to edit?\n8", "issue_status": "Closed", "issue_reporting_time": "2017-07-07T04:44:48Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "575": {"issue_url": "https://github.com/pallets/flask/issues/2407", "issue_id": "#2407", "issue_summary": "Integrate flask log messages to Gunicorn log files", "issue_description": "jt28340 commented on 6 Jul 2017\nhttp://jsn-techtips.blogspot.com/2016/02/set-up-logging-with-flask-and-gunicorn.html\nI have 2 RHEL 6 unix servers. There are slight differences in between the versioning listed below. One server is already set-up and it is working well following the steps from the above link to configure logging integrated with gunicorn log file. However, when i followed the same approach to configure in a newer versions environment, those app.logger.info() message did not log to the gunicorn log file. I suspect it may be due to the change in 0.12 release. Any idea?\nVersion 0.12\nReleased on December 21st 2016, codename Punsch.\n...\nDisable logger propagation by default for the app logger.\n...\nEnvironment\nWorking Environment\nPython version: 2.7.12\nFlask version: 0.11.1\nWerkzeug version: 0.11.11\nNot Working Environment\nPython version: 2.7.13\nFlask version: 0.12.0\nWerkzeug version: 0.11.15", "issue_status": "Closed", "issue_reporting_time": "2017-07-06T08:17:35Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "576": {"issue_url": "https://github.com/pallets/flask/issues/2406", "issue_id": "#2406", "issue_summary": "The exception of installing", "issue_description": "MarcSteven commented on 6 Jul 2017\nThis issue tracker is a tool to address bugs in Flask itself.\nPlease use the #pocoo IRC channel on freenode or Stack Overflow for general\nquestions about using Jinja or issues not related to Jinja.\nIf you'd like to report a bug in Flask, fill out the template below. Provide\nany any extra information that may be useful / related to your problem.\nIdeally, create an MCVE, which helps us\nunderstand the problem and helps check that it is not caused by something in\nyour code.\nExpected Behavior\nTell us what should happen.\nI open my command line tool and then run \"pip install Flask'\nIt shows the exception ,I am new here about python.So pls give me some tips to solve it\nPaste a minimal example that causes the problem.\nActual Behavior\nTell us what happens instead.\nPaste the full traceback if there was an exception.\nCollecting Flask\nUsing cached Flask-0.12.2-py2.py3-none-any.whl\nCollecting itsdangerous>=0.21 (from Flask)\nUsing cached itsdangerous-0.24.tar.gz\nCollecting Werkzeug>=0.7 (from Flask)\nUsing cached Werkzeug-0.12.2-py2.py3-none-any.whl\nCollecting Jinja2>=2.4 (from Flask)\nDownloading Jinja2-2.9.6-py2.py3-none-any.whl (340kB)\n100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 348kB 239kB/s\nCollecting click>=2.0 (from Flask)\nDownloading click-6.7-py2.py3-none-any.whl (71kB)\n100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 71kB 207kB/s\nCollecting MarkupSafe>=0.23 (from Jinja2>=2.4->Flask)\nDownloading MarkupSafe-1.0.tar.gz\nInstalling collected packages: itsdangerous, Werkzeug, MarkupSafe, Jinja2, click, Flask\nRunning setup.py install for itsdangerous ... error\nComplete output from command /usr/bin/python -u -c \"import setuptools, tokenize;file='/private/var/folders/fd/g2bjwxln7t12740h9w8pc1p40000gn/T/pip-build-c2g0Ki/itsdangerous/setup.py';f=getattr(tokenize, 'open', open)(file);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, file, 'exec'))\" install --record /var/folders/fd/g2bjwxln7t12740h9w8pc1p40000gn/T/pip-aTf7nB-record/install-record.txt --single-version-externally-managed --compile:\nrunning install\nrunning build\nrunning build_py\ncreating build\ncreating build/lib\ncopying itsdangerous.py -> build/lib\nrunning install_lib\ncopying build/lib/itsdangerous.py -> /Library/Python/2.7/site-packages\nerror: [Errno 13] Permission denied: '/Library/Python/2.7/site-packages/itsdangerous.py'\n----------------------------------------\nCommand \"/usr/bin/python -u -c \"import setuptools, tokenize;file='/private/var/folders/fd/g2bjwxln7t12740h9w8pc1p40000gn/T/pip-build-c2g0Ki/itsdangerous/setup.py';f=getattr(tokenize, 'open', open)(file);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, file, 'exec'))\" install --record /var/folders/fd/g2bjwxln7t12740h9w8pc1p40000gn/T/pip-aTf7nB-record/install-record.txt --single-version-externally-managed --compile\" failed with error code 1 in /private/var/folders/fd/g2bjwxln7t12740h9w8pc1p40000gn/T/pip-build-c2g0Ki/itsdangerous/\nEnvironment\nPython version:2.7\nFlask version:\nWerkzeug version:", "issue_status": "Closed", "issue_reporting_time": "2017-07-06T01:03:14Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "577": {"issue_url": "https://github.com/pallets/flask/issues/2405", "issue_id": "#2405", "issue_summary": "Custom JSON encoder doesn't work for dictionary keys", "issue_description": "mtourne commented on 6 Jul 2017\nI have defined a custom json encoder that supports encoding a bson ObjectId() into a string (see below for encoder code).\nThis works great until I attempt to serialize a dictionary who's key is an ObjectId(). The custom encoder seems to only work for dictionary values.\nTo reproduce the bug, see the /test_json2 route in the example below :\nimport bson\n@app.route(\"/test_json\", methods=['GET'])\ndef test_json():\n    test = {\n        'a': bson.objectid.ObjectId(\"595d5f4c4588b817c4030277\")\n    }\n    return flask.jsonify(test=test)\n\n@app.route(\"/test_json2\", methods=['GET'])\ndef test_json2():\n    test = {\n        bson.objectid.ObjectId(\"595d5f4c4588b817c4030277\"): 'a'\n    }\n    return flask.jsonify(test=test)\nCustom json encoder code :\nimport bson\nfrom flask.json import JSONEncoder\n\nclass CustomJSONEncoder(JSONEncoder):\n    '''custom json encoder that supports mongo's ObjectID()\nout of the box\n    '''\n    def default(self, obj):\n        if isinstance(obj, bson.objectid.ObjectId):\n            return str(obj)\n        return JSONEncoder.default(self, obj)\n\napp.json_encoder = CustomJSONEncoder\nUsing\nWerkzeug==0.12.2\nFlask==0.12.2", "issue_status": "Closed", "issue_reporting_time": "2017-07-05T23:21:35Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "578": {"issue_url": "https://github.com/pallets/flask/issues/2404", "issue_id": "#2404", "issue_summary": "datetime json encoding is one sided: Fix for JSONDecoder is needed", "issue_description": "aop commented on 3 Jul 2017\nExpected Behavior\nWhen using Flask json to encode, datetime is encoded to a string and it would be expected that the reverse operation also works.\n>>> import datetime\n>>> from flask import json\n>>> json.dumps({'a': datetime.datetime.utcnow()})\n'{\"a\": \"Mon, 03 Jul 2017 09:13:33 GMT\"}'\n>>> json.loads(json.dumps({'a': datetime.datetime.utcnow()}))\n{'a': 'Mon, 03 Jul 2017 09:13:42 GMT'}\nExpected would be\n>>> json.loads(json.dumps({'a': datetime.datetime.utcnow()}))\n{'a': datetime.datetime(2017, 7, 3, 9, 13, 42, 564641)}\nEnvironment\nPython version: 3.6.0\nFlask version: 0.12\nWerkzeug version: 0.11.15", "issue_status": "Closed", "issue_reporting_time": "2017-07-03T09:27:41Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "579": {"issue_url": "https://github.com/pallets/flask/issues/2402", "issue_id": "#2402", "issue_summary": "render_template_string() recompiles the template every time", "issue_description": "Vlad-Shcherbina commented on 29 Jun 2017\nWhen flask.render_template_string() is invoked with the same template string multiple times, it still compiles it on every invocation. This makes it pretty much unusable in any application where performance is of any concern.\nAs a dirty workaround, I use memoized version.\nIt only makes sense if template strings are not generated dynamically, but that sounds like a reasonable assumption.\nimport flask.globals\nimport flask.templating\n\n_compiled_templates = {}\n\ndef memoized_render_template_string(source, **context):\n    \"\"\"Same as flask.render_template_string(), but does not recompile.\n\n    No cache expiration.\n    Assumes that Jinja environment configuration does not change at runtime.\n    \"\"\"\n    ctx = flask.globals._app_ctx_stack.top\n    ctx.app.update_template_context(context)\n    jinja_env = ctx.app.jinja_env\n    k = jinja_env, source\n    if k in _compiled_templates:\n        template = _compiled_templates[k]\n    else:\n        template = _compiled_templates[k] = jinja_env.from_string(source)\n    return flask.templating._render(template, context, ctx.app)\nPerhaps this problem should be addressed in the actual implementation of render_template_string()?\nI'm not sure what would be the proper way to do it, though.", "issue_status": "Closed", "issue_reporting_time": "2017-06-29T17:15:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "580": {"issue_url": "https://github.com/pallets/flask/issues/2400", "issue_id": "#2400", "issue_summary": "setup.cfg code snippet not formatted correctly", "issue_description": "jeremyarr commented on 29 Jun 2017\nExpected Behavior\nOn the \"Deploying With Setuptools page\", the setup.cfg code snippet should look like this:\n[egg_info]\ntag_build = .dev\ntag_date = 1\n\n[aliases]\nrelease = egg_info -RDb\nActual Behavior\nInstead it looks like this:\n[egg_info] tag_build = .dev tag_date = 1\n\n[aliases] release = egg_info -RDb \u201d\nAlso note the erroneous quotation mark at the end.\nEnvironment\nPython version: N/A\nFlask version: N/A\nWerkzeug version: N/A", "issue_status": "Closed", "issue_reporting_time": "2017-06-29T02:22:10Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "581": {"issue_url": "https://github.com/pallets/flask/issues/2392", "issue_id": "#2392", "issue_summary": "jsonify response converts datetime object into string with GMT regardless of objects tzinfo.", "issue_description": "stephen-mw commented on 24 Jun 2017 \u2022\nedited\nExpected Behavior\nFlask's jsonify response incorrectly marks the timezone when stringing the datetime object. It always contains the string GMT, regardless of if the datetime object is not naive or has tzinfo set.\nI originally suspected it may be something to do with the http_date function, which is called on the datetime object if its detected. However, when I print http_date(time) on the object it correctly converts the time zone to GMT.\nI believe that this logic is somehow incorrectly identifying the object as a date object and not datetime, and thusly calling timetuple() (which has this affect) and not utctimetuple() which maintains the time).\n   65         if isinstance(o, datetime):\n   66             return http_date(o.utctimetuple())\n   67         if isinstance(o, date):\n   68             return http_date(o.timetuple())\nTell us what should happen.\nA jsonify'd response should print the correct datetime 3-letter timezone abbreviation according to the datetime's tzinfo response. Or, if forcing a converstion to GMT, should correctly convert the object to GMT time from its localized time zone.\nThe below jsonify'd/stringed 3-letter time-zone response says GMT, but the datetime object is PDT. The time in the response is also in PST and has not been converted to GMT.\n\"Fri, 23 Jun 2017 17:12:18 GMT\"\n#!/usr/bin/env python2.7\n\nfrom werkzeug.http import http_date\nfrom datetime import datetime\nimport pytz\n\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('/')\ndef root():\n    # Localize time\n    local_time = pytz.timezone(\"America/Los_Angeles\")\n    time = datetime.utcnow().replace(microsecond=0).replace(tzinfo=pytz.utc)\n    time = time.astimezone(local_time)\n\n    print(\"iso format:\", time.isoformat())\n    print(\"object:\", time.tzinfo)\n    print(\"http date:\", http_date(time))\n\n    result = [time]\n\n    print(\"Test object: %s\" % result)\n\n    return jsonify(result)\n\napp.run(host='127.0.0.1', port=8080, debug=False)\nActual Behavior\nWebserver returns response with GMT timezone with localized time:\n[\n\"Fri, 23 Jun 2017 17:12:18 GMT\"\n]\nThe logs in the console correctly identify the datetime object as PDT:\n('iso format:', '2017-06-23T17:28:11-07:00')\n('object:', <DstTzInfo 'America/Los_Angeles' PDT-1 day, 17:00:00 DST>)\n('http date:', 'Sat, 24 Jun 2017 00:28:11 GMT')\nTest object: [datetime.datetime(2017, 6, 23, 17, 28, 11, tzinfo=<DstTzInfo 'America/Los_Angeles' PDT-1 day, 17:00:00 DST>)]\n127.0.0.1 - - [23/Jun/2017 17:28:11] \"GET / HTTP/1.1\" 200 -\nEnvironment\nPython version: 2.7 or 3.6 (affects both in identical way)\nFlask version: Flask==0.12.2\nWerkzeug version: Werkzeug==0.12.2", "issue_status": "Closed", "issue_reporting_time": "2017-06-24T00:19:31Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "582": {"issue_url": "https://github.com/pallets/flask/issues/2391", "issue_id": "#2391", "issue_summary": "Flask fails silently when it does not have permission to SSL cert/key files", "issue_description": "pilliq commented on 24 Jun 2017\nRunning Flask with an SSL context that uses cert files which the process does not have permission to results in a silent fail on the server.\nAllowing the process to have access to the files fixes this problem.\nServer code used:\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello:\n    return 'hi'\n\nif __name__ == '__main__':\n    context = ('/path/to/cert.pem','/path/to/key.pem')\n    app.run(debug=True, ssl_context=context)\nExpected Behavior\nA stack saying the process cannot access the cert files. Ideally this trace would appear during startup before the first request is made.\nFor example, when using pyopenssl with the same files, the following trace is thrown on startup:\nTraceback (most recent call last):\n  File \"server.py\", line 20, in <module>\n    context.use_privatekey_file('/path/to/private/key.pem')\n  File \"/home/user/.virtualenvs/dev/local/lib/python2.7/site-packages/OpenSSL/SSL.py\", line 798, in use_privatekey_file\n    self._raise_passphrase_exception()\n  File \"/home/user/.virtualenvs/dev/local/lib/python2.7/site-packages/OpenSSL/SSL.py\", line 777, in _raise_passphrase_exception\n    _raise_current_error()\n  File \"/home/user/.virtualenvs/dev/local/lib/python2.7/site-packages/OpenSSL/_util.py\", line 54, in exception_from_error_queue\n    raise exception_type(errors)\nOpenSSL.SSL.Error: [('system library', 'fopen', 'Permission denied'), ('BIO routines', 'FILE_CTRL', 'system lib'), ('SSL routines', 'SSL_CTX_use_PrivateKey_file', 'system lib')]\nActual Behavior\nAfter a request, the server returns a 200 response and disconnects the socket:\ncurl clients receive a 200 and then throw errno 35 (Unknown SSL protocol error in connection to [secure site]:443).\nnc clients return a 200 and immediately disconnect.\nWeb browsers report the following error:\nWhat makes this problem worse is that Flask does not acknowledge that an attempted connection was made. Throughout all three of the above requests this is all that Flask printed in debug mode:\n * Running on https://0.0.0.0:5000/ (Press CTRL+C to quit)\n * Restarting with stat\n * Debugger is active!\n * Debugger pin code: 000-000-000\nEnvironment\nPython version: 2.7.6\nFlask version: 0.12.2 (also tested on 0.10.1)\nWerkzeug version: 0.12.2 (also tested on 0.11.5)", "issue_status": "Closed", "issue_reporting_time": "2017-06-24T00:17:13Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "583": {"issue_url": "https://github.com/pallets/flask/issues/2390", "issue_id": "#2390", "issue_summary": "Bad interaction between flask.json.load() and werkzeug LimitedStream", "issue_description": "iguanaonmystack commented on 23 Jun 2017\nExpected Behavior\nI expected to be able to hand flask.request.stream to flask.json.load() in order to get a Python object back. flask.request.stream provides a bytes interface which the built-in python module doesn't like (it wants string) and the flask.json module has a couple of bits of code to work around this, so I expected it to work.\nSee attached file (reproduced here: https://gist.github.com/flexo/5cf4fde37f7b066fb6c7a77cb7416883 )\ntest.py.zip\nActual Behavior\nAn exception is raised because LimitedStream has no 'readable' attribute. Possibly this makes it a bug in Werkzeug rather than Flask but since Flask provided the json module I thought it'd be best to report it here first.\nTraceback (most recent call last):\n  File \"[...]/venv/lib/python3.5/site-packages/flask/app.py\", line 1982, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"[...]/venv/lib/python3.5/site-packages/flask/app.py\", line 1614, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"[...]/venv/lib/python3.5/site-packages/flask/app.py\", line 1517, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"[...]/venv/lib/python3.5/site-packages/flask/_compat.py\", line 33, in reraise\n    raise value\n  File \"[...]/venv/lib/python3.5/site-packages/flask/app.py\", line 1612, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"[...]/venv/lib/python3.5/site-packages/flask/app.py\", line 1598, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"[...]/test.py\", line 31, in errors\n    data = json.load(request.stream)\n  File \"[...]/venv/lib/python3.5/site-packages/flask/json.py\", line 154, in load\n    fp = _wrap_reader_for_text(fp, kwargs.pop('encoding', None) or 'utf-8')\n  File \"[...]/venv/lib/python3.5/site-packages/flask/json.py\", line 37, in _wrap_reader_for_text\n    fp = io.TextIOWrapper(io.BufferedReader(fp), encoding)\nAttributeError: 'LimitedStream' object has no attribute 'readable'\nEnvironment\nPython version: 3.5.3\nFlask version: 0.12.2\nWerkzeug version: 0.12.2", "issue_status": "Closed", "issue_reporting_time": "2017-06-23T15:13:12Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "584": {"issue_url": "https://github.com/pallets/flask/issues/2389", "issue_id": "#2389", "issue_summary": "Flaskr fails being run from cli", "issue_description": "JervisTetch commented on 23 Jun 2017 \u2022\nedited\nExpected Behavior\nAccording to this README the Flaskr example application should run after doing following:\npip install --editable .\nexport FLASK_APP=flaskr.factory:create_app()\nflask initdb\nflask run\nActual Behavior\nFlaskr fails running throwing a NoAppException.\nNoAppException: The file/path provided (flaskr.factory) does not appear to exist.  Please verify the path is correct.  If app is not on PYTHONPATH, ensure the extension is .py\nEnvironment\nPython version: 2.7\nFlask version: 0.12.2\nWerkzeug version: 0.12.2", "issue_status": "Closed", "issue_reporting_time": "2017-06-23T14:03:32Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "585": {"issue_url": "https://github.com/pallets/flask/issues/2388", "issue_id": "#2388", "issue_summary": "pdf link on home page is broken", "issue_description": "cammil commented on 23 Jun 2017 \u2022\nedited by davidism\nNo description provided.", "issue_status": "Closed", "issue_reporting_time": "2017-06-23T03:13:30Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "586": {"issue_url": "https://github.com/pallets/flask/issues/2387", "issue_id": "#2387", "issue_summary": "Flask app doesn't run when importing Python-Markdown module", "issue_description": "ahota commented on 22 Jun 2017 \u2022\nedited by davidism\nExpected Behavior\nImport the Python-Markdown module and run the Flask app\n# flask_test.py\nfrom flask import Flask\nimport markdown\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return 'Hello, world!'\nActual Behavior\nexport FLASK_APP=flask_test.py\nflask run\n\nUsage: flask-script.py run [OPTIONS]\n\nError: The file/path provided (flask_test) does not appear to exist.  Please verify the path is correct.  If app is not on PYTHONPATH, ensure the extension is .py\nIf I simply comment out the import markdown line, the app launches/works just fine.\nEnvironment\nPython version: 2.7.12\nFlask version: 0.12\nWerkzeug version: 0.11.2\nPython-Markdown version: 2.6.8\nI'm running on Windows 10 using Git Bash (mintty), which lets me use export instead of set for FLASK_APP. However I found that set doesn't change the outcome.", "issue_status": "Closed", "issue_reporting_time": "2017-06-22T04:50:55Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "587": {"issue_url": "https://github.com/pallets/flask/issues/2385", "issue_id": "#2385", "issue_summary": "Remove deprecated code", "issue_description": "Member\ndavidism commented on 22 Jun 2017 \u2022\nedited\nRemove old code that has deprecation warnings:\nFlask.ext\nFlask.init_jinja_globals\nFlask.error_handlers\nFlask.request_globals_class\nFlask.static_path\nsend_file mimetype guessing removed in 0.12 #1849\nRequest.module\nscripts/flask-07-upgrade.py", "issue_status": "Closed", "issue_reporting_time": "2017-06-21T19:11:14Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "588": {"issue_url": "https://github.com/pallets/flask/issues/2384", "issue_id": "#2384", "issue_summary": "Problem with partial video content: send_from_directory() + x-sendfile + mod_wsgi", "issue_description": "xplwowi commented on 19 Jun 2017 \u2022\nedited\nI found that using send_file() to serve video (mp4) files works fine but the same content is not served using send_from_directory(). Only small parts (hundreds of bytes) are delivered to browser.\nOn Firefox video embedded through <video> tags is playable in most cases but opened directly from address bar not. On Chrome both methods are not working.\nWith x-sendfile switched off, send_from_directory() works ok.\nTested on:\nDebian: python 3.5.3, flask 0.12.2, apache 2.4.25, mod_wsgi 4.5.11\nUbuntu: python 3.5.2, flask 0.12.2, apache 2.4.18, mod_wsgi 4.3.0", "issue_status": "Closed", "issue_reporting_time": "2017-06-19T15:19:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "589": {"issue_url": "https://github.com/pallets/flask/issues/2382", "issue_id": "#2382", "issue_summary": "FLASK_APP var is not being parsed correctly for paths, imports system and third party modules.", "issue_description": "Kangaroux commented on 18 Jun 2017\nIf you create a file called site.py which defines your Flask app, and then set the env var as FLASK_APP=\"site.py\", Flask will find the file but it can't find the application instance.\nTraceback (most recent call last):\n  File \"/asdf/venv/lib/python3.4/site-packages/flask/cli.py\", line 48, in find_best_app\n    'using a factory function.' % module.__name__)\nflask.cli.NoAppException: Failed to find application in module \"site\".  Are you sure it contains a Flask application?  Maybe you wrapped it in a WSGI middleware or you are using a factory function.\nThis looks like an issue with Flask importing a third party (+system) module instead of a local module. When appending a .py extension, it should be treated as a path, not a python import. However, even if I do a full absolute path to the file, it looks like it's still treating it as a third party module.\nYou can also reproduce this issue by testing out different entrypoint names: os, string, flask.\nFolder structure: http://i.imgur.com/CR88kUo.png\nrequirements.txt\nFlask==0.12.1\nFlask-SQLAlchemy==2.2\nJinja2==2.9.6\nMarkupSafe==1.0\nSQLAlchemy==1.1.10\nWerkzeug==0.12.1\nclick==6.7\nitsdangerous==0.24", "issue_status": "Closed", "issue_reporting_time": "2017-06-18T04:55:55Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "590": {"issue_url": "https://github.com/pallets/flask/issues/2380", "issue_id": "#2380", "issue_summary": "Maybe view function names should not be used as default endpoints", "issue_description": "dotSlashLu commented on 16 Jun 2017 \u2022\nedited\nHi,\nIs there any reason the view function name is used as the default endpoint? Taken view_func.__name__ as the default endpoint name I have to specify endpoints myself if my view functions are all subclassed from a same class and call a same method, or an View function mapping is overwriting an existing endpoint function error will be raised, which is not good for reusability.\nTake the example below:\nclass APIBase():\n    def call(self, **kwargs):\n        # assign url variables to self\n        for k, v in kwargs.iteritems():\n            self.setattr(k, v)\n        m = getattr(self, request.method)\n        m()\n\nclass DuckAPI(APIBase):\n    def post(self):\n        pass\n\nclass ChickenAPI(APIBase):\n    def post(self):\n        pass\n\ncontext.route('/duck/<duck_id>', *args, **kwargs)(DuckAPI().call)\ncontext.route('/chicken/<chicken_id>', *args, **kwargs)(ChickenAPI().call)\nThis will raise View function mapping is overwriting an existing endpoint function module_name.call, but actually the call function are from different instances.\nI understand that typically context.route is used as a decorator thus having little possibility that the decorated functions' names in the same module will collide, but there're chances people like me will prefer to use it as a wrapper to define routes dynamically.\nWill it be better if we use str(view_func) as the default endpoint?\nI think we should at least change the error message, since the call in the above error message is not bound to the module it self, but described as endpoint function {module_name}.call. This took me a long time to trace the problem.", "issue_status": "Closed", "issue_reporting_time": "2017-06-16T05:38:16Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "591": {"issue_url": "https://github.com/pallets/flask/issues/2379", "issue_id": "#2379", "issue_summary": "Odd behavior with send_from_directory", "issue_description": "SharkyRawr commented on 16 Jun 2017\nI wrote some code for on-demand thumbnail generation but ran in to some weirdness with send_from_directory:\n# Just a relative directory called \"thumbs\" that's supposed to hold a replica directory tree, only with thumbnails\nthumbcache = 'thumbs'\n\n# ...\n\n@app.route('/thumb/<path:path>')\ndef thumbnail(path):\n    \n    # Simple True/False return for success/failure.\n    success = cache_thumbnail(path)\n    if not success:\n        raise Exception(\"Thumbnail generation failed!\")\n\n    # All thumbnails are jpg so I need to replace the file extension:\n    thumbpath, _ = os.path.splitext(path)\n    thumbpath += \".jpg\"\n\n    ## thumbpath = thumbpath.replace('\\\\', '/')\n\n    #return send_file(thumbcache + '/' + thumbpath)\n    return send_from_directory(thumbcache, thumbpath)\nThe '/thumb/<path:path> URL is being generated by:\n<img id=\"{{loop.index}}\" src=\"{{ url_for('thumbnail', path=file) }}\">\nThe requests look like: \"GET /thumb/gw%5Calpha%5C1430f690aa3fcfda5c10beceb9c120ea.jpg HTTP/1.1\"\nActual Behavior\nThe code above, as is, results in a 404 - File not found error. No exception.\nExpected Behavior\nThe file should be served.\nIf I uncomment the line return send_file(thumbcache + '/' + thumbpath) and thereby bypassing any security, it works but that's an undesirable workaround.\nIf I uncomment the line thumbpath = thumbpath.replace('\\\\', '/') to replace all backslashes with forward slashes, it works fine.\nI don't know why url_for generated backslashes in the first place. Maybe an artifact because I am running this code on a Windows machine?\nEnvironment\nPython version: Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AMD64)] on win32\nFlask version: 0.12.2\nWerkzeug version: 0.12.2", "issue_status": "Closed", "issue_reporting_time": "2017-06-15T19:29:11Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "592": {"issue_url": "https://github.com/pallets/flask/issues/2377", "issue_id": "#2377", "issue_summary": "flask command should not require .py extension", "issue_description": "Member\ndavidism commented on 15 Jun 2017 \u2022\nedited\nIf you don't install your app in the env, you have to append .py in the FLASK_APP var.\nHaven't dug into why it's like this yet, but it might be more straightforward to add the cwd to PYTHONPATH so that FLASK_APP=app.py becomes FLASK_APP=app even if the app isn't installed in the env.\nWe can still support paths to set the cwd. FLASK_APP=/path/to/app would set the current directory to /path/to then try to import app.", "issue_status": "Closed", "issue_reporting_time": "2017-06-15T16:20:20Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "593": {"issue_url": "https://github.com/pallets/flask/issues/2376", "issue_id": "#2376", "issue_summary": "flask command should auto-detect module", "issue_description": "Member\ndavidism commented on 15 Jun 2017\nEven when installed as a package, it can be useful in complex situations to have a wsgi.py file for setting the app up to run. The flask command should detect this file if no FLASK_APP is specified at all.\nAdditionally, it's common to name quick demo apps app.py, so that should be detected too.\nFrom discussion in #2375.", "issue_status": "Closed", "issue_reporting_time": "2017-06-15T16:17:22Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "594": {"issue_url": "https://github.com/pallets/flask/issues/2375", "issue_id": "#2375", "issue_summary": "Add .env support, take 2", "issue_description": "Member\ndavidism commented on 15 Jun 2017\nSetting the FLASK_APP and FLASK_DEBUG for every new terminal session is inconvenient. The CLI could load a .env file that contained these values instead. Since Heroku is a popular deployment option, this would also help developers who want the same scheme locally.\nInstead of writing our own parser, we should use python-dotenv. This reduces maintenance burden on us and can be an optional dependency. If it is installed, the CLI will load the .env, otherwise it will skip it.\nPreviously discussed in #2164.\n@miguelgrinberg raised a good point in the previous thread. .env is typically used to store sensitive configuration. The convenience of setting FLASK_APP= there could encourage users to commit the file publicly, which would be bad.\nA solution would be to load two files, .flask-env and .env, and prominently document that .flask-env can be committed but should not contain secrets.\n2", "issue_status": "Closed", "issue_reporting_time": "2017-06-14T20:18:30Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "595": {"issue_url": "https://github.com/pallets/flask/issues/2372", "issue_id": "#2372", "issue_summary": "JSONEncoder encodes aware datetime objects in non-UTC timezone incorrectly as being in GMT.", "issue_description": "astralblue commented on 14 Jun 2017\nflask.json.JSONEncoder() encodes aware datetime objects in non-UTC timezone incorrectly using local time tuple with GMT.\nExpected Behavior\nThe following code segment should print \"Sun, 01 Jan 2017 20:34:56 GMT\" (12:34:56 PST8PDT is 20:34:56 GMT):\nfrom datetime import datetime\nfrom pytz import timezone\ndt = timezone('PST8PDT').localize(datetime(2017, 1, 1, 12, 34, 56))\n\nfrom flask.json import JSONEncoder\nencoder = JSONEncoder()\nprint(encoder.encode(dt))\nActual Behavior\nThe preceding code segment prints \"Sun, 01 Jan 2017 12:34:56 GMT\" instead, that is, local timetuple() appended with GMT.\nEnvironment\nPython version: 3.5.3\nFlask version: 0.12.2\nWerkzeug version: 0.12.2", "issue_status": "Closed", "issue_reporting_time": "2017-06-14T18:11:04Z", "fixed_by": "#2374", "pull_request_summary": "Correctly JSON-encode datetimes aware of non-UTC timezones", "pull_request_description": "astralblue commented on 15 Jun 2017\nhttp_date() requires timetuple in UTC, but JSONEncoder.default() was\npassing a local timetuple instead.\nThis fixes #2372.", "pull_request_status": "Merged", "issue_fixed_time": "2017-06-15T01:42:15Z", "files_changed": [["2", "CHANGES"], ["4", "flask/json/__init__.py"], ["30", "tests/test_helpers.py"]]}, "596": {"issue_url": "https://github.com/pallets/flask/issues/2368", "issue_id": "#2368", "issue_summary": "Discussion: from_envvar's behavior", "issue_description": "Contributor\ntony commented on 12 Jun 2017 \u2022\nedited\nThere is an issue I've been having for a few years regarding Flask and I failed to articulate it correctly. I find from_envvar's behavior unintuitive. Also, I haven't been able to find prior discussions mentioning it. Probably because of Chesterton's fence, or they feel they'd be told to work around it. Which only takes one line:\napp.config.from_object(os.environ[\"app.config.dev\"]), see Google results\nThe first google result I see is people perplexed by from_envvar. Why? I'm not sure. For some reason, in recent years, Django (and frankly, Flask also) got devs accustomed to importing modules via strings.\nCurrent behavior:\nfrom_envvar forwards to from_pyfile, which strictly requires an absolute/relative file path (i.e. not a module string).\nExpected behavior:\nfrom_envvar should wrap from_object\nWhy:\nfrom_envvar only works with files\nFile from from_envvar are interpreted as modules anyway\nfrom_envvar (from_pyfile) cannot point to classes\nfrom_object supports string module/class paths (e.g. app.config.dev), which works with environmental variables\nfrom_objectsupports both classes and modules. Especially important since the official documentation gives examples of using classes.\nIt's more customary for users invoking configuration by files to do so via CLI arguments.\nA local, dev, staging, or production deployment in practice would opt to use environmental variables to point to a python object (module/class) via string.\nFor instance: Let's say we're deploying to production with a uwsgi config. Since python production deployment is highly driven by packages, we've likely already done the work of figuring out our python environmental / package locations. It'd be more intuitive to point to a python object by string, rather than by file path.\nAlternative: from_envvar should additionally wrap from_object for non-file paths.\nPython version: 3.6\nFlask version: 1.12\nWerkzeug version: 0.12.2", "issue_status": "Closed", "issue_reporting_time": "2017-06-11T22:43:52Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "597": {"issue_url": "https://github.com/pallets/flask/issues/2357", "issue_id": "#2357", "issue_summary": "python -m flask run raises RuntimeWarning", "issue_description": "ybakos commented on 4 Jun 2017 \u2022\nedited by davidism\nExpected Behavior\nGiven a project with the following structure:\nproject/\n    my_cool_app/\n        __init__.py\nfrom flask import Flask\n\napp = Flask(__name__)\nRunning the following should work without warnings:\nFLASK_DEBUG=1 FLASK_APP=my_cool_app python -m flask run\nI use python -m flask run in order to not need my_cool_app/__init__.py as FLASK_APP, per the discussion around this issue.\nActual Behavior\nA warning is printed on the console when using the reloader:\n/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/runpy.py:125:\nRuntimeWarning: 'flask.cli' found in sys.modules after import of package 'flask',\nbut prior to execution of 'flask.cli'; this may result in unpredictable behaviour\nEnvironment\nPython version: 3.6.1 (MacOS 10.12.5)\nFlask version: 0.12.2\nWerkzeug version: 0.12.2", "issue_status": "Closed", "issue_reporting_time": "2017-06-04T16:20:14Z", "fixed_by": "#2359", "pull_request_summary": "Be smarter about adding \".cli\" to reloader command", "pull_request_description": "Member\ndavidism commented on 5 Jun 2017\npython -m flask.cli raises an import warning on > 2.6. It's only needed on 2.6, python -m flask works otherwise.\ncloses #2357\n1", "pull_request_status": "Merged", "issue_fixed_time": "2017-06-04T19:38:34Z", "files_changed": [["18", "flask/cli.py"]]}, "598": {"issue_url": "https://github.com/pallets/flask/issues/2355", "issue_id": "#2355", "issue_summary": "Wrong release version", "issue_description": "simonsmiley commented on 3 Jun 2017\nIn the 0.12.2 release the version in flask/__init__.py is still 0.12.2-dev\nThis is causing problems with programs checking the flask version.", "issue_status": "Closed", "issue_reporting_time": "2017-06-02T22:08:14Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "599": {"issue_url": "https://github.com/pallets/flask/issues/2351", "issue_id": "#2351", "issue_summary": "How to set connection read timeout and support flask run in multi-thread mode?", "issue_description": "haolujun commented on 1 Jun 2017\nHi\nWhen I use Flask as my web server, I meet a diffcult problem.\nBecause of network problem, the flask server sometimes hang forever(The client build a connection to server and then died before send anything). And I found it hanged at socket read function. The server was started by \"app.run()\" (The way you don't suggest to use) . So I readed the flask and werkzeug code and found werkzeug didn't set socket timeout default. So I must writed a class extends serving.WSGIRequestHandler and set the timeout = 0.5 and made it as a parameter for \"app.run()\" , it worked well.\nBut there was another problem, I couldn't run this server in multi-thread mode, because when I used flask commod to run this server, there was no way to set timeout, it didn't make \"app.run()\" as the start point\u3002\nI also tried gunicorn and still couldn't find a way both set timeout and run server in muti-thread mode.\nwhat should I do ?", "issue_status": "Closed", "issue_reporting_time": "2017-06-01T09:25:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "600": {"issue_url": "https://github.com/pallets/flask/issues/2349", "issue_id": "#2349", "issue_summary": "Adding Couchdb views from blueprint", "issue_description": "pseudoPixels commented on 1 Jun 2017 \u2022\nedited by ThiefMaster\nAdding Couchdb views from the blueprints are showing error... Tried with accessing the main app as 'current_app' but showing error 'RuntimeError: Working outside of application context.'\nMy Code from blueprint for adding/syncing couchdb views are as following:\nfrom flask import current_app as app\nmanager = CouchDBManager()\n\nwith app.app_context():\n    manager.setup(app.app_context())\n    manager.add_viewdef(my_couchdb_view_from_blueprint)\n    manager.sync(app.app_context())\nThe error message is as following:\nRuntimeError: Working outside of application context.\nThis typically means that you attempted to use functionality that needed\nto interface with the current application object in a way. To solve\nthis set up an application context with app.app_context().", "issue_status": "Closed", "issue_reporting_time": "2017-05-31T21:11:01Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "601": {"issue_url": "https://github.com/pallets/flask/issues/2345", "issue_id": "#2345", "issue_summary": "Use existing response.vary property to set vary header", "issue_description": "Member\ndavidism commented on 29 May 2017\n#2288 and #2322 added support for setting Vary: Cookie and not clobbering the existing Vary header. Unfortunately, there was already built-in support for that, we just missed it. Switch to this:\nresponse.vary.add('Cookie')", "issue_status": "Closed", "issue_reporting_time": "2017-05-29T15:50:44Z", "fixed_by": "#2346", "pull_request_summary": "use existing response.vary property to set vary header", "pull_request_description": "Member\ndavidism commented on 29 May 2017\ncloses #2345", "pull_request_status": "Merged", "issue_fixed_time": "2017-05-29T17:16:29Z", "files_changed": [["14", "flask/helpers.py"], ["3", "flask/sessions.py"], ["21", "tests/test_basic.py"]]}, "602": {"issue_url": "https://github.com/pallets/flask/issues/2341", "issue_id": "#2341", "issue_summary": "If FLASK_APP accept one argument and I do not send it, the default value is not correct, instead I get a ScriptInfo object.", "issue_description": "Contributor\njrbaez01 commented on 28 May 2017\nAn example is in the Flickr app link here\nAs a newcomer it is confusing when I follow the README.md, but the when running the app it results in the following error.", "issue_status": "Closed", "issue_reporting_time": "2017-05-27T21:36:21Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "603": {"issue_url": "https://github.com/pallets/flask/issues/2339", "issue_id": "#2339", "issue_summary": "investigate build stages on travis", "issue_description": "Contributor\nkennethreitz commented on 26 May 2017\nhttps://blog.travis-ci.com/2017-05-11-introducing-build-stages", "issue_status": "Closed", "issue_reporting_time": "2017-05-26T16:39:17Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "604": {"issue_url": "https://github.com/pallets/flask/issues/2337", "issue_id": "#2337", "issue_summary": "flask mutable session (with flask-session RedisSessionInterface)", "issue_description": "decentral1se commented on 26 May 2017\nI am using the RedisSessionInterface of flask-session to implement my server side sessions. I have a test case that relies on mutating the session and I have read that this is possible from the Flask documentation.\nHere's my test code (using pytest):\ndef test_code_already_used(app, client):\n    uri = url_for(\"login.username\")\n    response = client.get(uri)  # stores the initial state in the session\n    assert response.status_code == 302\n\n    query = urlparse(response.location).query\n    payload = dict(parse_qsl(query))\n    state = payload['state']  # get key for session state\n\n    with app.test_client() as context:\n        transaction = context.session_transaction()\n        with transaction as mutable_session:\n            mutable_session[state] = {'exchanged': True}  # mutates the session\n\n    # test code later fails becase the modification is not propagated\nMy application relies on seeing exchanged=True but this change is not there.\nAny ideas!?", "issue_status": "Closed", "issue_reporting_time": "2017-05-26T11:31:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "605": {"issue_url": "https://github.com/pallets/flask/issues/2336", "issue_id": "#2336", "issue_summary": "Switch theme to Alabaster", "issue_description": "Contributor\nkennethreitz commented on 26 May 2017\nNo description provided.", "issue_status": "Closed", "issue_reporting_time": "2017-05-25T21:35:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "606": {"issue_url": "https://github.com/pallets/flask/issues/2335", "issue_id": "#2335", "issue_summary": "reduce the number of build targets in the travis matrix", "issue_description": "Contributor\nkennethreitz commented on 26 May 2017\nhttps://travis-ci.org/pallets/flask/builds/236168998?utm_source=github_status&utm_medium=notification\nthere are currently 22 targets. There's no way those are all needed.", "issue_status": "Closed", "issue_reporting_time": "2017-05-25T21:34:55Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "607": {"issue_url": "https://github.com/pallets/flask/issues/2329", "issue_id": "#2329", "issue_summary": "Document how to write a config.py that loads config from the environment", "issue_description": "Member\ndavidism commented on 24 May 2017\nOn Heroku, we can't add a local config instance/config.py that's not part of the repo. Instead, they support configuration through env vars. Document this pattern.\nmyapp/config.py:\nMAIL_USERNAME = os.environ.get('FLASK_MAIL_USERNAME', 'default')\nLDAP_PORT = int(os.environ.get('FLASK_LDAP_PORT', 636))", "issue_status": "Closed", "issue_reporting_time": "2017-05-24T15:34:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "608": {"issue_url": "https://github.com/pallets/flask/issues/2328", "issue_id": "#2328", "issue_summary": "How Can I Make Pagination In Flask??", "issue_description": "MahbubAlom commented on 24 May 2017\nThe issue tracker is a tool to address bugs.\nPlease use the #pocoo IRC channel on freenode or Stack Overflow for questions.\nHow Can I Make Pagination In Flask??\n2", "issue_status": "Closed", "issue_reporting_time": "2017-05-24T15:21:12Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "609": {"issue_url": "https://github.com/pallets/flask/issues/2327", "issue_id": "#2327", "issue_summary": "Docs theme not responsive", "issue_description": "mixmastamyk commented on 24 May 2017\nHi, I'm reading the docs and working on code at the same time with somewhat narrow windows.\nThe Flask docs have a big sidebar on the left that is not always useful, and worse the body text has a fixed width that pushes it off the right side of the page. Makes it very hard to read without constantly scrolling.\nDoesn't fit in with old-school html wrapping or new responsive hotness. Disabling:\ndiv.document {\n /* width: 940px; */\n}\nwith the dev tools fixed the width problem, responsive css could disable the sidebar when the window is narrow. Cheers,", "issue_status": "Closed", "issue_reporting_time": "2017-05-24T02:52:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "610": {"issue_url": "https://github.com/pallets/flask/issues/2317", "issue_id": "#2317", "issue_summary": "Don't overwrite Vary header when setting for cookie access", "issue_description": "Member\ndavidism commented on 24 May 2017\nIf the Vary header is already set, the current session code just adds another header line. What it should do is update the existing header by splitting, adding the new option to the set, joining, and setting the new value. See Django's patch_vary_headers.\nRelated to #2288", "issue_status": "Closed", "issue_reporting_time": "2017-05-23T19:08:12Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "611": {"issue_url": "https://github.com/pallets/flask/issues/2313", "issue_id": "#2313", "issue_summary": "Organize the gevent tests into a single class", "issue_description": "Member\njeffwidman commented on 23 May 2017\nflask/tests/test_reqctx.py\nLines 147 to 196 in c8e56d5\n @pytest.mark.skipif(greenlet is None, reason='greenlet not installed') \n def test_greenlet_context_copying(): \n     app = flask.Flask(__name__) \n     greenlets = [] \n        @app.route('/') \n     def index(): \n         reqctx = flask._request_ctx_stack.top.copy() \n         def g(): \n             assert not flask.request \n             assert not flask.current_app \n             with reqctx: \n                 assert flask.request \n                 assert flask.current_app == app \n                 assert flask.request.path == '/' \n                 assert flask.request.args['foo'] == 'bar' \n             assert not flask.request \n             return 42 \n         greenlets.append(greenlet(g)) \n         return 'Hello World!' \n        rv = app.test_client().get('/?foo=bar') \n     assert rv.data == b'Hello World!' \n        result = greenlets[0].run() \n     assert result == 42 \n    @pytest.mark.skipif(greenlet is None, reason='greenlet not installed') \n def test_greenlet_context_copying_api(): \n     app = flask.Flask(__name__) \n     greenlets = [] \n        @app.route('/') \n     def index(): \n         reqctx = flask._request_ctx_stack.top.copy() \n         @flask.copy_current_request_context \n         def g(): \n             assert flask.request \n             assert flask.current_app == app \n             assert flask.request.path == '/' \n             assert flask.request.args['foo'] == 'bar' \n             return 42 \n         greenlets.append(greenlet(g)) \n         return 'Hello World!' \n        rv = app.test_client().get('/?foo=bar') \n     assert rv.data == b'Hello World!' \n        result = greenlets[0].run() \n     assert result == 42 \ncould be organized into a single class specifically for tests about greenlets.\nThis is cleaner because Pytest supports conditionally skipping the entire class if greenlets are missing rather than having to mark each test separately. And can trigger just that class of tests etc.", "issue_status": "Closed", "issue_reporting_time": "2017-05-23T17:25:24Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "612": {"issue_url": "https://github.com/pallets/flask/issues/2312", "issue_id": "#2312", "issue_summary": "Replace `modules_tmpdir` fixture with pytest's built-in `tmpdir` fixture", "issue_description": "Member\njeffwidman commented on 23 May 2017 \u2022\nedited\nI'm wondering if the modules_tmpdir fixture, could be removed/replaced in the tests with pytest's built-in tmpdir fixture?\nNot 100% confident this is possible/the right move, but it's worth investigating.", "issue_status": "Closed", "issue_reporting_time": "2017-05-23T17:17:15Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "613": {"issue_url": "https://github.com/pallets/flask/issues/2308", "issue_id": "#2308", "issue_summary": "Support for unregistering blueprints (or endpoints).", "issue_description": "iptq commented on 23 May 2017\nThe downside is that you cannot unregister a blueprint once an application was created without having to destroy the whole application object.\nthis statement appears in the docs, but is there a design reason behind this, or is it just because it hasn't been implemented yet? if it's not possible, what are alternatives for disabling an endpoint other than using some kind of variable to store whether an endpoint should be active?\n1", "issue_status": "Closed", "issue_reporting_time": "2017-05-23T03:45:20Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "614": {"issue_url": "https://github.com/pallets/flask/issues/2292", "issue_id": "#2292", "issue_summary": "Investigate adding app and debug args back into the CLI", "issue_description": "Member\ndavidism commented on 22 May 2017\nThe -a myapp:app and --debug flags were removed from the CLI and became environment variables instead. I'm not very clear on the reasons behind that, but at the time it was stated that Click could be fixed to support that again. Has Click been fixed? Let's try adding it back.\n2", "issue_status": "Closed", "issue_reporting_time": "2017-05-22T17:43:01Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "615": {"issue_url": "https://github.com/pallets/flask/issues/2290", "issue_id": "#2290", "issue_summary": "can i preserve my json output ?", "issue_description": "Dj-jom2x commented on 21 May 2017\nexample\ntest = {\n    \"b\": \"test\",\n    \"a\": \"test\",\n    \"h\": \"test\",\n    \"f\": \"test\"\n}\nthey should return\n {\n    \"b\": \"test\",\n    \"a\": \"test\",\n    \"h\": \"test\",\n    \"f\": \"test\"\n}\nadding this app.config[\"JSON_SORT_KEYS\"] = False will not follow my desire output\n {\n    \"h\": \"test\",\n    \"b\": \"test\",\n    \"f\": \"test\",\n    \"a\": \"test\"\n}\nremoving that it will sort ...\n {\n    \"a\": \"test\",\n    \"b\": \"test\",\n    \"f\": \"test\",\n    \"h\": \"test\"\n}\ni just want like JSON.stringify output ... preserving its order..", "issue_status": "Closed", "issue_reporting_time": "2017-05-20T22:48:30Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "616": {"issue_url": "https://github.com/pallets/flask/issues/2289", "issue_id": "#2289", "issue_summary": "Please tag a release", "issue_description": "Contributor\nsvenstaro commented on 21 May 2017\nYou published 0.12.2 to PyPI but didn't tag a git release.", "issue_status": "Closed", "issue_reporting_time": "2017-05-20T19:27:21Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "617": {"issue_url": "https://github.com/pallets/flask/issues/2287", "issue_id": "#2287", "issue_summary": "DRY up the test suite using pytest fixtures", "issue_description": "Member\njeffwidman commented on 20 May 2017 \u2022\nedited\nThe test suite is a bit of a mess as far as how each test sets up an app context, request context, etc.\nIt'd be nice to DRY this up using pytest fixtures.\nBenefits:\nMore readable tests.\nTests are easier to write.\nTests are easier to refactor.\nTests are more robust because it's easier to run a test with multiple parameters.\nThis is a large project, but easy to tackle incrementally. Perhaps it should be broken into multiple issues, as each section of tests requires some specific fixtures, for example jsonify() tests require some specific json setup.\nRelated: #2286", "issue_status": "Closed", "issue_reporting_time": "2017-05-19T19:14:12Z", "fixed_by": "#2306", "pull_request_summary": "DRYing up the test suite using pytest fixtures", "pull_request_description": "Contributor\nTafkas commented on 23 May 2017\nUsing pytest fixtures for test cases. Resolves #2287", "pull_request_status": "Merged", "issue_fixed_time": "2017-05-23T22:18:40Z", "files_changed": [["52", "tests/conftest.py"], ["96", "tests/test_appctx.py"], ["487", "tests/test_basic.py"], ["280", "tests/test_blueprints.py"], ["13", "tests/test_deprecations.py"], ["615", "tests/test_helpers.py"], ["7", "tests/test_regression.py"], ["51", "tests/test_reqctx.py"], ["210", "tests/test_templating.py"], ["96", "tests/test_testing.py"], ["22", "tests/test_user_error_handler.py"], ["44", "tests/test_views.py"]]}, "618": {"issue_url": "https://github.com/pallets/flask/issues/2286", "issue_id": "#2286", "issue_summary": "Rewrite the testing docs", "issue_description": "Member\ndavidism commented on 20 May 2017\nThe testing docs still talk about unittest. We need to update these with modern patterns using PyTest and fixtures.", "issue_status": "Closed", "issue_reporting_time": "2017-05-19T18:51:30Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "619": {"issue_url": "https://github.com/pallets/flask/issues/2285", "issue_id": "#2285", "issue_summary": "Review HTTP security", "issue_description": "Member\ndavidism commented on 16 May 2017\nWe should make sure we're providing good, thorough security defaults, or at least documentation on the available options. Not sure if this fits better as Flask config, Werkzeug middleware, or a separate Flask-HTTP-Security extension.\nOverview of HTTP security headers: https://blog.appcanary.com/2017/http-security-headers.html\nDjango's security options: https://docs.djangoproject.com/en/1.11/topics/security/ (some things, such as CSRF and SQL are handled by other libraries, not Flask)\nAs a first step, good for beginners, it would be nice to get a writeup here of what's already covered and what's not.\n1", "issue_status": "Closed", "issue_reporting_time": "2017-05-16T02:10:01Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "620": {"issue_url": "https://github.com/pallets/flask/issues/2283", "issue_id": "#2283", "issue_summary": "Flask development server segmentation fault on Alpine Linux", "issue_description": "rossgray commented on 15 May 2017\nHi,\nI am getting a segmentation fault when running the flask development server on Alpine Linux. Oddly, this issue only appears to occur when I install a recent version of the requests library (>= v2.13.0). In addition, this issue occurs even if my application is not using or importing the requests lib.\nEnvironment:\npython:3.6-alpine Docker image\nPython 3.6.1\nFlask 0.12\nWerkzeug 0.12.1\nCommands ran:\n/app # flask run\n * Serving Flask app \"service\"\n * Forcing debug mode on\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n * Restarting with stat\n * Debugger is active!\n * Debugger PIN: 960-427-520\n\n\n/app # pip install requests==2.12.5\n...\nSuccessfully installed requests-2.12.5\n/app # flask run\n * Serving Flask app \"service\"\n * Forcing debug mode on\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n * Restarting with stat\n * Debugger is active!\n * Debugger PIN: 960-427-520\n\n\n/app # pip install requests==2.13.0\n...\nSuccessfully installed requests-2.13.0\n/app # flask run\n * Serving Flask app \"service\"\n * Forcing debug mode on\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n * Restarting with stat\nSegmentation fault\n/app #  * Debugger is active!\n * Debugger PIN: 960-427-520\nThanks in advance", "issue_status": "Closed", "issue_reporting_time": "2017-05-15T10:30:15Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "621": {"issue_url": "https://github.com/pallets/flask/issues/2281", "issue_id": "#2281", "issue_summary": "Document how to set env vars for PowerShell", "issue_description": "Member\ndavidism commented on 12 May 2017\nPowerShell's syntax is different than CMD's.\n$env:FLASK_APP = \"hello.py\"\n$env:FLASK_DEBUG = \"1\"\nflask run\n7\n1", "issue_status": "Closed", "issue_reporting_time": "2017-05-12T14:14:26Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "622": {"issue_url": "https://github.com/pallets/flask/issues/2280", "issue_id": "#2280", "issue_summary": "Cannot add headers to static files", "issue_description": "roniemartinez commented on 12 May 2017\nHi,\nIt seems that it is not possible to add HTTP headers to static files. Using this link as reference, it was only able to modify headers for routes (not static files).", "issue_status": "Closed", "issue_reporting_time": "2017-05-12T12:56:11Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "623": {"issue_url": "https://github.com/pallets/flask/issues/2274", "issue_id": "#2274", "issue_summary": "server has 127 CLOSE_WAIT", "issue_description": "amiden commented on 9 May 2017 \u2022\nedited\nimport re\n\nimport json\nimport time\nimport mapi\nimport sys\nfrom flask import Flask, request, abort, render_template\n\napp = Flask(__name__)\n\n@app.route('/cityinfo', methods=['GET'])\ndef cityinfo():\n    if request.method == 'GET':\n        echo_str = request.args.get('echostr', '')\n        try:\n            key = request.headers.get('location')\n        except:\n            return ''\n        return mapi.getcity(key) #about use 10~59ms\n\n\n@app.route('/alive', methods=['GET'])\ndef alive():\n    return 'ok'\nif __name__ == '__main__':\n    crt = 'key/Nginx/1_bg.xxxx.club_bundle.crt'\n    key = 'key/Nginx/2_bg.xxxx.club.key'\n    try:\n        app.run('0.0.0.0',port=443,threaded=True,ssl_context=(crt,key))\n    except:\n        print 'error'`\nnohup sudo python as.py >1.log 2>&1 &\nabout run in 1000+/day for wechatapp ,then it down by CLOSE_WAIT", "issue_status": "Closed", "issue_reporting_time": "2017-05-08T20:36:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "624": {"issue_url": "https://github.com/pallets/flask/issues/2273", "issue_id": "#2273", "issue_summary": "request.input_stream inconsistency btw debug and normal mode", "issue_description": "furkee commented on 8 May 2017\nWhen app.config['DEBUG] = True, request.input_stream object has __enter__ and __exit__ methods which is cool because we can use it with with clause.\nWhen not in debug mode though, using input_stream object with with clause causes an AttributeError: __exit__ to be thrown.\nI am using request.input_stream object in a flask-restplus end-point to retrieve a file whose size is larger than RAM. I also realized that this stream object will not be there if the file size is small.\npython version = 2.7.12", "issue_status": "Closed", "issue_reporting_time": "2017-05-08T08:13:43Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "625": {"issue_url": "https://github.com/pallets/flask/issues/2272", "issue_id": "#2272", "issue_summary": "[Future] Option to get decoded urls in log", "issue_description": "dima74 commented on 5 May 2017\nHello! Flask logs urls as encoded strings. For example if I have route with cyrillic characters: @app.route('/\u043f\u0440\u0438\u0432\u0435\u0442') (https://gist.github.com/dima74/5e025da90ee90a78b65bc3e3c69623ea), than flask will log \"GET /%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82 HTTP/1.1\". It would be very nice if there is option to get that Flask logs urls decoded. (Thanks for Flask!)", "issue_status": "Closed", "issue_reporting_time": "2017-05-05T16:48:25Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "626": {"issue_url": "https://github.com/pallets/flask/issues/2270", "issue_id": "#2270", "issue_summary": "after_request func called too early for streaming responses", "issue_description": "savv commented on 4 May 2017\nprocess_response() calls the after_request handlers as soon as a response object is returned.\nIn the case of streaming responses, it would be more desirable to call after_request handlers at the same time as response.close() is called.", "issue_status": "Closed", "issue_reporting_time": "2017-05-04T10:04:29Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "627": {"issue_url": "https://github.com/pallets/flask/issues/2269", "issue_id": "#2269", "issue_summary": "Flaskr application problem", "issue_description": "jonathanahumada commented on 3 May 2017\nThe issue tracker is a tool to address bugs.\nPlease use the #pocoo IRC channel on freenode or Stack Overflow for questions.", "issue_status": "Closed", "issue_reporting_time": "2017-05-03T03:03:24Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "628": {"issue_url": "https://github.com/pallets/flask/issues/2268", "issue_id": "#2268", "issue_summary": "Catch-all errorhandler does not catch BadRequestKeyError", "issue_description": "sampeka commented on 2 May 2017 \u2022\nedited\nVersions\nPython 3.6.1\nFlask 0.12.1\nWerkzeug 0.12.1\nIssue\nA catch-all error handler (one that catchesException), does not catch werkzeug.exceptions.BadRequestKeyError. Here's a very quick illustration of the issue:\nhttps://github.com/sampeka/flask-issue\nSteps to repoduce:\nClone the repo above, install requirements etc\nRun python ./example.py\nNavigate to /good, see that the error handler is correctly called\nNavigate to /bad, see that the error handler is not called\nIf I define an error handler specifically for BadRequestKeyError it will be called, as expected.\nEdit: If you downgrade to Flask==0.10.1, this example will work.", "issue_status": "Closed", "issue_reporting_time": "2017-05-02T11:52:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "629": {"issue_url": "https://github.com/pallets/flask/issues/2267", "issue_id": "#2267", "issue_summary": "Flask error handler caching leads to inconsistent behavior", "issue_description": "ngaya-ll commented on 2 May 2017\nWhen Flask finds an error handler for a given exception, it caches it in the handler map. This can lead to incorrect behavior for subclasses of the exception.\nHere is some code demonstrating the problem:\nfrom flask import Flask\nfrom werkzeug.exceptions import InternalServerError\n\n\nclass E1(Exception):\n    pass\n\n\nclass E2(Exception):\n    pass\n\n\nclass E(E1, E2):\n    pass\n\n\napp = Flask(__name__)\n\n\n@app.errorhandler(E2)\ndef handle_e2(e):\n    return \"E2\", 500\n\n\n@app.errorhandler(Exception)\ndef handle_exception(e):\n    return \"Exception\", 500\n\n\n@app.route(\"/<exception>\", methods=['POST'])\ndef raise_exception(exception):\n    exc = globals()[exception]\n    raise exc\n\n\ndef test_errorhandler_precedence():\n    client = app.test_client()\n\n    response1 = client.post('/E1')\n    assert response1.data == \"Exception\"\n\n    response2 = client.post('/E')\n    assert response2.data == \"E2\"\nIn this example, we have two exception classes, E1 and E2, and a third exception E that inherits from both. We register error handlers for E2 and Exception. When E is raised, Flask should invoke the E2 error handler as E2 comes before Exception in the MRO of E. But if E1 has been raised in the past, then the Exception error handler will be \"cached\" as the handler for E1, so that handler will be invoked instead.", "issue_status": "Closed", "issue_reporting_time": "2017-05-02T01:20:27Z", "fixed_by": "#2362", "pull_request_summary": "Remove error handler cache", "pull_request_description": "Member\ndavidism commented on 5 Jun 2017\nCaching handlers for the exception MRO caused issues with some inheritance setups. I don't expect hierarchies to be deep enough for this to affect most cases, but if performance is an issues handlers should be explicitly registered for each class they apply to.\ncloses #2267, closes #1433", "pull_request_status": "Merged", "issue_fixed_time": "2017-06-05T13:34:49Z", "files_changed": [["4", "CHANGES"], ["26", "flask/app.py"], ["33", "tests/test_basic.py"]]}, "630": {"issue_url": "https://github.com/pallets/flask/issues/2266", "issue_id": "#2266", "issue_summary": "Support create_app that doesn't take ScriptInfo as first argument", "issue_description": "Member\ndavidism commented on 1 May 2017\nUse inspect to check if the factory takes an argument before passing the script info instance to it.\nPreferably pass the info as a keyword instead of positional argument, so that the developer could do something like def create_app(config=None, script_info=None). Still check if the function takes a script_info argument before passing it.\nAlternatively (or additionally), show how to pass arguments to the factory through the info. I think this can be done by overriding run, adding an option like --config, and setting info.data['config'] before invoking the built-in run command.", "issue_status": "Closed", "issue_reporting_time": "2017-05-01T14:20:57Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "631": {"issue_url": "https://github.com/pallets/flask/issues/2265", "issue_id": "#2265", "issue_summary": "Detect `create_app` when FLASK_APP doesn't specify app object", "issue_description": "Member\ndavidism commented on 1 May 2017 \u2022\nedited\nfind_best_app only looks for app and application. If it can't find those but finds the name create_app, it should try to call that with no arguments to get the Flask app.\nIf we modify ScriptInfo.load_app to pass itself to locate_app and find_best_app, we can make this consistent with #2266.", "issue_status": "Closed", "issue_reporting_time": "2017-05-01T14:09:54Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "632": {"issue_url": "https://github.com/pallets/flask/issues/2264", "issue_id": "#2264", "issue_summary": "Handle app factory in FLASK_APP", "issue_description": "Member\ndavidism commented on 1 May 2017 \u2022\nedited\nFLASK_APP=myproject.app:create_app('dev')\n\nGunicorn does this with eval, which I'm not super happy with. Instead, we could use literal_eval to allow a simple list of arguments. The line should never be so complicated that eval would be necessary anyway.\n# might need to fix this regex\nm = re.search(r'(\\w+)(\\(.*\\))', app_obj)\n\nif m:\n    app = getattr(mod, m.group(1))(*literal_eval(m.group(2)))\n3", "issue_status": "Closed", "issue_reporting_time": "2017-05-01T14:07:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "633": {"issue_url": "https://github.com/pallets/flask/issues/2263", "issue_id": "#2263", "issue_summary": "\"Cookie header\" munge bad and good cookies together", "issue_description": "dorfsmay commented on 30 Apr 2017\nAs I am trying to understand how different apps servers and libraries deal with invalid Cookie inside the \"Cookie header\" (see https://github.com/dorfsmay/Invalid_cookies_in_Cookie_header ), I realised that Flask is munging the invalid cookie with the next one, together:\ncurl -b 'SID=31d4d96e407aad42; muffin ; lang=en-US;' localhost:8080\n==> {'SID': '31d4d96e407aad42', 'muffin ; lang': 'en-US'}\nI'm sure this was not the desired behaviour, wouldn't it better to just ignore any string between semi-colons that cannot be translated into a valid cookie (so any string without an equal sign)?", "issue_status": "Closed", "issue_reporting_time": "2017-04-30T18:03:14Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "634": {"issue_url": "https://github.com/pallets/flask/issues/2261", "issue_id": "#2261", "issue_summary": "Documentation: Term \"development mode\" is unclear", "issue_description": "dradetsky commented on 28 Apr 2017\nI'm doing some work which requires defining some context hooks for our flask app. When reading the documentation for request contexts* I came across the passage:\nIn production mode if an exception is not caught, the 500 internal server handler is called. In development mode however...\nAs a user, I want to know: What is 'development mode?' I think it's debug mode (e.g. app.run(debug=True)). I've seen several people use the terms interchangeably when searching for help, but not either the flask developers or the official documentation. The flask docs don't appear to have an index (is it hidden somewhere?), and quick search does not appear to work. Google site search of the dev docs does not immediately turn up an obvious answer.\nIMO, this is a bug in the documentation. Assuming for the sake of argument I'm right about dev=debug, that passage should be either:\n\"In development mode (i.e. with debug=True) however...\" or\nThe text 'development mode' is a link to a list of terms & their definitions\nSomething along those lines.\nMaybe if I had carefully read all of the docs from beginning to end, or at least carefully read the tutorial twice, I might not be confused about this. But lots of your users won't do that. That's why I call it a bug (it's sorta like failing to validate input).\n*I was in fact reading the docs for the version of flask I'm using, but pointing to dev-version docs b/c I presume they represent the current state of the documentation", "issue_status": "Closed", "issue_reporting_time": "2017-04-27T19:47:20Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "635": {"issue_url": "https://github.com/pallets/flask/issues/2260", "issue_id": "#2260", "issue_summary": "Flask does not detect route collisions between blueprints and app", "issue_description": "davejohncole commented on 27 Apr 2017\nThe following program demonstrates the effect of defining the same route across blueprints and the app - fetch http://localhost:5678/hello for each run:\n$ python server.py app app\n$ python server.py bp\n$ python server.py app\n$ python server.py app bp\n$ python server.py bp app\n$ python server.py bp app bp\nIt surprised me that Flask does not report route collisions.\nimport sys\nfrom flask import Flask, Blueprint\n\n\ndef main():\n    bp_num = 1\n    app = Flask(__name__)\n    for arg in sys.argv:\n        if arg == 'bp':\n            bp_name = 'bp%d' % bp_num\n            bp_num += 1\n            bp = Blueprint(bp_name, __name__)\n\n            @bp.route('/hello')\n            def hello_bp():\n                return 'Hello ' + bp_name\n            app.register_blueprint(bp)\n\n        if arg == 'app':\n            @app.route('/hello')\n            def hello():\n                return 'Hello'\n\n    app.run(host='0.0.0.0', port=5678)\n\n\nif __name__ == '__main__':\n    main()", "issue_status": "Closed", "issue_reporting_time": "2017-04-27T04:29:30Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "636": {"issue_url": "https://github.com/pallets/flask/issues/2257", "issue_id": "#2257", "issue_summary": "QueueHandler logging does not work behind uwsgi", "issue_description": "vimalloc commented on 25 Apr 2017\n(I'm not sure if I should open this here or at uwsgi, feel free to close if this is not appropriate).\nUsing a QueueHandler with flask works fine when using the built in flask server, but it fails to log to any of the handlers specified in the QueueHandler when run behind uwsgi (Flask==0.12.1, uWSGI==2.0.15, python==3.5.2).\nHere is an example app to demonstrate this:\nimport logging\nfrom logging.handlers import SMTPHandler, QueueHandler, QueueListener\nfrom queue import Queue\nfrom flask import jsonify, Flask\n\napp = Flask(__name__)\napp.debug = False\napp.logger.setLevel(logging.INFO)\n\n# Setup logging formatting\nlog_fmt = logging.Formatter(\n    fmt='%(levelname)s: %(asctime)s - %(name)s - %(message)s',\n    datefmt='%m/%d/%Y %H:%M:%S'\n)\n\n# Setup file log handler\nfile_handler = logging.FileHandler('/tmp/test_logger.log')\nfile_handler.setLevel(logging.INFO)\nfile_handler.setFormatter(log_fmt)\n\n# Setup email log handler\nmail_handler = SMTPHandler(\n    'localhost',\n    'flask_app_error@domain.tld',\n    ['email@domain.tld'],\n    'Error in flask app'\n)\nmail_handler.setLevel(logging.ERROR)\nmail_handler.setFormatter(log_fmt)\n\n# Setup a queue handler which will handle logs on a separate thread\nlog_queue = Queue(-1)\nqueue_handler = QueueHandler(log_queue)\nqueue_listener = QueueListener(log_queue, mail_handler, file_handler,\n                               respect_handler_level=True)\napp.logger.addHandler(queue_handler)\nqueue_listener.start()\n\nlog = logging.getLogger(__name__)\n\n@app.route('/error')\ndef error_test():\n    log.error(\"Test logging\")\n    return jsonify({'foo': 'bar})\n\nif __name__ == '__main__':\n    app.run()\nAnd I run it with:\nuwsgi --http :5000 --mount /=test_logger:app --manage-script-name\nIf instead of using a QueueHandler/QueueListener, I pass the log handlers to the app.logger directly, things work as expected.\napp.logger.addHandler(file_handler)\napp.logger.addHandler(mail_handler)\nHowever, I would like to be able to utilize QueueHandler and QueueListener to do logging on a separate thread if possible.", "issue_status": "Closed", "issue_reporting_time": "2017-04-25T16:54:56Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "637": {"issue_url": "https://github.com/pallets/flask/issues/2255", "issue_id": "#2255", "issue_summary": "Generating relative url with app context should not require SERVER_NAME", "issue_description": "Member\ndavidism commented on 23 Apr 2017 \u2022\nedited\nThis is a pattern to generate the url to pass to the test client during testing, instead of writing out the url manually.\nwith app.app_context():\n    url = url_for('foo', _external=False)\nThis currently fails if no SERVER_NAME is set, even though it's not needed for relative urls. url_for could be modified to support the case where there's only an app context and _external=False was passed. Instead of raising an error, create an adapter with a dummy server name, like localhost.\nDocumenting the pattern in the testing docs might be useful too.\nContinued from #801.", "issue_status": "Closed", "issue_reporting_time": "2017-04-23T16:26:40Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "638": {"issue_url": "https://github.com/pallets/flask/issues/2253", "issue_id": "#2253", "issue_summary": "Flask installation issue", "issue_description": "Hashimsmart commented on 22 Apr 2017\nNo distribution found", "issue_status": "Closed", "issue_reporting_time": "2017-04-22T06:25:16Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "639": {"issue_url": "https://github.com/pallets/flask/issues/2251", "issue_id": "#2251", "issue_summary": "Class-based View should set provide_automatic_options attr in as_view", "issue_description": "Member\ndavidism commented on 21 Apr 2017 \u2022\nedited\nDeprecate in favor of #2249, #1489, #1488, which adds the arg to add_url_rule. We couldn't figure out if there was a reason for doing it with an attribute originally.", "issue_status": "Closed", "issue_reporting_time": "2017-04-21T15:33:37Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "640": {"issue_url": "https://github.com/pallets/flask/issues/2250", "issue_id": "#2250", "issue_summary": "circular import error with flask cli is misleading", "issue_description": "eMerzh commented on 21 Apr 2017\nI got a circular import error in my flask app,\nand i launch it using flask run.\nit seems to launch but when i go the endpoint with my browser,\ni got a pretty misleading error message :\nNoAppException: The file/path provided (run) does not appear to exist. Please verify the path is correct. If app is not on PYTHONPATH, ensure the extension is .py\nbut when i run it using the run.py file i got:\nImportError: cannot import name XXXX\nit can be great to have a better exception when there is an import error", "issue_status": "Closed", "issue_reporting_time": "2017-04-21T15:03:59Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "641": {"issue_url": "https://github.com/pallets/flask/issues/2246", "issue_id": "#2246", "issue_summary": "CLI silences ImportError", "issue_description": "chuckyz commented on 17 Apr 2017 \u2022\nedited\nEnvironment (CentOS 7 Vagrant in Virtualbox on Windows 10):\n[vagrant@localhost flaskr]$ cat /etc/redhat-release\nCentOS Linux release 7.3.1611 (Core)\n[vagrant@localhost flaskr]$ python --version\nPython 2.7.5\n[vagrant@localhost flaskr]$ pip freeze | grep -i flask\nFlask==0.12\nflaskr==0.0.0\nI was following the flask tutorial and could not get initdb to show up. Upon randomly trying the flaskr.py script I received the following:\n[vagrant@localhost flaskr]$ python flaskr/flaskr.py\nTraceback (most recent call last):\n  File \"flaskr/flaskr.py\", line 3, in <module>\n    from flask import Flask, request, session, g, redirect, url_for, abord, \\\nImportError: cannot import name abord\nWhen flask is run with the proper export statements here is the output:\n[vagrant@localhost flaskr]$ flask\nUsage: flask [OPTIONS] COMMAND [ARGS]...\n\n  This shell command acts as general utility script for Flask applications.\n\n  It loads the application configured (through the FLASK_APP environment\n  variable) and then provides commands either provided by the application or\n  Flask itself.\n\n  The most useful commands are the \"run\" and \"shell\" command.\n\n  Example usage:\n\n    $ export FLASK_APP=hello.py\n    $ export FLASK_DEBUG=1\n    $ flask run\n\nOptions:\n  --version  Show the flask version\n  --help     Show this message and exit.\n\nCommands:\n  run    Runs a development server.\n  shell  Runs a shell in the app context.\nI found this out by trying to get the shell to run to see if I could just find the init_db() function through the flask shell.\n[vagrant@localhost flaskr]$ flask shell\nUsage: flask shell [OPTIONS]\n\nError: The file/path provided (flaskr) does not appear to exist.  Please verify the path is correct.  If app is not on PYTHONPATH\n, ensure the extension is .py\nImmediately upon fixing the spelling error, I was able to access flask initdb.\nI searched through the open and closed errors and could not find this exact thing. It simply seems unclear, and might be nice to bubble up errors to the flask CLI like the above.", "issue_status": "Closed", "issue_reporting_time": "2017-04-16T18:51:32Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "642": {"issue_url": "https://github.com/pallets/flask/issues/2245", "issue_id": "#2245", "issue_summary": "file input request filepath.", "issue_description": "faststare commented on 15 Apr 2017 \u2022\nedited\nhello flask,\nI just need help regarding request.files['spam'].\nwhy request.files not have filepath attribute?\nhere my stackflow issue http://stackoverflow.com/questions/41882959/get-path-of-file-uploaded-to-flask\nthat needed a fullpath attribute.\nplease kindly support it.", "issue_status": "Closed", "issue_reporting_time": "2017-04-15T02:36:28Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "643": {"issue_url": "https://github.com/pallets/flask/issues/2243", "issue_id": "#2243", "issue_summary": "Take advantage of Py3.6 json support for bytes", "issue_description": "Member\ndavidism commented on 15 Apr 2017 \u2022\nedited\nPython 3.6 added support for loading json from str or bytes. It handles detection of the three encodings supported by JSON. Would be nice to take advantage of this if the user is using 3.6+ instead of our basic \"assume it's UTF-8\" approach.\nWould have to make sure simplejson also allows this (I think it does).\nThen again, I'm not sure there have been any reports of Flask decoding JSON incorrectly. Maybe no real clients are encoding with anything besides UTF-8?", "issue_status": "Closed", "issue_reporting_time": "2017-04-14T20:30:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "644": {"issue_url": "https://github.com/pallets/flask/issues/2241", "issue_id": "#2241", "issue_summary": "Documentation on Larger Applications could reference Blueprints (0.12.1)", "issue_description": "AngusP commented on 13 Apr 2017\nFrom line https://github.com/pallets/flask/blame/master/docs/patterns/packages.rst#L123 to https://github.com/pallets/flask/blame/master/docs/patterns/packages.rst#L133 circular imports are discussed, correctly pointing out that in the example, one has been introduced. However, surely that could be avoided if instead the views file ised a Blueprint, removing the dependency on the Flask object app\n(For reference here is the same page: http://flask.pocoo.org/docs/0.21/patterns/packages/)", "issue_status": "Closed", "issue_reporting_time": "2017-04-13T17:10:35Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "645": {"issue_url": "https://github.com/pallets/flask/issues/2239", "issue_id": "#2239", "issue_summary": "Bind to IPv6 and IPv4 simultanously (Dual Stack operation)", "issue_description": "TheDiveO commented on 13 Apr 2017\nAt this time, Flask.run() accepts only a host= parameter containing a single address. While :: for the Linux kernel also accepts IPv4-mapped IPv6 addresses from the ::ffff:0.0.0.0/96 range, other dual stack implementations, such as Windows (and OpenBSD I think) do not map IPv4 addresses into the IPv6 address space for (IMHO sound) security rationales.\nPlease support binding to multiple addresses, thus supporting dual stack deployment, such as host=('0.0.0.0', '::').", "issue_status": "Closed", "issue_reporting_time": "2017-04-12T18:51:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "646": {"issue_url": "https://github.com/pallets/flask/issues/2236", "issue_id": "#2236", "issue_summary": "Bug in url_for() function when you run a Flask application through CGI", "issue_description": "koddr commented on 11 Apr 2017 \u2022\nedited\nNote: I don't observe this bug if I run application on a dedicated server (VDS) with Nginx and uWSGI or Gunicorn, only on an shared hosting (Apache2).\nMy application structure:\n\u2514\u2500 site.com\n     \u2514\u2500\u2500 public_html\n             \u251c\u2500 venv             <-- virtualenv dir with Python 3.4.3\n             \u251c\u2500 templates        <-- templates dir with `page.html`\n             \u251c\u2500 .htaccess        <-- HTACCESS file\n             \u251c\u2500 app.cgi          <-- CGI script\n             \u2514\u2500 app.py           <-- Very basic Flask application\nFiles .htaccess and app.cgi I take from official docs, but duplicate for comfort.\nAnd this is .htaccess file:\nRewriteEngine On\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^(.*)$ /home/XXXX/site.com/public_html/app.cgi/$1 [L]\nYep, it's app.cgi:\n#!/home/XXXX/site.com/public_html/venv/bin/python3.4\n# -*- coding: utf-8 -*-\n\nfrom wsgiref.handlers import CGIHandler\nfrom app import app\n\nCGIHandler().run(app)\nThis is my app.py file:\n# -*- coding: utf-8 -*-\n\nfrom flask import Flask, render_template, url_for\n\napp = Flask(__name__)\n\n@app.route('/<slug>')\ndef page(slug):\n    return render_template('page.html', slug=slug)\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0')\nTemplate is:\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\"/>\n    <title>{{ slug }}</title>\n</head>\n<body>\n    <a href=\"{{ url_for('page', slug='about') }}\">About page</a>\n    <a href=\"{{ url_for('page', slug='contacts') }}\">Contacts page</a>\n</body>\n</html>\nAll working fine, but if I go to http://site.com/about and click to Contacts page link \u2014 URL on browser adress is http://site.com/app.cgi/contacts instead http://site.com/contacts O_o I delete /app.cgi/ from adress stroke and get the same page!\nWhat is this? Bug in url_for() functon? Fix it please.", "issue_status": "Closed", "issue_reporting_time": "2017-04-11T17:56:34Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "647": {"issue_url": "https://github.com/pallets/flask/issues/2235", "issue_id": "#2235", "issue_summary": "Import error while config the app", "issue_description": "sathiz1993 commented on 9 Apr 2017\nI try this to config my flask application, It returns the import error\napp.config.from_object('config')\nI try app.config.from_object('app.config')\nthen it works", "issue_status": "Closed", "issue_reporting_time": "2017-04-09T12:30:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "648": {"issue_url": "https://github.com/pallets/flask/issues/2233", "issue_id": "#2233", "issue_summary": "Does Flask support regular expressions in its subdomain", "issue_description": "LiGuangTian commented on 7 Apr 2017\nThe issue tracker is a tool to address bugs.\nPlease use the #pocoo IRC channel on freenode or Stack Overflow for questions.", "issue_status": "Closed", "issue_reporting_time": "2017-04-07T10:07:01Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "649": {"issue_url": "https://github.com/pallets/flask/issues/2232", "issue_id": "#2232", "issue_summary": "FLASK_DEBUG=1 causes ModuleNotFoundError: No module named 'flask'", "issue_description": "hniedner commented on 7 Apr 2017\nA similar phenomenon has been described on Win10, however this occurs on a Mac (10.12.5 Beta) after upgrading to Python Version 3.6.1. The Flask application runs fine without DEBUG enabled.\nBefore filing this as a dupe please consider that I am using Werkzeug (0.12.1) already.\npip3 list:\nappdirs (1.4.0)\nargh (0.26.2)\nclick (6.7)\ndominate (2.3.1)\nFlask (0.12.1)\nFlask-Bootstrap (3.3.7.1)\nFlask-Bower (1.2.1)\nFlask-WTF (0.14.2)\nitsdangerous (0.24)\nJinja2 (2.9.6)\nMarkupSafe (1.0)\npackaging (16.8)\npathtools (0.1.2)\npbr (1.10.0)\npip (9.0.1)\npyparsing (2.1.10)\nPyYAML (3.12)\nrequests (2.13.0)\nsetuptools (28.8.0)\nsix (1.10.0)\nstevedore (1.20.0)\nvirtualenv (15.1.0)\nvirtualenv-clone (0.2.6)\nvirtualenvwrapper (4.7.2)\nvisitor (0.1.3)\nWerkzeug (0.12.1)\nwheel (0.29.0)\nWTForms (2.1)", "issue_status": "Closed", "issue_reporting_time": "2017-04-06T20:05:35Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "650": {"issue_url": "https://github.com/pallets/flask/issues/2229", "issue_id": "#2229", "issue_summary": "Chunked uploads missing body data.", "issue_description": "Lukasa commented on 4 Apr 2017\nSummary\nIn basic Flask applications, the body data of chunked uploads appears to go missing: that is, they do not appear in request.data. I have reproduced this with two different WSGI servers (gunicorn and twisted), both of which handle chunked data appropriately. Non-chunked data does not suffer this problem. I've reproduced this problem on both Python 2.7 and Python 3.6.\nReproduction\nThe following Flask application demonstrates the problem:\nfrom flask import Flask, request\napp = Flask(__name__)\n\n@app.route('/', methods=['GET', 'POST'])\ndef hello_world():\n    return request.data\nwhen run like this: gunicorn -w 4 example:app.\nThe following test script can be run:\nimport requests\n\ndef gen():\n    yield b\"hello\"\n    yield b\"world\"\n\nprint(\"Making first request\")\nr = requests.post('http://localhost:8000/', data=b'helloworld')\nprint(\"Got: %s\" % r.content.decode('utf-8'))\nprint(\"Making second request\")\nr = requests.post('http://localhost:8000/', data=gen())\nprint(\"Got: %s\" % r.content.decode('utf-8'))\nExpected Output\nMaking first request\nGot: helloworld\nMaking second request\nGot: helloworld\nActual Output\nMaking first request\nGot: helloworld\nMaking second request\nGot: \nEnvironment\n% python -VV                                      \nPython 3.6.0 (default, Jan 18 2017, 18:08:34) \n[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.42.1)]\n% pip freeze                                      \nappdirs==1.4.3\nclick==6.7\nFlask==0.12.1\ngunicorn==19.7.1\nitsdangerous==0.24\nJinja2==2.9.6\nMarkupSafe==1.0\npackaging==16.8\npyparsing==2.2.0\nsix==1.10.0\nWerkzeug==0.12.1\nReferences\nThis was spotted at httpbin. See postmanlabs/httpbin#340 for more.\n4", "issue_status": "Closed", "issue_reporting_time": "2017-04-04T11:29:37Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "651": {"issue_url": "https://github.com/pallets/flask/issues/2227", "issue_id": "#2227", "issue_summary": "flask.pocoo.org not updated with latest release (0.12.1)", "issue_description": "basvdheuvel commented on 1 Apr 2017\nI was trying to find out what changed from 0.12 to 0.12.1 and had to come here. Please update the changelog on the website.", "issue_status": "Closed", "issue_reporting_time": "2017-04-01T14:45:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "652": {"issue_url": "https://github.com/pallets/flask/issues/2226", "issue_id": "#2226", "issue_summary": "Enable TRAP_BAD_REQUEST_ERRORS when in debug mode", "issue_description": "Member\ndavidism commented on 31 Mar 2017 \u2022\nedited\nStack Overflow gets a constant stream of questions about 400 errors that are caused by missing keys. The fact that accessing args, form, files, values, session, and headers returns an HTTP error instead of a traceback is confusing to a lot of users; they get no feedback about what went wrong and it's easy to miss typos or a missing name attribute. This config should default to the value of DEBUG and the behavior should be much more clearly documented.", "issue_status": "Closed", "issue_reporting_time": "2017-03-31T18:22:13Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "653": {"issue_url": "https://github.com/pallets/flask/issues/2225", "issue_id": "#2225", "issue_summary": "Debugging during bootstrapping", "issue_description": "der-Daniel commented on 28 Mar 2017\nHi,\nwhen I start my Flask app via python3 -m flask run and there is an error in my code, Flask only returns with the following message:\nUsage: python -m flask run [OPTIONS]\n\nError: The file/path provided (server2.run) does not appear to exist.  Please verify the path is correct.  If app is not on PYTHONPATH, ensure the extension is .py\nIs there a way to get proper error stack messages or am I not seeing the obvious..\n~ For Frodo", "issue_status": "Closed", "issue_reporting_time": "2017-03-27T21:50:01Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "654": {"issue_url": "https://github.com/pallets/flask/issues/2224", "issue_id": "#2224", "issue_summary": "Per blueprint errorhandlers.", "issue_description": "mohamed-aziz commented on 24 Mar 2017\nIt would be nice having error handlers by blueprint, is this achievable ?", "issue_status": "Closed", "issue_reporting_time": "2017-03-24T16:29:18Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "655": {"issue_url": "https://github.com/pallets/flask/issues/2221", "issue_id": "#2221", "issue_summary": "Flask treats SystemExit and other BaseExceptions as indicating success", "issue_description": "Contributor\nDiggsey commented on 23 Mar 2017\nSee here:\nhttps://github.com/pallets/flask/blob/master/flask/app.py#L1991\nWhen combined with a database layer, this completely breaks transaction guarantees, as the request context \"pop\" handler will see no error and assume the transaction was successful, resulting in it being committed while in an inconsistent state.", "issue_status": "Closed", "issue_reporting_time": "2017-03-23T14:01:44Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "656": {"issue_url": "https://github.com/pallets/flask/issues/2220", "issue_id": "#2220", "issue_summary": "app.run(port='5000', debug=True) error", "issue_description": "trigremm commented on 23 Mar 2017 \u2022\nedited\nInappropriate behaviour in app.run function with debug set to True and False\napp.run(port='5000', debug=False) runs perfectly\nhowever when debug=True\napp.run(port='5000', debug=True) it throws error\nTraceback (most recent call last):\n  File \"hello_world.py\", line 13, in <module>\n    app.run(port='5000', debug=True)\n  File \"/usr/lib64/python3.5/site-packages/flask/app.py\", line 841, in run\n    run_simple(host, port, self, **options)\n  File \"/usr/lib/python3.5/site-packages/werkzeug/serving.py\", line 717, in run_simple\n    s.bind((hostname, port))\nTypeError: an integer is required (got type str)```", "issue_status": "Closed", "issue_reporting_time": "2017-03-23T10:46:42Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "657": {"issue_url": "https://github.com/pallets/flask/issues/2218", "issue_id": "#2218", "issue_summary": "Werkzeug 0.12.0 changed how abort works", "issue_description": "aluttik commented on 22 Mar 2017\nThis line in flask.__init__.py breaks everything now that werkzeug==0.12.0 was released.\nwerkzeug.exceptions.abort is now a function, so abort.mapping throws an error.\nThis line in setup.py definitely needs to be updated - preferably with a frozen Werkzeug version so this doesn't happen again.", "issue_status": "Closed", "issue_reporting_time": "2017-03-22T04:07:37Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "658": {"issue_url": "https://github.com/pallets/flask/issues/2216", "issue_id": "#2216", "issue_summary": "EOFError during GET request due to broken session file.", "issue_description": "Nexolight commented on 20 Mar 2017 \u2022\nedited\nI get this error in my logs from time to time and the only solution is to restart the server. I have no idea from where it comes but I assume this is a flask internal issue.\n2017-03-20 18:42:17,346 ERROR    xposed.xposed_main                            Exception on /serverstats [GET]\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.4/dist-packages/flask/app.py\", line 1817, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/usr/local/lib/python3.4/dist-packages/flask/app.py\", line 1479, in full_dispatch_request\n    response = self.process_response(response)\n  File \"/usr/local/lib/python3.4/dist-packages/flask/app.py\", line 1693, in process_response\n    self.save_session(ctx.session, response)\n  File \"/usr/local/lib/python3.4/dist-packages/flask/app.py\", line 837, in save_session\n    return self.session_interface.save_session(self, session, response)\n  File \"/usr/local/lib/python3.4/dist-packages/flask_session/sessions.py\", line 355, in save_session\n    total_seconds(app.permanent_session_lifetime))\n  File \"/usr/local/lib/python3.4/dist-packages/werkzeug/contrib/cache.py\", line 762, in set\n    self._prune()\n  File \"/usr/local/lib/python3.4/dist-packages/werkzeug/contrib/cache.py\", line 715, in _prune\n    expires = pickle.load(f)\nEOFError: Ran out of input", "issue_status": "Closed", "issue_reporting_time": "2017-03-20T17:51:43Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "659": {"issue_url": "https://github.com/pallets/flask/issues/2215", "issue_id": "#2215", "issue_summary": "Support for dict-like arguments in request.args", "issue_description": "Mahi commented on 20 Mar 2017 \u2022\nedited\nSometimes you need key-value pairs in your query params, and at those times it would be nice to have a built-in support. Here's what I've seen some APIs use, which looks reasonable to me:\nhttp://example.com/api/search?name=Markus&hobby[football]=1&hobby[basketball]=0\nWhich would construct request.args like so:\n{\n    'name': 'Markus',\n    'hobby': {\n        'football': 1,\n        'basketball': 0,\n    }\n}\n1\n2", "issue_status": "Closed", "issue_reporting_time": "2017-03-20T14:44:59Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "660": {"issue_url": "https://github.com/pallets/flask/issues/2214", "issue_id": "#2214", "issue_summary": "Flask blames FLASK_APP on all ImportErrors", "issue_description": "Contributor\nedbrannin commented on 20 Mar 2017 \u2022\nedited\n(Observed on Python 2.7; untested on 3.x)\nSteps to reproduce:\necho \"import thisisnotarealpackage\" > error_app.py\nexport FLASK_APP=error_app.py\nflask run\nExpected result:\nSome indication that thisisnotarealpackage is not a real package\nObserved result:\nUsage: python -m flask run [OPTIONS]\n\nError: The file/path provided (error) does not appear to exist.\nPlease verify the path is correct.\nIf app is not on PYTHONPATH, ensure the extension is .py\n(Newlines added)\nWhy Bother\nThis has been causing some confusion on my team because cx_Oracle can fail to import (from the bowels of SQLAlchemy) if it can't find certain Oracle support files on the host machine.", "issue_status": "Closed", "issue_reporting_time": "2017-03-20T14:20:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "661": {"issue_url": "https://github.com/pallets/flask/issues/2212", "issue_id": "#2212", "issue_summary": "Documentation: Installing and virtual environment under python3", "issue_description": "Contributor\nrunar-rkmedia commented on 19 Mar 2017\nFor installing Flask under a virtual environment with python3, the procedure is somewhat different that what is proposed in the Documentation, under Installation, virtuallenv. See Answer by geckon to question Using Python 3 in virtualenv\nThis is a minor change, just\npython3 -m venv /path/to/new/virtual/environment\ninstead of\nvirtualenv venv\nI would be willing to contribute with this if assigned the task.\n1", "issue_status": "Closed", "issue_reporting_time": "2017-03-19T16:09:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "662": {"issue_url": "https://github.com/pallets/flask/issues/2208", "issue_id": "#2208", "issue_summary": "Do not swallow exceptions if CLI fails to load", "issue_description": "Contributor\nsvenstaro commented on 16 Mar 2017 \u2022\nedited\nI think the changes introduced in fa6eded that swallow ALL exceptions if loading a custom CLI command fails are not good for the general development flow. I often do flask --help to see whether my custom command comes up fine and when it doesn't I don't get exceptions and I don't really know what I've done wrong.\nI think this try-except should be removed. I really think the CLI should fail loudly instead of ignoring errors. Let's discuss this and if you guys agree I'll make a PR.", "issue_status": "Closed", "issue_reporting_time": "2017-03-16T10:56:41Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "663": {"issue_url": "https://github.com/pallets/flask/issues/2206", "issue_id": "#2206", "issue_summary": "Missing headers on CSV file", "issue_description": "suederade commented on 15 Mar 2017\nExample file uploaded to flask:\naccount_id,account_name,style,graphic,color,size,team,player_name,player_num,upc,sku\n12,Cleveland,C1394_ToddlerTrueClassicKnit NFL_S401ACY1,C1394_AZC,,OSFA,Arizona Cardinals,,,'12345',1234\n12,Cleveland,C1394_ToddlerTrueClassicKnit NFL_S401ACY1,C1394_BBI,,OSFA,Buffalo Bills,,,'6789',5678\n12,Cleveland,C1394_ToddlerTrueClassicKnit NFL_S401ACY1,C1394_CBE,,OSFA,Chicago Bears,,,'10111213',91011\nThe FileStorage object from request.files has somehow had the CSV header line (line 1) removed.\nUsing Python 2.7.", "issue_status": "Closed", "issue_reporting_time": "2017-03-14T19:58:05Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "664": {"issue_url": "https://github.com/pallets/flask/issues/2205", "issue_id": "#2205", "issue_summary": "Connection reset when posting data", "issue_description": "deelaka commented on 14 Mar 2017\nWhen posting data with an mimetype unknown to flask unless request.get_data() is accessed in whatever way the connection is dropped.\n@app.route('/abc', methods=['POST'])\ndef get_history():\n    # print request.get_data()  # uncommenting this line fixes the bug\n    return 'OK', 200\nBelow is a curl stacktrace:\n> curl -X POST -d 'a:1' \"http://127.0.0.1:5000/abc\"\ncurl: (56) Recv failure: Connection was reset\nThe most confusing fact is that the flask server reports as if the connection was successful:\n127.0.0.1 - - [14/Mar/2017 20:03:16] \"POST /abc HTTP/1.1\" 200 -\nFlask (0.12) & Python 2.7.12", "issue_status": "Closed", "issue_reporting_time": "2017-03-14T14:34:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "665": {"issue_url": "https://github.com/pallets/flask/issues/2200", "issue_id": "#2200", "issue_summary": "Can't start in debug mode.", "issue_description": "NileshPS commented on 6 Mar 2017\n * Serving Flask-SocketIO app \"app\"\n * Forcing debug mode on\n * Restarting with stat\n * Debugger is active!\n * Debugger pin code: 256-225-104\nException in thread Thread-1:\nTraceback (most recent call last):\n  File \"/usr/lib/python3.5/threading.py\", line 914, in _bootstrap_inner\n    self.run()\n  File \"/usr/lib/python3.5/threading.py\", line 862, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/flask_socketio/cli.py\", line 56, in run_server\n    return run_command()\n  File \"/usr/local/lib/python3.5/dist-packages/click/core.py\", line 722, in __call__\n    return self.main(*args, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/click/core.py\", line 697, in main\n    rv = self.invoke(ctx)\n  File \"/usr/local/lib/python3.5/dist-packages/click/core.py\", line 895, in invoke\n    return ctx.invoke(self.callback, **ctx.params)\n  File \"/usr/local/lib/python3.5/dist-packages/click/core.py\", line 535, in invoke\n    return callback(*args, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/click/decorators.py\", line 64, in new_func\n    return ctx.invoke(f, obj, *args[1:], **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/click/core.py\", line 535, in invoke\n    return callback(*args, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/flask/cli.py\", line 432, in run_command\n    use_debugger=debugger, threaded=with_threads)\n  File \"/usr/local/lib/python3.5/dist-packages/werkzeug/serving.py\", line 706, in run_simple\n    reloader_type)\n  File \"/usr/local/lib/python3.5/dist-packages/werkzeug/_reloader.py\", line 257, in run_with_reloader\n    signal.signal(signal.SIGTERM, lambda *args: sys.exit(0))\n  File \"/usr/lib/python3.5/signal.py\", line 47, in signal\n    handler = _signal.signal(_enum_to_int(signalnum), _enum_to_int(handler))\nValueError: signal only works in main thread", "issue_status": "Closed", "issue_reporting_time": "2017-03-06T04:36:35Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "666": {"issue_url": "https://github.com/pallets/flask/issues/2198", "issue_id": "#2198", "issue_summary": "Add instructions for running Flask with PyCharm", "issue_description": "Member\ndavidism commented on 5 Mar 2017\nWith the introduction of the flask command, setting up PyCharm is not as straightforward. Some screenshots and instructions would be useful. Similar to the section on how to deploy to common platforms.\n2", "issue_status": "Closed", "issue_reporting_time": "2017-03-04T20:34:13Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "667": {"issue_url": "https://github.com/pallets/flask/issues/2197", "issue_id": "#2197", "issue_summary": "Allow error handler to pass on decision to subsequent handlers", "issue_description": "tuukkamustonen commented on 3 Mar 2017\nI would like to do error handling conditionally, like:\ndef internal_error(exc: peewee.InternalError) -> Optional[Response]:\n    if exc.args[0] == 1213:\n        # Deadlock found when trying to get lock; try restarting transaction\n        return CustomErrorResponse(...)\n\ndef any_exception(exc: Exception) -> Response:\n        return CustomErrorResponse(...)\n\napp.register_error_handler(peewee.InternalError, internal_error)\napp.register_error_handler(Exception, any_exception)\nCould it be so that if None is returned from an errorhandler, Flask keeps on iterating and calls the next suitable errorhandler?\nLines: https://github.com/pallets/flask/blob/master/flask/app.py#L1521-L1525 Looks like the code has changed somewhat since 0.10.1 that I'm running (in 0.10.1 this would have been 3-line change I think).\nOf course I could call return any_exception(exc) from internal_error() but that kinda adds direct dependency between the two methods and I would like to avoid it (consider the error handlers coming from different modules/classes etc. and maybe there's even third error handler sitting between that would be skipped here).", "issue_status": "Closed", "issue_reporting_time": "2017-03-03T07:15:01Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "668": {"issue_url": "https://github.com/pallets/flask/issues/2195", "issue_id": "#2195", "issue_summary": "Windows Server - Gevent Deployment", "issue_description": "ghost commented on 2 Mar 2017\nHello,\nI am using flask for a small web service that my mobile applications use.\nI was developing the server on a normal Windows Desktop and port forwarding it through my personal home router.\nI am now at the deployment stage, and I am having trouble with connections on Windows Server 2008.\nThe flask server runs successfully, and all endpoints are reachable on localhost, but I cannot connect from an external source. I know that the port forwarding is correct, as I have added another test application to Windows IIS to confirm that it wasn't the router's port forwarding, and that test application worked.\nHoping someone has an idea.\nThanks!\nConnor\nThe issue tracker is a tool to address bugs.\nPlease use the #pocoo IRC channel on freenode or Stack Overflow for questions.", "issue_status": "Closed", "issue_reporting_time": "2017-03-01T22:17:46Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "669": {"issue_url": "https://github.com/pallets/flask/issues/2194", "issue_id": "#2194", "issue_summary": "Issue with installing app debugger", "issue_description": "JLinthorst commented on 1 Mar 2017 \u2022\nedited by ThiefMaster\nI tried to install the app debugger, to make my webapp run instantly when I change the code, with:\napp.run(debug=True)\nHowever, I get the Error message below. Does someone know how to fix this?\nMany thanks!\n* Restarting with stat\n* Debugger is active!\n* Debugger pin code: xx\nException in thread Thread-1:\nTraceback (most recent call last):\n File \"C:\\Users\\josep\\Anaconda3\\lib\\threading.py\", line 914, in _bootstrap_inner\n   self.run()\n File \"C:\\Users\\josep\\Anaconda3\\lib\\threading.py\", line 862, in run\n   self._target(*self._args, **self._kwargs)\n File \"C:\\Users\\josep\\Anaconda3\\lib\\site-packages\\werkzeug\\serving.py\", line 656, in i\n   fd=fd)\n File \"C:\\Users\\josep\\Anaconda3\\lib\\site-packages\\werkzeug\\serving.py\", line 550, in m\n   passthrough_errors, ssl_context, fd=fd)\n File \"C:\\Users\\josep\\Anaconda3\\lib\\site-packages\\werkzeug\\serving.py\", line 462, in _\n   socket.SOCK_STREAM)\n File \"C:\\Users\\josep\\Anaconda3\\lib\\socket.py\", line 450, in fromfd\n   nfd = dup(fd)\nOSError: [WinError 10038] An operation was attempted on something that is not a socket", "issue_status": "Closed", "issue_reporting_time": "2017-03-01T15:42:59Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "670": {"issue_url": "https://github.com/pallets/flask/issues/2190", "issue_id": "#2190", "issue_summary": "testing.rst is missing flask import", "issue_description": "Contributor\nSergioDS commented on 23 Feb 2017\nWhen following the tutorial first test was failing because it does not find init_db()\nSearching I found this question that fixed it, so the rest should be modified\nfrom\nimport flaskr\nto\nfrom flaskr import flaskr\nI can not push a branch with the change (I suppose I have no permission)", "issue_status": "Closed", "issue_reporting_time": "2017-02-23T01:38:20Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "671": {"issue_url": "https://github.com/pallets/flask/issues/2189", "issue_id": "#2189", "issue_summary": "Suggestion: Support callables as parameter for url_for", "issue_description": "csachs commented on 22 Feb 2017\nI'd suggest enhancing the url_for function to accept callables as well, i.e. the function name unquoted; as this would help e.g. with code refactoring tools and auto completion.\nIt can easily be implemented with a few lines; if such a functionality would be desirable, I can prepare a PR with tests, etc.\nBest regards, Christian", "issue_status": "Closed", "issue_reporting_time": "2017-02-21T21:22:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "672": {"issue_url": "https://github.com/pallets/flask/issues/2188", "issue_id": "#2188", "issue_summary": "Input stream not automatically drained at teardown.", "issue_description": "Parakleta commented on 20 Feb 2017 \u2022\nedited\nI'm not sure if this is intended behaviour and maybe I should know better, but I spent ages trying to figure out why I was getting a code 400, message Bad request syntax error and it turned out to be because I was not consuming the data associated with a request when raising an Unauthorized exception.\nThis seems to be a massive hole because if you are not expecting data with a request and so don't read anything then that data is left in the input stream (assuming keep-alive) and so forms the start of the next request. In fact I have even tried sending a request with another request in the data and Flask processes that data as if it were the next request and sends that in response to the following request.\nI have resolved this issue by copying the body of the finally clause in the wrapper function inside exhaust_stream from formparser.py in pallets/werkzeug and having this new function decorated with @app.teardown_request. This ensures that the input stream is always drained after every request and so left over data is not mis-interpreted as the start of the next request.\nAnyway, if I am expected to handle this situation manually as I have done can something be added to the documentation (or if it's already there can you point it out to me, somehow I couldn't find it). Otherwise, I think Flask should drain the input stream so that subsequent requests are always correctly aligned.", "issue_status": "Closed", "issue_reporting_time": "2017-02-20T04:32:41Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "673": {"issue_url": "https://github.com/pallets/flask/issues/2185", "issue_id": "#2185", "issue_summary": "Connection Timed Out", "issue_description": "erincat commented on 17 Feb 2017\nHello,\nI am deploying a flask app using Apache Web Server in an EC2 instance. My problem is that I can only make a few successful requests per minute, then the service would have a Connection Timed Out error after. I would have to wait for a couple of minutes to make successful requests again.\nThe application is an SMTP service.\nAny thoughts/help is greatly appreciated.", "issue_status": "Closed", "issue_reporting_time": "2017-02-17T09:29:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "674": {"issue_url": "https://github.com/pallets/flask/issues/2184", "issue_id": "#2184", "issue_summary": "There is no way to add a link in flask.abort() function.", "issue_description": "rahulbajaj0509 commented on 17 Feb 2017\nI am new to flask and i am trying to add a link in flask.abort(). There is no way to add a link in flask.abort() function. If there is a way i guess it must be documented :)", "issue_status": "Closed", "issue_reporting_time": "2017-02-17T06:19:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "675": {"issue_url": "https://github.com/pallets/flask/issues/2183", "issue_id": "#2183", "issue_summary": "Missing documentation about how URL/queries are quoted/unquoted", "issue_description": "cateee commented on 16 Feb 2017\nThe help about flask.request http://flask.pocoo.org/docs/0.12/api/#incoming-request-data just includes a simple: \"args: A MultiDict with the parsed contents of the query string. (The part in the URL after the question mark).\", Thus nothing about how args are generated.\nI need to pass a complex string (with spaces and other url characters).\nI found from some experiments, ithat I can generate on client side the query string with urllib.parse.quote(query1, safe=''), and this query parameter will be unquoted correctly by flask (request.args).\nBecause there are many quoting convention (e.g. space replaced with '+', it would be nice to have some more info on the documentation about quoting method, and possibly to have the quote and unquote also directly as flask utilities (like the json support), ready to be used client side.\nPossibly also the path decoding could have similar problem (in that case with the default 'safe' argument).", "issue_status": "Closed", "issue_reporting_time": "2017-02-16T08:47:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "676": {"issue_url": "https://github.com/pallets/flask/issues/2181", "issue_id": "#2181", "issue_summary": "Inconsistent behaviour on request.get_json(cache=False)", "issue_description": "migueleliasweb commented on 14 Feb 2017 \u2022\nedited\nThe behaviour of the following app should be pretty simple but it actually raises an unwanted exception.\n# flask_cache.py\nfrom flask import Flask, request\napp = Flask(__name__)\n\n@app.route('/', methods=[\"GET\", \"POST\"])\ndef hello_uncached():\n    json1 = request.get_json(cache=False)\n    request.data = '{\"abc\":123}'\n\n    #  exception here because get_json internally returns an empty string\n    #   to json.loads() which raises an BadRequest exception\n    json2 = request.get_json(cache=False)\n    return json1+'/'+json2\n\nif __name__ == \"__main__\":\n    app.run()\n$ mkvirtualenv flask_cache\n$ pip install flask\n$ python flask_cache.py\n$ curl -H \"Content-type: application/json\" -d '{\"foo\":\"bar\"}' localhost:5000\nAs far as I could debug, the problem is located at wrappers.get_data. The get_data function \"fails\" silently because request does not has the \"get_data\" property and thus the returned string is empty.\nAfter that, since I passed cache=False, the json.loads(\"\") fails and everything gets airbourne.\nI could not understand this behaviour because if the request.data is suposed to be read-only, it should have been made in a way that `request.data = \"some data\" should not make any side effects, otherwise, we should be able to successfully run the above example code.\nIs this the wanted behaviour ? If no, can I proceed with a PR ?", "issue_status": "Closed", "issue_reporting_time": "2017-02-13T22:50:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "677": {"issue_url": "https://github.com/pallets/flask/issues/2178", "issue_id": "#2178", "issue_summary": "Callback on `app.run`", "issue_description": "barischrooneyj commented on 10 Feb 2017 \u2022\nedited\nWhen writing local-only apps we want to open the web browser after the flask app starts up.\nCurrently we do:\nthreading.Timer(1.25, lambda: webbrowser.open(url) ).start()\napp.run(port=port)\nHowever it would be nice not to have a guessed time like 1.25, also it would be nice for the opening of the browser to be cancelled incase starting the flask app fails.\nPossibly would look like:\napp.run(port=port, onstart=lambda: webbrowser.open(url))", "issue_status": "Closed", "issue_reporting_time": "2017-02-09T22:46:32Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "678": {"issue_url": "https://github.com/pallets/flask/issues/2177", "issue_id": "#2177", "issue_summary": "Possibly incorrect handling of from-data", "issue_description": "NinnOgTonic commented on 9 Feb 2017 \u2022\nedited\nI found an issue in which Flask incorrectly handels the posted form-data when posted from Postman.\nThe issue can be seen in this test case:\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/', methods=['POST'])\ndef hello_world():\n\n    f = request.values\n    for key in f.keys():\n        for value in f.getlist(key):\n            print key.__repr__(),\":\",value.__repr__()\n\n    return 'Hello'\nIf we execute the Flask app, and attempt to post the following command we will NOT encounter an issue in request no. 1\n$ curl -X POST -F 'username=davidwalsh' -F 'password=something' http://localhost:1234/\n127.0.0.1 - - [09/Feb/2017 15:27:06] \"POST / HTTP/1.1\" 200 -\n'username' : u'davidwalsh'\n'password' : u'something'\nThis results in the following raw request:\n$ nc -l 1234\nPOST / HTTP/1.1\nHost: localhost:1234\nUser-Agent: curl/7.51.0\nAccept: */*\nContent-Length: 259\nExpect: 100-continue\nContent-Type: multipart/form-data; boundary=------------------------45f852bd90f5d691\n\n--------------------------45f852bd90f5d691\nContent-Disposition: form-data; name=\"username\"\n\ndavidwalsh\n--------------------------45f852bd90f5d691\nContent-Disposition: form-data; name=\"password\"\n\nsomething\n--------------------------45f852bd90f5d691--\nHow ever, if we utilise a tool like Chrome/Postman, flask seems to incorrectly handle the request form-data request seen here from postman:\n'------WebKitFormBoundaryZBQ6HpTUMMXKs08S\\r\\nContent-Disposition: form-data; name' : u'\"username\"\\r\\n\\r\\ndavidwalsh\\r\\n------WebKitFormBoundaryZBQ6HpTUMMXKs08S\\r\\nContent-Disposition: form-data; name=\"password\"\\r\\n\\r\\nsomething\\r\\n------WebKitFormBoundaryZBQ6HpTUMMXKs08S--\\r\\n'\nAnd the raw request for the 2nd case:\nnc -l 1234\nPOST / HTTP/1.1\nHost: localhost:1234\nConnection: keep-alive\nContent-Length: 253\nPostman-Token: bc27dc7d-162c-5684-3c73-b4f5cd409a0d\nCache-Control: no-cache\nOrigin: chrome-extension://fhbjgbiflinjbdggehcddcbncdddomop\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36\nContent-Type: application/x-www-form-urlencoded\nAccept: */*\nAccept-Encoding: gzip, deflate, br\nAccept-Language: en-US,en;q=0.8,da;q=0.6\n\n------WebKitFormBoundaryeLtABWI0kqqXwQLL\nContent-Disposition: form-data; name=\"username\"\n\ndavidwalsh\n------WebKitFormBoundaryeLtABWI0kqqXwQLL\nContent-Disposition: form-data; name=\"password\"\n\nsomething\n------WebKitFormBoundaryeLtABWI0kqqXwQLL--\nWhile I realise the Chrome/Postman formatting is slightly different, it should still be very much valid I believe?", "issue_status": "Closed", "issue_reporting_time": "2017-02-09T14:44:14Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "679": {"issue_url": "https://github.com/pallets/flask/issues/2176", "issue_id": "#2176", "issue_summary": "Running tests with nested objects in the data input", "issue_description": "rth commented on 9 Feb 2017 \u2022\nedited\nCurrently it does not seem possible to run unit-tests on endpoints that accept a nested dictionary as input when using flask with webargs / marshmallow,\nHere is a minimal example,\nfrom flask import Flask\nfrom webargs import fields\nfrom webargs.flaskparser import use_args\n\napp = Flask(__name__)\n\nhello_args = { \n    'a': fields.Nested({'name' : fields.Str()})\n}\n\n@app.route('/', methods=['POST'])\n@use_args(hello_args)\ndef index(args):\n    return 'Hello ' + str(args)\n\n\ndef test_app():\n    app.config['TESTING'] = True\n    test_app = app.test_client(use_cookies=False)\n    test_app.post(data={\"a\": {\"name\": \"Alice\"}})\n\n\nif __name__ == '__main__':\n    app.run()\nwhich runs as expected,\n% curl -H \"Content-Type: application/json\" -X POST \\\n       -d '{\"a\":{\"name\": \"Alice\"}}' http://localhost:5000  \n\nHello {'a': {'name': 'Alice'}}%\nhowever if I try running tests on it, the argument parsing fails in werkzeug.test.EnvironBuilder with the following error,\nnosetests test.py                                                      \nE\n======================================================================\nERROR: test.test_app\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/usr/lib64/python3.4/site-packages/nose/case.py\", line 198, in runTest\n    self.test(*self.arg)\n  File \"/tmp/test.py\", line 26, in test_app\n    test_app.post(data={\"a\": {\"name\": \"Alice\"}})\n  File \"/home/rth/.local/lib64/python3.4/site-packages/werkzeug/test.py\", line 788, in post\n    return self.open(*args, **kw)\n  File \"/home/rth/.local/lib64/python3.4/site-packages/flask/testing.py\", line 103, in open\n    builder = make_test_environ_builder(self.application, *args, **kwargs)\n  File \"/home/rth/.local/lib64/python3.4/site-packages/flask/testing.py\", line 34, in make_test_environ_builder\n    return EnvironBuilder(path, base_url, *args, **kwargs)\n  File \"/home/rth/.local/lib64/python3.4/site-packages/werkzeug/test.py\", line 338, in __init__\n    self._add_file_from_data(key, value)\n  File \"/home/rth/.local/lib64/python3.4/site-packages/werkzeug/test.py\", line 355, in _add_file_from_data\n    self.files.add_file(key, **value)\nTypeError: add_file() got multiple values for argument 'name'\n\n----------------------------------------------------------------------\nRan 1 test in 0.011s\n\nFAILED (errors=1)\nthis uses Python 3.5, flask 0.12 and webargs 1.5.2.\nAny suggestions on how to address this issue (or possible workarounds) would be much appreciated.", "issue_status": "Closed", "issue_reporting_time": "2017-02-09T14:33:33Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "680": {"issue_url": "https://github.com/pallets/flask/issues/2174", "issue_id": "#2174", "issue_summary": "Security Considerations Oversight", "issue_description": "brocef commented on 8 Feb 2017 \u2022\nedited\nNot a bug report, per se, but still should be noted. On the Security Considerations page, after describing the XSS remediation that Jinja2 provides, it describes the one caveat that unquoted html attributes are still vulnerable. It follows with a \"correct\" example:\n<a href=\"{{ href }}\">the text</a>\nHowever that example is also vulnerable to XSS. An attacker could still set href to javascript:alert(1) to inject javascript into the tag (although it would require a user to click the link).\nPerhaps the example should use a different quoted attribute as the example, like a default value for an input field or something of the like.\n1", "issue_status": "Closed", "issue_reporting_time": "2017-02-08T16:32:39Z", "fixed_by": "#2364", "pull_request_summary": "mention csp for javascript: uri xss", "pull_request_description": "Member\ndavidism commented on 6 Jun 2017\ncloses #2174", "pull_request_status": "Merged", "issue_fixed_time": "2017-06-06T16:22:50Z", "files_changed": [["21", "docs/security.rst"]]}, "681": {"issue_url": "https://github.com/pallets/flask/issues/2172", "issue_id": "#2172", "issue_summary": "multiple Set-Cookie fold in one line HTTP Header", "issue_description": "pedia commented on 6 Feb 2017 \u2022\nedited\nFirst, RFC 6265 said:\nOrigin servers SHOULD NOT fold multiple Set-Cookie header fields into a single header field.\nBut in flask-admin login(with flask-user) login response, multiple set-cookie(s) are folded:\nSet-Cookie: remember_token=...; Expires=Tue, 06-Feb-2018 05:23:25 GMT; Path=/\nsession=...; HttpOnly; Path=/\nCAUTION: Path=/[without a space]session=\nAnd in werkzeug, multiple Set-Cookie unittest(I added this code in werkzeug/tests/test_wrappers.py below), and passed.\n# set multi cookie once\nresponse = wrappers.BaseResponse()\nresponse.set_cookie('foo', 'bar', 60, 0, '/blub', 'example.org')\nresponse.set_cookie('blar', 'zag', 60, 0, '/blob', 'example.org')\nstrict_eq(response.headers.to_wsgi_list(), [\n    ('Content-Type', 'text/plain; charset=utf-8'),\n    ('Set-Cookie', 'foo=bar; Domain=example.org; Expires=Thu, '\n     '01-Jan-1970 00:00:00 GMT; Max-Age=60; Path=/blub'),\n    ('Set-Cookie', 'blar=zag; Domain=example.org; Expires=Thu, '\n     '01-Jan-1970 00:00:00 GMT; Max-Age=60; Path=/blob')\n])\nSo I think this maybe a bug or flask.\nAny thought appreciated.\n1", "issue_status": "Closed", "issue_reporting_time": "2017-02-06T05:40:12Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "682": {"issue_url": "https://github.com/pallets/flask/issues/2171", "issue_id": "#2171", "issue_summary": "The default static folder is being ignored if the number of params to the route are 3", "issue_description": "amehta commented on 6 Feb 2017 \u2022\nedited by davidism\n@app.route('/<date>/<username>/<path:filename>')\n@login_required\n@nocache\ndef custom_static(filename, username, date):\n    path = os.path.join(app.config['CUSTOM_STATIC_PATH'],\"username\", username, date)\n    print \"Path: {}\".format(path)\n    if os.path.isfile(os.path.join(path, filename)):\n        return send_from_directory(path, filename)\n    else:\n        print \"File does not exist: {}\".format(filename](url))\n        return\nPath: ./DataWebserver/username/js/static\nFile does not exist: bootstrap-datepicker.min.js", "issue_status": "Closed", "issue_reporting_time": "2017-02-05T18:55:22Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "683": {"issue_url": "https://github.com/pallets/flask/issues/2170", "issue_id": "#2170", "issue_summary": "about jinja2 dynamic extends", "issue_description": "magician333 commented on 5 Feb 2017\nI want to use dynamic extends,like this\n{% extends {{file}} %}\nthis \"file\" is come from python file.\nbut I'cant use it,how to solve it?", "issue_status": "Closed", "issue_reporting_time": "2017-02-05T11:55:30Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "684": {"issue_url": "https://github.com/pallets/flask/issues/2169", "issue_id": "#2169", "issue_summary": "CORS requests hanging on Chrome", "issue_description": "dland512 commented on 4 Feb 2017 \u2022\nedited\nI'm seeing some strange behavior I can't really explain. My CORS requests are hanging for long periods 10, 20, 30 seconds and I'm not sure why. It seems to be specific to both Flask and Chrome.\nI'm using python 3.4.3, Flask 0.12, and Flask-Cors 3.0.2.\nConsider the following Flask server that returns some basic HTML and some javascript that makes and AJAX request to an API.\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/page1\")\ndef page1():\n    return '''\n    <html>\n        <head>\n            <script>\n                function resHandler () {\n                    document.getElementById('status').innerHTML = 'done!';\n                }\n\n                function gopherIt() {\n                    document.getElementById('status').innerHTML = 'making request...';\n                    var oReq = new XMLHttpRequest();\n                    oReq.addEventListener(\"load\", resHandler);\n                    oReq.open(\"GET\", \"http://localhost:3000/hang\");\n                    oReq.send();\n                }\n            </script>\n        </head>\n        <body>\n            <div>\n                <input type=\"button\" value=\"Hang In There\" onclick=\"gopherIt()\" />\n                <span id=\"status\">Click the button</span>\n            </div>\n            <a href=\"http://localhost:8080/page2\">Go to page 2</a>\n        </body>\n    </html>\n    '''\n\n@app.route(\"/page2\")\ndef page2():\n    return '''\n    <html>\n        <body>\n            page 2\n        </body>\n    </html>\n    '''\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8080)\nHere is the Flask API with CORS enabled:\nfrom flask import Flask, json\nfrom flask_cors import CORS\n\napp = Flask(__name__)\nCORS(app)\n\n@app.route(\"/hang\")\ndef hang10():\n    return json.dumps({'iamkule': True})\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=3000)\nWhich renders a page like this:\nSteps to reproduce:\nClick the Go to page 2 link\nClick the back browser's button\nClick the Hang In There button\nYou'll see a message next to the button that says \"making request...\" that basically just sits there while the API request hangs. Sometimes clicking it multiple times kinds of wakes it up and fixes it but not always. Sometimes it will also happen right after you refresh the page. It isn't as consistent as using the back button though.\nIf you open the Chrome debugger you can see all the XHR requests just sitting there.\nHere are some interesting points to consider:\nThis does not happen when the CORS library is not used. If I open Chrome with the same origin policy checks disabled by running open -a Google\\ Chrome --args --disable-web-security --user-data-dir and run the app, it will not hang.\nThis happens in Chrome on both macOS Sierra and Windows 10.\nThis does not happen in Firefox on Mac or Windows.\nThis does not happen in node. I rewrote the exact same static server and API using node and express and everything works fine (which is why I'm posting this here).\nSo it kind of seems like some combination of Flask and Chrome not getting along. Does anyone have any ideas about what's going on here?\n3", "issue_status": "Closed", "issue_reporting_time": "2017-02-04T05:15:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "685": {"issue_url": "https://github.com/pallets/flask/issues/2168", "issue_id": "#2168", "issue_summary": "Flask, mod_wsgi, and Apache: ImportError mysql", "issue_description": "crishmania commented on 3 Feb 2017 \u2022\nedited\nwhen i am running python3 test.py it is working fine with mysql\nbut when i running on apache server i am getting wsgi error no module name mysql", "issue_status": "Closed", "issue_reporting_time": "2017-02-02T23:52:51Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "686": {"issue_url": "https://github.com/pallets/flask/issues/2166", "issue_id": "#2166", "issue_summary": "Sending POST requests with input data exceeding 10KB results in 400 Bad Request under WSGI", "issue_description": "ilatypov commented on 30 Jan 2017 \u2022\nedited\nMoved to pallets/werkzeug#1068", "issue_status": "Closed", "issue_reporting_time": "2017-01-30T15:32:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "687": {"issue_url": "https://github.com/pallets/flask/issues/2165", "issue_id": "#2165", "issue_summary": "Error accessing static components in subfolder", "issue_description": "javixeneize commented on 30 Jan 2017\nI am having issues when retrieving static components on subfolders in my project. Let me explain\nMy structure is as follows:\nMain.py\n--- App1.py\n--- App2.py\nIt is, i have a main page that has links that refers to App1.py or App2.py, which are also flask programs\nWhen i access App1.py, i dont have static content displayed. The html of the page is correctly displayed (under templates/App1/app1.html), but, looks like it is unable to find the static component referred in that page (i am referring from the html to static component under static/app1/css/app1.css). I have a 404 response\nIs that something that is not supported by flask?\nThanks", "issue_status": "Closed", "issue_reporting_time": "2017-01-30T10:41:22Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "688": {"issue_url": "https://github.com/pallets/flask/issues/2162", "issue_id": "#2162", "issue_summary": "GAE not displaying error messages for 0.12", "issue_description": "jalexvig commented on 29 Jan 2017\nWhen I use Flask 0.12 in my Google App Engine project I get no error messages. So a function that might throw an error would result in a log like:\nINFO     2017-01-29 00:03:05,820 sdk_update_checker.py:229] Checking for updates to the SDK.\nINFO     2017-01-29 00:03:06,428 api_server.py:205] Starting API server at: http://localhost:54929\nINFO     2017-01-29 00:03:06,432 dispatcher.py:197] Starting module \"default\" running at: http://127.0.0.1:8080\nINFO     2017-01-29 00:03:06,434 admin_server.py:116] Starting admin server at: http://localhost:8000\nINFO     2017-01-29 00:03:10,212 module.py:787] default: \"GET / HTTP/1.1\" 500 291\nINFO     2017-01-29 00:03:11,711 module.py:787] default: \"GET /favicon.ico HTTP/1.1\" 404 233\nwhereas when I downgrade to Flask 0.11.1 I actually get the error messaging I've come to know and love:\nINFO     2017-01-28 23:58:06,986 sdk_update_checker.py:229] Checking for updates to the SDK.\nINFO     2017-01-28 23:58:07,234 api_server.py:205] Starting API server at: http://localhost:54720\nINFO     2017-01-28 23:58:07,238 dispatcher.py:197] Starting module \"default\" running at: http://127.0.0.1:8080\nINFO     2017-01-28 23:58:07,240 admin_server.py:116] Starting admin server at: http://localhost:8000\nERROR    2017-01-28 23:58:11,804 app.py:1587] Exception on / [GET]\nTraceback (most recent call last):\n  File \"/Users/alex/yphh/petition_companies/lib/flask/app.py\", line 1988, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/Users/alex/yphh/petition_companies/lib/flask/app.py\", line 1641, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"/Users/alex/yphh/petition_companies/lib/flask/app.py\", line 1544, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/Users/alex/yphh/petition_companies/lib/flask/app.py\", line 1639, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"/Users/alex/yphh/petition_companies/lib/flask/app.py\", line 1625, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"/Users/alex/yphh/petition_companies/main.py\", line 70, in index\n    1 / 0\nZeroDivisionError: integer division or modulo by zero\nINFO     2017-01-28 23:58:11,821 module.py:787] default: \"GET / HTTP/1.1\" 500 291\nINFO     2017-01-28 23:58:13,100 module.py:787] default: \"GET /favicon.ico HTTP/1.1\" 404 233\nAside from the traceback the two are the same.", "issue_status": "Closed", "issue_reporting_time": "2017-01-29T00:05:15Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "689": {"issue_url": "https://github.com/pallets/flask/issues/2161", "issue_id": "#2161", "issue_summary": "KeyError problem", "issue_description": "pythonanonuser commented on 29 Jan 2017\nI'm trying to start the extremely basic flask application noted here: http://flask.pocoo.org/docs/0.12/quickstart/\nWhen I try to run \"flask run\" however I get the following error\n * Serving Flask-SocketIO app \"hello\"\nTraceback (most recent call last):\n  File \"/usr/local/bin/flask\", line 11, in <module>\n    load_entry_point('Flask', 'console_scripts', 'flask')()\n  File \"/home/rohan/flask/flask/cli.py\", line 513, in main\n    cli.main(args=args, prog_name=name)\n  File \"/home/rohan/flask/flask/cli.py\", line 380, in main\n    return AppGroup.main(self, *args, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/click/core.py\", line 696, in main\n    rv = self.invoke(ctx)\n  File \"/usr/local/lib/python2.7/dist-packages/click/core.py\", line 1060, in invoke\n    return _process_result(sub_ctx.command.invoke(sub_ctx))\n  File \"/usr/local/lib/python2.7/dist-packages/click/core.py\", line 889, in invoke\n    return ctx.invoke(self.callback, **ctx.params)\n  File \"/usr/local/lib/python2.7/dist-packages/click/core.py\", line 534, in invoke\n    return callback(*args, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/click/decorators.py\", line 64, in new_func\n    return ctx.invoke(f, obj, *args[1:], **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/click/core.py\", line 534, in invoke\n    return callback(*args, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/flask_socketio/cli.py\", line 58, in run\n    run_server()\n  File \"/usr/local/lib/python2.7/dist-packages/flask_socketio/cli.py\", line 50, in run_server\n    socketio = app.extensions['socketio']\nKeyError: 'socketio'\nI've tried installing Flask via pip as well as from source, and verified that all the dependencies are installed. If I use the app.run() command in main it works fine, but I'd like to use flask run after exporting the program name but it doesn't seem to work. I've followed the instructions exactly from the website. Any advice?", "issue_status": "Closed", "issue_reporting_time": "2017-01-28T20:44:14Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "690": {"issue_url": "https://github.com/pallets/flask/issues/2160", "issue_id": "#2160", "issue_summary": "Python - Headers not decoded properly", "issue_description": "augustinrieunier commented on 25 Jan 2017 \u2022\nedited by untitaker\nHi,\nI try to pass information in headers, such as passwords.\nWhen receiving it in my program, special characters are not properly decoded, such as \u20ac\u00a3 and french accented chars.\nIt works fine if they're encoding in regular http args.\nExample:\ncurl -v --header \"user_email:toto@toto.com\" --header \"user_password:\u00e9\u20ac\" -X GET \"http://localhost:5000/api/private/v1.0/auth\"\nTrying ::1...\nconnect to ::1 port 5000 failed: Connection refused\nTrying 127.0.0.1...\nConnected to localhost (127.0.0.1) port 5000 (#0)\nGET /api/private/v1.0/auth HTTP/1.1\nHost: localhost:5000\nUser-Agent: curl/7.43.0\nAccept: /\nuser_email:toto@toto.com\nuser_password:\u00e9\u20ac`\nOn the app side:\nHeaders=Accept: /\nContent-Length:\nUser-Agent: curl/7.43.0\nUser-Password: \u00c3\u00a9\u00e2\ufffd\u00ac\nHost: localhost:5000\nUser-Email: toto@toto.com\nContent-Type:", "issue_status": "Closed", "issue_reporting_time": "2017-01-25T18:05:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "691": {"issue_url": "https://github.com/pallets/flask/issues/2159", "issue_id": "#2159", "issue_summary": "CSS and JS TTFB take too long in flask 0.11.1 and 0.12", "issue_description": "alexli0707 commented on 24 Jan 2017 \u2022\nedited\nThank you for the awesome framework first!\nSorry I find the problem was flask-session connecting remote redis caused", "issue_status": "Closed", "issue_reporting_time": "2017-01-24T03:24:01Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "692": {"issue_url": "https://github.com/pallets/flask/issues/2158", "issue_id": "#2158", "issue_summary": "flask run not work", "issue_description": "protream commented on 23 Jan 2017 \u2022\nedited\nI have set `FLASK_APP=manage.py', but got\uff1a\nError: The file/path provided (manage) does not appear to exist.  Please verify the path is correct.  If app is not on PYTHONPATH, ensure the extension is .py", "issue_status": "Closed", "issue_reporting_time": "2017-01-23T10:48:10Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "693": {"issue_url": "https://github.com/pallets/flask/issues/2156", "issue_id": "#2156", "issue_summary": "AssertionError with webtest when returning 204", "issue_description": "Erfa commented on 18 Jan 2017\nI have a handler that returns a 204 with no Content-Type, like this:\nfrom flask import Response\n\ndef make_204_response():\n    resp = Response('', 204)\n    del resp.headers['Content-Type']\n    return resp\nIt works as expected, but when I run my unit tests using webtest I get this error:\nException AssertionError: AssertionError(u'Iterator garbage collected without being closed',) in <bound method IteratorWrapper.__del__ of <webtest.lint.IteratorWrapper object at 0x7f90f7a6b550>> ignored\nIt looks like webob had pretty much the same problem:\nPylons/webob#305", "issue_status": "Closed", "issue_reporting_time": "2017-01-18T16:11:55Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "694": {"issue_url": "https://github.com/pallets/flask/issues/2150", "issue_id": "#2150", "issue_summary": "Connection refused for flask redis session", "issue_description": "jeff1evesque commented on 14 Jan 2017\nI attempted to replace flask's internal session by implementing redis. I thought this was a good idea, since it would mean more secure sessions, since they are not stored as cookies, rather on the redis-server:\nhttp://flask.pocoo.org/snippets/75/\nhttps://github.com/mrichman/flask-redis/blob/master/redissession.py\nAfter copying the latter reference, as redis_session.py, followed by adjusting factory.py:\n            # replace default cookie session with server-side redis\n            app.session_interface = RedisSessionInterface()\nMy travis ci indicated a failed build:\nE ConnectionError: Error 111 connecting to localhost:6379. Connection refused.\nI'm not sure why my application failed to connect to redis. The redis-server should have properly started via redis.dockerfile, which is implemented by the overall travis.yaml. Prior to actually implementing redis_session.py, my application was already using redis successfully for other things (like serializing sciki-learn objects, and storing it into redis), as indicated by prior builds. Specifically, the test_model_generate function from pytest_svm_file_upload.py, basically computes a prediction object, then stores it into redis via a custom cache method:\n    def cache(self, hash_name, key):\n        '''@cache\n        This method serializes, then caches the provided model into a redis\n        hash cache.\n        '''\n\n        try:\n            serialized = Serialize_Model(self.model).serialize()\n            self.myRedis.hset(hash_name, key, serialized)\n        except Exception, error:\n            self.list_error.append(str(error))\n            print self.list_error\nIf the model was not properly cached into redis, then my successive unit test, test_model_predict which uncaches the same model, in order to perform corresponding computation, would fail.\nBecause my travis ci builds began breaking with the introduction of overloading app.session_interface = RedisSessionInterface() in my app factory, I'm wondering if the problem is redis, flask, docker, or a combination of the three?", "issue_status": "Closed", "issue_reporting_time": "2017-01-14T02:47:32Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "695": {"issue_url": "https://github.com/pallets/flask/issues/2145", "issue_id": "#2145", "issue_summary": "AttributeError: 'module' object has no attribute 'TCPServer'", "issue_description": "misiek303 commented on 9 Jan 2017\nWhat I am missing ?\naceback (most recent call last):\n  File \"main.py\", line 225, in <module>\n    main = Main()\n  File \"main.py\", line 38, in __init__\n    self.start_flask()\n  File \"main.py\", line 44, in start_flask\n    self.flask.run()\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 827, in run\n    from werkzeug.serving import run_simple\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 70, in <module>\n    from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler\n  File \"/usr/lib/python2.7/BaseHTTPServer.py\", line 102, in <module>\n    class HTTPServer(SocketServer.TCPServer):\nAttributeError: 'module' object has no attribute 'TCPServer'\nMy code is:\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello World!\"\n\nif __name__ == \"__main__\":\n    app.run()\nWhat I am missing ?", "issue_status": "Closed", "issue_reporting_time": "2017-01-08T22:42:17Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "696": {"issue_url": "https://github.com/pallets/flask/issues/2143", "issue_id": "#2143", "issue_summary": "Unable to infer MIME-type because no filename is available.", "issue_description": "RedBuld commented on 7 Jan 2017\nThe Flask 0.12 apparently changed the name of the file transfer. everything is stable in Flask 0.11-0.11.1.", "issue_status": "Closed", "issue_reporting_time": "2017-01-07T15:34:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "697": {"issue_url": "https://github.com/pallets/flask/issues/2142", "issue_id": "#2142", "issue_summary": "Website still lists 0.11 as the latest release even though 0.12 is release", "issue_description": "cdman commented on 5 Jan 2017\nhttp://flask.pocoo.org/ (BTW, can I haz HTTPS please?) says:\nLatest Version: 0.11\nIt should say:\nLatest Version: 0.12\n(with the correct link).", "issue_status": "Closed", "issue_reporting_time": "2017-01-05T09:14:28Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "698": {"issue_url": "https://github.com/pallets/flask/issues/2140", "issue_id": "#2140", "issue_summary": "\uff1f\uff1f\uff1f", "issue_description": "Stupidkids commented on 3 Jan 2017\nThis is your own development?\n1\n1", "issue_status": "Closed", "issue_reporting_time": "2017-01-03T12:47:24Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "699": {"issue_url": "https://github.com/pallets/flask/issues/2139", "issue_id": "#2139", "issue_summary": "Flask 0.12 incompatible with Google App Engine?", "issue_description": "cinchent commented on 3 Jan 2017\nA very simple boilerplate Google App Engine example using Flask fails when upgrading from 0.10 to 0.12. The problem is something cryptic relating to module path resolution.\nThe straight-off-the-web GAE Flask Hello World example works fine when deployed to a live GAE project. The reason why this works ok is that it is so simple that it makes no use of third-party libraries outside of those that are natively installed along with Flask as a standard 'pip' install.\nBut when I extended this example to make the simplest use of the Google Cloud Datastore, then when the code is deployed, and a GET request is made, it fails with the following stack traceback:\nTraceback (most recent call last):\nFile \"/google/google-cloud-sdk/platform/google_appengine/google/appengine/runtime/wsgi.py\", line 240, in Handle\nhandler = _config_handle.add_wsgi_middleware(self._LoadHandler())\nFile \"/google/google-cloud-sdk/platform/google_appengine/google/appengine/runtime/wsgi.py\", line 299, in _LoadHandler\nhandler, path, err = LoadObject(self._handler)\nFile \"/google/google-cloud-sdk/platform/google_appengine/google/appengine/runtime/wsgi.py\", line 85, in LoadObject\nobj = import(path[0])\nFile \"/home/cinchent/flask-skel/main.py\", line 8, in\nfrom google.cloud import datastore\nImportError: cannot import name datastore\nDigging deeper into this, I tried to use the GAE development application server on my local Windows box, and lo! then even the stock Hello World example fails: Flask is unable to even successfully import the native Python 'msvcrt' module from within its own Click initializer. Here's the traceback from that:\nTraceback (most recent call last):\nFile \"C:\\Program Files (x86)\\Google\\Cloud SDK\\google-cloud-sdk\\platform\\google_appengine\\google\\appengine\\runtime\\wsgi.py\", line 240, in Handle\nhandler = _config_handle.add_wsgi_middleware(self._LoadHandler())\nFile \"C:\\Program Files (x86)\\Google\\Cloud SDK\\google-cloud-sdk\\platform\\google_appengine\\google\\appengine\\runtime\\wsgi.py\", line 299, in LoadHandler\nhandler, path, err = LoadObject(self.handler)\nFile \"C:\\Program Files (x86)\\Google\\Cloud SDK\\google-cloud-sdk\\platform\\google_appengine\\google\\appengine\\runtime\\wsgi.py\", line 85, in LoadObject\nobj = import(path[0])\nFile \"C:\\CINCH\\Freewave\\GCP\\appengine-flask-skeleton\\main.py\", line 8, in\nfrom flask import Flask\nFile \"C:\\CINCH\\Freewave\\GCP\\appengine-flask-skeleton\\lib\\flask_init.py\", line 21, in\nfrom .app import Flask, Request, Response\nFile \"C:\\CINCH\\Freewave\\GCP\\appengine-flask-skeleton\\lib\\flask\\app.py\", line 26, in\nfrom . import json, cli\nFile \"C:\\CINCH\\Freewave\\GCP\\appengine-flask-skeleton\\lib\\flask\\cli.py\", line 17, in\nimport click\nFile \"C:\\CINCH\\Freewave\\GCP\\appengine-flask-skeleton\\lib\\click_init.py\", line 18, in\nfrom .core import Context, BaseCommand, Command, MultiCommand, Group,\nFile \"C:\\CINCH\\Freewave\\GCP\\appengine-flask-skeleton\\lib\\click\\core.py\", line 7, in\nfrom .types import convert_type, IntRange, BOOL\nFile \"C:\\CINCH\\Freewave\\GCP\\appengine-flask-skeleton\\lib\\click\\types.py\", line 4, in\nfrom ._compat import open_stream, text_type, filename_to_ui,\nFile \"C:\\CINCH\\Freewave\\GCP\\appengine-flask-skeleton\\lib\\click_compat.py\", line 164, in\nimport msvcrt\nFile \"C:\\Program Files (x86)\\Google\\Cloud SDK\\google-cloud-sdk\\platform\\google_appengine\\google\\appengine\\tools\\devappserver2\\python\\sandbox.py\", line 964, in load_module\nraise ImportError('No module named %s' % fullname)\nImportError: No module named msvcrt\nGAE runs the Flask webapp within a sandbox, but it provides the proper module paths to the installed modules, provided those obey a somewhat orthodox Python path resolution technique, but whatever exotic technique Flask now uses in 0.12 fails within that sandbox. (Other third-party libraries can be imported from within the sandbox just fine.)\nThese problems are completely absent in Flask 0.10. (Once you're past the problem of importing 'protobuf', that is, a separate but known incompatibility with GAE's internal use, which has a workaround.)\nI've googled high and low for any information about what I may be missing in the Flask initialization recipe -- surely I must not be the only person to have encountered this! -- but have turned up nothing.\nIn the enclosed 'main.py', setting the DATASTORE_EXAMPLE global to False causes it to behave as the stock GAE Hello World example app, and setting it to True extends that app to attempt use of the Cloud Datastore.\nbundle.zip", "issue_status": "Closed", "issue_reporting_time": "2017-01-02T19:43:53Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "700": {"issue_url": "https://github.com/pallets/flask/issues/2137", "issue_id": "#2137", "issue_summary": "How to sovle the error:KeyError: 'socketio'`", "issue_description": "JulyUp commented on 1 Jan 2017 \u2022\nedited by ThiefMaster\nWhen I run the 5th command 'flask run' for example/flaskr. It shows error\n* Serving Flask-SocketIO app \"flaskr\"\nTraceback (most recent call last):\n  File \"/usr/local/bin/flask\", line 9, in <module>\n    load_entry_point('Flask==0.13.dev0', 'console_scripts', 'flask')()\n  File \"/usr/local/lib/python2.7/dist-packages/flask/cli.py\", line 507, in main\n    cli.main(args=args, prog_name=name)\n  File \"/usr/local/lib/python2.7/dist-packages/flask/cli.py\", line 374, in main\n    return AppGroup.main(self, *args, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/click/core.py\", line 696, in main\n    rv = self.invoke(ctx)\n  File \"/usr/local/lib/python2.7/dist-packages/click/core.py\", line 1060, in invoke\n    return _process_result(sub_ctx.command.invoke(sub_ctx))\n  File \"/usr/local/lib/python2.7/dist-packages/click/core.py\", line 889, in invoke\n    return ctx.invoke(self.callback, **ctx.params)\n  File \"/usr/local/lib/python2.7/dist-packages/click/core.py\", line 534, in invoke\n    return callback(*args, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/click/decorators.py\", line 64, in new_func\n    return ctx.invoke(f, obj, *args[1:], **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/click/core.py\", line 534, in invoke\n    return callback(*args, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/flask_socketio/cli.py\", line 58, in run\n    run_server()\n  File \"/usr/local/lib/python2.7/dist-packages/flask_socketio/cli.py\", line 50, in run_server\n    socketio = app.extensions['socketio']\nKeyError: 'socketio'\nHow to solve this problem? Thankyou very much!", "issue_status": "Closed", "issue_reporting_time": "2017-01-01T09:06:41Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "701": {"issue_url": "https://github.com/pallets/flask/issues/2132", "issue_id": "#2132", "issue_summary": "Flask documentation inconsistent with implementation for form parsing", "issue_description": "puiterwijk commented on 31 Dec 2016\nSince Werkzeug 0.9, request.form is populated for all requests as long as they contain a Content-Type header (https://github.com/pallets/werkzeug/blob/master/werkzeug/wrappers.py#L328).\nThe Flask documentation however implies that request.form is only available with POST and PUT requests, and that is the case with Werkzeug<0.9 (well, 0.8.3 parses for POST, PUT and PATCH).", "issue_status": "Closed", "issue_reporting_time": "2016-12-30T20:47:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "702": {"issue_url": "https://github.com/pallets/flask/issues/2129", "issue_id": "#2129", "issue_summary": "How to setup this website?", "issue_description": "IvyGongoogle commented on 30 Dec 2016\nHello. How to setup this website? Which script I should run then visit this website through 'losthost:5000'?", "issue_status": "Closed", "issue_reporting_time": "2016-12-30T09:33:53Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "703": {"issue_url": "https://github.com/pallets/flask/issues/2128", "issue_id": "#2128", "issue_summary": "Socketserver problem in Python 3.6", "issue_description": "andre2 commented on 30 Dec 2016\nIn python 3.6 Flask can't run and return error:\nTraceback (most recent call last):\nFile \"D:\\enviroments\\flask\\lib\\site-packages\\werkzeug\\serving.py\", line 65, in\nfrom SocketServer import ThreadingMixIn, ForkingMixIn\nModuleNotFoundError: No module named 'SocketServer'\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\nFile \"C:/Users/User/Desktop/Blueprints/main.py\", line 25, in\napplication.run()\nFile \"D:\\enviroments\\flask\\lib\\site-packages\\flask\\app.py\", line 827, in run\nfrom werkzeug.serving import run_simple\nFile \"D:\\enviroments\\flask\\lib\\site-packages\\werkzeug\\serving.py\", line 68, in\nfrom socketserver import ThreadingMixIn, ForkingMixIn\nImportError: cannot import name 'ForkingMixIn'", "issue_status": "Closed", "issue_reporting_time": "2016-12-30T09:23:17Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "704": {"issue_url": "https://github.com/pallets/flask/issues/2127", "issue_id": "#2127", "issue_summary": "Why doesn't flask reload when I change my code? It should automatically reload my app", "issue_description": "rlam3 commented on 29 Dec 2016 \u2022\nedited\nWhy doesn't flask reload when I change my code? It should automatically reload my app.... Is flask-script now obsolete in 0.12 flask?\nsmurfix/flask-script#172", "issue_status": "Closed", "issue_reporting_time": "2016-12-28T21:36:42Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "705": {"issue_url": "https://github.com/pallets/flask/issues/2125", "issue_id": "#2125", "issue_summary": "debugging PIN is not being displayed, no request info displayed", "issue_description": "louking commented on 27 Dec 2016\nSorry to post this here as it is probably a question as opposed to an issue, but my query on stackoverflow yielded no answers. See http://stackoverflow.com/questions/40666325/flask-application-starts-without-giving-debugging-pin-also-no-request-info-disp\nAny suggestions how to debug this would be appreciated.", "issue_status": "Closed", "issue_reporting_time": "2016-12-27T15:28:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "706": {"issue_url": "https://github.com/pallets/flask/issues/2124", "issue_id": "#2124", "issue_summary": "code icon show other", "issue_description": "brunodskoo commented on 27 Dec 2016\n'code icon', 'file code outline icon' is showing different then the link http://semantic-ui.com/elements/icon.html\nhttp://jsfiddle.net/efp8z6Ln/428/", "issue_status": "Closed", "issue_reporting_time": "2016-12-27T11:14:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "707": {"issue_url": "https://github.com/pallets/flask/issues/2121", "issue_id": "#2121", "issue_summary": "cant set session timeout, tried many permutations and asked in irc and stack. to no avail.", "issue_description": "kinganu commented on 24 Dec 2016\nHi, Im only posting my issue here as a last resort, I understand this is a bug tracker. But I think its fair to say that flask default session lasting 31 days is a bug and security flaw in itself, and havent found an easy way to change this. Im simply trying to set a timeout of 15 minutes idle activity for my user sessions (site-wide but particularly for my @login_required '/dashboard/' area) I tried eliminating different variables to solve the problem but still the session lasts indefinitely. Heres the post of my imports, config, dashboard, blueprint, register / login system in its entirety (dont worry its rather succinct). Hopefully someone can see an error I overlooked. Thank you.\nhttps://dpaste.de/1pVD", "issue_status": "Closed", "issue_reporting_time": "2016-12-24T04:00:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "708": {"issue_url": "https://github.com/pallets/flask/issues/2118", "issue_id": "#2118", "issue_summary": "config.from_pyfile crashes on Python 3 when source isn't encoded in default encoding", "issue_description": "xinyvz commented on 20 Dec 2016\nwhen I read my instance config file, I get an error.\nexec(compile(config_file.read(), filename, 'exec'), d.dict)\nUnicodeDecodeError: 'gbk' codec can't decode byte 0x80 in position 437: illegal multibyte sequence\nThen I modify the code of config.from_pyfile to this\nwith open(filename, 'rb') as config_file:\nThe problem is resolved.", "issue_status": "Closed", "issue_reporting_time": "2016-12-20T03:01:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "709": {"issue_url": "https://github.com/pallets/flask/issues/2114", "issue_id": "#2114", "issue_summary": "Template File will not download file (window.open command in HTML) when run from flask", "issue_description": "Netuser-Py commented on 18 Dec 2016\nI have an HTML template that works correctly and downloads a file when open it directly in the browser (Chrome or Firefox), but the window.open command does not run (does not download the file) when the HTML is called from flask.\n<script> window.open(\"file:///C:/mypath/mywordfile.docx\") </script>\nsee attached sample\nissue.txt", "issue_status": "Closed", "issue_reporting_time": "2016-12-18T08:46:15Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "710": {"issue_url": "https://github.com/pallets/flask/issues/2113", "issue_id": "#2113", "issue_summary": "`flask run` not processing SERVER_NAME for port binding", "issue_description": "joelhed commented on 17 Dec 2016\nWhen running a development server, using flask run, with the SERVER_NAME config variable set to a port number other than 5000, the server still defaults to 5000. Looking into the code, it seems that flask.cli.run_command calls werkzeug.serving.run_simple directly, without passing through Flask.run, where the code for processing the server name resides.\nThis is using python 3.5, and Werkzeug 0.11.11", "issue_status": "Closed", "issue_reporting_time": "2016-12-17T11:28:46Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "711": {"issue_url": "https://github.com/pallets/flask/issues/2112", "issue_id": "#2112", "issue_summary": "ImportError: No module named minitwit", "issue_description": "judgewooden commented on 15 Dec 2016 \u2022\nedited\nI am new to Flask and wanted to try out the demo.\nTraceback (most recent call last):\n  File \"/usr/local/bin/flask\", line 11, in <module>\n    sys.exit(main())\n  File \"/usr/local/lib/python2.7/dist-packages/flask/cli.py\", line 478, in main\n    cli.main(args=args, prog_name=name)\n  File \"/usr/local/lib/python2.7/dist-packages/flask/cli.py\", line 345, in main\n    return AppGroup.main(self, *args, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/click/core.py\", line 696, in main\n    rv = self.invoke(ctx)\n  File \"/usr/local/lib/python2.7/dist-packages/click/core.py\", line 1055, in invoke\n    cmd_name, cmd, args = self.resolve_command(ctx, args)\n  File \"/usr/local/lib/python2.7/dist-packages/click/core.py\", line 1094, in resolve_command\n    cmd = self.get_command(ctx, cmd_name)\n  File \"/usr/local/lib/python2.7/dist-packages/flask/cli.py\", line 316, in get_command\n    rv = info.load_app().cli.get_command(ctx, name)\n  File \"/usr/local/lib/python2.7/dist-packages/flask/cli.py\", line 209, in load_app\n    rv = locate_app(self.app_import_path)\n  File \"/usr/local/lib/python2.7/dist-packages/flask/cli.py\", line 89, in locate_app\n    __import__(module)\nImportError: No module named minitwit", "issue_status": "Closed", "issue_reporting_time": "2016-12-15T09:40:27Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "712": {"issue_url": "https://github.com/pallets/flask/issues/2111", "issue_id": "#2111", "issue_summary": "Add url_for_self() function to reference current endpoint", "issue_description": "AMDmi3 commented on 14 Dec 2016\nIt's often useful to reference current endpoint, sometimes modifying some of arguments. For example, imagine some generic item viewer application which shows items from different sources:\n@app.route(\"/<source>/<item>\")\ndef item(source, item):\n    return render_template(\"item.html\")\n<a href=\"{{ url_for(???) }}\">This item from another source</a>\n<a href=\"{{ url_for(???) }}\">Different item from the same source</a>\nCurrently, request.endpoint and request.view_args may be used to construct such urls, but it's cumbersome if done generic way:\n<a href=\"{{ url_for(request.endpoint, *dict(request.view_args, source=\"another\")) }}\">This item from another source</a>\n<a href=\"{{ url_for(request.endpoint, *dict(request.view_args, item=\"different\")) }}\">Different item from the same source</a>\nSo I propose to add url_for_self() function which does it in simple way. I've implemented it like this for myself:\ndef url_for_self(**args):\n    return flask.url_for(flask.request.endpoint, **dict(flask.request.view_args, **args))\n\napp.jinja_env.globals['url_for_self'] = url_for_self\nThis simplifies above mentioned template code into much more readable:\n<a href=\"{{ url_for_self(source=\"another\") }}\">This item from another source</a>\n<a href=\"{{ url_for_self(item=\"different\") }}\">Different item from the same source</a>\nNote that this allows both adding, modifying and clearing (with foo=None) parameters.", "issue_status": "Closed", "issue_reporting_time": "2016-12-14T17:02:40Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "713": {"issue_url": "https://github.com/pallets/flask/issues/2110", "issue_id": "#2110", "issue_summary": "Doubt in flask session.py save_session method", "issue_description": "dotgc commented on 14 Dec 2016\nOn line #340 in sessions.py, I see that session.modified is being checked AFTER the session object has already been evaluated to False. Is that a bug? How does it work otherwise?\nhttps://github.com/pallets/flask/blob/master/flask/sessions.py#L340", "issue_status": "Closed", "issue_reporting_time": "2016-12-14T15:12:28Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "714": {"issue_url": "https://github.com/pallets/flask/issues/2109", "issue_id": "#2109", "issue_summary": "app.run(host, port) and SERVER_NAME should correspond to where flask is actually running", "issue_description": "MartijnRas commented on 14 Dec 2016\nAssuming the SERVER_NAME config variable is configured as '0.0.0.0:5555':\nCalling app.run(host=None, port=None) results in flask running on http://127.0.0.1:5555/\nCalling app.run(host='127.0.0.1', port=5000) results in flask running on http://127.0.0.1:5000/\nIn both cases the SERVER_NAME config variable does not correspond to where flask is actually running.\nThe host and port parameters in app.run() must of course take precedence, but should be set according to the SERVER_NAME config variable if present.\nThe current implementation in app.run():\nif host is None:\n    host = '127.0.0.1'\nif port is None:\n    server_name = self.config['SERVER_NAME']\n    if server_name and ':' in server_name:\n        port = int(server_name.rsplit(':', 1)[1])\n    else:\n        port = 5000\nCould be replaced by the following:\n_host = '127.0.0.1'\n_port = 5000\nservername = self.config['SERVER_NAME']\nif server_name:\n    if server_name and ':' in server_name:\n        _host, _port = servername.split(':', 1)\nif host is None:\n    host = _host\nif port is None:\n    port = _port\nThe following can be used to make sure the SERVER_NAME config variable corresponds to where flask is actually running:\nif servername:\n    self.config['SERVER_NAME'] = host + ':' + port\n1", "issue_status": "Closed", "issue_reporting_time": "2016-12-14T12:58:31Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "715": {"issue_url": "https://github.com/pallets/flask/issues/2108", "issue_id": "#2108", "issue_summary": "Using absolute path in FLASK_APP can't run `flask db init` cli module error", "issue_description": "future0906 commented on 14 Dec 2016\nwhen I specify absolute path like this D:\\personal\\prjs\\cfblog2\\cfblog2\\app.py in FLASK_APP, run flask db init will raise a exception:\nTraceback (most recent call last):\n  File \"c:\\userprograms\\python35\\Lib\\runpy.py\", line 184, in _run_module_as_main\n    \"__main__\", mod_spec)\n  File \"c:\\userprograms\\python35\\Lib\\runpy.py\", line 85, in _run_code\n    exec(code, run_globals)\n  File \"D:\\personal\\local\\cfblog2\\lib\\site-packages\\flask\\__main__.py\", line 15, in <module>\n    main(as_module=True)\n  File \"D:\\personal\\local\\cfblog2\\lib\\site-packages\\flask\\cli.py\", line 479, in main\n    cli.main(args=args, prog_name=name)\n  File \"D:\\personal\\local\\cfblog2\\lib\\site-packages\\flask\\cli.py\", line 346, in main\n    return AppGroup.main(self, *args, **kwargs)\n  File \"D:\\personal\\local\\cfblog2\\lib\\site-packages\\click\\core.py\", line 696, in main\n    rv = self.invoke(ctx)\n  File \"D:\\personal\\local\\cfblog2\\lib\\site-packages\\click\\core.py\", line 1060, in invoke\n    return _process_result(sub_ctx.command.invoke(sub_ctx))\n  File \"D:\\personal\\local\\cfblog2\\lib\\site-packages\\click\\core.py\", line 1060, in invoke\n    return _process_result(sub_ctx.command.invoke(sub_ctx))\n  File \"D:\\personal\\local\\cfblog2\\lib\\site-packages\\click\\core.py\", line 889, in invoke\n    return ctx.invoke(self.callback, **ctx.params)\n  File \"D:\\personal\\local\\cfblog2\\lib\\site-packages\\click\\core.py\", line 534, in invoke\n    return callback(*args, **kwargs)\n  File \"D:\\personal\\local\\cfblog2\\lib\\site-packages\\click\\decorators.py\", line 17, in new_func\n    return f(get_current_context(), *args, **kwargs)\n  File \"D:\\personal\\local\\cfblog2\\lib\\site-packages\\flask\\cli.py\", line 229, in decorator\n    with __ctx.ensure_object(ScriptInfo).load_app().app_context():\n  File \"D:\\personal\\local\\cfblog2\\lib\\site-packages\\flask\\cli.py\", line 210, in load_app\n    rv = locate_app(self.app_import_path)\n  File \"D:\\personal\\local\\cfblog2\\lib\\site-packages\\flask\\cli.py\", line 90, in locate_app\n    __import__(module)\nImportError: No module named 'D'\nIt seems like function locate_app can't handle win-style path correctly.\nAnd also please consider using command-line arguments to specify flask startup file/module instead of using environment.", "issue_status": "Closed", "issue_reporting_time": "2016-12-14T02:26:26Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "716": {"issue_url": "https://github.com/pallets/flask/issues/2107", "issue_id": "#2107", "issue_summary": "API exception pattern docs do not mention PROPAGATE_EXCEPTIONS", "issue_description": "philmayers commented on 6 Dec 2016\nhttp://flask.pocoo.org/docs/0.11/patterns/apierrors/\n...discusses a pattern for defining and catching custom exceptions. However, this pattern does not work unless PROPAGATE_EXCEPTIONS is set, because the exception gets eaten and turned into a 500.\nConfusingly it will work in DEBUG=True mode then break in production.\nCan the docs be updated? Or am I missing something?", "issue_status": "Closed", "issue_reporting_time": "2016-12-06T16:33:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "717": {"issue_url": "https://github.com/pallets/flask/issues/2106", "issue_id": "#2106", "issue_summary": "Invalid Host header returns HTTP/500 insetad of HTTP/400", "issue_description": "brmzkw commented on 5 Dec 2016\ntest.py:\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\nrun:\n$> FLASK_APP=test.py flask run\n * Serving Flask app \"test\"\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\nquery:\n$> curl localhost:5000 -H \"Host: '`python -c 'print \\\"\\xbf\\\"'`\" -i\nHTTP/1.0 500 INTERNAL SERVER ERROR\nContent-Type: text/html\nContent-Length: 291\nServer: Werkzeug/0.11.11 Python/2.7.12\nDate: Mon, 05 Dec 2016 11:57:46 GMT\n\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<title>500 Internal Server Error</title>\n<h1>Internal Server Error</h1>\n<p>The server encountered an internal error and was unable to complete your request.  Either the server is overloaded or there is an error in the application.</p>\nserver log:\n127.0.0.1 - - [05/Dec/2016 12:57:46] \"GET / HTTP/1.1\" 500 -\nError on request:\nTraceback (most recent call last):\n  File \"/private/tmp/venv/lib/python2.7/site-packages/werkzeug/serving.py\", line 193, in run_wsgi\n    execute(self.server.app)\n  File \"/private/tmp/venv/lib/python2.7/site-packages/werkzeug/serving.py\", line 181, in execute\n    application_iter = app(environ, start_response)\n  File \"/private/tmp/venv/lib/python2.7/site-packages/flask/app.py\", line 2000, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/private/tmp/venv/lib/python2.7/site-packages/flask/app.py\", line 1983, in wsgi_app\n    ctx = self.request_context(environ)\n  File \"/private/tmp/venv/lib/python2.7/site-packages/flask/app.py\", line 1944, in request_context\n    return RequestContext(self, environ)\n  File \"/private/tmp/venv/lib/python2.7/site-packages/flask/ctx.py\", line 242, in __init__\n    self.url_adapter = app.create_url_adapter(self.request)\n  File \"/private/tmp/venv/lib/python2.7/site-packages/flask/app.py\", line 1771, in create_url_adapter\n    server_name=self.config['SERVER_NAME'])\n  File \"/private/tmp/venv/lib/python2.7/site-packages/werkzeug/routing.py\", line 1327, in bind_to_environ\n    query_args=query_args)\n  File \"/private/tmp/venv/lib/python2.7/site-packages/werkzeug/routing.py\", line 1239, in bind\n    raise BadHost()\nBadHost: 400: Bad Request\nI'm not sure if this issue should be created here or on the werkzeug repository.\nAnyway, I think a HTTP/400 should be returned to the client instead of a HTTP/500.", "issue_status": "Closed", "issue_reporting_time": "2016-12-05T12:01:28Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "718": {"issue_url": "https://github.com/pallets/flask/issues/2101", "issue_id": "#2101", "issue_summary": "Authenticating with NTLM", "issue_description": "jithurjacob commented on 28 Nov 2016\nHow can I authenticate a user with NTLM Authentication in Windows?\nI have a Python Flask Application hosted in IIS server with Windows Authentication enabled. When a user visits the site within our network I want the user to be auto logged in else redirect the user to login page.\nHow can this be achieved?", "issue_status": "Closed", "issue_reporting_time": "2016-11-28T11:42:23Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "719": {"issue_url": "https://github.com/pallets/flask/issues/2100", "issue_id": "#2100", "issue_summary": "Header issue with many body request (put, post, etc)", "issue_description": "alejandrofcarrera commented on 25 Nov 2016 \u2022\nedited\nHi everyone, i have been seeing this issue some days intermittently.\nI have some methods with request.method = POST, but when i want to resend the same request to the same endpoint, there is an issue with the request.method and Flask throws Method not Allowed.\n@app.route('/api/pause', methods=['POST'])\njson = {\"signature\":\"1234\", \"value\":\"b\"}\nThe first time was good and data was printed on console: print request.json\nbut the second time (i am doing the requests from Postman and this time i have changed value for a) i can see this on log:\n{\"signature\":\"1234\",\"value\":\"b\"}POST /api/pause HTTP/1.1\" 405 -\nthe third time i can see this on log:\n{\"signature\":\"1234\",\"value\":\"a\"}POST /api/pause HTTP/1.1\" 405 -\nSo, i do not know why Flask is inserting the previous POST values at the request.method and of course it throws Method Not Allowed, because pause method has not this allowed.\nNote: I tried with or without threaded Flask option.\nDo you know why i have this problem ? It is so important because i can not create a good API without POST or PUT as you would think.", "issue_status": "Closed", "issue_reporting_time": "2016-11-25T11:47:44Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "720": {"issue_url": "https://github.com/pallets/flask/issues/2099", "issue_id": "#2099", "issue_summary": "Problems with unicode", "issue_description": "javixeneize commented on 24 Nov 2016\nHi\nLooks like flask works different than plain python with Unicode. Let me explain\nIf i assign an unicode string to a parameter, (test=\"%$\u00a3\") it works fine\nWhen i run this code as part of a flask execution, i have an error. UnicodeDecodeError: 'ascii' codec can't decode byte 0xc2 in position 3: ordinal not in range(128)\nI can encode this in utf-8, but i would like to understand why the behaviour is different using flask?\nThanks", "issue_status": "Closed", "issue_reporting_time": "2016-11-24T12:35:18Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "721": {"issue_url": "https://github.com/pallets/flask/issues/2098", "issue_id": "#2098", "issue_summary": "add rails style model", "issue_description": "ghost commented on 24 Nov 2016 \u2022\nedited by untitaker\nnow, when we want to operate the model, we have to define the database model every time, whether we can add some code to the flask, so that we do not need to define the database like the cakephp model style....", "issue_status": "Closed", "issue_reporting_time": "2016-11-24T03:25:18Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "722": {"issue_url": "https://github.com/pallets/flask/issues/2096", "issue_id": "#2096", "issue_summary": "@app.teardown_appcontext fires before request finishes.", "issue_description": "obskyr commented on 21 Nov 2016\nThe function I designated as @app.teardown_appcontext is running before the view code runs - at least according to my own investigations. Printing something in teardown_appcontext and something in a view body results in the former appearing before the latter, at the very least. Using teardown_request, however, works as expected.\nFrom the documentation, I would've expected teardown_appcontext to fire at roughly the same time (\"These functions are typically also called when the request context is popped\"), except it'd also work with with app.app_context. It seems that's not the case, however!\nI'm on Python 2.7.12 with Flask 0.11.1 and Werkzeug 0.11.11.", "issue_status": "Closed", "issue_reporting_time": "2016-11-21T16:54:17Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "723": {"issue_url": "https://github.com/pallets/flask/issues/2087", "issue_id": "#2087", "issue_summary": "Do not use cache when `Request.get_json(cache=False)` is called.", "issue_description": "Contributor\njirikuncar commented on 17 Nov 2016 \u2022\nedited\nThe _cached_json property is used even when arguments change.\nProposal:\n         rv = getattr(self, '_cached_json', _missing)\n-        if rv is not _missing:\n+        if cache and rv is not _missing:\n              return rv\nTest case:\n# POST with an invalid JSON data\nassert request.get_json(silent=True) is None\nwith pytest.raises(BadRequest):\n    request.get_json(silent=False, cache=False)\n2", "issue_status": "Closed", "issue_reporting_time": "2016-11-17T13:26:11Z", "fixed_by": "#2089", "pull_request_summary": "Ignore cache on request.get_json(cache=False) call", "pull_request_description": "Contributor\njirikuncar commented on 17 Nov 2016\nRemoves usage of _cached_json property when get_json is called with\ndisabled cache argument. (closes #2087)", "pull_request_status": "Merged", "issue_fixed_time": "2016-12-21T20:08:39Z", "files_changed": [["3", "flask/wrappers.py"], ["8", "tests/test_helpers.py"]]}, "724": {"issue_url": "https://github.com/pallets/flask/issues/2086", "issue_id": "#2086", "issue_summary": "large file uploads eating up memory", "issue_description": "cecemel commented on 16 Nov 2016 \u2022\nedited\nHi,\nwhen handling large file uploads +300MB, the files seem to be cached in memory till the upload is finished. This is not very practical.\nThe doc states:\n(...) So how exactly does Flask handle uploads? Well it will store them in the webserver\u2019s memory if the files are reasonable small otherwise in a temporary location\nI am unsure on how to interpret this, but as I saw it: cache the data on disk till the file is uploaded, before moving on. :-)\nSo my question is: is storing everything in memory during upload, intended behaviour?\nTo give a little more details on the code:\ndef store_upload(project_id):\n    file = request.files['file']\n    # boiler plate checks ...\n    file.save(os.path.join(destination_base, destination))  #save file to decent location\n    return _response_stuff()\nI am using python 3.5, flask 0.11.1.\nPS: I went through #pocoo and github issues here, but couldn't find any answer matching my request\nThanks!\n2", "issue_status": "Closed", "issue_reporting_time": "2016-11-16T16:35:11Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "725": {"issue_url": "https://github.com/pallets/flask/issues/2084", "issue_id": "#2084", "issue_summary": "Multiple filters in a single qurery", "issue_description": "omar-jandali commented on 14 Nov 2016\nHello I am working on a flask app and i want to creeate a query that has multiple filters in order to show the correct results within the same table:\nexample:\ntab = session.query(Tabs).filter_by(column1 = hello).filter_by(column2 = world).all()\nbut none of the methods i am trying will work.\nBOTH of the definition columns are from the same table....", "issue_status": "Closed", "issue_reporting_time": "2016-11-14T07:05:53Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "726": {"issue_url": "https://github.com/pallets/flask/issues/2083", "issue_id": "#2083", "issue_summary": "Application did not run with `flask run` with FLASK_DEBUG=1(But can run by using command`python -m flask run`) in Win10", "issue_description": "future0906 commented on 13 Nov 2016 \u2022\nedited\nError message:\nd:\\projects\\cfblog2_env\\scripts\\python.exe: can't open file 'D:\\projects\\cfblog2_env\\Scripts\\flask': [Errno 2] No such file or directory\nEnvironment: Win 10, Py 3.5.2(VirtualEnv)\uff0cFlask 0.11\nThis error was came from '_reload.py' in werkzeug.It seems like when run with flask.exe, sys.executable still equal to python's exe path and sys.argv is something like this:'D:\\\\projects\\\\cfblog2_env\\\\Scripts\\\\flask', 'run'\nI am not sure what cause this problem actually(werkzeug,packer of flask.exe or flask itself).But this error happend when I using flask. So I put the issuse here.\nTo whom has the same error, you can usepython -m flask run for workaround.\nAnd last, sorry for my poor english.", "issue_status": "Closed", "issue_reporting_time": "2016-11-13T17:40:33Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "727": {"issue_url": "https://github.com/pallets/flask/issues/2079", "issue_id": "#2079", "issue_summary": "Flask doesn't require blinker", "issue_description": "WillPlatnick commented on 4 Nov 2016\nWe installed flask 0.11.1 from pip today. Our application would not start unless we also installed blinker via pip. Seems like blinker should be in your requires.txt.", "issue_status": "Closed", "issue_reporting_time": "2016-11-03T23:11:27Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "728": {"issue_url": "https://github.com/pallets/flask/issues/2078", "issue_id": "#2078", "issue_summary": "Adding documentation on best practices for Server-sent events and WebSockets", "issue_description": "runfalk commented on 3 Nov 2016 \u2022\nedited\nEarlier this year I did some development involving Server-sent events (SSE) using Flask. I found there is no official documentation on how to best handle this. Since the specification is simple I ended up implementing it myself. However, I think there is room for improvement.\nI find there are a couple of problems with working with SSE and Flask:\nDevelopment environment requires using a separate service or threading. Using a separate service adds complexity and using threading disallows the use of frame inspection in the built-in Don't Panic debugger for all requests.\nThere is no official information on best practices when it comes to deployment of SSE. Should it be a separate service or can it be included in the application? Especially for smaller applications I find the complexity of introducing a separate service for managing SSE adds a lot of complexity to an otherwise simple project.\nThe same points hold true for WebSockets as they are similar.\n6\n1", "issue_status": "Closed", "issue_reporting_time": "2016-11-03T01:34:42Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "729": {"issue_url": "https://github.com/pallets/flask/issues/2065", "issue_id": "#2065", "issue_summary": "Cloning flask fails with Git config transfer.fsckobjects = true; repository broken?", "issue_description": "hartwork commented on 26 Oct 2016\nHi!\nOne of my machines has Git configured to fsck objects on transfer. On the Flask repository, it errors with:\nerror: object 0b404df8c030cdeaca7b373956c3a697efd32f78: zeroPaddedFilemode: contains zero-padded file modes.\nWithout fsck, cloning works fine.\nTo reproduce:\n$ git clone https://github.com/pallets/flask.git\nCloning into 'flask'...\nremote: Counting objects: 12684, done.\nremote: Compressing objects: 100% (4/4), done.\nremote: Total 12684 (delta 0), reused 0 (delta 0), pack-reused 12680\nReceiving objects: 100% (12684/12684), 3.56 MiB | 4.44 MiB/s, done.\nResolving deltas: 100% (8794/8794), done.\n\n$ rm -Rf flask/\n\n$ git config --global transfer.fsckobjects true\n\n$ cat ~/.gitconfig \n[transfer]\n        fsckobjects = true\n\n$ git clone https://github.com/pallets/flask.git\nCloning into 'flask'...\nremote: Counting objects: 12684, done.\nremote: Compressing objects: 100% (4/4), done.\nerror: object 0b404df8c030cdeaca7b373956c3a697efd32f78: zeroPaddedFilemode: contains zero-padded file modes\nfatal: Error in object\nfatal: index-pack failed\n\n# git --version\ngit version 2.10.1\nI'd be curious if you can reproduce it or if this is a bug in Git or something.", "issue_status": "Closed", "issue_reporting_time": "2016-10-26T13:37:47Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "730": {"issue_url": "https://github.com/pallets/flask/issues/2064", "issue_id": "#2064", "issue_summary": "why loop redirect with redirect('{0}/{1}'.format(site, page_name), code=301)?", "issue_description": "forcemain commented on 26 Oct 2016 \u2022\nedited by ThiefMaster\nwork right\nreturn redirect('{0}/{1}'.format('http://www.newweb.com/', page_name), code=301)\nwork loop\nreturn redirect('{0}/{1}'.format(app.config.get('NEW_SERVER_NAME'), page_name), code=301)\nall my code\napp = Flask(__name__)\napp.config.update(NEW_SERVER_NAME='www.newweb.net')\n\n\n@app.route('/<path:page_name>/')\n@app.route('/')\ndef index(page_name=''):\n    print '''\n    UserAgent: {}\n    Method   : {}\n    GetArgs  : {}\n    PostArgs : {}\n    '''.format(\n        request.headers.get('User-Agent'),\n        request.method,\n        request.args,\n        request.form,\n    )\n    return redirect('{0}/{1}'.format(app.config.get('NEW_SERVER_NAME'), page_name), code=301)\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=9000, debug=app.debug)\n127.0.0.1 - - [26/Oct/2016 17:20:03] \"GET /www.newweb.net/www.newweb.net/www.new\nweb.net/www.newweb.net/www.newweb.net/www.newweb.net/www.newweb.net/www.newweb.n\net/www.newweb.net/www.newweb.net/asdasdas/asdasdasda HTTP/1.1\" 301 -\ni dont know why redirect with loop and before redirect code not running,please help, thank you very much~", "issue_status": "Closed", "issue_reporting_time": "2016-10-26T09:24:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "731": {"issue_url": "https://github.com/pallets/flask/issues/2062", "issue_id": "#2062", "issue_summary": "add_resource does not preserve api function docstring", "issue_description": "izmailoff commented on 21 Oct 2016\nI'm trying to auto generate API help using this piece of code:\n@app.route('/api/help', methods=['GET'])\ndef api_help():\n    \"\"\"Returns all registered APIs available in this application.\"\"\"\n    func_list = {}\n    for rule in app.url_map.iter_rules():\n        if rule.endpoint != 'static':\n            func_list[rule.rule] = app.view_functions[rule.endpoint].__doc__\n    return jsonify(func_list)\nIt relies on __doc__ of a function and works fine for APIs defined with a route decorator:\n@app.route('/someapi'...\nHowever, when a route is registered with add_resource the docstring is lost.\nThe help api returns data in this format:\n{\n  \"/api/help\": \"Returns all registered APIs available in this application.\", \n  \"someapi\": null\n}\ntried on latest versions:\nName: Werkzeug\nVersion: 0.11.11\nName: Flask\nVersion: 0.11.1\npython --version\nPython 3.5.1 :: Anaconda 4.0.0 (64-bit)", "issue_status": "Closed", "issue_reporting_time": "2016-10-21T02:38:15Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "732": {"issue_url": "https://github.com/pallets/flask/issues/2058", "issue_id": "#2058", "issue_summary": "The file/path provided (flaskr) does not appear to exist.", "issue_description": "tuhaolam commented on 15 Oct 2016 \u2022\nedited by untitaker\nThe issue tracker is a tool to address bugs.\nPlease use the #pocoo IRC channel on freenode or Stack Overflow for questions.\n~/flask-master/examples/flaskr$ flask run\nUsage: flask run [OPTIONS]\nError: The file/path provided (flaskr) does not appear to exist. Please verify the path is correct. If app is not on PYTHONPATH, ensure the extension is .py", "issue_status": "Closed", "issue_reporting_time": "2016-10-15T02:47:11Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "733": {"issue_url": "https://github.com/pallets/flask/issues/2056", "issue_id": "#2056", "issue_summary": "Installation documentation for Windows: minor typo", "issue_description": "WDBell commented on 13 Oct 2016\nWhere it says,\nIf you are a Windows user, the following command is for you:\n$ venv\\scripts\\activate\nThe word 'scripts' should be capitalised, as 'Scripts'.", "issue_status": "Closed", "issue_reporting_time": "2016-10-12T19:01:27Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "734": {"issue_url": "https://github.com/pallets/flask/issues/2054", "issue_id": "#2054", "issue_summary": "flask CLOEXEC", "issue_description": "467754239 commented on 9 Oct 2016\nHow to solve the problem of file descriptors, flask as main thread, when the main thread to exit the child thread inheritance file descriptor problem?", "issue_status": "Closed", "issue_reporting_time": "2016-10-09T09:26:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "735": {"issue_url": "https://github.com/pallets/flask/issues/2051", "issue_id": "#2051", "issue_summary": "flaskr project (in dev docs and on github) needs to use relative import in __init__.py for Python 3", "issue_description": "toddjames commented on 8 Oct 2016\nCurrently, while following the dev docs or cloning the existing flaskr project on GitHub, it will not run in a Python 3 virtualenv. The error when running the cloned flaskr application is:\nTraceback (most recent call last): File \"/home/todd/flaskr/flask/examples/flaskr/env/lib/python3.5/site-packages/flask/_compat.py\", line 33, in reraise raise value File \"/home/todd/flaskr/flask/examples/flaskr/flaskr/__init__.py\", line 1, in <module> from flaskr import app ImportError: cannot import name 'app'\nThis is the same error when following the docs to recreate the flaskr application. By modifying flaskr/__init__.py to include a relative import when using a Python 3 virtualenv, everything works fine.\nThat is, in flaskr/__init__.py, change:\nfrom flaskr import app\nto:\nfrom .flaskr import app\n(note the period)\nAt this point, I am still not comfortable contributing, nor do I know if this is the correct solution or if this has any implications for Python 2. Hence the issue, hoping someone else can confirm this is correct, or provide a better solution.", "issue_status": "Closed", "issue_reporting_time": "2016-10-08T01:37:29Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "736": {"issue_url": "https://github.com/pallets/flask/issues/2050", "issue_id": "#2050", "issue_summary": "Many 'requests.post' generates internal ImportError", "issue_description": "jeff1evesque commented on 6 Oct 2016\nWhen running a script that performs several requests.post against flask's app.py, running in the background, various ImportError's occur:\nOriginal exception was:\nTraceback (most recent call last):\n  File \"app.py\", line 32, in <module>\n    app.run(host='0.0.0.0')\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 843, in run\n    run_simple(host, port, self, **options)\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 694, in run_simple\n    inner()\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 659, in inner\n    srv.serve_forever()\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 499, in serve_forever\n    HTTPServer.serve_forever(self)\n  File \"/usr/lib/python2.7/SocketServer.py\", line 238, in serve_forever\n    self._handle_request_noblock()\n  File \"/usr/lib/python2.7/SocketServer.py\", line 297, in _handle_request_noblock\n    self.handle_error(request, client_address)\n  File \"/usr/lib/python2.7/SocketServer.py\", line 295, in _handle_request_noblock\n    self.process_request(request, client_address)\n  File \"/usr/lib/python2.7/SocketServer.py\", line 321, in process_request\n    self.finish_request(request, client_address)\n  File \"/usr/lib/python2.7/SocketServer.py\", line 334, in finish_request\n    self.RequestHandlerClass(request, client_address, self)\n  File \"/usr/lib/python2.7/SocketServer.py\", line 649, in __init__\n    self.handle()\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 216, in handle\n    rv = BaseHTTPRequestHandler.handle(self)\n  File \"/usr/lib/python2.7/BaseHTTPServer.py\", line 340, in handle\n    self.handle_one_request()\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 251, in handle_one_request\n    return self.run_wsgi()\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 193, in run_wsgi\n    execute(self.server.app)\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 181, in execute\n    application_iter = app(environ, start_response)\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 2000, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1991, in wsgi_app\n    response = self.make_response(self.handle_exception(e))\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1746, in make_response\n    rv = self.response_class.force_type(rv, request.environ)\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/wrappers.py\", line 847, in force_type\n    response = BaseResponse(*_run_wsgi_app(response, environ))\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/wrappers.py\", line 56, in _run_wsgi_app\n    from werkzeug.test import run_wsgi_app as _run_wsgi_app\nImportError: No module named test\nNote: a more complete traceback can be reviewed.", "issue_status": "Closed", "issue_reporting_time": "2016-10-06T12:39:17Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "737": {"issue_url": "https://github.com/pallets/flask/issues/2049", "issue_id": "#2049", "issue_summary": "Cannot run many 'requests.post' against 'app.py'", "issue_description": "jeff1evesque commented on 6 Oct 2016 \u2022\nedited\nMy application has automatic pytest on the travis ci, which implements live_server, so the app context only lives for the duration of the unit tests. This contraption was devised using a series of docker containers. Long story short, I didn't have time to replicate this automated process for my vagrant development environment. So, I created some unit tests, which predicates on the following assumptions:\ncreate self contain vagrant vm with my application\ndownload virtualbox with virtualbox guest\ndownload vagrant\nclone repository\nfinally run cd /path/to/clone/repository && vagrant up\napp context needs to be created by manually running (cd /vagrant && python app.py &)\nThen, the problems begin happening when I run a series of requests.post against the flask app. I run such processes by triggering my manual pytests, which does a combination of assert against multiple requests.post. So, in the same vagrant vm, I would run (cd /vagrant/test && pytest manual). This would run any python scripts prefixed with pytest_*.py, or configure_.*.py, in the manual/ directory.\nWhen I run my manual unit tests one pass through, the tests succeed, and as intended:\nvagrant@vagrant-ubuntu-trusty-64:/vagrant/test$ pytest manual\n========================================= test session starts ==========================================\nplatform linux2 -- Python 2.7.6, pytest-3.0.3, py-1.4.31, pluggy-0.4.0\nrootdir: /vagrant/test/manual, inifile: pytest.ini\nplugins: flask-0.10.0\ncollected 20 items\n\nmanual/configure_database.py .\nmanual/configure_redis.py .\nmanual/authentication/pytest_crypto.py .\nmanual/authentication/pytest_validate_password.py .\nmanual/programmatic_interface/dataset_url/pytest_svm_dataset_url.py ....\nmanual/programmatic_interface/dataset_url/pytest_svr_dataset_url.py ....\nmanual/programmatic_interface/file_upload/pytest_svm_file_upload.py ....\nmanual/programmatic_interface/file_upload/pytest_svr_file_upload.py ....\n\n====================================== 20 passed in 51.27 seconds ======================================\nHowever, if I run the same tests again, without restarting flask, it breaks:\nvagrant@vagrant-ubuntu-trusty-64:/vagrant/test$ pytest manual\n========================================= test session starts ==========================================\nplatform linux2 -- Python 2.7.6, pytest-3.0.3, py-1.4.31, pluggy-0.4.0\nrootdir: /vagrant/test/manual, inifile: pytest.ini\nplugins: flask-0.10.0\ncollected 20 items\n\nmanual/configure_database.py .\nmanual/configure_redis.py .\nmanual/authentication/pytest_crypto.py .\nmanual/authentication/pytest_validate_password.py .\nmanual/programmatic_interface/dataset_url/pytest_svm_dataset_url.py ....\nmanual/programmatic_interface/dataset_url/pytest_svr_dataset_url.py ....\nmanual/programmatic_interface/file_upload/pytest_svm_file_upload.py ....\nmanual/programmatic_interface/file_upload/pytest_svr_file_upload.py [2016-10-05 01:11:23,116] ERROR in app: Exception on /load-data/ [POST]\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1988, in wsgi_app\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1641, in full_dispatch_request\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1544, in handle_user_exception\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1639, in full_dispatch_request\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1625, in dispatch_request\n  File \"/vagrant/interface/views.py\", line 85, in load_data\n  File \"/vagrant/brain/load_data.py\", line 78, in load_data_new\n  File \"/vagrant/brain/session/base_data.py\", line 129, in save_premodel_dataset\n  File \"/vagrant/brain/session/data/save_dataset.py\", line 34, in dataset\n  File \"/vagrant/brain/database/save_feature.py\", line 86, in save_feature\n  File \"/vagrant/brain/database/db_query.py\", line 98, in sql_connect\nAttributeError: 'SQL' object has no attribute 'cursor'\nTraceback (most recent call last):\n  File \"app.py\", line 32, in <module>\n    app.run(host='0.0.0.0')\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 843, in run\n    run_simple(host, port, self, **options)\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 694, in run_simple\n    inner()\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 659, in inner\n    srv.serve_forever()\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 499, in serve_forever\n    HTTPServer.serve_forever(self)\n  File \"/usr/lib/python2.7/SocketServer.py\", line 238, in serve_forever\n    self._handle_request_noblock()\n  File \"/usr/lib/python2.7/SocketServer.py\", line 297, in _handle_request_noblock\n    self.handle_error(request, client_address)\n  File \"/usr/lib/python2.7/SocketServer.py\", line 295, in _handle_request_noblock\n    self.process_request(request, client_address)\n  File \"/usr/lib/python2.7/SocketServer.py\", line 321, in process_request\n    self.finish_request(request, client_address)\n  File \"/usr/lib/python2.7/SocketServer.py\", line 334, in finish_request\n    self.RequestHandlerClass(request, client_address, self)\n  File \"/usr/lib/python2.7/SocketServer.py\", line 649, in __init__\n    self.handle()\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 216, in handle\n    rv = BaseHTTPRequestHandler.handle(self)\n  File \"/usr/lib/python2.7/BaseHTTPServer.py\", line 340, in handle\n    self.handle_one_request()\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 251, in handle_one_request\n    return self.run_wsgi()\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 193, in run_wsgi\n    execute(self.server.app)\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 181, in execute\n    application_iter = app(environ, start_response)\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 2000, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1991, in wsgi_app\n    response = self.make_response(self.handle_exception(e))\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1746, in make_response\n    rv = self.response_class.force_type(rv, request.environ)\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/wrappers.py\", line 847, in force_type\n    response = BaseResponse(*_run_wsgi_app(response, environ))\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/wrappers.py\", line 56, in _run_wsgi_app\n    from werkzeug.test import run_wsgi_app as _run_wsgi_app\nImportError: No module named test\nError in sys.excepthook:\nTraceback (most recent call last):\n  File \"/usr/lib/python2.7/dist-packages/apport_python_hook.py\", line 63, in apport_excepthook\n    from apport.fileutils import likely_packaged, get_recent_crashes\n  File \"/usr/lib/python2.7/dist-packages/apport/__init__.py\", line 5, in <module>\n    from apport.report import Report\nImportError: No module named report\n\nOriginal exception was:\nTraceback (most recent call last):\n  File \"app.py\", line 32, in <module>\n    app.run(host='0.0.0.0')\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 843, in run\n    run_simple(host, port, self, **options)\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 694, in run_simple\n    inner()\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 659, in inner\n    srv.serve_forever()\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 499, in serve_forever\n    HTTPServer.serve_forever(self)\n  File \"/usr/lib/python2.7/SocketServer.py\", line 238, in serve_forever\n    self._handle_request_noblock()\n  File \"/usr/lib/python2.7/SocketServer.py\", line 297, in _handle_request_noblock\n    self.handle_error(request, client_address)\n  File \"/usr/lib/python2.7/SocketServer.py\", line 295, in _handle_request_noblock\n    self.process_request(request, client_address)\n  File \"/usr/lib/python2.7/SocketServer.py\", line 321, in process_request\n    self.finish_request(request, client_address)\n  File \"/usr/lib/python2.7/SocketServer.py\", line 334, in finish_request\n    self.RequestHandlerClass(request, client_address, self)\n  File \"/usr/lib/python2.7/SocketServer.py\", line 649, in __init__\n    self.handle()\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 216, in handle\n    rv = BaseHTTPRequestHandler.handle(self)\n  File \"/usr/lib/python2.7/BaseHTTPServer.py\", line 340, in handle\n    self.handle_one_request()\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 251, in handle_one_request\n    return self.run_wsgi()\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 193, in run_wsgi\n    execute(self.server.app)\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 181, in execute\n    application_iter = app(environ, start_response)\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 2000, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1991, in wsgi_app\n    response = self.make_response(self.handle_exception(e))\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1746, in make_response\n    rv = self.response_class.force_type(rv, request.environ)\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/wrappers.py\", line 847, in force_type\n    response = BaseResponse(*_run_wsgi_app(response, environ))\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/wrappers.py\", line 56, in _run_wsgi_app\n    from werkzeug.test import run_wsgi_app as _run_wsgi_app\nImportError: No module named test\nFFFF\n\n=============================================== FAILURES ===============================================\n____________________________________________ test_data_new _____________________________________________\n\n    def test_data_new():\n        '''@test_data_new\n\n        This method tests the 'data_new' session.\n\n        '''\n\n>       assert requests.post(\n            endpoint_url,\n            headers=headers,\n            data=get_sample_json('svr-data-new.json', 'svr')\n        )\n\nmanual/programmatic_interface/file_upload/pytest_svr_file_upload.py:71:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/lib/python2.7/dist-packages/requests/api.py:88: in post\n    return request('post', url, data=data, **kwargs)\n/usr/lib/python2.7/dist-packages/requests/api.py:44: in request\n    return session.request(method=method, url=url, **kwargs)\n/usr/lib/python2.7/dist-packages/requests/sessions.py:455: in request\n    resp = self.send(prep, **send_kwargs)\n/usr/lib/python2.7/dist-packages/requests/sessions.py:558: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <requests.adapters.HTTPAdapter object at 0x7fe471358810>, request = <PreparedRequest [POST]>\nstream = False, timeout = <urllib3.util.Timeout object at 0x7fe4706dc0d0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n\n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) The timeout on the request.\n            :param verify: (optional) Whether to verify SSL certificates.\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            \"\"\"\n\n        conn = self.get_connection(request.url, proxies)\n\n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n\n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n\n        if stream:\n            timeout = TimeoutSauce(connect=timeout)\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n\n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n\n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n\n                low_conn = conn._get_conn(timeout=timeout)\n\n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n\n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n\n                    low_conn.endheaders()\n\n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n\n                    r = low_conn.getresponse()\n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n                else:\n                    # All is well, return the connection to the pool.\n                    conn._put_conn(low_conn)\n\n        except socket.error as sockerr:\n            raise ConnectionError(sockerr)\n\n        except MaxRetryError as e:\n>           raise ConnectionError(e)\nE           ConnectionError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /load-data/ (Caused by <class 'httplib.BadStatusLine'>: '')\n\n/usr/lib/python2.7/dist-packages/requests/adapters.py:378: ConnectionError\n___________________________________________ test_data_append ___________________________________________\n\n    def test_data_append():\n        '''@test_data_append\n\n        This method tests the 'data_append' session.\n\n        '''\n\n>       assert requests.post(\n            endpoint_url,\n            headers=headers,\n            data=get_sample_json('svr-data-append.json', 'svr')\n        )\n\nmanual/programmatic_interface/file_upload/pytest_svr_file_upload.py:85:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/lib/python2.7/dist-packages/requests/api.py:88: in post\n    return request('post', url, data=data, **kwargs)\n/usr/lib/python2.7/dist-packages/requests/api.py:44: in request\n    return session.request(method=method, url=url, **kwargs)\n/usr/lib/python2.7/dist-packages/requests/sessions.py:455: in request\n    resp = self.send(prep, **send_kwargs)\n/usr/lib/python2.7/dist-packages/requests/sessions.py:558: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <requests.adapters.HTTPAdapter object at 0x7fe4706fa5d0>, request = <PreparedRequest [POST]>\nstream = False, timeout = <urllib3.util.Timeout object at 0x7fe4706fa8d0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n\n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) The timeout on the request.\n            :param verify: (optional) Whether to verify SSL certificates.\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            \"\"\"\n\n        conn = self.get_connection(request.url, proxies)\n\n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n\n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n\n        if stream:\n            timeout = TimeoutSauce(connect=timeout)\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n\n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n\n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n\n                low_conn = conn._get_conn(timeout=timeout)\n\n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n\n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n\n                    low_conn.endheaders()\n\n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n\n                    r = low_conn.getresponse()\n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n                else:\n                    # All is well, return the connection to the pool.\n                    conn._put_conn(low_conn)\n\n        except socket.error as sockerr:\n            raise ConnectionError(sockerr)\n\n        except MaxRetryError as e:\n>           raise ConnectionError(e)\nE           ConnectionError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /load-data/ (Caused by <class 'socket.error'>: [Errno 111] Connection refused)\n\n/usr/lib/python2.7/dist-packages/requests/adapters.py:378: ConnectionError\n_________________________________________ test_model_generate __________________________________________\n\n    def test_model_generate():\n        '''@test_model_generate\n\n        This method tests the 'model_generate' session.\n\n        '''\n\n>       assert requests.post(\n            endpoint_url,\n            headers=headers,\n            data=get_sample_json('svr-model-generate.json', 'svr')\n        )\n\nmanual/programmatic_interface/file_upload/pytest_svr_file_upload.py:99:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/lib/python2.7/dist-packages/requests/api.py:88: in post\n    return request('post', url, data=data, **kwargs)\n/usr/lib/python2.7/dist-packages/requests/api.py:44: in request\n    return session.request(method=method, url=url, **kwargs)\n/usr/lib/python2.7/dist-packages/requests/sessions.py:455: in request\n    resp = self.send(prep, **send_kwargs)\n/usr/lib/python2.7/dist-packages/requests/sessions.py:558: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <requests.adapters.HTTPAdapter object at 0x7fe4706f1ed0>, request = <PreparedRequest [POST]>\nstream = False, timeout = <urllib3.util.Timeout object at 0x7fe4706939d0>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n\n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) The timeout on the request.\n            :param verify: (optional) Whether to verify SSL certificates.\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            \"\"\"\n\n        conn = self.get_connection(request.url, proxies)\n\n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n\n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n\n        if stream:\n            timeout = TimeoutSauce(connect=timeout)\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n\n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n\n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n\n                low_conn = conn._get_conn(timeout=timeout)\n\n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n\n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n\n                    low_conn.endheaders()\n\n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n\n                    r = low_conn.getresponse()\n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n                else:\n                    # All is well, return the connection to the pool.\n                    conn._put_conn(low_conn)\n\n        except socket.error as sockerr:\n            raise ConnectionError(sockerr)\n\n        except MaxRetryError as e:\n>           raise ConnectionError(e)\nE           ConnectionError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /load-data/ (Caused by <class 'socket.error'>: [Errno 111] Connection refused)\n\n/usr/lib/python2.7/dist-packages/requests/adapters.py:378: ConnectionError\n__________________________________________ test_model_predict __________________________________________\n\n    def test_model_predict():\n        '''@test_model_predict\n\n        This method tests the 'model_predict' session.\n\n        '''\n\n>       assert requests.post(\n            endpoint_url,\n            headers=headers,\n            data=get_sample_json('svr-model-predict.json', 'svr')\n        )\n\nmanual/programmatic_interface/file_upload/pytest_svr_file_upload.py:113:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/lib/python2.7/dist-packages/requests/api.py:88: in post\n    return request('post', url, data=data, **kwargs)\n/usr/lib/python2.7/dist-packages/requests/api.py:44: in request\n    return session.request(method=method, url=url, **kwargs)\n/usr/lib/python2.7/dist-packages/requests/sessions.py:455: in request\n    resp = self.send(prep, **send_kwargs)\n/usr/lib/python2.7/dist-packages/requests/sessions.py:558: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <requests.adapters.HTTPAdapter object at 0x7fe4706f3850>, request = <PreparedRequest [POST]>\nstream = False, timeout = <urllib3.util.Timeout object at 0x7fe4706f3410>, verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n\n            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n            :param stream: (optional) Whether to stream the request content.\n            :param timeout: (optional) The timeout on the request.\n            :param verify: (optional) Whether to verify SSL certificates.\n            :param cert: (optional) Any user-provided SSL certificate to be trusted.\n            :param proxies: (optional) The proxies dictionary to apply to the request.\n            \"\"\"\n\n        conn = self.get_connection(request.url, proxies)\n\n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request)\n\n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n\n        if stream:\n            timeout = TimeoutSauce(connect=timeout)\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n\n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n\n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n\n                low_conn = conn._get_conn(timeout=timeout)\n\n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n\n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n\n                    low_conn.endheaders()\n\n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n\n                    r = low_conn.getresponse()\n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n                else:\n                    # All is well, return the connection to the pool.\n                    conn._put_conn(low_conn)\n\n        except socket.error as sockerr:\n            raise ConnectionError(sockerr)\n\n        except MaxRetryError as e:\n>           raise ConnectionError(e)\nE           ConnectionError: HTTPConnectionPool(host='localhost', port=5000): Max retries exceeded with url: /load-data/ (Caused by <class 'socket.error'>: [Errno 111] Connection refused)\n\n/usr/lib/python2.7/dist-packages/requests/adapters.py:378: ConnectionError\n================================ 4 failed, 16 passed in 119.02 seconds =================================\nWhen the flask errors, it also kills the app.py process, which I verified by running netstat -ntlup:\nvagrant@vagrant-ubuntu-trusty-64:/vagrant/test$ netstat -ntlup\n(No info could be read for \"-p\": geteuid()=1000 but you should be root.)\nActive Internet connections (only servers)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name\ntcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN      -\ntcp        0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN      -\ntcp        0      0 0.0.0.0:55019           0.0.0.0:*               LISTEN      -\ntcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      -\ntcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      -\ntcp6       0      0 :::111                  :::*                    LISTEN      -\ntcp6       0      0 :::22                   :::*                    LISTEN      -\ntcp6       0      0 :::56952                :::*                    LISTEN      -\nudp        0      0 0.0.0.0:111             0.0.0.0:*                           -\nudp        0      0 0.0.0.0:40866           0.0.0.0:*                           -\nudp        0      0 0.0.0.0:679             0.0.0.0:*                           -\nudp        0      0 0.0.0.0:52672           0.0.0.0:*                           -\nudp        0      0 127.0.0.1:739           0.0.0.0:*                           -\nudp        0      0 0.0.0.0:68              0.0.0.0:*                           -\nudp6       0      0 :::111                  :::*                                -\nudp6       0      0 :::42109                :::*                                -\nudp6       0      0 :::679                  :::*                                -\nudp6       0      0 :::34032                :::*                                -\nNotice: there is no process running on the default port 5000.\nSo, I did some minor debugging, and found that my application never throttles 70.2% memory, of the 512MB virtualbox virtual machine. When the application finishes the series of requests.post, it returns to baseline measure:\nNote: top is always updating the processes in the terminal output, which is why I pasted two screenshots. Also, these screenshots are taken about 8 hours since I ran my last attempt of my manual unit tests, which killed app.py. So, app.py is not currently running.\nI haven't configured uwsgi, or gunicorn. I'm hoping if I configure gunicorn, it will create work processes, that can handle such requests.post against app.py more elegantly, to prevent app.py from exiting. But, I'm not sure if my problem is an internal flask bug, given my use case. Therefore, I'm not sure if gunicorn will solve my problem.\nThe database user which runs the application, is allowed unlimited connections, and queries. So, I don't know why my application stops running on the second iteration of the manual pytest's. Additionally, when my manual unit tests run, I make sure I empty the database tables, which will be operated on. Since, configure_database.py is the first file alphabetically closest to the start of the alphabet, it runs first. So, the database is always refreshed on each iteration, and the database user that performs the TRUNCATE operation on each of the database tables, has adequate permission. I did have another idea, since I was getting errors related to database cursor. Specifically, I thought that maybe my application was heavy on the database operations. And, for the first time, I checked my database api db_query.py, and realized that after each database transaction, including during connection, and disconnection, I write to a log file. I think after running my manual unit tests, I checked in the corresponding text log file, and it was already 301MB. This is just from writing to the logs for running the manual unit tests twice. So, I commented out all instances of writing to a logfile, in db_query.py, the API for all of my database queries, and my errors still persists.", "issue_status": "Closed", "issue_reporting_time": "2016-10-06T11:36:22Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "738": {"issue_url": "https://github.com/pallets/flask/issues/2048", "issue_id": "#2048", "issue_summary": "Binary file corrupted between the server and the client", "issue_description": "Gallaecio commented on 4 Oct 2016\nI am using Python 3 and the following code:\n@app.route('/')\ndef pdf():\n    # [Generate PDF as a byte string]\n    with open('file.pdf', 'wb') as f:\n        f.write(pdf)\n    return send_file(BytesIO(pdf))\nOn the server, a valid PDF file is written. On the client, I get an invalid PDF about twice the expected size.\nit looks like an encoding issue, so I am guessing that the fact that I am using Python 3 may be relevant. The differences between the file saved on the server and the one I get on the client is similar to that of this StackOverflow question, but the poster there was passing the PDF data as a string, whereas in my code pdf is made of bytes (Python 3 would not let me write the file otherwise).", "issue_status": "Closed", "issue_reporting_time": "2016-10-04T10:14:05Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "739": {"issue_url": "https://github.com/pallets/flask/issues/2045", "issue_id": "#2045", "issue_summary": "A: hello!Flask how to solve this problem", "issue_description": "467754239 commented on 30 Sep 2016\nhttp://denizeren.net/2014/07/14/flask-file-descriptor-inheritance-problem/", "issue_status": "Closed", "issue_reporting_time": "2016-09-30T02:52:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "740": {"issue_url": "https://github.com/pallets/flask/issues/2044", "issue_id": "#2044", "issue_summary": "MethodView requires settings \"methods\" attribute", "issue_description": "coltonlw commented on 29 Sep 2016 \u2022\nedited by ThiefMaster\nIn the example for MethodView, post() will not be called unless methods is set on the class or with add_url_rule\nhttps://github.com/pallets/flask/blob/master/flask/views.py#L123\nA fix might be having MethodView.methods set to a copy of http_method_funcs i.e. all available methods\nIf I am missing something here my apologies", "issue_status": "Closed", "issue_reporting_time": "2016-09-29T17:35:01Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "741": {"issue_url": "https://github.com/pallets/flask/issues/2043", "issue_id": "#2043", "issue_summary": "Assert should not be used outside of testing", "issue_description": "coltonlw commented on 29 Sep 2016 \u2022\nedited by ThiefMaster\nassert should not be used in production because assert statements are discarded if the program is compiled to bytecode with the PYTHONOPTIMIZE turned on\nhttps://github.com/pallets/flask/blob/master/flask/views.py#L148", "issue_status": "Closed", "issue_reporting_time": "2016-09-29T15:17:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "742": {"issue_url": "https://github.com/pallets/flask/issues/2042", "issue_id": "#2042", "issue_summary": "Question: Authenticating to a protected API call not working (GAE Flask connecting to ParseServer)", "issue_description": "SovcikJoe commented on 27 Sep 2016\nWhat I am trying to achieve is pretty simple.\nI want to use Flask to create a web app that connects to a remote Server via API calls (specifically ParseServer).\nI am using a third-party library to achieve this and everything works perfectly when I am running my code in a stand-alone script. But when I add my code into the Flask I suddenly can't authenticate with the Server.\nIt seems to me that in Flask, the registration method used by the APi library is not remembered.\nI tried many things of putting the registration and initialization code in different places in Flask, nothing worked.\nI asked a similar question in the Github of the Library with no help.\nSo I guess I have two questions that could help me solve this:\nWhere should I put a registration method and import of the files from this library?\n&\nWhat can I do to identify the issue specifically, eg. to know precisely what's wrong?\nHere's some code\nThe Flask code is here\n@app.route('/parseinsert')\ndef run_parse_db_insert():\n    \"\"\"The method for testing implementation and design of the Parse Db\n    \"\"\"\n    pc = ParseCommunication()\n    print(pc.get_all_names_rating_table())\n    return 'done'\nThe ParseCommunication is my Class that deals with Parse. If I run ParseCommunication from that script, with the same code as above in the main part, everything works perfectly.\nI run the Flask app with dev_appserver.py from Google App Engine.\nMy folder structure\n/parseTest\n/aplication\nviews.py\napp.yaml\nrun.py\nMy run.py code\nimport os\nimport sys\n\nsys.path.insert(1, os.path.join(os.path.abspath('.'), 'lib'))\nsys.path.insert(1, os.path.join(os.path.abspath('.'), 'application'))\n\nimport aplication", "issue_status": "Closed", "issue_reporting_time": "2016-09-27T17:42:17Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "743": {"issue_url": "https://github.com/pallets/flask/issues/2041", "issue_id": "#2041", "issue_summary": "Flask Extension that doesn't require user code changes", "issue_description": "shaicantor commented on 26 Sep 2016 \u2022\nedited by untitaker\nHi,\nCan a flask extension be installed using pip and run without user code changes at all?\nI want to write a flask extension that uses flask's before_request and after_request hooks.\nThe user will just need to pip install flask_<my_extension> and that's it.\nThanks in advance.", "issue_status": "Closed", "issue_reporting_time": "2016-09-26T08:23:44Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "744": {"issue_url": "https://github.com/pallets/flask/issues/2037", "issue_id": "#2037", "issue_summary": "do you have Extensions for VScode ?", "issue_description": "stfenjobs commented on 23 Sep 2016 \u2022\nedited\nhttps://marketplace.visualstudio.com/search?term=flask&target=VSCode&sortBy=Relevance\ni don't find it\ncan you help me ?\nmy friend", "issue_status": "Closed", "issue_reporting_time": "2016-09-23T16:04:02Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "745": {"issue_url": "https://github.com/pallets/flask/issues/2036", "issue_id": "#2036", "issue_summary": "Feature packt book in docs", "issue_description": "packtpartner commented on 23 Sep 2016\nHi,\nPackt is proud to publish a new book on Flask this year\nFlask By Example\nI would appreciate if you could fearure this book on http://flask.pocoo.org/ to help developers in their learning of Flask.\nLet me know what you think.\nMany thanks.", "issue_status": "Closed", "issue_reporting_time": "2016-09-23T07:16:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "746": {"issue_url": "https://github.com/pallets/flask/issues/2033", "issue_id": "#2033", "issue_summary": "failing test for safe_join in windows", "issue_description": "infinite-Joy commented on 21 Sep 2016\nThis seems like a bug on windows:\nTest run on windows gave me the following error\n> py.test tests\\test_helpers.py\n\u2190[1m============================= test session starts ==========================\n===\u2190[0m\nplatform win32 -- Python 2.7.10, pytest-3.0.2, py-1.4.31, pluggy-0.3.1\nrootdir: , inifile: setup.cfg\ncollected 42 items \u2190[0m\u2190[1m\n\u2190[0m\ntests\\test_helpers.py ........................................F.\n\n================================== FAILURES ===================================\n\u2190[1m\u2190[31m_________________________ TestSafeJoin.test_safe_join _________________\n________\u2190[0m\n\nself = <test_helpers.TestSafeJoin object at 0x02F3F790>\n\n\u2190[1m    def test_safe_join(self):\u2190[0m\n\u2190[1m        # Valid combinations of *args and expected joined paths.\u2190[0m\n\u2190[1m        passing = (\u2190[0m\n\u2190[1m            (('a/b/c', ), 'a/b/c'),\u2190[0m\n\u2190[1m            (('/', 'a/', 'b/', 'c/', ), '/a/b/c'),\u2190[0m\n\u2190[1m            (('a', 'b', 'c', ), 'a/b/c'),\u2190[0m\n\u2190[1m            (('/a', 'b/c', ), '/a/b/c'),\u2190[0m\n\u2190[1m            (('a/b', 'X/../c'), 'a/b/c', ),\u2190[0m\n\u2190[1m            (('/a/b', 'c/X/..'), '/a/b/c', ),\u2190[0m\n\u2190[1m            # If last path is '' add a slash\u2190[0m\n\u2190[1m            (('/a/b/c', '', ), '/a/b/c/', ),\u2190[0m\n\u2190[1m            # Preserve dot slash\u2190[0m\n\u2190[1m            (('/a/b/c', './', ), '/a/b/c/.', ),\u2190[0m\n\u2190[1m            (('a/b/c', 'X/..'), 'a/b/c/.', ),\u2190[0m\n\u2190[1m            # Base directory is always considered safe\u2190[0m\n\u2190[1m            (('../', 'a/b/c'), '../a/b/c'),\u2190[0m\n\u2190[1m            (('/..', ), '/..'),\u2190[0m\n\u2190[1m        )\u2190[0m\n\u2190[1m    \u2190[0m\n\u2190[1m        for args, expected in passing:\u2190[0m\n\u2190[1m>           assert flask.safe_join(*args) == expected\u2190[0m\n\u2190[1m\u2190[31mE           assert '/a\\\\b\\\\c' == '/a/b/c'\u2190[0m\n\u2190[1m\u2190[31mE             - /a\\\\b\\\\c\u2190[0m\n\u2190[1m\u2190[31mE             + /a/b/c\u2190[0m\n\n\u2190[1m\u2190[31mtests\\test_helpers.py\u2190[0m:803: AssertionError\n\u2190[1m\u2190[31m===================== 1 failed, 41 passed in 1.33 seconds =============\n========\u2190[0m\nIn windows the directories on an external location can be accessed using four back-slashes \"\\\\\" from python code. So I would suggest to return \"\\\\a\\b\\c\" if the env is windows. Of course this line of thinking can be na\u00efve and maybe there is a better approach there.", "issue_status": "Closed", "issue_reporting_time": "2016-09-21T09:41:07Z", "fixed_by": "#2284", "pull_request_summary": "safe_join on Windows uses posixpath", "pull_request_description": "Member\ndavidism commented on 16 May 2017\nPython on Windows supports mixed / and \\ separators, so this doesn't break anything. / is already assumed to be the safe separator anyway.\nfixes #2033, closes #2059", "pull_request_status": "Merged", "issue_fixed_time": "2017-05-16T00:11:35Z", "files_changed": [["22", "flask/helpers.py"], ["25", "tests/test_helpers.py"]]}, "747": {"issue_url": "https://github.com/pallets/flask/issues/2032", "issue_id": "#2032", "issue_summary": "time.sleep() swallow FLASH_DEBUG message", "issue_description": "kienpham2000 commented on 20 Sep 2016 \u2022\nedited\nIn the sample code below, Testing... never show if I have time.sleep(1) there. If I remove it, I can see the debug message. I'm on macOS 10.11.6, Flask==0.11.1, Python 3.5.2, running inside virtualenv==15.0.2\nfrom flask import Flask\nimport time\n\napp = Flask(__name__)\napp.DEBUG = True\n\n@app.cli.command()\ndef streaming():\n   app.logger.debug('Testing...')\n   time.sleep(1)", "issue_status": "Closed", "issue_reporting_time": "2016-09-20T17:45:55Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "748": {"issue_url": "https://github.com/pallets/flask/issues/2030", "issue_id": "#2030", "issue_summary": "Support same-site cookies", "issue_description": "jootuom commented on 20 Sep 2016\nThere's a new RFC for preventing CSRF by restricting cookies to same-site only (i.e. no 3rd party cookies).\nAt least Chrome seems to support it since the developer tools list it if you look at cookies.\nAdding support for it in Flask should be pretty simple. (Add an attribute to Set-Cookie when setting the session cookie and a configuration option to configure this.)\nSee:\nhttps://tools.ietf.org/html/draft-west-first-party-cookies-07\n4", "issue_status": "Closed", "issue_reporting_time": "2016-09-20T06:44:12Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "749": {"issue_url": "https://github.com/pallets/flask/issues/2029", "issue_id": "#2029", "issue_summary": "Zero-padded file modes in repository", "issue_description": "divad commented on 19 Sep 2016\nAfter cloning this repository with git and you run \"git fsck\" there are multiple errors:\nChecking object directories: 100% (256/256), done. warning in tree 0b404df8c030cdeaca7b373956c3a697efd32f78: contains zero-padded file modes warning in tree 51ea366fd4253b3a618289dc1c0c4bb16a3c2a22: contains zero-padded file modes warning in tree 679afdb340e9e1011927b52d2cd48bd221159131: contains zero-padded file modes warning in tree 77c7430020693d35500ca4fc292cff63fc3e672b: contains zero-padded file modes warning in tree 6a37da079f3bed362608b2558b162617c0c3af5c: contains zero-padded file modes Checking objects: 100% (12634/12634), done.\nThis prevents the repository from being push'ed to another git server, for example:\nCounting objects: 12435, done. Delta compression using up to 8 threads. Compressing objects: 100% (3696/3696), done. remote: error: object 0b404df8c030cdeaca7b373956c3a697efd32f78: zeroPaddedFilemode: contains zero-padded file modes remote: fatal: Error in object error: pack-objects died of signal 13\nI suggest the repository is rebuilt to correct the corruption in it.", "issue_status": "Closed", "issue_reporting_time": "2016-09-19T10:57:48Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "750": {"issue_url": "https://github.com/pallets/flask/issues/2027", "issue_id": "#2027", "issue_summary": "Update app factory docs for Flask's CLI", "issue_description": "Member\nuntitaker commented on 18 Sep 2016\nsee #1536", "issue_status": "Closed", "issue_reporting_time": "2016-09-18T12:17:46Z", "fixed_by": "#2490", "pull_request_summary": "Rewrite CLI errors and docs", "pull_request_description": "Member\ndavidism commented on 10 Oct 2017\nReword the CLI loader errors to use current examples and try to describe the issues more accurately. Refactor the loader code.\nEntirely rewrite the CLI docs. Wording is tightened up, sections are reorganized. Section about app detection quickly explains basics and shows typical values, then explains full rules.\ncloses #2027", "pull_request_status": "Merged", "issue_fixed_time": "2017-10-10T18:59:29Z", "files_changed": [["496", "docs/cli.rst"], ["3", "docs/installation.rst"], ["169", "flask/cli.py"], ["4", "tests/test_apps/cliapp/factory.py"], ["8", "tests/test_cli.py"]]}, "751": {"issue_url": "https://github.com/pallets/flask/issues/2023", "issue_id": "#2023", "issue_summary": "How should logging in Flask look like?", "issue_description": "Member\nuntitaker commented on 13 Sep 2016\nFlask started to ship with a default, hardcoded logging handler. Unfortunately this setup makes it harder to install custom logging setups, because then you'll have to undo all the things Flask did to the app logger, or replace the app.logger entirely. A symptom of this is #1993, where Flask's own logger had to be tweaked yet again such that messages didn't get logged twice (once via Flask's setup, once via the custom one).\nMy question is: Do we even want Flask to do any logging setup? It appears that this sort of default logging is only useful during development, so maybe it makes sense to set up a default logging handler in the new Flask CLI instead of from within the application.", "issue_status": "Closed", "issue_reporting_time": "2016-09-12T20:15:42Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "752": {"issue_url": "https://github.com/pallets/flask/issues/2020", "issue_id": "#2020", "issue_summary": "Default flask.cli commands are not override-able", "issue_description": "allanlei commented on 10 Sep 2016\nThe default commands run and shell cannot be overridden.\nUsing a custom command called shell, I expect the custom shell to override the builtin shell\n@app.cli.command('shell', short_help='My custom shell')\ndef shell():\n    pass\nBut running --help still produces flask.cli.shell's help\n> python -m flask\nUsage: python -m flask [OPTIONS] COMMAND [ARGS]...\n\n  This shell command acts as general utility script for Flask applications.\n\n  It loads the application configured (either through the FLASK_APP\n  environment variable) and then provides commands either provided by the\n  application or Flask itself.\n\n  The most useful commands are the \"run\" and \"shell\" command.\n\n  Example usage:\n\n    $ export FLASK_APP=hello\n    $ export FLASK_DEBUG=1\n    $ flask run\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  run    Runs a development server.\n  shell  Runs a shell in the app context.\nAnd running gives me flask.cli.shell's shell\n> python -m flask shell\n\nPython 3.5.2 (default, Jul 17 2016, 00:00:00) \n[GCC 4.8.4] on linux\nApp: wallet\nInstance: app/instance\n>>> \nAlso,\n@app.cli.command('shell_plus', short_help='bar')\ndef shell_plus_1():\n    pass\n\n@app.cli.command('shell_plus', short_help='foo')\ndef shell_plus_2():\n    pass\nhas the behaviour I expect\nUsage: python -m flask [OPTIONS] COMMAND [ARGS]...\n\n  This shell command acts as general utility script for Flask applications.\n\n  It loads the application configured (either through the FLASK_APP\n  environment variable) and then provides commands either provided by the\n  application or Flask itself.\n\n  The most useful commands are the \"run\" and \"shell\" command.\n\n  Example usage:\n\n    $ export FLASK_APP=hello\n    $ export FLASK_DEBUG=1\n    $ flask run\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  run         Runs a development server.\n  shell       Runs a shell in the app context.\n  shell_plus  foo", "issue_status": "Closed", "issue_reporting_time": "2016-09-10T03:04:02Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "753": {"issue_url": "https://github.com/pallets/flask/issues/2016", "issue_id": "#2016", "issue_summary": "request.args uncompatible with quote, which lead decode error", "issue_description": "eromoe commented on 9 Sep 2016 \u2022\nedited\nI think it is a bug.\nMy code:\nfrom __future__ import unicode_literals, absolute_import\nfrom flask import Blueprint, request, jsonify\nfrom flask_restful import Api, Resource\nfrom six.moves.urllib.parse import unquote\nfrom src.share import filemgr\n\napi = Blueprint('api', __name__, url_prefix='/api')\napi_wrap = Api(api)\n\n@api.route('/list', methods=['get'])\ndef list():\n    path = unquote(request.args.get('path', '/'))\n    only_folder = request.args.get('only_folder', False)\n    nodes = filemgr.list(path)\n    if only_folder:\n        nodes = filter(lambda x:x.isfolder, nodes)\n    return jsonify(nodes)\najax get:\nvar path = 'c - \u526f\u672c'\najax({\n  url: 'http://localhost:5000/api/list',\n  params: {\n    path: encodeURI(path)\n  }\n});\nBut get path decode incorrectly : u'c - \\xe5\\x89\\xaf\\xe6\\x9c\\xac'.\nIt should be 'c - \\xe5\\x89\\xaf\\xe6\\x9c\\xac' or u'c - \\u526f\\u672c''\nI debug into list() and found:\n>>> request.url\nu'http://localhost:5000/api/list?path=c%2520-%2520%25E5%2589%25AF%25E6%259C%25AC'\n\n>>> request.args.get('path', '/')\nu'c%20-%20%E5%89%AF%E6%9C%AC'\n\n>>> unquote(request.args.get('path', '/'))\nu'c - \\xe5\\x89\\xaf\\xe6\\x9c\\xac'\nHere the string can not be decode, the correct string is 'c - \\xe5\\x89\\xaf\\xe6\\x9c\\xac', without u prefix.\nDebug into request.args at Lib\\site-packages\\werkzeug\\wrappers.py\nin line 431\n@cached_property\ndef args(self):\n    \"\"\"The parsed URL parameters.  By default an\n    :class:`~werkzeug.datastructures.ImmutableMultiDict`\n    is returned from this function.  This can be changed by setting\n    :attr:`parameter_storage_class` to a different type.  This might\n    be necessary if the order of the form data is important.\n    \"\"\"\n    return url_decode(wsgi_get_bytes(self.environ.get('QUERY_STRING', '')),\n                      self.url_charset, errors=self.encoding_errors,\n                      cls=self.parameter_storage_class)\nI try some value:\n>>> wsgi_get_bytes(self.environ.get('QUERY_STRING', ''))\n'path=c%2520-%2520%25E5%2589%25AF%25E6%259C%25AC'\n\n>>> url_decode(wsgi_get_bytes(self.environ.get('QUERY_STRING', '')),\n                          self.url_charset, errors=self.encoding_errors,\n                          cls=self.parameter_storage_class)\nImmutableMultiDict([('path', u'c%20-%20%E5%89%AF%E6%9C%AC')])\n\n\n`url_decode` decode querystring into wrong.\nThe problem is url_decode, should not decode here, because the querystring maybe quote(like my situation)", "issue_status": "Closed", "issue_reporting_time": "2016-09-09T02:22:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "754": {"issue_url": "https://github.com/pallets/flask/issues/2012", "issue_id": "#2012", "issue_summary": "Permission to generate stubs for Flask in typeshed", "issue_description": "rowillia commented on 7 Sep 2016 \u2022\nedited by untitaker\nHowdy,\nI'd like to add stubs for Flask to https://github.com/python/typeshed, a repository used to store PEP 484 type signatures for the python stdlib and popular third party libraries. As per PEP 484, permission is required from the library owner before merging type signatures into typeshed - https://www.python.org/dev/peps/pep-0484/#the-typeshed-repo\nHere's the corresponding typeshed issue -\npython/typeshed#28", "issue_status": "Closed", "issue_reporting_time": "2016-09-07T18:26:02Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "755": {"issue_url": "https://github.com/pallets/flask/issues/2011", "issue_id": "#2011", "issue_summary": "Broken pipe", "issue_description": "awenhu commented on 7 Sep 2016\nmy code:\nfrom flask import Flask, make_response, request\napp = Flask(name)\n@app.route(\"/dtu//\", methods=[\"GET\",\"OPTIONS\"])\ndef dtu(dtuid, addr):\no = drawMultipleDtu(dtuid,addr)\nresp = make_response(o)\nresp.headers[\"Access-Control-Allow-Origin\"] = \"*\"\nresp.headers[\"Access-Control-Request-Method\"] = \"POST,GET,PUT,DELETE,OPTIONS\"\nresp.headers[\"Access-Control-Allow-Methods\"] = \"POST,GET,PUT,DELETE,OPTIONS\"\nresp.headers[\"Access-Control-Allow-Headers\"] = \"X-Requested-With,Content-Type\"\nif request.method == 'OPTIONS':\n    print \"it's OPTIONS\"\nreturn resp\napp.run(host=\"0.0.0.0\", port=5010)\nI always got this error:\nException happened during processing of request from ('192.168.44.1', 54412)\nTraceback (most recent call last):\nFile \"/mnt/ENTER/lib/python2.7/SocketServer.py\", line 290, in _handle_request_noblock\nself.process_request(request, client_address)\nFile \"/mnt/ENTER/lib/python2.7/SocketServer.py\", line 318, in process_request\nself.finish_request(request, client_address)\nFile \"/mnt/ENTER/lib/python2.7/SocketServer.py\", line 331, in finish_request\nself.RequestHandlerClass(request, client_address, self)\nFile \"/mnt/ENTER/lib/python2.7/SocketServer.py\", line 654, in init\nself.finish()\nFile \"/mnt/ENTER/lib/python2.7/SocketServer.py\", line 713, in finish\nself.wfile.close()\nFile \"/mnt/ENTER/lib/python2.7/socket.py\", line 283, in close\nself.flush()\nFile \"/mnt/ENTER/lib/python2.7/socket.py\", line 307, in flush\nself._sock.sendall(view[write_offset:write_offset+buffer_size])\nerror: [Errno 32] Broken pipe", "issue_status": "Closed", "issue_reporting_time": "2016-09-07T08:26:10Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "756": {"issue_url": "https://github.com/pallets/flask/issues/2009", "issue_id": "#2009", "issue_summary": "Document not updated after the removal of argument -a and --app", "issue_description": "nalzok commented on 7 Sep 2016 \u2022\nedited\nIn short, the documents(both the online one and the output of flask --help) is not fully updated after CLI interface is simplified. The -a/--app argument has been removed, but the document is somewhat misleading.\nThis issue comes from a SO post. Please read through the comments for more information.", "issue_status": "Closed", "issue_reporting_time": "2016-09-07T04:07:30Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "757": {"issue_url": "https://github.com/pallets/flask/issues/2008", "issue_id": "#2008", "issue_summary": "AttributeError: 'str' object has no attribute 'write' during unhandled exception logging", "issue_description": "Miserlou commented on 7 Sep 2016\nFlask + Zappa users are complaining about an error stemming from Flask's logging of exceptions.\nWe can reproduce this by generating an unhandled exception in a Flask application that breaks our handler's behavior, but which works for other frameworks (Django, Pyramid, etc.).\nIt looks like something in Flask is treating a string as if it were a stream, but I've been trying to disable all possible logging and I still see this error. I don't know what's happening. This is occurring with the Flask==0.11.1.\nHere is an example:\n[1473180521973] Traceback (most recent call last):\n[1473180521973] File \"/usr/lib64/python2.7/logging/init.py\", line 880, in emit\n[1473180521992] stream.write(fs % msg)\n[1473180521992] File \"/private/var/folders/00/vp4bg2md3ng4sqkg3hrz_j1003frjd/T/pip-build-RmqRtJ/Werkzeug/werkzeug/local.py\", line 343, in getattr\n[1473180521992] AttributeError: 'str' object has no attribute 'write'\n[1473180521992] Logged from file app.py, line 1587\n[1473180521992] [ERROR] 2016-09-06T16:48:41.973Z c29bebc5-7451-11e6-a6f9-bdc91c60ab58 Exception on /fail [GET]\nTraceback (most recent call last):\nFile \"/private/var/folders/00/vp4bg2md3ng4sqkg3hrz_j1003frjd/T/pip-build-KC9Xdu/flask/flask/app.py\", line 1988, in wsgi_app\nFile \"/private/var/folders/00/vp4bg2md3ng4sqkg3hrz_j1003frjd/T/pip-build-KC9Xdu/flask/flask/app.py\", line 1641, in full_dispatch_request\nFile \"/private/var/folders/00/vp4bg2md3ng4sqkg3hrz_j1003frjd/T/pip-build-KC9Xdu/flask/flask/app.py\", line 1544, in handle_user_exception\nFile \"/private/var/folders/00/vp4bg2md3ng4sqkg3hrz_j1003frjd/T/pip-build-KC9Xdu/flask/flask/app.py\", line 1639, in full_dispatch_request\nFile \"/private/var/folders/00/vp4bg2md3ng4sqkg3hrz_j1003frjd/T/pip-build-KC9Xdu/flask/flask/app.py\", line 1625, in dispatch_request\nFile \"/var/task/app.py\", line 22, in fail\nreturn 1/0\nZeroDivisionError: integer division or modulo by zero\nHere is an example using Pyramid instead, failing as expected:\nhttps://css89s7off.execute-api.us-east-1.amazonaws.com/dev/hello/asdf\nand the same error in Flask, failing with the stream writing error:\nhttps://pxzhirpoxd.execute-api.us-east-1.amazonaws.com/devor/fail\nI am not sure what exactly is happening, and nobody in our little community has been able to figure it out either. We use Werkzeug for some middleware functionality, but since the other frameworks use this same code, I don't think this is the issue, unless there is a specific interaction between Flask and WZ, which I don't think there is.\nSo, I have a few theories:\n* A log handler has been configured to write to a file by default. Since Lambda is (essentially) a read-only environment, this will fail.\n* Code written for Python 3 isn't properly working in Python 2.\n* Something related to this is happening: #1995\nDoes anybody have any ideas what might be happening here?\nRelated tickets and discussion:\nMiserlou/Zappa#283\nMiserlou/Zappa#302\n1", "issue_status": "Closed", "issue_reporting_time": "2016-09-06T19:42:55Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "758": {"issue_url": "https://github.com/pallets/flask/issues/2007", "issue_id": "#2007", "issue_summary": "Prevent setting `SERVER_NAME` and `SESSION_COOKIE_DOMAIN` to an IP address", "issue_description": "Member\nuntitaker commented on 6 Sep 2016\nSee #1946 and #1906. I think we should prevent setting those things to IP addresses in the first place and only allow None and domain names != localhost.", "issue_status": "Closed", "issue_reporting_time": "2016-09-06T12:39:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "759": {"issue_url": "https://github.com/pallets/flask/issues/2005", "issue_id": "#2005", "issue_summary": "AttributeError: 'DispatchingApp' object has no attribute 'config'", "issue_description": "laerus commented on 6 Sep 2016\ngoing through the tutorial on latest master, this exception is raised on flask run\n(running inside a virtualenv)\n>>> flask --version\nFlask 0.11.2-dev\nPython 3.5.2+ (default, Aug  5 2016, 08:07:14) \n[GCC 6.1.1 20160724]\n>>> which -v flask\n/home/laerus/.venvs/flask/bin/flask (from PATH element 0)\n>>> flask run\n * Serving Flask app \"flaskr\"\n * Forcing debug mode off\nTraceback (most recent call last):\n  File \"/home/laerus/.venvs/flask/bin/flask\", line 9, in <module>\n    load_entry_point('Flask==0.11.2.dev0', 'console_scripts', 'flask')()\n  File \"/home/laerus/.venvs/flask/lib/python3.5/site-packages/flask/cli.py\", line 508, in main\n    cli.main(args=args, prog_name=name)\n  File \"/home/laerus/.venvs/flask/lib/python3.5/site-packages/flask/cli.py\", line 374, in main\n    return AppGroup.main(self, *args, **kwargs)\n  File \"/home/laerus/.venvs/flask/lib/python3.5/site-packages/click/core.py\", line 696, in main\n    rv = self.invoke(ctx)\n  File \"/home/laerus/.venvs/flask/lib/python3.5/site-packages/click/core.py\", line 1060, in invoke\n    return _process_result(sub_ctx.command.invoke(sub_ctx))\n  File \"/home/laerus/.venvs/flask/lib/python3.5/site-packages/click/core.py\", line 889, in invoke\n    return ctx.invoke(self.callback, **ctx.params)\n  File \"/home/laerus/.venvs/flask/lib/python3.5/site-packages/click/core.py\", line 534, in invoke\n    return callback(*args, **kwargs)\n  File \"/home/laerus/.venvs/flask/lib/python3.5/site-packages/click/decorators.py\", line 64, in new_func\n    return ctx.invoke(f, obj, *args[1:], **kwargs)\n  File \"/home/laerus/.venvs/flask/lib/python3.5/site-packages/click/core.py\", line 534, in invoke\n    return callback(*args, **kwargs)\n  File \"/home/laerus/.venvs/flask/lib/python3.5/site-packages/flask/cli.py\", line 433, in run_command\n    passthrough_errors=app.config['PROPAGATE_EXCEPTIONS'])\nAttributeError: 'DispatchingApp' object has no attribute 'config'", "issue_status": "Closed", "issue_reporting_time": "2016-09-06T11:53:13Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "760": {"issue_url": "https://github.com/pallets/flask/issues/1999", "issue_id": "#1999", "issue_summary": "Proposal : splitting the config logic into a different package.", "issue_description": "asmodehn commented on 31 Aug 2016\nThe config logic of flask is potentially useful for any other long running python server software.\nI extracted it, extended is and started using it for my own projects : https://github.com/asmodehn/pyros-config.\nIt would be good if there was a dedicated (pallets) project for that part, not only in flask, so other could collaborate on it.\nThoughts ?\n1", "issue_status": "Closed", "issue_reporting_time": "2016-08-31T06:56:44Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "761": {"issue_url": "https://github.com/pallets/flask/issues/1997", "issue_id": "#1997", "issue_summary": "gunicorn and flask to work together...", "issue_description": "mastrauckas commented on 27 Aug 2016\nI have a def that looks like this\n@app.route(\"/\")\ndef index():\n    return render_template('main.html')\nWhen trying to call this def I get\nTypeError: index() takes 0 positional arguments but 2 were given\nMost examples I've found doesn't pass any parameters into the def so I'm not sue why I have too? How can I go about using my def without passing in parameters?\nSo for whatever reason I have to pass in 2 arguments for gunicorn so I change my code to look like this:\n@app.route(\"/\")\ndef index(arg1, arg2):\n    return render_template('main.html')\nAfter passing in 2 parameters I get:\n/python3.4/site-packages/flask/templating.py\", line 132, in render_template\n    ctx.app.update_template_context(context)\n\nAttributeError: 'NoneType' object has no attribute 'app'\nIt appears by using gunicorn it doesn't appear it's setting up the correct context to use templates. How would I go about setting up the 'app` context?", "issue_status": "Closed", "issue_reporting_time": "2016-08-27T17:48:06Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "762": {"issue_url": "https://github.com/pallets/flask/issues/1995", "issue_id": "#1995", "issue_summary": "No response and No exception traceback when render_template failed and DEBUG=True", "issue_description": "guyskk commented on 27 Aug 2016 \u2022\nedited\nHere is the code:\napp.py\nfrom flask import Flask, render_template\n\napp = Flask(__name__)\napp.config['DEBUG'] = True\n\n@app.route('/')\ndef index():\n    return render_template('unknown')\n\nif __name__ == '__main__':\n    from werkzeug.serving import run_simple\n    run_simple('127.0.0.1', 5000, app)\nRun it by\npython app.py\nor\nexport FLASK_APP=app.py \nflask run\nthen visit http://127.0.0.1:5000 will see ERR_EMPTY_RESPONSE in browser and nothing in console.", "issue_status": "Closed", "issue_reporting_time": "2016-08-27T06:14:30Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "763": {"issue_url": "https://github.com/pallets/flask/issues/1994", "issue_id": "#1994", "issue_summary": "dictsort filter fails on nested_dict typed list", "issue_description": "smile4steve commented on 27 Aug 2016 \u2022\nedited by davidism\nI have a nested_dict that I want to use the dictsort filter on. The template works without dictsort, and the filter works on regular dicts. However, it fails with the following error when using dictsort with a nested_dict.\nUndefinedError: nested_dict.implementation.nested_dict object has no element ('5.008008', defaultdict(<class 'nested_dict.implementation.nested_dict'>, {'full': 'perl-5.8.8', 'tiny': '5.8.8'}))\n{% for perl_number in perl_num2ver|dictsort %}\n    <th>{{ perl_num2ver[perl_number]['tiny'] }}</th>  \n{% endfor %}\nreturn render_template('pivot_table.html', perl_num2ver=perl_num2ver())\nThe method creating the nested_dict object:\nfrom nested_dict import nested_dict\n\ndef perl_num2ver():\n    cfg = nested_dict()  # so we can do hash of hash, dict of dict\n    cfg['5.020003'][ 'full' ] = 'perl-5.20.3'\n    # etc.\n    return cfg\nclick==6.6\nFlask==0.11.1\nitsdangerous==0.24\nJinja2==2.8\nMarkupSafe==0.23\npydumper==1.0.1\npymongo==3.3.0\nWerkzeug==0.11.10", "issue_status": "Closed", "issue_reporting_time": "2016-08-26T20:53:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "764": {"issue_url": "https://github.com/pallets/flask/issues/1992", "issue_id": "#1992", "issue_summary": "access app.config via dot", "issue_description": "qingyunha commented on 22 Aug 2016\nHow about implementing __getattr__ and __setattr__ for flask.config.Config to support dot access?\ninstead of writing app.config[\"DATABASE\"], I'd like to write app.config.DATABASE\n1", "issue_status": "Closed", "issue_reporting_time": "2016-08-22T11:54:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "765": {"issue_url": "https://github.com/pallets/flask/issues/1991", "issue_id": "#1991", "issue_summary": "ExtDeprecationWarning pymongo", "issue_description": "alirezaimi commented on 22 Aug 2016 \u2022\nedited\n/usr/local/lib/python3.5/dist-packages/flask/exthook.py:71: ExtDeprecationWarning: Importing flask.ext.pymongo is deprecated, use flask_pymongo instead.\n# pip3 show flask\n\n---\nMetadata-Version: 2.0\nName: Flask\nVersion: 0.11.1\nSummary: A microframework based on Werkzeug, Jinja2 and good intentions\nHome-page: http://github.com/pallets/flask/\nAuthor: Armin Ronacher\nAuthor-email: armin.ronacher@active-4.com\nInstaller: pip\nLicense: BSD\nLocation: /usr/local/lib/python3.5/dist-packages\nRequires: click, Werkzeug, itsdangerous, Jinja2\nClassifiers:\n  Development Status :: 4 - Beta\n  Environment :: Web Environment\n  Intended Audience :: Developers\n  License :: OSI Approved :: BSD License\n  Operating System :: OS Independent\n  Programming Language :: Python\n  Programming Language :: Python :: 2\n  Programming Language :: Python :: 2.6\n  Programming Language :: Python :: 2.7\n  Programming Language :: Python :: 3\n  Programming Language :: Python :: 3.3\n  Programming Language :: Python :: 3.4\n  Programming Language :: Python :: 3.5\n  Topic :: Internet :: WWW/HTTP :: Dynamic Content\n  Topic :: Software Development :: Libraries :: Python Modules\nEntry-points:\n  [console_scripts]\n  flask=flask.cli:main\n# apt-cache policy python3\npython3:\n  Installed: 3.5.1-4\n  Candidate: 3.5.1-4\n  Version table:\n *** 3.5.1-4 500\n        500 http://ftp.debian.org/debian testing/main amd64 Packages", "issue_status": "Closed", "issue_reporting_time": "2016-08-22T11:34:11Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "766": {"issue_url": "https://github.com/pallets/flask/issues/1989", "issue_id": "#1989", "issue_summary": "Disable OS-level autocorrect in the interactive debugger", "issue_description": "Contributor\nalexwlchan commented on 22 Aug 2016 \u2022\nedited by ThiefMaster\nIf you\u2019re using the interactive debugger in the web browser, and autocorrect is feeling aggressive, it can kick in and try to \u201cfix\u201d the Python commands you\u2019re typing. This is annoying for the end-user, and rarely helpful as autocorrect doesn\u2019t know about Python. More than once this has bitten me, causing me to write invalid Python, or for variable names to change case mid-command.\nI don\u2019t have time to create a patch now, but I think the fix is just adding the following attribute to the <input> tag where you type commands:\nautocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"\nThis probably isn\u2019t really Flask\u2019s fault \u2013 the OS is what actually makes the unhelpful autocorrections \u2013 but it seems like something Flask should be able to fix.\nI spotted this on the developer builds of OS X Sierra, where autocorrect seems noticeably keener (especially in <input> fields) than older versions.\nPython 3.5.0\nFlask 0.11.1\nWerkzeug 0.11.10\n1", "issue_status": "Closed", "issue_reporting_time": "2016-08-22T07:51:21Z", "fixed_by": "pallets/werkzeug#994", "pull_request_summary": "Added 'import os' statement", "pull_request_description": "Contributor\nroskoff commented on 5 Mar 2014\nAdded 'import os' statement so you can use os.path.join() when defining DATABASE location", "pull_request_status": "Merged", "issue_fixed_time": "2014-03-13T18:25:34Z", "files_changed": [["1", "docs/tutorial/setup.rst"]]}, "767": {"issue_url": "https://github.com/pallets/flask/issues/1986", "issue_id": "#1986", "issue_summary": "Setting items on `response.header` with bytestrings results in new headers in Python 3", "issue_description": "jameshiew commented on 20 Aug 2016\nMinimal example below\n# coding=utf8\nfrom flask import Flask, Response\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    response = Response(\"!!!\")\n    response.headers[b'Server'] = 'Flask'\n    return response\nIn Python 2.7.12, the resulting response has a HTTP header of Server: Flask. In Python 3.5.2, the resulting response has HTTP headers of Server: Werkzeug/0.11.10 Python/3.5.2 and b'Server': Flask. Python 2 has the expected behavior.\nTesting from within a Python 3 venv, pip freeze output is:\nclick==6.6\nFlask==0.11.1\nitsdangerous==0.24\nJinja2==2.8\nMarkupSafe==0.23\nWerkzeug==0.11.10", "issue_status": "Closed", "issue_reporting_time": "2016-08-19T22:56:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "768": {"issue_url": "https://github.com/pallets/flask/issues/1983", "issue_id": "#1983", "issue_summary": "Session no longer being marked as \"modified\" in some situations", "issue_description": "stevelittlefish commented on 15 Aug 2016 \u2022\nedited\nI have some code that basically does:\nself.data = session['cart']\nand then later:\nself.data['some-key'] = 'some-value'\nThis always used to update the session, but now it doesn't. If I change my code to be as follows:\nself.data['some-key'] = 'some-value'\nsession.modified = True\nIt suddenly works again.", "issue_status": "Closed", "issue_reporting_time": "2016-08-15T14:05:41Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "769": {"issue_url": "https://github.com/pallets/flask/issues/1982", "issue_id": "#1982", "issue_summary": "examples/flaskr test error", "issue_description": "janreyho commented on 12 Aug 2016\nimport os\nimport flaskr\nimport unittest\nimport tempfile\n\nclass FlaskrTestCase(unittest.TestCase):\n\n    def setUp(self):\n        self.db_fd, flaskr.app.config['DATABASE'] = tempfile.mkstemp()\n        flaskr.app.config['TESTING'] = True\n        self.app = flaskr.app.test_client()\n        with flaskr.app.app_context():\n            flaskr.init_db()\n\n    def tearDown(self):\n        os.close(self.db_fd)\n        os.unlink(flaskr.app.config['DATABASE'])\n\n    def test_empty_db(self):\n        rv = self.app.get('/')\n        assert b'No entries here so far' in rv.data\nif __name__ == '__main__':\n    unittest.main()\n(flask) \u279c flask-demo git:(master) \u2717 python tests/flaskr_tests.py\nERROR: test_empty_db (main.FlaskrTestCase)\nTraceback (most recent call last):\nFile \"tests/flaskr_tests.py\", line 9, in setUp\nself.db_fd, flaskr.app.config['DATABASE'] = tempfile.mkstemp()\nAttributeError: 'module' object has no attribute 'app'\nRan 1 test in 0.004s\nFAILED (errors=1)", "issue_status": "Closed", "issue_reporting_time": "2016-08-12T06:42:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "770": {"issue_url": "https://github.com/pallets/flask/issues/1980", "issue_id": "#1980", "issue_summary": "\"Larger Applications\" docs don't play nicely with flask run", "issue_description": "aaronkavlie-wf commented on 9 Aug 2016\nThe Larger Applications docs recommend creating a runserver.py as follows:\nfrom yourapplication import app\napp.run(debug=True)\nThis runs counter to the advice in the Development Server doc for working with the flask run command \u2014 the app.run() call should be under if __name__ == '__main__'.\nThat makes it work properly, anyway. But when using flask run, the runserver.py file can be removed altogether.", "issue_status": "Closed", "issue_reporting_time": "2016-08-09T17:51:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "771": {"issue_url": "https://github.com/pallets/flask/issues/1979", "issue_id": "#1979", "issue_summary": "flask run does not respect debug config in config files", "issue_description": "abendebury commented on 9 Aug 2016\nTo reproduce:\nhttps://github.com/PlasmaSheep/flask-bug\nClone repo and install flask (python2)\nexport FLASK_APP=/path/to/repo/flask-bug/autoapp.py \nflask run\nNotice the output:\n[$]>>> flask run\nUsing config: development\nDebug is: True\n * Serving Flask app \"autoapp\"\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\nSo debug is enabled in the config, but the debugger is not actually active.\nThis does work if you set the FLASK_DEBUG env variable:\n[$]>>>  flask run\n * Serving Flask app \"autoapp\"\n * Forcing debug mode on\nUsing config: development\nDebug is: True\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n * Restarting with stat\nUsing config: development\nDebug is: True\n * Debugger is active!\n * Debugger pin code: 155-859-497\nHowever I think that the debug parameter should be specified in only one place, and that place should be the application config file so that you don't have to worry about setting environment variables for things you already specified in the config.\n7", "issue_status": "Closed", "issue_reporting_time": "2016-08-08T19:04:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "772": {"issue_url": "https://github.com/pallets/flask/issues/1978", "issue_id": "#1978", "issue_summary": "docs: sqlalchemy pattern document has an invalid import", "issue_description": "sc68cal commented on 4 Aug 2016\nThe declarative section includes the following example:\nDeclarative\n-----------\n\nThe declarative extension in SQLAlchemy is the most recent method of using\nSQLAlchemy.  It allows you to define tables and models in one go, similar\nto how Django works.  In addition to the following text I recommend the\nofficial documentation on the `declarative`_ extension.\n\nHere's the example :file:`database.py` module for your application::\n\n    from sqlalchemy import create_engine\n    from sqlalchemy.orm import scoped_session, sessionmaker\n    from sqlalchemy.ext.declarative import declarative_base\n\n    engine = create_engine('sqlite:////tmp/test.db', convert_unicode=True)\n    db_session = scoped_session(sessionmaker(autocommit=False,\n                                             autoflush=False,\n                                             bind=engine))\ndb_session is a variable, and a paragraph below, it tries to import it. Which isn't really possible.\n    from yourapplication.database import db_session\n\n    @app.teardown_appcontext\n    def shutdown_session(exception=None):\n        db_session.remove()\nThis documentation is misleading", "issue_status": "Closed", "issue_reporting_time": "2016-08-04T13:37:53Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "773": {"issue_url": "https://github.com/pallets/flask/issues/1975", "issue_id": "#1975", "issue_summary": "Examples in uWSGI docs are not using the same socket.", "issue_description": "Contributor\nOrangeTux commented on 3 Aug 2016\nFrom this page\nuWSGI is started with a socket at /tmp/uwsgi.sock and the Nginx config points to /tmp/application.sock. Both example should point to the same socket, I'd suggest /tmp/application.sock.", "issue_status": "Closed", "issue_reporting_time": "2016-08-03T07:54:25Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "774": {"issue_url": "https://github.com/pallets/flask/issues/1974", "issue_id": "#1974", "issue_summary": "POST to Flask has size limit, and provokes \"BrokenPipeError: [Errno 32] Broken pipe\" whenever no request.data is called", "issue_description": "Kieleth commented on 3 Aug 2016 \u2022\nedited by ThiefMaster\nHi!\n``\nWe've experienced an interesting issue:\nFlask:\n#post_flask.py\nfrom flask import (Flask, request)\napp = Flask(__name__)\napp.config['MAX_CONTENT_LENGTH'] = 1600 * 1024 * 1024\n\n@app.route('/pepe_post', methods=['POST'])\ndef post_pepe():\n    print('Hey!!!')\n    if request.method == 'POST':\n        #print(len(request.data))  #<< Uncomment to fix!!!\n        return 'hoho'\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5555, debug=True)\nClient:\n#do_post.py\nimport requests\n\ndef post(url, payload=None):\n    \"\"\" Handles POST http requests having an url and some optional payload \"\"\"\n    print(\"POST against url: '%s'\", url)\n    print(\"POST payload size: '%s'\", len(payload))\n    resp = requests.post(url, data=payload, headers={'content-type':'application/json'})\n    print(\"POST response: '%s'\", resp.text)\n    if resp.status_code != requests.codes.ok:\n        print('Service Response indicates error: %s/%s',\n                        resp.status_code, resp.content)\n        resp.raise_for_status()\n\nif __name__ == '__main__':\n    url = 'http://localhost:5555/pepe_post'\n    n = 1\n    while True:\n        print('post with payload of %s' % n)\n        payload = n * 1024 * 'a'   # << this breaks avobe 690K payloads\n        #payload = n * 1024 * 1024 * 'a'   # << this breaks inmediately\n        post(url, payload)\n        n += 1\nMeaning, above ~690K posts, you get:\npost with payload of 696\nPOST against url: '%s' http://localhost:5555/pepe_post\nPOST payload size: '%s' 712704\nTraceback (most recent call last):\n  File \"/Users/lguzman/workspace/anaconda/anaconda3/envs/opportunity/lib/python3.4/site-packages/requests/packages/urllib3/connectionpool.py\", line 559, in urlopen\n    body=body, headers=headers)\n  File \"/Users/lguzman/workspace/anaconda/anaconda3/envs/opportunity/lib/python3.4/site-packages/requests/packages/urllib3/connectionpool.py\", line 353, in _make_request\n    conn.request(method, url, **httplib_request_kw)\n  File \"/Users/lguzman/workspace/anaconda/anaconda3/envs/opportunity/lib/python3.4/http/client.py\", line 1137, in request\n    self._send_request(method, url, body, headers)\n  File \"/Users/lguzman/workspace/anaconda/anaconda3/envs/opportunity/lib/python3.4/http/client.py\", line 1182, in _send_request\n    self.endheaders(body)\n  File \"/Users/lguzman/workspace/anaconda/anaconda3/envs/opportunity/lib/python3.4/http/client.py\", line 1133, in endheaders\n    self._send_output(message_body)\n  File \"/Users/lguzman/workspace/anaconda/anaconda3/envs/opportunity/lib/python3.4/http/client.py\", line 967, in _send_output\n    self.send(message_body)\n  File \"/Users/lguzman/workspace/anaconda/anaconda3/envs/opportunity/lib/python3.4/http/client.py\", line 929, in send\n    self.sock.sendall(data)\nBrokenPipeError: [Errno 32] Broken pipe\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/Users/lguzman/workspace/anaconda/anaconda3/envs/opportunity/lib/python3.4/site-packages/requests/adapters.py\", line 376, in send\n    timeout=timeout\n  File \"/Users/lguzman/workspace/anaconda/anaconda3/envs/opportunity/lib/python3.4/site-packages/requests/packages/urllib3/connectionpool.py\", line 609, in urlopen\n    _stacktrace=sys.exc_info()[2])\n  File \"/Users/lguzman/workspace/anaconda/anaconda3/envs/opportunity/lib/python3.4/site-packages/requests/packages/urllib3/util/retry.py\", line 247, in increment\n    raise six.reraise(type(error), error, _stacktrace)\n  File \"/Users/lguzman/workspace/anaconda/anaconda3/envs/opportunity/lib/python3.4/site-packages/requests/packages/urllib3/packages/six.py\", line 309, in reraise\n    raise value.with_traceback(tb)\n  File \"/Users/lguzman/workspace/anaconda/anaconda3/envs/opportunity/lib/python3.4/site-packages/requests/packages/urllib3/connectionpool.py\", line 559, in urlopen\n    body=body, headers=headers)\n  File \"/Users/lguzman/workspace/anaconda/anaconda3/envs/opportunity/lib/python3.4/site-packages/requests/packages/urllib3/connectionpool.py\", line 353, in _make_request\n    conn.request(method, url, **httplib_request_kw)\n  File \"/Users/lguzman/workspace/anaconda/anaconda3/envs/opportunity/lib/python3.4/http/client.py\", line 1137, in request\n    self._send_request(method, url, body, headers)\n  File \"/Users/lguzman/workspace/anaconda/anaconda3/envs/opportunity/lib/python3.4/http/client.py\", line 1182, in _send_request\n    self.endheaders(body)\n  File \"/Users/lguzman/workspace/anaconda/anaconda3/envs/opportunity/lib/python3.4/http/client.py\", line 1133, in endheaders\n    self._send_output(message_body)\n  File \"/Users/lguzman/workspace/anaconda/anaconda3/envs/opportunity/lib/python3.4/http/client.py\", line 967, in _send_output\n    self.send(message_body)\n  File \"/Users/lguzman/workspace/anaconda/anaconda3/envs/opportunity/lib/python3.4/http/client.py\", line 929, in send\n    self.sock.sendall(data)\nrequests.packages.urllib3.exceptions.ProtocolError: ('Connection aborted.', BrokenPipeError(32, 'Broken pipe'))\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"do_post.py\", line 21, in <module>\n    post(url, payload)\n  File \"do_post.py\", line 7, in post\n    resp = requests.post(url, data=payload, headers={'content-type':'application/json'})\n  File \"/Users/lguzman/workspace/anaconda/anaconda3/envs/opportunity/lib/python3.4/site-packages/requests/api.py\", line 107, in post\n    return request('post', url, data=data, json=json, **kwargs)\n  File \"/Users/lguzman/workspace/anaconda/anaconda3/envs/opportunity/lib/python3.4/site-packages/requests/api.py\", line 53, in request\n    return session.request(method=method, url=url, **kwargs)\n  File \"/Users/lguzman/workspace/anaconda/anaconda3/envs/opportunity/lib/python3.4/site-packages/requests/sessions.py\", line 468, in request\n    resp = self.send(prep, **send_kwargs)\n  File \"/Users/lguzman/workspace/anaconda/anaconda3/envs/opportunity/lib/python3.4/site-packages/requests/sessions.py\", line 576, in send\n    r = adapter.send(request, **kwargs)\n  File \"/Users/lguzman/workspace/anaconda/anaconda3/envs/opportunity/lib/python3.4/site-packages/requests/adapters.py\", line 426, in send\n    raise ConnectionError(err, request=request)\nrequests.exceptions.ConnectionError: ('Connection aborted.', BrokenPipeError(32, 'Broken pipe'))\nCan someone give us some information about this? is this by design? bug?\nVersion:\nFlask==0.10.1\nThanks!", "issue_status": "Closed", "issue_reporting_time": "2016-08-03T00:43:57Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "775": {"issue_url": "https://github.com/pallets/flask/issues/1972", "issue_id": "#1972", "issue_summary": "%-encoded / gets included in wrong <path:...> parameter", "issue_description": "mavjop commented on 2 Aug 2016 \u2022\nedited by untitaker\nProblem description:\nIn a URL with two path:... type arguments (both need to accept URL-path-encoded data) next to each other, a %2F (encoded /) gets included in the wrong parameter.\nVersions:\nPython 2.7.11\nFlask 0.11\nWerkzeug 0.11.10\nRequest URL:\nhttp://localhost:5000/api/v1/entry/foo.com/%2Fbar%2Fbaz/block/12345/get\nResult:\n{\"this_is_a_test\": \"XXX this is test code, not a real thing\", \"path\": \"bar/baz\", \"name\": \"foo.com/\"}\nThat is:\nname: foo.com/\npath: bar/baz\nExpected Result:\n{\"this_is_a_test\": \"XXX this is test code, not a real thing\", \"path\": \"/bar/baz\", \"name\": \"foo.com\"}\nThat is:\nname: foo.com\npath: /bar/baz\nThe code:\n# The special modifier \"path\" as in \"<path:somevariablename>\" means\n# \"somevariablename\" may be URL path encoded data.\n@app.route('/api/v1/entry/<path:name>/get')\n@app.route('/api/v1/entry/<path:name>/<path:path>/get')\ndef get_entry(name, path=None, methods=['GET']):\n    name = urllib.unquote(name)\n\n    if path is not None:\n        path = urllib.unquote(path)\n\n    return json.dumps({\n        'this_is_a_test': 'XXX this is test code, not a real thing',\n        'name': name,\n        'path': path,\n    })", "issue_status": "Closed", "issue_reporting_time": "2016-08-01T20:15:06Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "776": {"issue_url": "https://github.com/pallets/flask/issues/1971", "issue_id": "#1971", "issue_summary": "Implement RFC 7233", "issue_description": "Contributor\nmagne4000 commented on 1 Aug 2016\nIt would be great to support RFC 7233 : Hypertext Transfer Protocol (HTTP/1.1): Range Requests for next major version, at least for non multipart/byteranges media type.\nI'm willing to implement this, so please share your thoughts about this.\nWhat must be done:\nModify send_file method to support Range Requests\nUse existing conditionnal parameter to enable Range Requests support ?", "issue_status": "Closed", "issue_reporting_time": "2016-08-01T16:17:51Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "777": {"issue_url": "https://github.com/pallets/flask/issues/1970", "issue_id": "#1970", "issue_summary": "FLASK_APP variable isn't behaving as specified.", "issue_description": "noahcgreen commented on 31 Jul 2016\nThe docs on the FLASK_APP variable state that\nIn that imported file the name of the app needs to be called app or optionally be specified after a colon. For instance mymodule:application would tell it to use the application object in the mymodule.py file.\nHowever, creating the following script (run.py):\nfrom flask import Flask\n\nwebapp = Flask(__name__)\nsetting FLASK_APP=run.py:webapp, and running flask run gives me an ImportError:\nTraceback (most recent call last):\n  File \"/Users/me/app/venv/lib/python3.5/site-packages/flask/cli.py\", line 156, in __call__\n    self._flush_bg_loading_exception()\n  File \"/Users/me/app/venv/lib/python3.5/site-packages/flask/cli.py\", line 144, in _flush_bg_loading_exception\n    reraise(*exc_info)\n  File \"/Users/me/app/venv/lib/python3.5/site-packages/flask/_compat.py\", line 33, in reraise\n    raise value\n  File \"/Users/me/app/venv/lib/python3.5/site-packages/flask/cli.py\", line 133, in _load_app\n    self._load_unlocked()\n  File \"/Users/me/app/venv/lib/python3.5/site-packages/flask/cli.py\", line 148, in _load_unlocked\n    self._app = rv = self.loader()\n  File \"/Users/me/app/venv/lib/python3.5/site-packages/flask/cli.py\", line 209, in load_app\n    rv = locate_app(self.app_import_path)\n  File \"/Users/me/app/venv/lib/python3.5/site-packages/flask/cli.py\", line 89, in locate_app\n    __import__(module)\nImportError: No module named 'run'\nInterestingly, using FLASK_APP=run.py actually works even with the app named \"webapp\". So while I'm not sure how much of this is error on my part vs. error on flask's, the docs are wrong in saying that the Flask object needs to be named \"app\".", "issue_status": "Closed", "issue_reporting_time": "2016-07-31T03:10:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "778": {"issue_url": "https://github.com/pallets/flask/issues/1969", "issue_id": "#1969", "issue_summary": "Yield don't work on Chrome", "issue_description": "rafaelcapucho commented on 30 Jul 2016\nThe following view only generate output during the execution on Firefox.\nOn Chrome the request flush the entire response once, when the while ends, at the end.\nWhat are making the it don't work on Chrome?\n@processes.route('/read_buffer/<int:pid>')\ndef read_buffer(pid):\n\n    def generate():\n        sent = 0\n        while not settings.buffers[pid]['finished']:\n            for i, row in enumerate(settings.buffers[pid]['lines'][sent:]):\n                sent += 1\n                yield row\n\n            gevent.sleep(0.5)\n\n    return flask.Response(\n        response=generate(),\n        status=200,\n        mimetype=\"text/plain\"\n    )\nApp config:\napp = flask.Flask(__name__)\napp.config['DEBUG'] = False\napp.register_blueprint(processes.processes, url_prefix='/processes')\nCORS(app)\nsocketio = SocketIO(app, async_mode='gevent')\nsocketio.run(\n    app=app,\n    host=_config.get('server', 'host', fallback='0.0.0.0'),\n    port=_config.getint('server', 'port', fallback=5000),\n    use_reloader=False\n)\nThank you", "issue_status": "Closed", "issue_reporting_time": "2016-07-29T23:32:28Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "779": {"issue_url": "https://github.com/pallets/flask/issues/1968", "issue_id": "#1968", "issue_summary": "from flask import current_app appears to have side effects", "issue_description": "abendebury commented on 29 Jul 2016 \u2022\nedited\nI have been trying to document my project with sphinx, but it seems that when sphinx reads a file that contains import current_app it breaks with the following message:\n[$]>>> make html\nsphinx-build -b html -d build/doctrees  -W -v source build/html\nRunning Sphinx v1.4.5\nloading pickled environment... not yet created\nbuilding [mo]: targets for 0 po files that are out of date\nbuilding [html]: targets for 5 source files that are out of date\nupdating environment: 5 added, 0 changed, 0 removed\nreading sources... [ 20%] index\nreading sources... [ 40%] modules\nreading sources... [ 60%] quizApp\nTraceback (most recent call last):\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/sphinx/ext/viewcode.py\", line 28, in _get_full_modname\n    return get_full_modname(modname, attribute)\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/sphinx/util/__init__.py\", line 300, in get_full_modname\n    __import__(modname)\nTypeError: __import__() argument 1 must be string, not None\nviewcode can't import None, failed with error \"__import__() argument 1 must be string, not None\"\nTraceback (most recent call last):\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/sphinx/ext/viewcode.py\", line 28, in _get_full_modname\n    return get_full_modname(modname, attribute)\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/sphinx/util/__init__.py\", line 300, in get_full_modname\n    __import__(modname)\nTypeError: __import__() argument 1 must be string, not None\nviewcode can't import None, failed with error \"__import__() argument 1 must be string, not None\"\nDidn't find ParticipantExperiment.activities in quizApp.models\nDidn't find Question.explantion in quizApp.models\nDidn't find User.name in quizApp.models\nDidn't find User.authenticated in quizApp.models\nreading sources... [ 80%] quizApp.forms\nreading sources... [100%] quizApp.views\n\nTraceback (most recent call last):\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/sphinx/cmdline.py\", line 244, in main\n    app.build(opts.force_all, filenames)\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/sphinx/application.py\", line 297, in build\n    self.builder.build_update()\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/sphinx/builders/__init__.py\", line 251, in build_update\n    'out of date' % len(to_build))\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/sphinx/builders/__init__.py\", line 265, in build\n    self.doctreedir, self.app))\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/sphinx/environment.py\", line 569, in update\n    self._read_serial(docnames, app)\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/sphinx/environment.py\", line 589, in _read_serial\n    self.read_doc(docname, app)\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/sphinx/environment.py\", line 742, in read_doc\n    pub.publish()\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/docutils/core.py\", line 217, in publish\n    self.settings)\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/sphinx/io.py\", line 49, in read\n    self.parse()\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/docutils/readers/__init__.py\", line 78, in parse\n    self.parser.parse(self.input, document)\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/docutils/parsers/rst/__init__.py\", line 172, in parse\n    self.statemachine.run(inputlines, document, inliner=self.inliner)\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/docutils/parsers/rst/states.py\", line 170, in run\n    input_source=document['source'])\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/docutils/statemachine.py\", line 239, in run\n    context, state, transitions)\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/docutils/statemachine.py\", line 460, in check_line\n    return method(match, context, next_state)\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/docutils/parsers/rst/states.py\", line 2726, in underline\n    self.section(title, source, style, lineno - 1, messages)\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/docutils/parsers/rst/states.py\", line 327, in section\n    self.new_subsection(title, lineno, messages)\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/docutils/parsers/rst/states.py\", line 395, in new_subsection\n    node=section_node, match_titles=True)\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/docutils/parsers/rst/states.py\", line 282, in nested_parse\n    node=node, match_titles=match_titles)\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/docutils/parsers/rst/states.py\", line 195, in run\n    results = StateMachineWS.run(self, input_lines, input_offset)\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/docutils/statemachine.py\", line 239, in run\n    context, state, transitions)\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/docutils/statemachine.py\", line 460, in check_line\n    return method(match, context, next_state)\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/docutils/parsers/rst/states.py\", line 2726, in underline\n    self.section(title, source, style, lineno - 1, messages)\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/docutils/parsers/rst/states.py\", line 327, in section\n    self.new_subsection(title, lineno, messages)\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/docutils/parsers/rst/states.py\", line 395, in new_subsection\n    node=section_node, match_titles=True)\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/docutils/parsers/rst/states.py\", line 282, in nested_parse\n    node=node, match_titles=match_titles)\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/docutils/parsers/rst/states.py\", line 195, in run\n    results = StateMachineWS.run(self, input_lines, input_offset)\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/docutils/statemachine.py\", line 239, in run\n    context, state, transitions)\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/docutils/statemachine.py\", line 460, in check_line\n    return method(match, context, next_state)\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/docutils/parsers/rst/states.py\", line 2299, in explicit_markup\n    nodelist, blank_finish = self.explicit_construct(match)\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/docutils/parsers/rst/states.py\", line 2311, in explicit_construct\n    return method(self, expmatch)\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/docutils/parsers/rst/states.py\", line 2054, in directive\n    directive_class, match, type_name, option_presets)\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/docutils/parsers/rst/states.py\", line 2103, in run_directive\n    result = directive_instance.run()\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/sphinx/ext/autodoc.py\", line 1613, in run\n    documenter.generate(more_content=self.content)\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/sphinx/ext/autodoc.py\", line 963, in generate\n    self.document_members(all_members)\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/sphinx/ext/autodoc.py\", line 855, in document_members\n    if cls.can_document_member(member, mname, isattr, self)]\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/sphinx/ext/autodoc.py\", line 1458, in can_document_member\n    isdatadesc = isdescriptor(member) and not \\\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/sphinx/util/inspect.py\", line 101, in isdescriptor\n    if hasattr(safe_getattr(x, item, None), '__call__'):\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/sphinx/util/inspect.py\", line 113, in safe_getattr\n    if name in obj.__dict__:\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/werkzeug/local.py\", line 343, in __getattr__\n    return getattr(self._get_current_object(), name)\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/werkzeug/local.py\", line 302, in _get_current_object\n    return self.__local()\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/flask/globals.py\", line 37, in _lookup_req_object\n    raise RuntimeError(_request_ctx_err_msg)\nRuntimeError: Working outside of request context.\n\nThis typically means that you attempted to use functionality that needed\nan active HTTP request.  Consult the documentation on testing for\ninformation about how to avoid this problem.\n\nException occurred:\n  File \"/home/alyosha/.virtualenvs/quizApp-new/lib/python2.7/site-packages/flask/globals.py\", line 37, in _lookup_req_object\n    raise RuntimeError(_request_ctx_err_msg)\nRuntimeError: Working outside of request context.\n\nThis typically means that you attempted to use functionality that needed\nan active HTTP request.  Consult the documentation on testing for\ninformation about how to avoid this problem.\nThe full traceback has been saved in /tmp/sphinx-err-iI83eY.log, if you want to report the issue to the developers.\nPlease also report this if it was a user error, so that a better error message can be provided next time.\nA bug report can be filed in the tracker at <https://github.com/sphinx-doc/sphinx/issues>. Thanks!\nmake: *** [Makefile:53: html] Error 1\nIt looks like something weird is going on at import time with current_app. I'm not 100% sure if this is a sphinx error or flask error, but I'm leaning towards flask.\nI made the following example to reproduce it.\nhttps://github.com/PlasmaSheep/sphinx-error\nInstructions for running it are in the README.md file.", "issue_status": "Closed", "issue_reporting_time": "2016-07-29T16:45:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "780": {"issue_url": "https://github.com/pallets/flask/issues/1966", "issue_id": "#1966", "issue_summary": "flask app bundle with py2exe issue (AttributeError: function 'PyObject_GetBuffer' not found)", "issue_description": "ddcatgg commented on 29 Jul 2016 \u2022\nedited\nWith current newest version (Flask 0.11.1), there is a issue with py2exe (0.6.9).\nIt may be caused by flask.cli module (click 6.6).\nFlask 0.10.1 has not this issue.\nA simplest flask script named test_flask.py:\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello World!\"\n\nif __name__ == \"__main__\":\n    app.run()\nUse this py2exe script to make a test_flask.exe:\nimport sys\nimport py2exe\nfrom distutils.core import setup\n\nsys.argv.append('py2exe')\n\nsetup(\n    options={\n        'py2exe':\n        {\n            'bundle_files': 1,\n        }\n    },\n    console=[{'script': 'test_flask.py'}],\n)\nWhen execute test_flask.exe, get these:\nTraceback (most recent call last):\nFile \"test_flask.py\", line 1, in\nFile \"zipextimporter.pyc\", line 82, in load_module\nFile \"flask__init__.pyc\", line 21, in\nFile \"zipextimporter.pyc\", line 82, in load_module\nFile \"flask\\app.pyc\", line 27, in\nFile \"zipextimporter.pyc\", line 82, in load_module\nFile \"flask\\cli.pyc\", line 17, in\nFile \"zipextimporter.pyc\", line 82, in load_module\nFile \"click__init__.pyc\", line 18, in\nFile \"zipextimporter.pyc\", line 82, in load_module\nFile \"click\\core.pyc\", line 7, in\nFile \"zipextimporter.pyc\", line 82, in load_module\nFile \"click\\types.pyc\", line 4, in\nFile \"zipextimporter.pyc\", line 82, in load_module\nFile \"click_compat.pyc\", line 530, in\nFile \"zipextimporter.pyc\", line 82, in load_module\nFile \"click_winconsole.pyc\", line 23, in\nFile \"ctypes__init__.pyc\", line 378, in getattr\nFile \"ctypes__init__.pyc\", line 383, in getitem\nAttributeError: function 'PyObject_GetBuffer' not found\nMy pip list:\nalabaster (0.7.9)\nBabel (2.1.1)\nbeautifulsoup4 (4.4.1)\nblinker (1.4)\ncffi (1.7.0)\nclick (6.6)\ncolorama (0.3.3)\ncryptography (1.4)\ncx-Oracle (5.2)\ncycler (0.10.0)\nCython (0.24)\ndemjson (2.2.4)\ndocutils (0.12)\necdsa (0.13)\nenum34 (1.1.6)\nerequests (0.4.1)\net-xmlfile (1.0.1)\neventlet (0.19.0)\nFabric (1.11.1)\nFlask (0.11.1)\nFlask-SocketIO (2.5)\ngreenlet (0.4.10)\nidna (2.1)\nipaddress (1.0.16)\nitsdangerous (0.24)\njdcal (1.2)\nJinja2 (2.8)\nlxml (3.6.0)\nMarkupSafe (0.23)\nmatplotlib (1.5.1)\nmeliae (0.4.0.final.0)\nMySQL-python (1.2.5)\nnumpy (1.11.0)\nopenpyxl (2.3.5)\nparamiko (2.0.2)\nPillow (3.2.0)\npip (8.1.2)\npsutil (4.3.0)\npy2exe (0.6.9)\npyasn1 (0.1.9)\npycparser (2.14)\npycrypto (2.6.1)\nPygments (2.0.2)\npymssql (2.0.1)\npyodbc (3.0.7)\npyparsing (2.1.4)\npyserial (2.5rc2)\npython-dateutil (2.5.3)\npython-engineio (0.9.2)\npython-socketio (1.4.2)\npytz (2016.4)\npywin32 (219)\nrequests (2.10.0)\nsetuptools (25.1.0)\nsix (1.10.0)\nsnowballstemmer (1.2.0)\nSphinx (1.3.1)\nsphinx-rtd-theme (0.1.9)\nSQLAlchemy (1.0.8)\nTwisted (16.3.0)\nvirtualenv (15.0.2)\nWerkzeug (0.11.10)\nXlsxWriter (0.8.7)\nxlwt (1.1.2)\nzope.interface (4.2.0)", "issue_status": "Closed", "issue_reporting_time": "2016-07-29T03:12:18Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "781": {"issue_url": "https://github.com/pallets/flask/issues/1964", "issue_id": "#1964", "issue_summary": "Logbook integration?", "issue_description": "Member\njab commented on 28 Jul 2016\nJust noticed Logbook 1.0 was released a month ago, and was reminded of discussion about it on the mailing list (e.g. http://librelist.com/browser/flask/2011/12/28/flask-+-logbook/). Armin mentioned his desire to add Logbook integration to Flask in that 5-year-old thread, but I didn't see any mention of it here in the tracker, so I figured I'd open a ticket. If that's no longer the intention please close, but either way looking forward to finding out the latest plans.", "issue_status": "Closed", "issue_reporting_time": "2016-07-27T22:55:03Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "782": {"issue_url": "https://github.com/pallets/flask/issues/1962", "issue_id": "#1962", "issue_summary": "failing tests", "issue_description": "MustafaAdam commented on 27 Jul 2016\nrunning py.test on the tests folder, I get a few failures\ntest_safe_join and test_safe_join_exceptions both fail.\nThe first one fails with a 'TypeError: safe_join() missing 1 required positional argument: 'filename'\nThe second fails with a 'TypeError: safe_join() takes 2 positional arguments but 3 were given'\nAlso\ntest_send_file_last_modified fails.\n'rv.last_modified' is None. Hence, 'assert rv.last_modified == datetime.datetime(1999,1,1,0,0) fails\nI'm somewhat of a amatuer programmer so maybe it's just me :)", "issue_status": "Closed", "issue_reporting_time": "2016-07-27T02:44:52Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "783": {"issue_url": "https://github.com/pallets/flask/issues/1959", "issue_id": "#1959", "issue_summary": "Not working on AWS Windows instance?", "issue_description": "ideepg commented on 21 Jul 2016 \u2022\nedited\nLocally(within the cloud instance ) being able to create the server and access from browser using localhost.But when trying to access the flask application outside the instance it fails to connect.The port used was 8217.So I created another server on Nodejs on the same port and then the node application is accessible outside the instance with the public IP. Also to ensure I thought that the problem might be only with my python,so to validate it I tried creating a naked server using HTTPServer and it worked fine. Not sure what is going wrong here.Any help?", "issue_status": "Closed", "issue_reporting_time": "2016-07-21T15:10:33Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "784": {"issue_url": "https://github.com/pallets/flask/issues/1958", "issue_id": "#1958", "issue_summary": "May flask support live settings like django-constance", "issue_description": "Colstuwjx commented on 18 Jul 2016 \u2022\nedited\nHi, I'm new to flask, and just wonder if flask could support editing the settings on admin and hot reload as a feature, like the django-constance worked.\nThx.", "issue_status": "Closed", "issue_reporting_time": "2016-07-18T14:48:17Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "785": {"issue_url": "https://github.com/pallets/flask/issues/1957", "issue_id": "#1957", "issue_summary": "May flask support live settings like django-constance", "issue_description": "Colstuwjx commented on 18 Jul 2016\nHi, I'm new to flask, and just wonder if flask could support editing the settings on admin and hot reload, like the django-constance worked.\nThx.", "issue_status": "Closed", "issue_reporting_time": "2016-07-18T14:47:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "786": {"issue_url": "https://github.com/pallets/flask/issues/1955", "issue_id": "#1955", "issue_summary": "Flask Test Client fails to get on subdomains with explicit port 80", "issue_description": "CorneliaXaos commented on 15 Jul 2016\nWhen app.config[\"SERVER_NAME\"] contains an explicit port of 80 (i.e. domain.tld:80) the flask test client fails to process get urls at subdomains. There are three test cases:\nExplicit port 80 in SERVER_NAME: All subdomain requests redirect to 404 in test client.\nImplicit port 80 in SERVER_NAME: Subdomain requests work.\nExplicit port that is not 80: Subdomain requests work if the port is provided correctly.\nExample gist located here.\nMore information at this Stack Overflow post.\nPython Version: 3.5.1+\nOutput of pip3 freeze:\nclick==6.6\nFlask==0.11.1\nitsdangerous==0.24\nJinja2==2.8\nMarkupSafe==0.23\nWerkzeug==0.11.10", "issue_status": "Closed", "issue_reporting_time": "2016-07-14T21:16:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "787": {"issue_url": "https://github.com/pallets/flask/issues/1952", "issue_id": "#1952", "issue_summary": "Flask-paginate shows all results on same page", "issue_description": "dsingh-uh commented on 12 Jul 2016 \u2022\nedited\nI am using Flask-paginate for pagination in my app. The results are fetched from database. The problem is that all results show up on 1st page and when I click on the next page number again all results are displayed on that page. The page number in url changes to 2/3/4 etc. I this as reference. Here is my code snippet\nfrom flask.ext.paginate import Pagination\n    @app.route('/users')\n    def users_page():\n\n        page_size = 25\n        limit = 100\n\n        search = False\n        q = request.args.get('q')\n        if q:\n            search = True\n        try:\n            page = int(request.args.get('page', 1))\n        except ValueError:\n            page = 1\n        with session_scope() as session:\n            users = users_dao.get_users(session, limit=limit)\n            pagination = Pagination(page=page, total=len(users), per_page=page_size, search=search, record_name='users')\n            return render_template(\"users.html\", users=users, pagination=pagination)\nThe pagination info on html page says displaying 1-25 results of 100. When clicked on page 2, it says displaying 25-50 results of 100. So somehow the pagination has figured out on the basis of total and per_page how many results should be displayed but somewhere it fails to force that on number of rows to show.\nThe template looks like\n{{ pagination.info }}\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th>User Name</th>\n                <th>Phone</th>\n                <th>City</th>\n                <th>Country</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for user in users %}\n            <tr>\n                <td>{{ user.user_name }}</td>\n                <td>{{ user.phone_number }}</td>\n                <td>{{user.city}}</td>\n                <td>{{user.country}}</td>\n            </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n    {{ pagination.links }}", "issue_status": "Closed", "issue_reporting_time": "2016-07-11T18:48:30Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "788": {"issue_url": "https://github.com/pallets/flask/issues/1949", "issue_id": "#1949", "issue_summary": "CLI fails during create database in Flaskr tutorial", "issue_description": "dvf commented on 8 Jul 2016 \u2022\nedited\nWhen following the tutorial, I could not run $ flask initdb.\nTraceback (most recent call last):\n  File \"/Users/dvf/environments/flaskTutorial/bin/flask\", line 11, in <module>\n    sys.exit(main())\n  File \"/Users/dvf/environments/flaskTutorial/lib/python2.7/site-packages/flask_cli/cli.py\", line 502, in main\n    cli.main(args=args, prog_name=name)\n  File \"/Users/dvf/environments/flaskTutorial/lib/python2.7/site-packages/flask_cli/cli.py\", line 369, in main\n    return AppGroup.main(self, *args, **kwargs)\n  File \"/Users/dvf/environments/flaskTutorial/lib/python2.7/site-packages/click/core.py\", line 696, in main\n    rv = self.invoke(ctx)\n  File \"/Users/dvf/environments/flaskTutorial/lib/python2.7/site-packages/click/core.py\", line 1055, in invoke\n    cmd_name, cmd, args = self.resolve_command(ctx, args)\n  File \"/Users/dvf/environments/flaskTutorial/lib/python2.7/site-packages/click/core.py\", line 1094, in resolve_command\n    cmd = self.get_command(ctx, cmd_name)\n  File \"/Users/dvf/environments/flaskTutorial/lib/python2.7/site-packages/flask_cli/cli.py\", line 340, in get_command\n    rv = info.load_app().cli.get_command(ctx, name)\n  File \"/Users/dvf/environments/flaskTutorial/lib/python2.7/site-packages/flask_cli/cli.py\", line 226, in load_app\n    rv = locate_app(self.app_import_path)\n  File \"/Users/dvf/environments/flaskTutorial/lib/python2.7/site-packages/flask_cli/cli.py\", line 90, in locate_app\n    __import__(module)\nImportError: No module named flaskr\nThis was fixed by changing the environment variable to:\nexport FLASK_APP=flaskr.py\nOn OS X 10.11.3 and Python 2.7.12", "issue_status": "Closed", "issue_reporting_time": "2016-07-07T18:40:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "789": {"issue_url": "https://github.com/pallets/flask/issues/1947", "issue_id": "#1947", "issue_summary": "Persona example - deprecated", "issue_description": "supermensa commented on 6 Jul 2016\nFrom the Mozilla site:\n\"The persona.org service is shutting down. This service will be unavailable after November 30th, 2016\"", "issue_status": "Closed", "issue_reporting_time": "2016-07-06T12:13:51Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "790": {"issue_url": "https://github.com/pallets/flask/issues/1943", "issue_id": "#1943", "issue_summary": "{{ }} has trouble with method calls and array indexes in single call", "issue_description": "pokemonmegaman commented on 3 Jul 2016 \u2022\nedited\nIn a forum app I am working on, I have found that this works (in a template):\n{% set lastpost=thread.dataValues.Comments[latest] %}\nLast post on {{ lastpost.datetime.toLocaleString() }}\nHowever, if I try to combine it into one line, like so:\n{{ thread.dataValues.Comments[latest].datetime.toLocaleString() }}\nit results in\nTypeError: Method invoked on an object that is not Date. at toLocaleString (native) at eval (eval at <anonymous> (/home/ubuntu/workspace/node_modules/swig/lib/swig.js:498:13), <anonymous>:79:2009) at Object.exports.each (/home/ubuntu/workspace/node_modules/swig/lib/utils.js:45:11) at eval (eval at <anonymous> (/home/ubuntu/workspace/node_modules/swig/lib/swig.js:498:13), <anonymous>:50:10) at Object.eval [as tpl] (eval at <anonymous> (/home/ubuntu/workspace/node_modules/swig/lib/swig.js:498:13), <anonymous>:95:3) at compiled (/home/ubuntu/workspace/node_modules/swig/lib/swig.js:619:18) at /home/ubuntu/workspace/node_modules/swig/lib/swig.js:559:20 at /home/ubuntu/workspace/node_modules/swig/lib/swig.js:690:9 at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:380:3)\nAdditionally, attempting to do\n{{ typeof(thread.dataValues.Comments[latest].datetime) }}\nresults in\nError: SyntaxError: Unexpected token !== in file /home/ubuntu/workspace/static/topic.html. at Object.exports.throwError (/home/ubuntu/workspace/node_modules/swig/lib/utils.js:183:9) at precompile (/home/ubuntu/workspace/node_modules/swig/lib/swig.js:505:13) at compile (/home/ubuntu/workspace/node_modules/swig/lib/swig.js:606:16) at /home/ubuntu/workspace/node_modules/swig/lib/swig.js:684:27 at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:380:3)", "issue_status": "Closed", "issue_reporting_time": "2016-07-03T10:24:24Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "791": {"issue_url": "https://github.com/pallets/flask/issues/1941", "issue_id": "#1941", "issue_summary": "Flask fails to reload upon Traceback", "issue_description": "ivanlmj commented on 1 Jul 2016 \u2022\nedited\nI have the following Flask app running in a Stage server, and I realized that some requests were affecting its operation, causing Tracebacks and with this, the Flask app was still running as a process, but not answering any sort of request, neither giving a kind of Internal Server Error (5xx).\nHere is my code:\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nfrom flask import Flask, jsonify\nfrom flask_limiter import Limiter\nfrom flask_limiter.util import get_remote_address\n\napp = Flask(__name__)\napp.config['JSON_AS_ASCII'] = False\n\nlimiter = Limiter (\n    app,\n    key_func=get_remote_address,\n    global_limits=[\"180 per day\",\"30 per hour\"]\n)\n\n@app.after_request\ndef server_response(response):\n    response.headers[\"Server\"] = \"WS\"\n    return response\n\n@app.route('/json')\ndef f_json():\n\n    d = { \"result\":[\n                {\"id\":\"1\",\"name\":\"John\",\"email\":\"john-flask@gmail.com\"},\n                {\"id\":\"2\",\"name\":\"NIkolas\",\"email\":\"nikolas-flask@gmail.com\"},\n        {\"id\":\"3\",\"name\":\"Samanta\",\"email\":\"samanta-flask@gmail.com\"}\n    ]}\n    return jsonify(d)\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=80, debug=True)\nHere is what I found in the debug, which caused the Traceback (and Flask was still running, but not answering any request).\n191.96.249.231 - - [30/Jun/2016 19:11:47] \"GET /plugins/system/plugin_googlemap2/plugin_googlemap2_proxy.php?url=http://191.96.249.231/shodanhq HTTP/1.0\" 404 -\nException in thread Thread-2:\nTraceback (most recent call last):\n  File \"/usr/lib/python2.7/threading.py\", line 810, in __bootstrap_inner\n    self.run()\n  File \"/usr/lib/python2.7/threading.py\", line 763, in run\n    self.__target(*self.__args, **self.__kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 659, in inner\n    srv.serve_forever()\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 499, in serve_forever\n    HTTPServer.serve_forever(self)\n  File \"/usr/lib/python2.7/SocketServer.py\", line 238, in serve_forever\n    self._handle_request_noblock()\n  File \"/usr/lib/python2.7/SocketServer.py\", line 297, in _handle_request_noblock\n    self.handle_error(request, client_address)\n  File \"/usr/lib/python2.7/SocketServer.py\", line 295, in _handle_request_noblock\n    self.process_request(request, client_address)\n  File \"/usr/lib/python2.7/SocketServer.py\", line 321, in process_request\n    self.finish_request(request, client_address)\n  File \"/usr/lib/python2.7/SocketServer.py\", line 334, in finish_request\n    self.RequestHandlerClass(request, client_address, self)\n  File \"/usr/lib/python2.7/SocketServer.py\", line 649, in __init__\n    self.handle()\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 216, in handle\n    rv = BaseHTTPRequestHandler.handle(self)\n  File \"/usr/lib/python2.7/BaseHTTPServer.py\", line 340, in handle\n    self.handle_one_request()\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 251, in handle_one_request\n    return self.run_wsgi()\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 193, in run_wsgi\n    execute(self.server.app)\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 184, in execute\n    write(data)\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 149, in write\n    self.send_response(int(code), msg)\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 260, in send_response\n    self.wfile.write(hdr.encode('ascii'))\nIOError: [Errno 32] Broken pipe\nIt also happened in this situation, but I believe that \"Connection Reset by Peer\" was already addressed and fixed, (miguelgrinberg/Flask-SocketIO#184), but I believe it is worth to be mentioned regarding the data which was requested to Flask (it really caught my attention...)\n169.229.3.91 - - [29/Jun/2016 09:12:37] \"0<B0>$e<AE>x<D4>^?<AB><AC>1<E8><CF>O\u06da<9C>^K@<BA><D2><FE><D4>q_^]i=AS%<D7>`I<CA>`<8F><C8>6<E5>E^SX)B<A5>-{^RoK^BT<E4><82>}O'\\<BB><8B><E4>a<86>\" 400 -\nException in thread Thread-2:\nTraceback (most recent call last):\n  File \"/usr/lib/python2.7/threading.py\", line 810, in __bootstrap_inner\n    self.run()\n  File \"/usr/lib/python2.7/threading.py\", line 763, in run\n    self.__target(*self.__args, **self.__kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 659, in inner\n    srv.serve_forever()\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 499, in serve_forever\n    HTTPServer.serve_forever(self)\n  File \"/usr/lib/python2.7/SocketServer.py\", line 238, in serve_forever\n    self._handle_request_noblock()\n  File \"/usr/lib/python2.7/SocketServer.py\", line 297, in _handle_request_noblock\n    self.handle_error(request, client_address)\n  File \"/usr/lib/python2.7/SocketServer.py\", line 295, in _handle_request_noblock\n    self.process_request(request, client_address)\n  File \"/usr/lib/python2.7/SocketServer.py\", line 321, in process_request\n    self.finish_request(request, client_address)\n  File \"/usr/lib/python2.7/SocketServer.py\", line 334, in finish_request\n    self.RequestHandlerClass(request, client_address, self)\n  File \"/usr/lib/python2.7/SocketServer.py\", line 649, in __init__\n    self.handle()\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 216, in handle\n    rv = BaseHTTPRequestHandler.handle(self)\n  File \"/usr/lib/python2.7/BaseHTTPServer.py\", line 340, in handle\n    self.handle_one_request()\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 247, in handle_one_request\n    self.raw_requestline = self.rfile.readline()\nIOError: [Errno 104] Connection reset by peer\nI believe that it would be interesting to have a kind of \"recovery\" for Flask, or a better way to deal with it, without staying hanged..", "issue_status": "Closed", "issue_reporting_time": "2016-07-01T16:16:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "792": {"issue_url": "https://github.com/pallets/flask/issues/1938", "issue_id": "#1938", "issue_summary": "`flask run` allows no way to run server on a unix socket", "issue_description": "stefanv commented on 1 Jul 2016\nIn our webapp, we deploy on a unix socket. We'd like to be able to do the same while debugging (since nginx etc. is already configured to handle that).", "issue_status": "Closed", "issue_reporting_time": "2016-06-30T20:35:25Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "793": {"issue_url": "https://github.com/pallets/flask/issues/1935", "issue_id": "#1935", "issue_summary": "blueprint error handler not working??", "issue_description": "tyan4g commented on 29 Jun 2016 \u2022\nedited\nfollow the guide on doc\nhttp://flask.pocoo.org/docs/0.11/blueprints/\n@simple_page.errorhandler(404)\ndef page_not_found(e):\n    return jsonify(result=result)\nflask version is 0.11.1\nstill render the offcial 404 page.", "issue_status": "Closed", "issue_reporting_time": "2016-06-29T09:39:23Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "794": {"issue_url": "https://github.com/pallets/flask/issues/1933", "issue_id": "#1933", "issue_summary": "JSON Parsing on empty request content with RequestParser", "issue_description": "thanhtungka91 commented on 27 Jun 2016 \u2022\nedited by davidism\nFrom flask-restful/flask-restful#163.", "issue_status": "Closed", "issue_reporting_time": "2016-06-27T07:36:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "795": {"issue_url": "https://github.com/pallets/flask/issues/1931", "issue_id": "#1931", "issue_summary": "dialogue box?", "issue_description": "thippo commented on 25 Jun 2016 \u2022\nedited\nNo description provided.", "issue_status": "Closed", "issue_reporting_time": "2016-06-25T10:49:05Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "796": {"issue_url": "https://github.com/pallets/flask/issues/1929", "issue_id": "#1929", "issue_summary": "TypeError when trying to parse request with int data", "issue_description": "Grazfather commented on 24 Jun 2016\nIf the Content-Type header is \"application/json\" but the data is a number then it raises a TypeError instead of a BadRequest\n        from flask.ext.restful import reqparse, inputs\n        from flask import request\n        import flask\n        app = flask.Flask(__name__)\n        with app.test_request_context(method=\"post\", data=b\"123\", content_type=\"application/json\"):\n            parser = reqparse.RequestParser()\n            parser.parse_args()\nChange the data from b\"123\" to b\"abc\" and you get the expected error", "issue_status": "Closed", "issue_reporting_time": "2016-06-23T22:26:32Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "797": {"issue_url": "https://github.com/pallets/flask/issues/1926", "issue_id": "#1926", "issue_summary": "Unhelpful Error Message on FLASK_APP to Bad Path", "issue_description": "cancan101 commented on 23 Jun 2016 \u2022\nedited\nIf the path specified in FLASK_APP does not exist (for example it is a typo), then the unhelpful error message is shown:\nImportError: Import by filename is not supported.\nThis is even though I have:\nFLASK_APP=alex/server2.py\nwhich is \"path-like\" and not module like.\nPerhaps this line should be modified to return True for file-like objects.\n2", "issue_status": "Closed", "issue_reporting_time": "2016-06-23T17:24:20Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "798": {"issue_url": "https://github.com/pallets/flask/issues/1924", "issue_id": "#1924", "issue_summary": "Next/Back Buttons in Documentation", "issue_description": "adamshields commented on 23 Jun 2016\nI would like to request adding a Next/Back Button at the end of each page within the official documentation. Once you get to the end of the document you have to scroll all the way back up to the very top of the page and go to the next article. I think it would be much nicer to have this feature and the documentation would flow much better.", "issue_status": "Closed", "issue_reporting_time": "2016-06-22T21:54:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "799": {"issue_url": "https://github.com/pallets/flask/issues/1923", "issue_id": "#1923", "issue_summary": "TaggedJSONSerializer encodes Python 2 strings as bytes", "issue_description": "jaraco commented on 22 Jun 2016\nI've encountered an issue while migrating one of our Flask apps from Python 2 to Python 3.\nConsider the canonical sessions example, with one minor tweak which forces a Python 2 ascii string into the session:\nfrom flask import Flask, session, redirect, url_for, escape, request\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    if 'username' in session:\n        return 'Logged in as %s' % escape(session['username'])\n    return 'You are not logged in'\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        session['username'] = str(request.form['username'])\n        return redirect(url_for('index'))\n    return '''\n        <form action=\"\" method=\"post\">\n            <p><input type=text name=username>\n            <p><input type=submit value=Login>\n        </form>\n    '''\n\n@app.route('/logout')\ndef logout():\n    # remove the username from the session if it's there\n    session.pop('username', None)\n    return redirect(url_for('index'))\n\n# set the secret key.  keep this really secret:\napp.secret_key = 'A0Zr98j/3yX R~XHH!jmN]LWX/,?RT'\nRun that app on Python 2, log in as 'jaraco', then run the app on Python 3 and refresh the / resource, and you'll get a response with this text:\nLogged in as b'jaraco'\nThe value has been typecast into bytes as a result of the TaggedJSONSerializer. This bytes value then wreaks havoc when text strings are expected.\nI imagine three possible ways to deal with this issue:\nRewrite the applications such that they ensure that all text values are stored as unicode even on Python 2.\nRewrite the TaggedJSONSerializer to only b64 encode bytes values on Python 3, but provide a hook so that if Python 2 consumers still want to encode to bytes, they can wrap the values in a special class that indicates bytes (similar to how MongoDB provides bson.Binary) which will be treated the same as bytes on Python 3.\nRewrite the applications such that when consuming session values, any binary values found for text strings are decoded.\nOption 3 seems like a hack around the symptom, addressing the output and not the underlying issue, so I'm dismissing that out of hand.\nOption 1 seems the cleanest, though a lot of work for potentially a lot of applications.\nOption 2 seems the most robust, but has backward-compatibility concerns. On the whole, though, I expect it will save users a great deal of time and trouble as they upgrade from Python 2 to 3. I expect that most users of Flask when storing Python 2 str values in the session are actually intending to be storing text and not binary bytes, and this option honors that expectation while providing a solution for consumers that might need to intentionally store binary values.\nWhat's your recommendation? Would Flask consider a PR to implement Option 2? Is there another option I'm not considering?", "issue_status": "Closed", "issue_reporting_time": "2016-06-22T14:56:46Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "800": {"issue_url": "https://github.com/pallets/flask/issues/1922", "issue_id": "#1922", "issue_summary": "HTTPMethodOverrideMiddleware docs example doesnt work with latest version", "issue_description": "vitriol commented on 22 Jun 2016\nThe docs here seem to be out of date\nhttp://flask.pocoo.org/docs/0.10/patterns/methodoverrides/\nThe example code throws a TypeError: 'type' object is not iterable on almost every request since updating to version .11", "issue_status": "Closed", "issue_reporting_time": "2016-06-22T14:48:33Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "801": {"issue_url": "https://github.com/pallets/flask/issues/1919", "issue_id": "#1919", "issue_summary": "Remove easy_install from installation docs", "issue_description": "Member\njeffwidman commented on 20 Jun 2016\nAs pointed out in #1915, http://flask.pocoo.org/docs/0.11/installation/ mentions both pip and easy_install.\npip seems to be the canonical way to manage packages these days, so I vote we drop easy_install from the install docs.\n6", "issue_status": "Closed", "issue_reporting_time": "2016-06-20T06:39:12Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "802": {"issue_url": "https://github.com/pallets/flask/issues/1916", "issue_id": "#1916", "issue_summary": "Document option to use simplejson", "issue_description": "Member\ndavidism commented on 17 Jun 2016 \u2022\nedited\nFlask (through itsdangerous) prefers simplejson over the built-in json module if it is installed. The documentation should say that simplejson is an optional dependency and why using it is preferred but not required.\n#1911\n#1602\nhttps://botbot.me/freenode/pocoo/msg/68108854/\n2", "issue_status": "Closed", "issue_reporting_time": "2016-06-17T16:11:41Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "803": {"issue_url": "https://github.com/pallets/flask/issues/1915", "issue_id": "#1915", "issue_summary": "Use pip in upgrade documentation instead of easy_install", "issue_description": "johnthagen commented on 17 Jun 2016\nIn the upgrade docs, easy_install is listed as the example to use to upgrade:\nhttp://flask.pocoo.org/docs/0.11/upgrading/\nBut in the installation docs, both pip and easy_install are listed, though pip is used more and is recommended:\nhttp://flask.pocoo.org/docs/0.11/installation/\nI would recommend the upgrading section be switched to use pip.\n1", "issue_status": "Closed", "issue_reporting_time": "2016-06-16T20:58:22Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "804": {"issue_url": "https://github.com/pallets/flask/issues/1911", "issue_id": "#1911", "issue_summary": "Wrong import json library", "issue_description": "rearn commented on 14 Jun 2016\nThis code is always import error.\n(simplejson is not included in the itsdangerous.)\nSee: https://github.com/pallets/itsdangerous/blob/master/itsdangerous.py", "issue_status": "Closed", "issue_reporting_time": "2016-06-14T09:02:06Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "805": {"issue_url": "https://github.com/pallets/flask/issues/1908", "issue_id": "#1908", "issue_summary": "TaggedJSONSerializer does not preserve int keys in dicts", "issue_description": "Member\nThiefMaster commented on 13 Jun 2016\nThe TaggedJSONSerializer used for session serialization is rather smart when it comes to preserving types that usually cannot be JSON-encoded. However, it still has the problem that dict keys are converted to strings.\n>>> from flask.sessions import TaggedJSONSerializer\n>>> tj = TaggedJSONSerializer()\n>>> tj.loads(tj.dumps({123: u'blah'}))\n{u'123': u'blah'}\nI think it would make sense to also tag the key here:\nelif isinstance(value, dict):\n    return dict((k, _tag(v)) for k, v in iteritems(value))\nThe one drawback I see is that there could be code relying on the implicit conversion right now..", "issue_status": "Closed", "issue_reporting_time": "2016-06-13T08:43:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "806": {"issue_url": "https://github.com/pallets/flask/issues/1907", "issue_id": "#1907", "issue_summary": "Jinja templates do not auto reload if Flask app debug enabled solely via app.run(debug=True)", "issue_description": "Contributor\ndavebarkerxyz commented on 12 Jun 2016\nWhen enabling debug mode via app.run(debug=True), code changes result in an auto-reload but Jinja templates are cached until the app is manually is restarted.\nAt\nflask/flask/app.py\nLine 695 in 21d595b\n if self.config['TEMPLATES_AUTO_RELOAD'] is not None: \nFlask checks if the config[\"TEMPLATE_AUTO_RELOAD\"] is explicitly set. If not, Jinja's options[\"auto_reload\"] is set to app.debug.\nHowever, if you instantiate your Flask object then call app.run(debug=True) without loading a config, template auto reloading is not enabled (app.debug was False when the Flask app was instantiated).\nAt\nflask/flask/app.py\nLine 839 in 21d595b\n options.setdefault('use_reloader', self.debug) \nwe enable reloading code and enable the debugger. My proposed fix would be to also enable template reloading (jinja_env.auto_reload = self.debug) here.\nThis would result is less confusion (\"Debug is enabled but my templates don't auto reload\") and make the template reloading behaviour consistent with the code reloading behaviour (\"If no config is set or debug is not explicitly set in config, and the site calls app.run(debug=True), then enable the relevant auto reloading features\").\n18\n1", "issue_status": "Closed", "issue_reporting_time": "2016-06-11T23:42:39Z", "fixed_by": "#2373", "pull_request_summary": "Reconfigure app when debug is set by run command", "pull_request_description": "Member\ndavidism commented on 15 Jun 2017\napp.jinja_env is a property that creates the environment on first access. If app.debug is not configured explicitly before accessing app.jinja_env, env.auto_reload will be calculated as False. The run command's debug flag can change the app's debug flag, at which point auto_reload needs to be reconfigured.\nThis extracts the logic for auto_reload to Flask.templates_auto_reload. It adds a new method to be called by app.run or ScriptInfo.load_app that will reconfigure the app if debug is set by the command.\ncontinues #1910\ncloses #1907", "pull_request_status": "Merged", "issue_fixed_time": "2017-06-14T19:56:43Z", "files_changed": [["3", "CHANGES"], ["57", "flask/app.py"], ["8", "flask/cli.py"], ["15", "tests/test_templating.py"]]}, "807": {"issue_url": "https://github.com/pallets/flask/issues/1906", "issue_id": "#1906", "issue_summary": "SessionInterface shouldn't hard code a fix for localhost when it comes to cookies", "issue_description": "Contributor\nnickjj commented on 11 Jun 2016 \u2022\nedited\nThe get_cookie_domain function specifically fixes issues with webkit browsers by doing this:\n# https://github.com/pallets/flask/blob/0.11.1/flask/sessions.py#L198-222\nif rv == '.localhost':\n    rv = None\nThe problem is that nowadays many people are using Docker and other techniques (Vagrant, etc.) to create a better development environment so they are no longer running Flask on localhost.\nIn Docker's case, you'd likely end up with an IP address based host name which means you'd set your SERVER_NAME to something like 192.168.99.100.\nAt this point Chrome and other webkit based browsers will freak out by reject setting the cookie which in turn will make your Flask app throw CSRF token related issues when submitting forms.\nSince Flask is already hard coding a fix for this, I think you should allow users to configure which domain name gets skipped with a proper config option.\nThis could be named something like SESSION_COOKIE_IGNORE_DOMAIN (feel free to improve the name :)). It could default to localhost so that it's backwards compatible and nothing changes for most users.\nRight now the work around is to modify your /etc/hosts file to map an IP address to a FQDN with a TLD if you're stuck using an IP based SERVER_NAME. That seems a little lame and preventable at the Flask level.\nWhat do you think?", "issue_status": "Closed", "issue_reporting_time": "2016-06-11T13:58:29Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "808": {"issue_url": "https://github.com/pallets/flask/issues/1905", "issue_id": "#1905", "issue_summary": "Documentation with minor incorrection?!?", "issue_description": "gustavooferreira commented on 11 Jun 2016\nHi,\nOn the A Minimal Application under Quickstart, you have code for a minimal Flask implementation, although it should be added the app.run so it can actually run the app, and load the server.\nThis is the form for applications that are connected to a WSGI server, which I believe beginners won't be doing that as one of their first steps.\nAnother minor correction, is on URL Building also under Quickstart, it has:\nprint url_for('profile', username='John Doe')\nI believe should be : print url_for('user', username='John Doe')", "issue_status": "Closed", "issue_reporting_time": "2016-06-10T23:39:57Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "809": {"issue_url": "https://github.com/pallets/flask/issues/1904", "issue_id": "#1904", "issue_summary": "Can't reload code on Python 3, Win 10, latest version of flask", "issue_description": "hoaivan commented on 10 Jun 2016\nMy code is simple copy paste from tutorial:\nfrom flask import Flask\napp = Flask(__name__)\napp.debug = True\napp.use_reloader=True\n\n@app.route(\"/proxy/list/<access_id>\")\ndef proxy(access_id):\n    return \"Hello World  {}\".format(access_id)\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\nthen i made a change:\nreturn \"Hello World {} something else\".format(access_id)\nnothing reloaded!", "issue_status": "Closed", "issue_reporting_time": "2016-06-10T15:25:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "810": {"issue_url": "https://github.com/pallets/flask/issues/1903", "issue_id": "#1903", "issue_summary": "AttributeError: 'module' object has no attribute 'exc_clear'", "issue_description": "losintikfos commented on 10 Jun 2016\nWe are getting below error when building flask-mongoengine with pypy3 on travis-ci:\n1) ERROR: Failure: AttributeError ('module' object has no attribute 'exc_clear')\n\n ----------------------------------------------------------------------\n\n Traceback (most recent call last):\n\n.eggs/nose-1.3.7-py3.2.egg/nose/failure.py line 39 in runTest\n\n  raise self.exc_val.with_traceback(self.tb)\n\n.eggs/nose-1.3.7-py3.2.egg/nose/loader.py line 418 in loadTestsFromName\n\n  addr.filename, addr.module)\n\n.eggs/nose-1.3.7-py3.2.egg/nose/importer.py line 47 in importFromPath\n\n  return self.importFromDir(dir_path, fqname)\n\n.eggs/nose-1.3.7-py3.2.egg/nose/importer.py line 94 in importFromDir\n\n  mod = load_module(part_fqname, fh, filename, desc)\n\ntests/__init__.py line 1 in <module>\n\n  import flask\n\n.tox/pypy3-medev/site-packages/flask/__init__.py line 21 in <module>\n\n  from .app import Flask, Request, Response\n\n.tox/pypy3-medev/site-packages/flask/app.py line 24 in <module>\n\n  from .helpers import _PackageBoundObject, url_for, get_flashed_messages, \\\n\n.tox/pypy3-medev/site-packages/flask/helpers.py line 42 in <module>\n\n  from ._compat import string_types, text_type\n\n.tox/pypy3-medev/site-packages/flask/_compat.py line 82 in <module>\n\n  raise AssertionError()\n\n.tox/pypy3-medev/site-packages/flask/_compat.py line 78 in __exit__\n\n  sys.exc_clear()\n\n   AttributeError: 'module' object has no attribute 'exc_clear'\nCould this be a bug?", "issue_status": "Closed", "issue_reporting_time": "2016-06-10T13:18:56Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "811": {"issue_url": "https://github.com/pallets/flask/issues/1902", "issue_id": "#1902", "issue_summary": "Import error with some examples", "issue_description": "rnelsonchem commented on 10 Jun 2016\nI'm trying to run the \"flaskr\" and \"minitwit\" examples, but I'm running into an import error issue. I'm trying to follow the instructions from the README file. When running flask initdb, I get the following error:\nTraceback (most recent call last):\n  File \"/home/nelson/apps/miniconda/bin/flask\", line 6, in <module>\n    sys.exit(flask.cli.main())\n  File \"/home/nelson/apps/miniconda/lib/python3.4/site-packages/flask/cli.py\", line 478, in main\n    cli.main(args=args, prog_name=name)\n  File \"/home/nelson/apps/miniconda/lib/python3.4/site-packages/flask/cli.py\", line 345, in main\n    return AppGroup.main(self, *args, **kwargs)\n  File \"/home/nelson/apps/miniconda/lib/python3.4/site-packages/click/core.py\", line 696, in main\n    rv = self.invoke(ctx)\n  File \"/home/nelson/apps/miniconda/lib/python3.4/site-packages/click/core.py\", line 1055, in invoke\n    cmd_name, cmd, args = self.resolve_command(ctx, args)\n  File \"/home/nelson/apps/miniconda/lib/python3.4/site-packages/click/core.py\", line 1094, in resolve_command\n    cmd = self.get_command(ctx, cmd_name)\n  File \"/home/nelson/apps/miniconda/lib/python3.4/site-packages/flask/cli.py\", line 316, in get_command\n    rv = info.load_app().cli.get_command(ctx, name)\n  File \"/home/nelson/apps/miniconda/lib/python3.4/site-packages/flask/cli.py\", line 209, in load_app\n    rv = locate_app(self.app_import_path)\n  File \"/home/nelson/apps/miniconda/lib/python3.4/site-packages/flask/cli.py\", line 89, in locate_app\n    __import__(module)\nImportError: No module named 'flaskr'\nI'm using an Anaconda Python install on both Windows 10 (Python 3.5) and Linux (Python 3.4) with either the stock flask 0.11 install or an install from the latest git repo. I'm running this code from appropriate directory and am able to import flaskr or minitwit from a terminal Python session. I can run the other examples that do not require the flask script.\n8", "issue_status": "Closed", "issue_reporting_time": "2016-06-09T20:35:18Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "812": {"issue_url": "https://github.com/pallets/flask/issues/1901", "issue_id": "#1901", "issue_summary": "Google App Engine ImportError: No module named msvcrt", "issue_description": "dhstack commented on 9 Jun 2016\nBecause Click was added to Flask 0.11 for the New Command Line Interface, and Click imports the Windows only module msvcrt, and the Google App Engine local development server doesn't contain this module, an import error is thrown.\nI've created a workaround for the gae-init project (by modifying the App Engine config file), but it would be best to have a fix come directly from Flask/Click since there are likely many more people who will experience this issue when using Flask 0.11 with Google App Engine.\n1", "issue_status": "Closed", "issue_reporting_time": "2016-06-09T15:41:53Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "813": {"issue_url": "https://github.com/pallets/flask/issues/1899", "issue_id": "#1899", "issue_summary": "test_client post cannot handle JSON list", "issue_description": "maximecharron commented on 8 Jun 2016 \u2022\nedited\nI have the following object:\n dict(username=\"test\",\n       repository=\"http://github.com\",\n       foo=[dict(name=\"test\", version=\"1.1.3\")])\nit gives the following json when dumping it:\n{\"username\": \"test\", \"repository\": \"http://github.com\", \"foo\": [{\"name\": \"test\", \"version\": \"1.1.3\"}]}\nWhen sending it in a post like that:\nself.app = mainweb.webapp.test_client()\nresponse = self.app.post('/foo/', data=request) # where request is the object mentionned before\nit gives the following error:\nTraceback (most recent call last):\n  File \"C:\\cygwin64\\home\\xyz\\devel\\foo\\test\\foo\\functional\\test_functionnal.py\", line 20, in test_given_valid_request_when_post_then_valid_response\n    response = self.app.post('/foo/', data=request)\n  File \"C:\\Python3.5.1\\lib\\site-packages\\werkzeug\\test.py\", line 788, in post\n    return self.open(*args, **kw)\n  File \"C:\\Python3.5.1\\lib\\site-packages\\flask\\testing.py\", line 103, in open\n    builder = make_test_environ_builder(self.application, *args, **kwargs)\n  File \"C:\\Python3.5.1\\lib\\site-packages\\flask\\testing.py\", line 34, in make_test_environ_builder\n    return EnvironBuilder(path, base_url, *args, **kwargs)\n  File \"C:\\Python3.5.1\\lib\\site-packages\\werkzeug\\test.py\", line 338, in __init__\n    self._add_file_from_data(key, value)\n  File \"C:\\Python3.5.1\\lib\\site-packages\\werkzeug\\test.py\", line 355, in _add_file_from_data\n    self.files.add_file(key, **value)\nTypeError: add_file() got an unexpected keyword argument 'name'\nIs it really a bug or is the issue on my side?\nThanks!\n1", "issue_status": "Closed", "issue_reporting_time": "2016-06-08T18:26:12Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "814": {"issue_url": "https://github.com/pallets/flask/issues/1897", "issue_id": "#1897", "issue_summary": "Missing import on Flask 0.11.1", "issue_description": "wschmrdrNS commented on 8 Jun 2016 \u2022\nedited by ThiefMaster\nTraceback found (redacted for relevancy to Flask):\n  File \"/usr/local/lib/python2.7/dist-packages/flask/__init__.py\", line 21, in <module>\n    from .app import Flask, Request, Response\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 27, in <module>\n    from . import json, cli\n  File \"/usr/local/lib/python2.7/dist-packages/flask/cli.py\", line 17, in <module>\n    import click\nImportError: No module named click\nJust recently upgraded from 0.10 to 0.11. Did not see a requirements.txt for 3rd party dependencies.", "issue_status": "Closed", "issue_reporting_time": "2016-06-08T16:03:41Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "815": {"issue_url": "https://github.com/pallets/flask/issues/1895", "issue_id": "#1895", "issue_summary": "Blueprint static content only works when response.direct_passthrough is False", "issue_description": "joaodlf commented on 7 Jun 2016 \u2022\nedited\nI'm using the latest version of Flask (0.11.1) and the built in dev server, with the following Blueprint:\nblueprint = Blueprint(\"admin\", __name__, url_prefix=\"/admin\", template_folder=\"templates\", static_folder=\"static\")\nThe template folder is working as expected, but any resources inside the static folder throw a RuntimeError: Attempted implicit sequence conversion but the response object is in direct passthrough mode.\nAfter searching around for this error, I found the following discussion:\ncloseio/Flask-gzip#7\nThe solution used in that third party extension was to put in place the following code on app.after_request:\nresponse.direct_passthrough = False\nMy static content loads fine with the above.\nI was wondering if anyone has run into this issue with Blueprints and if there is a better workaround.", "issue_status": "Closed", "issue_reporting_time": "2016-06-07T17:21:53Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "816": {"issue_url": "https://github.com/pallets/flask/issues/1894", "issue_id": "#1894", "issue_summary": "Test Python 3.5", "issue_description": "Member\nuntitaker commented on 7 Jun 2016\nNo description provided.", "issue_status": "Closed", "issue_reporting_time": "2016-06-07T16:32:41Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "817": {"issue_url": "https://github.com/pallets/flask/issues/1893", "issue_id": "#1893", "issue_summary": "Travis 3.3-devel job fails with error about urllib2 in Werkzeug", "issue_description": "Member\ndavidism commented on 7 Jun 2016 \u2022\nedited\nhttps://travis-ci.org/pallets/flask/jobs/135626173\nTraceback (most recent call last):\n  File \"/home/travis/build/pallets/flask/.tox/py-devel/lib/python3.3/site-packages/werkzeug/http.py\", line 26, in <module>\n    from urllib2 import parse_http_list as _parse_list_header, \\\nImportError: No module named 'urllib2'\n\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File \"/home/travis/build/pallets/flask/.tox/py-devel/lib/python3.3/site-packages/_pytest/config.py\", line 320, in _importconftest\n    mod = conftestpath.pyimport()\n  File \"/home/travis/build/pallets/flask/.tox/py-devel/lib/python3.3/site-packages/py/_path/local.py\", line 650, in pyimport\n    __import__(modname)\n  File \"/home/travis/build/pallets/flask/tests/conftest.py\", line 9, in <module>\n    import flask\n  File \"/home/travis/build/pallets/flask/.tox/py-devel/lib/python3.3/site-packages/flask/__init__.py\", line 17, in <module>\n    from werkzeug.exceptions import abort\n  File \"/home/travis/build/pallets/flask/.tox/py-devel/lib/python3.3/site-packages/werkzeug/__init__.py\", line 152, in <module>\n    __import__('werkzeug.exceptions')\n  File \"/home/travis/build/pallets/flask/.tox/py-devel/lib/python3.3/site-packages/werkzeug/exceptions.py\", line 71, in <module>\n    from werkzeug.wrappers import Response\n  File \"/home/travis/build/pallets/flask/.tox/py-devel/lib/python3.3/site-packages/werkzeug/wrappers.py\", line 26, in <module>\n    from werkzeug.http import HTTP_STATUS_CODES, \\\n  File \"/home/travis/build/pallets/flask/.tox/py-devel/lib/python3.3/site-packages/werkzeug/http.py\", line 29, in <module>\n    from urllib.request import parse_http_list as _parse_list_header, \\\nImportError: cannot import name unquote_to_bytes\nI can't reproduce this locally. Re-running the job still fails.", "issue_status": "Closed", "issue_reporting_time": "2016-06-07T16:28:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "818": {"issue_url": "https://github.com/pallets/flask/issues/1880", "issue_id": "#1880", "issue_summary": "Link to contributing.rst from the main Flask docs", "issue_description": "Member\njeffwidman commented on 4 Jun 2016\nMake it easier for folks to find our contributing docs.\nNot sure where in the main Flask docs to put this, but it would be good to add somewhere. There's been a few Pycon sprinters who tried searching our docs for the contributing info rather than looking in the source repo.", "issue_status": "Closed", "issue_reporting_time": "2016-06-03T19:34:12Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "819": {"issue_url": "https://github.com/pallets/flask/issues/1879", "issue_id": "#1879", "issue_summary": "test_main_module_paths fails on RHEL and Ubuntu when using Amazon EC2", "issue_description": "Contributor\nkarlw00t commented on 4 Jun 2016 \u2022\nedited\nRunning the unit tests against HEAD (e048aa4), I'm able to reproduce a single failing unit tests in:\ntests/test_instance_config.py::test_main_module_paths\nI'm able to reproduce the bug on Amazon Linux 2016.03.1 and RHEL 7.2. I'm running on a fresh EC2 instance in both cases, and the steps to reproduce are the same, here is my bash history:\nsudo yum install python-virtualenv\nsudo yum groupinstall 'Development Tools'\nvirtualenv flask\ncd flask/\ngit clone https://github.com/pallets/flask.git\ncd flask/\nsource ../bin/activate\npip install -e .\npip install -r test-requirements.txt\npy.test tests/test_instance_config.py::test_main_module_paths\nfailing output:\nmodules_tmpdir = local('/tmp/pytest-of-ec2-user/pytest-0/test_main_module_paths0/modules_tmpdir'), purge_module = <function inner at 0x170c1b8>\ndef test_main_module_paths(modules_tmpdir, purge_module):\n    app = modules_tmpdir.join('main_app.py')\n    app.write('import flask\\n\\napp = flask.Flask(\"__main__\")')\n    purge_module('main_app')\n\n    from main_app import app\n    here = os.path.abspath(os.getcwd())\n  assert app.instance_path == os.path.join(here, 'instance')\nE assert '/home/ec2-us...r/py-instance' == '/home/ec2-use...lask/instance'\nE - /home/ec2-user/flask/var/py-instance\nE ? ^ ^ ---\nE + /home/ec2-user/flask/flask/instance\nE ? ^^ ^^\ntests/test_instance_config.py:33: AssertionError\nThis test seems to be passing fine on Travis, and on Debian and OSX. It appears to be a Redhat/Amazon Linux specific issue. I ran git bisect back to commits on May 26th, 2016 and the test still fails all attempts.", "issue_status": "Closed", "issue_reporting_time": "2016-06-03T18:56:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "820": {"issue_url": "https://github.com/pallets/flask/issues/1877", "issue_id": "#1877", "issue_summary": "jsonify no longer causes Content-Length to be set on returned Response object", "issue_description": "mbra commented on 3 Jun 2016\nI am not sure if this was an intentional change, as it is only triggered by jsonify by passing an iterable to flask.wrappers.Response/werkzeug.wrappers.Response.\nIn commit d9402fc a newline was added to the json response, as per a request from the httpbin project.\nWhen werkzeug.wrappers.Response is passed a non text_type iterable, the self.set_data codepath, responsible for setting the Content-Length header, is not used anymore.\nIroncially this breaks httpbins \"response-headers\" route that uses the response object in a somewhat\ncreative way and breaks while trying to access response.headers['Content-Length']\nIf this considered a backwards incompatible change that might need to be undone, or is this considered new and intended behaviour?", "issue_status": "Closed", "issue_reporting_time": "2016-06-03T08:24:29Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "821": {"issue_url": "https://github.com/pallets/flask/issues/1847", "issue_id": "#1847", "issue_summary": "Issue using Flask CLI with module layout recommended in Large Applications", "issue_description": "sean-lynch commented on 2 Jun 2016 \u2022\nedited by untitaker\nExample project that shows issue is available here: https://github.com/sean-lynch/flask-cli-issue . I'm not sure if this is a flask cli issue or an issue with documentation. Happy to correct the docs if it's the latter.\nI'm attempting to use the large app structure seen in the Flask Larger Applications documentation\nFirst, set up a virutal environment and install flask 0.11 into that environment (requirements.txt\nhas all that for you).\nCan successfully launch app using old app.run() mechanism found in run.py and old_launch.sh\n$ python run.py\nBut can't seem to get to work with flask-cli. You can see both of the methods in new_launch.sh.\nThis throws ImportError - No module named server:\n$ FLASK_APP=server FLASK_DEBUG=1 flask run\nThis loads, but doesn't register any of the views even though the Loading views... print output makes it to the console.\n$ FLASK_APP=server/__init__.py FLASK_DEBUG=1 flask run\nHow should I be loading a module with flask-cli? Or alternatively, how should I be changing the module structure to support it properly?\n4", "issue_status": "Closed", "issue_reporting_time": "2016-06-01T23:38:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "822": {"issue_url": "https://github.com/pallets/flask/issues/1846", "issue_id": "#1846", "issue_summary": "Add tests target that uses simplejson", "issue_description": "Member\ndavidism commented on 2 Jun 2016 \u2022\nedited by untitaker\n#1602 (comment)\nShould add tox envs for testing flask.json with simplejson installed. Possibly add this to the travis matrix.", "issue_status": "Closed", "issue_reporting_time": "2016-06-01T21:15:32Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "823": {"issue_url": "https://github.com/pallets/flask/issues/1845", "issue_id": "#1845", "issue_summary": "IPython Option for Flask Shell", "issue_description": "aemonm commented on 2 Jun 2016\nWould like to be able to use iPython instead of the default Python shell when running 'flask shell'.\n1", "issue_status": "Closed", "issue_reporting_time": "2016-06-01T19:35:21Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "824": {"issue_url": "https://github.com/pallets/flask/issues/1844", "issue_id": "#1844", "issue_summary": "Middleware doesn't execute inside test_request_context()", "issue_description": "amorey commented on 1 Jun 2016\nI'm trying to write a unittest for a custom middleware layer in my app and I'm having difficulty getting the middleware to execute inside a test request context. Here's a simple script that illustrates the problem:\nfrom flask import Flask, url_for\n\nclass Middleware(object):\n    def __init__(self, app):\n        print ' - initialized middleware'\n        self.app = app\n\n    def __call__(self, environ, start_response):\n        print ' - executed middleware'\n        return self.app(environ, start_response)\n\n# create app\napp = Flask(__name__)\n\n# add middleware\napp.wsgi_app = Middleware(app.wsgi_app)\n\n# add route\n@app.route('/')\ndef index():\n    return 'index'\n\n# test GET                                                                      \nprint '\\nTesting GET...'\nresp = app.test_client().get('/')\nprint ' - Response: ' + resp.data\n\n# test context                                                                  \nprint '\\nTesting request context...'\nwith app.test_request_context('/'):\n    app.preprocess_request()\n    ret = app.dispatch_request()\n    resp = app.make_response(ret)\n    resp = app.process_response(resp)\n    print ' - Response: ' + resp.data\nThe middleware executes inside the test client GET request but not inside the test request context. Here's the output:\n$ python test.py\n - initialized middleware\n\nTesting GET...\n - executed middleware\n - Response: index\n\nTesting request context...\n - Response: index\nAm I doing something wrong or is this the intentional behavior inside a test request context? I'm using Flask 0.11 and Werkzeug 0.11.10.\nThanks for your help!", "issue_status": "Closed", "issue_reporting_time": "2016-06-01T15:46:35Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "825": {"issue_url": "https://github.com/pallets/flask/issues/1842", "issue_id": "#1842", "issue_summary": "[CLI] Option to pass the FLASK_APP variable as an argument", "issue_description": "yashmehrotra commented on 1 Jun 2016\nFor the latest CLI feature (Thanks a lot for that BTW), to run a app, we currently do:\n$ export FLASK_APP=/path/to/hello.py\n$ export FLASK_DEBUG=1\n$ flask run\nWouldn't it be nice, if app and debug variables could also be passed as arguments, That way, we can also do\n$ flask --app=/path/to/hello.py --debug run\nI as a user would prefer the first option in a production environment, but for development, the second option (CLI arguments) would be much comfortable.\nWhat do you guys think about this ?\n3", "issue_status": "Closed", "issue_reporting_time": "2016-06-01T00:26:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "826": {"issue_url": "https://github.com/pallets/flask/issues/1837", "issue_id": "#1837", "issue_summary": "Setting error handler for unknown code fails", "issue_description": "georgthegreat commented on 31 May 2016 \u2022\nedited\nThe following code:\nflask_app.errorhandler(402)(http_exception_handler)\nraises KeyError: 402 due to missing 402 in default exception. Code works fine with Flask=0.10.1\n4", "issue_status": "Closed", "issue_reporting_time": "2016-05-31T07:51:12Z", "fixed_by": "#2350", "pull_request_summary": "show nice message when registering error handler for unknown code", "pull_request_description": "Member\ndavidism commented on 1 Jun 2017\nWhen registering an error handler for a code that's not registered in werkzeug.exceptions, a KeyError is raised. This changes the error to show a helpful \"use a HTTPException subclass\" as well. Documentation is updated to describe this behavior and other clean up.\nThe supported pattern for unknown codes is:\nclass UnknownError(HTTPException):\n    code = 999\n    description = \"A very large error occurred.\"\n\napp.register_error_handler(UnknownError, handle_999)\n\nraise UnknownError\nIf a standard code does not work, submit a patch to add it to Werkzeug.\ncloses #1837", "pull_request_status": "Merged", "issue_fixed_time": "2017-06-01T04:04:21Z", "files_changed": [["71", "docs/errorhandling.rst"], ["55", "flask/app.py"], ["7", "tests/test_basic.py"]]}, "827": {"issue_url": "https://github.com/pallets/flask/issues/1836", "issue_id": "#1836", "issue_summary": "ExtDeprecationWarning show file path with deprecated import", "issue_description": "sibelius commented on 31 May 2016\nIt should be very useful to warning which files have deprecated imports", "issue_status": "Closed", "issue_reporting_time": "2016-05-30T18:58:29Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "828": {"issue_url": "https://github.com/pallets/flask/issues/1835", "issue_id": "#1835", "issue_summary": "Failing test: test_egg_installed_paths", "issue_description": "djc commented on 30 May 2016\nWhile trying to package 0.11 on Gentoo Linux, I've run into the following test failure:\n============================================= FAILURES =============================================\n_____________________________________ test_egg_installed_paths _____________________________________\n\ninstall_egg = <function inner at 0x7f5eebfa9668>\nmodules_tmpdir = local('/var/tmp/portage/dev-python/flask-0.11/temp/pytest-of-portage/pytest-0/test_egg_installed_paths0/modules_tmpdir')\nmodules_tmpdir_prefix = local('/var/tmp/portage/dev-python/flask-0.11/temp/pytest-of-portage/pytest-0/test_egg_installed_paths0/modules_tmpdir')\n\n    def test_egg_installed_paths(install_egg, modules_tmpdir,\n                                 modules_tmpdir_prefix):\n        modules_tmpdir.mkdir('site_egg').join('__init__.py').write(\n            'import flask\\n\\napp = flask.Flask(__name__)'\n        )\n>       install_egg('site_egg')\n\ntests/test_instance_config.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/conftest.py:116: in inner\n    egg_path, = modules_tmpdir.join('dist/').listdir()\n/usr/lib64/python2.7/site-packages/py/_path/local.py:379: in listdir\n    names = py.error.checked_call(os.listdir, self.strpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <py._error.ErrorMaker object at 0x7f5eee4382d0>, func = <built-in function listdir>\nargs = ('/var/tmp/portage/dev-python/flask-0.11/temp/pytest-of-portage/pytest-0/test_egg_installed_paths0/modules_tmpdir/dist',)\nkwargs = {}, __tracebackhide__ = False, cls = <class 'py.error.ENOENT'>\nvalue = OSError(2, 'No such file or directory'), tb = <traceback object at 0x7f5eebfa6c68>\nerrno = 2\n\n    def checked_call(self, func, *args, **kwargs):\n        \"\"\" call a function and raise an errno-exception if applicable. \"\"\"\n        __tracebackhide__ = True\n        try:\n            return func(*args, **kwargs)\n        except self.Error:\n            raise\n        except (OSError, EnvironmentError):\n            cls, value, tb = sys.exc_info()\n            if not hasattr(value, 'errno'):\n                raise\n            __tracebackhide__ = False\n            errno = value.errno\n            try:\n                if not isinstance(value, WindowsError):\n                    raise NameError\n            except NameError:\n                # we are not on Windows, or we got a proper OSError\n                cls = self._geterrnoclass(errno)\n            else:\n                try:\n                    cls = self._geterrnoclass(_winerrnomap[errno])\n                except KeyError:\n                    raise value\n>           raise cls(\"%s%r\" % (func.__name__, args))\nE           ENOENT: [No such file or directory]: listdir('/var/tmp/portage/dev-python/flask-0.11/temp/pytest-of-portage/pytest-0/test_egg_installed_paths0/modules_tmpdir/dist',)\n\n/usr/lib64/python2.7/site-packages/py/_error.py:84: ENOENT\nAlso note that it's pretty unclear that you now require py.test for test running, might want to add that as an explicit dependency somehow.", "issue_status": "Closed", "issue_reporting_time": "2016-05-30T17:51:31Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "829": {"issue_url": "https://github.com/pallets/flask/issues/1832", "issue_id": "#1832", "issue_summary": "static url is not correct with subdomain", "issue_description": "honmaple commented on 30 May 2016\nThe code is like this\nfrom flask import Flask, Blueprint, url_for\n\napp = Flask(__name__)\napp.config['SERVER_NAME'] = 'localhost:5000'\napp.url_map.default_subdomain = 'forums'\n\nforums = Blueprint('forums', __name__)\n\n\n@forums.route('/')\ndef forums_index():\n    print(url_for('static', filename='index.css'))\n    return 'forums,hello'\n\ndocs = Blueprint('docs', __name__)\n\n\n@docs.route('/')\ndef docs_index():\n    return 'docs,hello'\n\n\napp.register_blueprint(forums)\napp.register_blueprint(docs, subdomain='docs')\n\n\n@app.route('/hello')\ndef index():\n    return 'index,hello'\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n    print(app.url_map) \nThe all url\n([<Rule 'forums|/hello' (GET, OPTIONS, HEAD) -> index>,\n <Rule 'forums|/' (GET, OPTIONS, HEAD) -> forums.forums_index>,\n <Rule 'docs|/' (GET, OPTIONS, HEAD) -> docs.docs_index>,\n <Rule '/static/<filename>' (GET, OPTIONS, HEAD) -> static>])\nThe static url\nurl_for('static', filename='index.css')\nwill return http://localhost:5000/static/index.css not http://forums.localhost:5000/static/index.css\nI think I have set\napp.url_map.default_subdomain = 'forums'\nthe all default url is forums.localhost:5000 not localhost:5000\nThough I can add\n    app.url_map._rules.clear()\n    app.url_map._rules_by_endpoint.clear()\n    app.url_map.default_subdomain = 'forums'\n    app.config['SERVER_NAME'] = 'localhost:5000'\n    app.add_url_rule(app.static_url_path + '/<path:filename>',\n                                      endpoint='static',\n                                      view_func=app.send_static_file,\n                                      subdomain='forums')\nto solve it,is it a bug with flask?\n(python3 and Werkzeug (0.11.10))", "issue_status": "Closed", "issue_reporting_time": "2016-05-30T04:00:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "830": {"issue_url": "https://github.com/pallets/flask/issues/1829", "issue_id": "#1829", "issue_summary": "\"[Errno 2] No such file or directory\" on flask run with FLASK_DEBUG=1", "issue_description": "Contributor\nyoavram commented on 30 May 2016 \u2022\nedited\nI get the following [Errno 2] No such file or directory with flask 0.11 & werkzeug 0.11.10 on Windows 7 64bit with Python 3.5 but only when FLASK_DEBUG=1.\nD:\\tmp\n\u03bb python --version\nPython 3.5.1 :: Continuum Analytics, Inc.\n\nD:\\tmp\n\u03bb python -c \"import hello_flask\"\n\nD:\\tmp\n\u03bb set FLASK_APP=hello_flask.py\n\nD:\\tmp\n\u03bb flask run\n * Serving Flask app \"hello_flask\"\n * Forcing debug mode off\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n\nD:\\tmp\n\u03bb set FLASK_DEBUG=1\n\nD:\\tmp\n\u03bb flask run\n * Serving Flask app \"hello_flask\"\n * Forcing debug mode on\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n * Restarting with windowsapi reloader\nd:\\anaconda3\\envs\\flask\\python.exe: can't open file 'D:\\Anaconda3\\envs\\flask\\Scripts\\flask': [Errno 2] No such file or directory\nhello_flask.py is the minimal app from the docs.\n1", "issue_status": "Closed", "issue_reporting_time": "2016-05-29T19:03:30Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "831": {"issue_url": "https://github.com/pallets/flask/issues/1828", "issue_id": "#1828", "issue_summary": "`flask --version` fails", "issue_description": "Member\nsingingwolfboy commented on 29 May 2016\nThe flask CLI utility that ships with Flask 0.11 does not respond to the --version flag. I would expect the following output:\n$ flask --version\nFlask 0.11\nPython 3.5.1\nInstead I get the following output:\n$ flask --version\nError: no such option: --version", "issue_status": "Closed", "issue_reporting_time": "2016-05-29T17:54:10Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "832": {"issue_url": "https://github.com/pallets/flask/issues/1825", "issue_id": "#1825", "issue_summary": "Flask 0.11/httpbin: TypeError: <generator object MultiDict.lists at ...> is not JSON serializable", "issue_description": "The-Compiler commented on 29 May 2016\nSince updating from Flask 0.10.1 to 0.11.0, when trying to request /response-headers using httpbin I get:\n[...] ERROR in app: Exception on /response-headers [GET]\nTraceback (most recent call last):\n  File \".../site-packages/flask/app.py\", line 1988, in wsgi_app\n    response = self.full_dispatch_request()\n  File \".../site-packages/flask/app.py\", line 1641, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \".../site-packages/flask/app.py\", line 1544, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \".../site-packages/flask/_compat.py\", line 33, in reraise\n    raise value\n  File \".../site-packages/flask/app.py\", line 1639, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \".../site-packages/flask/app.py\", line 1625, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \".../site-packages/httpbin/core.py\", line 314, in response_headers\n    response = jsonify(headers.lists())\n  File \".../site-packages/httpbin/core.py\", line 40, in jsonify\n    response = flask_jsonify(*args, **kwargs)\n  File \".../site-packages/flask/json.py\", line 266, in jsonify\n    (dumps(data, indent=indent, separators=separators), '\\n'),\n  File \".../site-packages/flask/json.py\", line 126, in dumps\n    rv = _json.dumps(obj, **kwargs)\n  File \".../json/__init__.py\", line 237, in dumps\n    **kw).encode(obj)\n  File \".../json/encoder.py\", line 201, in encode\n    chunks = list(chunks)\n  File \".../json/encoder.py\", line 436, in _iterencode\n    o = _default(o)\n  File \".../site-packages/flask/json.py\", line 83, in default\n    return _json.JSONEncoder.default(self, o)\n  File \".../json/encoder.py\", line 180, in default\n    raise TypeError(repr(o) + \" is not JSON serializable\")\nTypeError: <generator object MultiDict.lists at ...> is not JSON serializable\nThis is on Python 3.5 with httpbin 0.4.1", "issue_status": "Closed", "issue_reporting_time": "2016-05-29T12:35:18Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "833": {"issue_url": "https://github.com/pallets/flask/issues/1824", "issue_id": "#1824", "issue_summary": "Consider making StrictUndefined the default in Flask 1.0", "issue_description": "Vlad-Shcherbina commented on 28 May 2016\nOf all Undefined variants, it comes closest to \"Explicit is better than implicit\" and \"Errors should never pass silently\".\nI'm not sure it's worth changing in Jinja2 because of backward compatibility requirements, but Flask 1.0 seems like a reasonable point where behavior changes are expected anyway.\n3", "issue_status": "Closed", "issue_reporting_time": "2016-05-28T14:36:13Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "834": {"issue_url": "https://github.com/pallets/flask/issues/1817", "issue_id": "#1817", "issue_summary": "Unify versionadded markers (0.11 vs 1.0)", "issue_description": "Member\nThiefMaster commented on 23 May 2016 \u2022\nedited\nThere are a few versionadded:: markers that point to 1.0 - those should be changed to 0.11 for that release.", "issue_status": "Closed", "issue_reporting_time": "2016-05-23T12:35:53Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "835": {"issue_url": "https://github.com/pallets/flask/issues/1816", "issue_id": "#1816", "issue_summary": "Reference to Flask 1.0 in Flask 0.10 docs", "issue_description": "roganov commented on 23 May 2016\nI think there shouldn't be reference to future (not released) versions in current docs, it's very confusing.\nhttp://flask.pocoo.org/docs/0.10/server/\nStarting with Flask 1.0 there are multiple built-in ways to run a development server.\nAlso http://flask.pocoo.org/docs/0.10/cli/#cli link is broken.", "issue_status": "Closed", "issue_reporting_time": "2016-05-23T06:03:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "836": {"issue_url": "https://github.com/pallets/flask/issues/1809", "issue_id": "#1809", "issue_summary": "flask.Flask.register_blueprint is poorly documented", "issue_description": "JeromeJ commented on 14 May 2016\nhttp://flask.pocoo.org/docs/0.10/api/#flask.Flask.register_blueprint\nThe documentation doesn't list or explain any of the arguments used by flask.Flask.register_blueprint.\nIt only says:\nregister_blueprint(*args, **kwargs)\u00b6\nRegisters a blueprint on the application.\n\nNew in version 0.7.\nFor one, I know there should be at least use_prefix and maybe (or surely) more than that.\nNote: All Flask version's documentation seems to be affected by this.", "issue_status": "Closed", "issue_reporting_time": "2016-05-14T02:10:05Z", "fixed_by": "#2371", "pull_request_summary": "document `Flask.register_blueprint` arguments", "pull_request_description": "Member\ndavidism commented on 14 Jun 2017\ncloses #1809", "pull_request_status": "Merged", "issue_fixed_time": "2017-06-14T14:41:44Z", "files_changed": [["30", "flask/app.py"], ["23", "flask/blueprints.py"]]}, "837": {"issue_url": "https://github.com/pallets/flask/issues/1808", "issue_id": "#1808", "issue_summary": "itsdangerous -> derive_key() occasionally returns invalid key.", "issue_description": "easyrider666 commented on 13 May 2016 \u2022\nedited\nThe signing of session-cookies works fine on development computer. But when moving the software to an embedded device, ARM71, 32 bit the derive_key() occasionally fail and returns an invalid key. Making the cookie invalid.\nIt is actually the hmac that returns invalid hashed string, but this only happens when running the flask application.\ndef derive_key(self):\n    \"\"\"This method is called to derive the key.  If you're unhappy with\n    the default key derivation choices you can override them here.\n    Keep in mind that the key derivation in itsdangerous is not intended\n    to be used as a security method to make a complex key out of a short\n    password.  Instead you should use large random secret keys.\n    \"\"\"\n    salt = want_bytes(self.salt)\n    if self.key_derivation == 'concat':\n        return self.digest_method(salt + self.secret_key).digest()\n    elif self.key_derivation == 'django-concat':\n        return self.digest_method(salt + b'signer' +\n            self.secret_key).digest()\n    elif self.key_derivation == 'hmac':\n        mac = hmac.new(self.secret_key, digestmod=self.digest_method) ##### 1\n        print(binascii.hexlify(mac.digest()))\n        mac.update(salt)               ##### 2\n        print(binascii.hexlify(mac.digest()))\n        return mac.digest()\n    elif self.key_derivation == 'none':\n        return self.secret_key\n    else:\n        raise TypeError('Unknown key derivation method')\nsecret_key = b\"testing\"\nsalt = \"cookie-session\"\nAfter #####1, binascii.hexlify(mac.digest()) = b'6ab6fc891eefd3b78743ea28b1803811561a7c9b'\nAfter #####2, binascii.hexlify(mac.digest()) = b'd58bd52b4ced54374ea5baca0b6aa52b0e03af74'\nBut sometimes (1) above return b'9dac0c533fcca6cb787aa332d8f152ffb7e6b960'\nand (2) does not change when adding salt: b'9dac0c533fcca6cb787aa332d8f152ffb7e6b960'\nBeen trying to solve this for a couple of days without success. Any ideas?", "issue_status": "Closed", "issue_reporting_time": "2016-05-13T09:44:20Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "838": {"issue_url": "https://github.com/pallets/flask/issues/1807", "issue_id": "#1807", "issue_summary": "stop/terminate flask outside request context", "issue_description": "ghost commented on 13 May 2016\nis it possible to stop flask outside request context ? as i know there's no way for it .\nmaybe a function( stop() ) that changes a flag( shutdown_signal=False ==> True ) for werkzeug that stops server for listening on new connections ?\ni can contribute on making this feature if you allow me ...", "issue_status": "Closed", "issue_reporting_time": "2016-05-13T09:06:42Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "839": {"issue_url": "https://github.com/pallets/flask/issues/1805", "issue_id": "#1805", "issue_summary": "How to bind() when DEBUG = True", "issue_description": "mekanix commented on 11 May 2016\nFor this example I use ZeroMQ but I suppose any socket library could do. This is the code\n#!/usr/bin/env python\nimport zmq\nfrom flask import Flask\n\napp = Flask(__name__)\n\ncontext = zmq.Context()\nsocket = context.socket(zmq.REP)\nsocket.bind('tcp://*:5500')\n\napp.debug = True  # Commenting this line does the trick\napp.run()\nAs when using DEBUG process is fork()ed, the code tries to bind twice. Obviously, Flask knows how to open the port only once, so I'm wondering how to do the same for functions that bind()?", "issue_status": "Closed", "issue_reporting_time": "2016-05-11T02:15:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "840": {"issue_url": "https://github.com/pallets/flask/issues/1804", "issue_id": "#1804", "issue_summary": "'config object has no attribute from_json' error", "issue_description": "0decimal0 commented on 10 May 2016\nI am getting this error while running my web app. I am reading config values from json by doing this :\napp.config.from_json('config.json')", "issue_status": "Closed", "issue_reporting_time": "2016-05-10T08:28:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "841": {"issue_url": "https://github.com/pallets/flask/issues/1803", "issue_id": "#1803", "issue_summary": "'config object has not attribute from_json' error", "issue_description": "0decimal0 commented on 10 May 2016\nI am getting this error while running my web app. I am reading config values from json by doing this :\napp.config.from_json('config.json')", "issue_status": "Closed", "issue_reporting_time": "2016-05-10T08:28:57Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "842": {"issue_url": "https://github.com/pallets/flask/issues/1802", "issue_id": "#1802", "issue_summary": "Why `from . import views` can solve circle import in Flask?", "issue_description": "zjyExcelsior commented on 9 May 2016 \u2022\nedited\nI learn from Larger Applications.In this document, It says: \"all the view functions (the ones with a route() decorator on top) have to be imported in the init.py file. Not the object itself, but the module it is in.\"\nI don't know why when I do this: from . import views,It succeed.Though from views import * can also work well.\nI organize these file like this:\nmyapplication/\n  runner.py\n  myflask/\n    __init__.py\n    views.py\n    templates/\n    static/\n    ...\nrunner.py:\nfrom testFlask import app\napp.run()\nmyflask/init.py:\nfrom flask import Flask\napp = Flask(__name__)\nfrom . import views # why this can work????\nmyflask/views.py:\nfrom . import app\n@app.route('/')\ndef index():\n    return 'Hello World!'\nand I run it:\n$ cd myapplication\n$ python runner.py\nIt's OK to run this Flask app. However I want to know why from . import views can solve this circle import problem in flask? And why the doc says: Not the object itself, but the module it is in????\n1", "issue_status": "Closed", "issue_reporting_time": "2016-05-09T09:40:14Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "843": {"issue_url": "https://github.com/pallets/flask/issues/1800", "issue_id": "#1800", "issue_summary": "ImportError when dropping privileges before running Flask", "issue_description": "blechschmidt commented on 8 May 2016 \u2022\nedited\nWhen using Flask as privileged user, it may under circumstances not be possible to drop permissions before the app is run, including when using ports that do not require root privileges.\ndrop_privileges() # drop privileges to nobody\napp.run()\nThe above code will throw an ImportError, given the scenario that Flask's python files are not accessible to the nobody user due to file permissions, because Flask's run-method (and other internal methods) make use of additional inline imports.\nAs this scenario might be more common, it may be desirable to move all inline imports to the top of their respective module.\nThere are various other reasons that might support the request to move imports to the top of modules: See Python import coding style.", "issue_status": "Closed", "issue_reporting_time": "2016-05-08T02:37:33Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "844": {"issue_url": "https://github.com/pallets/flask/issues/1799", "issue_id": "#1799", "issue_summary": "Does Response() work for anyone?", "issue_description": "juanitogan commented on 7 May 2016\nI've been trying to stream some data out of the database into a downloadable CSV file and having trouble at every turn. I've been following what guides I can find. Response() gives errors and setting headers on make_response() fails to produce a response the browser recognizes as savable (even with response.headers[\"Content-Disposition\"] = \"attachment;filename=study.csv\" ). I've never gone this direction with data extractions so I can't say I know what to expect with HTTP.\nAnyhow, here are the messages from attempts to use Response:\n   return Response(generate(), mimetype='text/csv')\nTypeError: __init__() takes 1 positional argument but 2 were given\n\n    return Response(generate())\nTypeError: __init__() takes 1 positional argument but 2 were given\n\n    return Response(\"1,2,3\")\nTypeError: __init__() takes 1 positional argument but 2 were given", "issue_status": "Closed", "issue_reporting_time": "2016-05-07T05:23:48Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "845": {"issue_url": "https://github.com/pallets/flask/issues/1796", "issue_id": "#1796", "issue_summary": "Post on refresh", "issue_description": "cricque commented on 3 May 2016 \u2022\nedited by ThiefMaster\nWhen you have a form and do the following action\ndef doaction:\n     on POST \n          # dostuff\n          return render_template('myform.html', success=1)\n\n     on GET \n          # dostuff\n          return render_template('myform.html', success=2)\nYou render the page, fill in the form and submit it. It returns the same template with a message : 'its ok'. If you are on the past rendered after the post, you do a browser refresh, you paste again.\nThis does not seem normal to me, or should we just include a hidden input alreadysubmitted or something, or redirect to another page", "issue_status": "Closed", "issue_reporting_time": "2016-05-03T18:16:21Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "846": {"issue_url": "https://github.com/pallets/flask/issues/1793", "issue_id": "#1793", "issue_summary": "Slow json decoding for huge objects", "issue_description": "rladeira commented on 2 May 2016\nWhile doing some tests decoding some huge json objects, I am observing a very slow decoding behavior. Actually, it takes a lot of time to execute request.json the first time.\nWhat's the default json decoder for flask? Does it use some C optimized code?", "issue_status": "Closed", "issue_reporting_time": "2016-05-01T22:22:06Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "847": {"issue_url": "https://github.com/pallets/flask/issues/1792", "issue_id": "#1792", "issue_summary": "[RFC] template load performance, Blueprint.render_template", "issue_description": "pedia commented on 27 Apr 2016\nThe loading of template tried too much times(count of blueprints), after setting with EXPLAIN_TEMPLATE_LOADING config.\nMaybe Blueprint.render_template is more effective.\nIn huge application, there are too much Blueprints, the performance is important.\nAn independent module should always use independent template and Blueprint. Just like below in a view.py\nmod = Blueprint('standalone', __name__, url_prefix='/evil', \\\n  template_folder='standalone/templates', \\\n  static_folder='standalone/static')\n\n@mod.route('/')\ndef index():\n    # add a function into Blueprint\n    return mod.render_template('index.html')\n1", "issue_status": "Closed", "issue_reporting_time": "2016-04-27T03:17:52Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "848": {"issue_url": "https://github.com/pallets/flask/issues/1791", "issue_id": "#1791", "issue_summary": "test_monkeypached_sleep fails on CentOS 6.7.", "issue_description": "dmtucker commented on 26 Apr 2016\nThis issue is related to PR #912.\n============================= test session starts ==============================\nplatform linux2 -- Python 2.6.6, pytest-2.9.1, py-1.4.31, pluggy-0.3.1\nrootdir: /src, inifile: setup.cfg\ncollected 459 items\n\ntests/test_compat.py ..\ntests/test_datastructures.py .............................................s..\ntests/test_debug.py .................ss\ntests/test_exceptions.py ......................\ntests/test_formparser.py ...................\ntests/test_http.py .................................\ntests/test_internal.py ...\ntests/test_local.py .........\ntests/test_routing.py ..................................................\ntests/test_security.py ....\ntests/test_serving.py sssssssssFs\ntests/test_test.py ...................................\ntests/test_urls.py .........................................\ntests/test_utils.py ...................\ntests/test_wrappers.py ...................................................\ntests/test_wsgi.py .......................\ntests/contrib/test_atom.py .\ntests/contrib/test_cache.py ...............................ssssssssssssss\ntests/contrib/test_fixers.py .......\ntests/contrib/test_iterio.py ....ss\ntests/contrib/test_securecookie.py ..\ntests/contrib/test_sessions.py .....\ntests/contrib/test_wrappers.py ...\ntests/res/test.txt s\n\n=================================== FAILURES ===================================\n___________________________ test_monkeypached_sleep ____________________________\n\ntmpdir = local('/tmp/pytest-of-root/pytest-0/test_monkeypached_sleep0')\n\n    def test_monkeypached_sleep(tmpdir):\n        # removing the staticmethod wrapper in the definition of\n        # ReloaderLoop._sleep works most of the time, since `sleep` is a c\n        # function, and unlike python functions which are descriptors, doesn't\n        # become a method when attached to a class. however, if the user has called\n        # `eventlet.monkey_patch` before importing `_reloader`, `time.sleep` is a\n        # python function, and subsequently calling `ReloaderLoop._sleep` fails\n        # with a TypeError. This test checks that _sleep is attached correctly.\n        script = tmpdir.mkdir('app').join('test.py')\n        script.write(textwrap.dedent('''\n        import time\n\n        def sleep(secs):\n            pass\n\n        # simulate eventlet.monkey_patch by replacing the builtin sleep\n        # with a regular function before _reloader is imported\n        time.sleep = sleep\n\n        from werkzeug._reloader import ReloaderLoop\n        ReloaderLoop()._sleep(0)\n        '''))\n>       subprocess.check_call(['python', str(script)])\n\ntests/test_serving.py:233: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npopenargs = (['python', '/tmp/pytest-of-root/pytest-0/test_monkeypached_sleep0/app/test.py'],)\nkwargs = {}, retcode = 1\ncmd = ['python', '/tmp/pytest-of-root/pytest-0/test_monkeypached_sleep0/app/test.py']\n\n    def check_call(*popenargs, **kwargs):\n        \"\"\"Run command with arguments.  Wait for command to complete.  If\n        the exit code was zero then return, otherwise raise\n        CalledProcessError.  The CalledProcessError object will have the\n        return code in the returncode attribute.\n\n        The arguments are the same as for the Popen constructor.  Example:\n\n        check_call([\"ls\", \"-l\"])\n        \"\"\"\n        retcode = call(*popenargs, **kwargs)\n        cmd = kwargs.get(\"args\")\n        if cmd is None:\n            cmd = popenargs[0]\n        if retcode:\n>           raise CalledProcessError(retcode, cmd)\nE           CalledProcessError: Command '['python', '/tmp/pytest-of-root/pytest-0/test_monkeypached_sleep0/app/test.py']' returned non-zero exit status 1\n\n/usr/lib64/python2.6/subprocess.py:505: CalledProcessError\n----------------------------- Captured stderr call -----------------------------\nTraceback (most recent call last):\n  File \"/tmp/pytest-of-root/pytest-0/test_monkeypached_sleep0/app/test.py\", line 11, in <module>\n    from werkzeug._reloader import ReloaderLoop\nImportError: No module named werkzeug._reloader\n=============== 1 failed, 428 passed, 30 skipped in 3.57 seconds ===============", "issue_status": "Closed", "issue_reporting_time": "2016-04-26T01:21:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "849": {"issue_url": "https://github.com/pallets/flask/issues/1790", "issue_id": "#1790", "issue_summary": "flaskr example seems to loose data on every launch", "issue_description": "KyleVeritas commented on 25 Apr 2016 \u2022\nedited by ThiefMaster\nBranch: 0.10\nExample - flaskr\nDescription: Every time close and reopen the flaskr.py, the data submitted previously are erased.\nI think problem is\nif __name__ == '__main__':\n    init_db() \n    app.run()", "issue_status": "Closed", "issue_reporting_time": "2016-04-25T05:08:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "850": {"issue_url": "https://github.com/pallets/flask/issues/1789", "issue_id": "#1789", "issue_summary": "'Flash' Silent Error: occurrs when trying to flash a string with too many characters.", "issue_description": "joeflack4 commented on 25 Apr 2016 \u2022\nedited by ThiefMaster\nAn error is occurring when I try to flash a message with too many characters. In my case, that number is 91,326.\nif authority == True:\n    rows = validate_rows(import_data, data_context)\n    erroneous_rows = rows['erroneous_rows']\n\n    if len(erroneous_rows) > 0:\n        erroneous_row_string = ''\n        i = 1\n\n        # - DEBUGGING\n        flash(2)\n\n        for erroneous_row in erroneous_rows:\n            erroneous_row_string += '<span style=\"text-decoration: underline\">Row ' + str(i) + ': ' + \\\n                str(erroneous_row['errors']) + '</span><br/>' + str(erroneous_row['row_data']) + '<br/><br/>'\n            i += 1\n        erroneous_row_string = erroneous_row_string[:-1]\n\n        # - DEBUGGING\n        # flash(erroneous_row_string) <--- If I do this, it appears to 'crash' flash(), and no messages will appear.\n        flash(isinstance(erroneous_row_string, str))\n        flash(len(erroneous_row_string))\n        flash(3)`\nWhen the above is executed, I get the screen below.\nIf I were to do flash(erroneous_row_string) instead of flash(len(erroneous_row_string), no flashed messages will appear at all. Assuming that this is because there is an upper limit to # of characters a flash message can have.\nThis makes sense, but it would be nice to return a non-silent error, I think.", "issue_status": "Closed", "issue_reporting_time": "2016-04-25T00:20:47Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "851": {"issue_url": "https://github.com/pallets/flask/issues/1788", "issue_id": "#1788", "issue_summary": "Install flask gives error", "issue_description": "rich7 commented on 23 Apr 2016 \u2022\nedited by ThiefMaster\nI was curious and tried to give flask a try. But it goes wrong from the start.\n$ python hello.py\npython: can't open file 'hello.py': [Errno 2] No such file or directory\n\npi@raspberrypi ~/relaxbank $ find . -name 'hello.py'\npi@raspberrypi ~/relaxbank $\n1", "issue_status": "Closed", "issue_reporting_time": "2016-04-23T06:48:25Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "852": {"issue_url": "https://github.com/pallets/flask/issues/1787", "issue_id": "#1787", "issue_summary": "database: persistent connetion", "issue_description": "chuan137 commented on 21 Apr 2016\nHi,\nI wonder where I should keep the persistent db connection throughout the application, not the request/response context. I read the doc and examples, it looks to me, the persistent connections are made for the request/response life cycle.\nPeople recommend to use a connection pool. Then where should I keep the pool? I use cassandra database. The cluster session does a lot heavy lifting, and automatically manage pool connections. It is nice that user need not worry about the pool management, but it is also expensive, and I should keep it alive on the server throughout the life time of the thread.\nFor a single thread flask server, it is easy, I just initialize the connection, and put it in the global namespace. But somehow it does not work when I use gunicorn to pre-fork the workers. The session does not respond at all.\nSo the question comes back to whether flask can manage a \"long live context\" to store the object? My work around is to put the db setups in a function decorated by \"before_first_request\". It works pretty well, but I consider as a work around, instead of official solutions.\nRegards,\nChuan", "issue_status": "Closed", "issue_reporting_time": "2016-04-21T17:17:41Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "853": {"issue_url": "https://github.com/pallets/flask/issues/1786", "issue_id": "#1786", "issue_summary": "Failed get_json", "issue_description": "yi719 commented on 20 Apr 2016 \u2022\nedited\nhi, we find a strange error, sometime request.get_json(force=True) will fail.\nAnd,\nflask/flask/wrappers.py\nLine 151 in c9b29f4\n data = _get_data(self, cache) \n\ndata here is http header in string instead of http body!!", "issue_status": "Closed", "issue_reporting_time": "2016-04-20T06:40:42Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "854": {"issue_url": "https://github.com/pallets/flask/issues/1785", "issue_id": "#1785", "issue_summary": "g object doesn't work between blueprints", "issue_description": "Yc-Chen commented on 19 Apr 2016\nHi all,\nRecently I developed an app with blueprint and the g object. However the g object gets 'reset' between blueprints. Any idea how to solve it?\nYicong", "issue_status": "Closed", "issue_reporting_time": "2016-04-19T15:38:28Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "855": {"issue_url": "https://github.com/pallets/flask/issues/1784", "issue_id": "#1784", "issue_summary": "Not possible to set a session cookie without a domain attribute when SERVER_NAME is set", "issue_description": "wrr commented on 18 Apr 2016\nIf cookie has no domain attribute, it is valid only for the exact domain to which the request that sets the cookie is addressed, this is often a desirable behavior. A domain attribute makes the cookie also valid for all sub-domains of the specified domain.\nLooking at\nflask/flask/sessions.py\nLine 198 in c9b29f4\n def get_cookie_domain(self, app): \nif SERVER_NAME is set, a cookie will always have a domain attribute (either explicitly set via SESSION_COOKIE_DOMAIN or inferred from the SERVER_NAME).\nWould it be possible to allow setting cookies without a domain when SERVER_NAME is set?", "issue_status": "Closed", "issue_reporting_time": "2016-04-18T09:21:08Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "856": {"issue_url": "https://github.com/pallets/flask/issues/1783", "issue_id": "#1783", "issue_summary": "Automatic redirect with \"/\" breaks routes with different methods", "issue_description": "JelteF commented on 16 Apr 2016 \u2022\nedited\nI have found an issue that is caused by the automatic redirect of routes to the version with a \"/\" at the end. See the code below for a minimal example:\nfrom flask import Flask\napp = Flask(__name__)\n\n\n@app.route(\"/a/\", methods=[\"GET\"])\ndef hello():\n    return \"Hello GET!\\n\"\n\n\n@app.route(\"/a\", methods=[\"POST\"])\ndef hello_post():\n    return \"Hello POST!\\n\"\n\nif __name__ == \"__main__\":\n    app.run()\nThe POST route is unreachable as the \"/\" redirect is done without looking at the method. See the following curl commands (the -L flag is to follow redirects):\n$ curl localhost:5000/a/\nHello GET!\n\n$ curl localhost:5000/a\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<title>Redirecting...</title>\n<h1>Redirecting...</h1>\n<p>You should be redirected automatically to target URL: <a href=\"http://localhost:5000/a/\">http://localhost:5000/a/</a>.  If not click the link.\n\n$ curl localhost:5000/a -L\nHello GET!\n\n$ curl localhost:5000/a -X POST\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<title>Redirecting...</title>\n<h1>Redirecting...</h1>\n<p>You should be redirected automatically to target URL: <a href=\"http://localhost:5000/a/\">http://localhost:5000/a/</a>.  If not click the link.\n\n$ curl localhost:5000/a/ -X POST\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<title>405 Method Not Allowed</title>\n<h1>Method Not Allowed</h1>\n<p>The method is not allowed for the requested URL.</p>\n\n$ curl localhost:5000/a -X POST -L\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<title>405 Method Not Allowed</title>\n<h1>Method Not Allowed</h1>\n<p>The method is not allowed for the requested URL.</p>\nEdit: My python version is Python3.4 and Werkzeug is 0.11.8 but it was also possible with the git version of Werkzeug.", "issue_status": "Closed", "issue_reporting_time": "2016-04-16T11:59:16Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "857": {"issue_url": "https://github.com/pallets/flask/issues/1782", "issue_id": "#1782", "issue_summary": "send_file() function tries to get the file from filesystem even if file-like object is passed", "issue_description": "margru commented on 15 Apr 2016\nI use send_file() function for serving file-like objects from GridFS. However, if the file-like object obtained from the GridFS has assigned a file name, the send_file() function tries to get the file from the file system and I get a \"File not found\"-like error. It should serve the data from the file-like object directly and not to try to find the file on the file system (even when there is a file name assigned to the file-like object). Or am I missing something?", "issue_status": "Closed", "issue_reporting_time": "2016-04-15T17:46:06Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "858": {"issue_url": "https://github.com/pallets/flask/issues/1780", "issue_id": "#1780", "issue_summary": "Question: can flask create 'access.log', and 'error.log'", "issue_description": "jeff1evesque commented on 12 Apr 2016\nI am hoping to create two types of logs:\naccess.log: lists all requests made on the flask application\nerror.log: lists all warnings, and errors made within the flask application\nCurrently, I have defined app.py, which contains logic recycled from a gist comment:\nimport logging\nfrom logging.handlers import RotatingFileHandler\nfrom interface import app\napp.run(host='0.0.0.0')\n\nLOG_FILENAME = '/vagrant/log/access.log'\n\nformatter = logging.Formatter(\n    \"[%(asctime)s] {%(pathname)s:%(lineno)d} %(levelname)s - %(message)s\")\nhandler = RotatingFileHandler(LOG_FILENAME, maxBytes=10000000, backupCount=5)\nhandler.setLevel(logging.DEBUG)\nhandler.setFormatter(formatter)\napp.logger.addHandler(handler)\n\nlog = logging.getLogger('werkzeug')\nlog.setLevel(logging.DEBUG)\nlog.addHandler(handler)\nWhen I adjust my application, by making an unnecessary typo in the logic; or conversely, if I complete a successful post request on my application, nothing gets logged into /vagrant/log/access.log. However, the /vagrant/log/access.log file is created, and empty. Is the above logic equivalent to the error.log that I had intended? If so, how can I correct this, while also creating a functional /vagrant/log/access.log?", "issue_status": "Closed", "issue_reporting_time": "2016-04-12T16:41:23Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "859": {"issue_url": "https://github.com/pallets/flask/issues/1778", "issue_id": "#1778", "issue_summary": "app.route does not catch // when having <path:> in the directive", "issue_description": "tzickel commented on 11 Apr 2016\n@app.route('/test/<path:yey>')\n\n>>> requests.get('http://localhost:5000/test/ye')\n<Response [200]>\n>>> requests.get('http://localhost:5000/test//')\n<Response [404]>\n>>> requests.get('http://localhost:5000/test//test')\n<Response [404]>\n>>> requests.get('http://localhost:5000/test/ye/te')\n<Response [200]>\n>>> requests.get('http://localhost:5000/test/ye//te')\n<Response [200]>\n>>> requests.get('http://localhost:5000/test///te')\n<Response [404]>\n>>> requests.get('http://localhost:5000/test//a/te')\n<Response [404]>\n>>> requests.get('http://localhost:5000/test/a//te')\n<Response [200]>\nAll the 404 stuff should be intercepted but aren't.", "issue_status": "Closed", "issue_reporting_time": "2016-04-10T20:32:57Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "860": {"issue_url": "https://github.com/pallets/flask/issues/1776", "issue_id": "#1776", "issue_summary": "Determine API for integrating custom shells with Flask such as IPython, etc?", "issue_description": "Member\njeffwidman commented on 8 Apr 2016\nContinuing discussion from #1729\nShould Flask shell natively support iPython?\nIf so, what should that API look like?\nShould Flask have a generic hook for extensions to add support for additional third-party shells?\nIf so, how would this work? @RonnyPfannschmidt suggested using entry points for this.\nMy vote is to natively support for iPython since it's so popular (I use it myself all the time via Flask-Script). But draw the line there and require other custom shell integrations to happen through third-party extensions.\n8", "issue_status": "Closed", "issue_reporting_time": "2016-04-08T07:42:17Z", "fixed_by": "#1821", "pull_request_summary": "Added plugin support to the cli", "pull_request_description": "Member\nmitsuhiko commented on 27 May 2016\nThis fixes #1776\n2", "pull_request_status": "Merged", "issue_fixed_time": "2016-05-26T20:17:34Z", "files_changed": [["34", "docs/cli.rst"], ["19", "flask/cli.py"]]}, "861": {"issue_url": "https://github.com/pallets/flask/issues/1775", "issue_id": "#1775", "issue_summary": "Update the list of Approved Extensions", "issue_description": "Member\njeffwidman commented on 8 Apr 2016\nhttp://flask.pocoo.org/docs/dev/extensiondev/#approved-extensions\nDoes anyone keep this updated?\nShould the concept of \"approved\" extensions get dropped?\nSimilarly, with the transition to pallets, what's going to happen to the extensions list itself? http://flask.pocoo.org/extensions/\nWill it get dropped like snippets are?\nSee also #865 about updating the docs on approved extensions.", "issue_status": "Closed", "issue_reporting_time": "2016-04-08T07:21:12Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "862": {"issue_url": "https://github.com/pallets/flask/issues/1774", "issue_id": "#1774", "issue_summary": "API versioning with blueprints causes colission", "issue_description": "alejoar commented on 7 Apr 2016\nThe time has come where I need to release a new version for my api and still support the previous one.\nI have an app structure that looks like this:\n+-- app/\n    +-- api_2_0/\n        +-- __init__.py\n        (...)\n    +-- api_2_1/\n        +-- __init__.py\n        (...)\n   +-- __init__.py\nBoth are blueprints which I initialize this way in my __init__.py in the create_app method (I'm using the app factory method):\n    from .api_2_0 import api as api_2_0_blueprint\n    app.register_blueprint(api_2_0_blueprint, url_prefix='/api/v2.0')\n\n    from .api_2_1 import api as api_2_1_blueprint\n    app.register_blueprint(api_2_1_blueprint, url_prefix='/api/v2.1')\nBut this causes: AssertionError: A blueprint's name collision occurred between <flask.blueprints.Blueprint object at 0x7f8e48e82c10> and <flask.blueprints.Blueprint object at 0x7f8e48ef7150>. Both share the same name \"api\". Blueprints that are created on the fly need unique names.\nIt's true that both are called api inside their folders but I'm importing them with different names. Having to rename all the calls to api to something else for each version would make versioning painful and overall a code spaghetti.\nIs there a better way to do this?", "issue_status": "Closed", "issue_reporting_time": "2016-04-07T10:19:27Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "863": {"issue_url": "https://github.com/pallets/flask/issues/1773", "issue_id": "#1773", "issue_summary": "Issue Template", "issue_description": "vamsi commented on 7 Apr 2016\nIt would be nice if you could add an issue template to the repository.", "issue_status": "Closed", "issue_reporting_time": "2016-04-07T09:37:13Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "864": {"issue_url": "https://github.com/pallets/flask/issues/1772", "issue_id": "#1772", "issue_summary": "Flask docs need rebuilding", "issue_description": "Member\njeffwidman commented on 7 Apr 2016\nd3d8a46 hasn't shown up yet here: http://flask.pocoo.org/docs/dev/extensions/\nI'm not sure how to trigger a rebuild... on RTD, anyone can trigger a rebuild from the web, but since it's hosted on Pocoo I'm not sure if there's a webhook that watches the repo for commits, or if @mitsuhiko has to manually do it.", "issue_status": "Closed", "issue_reporting_time": "2016-04-07T07:57:56Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "865": {"issue_url": "https://github.com/pallets/flask/issues/1770", "issue_id": "#1770", "issue_summary": "'cli' is not found in my library", "issue_description": "pythonhunter commented on 7 Apr 2016\n@app.cli.command('initdb')\ndef initdb_command():\n\"\"\"Creates the database tables.\"\"\"\ninit_db()\nprint('Initialized the database.')", "issue_status": "Closed", "issue_reporting_time": "2016-04-07T01:58:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "866": {"issue_url": "https://github.com/pallets/flask/issues/1769", "issue_id": "#1769", "issue_summary": "Remove link to dotCloud on deployment options", "issue_description": "Member\njeffwidman commented on 6 Apr 2016\nhttp://flask.pocoo.org/docs/dev/deploying/#deployment\ndotCloud went out of business.\n2", "issue_status": "Closed", "issue_reporting_time": "2016-04-05T20:51:16Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "867": {"issue_url": "https://github.com/pallets/flask/issues/1768", "issue_id": "#1768", "issue_summary": "Add Zappa To Flask Deploy Guides", "issue_description": "Miserlou commented on 5 Apr 2016\nSince Zappa now integrates seamlessly with Flask, I was wondering if you'd be open to the notion of having Zappa as one of the documented deployment options. I'm willing to write the docs myself, but I wanted to confirm the feature before submitting a pull request. I've also already written a small tutorial if anybody is interested in learning more.\nThanks!", "issue_status": "Closed", "issue_reporting_time": "2016-04-05T14:29:42Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "868": {"issue_url": "https://github.com/pallets/flask/issues/1765", "issue_id": "#1765", "issue_summary": "Remove ext migration tool from source, link to separate package", "issue_description": "Member\ndavidism commented on 4 Apr 2016\nThis moved to its own repo: pocoo/flask-ext-migrate. It should probably be removed from the Flask repo and the documentation should be updated to mention the migration tool.", "issue_status": "Closed", "issue_reporting_time": "2016-04-04T18:24:14Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "869": {"issue_url": "https://github.com/pallets/flask/issues/1761", "issue_id": "#1761", "issue_summary": "static_file endpoint doesn't love null byte", "issue_description": "Lothiraldan commented on 28 Mar 2016\nHello,\nwhile fuzzing my API, I think I've discovered a Flask issue. The static_file endpoint generate a 500 if the filename include a null byte (\\x00).\nHere is a minimal flask application:\nfrom flask import Flask\napp = Flask(__name__)\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\nI've tried launching it with either python 2 (2.7.11) or python 3 interpreter (3.5.1) with flask 0.10.1, then make this request:\nimport requests\nrequests.get('http://localhost:5000/static/\\x00')\nI get a 500, here is the traceback for python2:\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/site-packages/flask/app.py\", line 1836, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/usr/local/lib/python2.7/site-packages/flask/app.py\", line 1820, in wsgi_app\n    response = self.make_response(self.handle_exception(e))\n  File \"/usr/local/lib/python2.7/site-packages/flask/app.py\", line 1403, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/usr/local/lib/python2.7/site-packages/flask/app.py\", line 1817, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/usr/local/lib/python2.7/site-packages/flask/app.py\", line 1477, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"/usr/local/lib/python2.7/site-packages/flask/app.py\", line 1381, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/usr/local/lib/python2.7/site-packages/flask/app.py\", line 1475, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"/usr/local/lib/python2.7/site-packages/flask/app.py\", line 1461, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"/usr/local/lib/python2.7/site-packages/flask/helpers.py\", line 823, in send_static_file\n    cache_timeout=cache_timeout)\n  File \"/usr/local/lib/python2.7/site-packages/flask/helpers.py\", line 613, in send_from_directory\n    if not os.path.isfile(filename):\n  File \"/usr/local/Cellar/python/2.7.11/Frameworks/Python.framework/Versions/2.7/lib/python2.7/genericpath.py\", line 37, in isfile\n    st = os.stat(path)\nTypeError: must be encoded string without NULL bytes, not unicode\nAnd here is the traceback for python 3:\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.5/site-packages/flask/app.py\", line 1836, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/usr/local/lib/python3.5/site-packages/flask/app.py\", line 1820, in wsgi_app\n    response = self.make_response(self.handle_exception(e))\n  File \"/usr/local/lib/python3.5/site-packages/flask/app.py\", line 1403, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/usr/local/lib/python3.5/site-packages/flask/_compat.py\", line 33, in reraise\n    raise value\n  File \"/usr/local/lib/python3.5/site-packages/flask/app.py\", line 1817, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/usr/local/lib/python3.5/site-packages/flask/app.py\", line 1477, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"/usr/local/lib/python3.5/site-packages/flask/app.py\", line 1381, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/usr/local/lib/python3.5/site-packages/flask/_compat.py\", line 33, in reraise\n    raise value\n  File \"/usr/local/lib/python3.5/site-packages/flask/app.py\", line 1475, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"/usr/local/lib/python3.5/site-packages/flask/app.py\", line 1461, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"/usr/local/lib/python3.5/site-packages/flask/helpers.py\", line 823, in send_static_file\n    cache_timeout=cache_timeout)\n  File \"/usr/local/lib/python3.5/site-packages/flask/helpers.py\", line 613, in send_from_directory\n    if not os.path.isfile(filename):\n  File \"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/genericpath.py\", line 30, in isfile\n    st = os.stat(path)\nValueError: embedded null byte\nThe error is not exactly the same but isfile doesn't seems to love null bytes.\nI've tried to fix it locally by adding this piece of code to detect null bytes in send_static_file (https://github.com/mitsuhiko/flask/blob/master/flask/helpers.py#L862):\nif '\\x00' in filename:\n     raise RuntimeError(\"Null byte\")\nIt seems to works with both python2 and python3, but I'm not sure what is the best response when the request include a null byte.\nHere is the output of pip freeze if necessary:\nFlask==0.10.1\nitsdangerous==0.24\nJinja2==2.8\nMarkupSafe==0.23\nWerkzeug==0.11.5\nI only tried on Mac OS X 10.11.4, I don't know if null byte are accepted in valid filename on other filesystems.", "issue_status": "Closed", "issue_reporting_time": "2016-03-28T16:43:48Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "870": {"issue_url": "https://github.com/pallets/flask/issues/1757", "issue_id": "#1757", "issue_summary": "Is there a way to design blueprints to incorporate DELETE?", "issue_description": "rlam3 commented on 20 Mar 2016\nIs there a way to design blueprints to incorporate DELETE?\nI've been getting a error for a long time because I want to implement a form button action to just do a basic delete functionality for my app.\nMethod Not Allowed\n\nThe method is not allowed for the requested URL.\nThis is what my method looks like and nothing seems to be working...\n@mod.route('/region/<region_id>', methods=['DELETE'])\ndef delete_region(region_id):\nIt seems as if Flask only does GET and POST not DELETE or PUT... And my only alternative is to do GET based DELETE methods as an alternative workaround... this however when logging proves to be not the best way to display my data and how it is modified or accessed. Any advice here? Thanks a bunch.\nAlso, I'm not making an API ... I just want to make a link to delete one specific entry.\nGET based DELETE\n\n@mod.route('/region/<region_id>/delete', methods=['GET'])\ndef delete_region(region_id):\nReferences:\nhttps://www.reddit.com/r/flask/comments/2ax1mf/af_delete_example/", "issue_status": "Closed", "issue_reporting_time": "2016-03-20T00:19:35Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "871": {"issue_url": "https://github.com/pallets/flask/issues/1756", "issue_id": "#1756", "issue_summary": "Want to change the default server address for flask application", "issue_description": "khanstark commented on 18 Mar 2016\nI did this-- if __name__ == '__main__': app.run(host='0.0.0.0',port='80')\nbut i get Permission denied error... couldn't find anything in the documentation. Is there any other way to accomplish this? It was relatively easier to do this in django.\nThanks!", "issue_status": "Closed", "issue_reporting_time": "2016-03-18T07:36:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "872": {"issue_url": "https://github.com/pallets/flask/issues/1749", "issue_id": "#1749", "issue_summary": "JSONEncoder and aware datetimes", "issue_description": "vitriol commented on 11 Mar 2016\nI was surprised to see that though flask.json.JSONEncoder accepts datetime objects, it ignores the timezone. I checked werkzeug.http.http_date and it can handle timezone aware dates just fine if they are passed in, but the JSONEncoder insists on transforming the datetime to a timetuple, like this\nreturn http_date(o.timetuple())\nThis means i have to convert all my dates to utc before encoding them, otherwise I should overwrite the dafault() method in the encoder. Can you help me understand why the encoder was made to function with naive dates only?\nThx\n1", "issue_status": "Closed", "issue_reporting_time": "2016-03-11T14:39:30Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "873": {"issue_url": "https://github.com/pallets/flask/issues/1746", "issue_id": "#1746", "issue_summary": "I want to clear the session when I close the program. What shoud I do?", "issue_description": "AntonyXuX commented on 7 Mar 2016\nthe session['username'] isn't cleared when I close the program and then run the program.\nI want to clear the session when I close the program. What shoud I do?\nE.g:\nhttp://flask.pocoo.org/docs/0.10/quickstart/#sessions", "issue_status": "Closed", "issue_reporting_time": "2016-03-07T07:21:33Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "874": {"issue_url": "https://github.com/pallets/flask/issues/1744", "issue_id": "#1744", "issue_summary": "auto_find_instance_path() gives inconsistent results", "issue_description": "rbrtmrtn commented on 5 Mar 2016\nI have a fairly straightforward project scaffolded out that looks like\nmy_app/\n    my_app/\n        __init__.py\n        models.py\n        mod1/\n        mod2/\n    instance/\n        config.py\n    config.py\n    setup.py\nI installed this as a package to a virtualenv with setup.py develop. My __init__.py looks like:\nfrom flask import Flask\nfrom flask.ext.sqlalchemy import SQLAlchemy\n\napp = Flask(__name__, instance_relative_config=True)\napp.config.from_pyfile('config.py')\n\ndb = SQLAlchemy(app)\nIf I run this file, I get an error Unable to load configuration file (No such file or directory): '/home/my_app/my_app/instance/config.py'. Indeed, this is the wrong path; it should be looking in /home/my_app/instance/config.py.\nThe file models.py contains only one line of code so far: from my_app import db. I can run this without any errors, which is obviously executing all the code in __init__.py as well. If I check the value of Flask.auto_find_instance_path in this context it has the correct path, unlike above.\nUnless I am doing something wrong here, or this is a consequence of setup.py developing that I'm not understanding -- I believe this is an issue with the find_package helper called by auto_find_instance_path . When I run __init__.py directly, __name__ is set to __main__, which causes find_package to return os.getcwd(). When I run models.py, the __name__ for __init__.py is set to my_app which causes it to resolve properly via the module name.\nThis is my first large/packaged Flask project so maybe I'm missing something, but I believe the docs say that your instance folder should be next to your main application module, not inside it. If that's the case, why does find_package attempt to look in the current working directory? Shouldn't it look in the parent directory?", "issue_status": "Closed", "issue_reporting_time": "2016-03-04T21:10:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "875": {"issue_url": "https://github.com/pallets/flask/issues/1740", "issue_id": "#1740", "issue_summary": "Not able to set encoding in open_resource", "issue_description": "JiriBalcar commented on 3 Mar 2016\nIf the resource from the application's resource folder is encoded in different encoding than locale.getpreferredencoding the UnicodeDecodeError: 'charmap' codec can't decode byte 0x8d in position 217 occures. We should be able to set encoding on open_resource\nPython 3.5.1, Flask 0.10.1\n1", "issue_status": "Closed", "issue_reporting_time": "2016-03-03T18:01:23Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "876": {"issue_url": "https://github.com/pallets/flask/issues/1737", "issue_id": "#1737", "issue_summary": "thwart giving error", "issue_description": "sdp0975 commented on 24 Feb 2016\nexecuting this code on Python 2.7.10 [GCC 5.2.1 20151010] on linux2\nimport flask\nfrom MySQLdb import escape_string as thwart\nusername=\"abc\"\n\nconn = MySQLdb.connect(host=\"localhost\",user=\"root\", passwd=\"xxxxxxx\",db=\"pythonprogramming\")\nc       = conn.cursor()\nx       = c.execute(\"SELECT * FROM users WHERE username = (%s)\", (thwart(username)))\ngetting error\nTraceback (most recent call last):\nFile \"\", line 1, in\nTypeError: must be impossible, not str\nthis is MySQL version on my PC\n+-------------------------+------------------------------+\n| Variable_name | Value\n+-------------------------+------------------------------+\n| innodb_version | 5.7.11\n| protocol_version | 10\n| slave_type_conversions |\n| tls_version | TLSv1,TLSv1.1\n| version | 5.7.11\n| version_comment | MySQL Community Server (GPL) |\n| version_compile_machine | x86_64\n| version_compile_os | Linux\n+-------------------------+------------------------------+", "issue_status": "Closed", "issue_reporting_time": "2016-02-23T19:11:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "877": {"issue_url": "https://github.com/pallets/flask/issues/1736", "issue_id": "#1736", "issue_summary": "Documentation download links for PDF and zipped HTML return 404s on http://flask.pocoo.org/", "issue_description": "ghost commented on 22 Feb 2016\nI was trying to download the documentation from http://flask.pocoo.org/ using the PDF link and got a 404. At the same time also tried the zipped HTML link and that returned a 404 as well.", "issue_status": "Closed", "issue_reporting_time": "2016-02-22T15:47:29Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "878": {"issue_url": "https://github.com/pallets/flask/issues/1735", "issue_id": "#1735", "issue_summary": "404 on Docs download url", "issue_description": "dellelce commented on 22 Feb 2016\nThe Docs archive/pdf download url on the website give a 404, but the 404 page looks very nice!!!", "issue_status": "Closed", "issue_reporting_time": "2016-02-22T12:21:37Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "879": {"issue_url": "https://github.com/pallets/flask/issues/1734", "issue_id": "#1734", "issue_summary": "You may want to include this example base Docker image with uWSGI and Nginx in the docs", "issue_description": "tiangolo commented on 20 Feb 2016\nI made a public (and open source) Docker image that you can use to build a Python Flask web application.\nIt has uWSGI for running the application, Nginx to serve HTTP and Supervisord to control them, so you don't have to learn how to install and configure all those to build your Python Flask web app.\nIt seems like uWSGI with Nginx is one of the more robust (and with great performance) ways to deploy a Python web app. Here are the benchmarks: http://nichol.as/benchmark-of-python-web-servers.\nIf there was an official Flask Docker image for deployment I would like to use it. But then, if there was an open source performant Docker image that could help deploying an app without having to learn, install and configure uWSGI, Nginx, Supervisord, I would have liked to find it in your docs.\nNow that I built this one, you may want to include it in your docs, maybe as \"a third party example\" or something. If you think this could be useful, I could submit a PR.\nI think it could be in deploying: http://flask.pocoo.org/docs/0.10/deploying/\nOr in snippet category deployment: http://flask.pocoo.org/snippets/category/deployment/\nThere are even some template projects you can use to bootstrap your own. And also, you don't have to clone the full project or something, you can just use it as a base image.\nDocker Hub: https://hub.docker.com/r/tiangolo/uwsgi-nginx-flask/\nGitHub: https://github.com/tiangolo/uwsgi-nginx-flask-docker", "issue_status": "Closed", "issue_reporting_time": "2016-02-20T15:52:47Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "880": {"issue_url": "https://github.com/pallets/flask/issues/1732", "issue_id": "#1732", "issue_summary": "Registering blueprint couldn't catch hyphen in url_prefix", "issue_description": "ghost commented on 18 Feb 2016\nI'm not sure there is a kind of convention in url_prefix for registering blueprint. If not, It behaves weird.\nI'd made cs-log app and register it on app.py like this.\napp.register_blueprint(\n  inventory_views.blueprint,\n  url_prefix='/v1/<project_uuid>/<app_name>/inventory-info')\napp.register_blueprint(\n  custom_query_views.blueprint,\n  url_prefix='/v1/<project_uuid>/<app_name>/custom_query')\napp.register_blueprint(\n  cs_log_views.blueprint,\n  url_prefix='/v1/<project_uuid>/<app_name>/cs-log')\nand try to approach to cs-log, flask give me a 404 error. After a few of try to fixing it, I've changed an order of registering like this.\napp.register_blueprint(\n  inventory_views.blueprint,\n  url_prefix='/v1/<project_uuid>/<app_name>/inventory-info')\napp.register_blueprint(\n  cs_log_views.blueprint,\n  url_prefix='/v1/<project_uuid>/<app_name>/cs-log')\napp.register_blueprint(\n  custom_query_views.blueprint,\n  url_prefix='/v1/<project_uuid>/<app_name>/custom_query')\nthen it works I expected. Did I miss something? I think underbar in url_prefix of customer_query_views affect to url_prefix with hyphen.\nIf something can't understand in my article, reply me.", "issue_status": "Closed", "issue_reporting_time": "2016-02-18T08:03:48Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "881": {"issue_url": "https://github.com/pallets/flask/issues/1731", "issue_id": "#1731", "issue_summary": "jsonify does not accept strings", "issue_description": "nadrane commented on 17 Feb 2016\nIf I try to feed a string into jsonify, I get the following error:\nValueError: dictionary update sequence element #0 has length 1; 2 is required\nI imagine this is intentional... perhaps it's related to the same problem described in issue #170 ?", "issue_status": "Closed", "issue_reporting_time": "2016-02-17T17:12:14Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "882": {"issue_url": "https://github.com/pallets/flask/issues/1727", "issue_id": "#1727", "issue_summary": "Documentation PDF version is not available", "issue_description": "kalinchernev commented on 14 Feb 2016\nHi,\nFrom home page, the link to the pdf version of the documentation should be http://flask.pocoo.org/docs/flask-docs.pdf but it's currently unavailable.\nIf the link is wrong, could you please provide a correct one?", "issue_status": "Closed", "issue_reporting_time": "2016-02-14T14:39:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "883": {"issue_url": "https://github.com/pallets/flask/issues/1726", "issue_id": "#1726", "issue_summary": "Duplicate key in jsonify", "issue_description": "vietvudanh commented on 13 Feb 2016\nHi, I was following the tutorial on Flask at this.\nAnd I tried to return json data so I use jsonify\nI found out that jsonify use dict() to convert params into a dict. But this will remove items with duplicate key.\nIn my case, I querried the data using this query\ncur = g.db.execute('SELECT title, text from entries order by id desc')\nThe data was:\n[(u'Nope', u'hi, this is anoooother things'), (u'Nope', u'This is another'), (u'Hi', u'This is a sample entry')]\nSo the jsonify just return:\n{ \"Hi\": \"This is a sample entry\", \"Nope\": \"This is another\" }\nThe code work correctly, but I don't know if this is intended or not?", "issue_status": "Closed", "issue_reporting_time": "2016-02-13T05:42:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "884": {"issue_url": "https://github.com/pallets/flask/issues/1725", "issue_id": "#1725", "issue_summary": "Run Flask in Thread, user the main thread for own logic?", "issue_description": "TheCherry commented on 12 Feb 2016\nHi,\nis it possible to let Flask run in a Thread?\nI have the problem that in my project, I have to use the VBox XPCOM API, this api work only in the main thread:\nbash return xpcom._xpcom.WaitForEvents(timeout) Exception: wrong thread, use the main thread\nNow I want run as example a Job thread, this thread have to do sometimes, something with VBox.\nAnd I want to let run the Flask Server with the arg threaded=True.\nNow it will be very nice, if I can spawn the app.run into a Thread and in the main Thread run a loop whats call the VBox XPCOM API", "issue_status": "Closed", "issue_reporting_time": "2016-02-12T08:11:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "885": {"issue_url": "https://github.com/pallets/flask/issues/1719", "issue_id": "#1719", "issue_summary": "Flask will prevents media downloads while playing --", "issue_description": "jackmullen commented on 5 Feb 2016\nHello:\nI am using flask 0.10.1\nI have attempted the solution to this problem using several server configurations including the built in testing server, the eventlet server along with Miguel Grinberg's flask-socketio module ( as I want to use this module in the final product) and also using nginx setup with uwsgi and also as a proxy server listening on port 5000 for flask activity.\nI am attempting to serve media files, for download not streaming. I have been using flask.send_from_directory() and using the appropriate headers to cause down load in a browser and for the most part that works -- the as_attachment header causes a download box and download begins. I have also written a wrapper around send_file() and attached headers to the response object and finally I have ignored a route and just allowed flask to deal with the static file alone.\nThe issue is this. A media file such as an .mp3 file should be able to be downloaded while playing as is the standard behavior of nginx standalone ( which I tried ) and apache ( which I setup and tried ) .. But with flash (regardless of the headers provided ) an .mp3 file and for that matter, any media file, is streamed to the player. In other words it is not spun out as fast as bandwidth permits and does not trigger the player to gobble up the data and fill a buffer and start player when sufficient data arrives. What happens is the player thinks it has a \"live broadcast\" -- like an icecast server or similar.\nNow this is a problem for the application I am building because the idea is to provide low bandwidth audio files for play back in a mobile or other device (say a itunes player or quicktime) -- In this way the file is quickly downloaded and begins playing as soon as enough data is available to meet the players buffer requirement.\nNext I did an experiment where I used the uwsgi server before the nginx and let nginx start the flask application when requested as specified in the uwsgi ini file and the nginx config file. When I set up the server configuration this way -- nginx WILL serve the file with the behavior I was expecting -- in other words, the file will be gobbled up by the player and play will begin when enough data is accumulated.\nI have tried all possible headers to cause the flask/nginx flask/eventlet flask/test-server to not stream the file but rather feed out as fast as bandwidth permits. I believe this is a problem for people wanting to use Flask for purpose of serving media files in a specialized ways. Having the flask server baby sit the stream leads to \"broken pipe\" problems in the player and the stream is restarted again. I have also included the 'accept-ranges' = 'bytes' header with no difference. I have compared the request headers with other download sites providing mp3 files for listening and they are the same -- except that the other sites do not stream the data is downloaded by the player while playing.\nlastly -- Please note that I can cause a download box to open on the browser using the as_attachment =true header .. but this does not affect the behavior with player apps such as quicktime or VLC etc ..\nIs there one or more things I might be overlooking? Has anyone observed this phenomenon ? Is there a work around ?", "issue_status": "Closed", "issue_reporting_time": "2016-02-04T21:24:55Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "886": {"issue_url": "https://github.com/pallets/flask/issues/1718", "issue_id": "#1718", "issue_summary": "Broken document links.", "issue_description": "ChangJoo-Park commented on 4 Feb 2016\nhttp://flask.pocoo.org/docs/flask-docs.pdf\nhttp://flask.pocoo.org/docs/flask-docs.zip\nthese are broken links.", "issue_status": "Closed", "issue_reporting_time": "2016-02-04T17:56:11Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "887": {"issue_url": "https://github.com/pallets/flask/issues/1717", "issue_id": "#1717", "issue_summary": "nginx upstream check, but the access log is wrong.", "issue_description": "staugur commented on 4 Feb 2016\nSome version information\n1. Tengine version: Tengine/2.1.2 (nginx/1.6.2)\n2.CentOS6.7  python2.6\n3.Flask Version: 0.10.1\nNginx configuration file content:\n    upstream weibo {\n        ip_hash;\n        server 127.0.0.1:7076;\n        check interval=3000 rise=2 fall=5 timeout=1000 type=http;\n        #check_http_expect_alive http_2xx http_3xx ;\n        check_http_send \"GET / HTTP/1.0\\r\\n\\r\\n\";\n    }\n    server {\n        listen 80;\n        client_max_body_size 50M;\n        server_name weibo.saintic.com;\n        location / {\n            proxy_pass_header Server;\n            proxy_set_header Host $http_host;\n            proxy_redirect off;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Scheme $scheme;\n            proxy_pass http://weibo;\n        }\n        location /nstatus {\n           check_status;\n           access_log off;\n        }\n    }\nMy flask app(https://github.com/saintic/ULR/blob/master/ulr.py)\nAccess log error:\n127.0.0.1 - - [04/Feb/2016 17:24:54] \"GET / HTTP/1.0\" 302 -\nTraceback (most recent call last):\n  File \"/usr/lib64/python2.6/SocketServer.py\", line 293, in _handle_request_noblock\n    self.process_request(request, client_address)\n  File \"/usr/lib64/python2.6/SocketServer.py\", line 319, in process_request\n    self.finish_request(request, client_address)\n  File \"/usr/lib64/python2.6/SocketServer.py\", line 332, in finish_request\n    self.RequestHandlerClass(request, client_address, self)\n  File \"/usr/lib64/python2.6/SocketServer.py\", line 628, in __init__\n    self.finish()\n  File \"/usr/lib64/python2.6/SocketServer.py\", line 671, in finish\n    self.wfile.flush()\n  File \"/usr/lib64/python2.6/socket.py\", line 303, in flush\n    self._sock.sendall(buffer(data, write_offset, buffer_size))\nerror: [Errno 32] Broken pipe", "issue_status": "Closed", "issue_reporting_time": "2016-02-04T09:29:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "888": {"issue_url": "https://github.com/pallets/flask/issues/1714", "issue_id": "#1714", "issue_summary": "Lack of documentation on how to serve Flask under a non-root path", "issue_description": "Contributor\nLarivact commented on 2 Feb 2016\nIf I am not mistaken the docs lack a good description on how to setup Flask to use a different application root path. I summarized my current understanding in this Gist.\nAlso the name of Flask's APPLICATION_ROOT config variable is pretty misleading. One could wrongly assume that it affects routing (stripping away application_root) and url_for() (prepending application_root). I do not even get the point of the current APPLICATION_ROOT setting because there already is SESSION_COOKIE_PATH.", "issue_status": "Closed", "issue_reporting_time": "2016-02-02T05:37:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "889": {"issue_url": "https://github.com/pallets/flask/issues/1713", "issue_id": "#1713", "issue_summary": "Documentation on Localtunnel link is invalid", "issue_description": "gerrat commented on 2 Feb 2016\nThe bottom of the quickstart page has a link: Sharing your Localhost Server with Localtunnel to a page with old/outdated information on Localtunnel. (it is pointing to Localtunnel here, which doesn't exist).\nLocaltunnel now appears to be: here or on github here, and is installed via npm, not gem.", "issue_status": "Closed", "issue_reporting_time": "2016-02-01T22:38:54Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "890": {"issue_url": "https://github.com/pallets/flask/issues/1712", "issue_id": "#1712", "issue_summary": "Wsgi failure", "issue_description": "dendisuhubdy commented on 30 Jan 2016\n52.90.119.128 - - [30/Jan/2016 17:51:03] \"POST / HTTP/1.1\" 500 -\nTraceback (most recent call last):\nFile \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1836, in call\nreturn self.wsgi_app(environ, start_response)\nFile \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1820, in wsgi_app\nresponse = self.make_response(self.handle_exception(e))\nFile \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1403, in handle_exception\nreraise(exc_type, exc_value, tb)\nFile \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1817, in wsgi_app\nresponse = self.full_dispatch_request()\nFile \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1477, in full_dispatch_request\nrv = self.handle_user_exception(e)\nFile \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1381, in handle_user_exception\nreraise(exc_type, exc_value, tb)\nFile \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1475, in full_dispatch_request\nrv = self.dispatch_request()\nFile \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1461, in dispatch_request\nreturn self.view_functionsrule.endpoint\nFile \"/home/ubuntu/jarvis/main.py\", line 55, in sms\ntxt.append(line.split(None, 1)[0]) # add only first word", "issue_status": "Closed", "issue_reporting_time": "2016-01-30T17:51:42Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "891": {"issue_url": "https://github.com/pallets/flask/issues/1710", "issue_id": "#1710", "issue_summary": "Allow specifying blueprint-local JSON encoder", "issue_description": "Contributor\njfinkels commented on 30 Jan 2016\nA user can specify a JSONEncoder on a Flask application, but it would be useful to be able to specify a JSONEncoder on a blueprint as well, so that requests made to that blueprint would receive responses interpreted by the specified JSON encoder.\nThis is important, for example, in Flask-Restless, where we would like to transform SQLAlchemy objects into JSON objects at the blueprint level, without modifying the JSON Encoder assigned to the specific Flask application.\n1", "issue_status": "Closed", "issue_reporting_time": "2016-01-30T09:33:20Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "892": {"issue_url": "https://github.com/pallets/flask/issues/1709", "issue_id": "#1709", "issue_summary": "Test Custom flask cli commands", "issue_description": "erwagasore commented on 29 Jan 2016\nI have a number of custom commands that I have created\n@app.cli.command()\n@click.option('-c', '--with-coverage', is_flag=True, help=\"Turn on coverage reporting\")\n@click.option('-d', '--debug', is_flag=True, help=\"Enter pdb on test fail or error\")\n@click.option('-f', '--failfast', is_flag=True, help=\"Stop the test run after the first error or failure\")\n@click.option('-v', '--verbose', is_flag=True, help=\"Print test case names and statuses\")\ndef tests(with_coverage, debug, failfast, verbose):\n    \"\"\"Testing operation commands\"\"\"\n    options = list()\n    options.append(sys.argv[0])\n\n    if with_coverage:\n        options.append('-C')\n    if debug:\n        options.append('-D')\n    if failfast:\n        options.append('-F')\n    if verbose:\n        options.append('-v')\n\n    defaults = ['--coverage={}'.format(app.config['PROJECT_DIR']),\n                '--coverage-config={}'.format(app.config['COVERAGE_CONFIG']),\n                '--coverage-report=term-missing']\n    options.extend(defaults)\n    discover(argv=options)\nClick provides a CliRunner class to help testing Click commands. Trying to test I get NoAppException with this message\nCould not locate Flask application. You did not provide FLASK_APP or the --app parameter\nHere is the test snippet\nfrom app.commands import tests\nfrom click.testing import CliRunner\n\nrunner = CliRunner()\n\nClass TestCommands(unittest.TestCase):\n    def test_tests(self):\n        result = runner.invoke(tests)\n        self.assertTrue(result.exit_code == 0) # fails", "issue_status": "Closed", "issue_reporting_time": "2016-01-28T18:32:27Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "893": {"issue_url": "https://github.com/pallets/flask/issues/1708", "issue_id": "#1708", "issue_summary": "I want to know is there a way to share data between multiple request in one application at server side?", "issue_description": "echoyuanliang commented on 28 Jan 2016\nNo description provided.", "issue_status": "Closed", "issue_reporting_time": "2016-01-28T12:48:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "894": {"issue_url": "https://github.com/pallets/flask/issues/1707", "issue_id": "#1707", "issue_summary": "TypeError: 'list' object is not callable", "issue_description": "binhvq commented on 28 Jan 2016\nException on / [GET] [/usr/lib/python2.7/site-packages/flask/app.py:1423]\nTraceback (most recent call last):\n  File \"/usr/lib/python2.7/site-packages/flask/app.py\", line 1817, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/usr/lib/python2.7/site-packages/flask/app.py\", line 1478, in full_dispatch_request\n    response = self.make_response(rv)\n  File \"/usr/lib/python2.7/site-packages/flask/app.py\", line 1577, in make_response\n    rv = self.response_class.force_type(rv, request.environ)\n  File \"/usr/lib/python2.7/site-packages/werkzeug/wrappers.py\", line 847, in force_type\n    response = BaseResponse(*_run_wsgi_app(response, environ))\n  File \"/usr/lib/python2.7/site-packages/werkzeug/test.py\", line 871, in run_wsgi_app\n    app_rv = app(environ, start_response)\nTypeError: 'list' object is not callable\n@app.route('/')\n@cache.cached(timeout=30)\ndef site_index():\n    _cates, cates = app.get_cates_home(), []\n    if not _cates:\n        return render_template('maintain.htm')\n    route = routes['index']\n    featured = app.get_news_by_priority(8, route['featured'])\n    featured_ids = [fea['id'] for fea in featured]\n    hotnews = app.get_news_hot(route['new'], featured_ids)\n    popular = app.get_news_by_priority(7, route['popular'])\n    result = {'pagetitle': app.appname,\n              'featured': featured,\n              'hot': hotnews,\n              'popular': popular,\n              'cates': cates}\n    return render_template('index.htm', **result)\nWhy error. 2 my return function too return with function render_template.\nIm' runing flask with uwsgi and 8 process. Error 1% request has this error.", "issue_status": "Closed", "issue_reporting_time": "2016-01-28T03:30:35Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "895": {"issue_url": "https://github.com/pallets/flask/issues/1706", "issue_id": "#1706", "issue_summary": "Separate Config to its own package", "issue_description": "adamhadani commented on 28 Jan 2016\nHello,\nI'd like to propose splitting off the config.py module (encompassing the Config application and its various helpers) into it's own standalone Python module, and adding it as a dependency.\nReasoning:\nIt's a great standalone piece of functionality! People would find this useful on its own and be able to contribute / maintain it separately as an open source Python package, with all the benefits that has (e.g test coverage, functionality such as support for more config types etc etc - things that come with more usage and visibility of the project)\nSpecific real-world use case in mind which I ran into - In a scenario of having a SOA architecture comprised of many micro-services, and among those services having a mix of Flask webapps (e.g APIs) and daemons (e.g services that have no web interface but run some periodic logic), it would be great to be able to use the same configuration mechanism to configure both types. Flask would only used for the API (webapp) services, and it feels excessive to need to add it as a requirement only to be able to extract its flask.config module...", "issue_status": "Closed", "issue_reporting_time": "2016-01-27T21:51:01Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "896": {"issue_url": "https://github.com/pallets/flask/issues/1705", "issue_id": "#1705", "issue_summary": "Reload is not active for all my running Flask instances in debug mode", "issue_description": "k3z commented on 26 Jan 2016\nI need to run several flask apps at the same time in my dev environment.\nAll apps run in a Vagrant box on Debian 8 with Flaks 0.10.1\nWhen I start in a shell the first flask app with debug and reload enabled and I touch a file on the project, all works fine. The flask app reload and I see the changes.\nWhen I start another flask app in a second shell in debug mode at the same time, the app won\u2019t reload.\nIn all cases, only the first app reload.\nWhen I quit the app that won\u2019t reload, I get this error.\nException in thread Thread-2 (most likely raised during interpreter shutdown):\nTraceback (most recent call last):\n  File \"/usr/lib/python2.7/threading.py\", line 810, in __bootstrap_inner\n  File \"/home/politis/frontend.dev/local/lib/python2.7/site-packages/watchdog/observers/api.py\", line 200, in run\n<type 'exceptions.AttributeError'>: 'NoneType' object has no attribute 'Empty'\nException in thread Thread-1 (most likely raised during interpreter shutdown):\nTraceback (most recent call last):\n  File \"/usr/lib/python2.7/threading.py\", line 810, in __bootstrap_inner\n  File \"/usr/lib/python2.7/threading.py\", line 763, in run\n  File \"/home/politis/frontend.dev/local/lib/python2.7/site-packages/werkzeug/serving.py\", line 657, in inner\n  File \"/home/politis/frontend.dev/local/lib/python2.7/site-packages/werkzeug/serving.py\", line 497, in serve_forever\n  File \"/usr/lib/python2.7/SocketServer.py\", line 241, in serve_forever\n  File \"/usr/lib/python2.7/threading.py\", line 586, in set\n  File \"/usr/lib/python2.7/threading.py\", line 407, in notifyAll", "issue_status": "Closed", "issue_reporting_time": "2016-01-26T09:10:14Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "897": {"issue_url": "https://github.com/pallets/flask/issues/1704", "issue_id": "#1704", "issue_summary": "Remove old version added and changed tags", "issue_description": "Member\ndavidism commented on 26 Jan 2016\nSome of these lists are getting a bit long and irrelevant. We should remove everything that wasn't added or changed in 1.0 for the 1.0 release. This will reset the baseline that things will be added or changed from in the future.\n2", "issue_status": "Closed", "issue_reporting_time": "2016-01-26T07:10:11Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "898": {"issue_url": "https://github.com/pallets/flask/issues/1701", "issue_id": "#1701", "issue_summary": "Is it needed to add a decorator like Flask.on_app_start ?", "issue_description": "jjwt commented on 25 Jan 2016\nThere is a similar question at http://stackoverflow.com/questions/25504149/why-does-running-the-flask-dev-server-run-itself-twice.\nBut i do not think it is my case. I just save all\ncodes before run the server, but it still goes twice !\nI do not want to use Flask.before_first_request, for i want it run\non startup , not wailt util a request comes in.\nI write a small app with flask and celery.\nI add some periodic tasks and they work well.\nAnd I want a task run when the app starts,\nbut I find celery receives it and run it twice,\nwhy?\nmy config.py is\nBROKER_URL = 'redis://localhost:6379/0'\nBROKER_TRANSPORT_OPTIONS = {'visibility_timeout': 3600}  \\# 1 hour.\nCELERY_RESULT_BACKEND = 'redis://localhost:6379/0'\nBROKER_TRANSPORT_OPTIONS = {'fanout_prefix': True}\nCELERY_ACCEPT_CONTENT = ['pickle', 'json', 'msgpack', 'yaml']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = 'Asia/Shanghai'\nCELERY_ENABLE_UTC = True\n\nCELERYBEAT_SCHEDULE = {\n    'delcookiefiles-every-1-hour': {\n        'task': 'TiebaTools.tasks.del_cookiefile',\n        'schedule': timedelta(hours=1),\n    },\n    'daily_sign': {\n        'task': 'TiebaTools.tasks.daily_sign',\n        'schedule': crontab(minute=30, hour=0),\n    },\n}\n...\nmy proj/TiebaTools/__init__.py is\n...\napp = Flask(__name__, instance_relative_config=True)\napp.config.from_object('config')\napp.config.from_pyfile('config.py')\n\n\\# integrae sqlalchemy\ndb.init_app(app)\n\n\\# integrae Celery\ncel.conf.update(app.config)\nTaskBase = cel.Task\n\n\nclass ContextTask(TaskBase):\n    abstract = True\n\n    def __call__(self, *args, **kwargs):\n        with app.app_context():\n            return TaskBase.__call__(self, *args, **kwargs)\n\ncel.Task = ContextTask\n...\nmy proj/run.py is\nfrom TiebaTools import app, db\nfrom TiebaTools.tasks import daily_sign\nwith app.app_context():\n    db.create_all()\n\ndaily_sign.delay()\napp.run()\nI run the app as below\nredis-server (in one terminal)\nvenv/bin/celery worker -B -A TiebaTools.cel --loglevel=info (in second terminal)\nvenv/bin/python run.py (in third terminal)\nafter first two commands execute, all go well, no task received.\nBut after the third command executes, message as below comes out in the second terminal.\n[2016-01-24 21:03:43,989: INFO/MainProcess] Received task: TiebaTools.tasks.daily_sign[7f229395-b403-4d4b-9d6f-a009b603f9f6]\n[2016-01-24 21:03:43,991: WARNING/Worker-6] \nDEBUG in tasks [/home/dyh/svn/Tieba-Tools/TiebaTools/tasks.py:99]:\nupdate_all_tblist task starts !\n\n[2016-01-24 21:03:43,991: DEBUG/Worker-6] update_all_tblist task starts !\n[2016-01-24 21:03:44,013: INFO/MainProcess] Task TiebaTools.tasks.daily_sign[7f229395-b403-4d4b-9d6f-a009b603f9f6] succeeded in 0.0229967209888855s: '{\"result\": \"none TiebaList to sign !\"}'\n[2016-01-24 21:03:44,346: INFO/MainProcess] Received task: TiebaTools.tasks.daily_sign[fca044d1-29d8-4910-b71b-a7fc44d8a9a1]\n[2016-01-24 21:03:44,347: WARNING/Worker-3] \nDEBUG in tasks [/home/dyh/svn/Tieba-Tools/TiebaTools/tasks.py:99]:\nupdate_all_tblist task starts !\n\n[2016-01-24 21:03:44,347: DEBUG/Worker-3] update_all_tblist task starts !\n[2016-01-24 21:03:44,368: INFO/MainProcess] Task TiebaTools.tasks.daily_sign[fca044d1-29d8-4910-b71b-a7fc44d8a9a1] succeeded in 0.02192131800984498s: '{\"result\": \"none TiebaList to sign !\"}'\nSo, what's wrong? Finally I set DEBUG=False to resolve it . But how can I debug\nor is it a bug , or is it needed to add a decorator like Flask.on_app_start ?", "issue_status": "Closed", "issue_reporting_time": "2016-01-25T13:50:17Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "899": {"issue_url": "https://github.com/pallets/flask/issues/1700", "issue_id": "#1700", "issue_summary": "TypeError: object.__new__(Markup) is not safe, use unicode.__new__() in specific cases", "issue_description": "voidus commented on 24 Jan 2016\nHi,\nI am currently struggling with a pretty weird bug. It only appears in specific situations.\nThe whole code to reproduce it can be found in https://github.com/voidus/markupsafe_sniffer_issue or attached as\nmarkupsafe_sniffer_issue.zip\nThere has been an issue somewhat like that before but I can't find any encoding related problems.\npallets/markupsafe#19\nWhen I run a test via sniffer, I get the following error every time except the first run. (Re-run can be triggered by touching e.g the application.py file)\nTypeError: object.__new__(Markup) is not safe, use unicode.__new__()\nI tried to debug that using pdb, but I cannot find any differences between runs. I also tried to minimize the problem by using jinja directly (see the second test), but that doesn't trigger the bug. As removing flask removes the bug, I'm posting this here. I have actually no Idea where the real problem is.\nI'll also open an issue over at markupsafe linking here, so that the compined powers may find out what's wrong :)\nFull Stack trace:\n======================================================================\nFAIL: test_application.test_application\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/<redacted>/env/lib/python2.7/site-packages/nose/case.py\", line 197, in runTest\n    self.test(*self.arg)\n  File \"/<redacted>/tests/test_application.py\", line 8, in test_application\n    assert response.status_code == 200\nAssertionError: \n-------------------- >> begin captured logging << --------------------\napplication: ERROR: Exception on / [GET]\nTraceback (most recent call last):\n  File \"/<redacted>/env/lib/python2.7/site-packages/flask/app.py\", line 1817, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/<redacted>/env/lib/python2.7/site-packages/flask/app.py\", line 1477, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"/<redacted>/env/lib/python2.7/site-packages/flask/app.py\", line 1381, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/<redacted>/env/lib/python2.7/site-packages/flask/app.py\", line 1475, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"/<redacted>/env/lib/python2.7/site-packages/flask/app.py\", line 1461, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"/<redacted>/application.py\", line 7, in index\n    return render_template('t.html', c=\"baz\")\n  File \"/<redacted>/env/lib/python2.7/site-packages/flask/templating.py\", line 128, in render_template\n    context, ctx.app)\n  File \"/<redacted>/env/lib/python2.7/site-packages/flask/templating.py\", line 110, in _render\n    rv = template.render(context)\n  File \"/<redacted>/env/lib/python2.7/site-packages/jinja2/environment.py\", line 989, in render\n    return self.environment.handle_exception(exc_info, True)\n  File \"/<redacted>/env/lib/python2.7/site-packages/jinja2/environment.py\", line 754, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/<redacted>/templates/t.html\", line 1, in top-level template code\n    <script src=\"{{c}}\"></script>\n  File \"/<redacted>/env/src/markupsafe/markupsafe/__init__.py\", line 75, in __new__\n    return text_type.__new__(cls, base)\nTypeError: object.__new__(Markup) is not safe, use unicode.__new__()\n--------------------- >> end captured logging << ---------------------", "issue_status": "Closed", "issue_reporting_time": "2016-01-24T15:06:29Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "900": {"issue_url": "https://github.com/pallets/flask/issues/1699", "issue_id": "#1699", "issue_summary": "Traceback returns KeyError: WERKZEUG", "issue_description": "Sujinthan commented on 24 Jan 2016\nWhen I send an item to my server I get this error:\nTraceback (most recent call last):\n  File \"C:\\Python27\\lib\\site-packages\\werkzeug\\serving.py\", line 648, in inner\n    fd = int(os.environ['WERKZEUG_SERVER_FD'])\n   File \"C:\\Python27\\lib\\os.py\", line 425, in __getitem__\n    return self.data[key.upper()]\n KeyError: 'WERKZEUG_SERVER_FD'\n- - [23/Jan/2016 22:19:33] \"POST / HTTP/1.1\" 500 -\nCan't seem to figure out why. I am sending the item to the server as a base64. I should note that I am sending an image as a base64", "issue_status": "Closed", "issue_reporting_time": "2016-01-24T04:32:52Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "901": {"issue_url": "https://github.com/pallets/flask/issues/1697", "issue_id": "#1697", "issue_summary": "Unicode with request.path & url_for('auth.index')", "issue_description": "psykzz commented on 19 Jan 2016\nCommonly i do a check similar to\nif request.path != url_for('auth.index'):\nThe issue with this on Python3.5 right now is that request.path is unicode while url_for is a string.\nprint(request.path, url_for('auth.index'))\n>>> (u'/auth/', '/auth/')\nIs this intended or is there a reason for it? Could we not have both return unicode?", "issue_status": "Closed", "issue_reporting_time": "2016-01-19T12:18:41Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "902": {"issue_url": "https://github.com/pallets/flask/issues/1695", "issue_id": "#1695", "issue_summary": "Built-in support for reverse proxying on a sub folder", "issue_description": "ericremoreynolds commented on 14 Jan 2016\nHello,\nIt's annoying to have to reimplement this snippet for every web app in order for url_for to work properly behind an nginx reverse proxy mounted on a sub folder of the host's root URL.\nCould the not the functionality not be built into Flask by default?\nSorry for opening an issue instead of a PR, I don't think I have the expertise to modify Flask's code base.\nRegards,\nEric.", "issue_status": "Closed", "issue_reporting_time": "2016-01-14T15:27:11Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "903": {"issue_url": "https://github.com/pallets/flask/issues/1694", "issue_id": "#1694", "issue_summary": "Flask.teardown_request always passes an exception on the first request", "issue_description": "obskyr commented on 14 Jan 2016\nIf a function is set with the @app.teardown_request decorator (assuming your Flask instance name is app), it always gets passed an exception for the very first request to the server. This exception is a KeyError from Werkzeug (even though that particular error is handled in Werkzeug's code).\nTry copying and running the following bare-bones flask app:\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom flask import Flask\n\nimport sys\nimport traceback\n\napp = Flask(__name__)\n\n@app.teardown_request\ndef teardown_request(exception):\n    if exception:\n        print \"teardown_request received an exception:\"\n        traceback.print_exception(*sys.exc_info())\n    else:\n        print \"Request went through without passing an exception.\"\n\n@app.route(\"/\")\ndef works_but_not_really():\n    return \"This gets returned, so this function finishes.\"\n\nif __name__ == '__main__':\n    app.run('localhost', 5000)\nRunning this and performing two GET requests in a row to it results in the following output:\n * Running on http://localhost:5000/ (Press CTRL+C to quit)\nteardown_request received an exception:\nTraceback (most recent call last):\n  File \"C:\\Python27\\lib\\site-packages\\werkzeug\\serving.py\", line 647, in inner\n    fd = int(os.environ['WERKZEUG_SERVER_FD'])\n  File \"C:\\Python27\\lib\\os.py\", line 425, in __getitem__\n    return self.data[key.upper()]\nKeyError: 'WERKZEUG_SERVER_FD'\n127.0.0.1 - - [14/Jan/2016 14:57:30] \"GET / HTTP/1.1\" 200 -\nRequest went through without passing an exception.\n127.0.0.1 - - [14/Jan/2016 15:03:32] \"GET / HTTP/1.1\" 200 -\nNot only GET requests cause this - at the very least a POST will do the same, and I assume all other types will too. This is a problem in case the teardown request performs a database rollback on receiving an exception - because it means any changes the first request may make to the database are silently (since the page is still returned just fine) ignored.", "issue_status": "Closed", "issue_reporting_time": "2016-01-14T14:09:37Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "904": {"issue_url": "https://github.com/pallets/flask/issues/1693", "issue_id": "#1693", "issue_summary": "Flask resumes upload on restart", "issue_description": "johnathanz commented on 13 Jan 2016\nThis may not be an Issue / Bug. But may be due to my newness to Flask & lack of understanding.\nI'm running Flask on a Raspberry Pi (Raspbarian OS). There's PUT path set up to upload files to a certain directory.\nDuring one of my test runs, I killed Flask using Ctrl-C.\nThereafter:\nStart python program, which starts Flask - no issues\nCalls the PUT Path to upload 3 files - no issues\nAfter the 3 files are uploaded (from (2)), Flask attempts to resume on a file that was perhaps in progress when I first Ctrl-C the program. The file TEST_0059.MP4 in this case\nThis is the immediate error message - occurs everytime after files are uploaded\n<path>/lib/python5.4/site-packages/werkzeug/filesystem.py:63: BrokenFilesystemWarning: Detected a misconfigured UNIX filesystem: Will use UTF-8 as filesystem encoding instead of 'ascii'\n  BrokenFilesystemWarning)\n192.168.1.8 - - [13/Jan/2016 22:03:50] \"PUT /uploadMedia/TEST_0059.MP4 HTTP/1.1\" 500 -\nTraceback (most recent call last):\n  File \"<path>/lib/python3.4/site-packages/flask/app.py\", line 1836, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"<path>/lib/python3.4/site-packages/flask/app.py\", line 1820, in wsgi_app\n    response = self.make_response(self.handle_exception(e))\n  File \"<path>/lib/python3.4/site-packages/flask/app.py\", line 1403, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"<path>/lib/python3.4/site-packages/flask/_compat.py\", line 33, in reraise\n    raise value\n  File \"<path>/lib/python3.4/site-packages/flask/app.py\", line 1817, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"<path>/lib/python3.4/site-packages/flask/app.py\", line 1477, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"<path>/lib/python3.4/site-packages/flask/app.py\", line 1381, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"<path>/lib/python3.4/site-packages/flask/_compat.py\", line 33, in reraise\n    raise value\n  File \"<path>/lib/python3.4/site-packages/flask/app.py\", line 1475, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"<path>/lib/python3.4/site-packages/flask/app.py\", line 1461, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"<path>/cps_media_services.py\", line 59, in to_hub_via_wifi\n    f.write(request.data)\n  File \"<path>/lib/python3.4/site-packages/werkzeug/local.py\", line 342, in __getattr__\n    return getattr(self._get_current_object(), name)\n  File \"<path>/lib/python3.4/site-packages/werkzeug/utils.py\", line 73, in __get__\n    value = self.func(obj)\n  File \"<path>/lib/python3.4/site-packages/werkzeug/wrappers.py\", line 446, in data\n    return self.get_data(parse_form_data=True)\n  File \"<path>/lib/python3.4/site-packages/werkzeug/wrappers.py\", line 477, in get_data\n    rv = self.stream.read()\n  File \"<path>/lib/python3.4/site-packages/werkzeug/wsgi.py\", line 1003, in read\n    read = self._read(to_read)\nMemoryError\nQuestions:\nWhat's telling Flask to resume the PUT operation that I killed earlier?\nDoesn't restarting Flask clear any previous states it had?", "issue_status": "Closed", "issue_reporting_time": "2016-01-13T11:19:14Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "905": {"issue_url": "https://github.com/pallets/flask/issues/1692", "issue_id": "#1692", "issue_summary": "feedback.flask.pocoo.org 404 page", "issue_description": "AhnSeongHyun commented on 13 Jan 2016\nIn http://flask.pocoo.org, \"feedback website\" link is 404 page.\nhttp://feedback.flask.pocoo.org/", "issue_status": "Closed", "issue_reporting_time": "2016-01-13T02:04:01Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "906": {"issue_url": "https://github.com/pallets/flask/issues/1691", "issue_id": "#1691", "issue_summary": "get_send_file_max_age doesn't work in blueprint", "issue_description": "hongy19 commented on 13 Jan 2016\nI have a small Flask program which serves static file by itself instead of nginx. I want to change cache time for png file by get_send_max_age function. It works in Flask class, but it doesn't work if I implement it in blueprint.\nPython 3.5\nFlask 0.10.1\nWerkzeug 0.11.2\nFlask implementation\nclass MyFlask(Flask):\n    def get_send_file_max_age(self,name):\n        print(\"my function works\")\n        print(name)\n        if name.lower().endswith('.png'):\n            return 0\n        else:\n            return Flask.get_send_file_max_age(self,name)\napp = MyFlask(__name__)\nBlueprint implementation\nclass MyBlueprint(Blueprint):\n    def get_send_file_max_age(self,name):\n        print(\"my function works\")\n        print(name)\n        if name.lower().endswith('.png'):\n            return 0\n        else:\n            return Blueprint.get_send_file_max_age(self,name)\ntest = MyBlueprint('test',__name__)", "issue_status": "Closed", "issue_reporting_time": "2016-01-13T00:58:32Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "907": {"issue_url": "https://github.com/pallets/flask/issues/1690", "issue_id": "#1690", "issue_summary": "Make it easier to get a response body string in python3", "issue_description": "anlutro commented on 13 Jan 2016\nIn py3, response.data returns a byte value, meaning you can't do if 'foo' in response.data in tests, for example.\nCurrently, the best way to get the response body as a string seems to be response.get_data(as_string=True), which is a bit tedious.\nMaybe add a response.text property? That's what the requests package seems to have done.", "issue_status": "Closed", "issue_reporting_time": "2016-01-12T20:45:48Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "908": {"issue_url": "https://github.com/pallets/flask/issues/1689", "issue_id": "#1689", "issue_summary": "Some searches involving \u201cflash\u201d on the Flask website throws a 500 error", "issue_description": "Contributor\nalexwlchan commented on 10 Jan 2016\nIf I try to search for \u201cflash\u201d, I get a 500 error:\nhttp://flask.pocoo.org/search/?q=flash\nI\u2019ve found a few other searches related to flash that seem to fail; they may or may not be related:\nLeading/trailing whitespace, e.g. \u201c___flash\u201d or \u201cflash___\u201d\nLeading/trailing words with one or three characters \u2013 \u201ca flash\u201d, \u201cbig flash\u201d, \u201cflash a\u201d and \u201cflash big\u201d all fail.\n\u201cflashe\u201d and \u201cflashes\u201d both fail \u2013 appending other characters seems okay.\nAnd some searches that work:\nPrepending characters to \u201cflash\u201d \u2013 so \u201caflash\u201d, \u201cabflash\u201d, \u201cabcflash\u201d, and so on seem to work.\nLeading/trailing words with other numbers of characters \u2013 \u201chi flash\u201d, \u201cflash ab\u201d, \u201cflash abcd\u201d, \u201chigh flash\u201d, \u201chighest flash\u201d all work.\nRepro\u2019d in Safari and Chrome on OS X. I\u2019m coming from a UK-based ISP, if that\u2019s significant.\nI was trying to search for the pages on message flashing. I couldn\u2019t find a pattern to rejected searches, except that they all involve the word \u201cflash\u201d.", "issue_status": "Closed", "issue_reporting_time": "2016-01-10T17:56:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "909": {"issue_url": "https://github.com/pallets/flask/issues/1687", "issue_id": "#1687", "issue_summary": "WERKZEUG_DEBUG_PIN", "issue_description": "RogerHaase commented on 10 Jan 2016\nWerkzeug 0.11.0 implements WERKZEUG_DEBUG_PIN.\nimho, the problem is this code:\nclass Server(Command):\n    \"\"\"\n    Runs the Flask development server i.e. app.run()\n\n    :param host: server host\n    :param port: server port\n    :param use_debugger: if False, will no longer use Werkzeug debugger.\n                         This can be overriden in the command line\n                         by passing the **-d** flag.\n    :param use_reloader: if False, will no longer use auto-reloader.\n                         This can be overriden in the command line by\n                         passing the **-r** flag.\n    :param threaded: should the process handle each request in a separate\n                     thread?\n    :param processes: number of processes to spawn\n    :param passthrough_errors: disable the error catching. This means that the server will die on errors but it can be useful to hook debuggers in (pdb etc.)\n    :param options: :func:`werkzeug.run_simple` options.\n    \"\"\"\n\n    help = description = 'Runs the Flask development server i.e. app.run()'\n\n    def __init__(self, host='127.0.0.1', port=5000, use_debugger=True,\n                 use_reloader=True, threaded=False, processes=1,\n                 passthrough_errors=False, **options):\n\n        self.port = port\n        self.host = host\n        self.use_debugger = use_debugger\n        self.use_reloader = use_reloader\n        self.server_options = options\n        self.threaded = threaded\n        self.processes = processes\n        self.passthrough_errors = passthrough_errors\n... where the defaults for use_debugger and use_reloader should be False and passing the -d,-r flags should turn the debugger and auto reloader on..", "issue_status": "Closed", "issue_reporting_time": "2016-01-09T19:52:28Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "910": {"issue_url": "https://github.com/pallets/flask/issues/1686", "issue_id": "#1686", "issue_summary": "400", "issue_description": "sxhmilyoyo commented on 7 Jan 2016\nHello!\nWhen I login, I get the 400(Bad request) error. I don't know how to solve this problem. Can you help me? Thank you.", "issue_status": "Closed", "issue_reporting_time": "2016-01-07T17:40:05Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "911": {"issue_url": "https://github.com/pallets/flask/issues/1685", "issue_id": "#1685", "issue_summary": "HTML checker complains about template", "issue_description": "sxhmilyoyo commented on 5 Jan 2016\nWhen I write the code on the layout.html, there is something wrong:", "issue_status": "Closed", "issue_reporting_time": "2016-01-05T15:28:21Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "912": {"issue_url": "https://github.com/pallets/flask/issues/1683", "issue_id": "#1683", "issue_summary": "No output from hello world", "issue_description": "ghost commented on 5 Jan 2016\nNo description provided.", "issue_status": "Closed", "issue_reporting_time": "2016-01-04T18:56:25Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "913": {"issue_url": "https://github.com/pallets/flask/issues/1682", "issue_id": "#1682", "issue_summary": "Using SSL with Flask and eventlet", "issue_description": "chipsenkbeil commented on 4 Jan 2016\nNo description provided.", "issue_status": "Closed", "issue_reporting_time": "2016-01-04T15:26:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "914": {"issue_url": "https://github.com/pallets/flask/issues/1681", "issue_id": "#1681", "issue_summary": "AttributeError: module 'http.client' has no attribute 'get'", "issue_description": "leaxoy commented on 3 Jan 2016\nException happened during processing of request from ('127.0.0.1', 52838)\nTraceback (most recent call last):\n  File \"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/socketserver.py\", line 318, in _handle_request_noblock\n    self.process_request(request, client_address)\n  File \"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/socketserver.py\", line 344, in process_request\n    self.finish_request(request, client_address)\n  File \"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/socketserver.py\", line 357, in finish_request\n    self.RequestHandlerClass(request, client_address, self)\n  File \"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/socketserver.py\", line 684, in __init__\n    self.handle()\n  File \"/Users/lxh/IdeaProjects/services/lib/python3.5/site-packages/werkzeug/serving.py\", line 217, in handle\n    rv = BaseHTTPRequestHandler.handle(self)\n  File \"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/http/server.py\", line 414, in handle\n    self.handle_one_request()\n  File \"/Users/lxh/IdeaProjects/services/lib/python3.5/site-packages/werkzeug/serving.py\", line 251, in handle_one_request\n    elif self.parse_request():\n  File \"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/http/server.py\", line 340, in parse_request\n    conntype = self.headers.get('Connection', \"\")", "issue_status": "Closed", "issue_reporting_time": "2016-01-03T14:39:44Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "916": {"issue_url": "https://github.com/pallets/flask/issues/1677", "issue_id": "#1677", "issue_summary": "Download documentation as PDF link is broken", "issue_description": "as1ndu commented on 2 Jan 2016\nThe link http://flask.pocoo.org/docs/flask-docs.pdf throws an error 404 page", "issue_status": "Closed", "issue_reporting_time": "2016-01-02T08:43:40Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "917": {"issue_url": "https://github.com/pallets/flask/issues/1674", "issue_id": "#1674", "issue_summary": "When using an external debugger, exceptions are not properly propagated", "issue_description": "Member\nmiguelgrinberg commented on 1 Jan 2016\nIn trying to set up a small Flask application to work with an external debugger, I noticed that the way exceptions are handled vs. propagated isn't working as documented in the Working with Debuggers section of the documentation.\nThe documentation specifies that to use an external debugger you have to play with the debug, use_debugger and use_reloader settings. In the following table I show all possible combinations of debug and use_debugger and what the current behavior is (Note that I'm assuming use_reloader is always set to False for this discussion, as this setting is not part of the problem):\n| debug | use_debugger | Who catches exceptions | Correct behavior?               |\n+-------+--------------+------------------------+---------------------------------+\n| True  | True         | Werkzeug's debugger    | Yes                             |\n| False | True         | Flask, returns 500     | Yes (I think?)                  |\n| True  | False        | Werkzeug's WSGI server | No, exceptions should propagate |\n| False | False        | Flask, returns 500     | Yes                             |\nThe appropriate configuration for using an external debugger is the one shown in the 3rd row of the above table, but note that with this configuration, exceptions are not propagated all the way up and never reach an external debugger. With this configuration Flask does the right thing and reraises the exception, but the Werkzeug WSGI server then catches it and handles it by logging the stack trace and moving on, because it was not told otherwise.\nFor this set up to work as documented, Werkzeug's server should have passthrough_errors set to True. If I add this setting to app.run() then exceptions are allowed to reach an external debugger.\nMy impression is that the value of the PROPAGATE_EXCEPTIONS configuration item should be synchronized with Werkzeug's passthrough_errors, so that Flask and Werkzeug consistently handle or reraise exceptions.\nI'm happy to submit a pull request with the fix (which is quite simple), if you accept this as a valid issue. Please let me know what you think.", "issue_status": "Closed", "issue_reporting_time": "2016-01-01T01:27:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "918": {"issue_url": "https://github.com/pallets/flask/issues/1670", "issue_id": "#1670", "issue_summary": "Delete superfluous branches from the repo?", "issue_description": "Member\njeffwidman commented on 30 Dec 2015\nThere's several branches on this repo that are superfluous and should probably be deleted because they contain no additional commits and haven't been worked on in years.\nFor example:\nhttps://github.com/mitsuhiko/flask/tree/json-sessions\nhttps://github.com/mitsuhiko/flask/tree/flask_deployment_docs\nhttps://github.com/mitsuhiko/flask/tree/appdispatch-docs\n2", "issue_status": "Closed", "issue_reporting_time": "2015-12-30T09:38:11Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "919": {"issue_url": "https://github.com/pallets/flask/issues/1668", "issue_id": "#1668", "issue_summary": "Stream download chunked not working?", "issue_description": "johaven commented on 29 Dec 2015\nHello, i use requests to send large file like that:\ndef gen():\n    with open(localpath, 'rb') as f:\n        while True:\n            print 'data'\n            data = f.read(1024)\n            if not data:\n                break\n            yield data\nr = self.session.post(url, data=gen(), allow_redirects=False, params=params)\nOn the Flask side i get that:\nwith open(ftmp, 'ab') as handle:\n    handle.write(request.stream.read())\nBut no content is writed and i get response 400.\nThis is my request headers:\nTransfer-Encoding: chunked\nContent-Length:\nUser-Agent: python-requests/2.8.1\nConnection: keep-alive\nHost: 127.0.0.1:5000\nAccept: /\nContent-Type:\nAccept-Encoding: gzip, deflate", "issue_status": "Closed", "issue_reporting_time": "2015-12-28T22:30:34Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "920": {"issue_url": "https://github.com/pallets/flask/issues/1667", "issue_id": "#1667", "issue_summary": "Flask framework not support html5 video label on safari and iOS devices", "issue_description": "WPDreamMelody commented on 28 Dec 2015\nhow to solve Flask framework not support html5 video label on safari and iOS7\u30018\u30019 devices? The video can play on chrome &android.\neg:\n#712\nthe article have not solution.", "issue_status": "Closed", "issue_reporting_time": "2015-12-28T11:20:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "921": {"issue_url": "https://github.com/pallets/flask/issues/1665", "issue_id": "#1665", "issue_summary": "When I run 'pip install Flask' in Ubuntu server I got these info", "issue_description": "shiwei93 commented on 24 Dec 2015\nerror: could not create '/usr/local/lib/python2.7/dist-packages/flask': Permission denied\nCleaning up...\nCommand /usr/bin/python -c \"import setuptools, tokenize;file='/tmp/pip_build_habit/Flask/setup.py';exec(compile(getattr(tokenize, 'open', open)(file).read().replace('\\r\\n', '\\n'), file, 'exec'))\" install --record /tmp/pip-Dy8fke-record/install-record.txt --single-version-externally-managed --compile failed with error code 1 in /tmp/pip_build_habit/Flask\nStoring debug log for failure in /home/habit/.pip/pip.log", "issue_status": "Closed", "issue_reporting_time": "2015-12-24T08:26:30Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "922": {"issue_url": "https://github.com/pallets/flask/issues/1664", "issue_id": "#1664", "issue_summary": "OPTIONS default behavior not compatible with Angularjs", "issue_description": "galgalesh commented on 23 Dec 2015\nHi\nWhen calling a flask webserver from angularjs, you get method not allowed and content-type not allowed errors. This is because the flask OPTIONS response does not specify Access-Control-Allow-Headers and Access-Control-Allow-Methods by default.\nThis is fixed by following code fragment:\n@app.after_request\ndef apply_caching(response):\n    response.headers['Access-Control-Allow-Headers'] = 'Content-Type'\n    response.headers['Access-Control-Allow-Methods'] = 'GET,PUT'\n    return response\nIs the exclusion of these headers intentional or is this a bug? I think a lot of people call Flask from angularjs, so supporting these headers by default might be good for adoption and ease of use?\nKind regards", "issue_status": "Closed", "issue_reporting_time": "2015-12-23T16:28:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "923": {"issue_url": "https://github.com/pallets/flask/issues/1663", "issue_id": "#1663", "issue_summary": "External url scheme is kept accross multiple url_for", "issue_description": "paradoxxxzero commented on 23 Dec 2015\nConsider this test case:\nfrom flask import Flask, url_for\napp = Flask(__name__)\n\n\n@app.route('/some/route')\ndef some_route():\n    return 'Some route'\n\n\n@app.route('/some/websocket')\ndef some_websocket():\n    return 'Some websocket'\n\n\n@app.route('/')\ndef test_case():\n    return '<br><br>'.join((\n        'some_route url:<br> %s' % url_for('some_route', _external=True),\n        'some_websocket url:<br> %s' % url_for('some_websocket', _external=True, _scheme='ws'),\n        'this test case url:<br> %s' % url_for('test_case', _external=True),\n    ))\n\nif __name__ == '__main__':\n    app.config['SERVER_NAME'] = 'myserver.l:5000'\n    app.run(debug=True)\nAccessing http://myserver.l:5000/ gives:\nsome_route url:\nhttp://myserver.l:5000/some/route\n\nsome_websocket url:\nws://myserver.l:5000/some/websocket\n\nthis test case url:\nws://myserver.l:5000/\nshould give:\nsome_route url:\nhttp://myserver.l:5000/some/route\n\nsome_websocket url:\nws://myserver.l:5000/some/websocket\n\nthis test case url:\nhttp://myserver.l:5000/", "issue_status": "Closed", "issue_reporting_time": "2015-12-23T12:04:46Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "924": {"issue_url": "https://github.com/pallets/flask/issues/1662", "issue_id": "#1662", "issue_summary": "multiple processes on windows", "issue_description": "samlobel commented on 23 Dec 2015\nIt looks like deep down, Flask calls SocketServer.py (a source code file for Python) to make its server. But SocketServer.py has a call to os.fork(), which isn't supported at all on Windows. It would be great to use something besides SocketServer, or maybe a modified version of SocketServer. When you make a HTTP request, it first calls SocketServer.process_request, which then calls os.fork.\nMore importantly (to me at least), does anyone have a workaround?", "issue_status": "Closed", "issue_reporting_time": "2015-12-23T03:21:37Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "925": {"issue_url": "https://github.com/pallets/flask/issues/1660", "issue_id": "#1660", "issue_summary": "COC?", "issue_description": "alison985 commented on 20 Dec 2015\nHi,\nI'm just wondering what your code of conduct is for this project?\nThanks,\nAlison", "issue_status": "Closed", "issue_reporting_time": "2015-12-20T10:11:34Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "926": {"issue_url": "https://github.com/pallets/flask/issues/1656", "issue_id": "#1656", "issue_summary": "Injecting Flask vulnerability issue", "issue_description": "rmetzler commented on 18 Dec 2015\nOn December 7, 2015 Ryan Reid published a blog post called \"Injecting Flask\" .\nIn his post he demonstrated several attacks against a naive Flask / Jinja2 based implementation of a website.\nI'm not sure if Flask has documented best practices which would mitigate the problem and I couldn't find any hint of a discussion of his blog post in the Flask community.\nAre there plans to fix or document the problem?\nFor me it's a rather minor thing because I only have one internal service which depends on Flask, but I'm sure other developers may have many more and this is a serious security issue.", "issue_status": "Closed", "issue_reporting_time": "2015-12-18T09:07:35Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "927": {"issue_url": "https://github.com/pallets/flask/issues/1654", "issue_id": "#1654", "issue_summary": "why command flask not found", "issue_description": "quantwizard commented on 16 Dec 2015\nI git clone and enter the flaskr folder, then run the following command in Bash:\nflask --app=flaskr initdb\nthen I got error: command not found: flask\nHow do I setup flaskr in this case? Do I miss something?", "issue_status": "Closed", "issue_reporting_time": "2015-12-16T08:51:22Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "928": {"issue_url": "https://github.com/pallets/flask/issues/1652", "issue_id": "#1652", "issue_summary": "Error running minitwit example", "issue_description": "sdimitro commented on 14 Dec 2015\nflask version is latest bleeding (from repo)\npython version is 3.4 and OS is OpenBSD.\nTraceback below:\nTraceback (most recent call last):\n  File \"/usr/local/bin/flask\", line 9, in <module>\n    load_entry_point('Flask==0.11.dev0', 'console_scripts', 'flask')()\n  File \"/usr/local/lib/python3.4/site-packages/flask/cli.py\", line 494, in main\n    cli.main(args=args, prog_name=name)\n  File \"/usr/local/lib/python3.4/site-packages/flask/cli.py\", line 342, in main\n    return AppGroup.main(self, *args, **kwargs)\n  File \"/usr/local/lib/python3.4/site-packages/click/core.py\", line 675, in main\n    _verify_python3_env()\n  File \"/usr/local/lib/python3.4/site-packages/click/_unicodefun.py\", line 69, in _verify_python3_env\n    if locale.lower().endswith(('.utf-8', '.utf8')):\nTypeError: 'str' does not support the buffer interface", "issue_status": "Closed", "issue_reporting_time": "2015-12-14T00:43:41Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "929": {"issue_url": "https://github.com/pallets/flask/issues/1650", "issue_id": "#1650", "issue_summary": "When DEBUG=True, OSError: [Errno 88] Socket operation on non-socket", "issue_description": "dohvis commented on 12 Dec 2015\nI get OSError: [Errno 88] Socket operation on non-socket when I try to run the following app with debug enabled. I am using Ubuntu 14.04.2 and Python 3.4.0.\napp = Flask(__name__)\napp.debug = True\n\n@app.route('/')\ndef index():\n    return 'Hello, World!'\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0')\n$ python app.py\n * Restarting with stat\n * Debugger is active!\n * Debugger pin code: 916-262-145\nException in thread Thread-1:\nTraceback (most recent call last):\n  File \"/usr/lib/python3.4/threading.py\", line 920, in _bootstrap_inner\n    self.run()\n  File \"/home/nero/.virtualenvs/FBPocket/lib/python3.4/site-packages/gevent/threading.py\", line 137, in run\n    super(Thread, self).run()\n  File \"/usr/lib/python3.4/threading.py\", line 868, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/home/nero/.virtualenvs/FBPocket/lib/python3.4/site-packages/werkzeug/serving.py\", line 653, in inner\n    fd=fd).serve_forever()\n  File \"/home/nero/.virtualenvs/FBPocket/lib/python3.4/site-packages/werkzeug/serving.py\", line 557, in make_server\n    passthrough_errors, ssl_context, fd=fd)\n  File \"/home/nero/.virtualenvs/FBPocket/lib/python3.4/site-packages/werkzeug/serving.py\", line 478, in __init__\n    self.server_address = self.socket.getsockname()\nOSError: [Errno 88] Socket operation on non-socket", "issue_status": "Closed", "issue_reporting_time": "2015-12-12T07:40:51Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "930": {"issue_url": "https://github.com/pallets/flask/issues/1649", "issue_id": "#1649", "issue_summary": "[support] I get None with request.form", "issue_description": "somenxavier commented on 12 Dec 2015\nHi,\nI have these:\n# Imports\nfrom flask import Flask, jsonify, request, make_response, render_template, url_for, flash, redirect\nfrom yaml import load, dump\ntry:\n    from yaml import CLoader as Loader, CDumper as Dumper\nexcept ImportError:\n    from yaml import Loader, Dumper\n\n\n# Global variables\nversion = \"0.1\"\napp = Flask(__name__)\napp.secret_key = 'el meu secret'\n\n\n# Main procedure\n@app.route(\"/new/\", methods=['POST'])\ndef create_new_activity():\n    flash(\"Funciona?\")\n    flash(request.form.get('body'))\n    return redirect(url_for('show_new_activity_form'))\n\n@app.route(\"/new/\", methods=['GET'])\ndef show_new_activity_form():\n    return render_template('activity.html')\n\n\nif __name__ == \"__main__\":\n    app.debug = True\n    app.run()\nMy templates are very simple:\n{% extends \"base.html\" %}\n{% block title %}New activity{% endblock %}\n{% block content %}\n  <script>\n  $(document).ready(function() {\n    $('select').material_select();\n  });\n  </script>  \n\n  <h1>New activity</h1>\n\n\n  <div class=\"row\">\n      <form action=\"{{ url_for('create_new_activity') }}\" method=\"post\">\n          <input placeholder=\"identification\" id=\"serial\" type=\"text\" class=\"validate\">\n          <textarea id=\"body\" class=\"materialize-textarea\"></textarea>\n      <select id=\"tags\" required multiple>\n            <option value=\"1\" selected>Option 1</option>\n            <option value=\"2\">Option 2</option>\n            <option value=\"3\">Option 3</option>\n          </select>\n          <input type=submit>\n      </form>\n   {% with messages = get_flashed_messages() %}\n    {% if messages %}\n      <ul class=flashes>\n      {% for message in messages %}\n        <li>{{ message }}</li>\n      {% endfor %}\n      </ul>\n    {% endif %}\n  {% endwith %}\n  </div>\n{% endblock %}\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>{% block title %}{% endblock %} &in; tam </title>\n    <!--Let browser know website is optimized for mobile-->\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n    {% block css_js %}\n    <!-- CSS and Javascript headers -->\n    <link href=\"http://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.3/css/materialize.min.css\">\n    <script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-2.1.1.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.3/js/materialize.min.js\"></script>\n    {% endblock %}\n  </head>\n  <body>\n    <div class=\"navbar-fixed\">\n      <nav class=\"z-depth-1\" role=\"navigation\">\n        <div class=\"nav-wrapper container\">\n          <a id=\"logo-container\" class=\"brand-logo left\" href=\"/\">tam</a>\n          <ul class=\"right\">\n            <li><a href=\"{{ url_for('show_new_activity_form') }}\">New</a></li>\n          </ul>\n        </div>\n      </nav>\n    </div>\n    <div class=\"container\">\n      <div class=\"section\">\n         {% block content %}{% endblock %}\n      </div>\n    </div>\n    <footer class=\"page-footer\">\n     <div class=\"container\">Tam application</div>\n     <div class=\"footer-copyright\">\n       <div class=\"container\">\n          Tam is distributed under <a href=\"https://www.gnu.org/licenses/gpl-3.0.txt\">GPL 3</a> or above\n       </div>\n     </div>\n    </footer>\n  </body>\n</html>\nI get always \"None\" in the result of request.form.get('body') which I really fill in. What happens there?\nThanks,", "issue_status": "Closed", "issue_reporting_time": "2015-12-11T18:46:54Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "931": {"issue_url": "https://github.com/pallets/flask/issues/1647", "issue_id": "#1647", "issue_summary": "About import OpenID", "issue_description": "tanteng commented on 9 Dec 2015\n/flask_website/init.py\n# from flask_openid.ext.openid import OpenID\nfrom flask_openid import OpenID\nShould like this.", "issue_status": "Closed", "issue_reporting_time": "2015-12-09T14:53:02Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "932": {"issue_url": "https://github.com/pallets/flask/issues/1646", "issue_id": "#1646", "issue_summary": "visual studio code plugin>", "issue_description": "malalam commented on 9 Dec 2015\nAnyone have a plugin or making a plugin for visual studio code?", "issue_status": "Closed", "issue_reporting_time": "2015-12-08T20:41:51Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "933": {"issue_url": "https://github.com/pallets/flask/issues/1645", "issue_id": "#1645", "issue_summary": "template loaders configuration don't support zipped applications", "issue_description": "Contributor\nRonnyPfannschmidt commented on 8 Dec 2015\nbased on #1562\ndue to using a filesystem-loader instead of a package-loader, egg based installs and zipped python applications as well as compressed wheels in the pythonpath can not load templates\nthe problem lies in _PackageBoundObject not using a package loader,\ni don't recall if this was done for performance or due to other downsides", "issue_status": "Closed", "issue_reporting_time": "2015-12-07T19:57:12Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "934": {"issue_url": "https://github.com/pallets/flask/issues/1644", "issue_id": "#1644", "issue_summary": "Please update mod_wsgi documentation to use httpd 2.4 syntax", "issue_description": "et304383 commented on 8 Dec 2015\nThis is my own fault as I was looking for other more non-obvious issues with my permissions but the documentation here:\nhttp://flask.pocoo.org/docs/0.10/deploying/mod_wsgi/\nUses httpd 2.2 syntax for directory permissions.\nAt the very least, a note should be added to remind folks to use httpd 2.4 syntax of \"Require All Granted\".", "issue_status": "Closed", "issue_reporting_time": "2015-12-07T19:11:56Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "935": {"issue_url": "https://github.com/pallets/flask/issues/1641", "issue_id": "#1641", "issue_summary": "Allow debugger to be controlled from application configuration", "issue_description": "Contributor\nnZac commented on 6 Dec 2015\nI submitted a patch for this but learned that it was incomplete with further testing. #1640\nBasically, it would be nice to allow DEBUG on the application to control the activation of the debugger and reloader when running the CLI like app.run does.\n3", "issue_status": "Closed", "issue_reporting_time": "2015-12-06T02:02:11Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "936": {"issue_url": "https://github.com/pallets/flask/issues/1639", "issue_id": "#1639", "issue_summary": "Dev server redirects to arbitrary url when path starts with double slash //", "issue_description": "raminfp commented on 6 Dec 2015\nfrom flask import Flask\nfrom flask import request\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return  'hello'\n\napp.run(debug=True, port=8000, host='0.0.0.0')\nIf I try to navigate to http://127.0.0.1:8000//google.com (2 slashes), I get redirected to google.com. I correctly get a 404 with http://127.0.0.1:8000/google.com (1 slash) and http://127.0.0.1:8000///google.com (3 slashses). This is a vulnerability, I shouldn't be redirected to arbitrary urls. Flask should prevent arbitrary redirects from urls.", "issue_status": "Closed", "issue_reporting_time": "2015-12-05T19:39:52Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "937": {"issue_url": "https://github.com/pallets/flask/issues/1635", "issue_id": "#1635", "issue_summary": "Links to download documentation need updating", "issue_description": "mbordas09 commented on 2 Dec 2015\nFirst, the link to the docs on the main page:\nhttp://flask.pocoo.org/docs/\nis missing the links on the left for downloading the docs. It should be:\nhttp://flask.readthedocs.org/en/latest/\nSecond, the download links on the left are dead ends:\nhttp://flask.pocoo.org/docs/flask-docs.[epub,pdf,mobi,zip]\nshould be:\nhttp://readthedocs.org/projects/flask/downloads/[pdf,epub,htmlzip]/latest/\nSame thing for the docs download links on the main page under the heading \"Interested?\"", "issue_status": "Closed", "issue_reporting_time": "2015-12-02T15:38:30Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "938": {"issue_url": "https://github.com/pallets/flask/issues/1633", "issue_id": "#1633", "issue_summary": "Catch-All URLs", "issue_description": "maangulo12 commented on 1 Dec 2015\nHello.\nI am trying to create a Catch-All function which serves every URL. I am following the example from http://flask.pocoo.org/snippets/57/\nHere is the code snippet:\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/', defaults={'path': ''})\n@app.route('/<path:path>')\ndef catch_all(path):\n    return 'You want path: %s' % path\n\nif __name__ == '__main__':\n    app.run() \nThis code snippet does not catch all of the URLs. Am I missing something here?\nThanks.", "issue_status": "Closed", "issue_reporting_time": "2015-12-01T05:26:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "939": {"issue_url": "https://github.com/pallets/flask/issues/1632", "issue_id": "#1632", "issue_summary": "Exception when client closes stream before flask response", "issue_description": "actioncrypto commented on 28 Nov 2015\nI have been running a simple flask webserver for the purpose of a twilio app. Usually works all groovy, however every few days, twilio will tell me it could not connect, and upon checking the running server python shell, it would show nothing abnormal until I killed it, and the stack trace would spit out an exception that my flask app had crashed related to the generic twilio request.\nGoogling around, it would appear this is due to an underlying SocketServer not handling the exception properly and causing the problem. This post on stackoverflow speaks about the issue but offers no solution: http://stackoverflow.com/questions/17787023/python-how-to-catch-a-flask-except-like-this\nIt appears from the leading comment, that it's 'expected' to happen, and flask should simply handle it fine. However, in my case, it causes the server to lock up and crash. No further requests will be acknowledged. I simply have to re-start the app, and it'll proceed merrily along for a few more days.\nIf this is truly a bug in flask, it makes relatively easy to DDoS any flask server by the client simply hitting the web request and then stopping quickly and not acknowledging.\nWhy is my flask not set up to properly handle this type of thing? Is this a bug? Have I improperly configured something? Is there a try/catch I'm forgetting?\nusing regular pip install of flask 0.10.1 btw... The exception is pasted below:\nException happened during processing of request from ('x.x.x.x', 48590)\nTraceback (most recent call last):\n  File \"/root/.pyenv/versions/2.7.10/lib/python2.7/SocketServer.py\", line 295, in _handle_request_noblock\nself.process_request(request, client_address)\n  File \"/root/.pyenv/versions/2.7.10/lib/python2.7/SocketServer.py\", line 321, in process_request\nself.finish_request(request, client_address)\n  File \"/root/.pyenv/versions/2.7.10/lib/python2.7/SocketServer.py\", line 334, in finish_request\nself.RequestHandlerClass(request, client_address, self)\n  File \"/root/.pyenv/versions/2.7.10/lib/python2.7/SocketServer.py\", line 655, in __init__\nself.handle()\n  File \"/root/.pyenv/versions/2.7.10/lib/python2.7/site-packages/werkzeug/serving.py\", line 203, in handle\nrv = BaseHTTPRequestHandler.handle(self)\n  File \"/root/.pyenv/versions/2.7.10/lib/python2.7/BaseHTTPServer.py\", line 340, in handle\nself.handle_one_request()\n  File \"/root/.pyenv/versions/2.7.10/lib/python2.7/site-packages/werkzeug/serving.py\", line 234, in handle_one_request\nself.raw_requestline = self.rfile.readline()\n  File \"/root/.pyenv/versions/2.7.10/lib/python2.7/socket.py\", line 451, in readline\ndata = self._sock.recv(self._rbufsize)\nKeyboardInterrupt", "issue_status": "Closed", "issue_reporting_time": "2015-11-28T14:18:35Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "940": {"issue_url": "https://github.com/pallets/flask/issues/1626", "issue_id": "#1626", "issue_summary": "Can't deploy flask in nginx using python 3 (in a subroot)", "issue_description": "osk386 commented on 26 Nov 2015\nI am trying to deploy a flask application into an url subroot like\nlocalhost/flaskapp\nI configured my project with this settings:\nwsgi.ini\n[uwsgi]\nsocket = /tmp/wsgi.sock\nchmod-socket    = 666\nuid = www-data\ngid = www-data\nchdir= /var/www/flaskproject\nmodule = wsgi \ncallable = application\nlogto = /var/www/flaskproject/logs/t.log \nnginx.conf\nlocation / {\n     root   /var/www/website;\n  }\n\n\nlocation = /flaskapp { rewrite ^ /flaskapp/; }\nlocation /flaskapp { try_files $uri @application; }\nlocation @application {\n  include uwsgi_params;\n  uwsgi_param SCRIPT_NAME /flaskapp;\n  uwsgi_modifier1 30;\n  uwsgi_pass unix:/tmp/wsgi.sock;\n}\nwsgi.py\nfrom myapp import application\n\nif __name__ == \"__main__\":\n    application.run()\nmyapp.py\nfrom flask import Flask\n\napplication = Flask(__name__)\n\n@application.route(\"/\")\ndef index():\n    try:\n        import http.client\n        fr = \"OK Python 3.x\"\n\n    except ImportError:         \n        fr = \"OK Python 2.x\"           \n    return fr\n\n@application.route(\"/more\")\ndef sdf():\n    return \"OK deeper subroot\"\n\nif __name__ == \"__main__\":\n    application.run(host='0.0.0.0')\nI execute this into virtualenvs for python 2.7 and python 3.4, each one with their respective uwsgi modules compiled( I mean compiled for python 2.7 and 3.4).\nWhen I run each one, open my browser and I got this:\n_2.7 venv:_\nlocalhost: webpage (it's ok)\nlocalhost/flaskapp: \"OK Python 2.x\"\nlocalhost/flaskapp/more: \"OK deeper subroot\"\n_3.4 venv_\nlocalhost: webpage (it's ok)\nlocalhost/flaskapp: \"Not found\" message\nlocalhost/flaskapp/more: \"Not found\" message\nAs you can see, this works with python 2.7 but in python 3.4. I want to know how to run this with python 3.4,\nThank you", "issue_status": "Closed", "issue_reporting_time": "2015-11-26T14:17:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "941": {"issue_url": "https://github.com/pallets/flask/issues/1625", "issue_id": "#1625", "issue_summary": "Documentation / Quickstart / Debugger - how to activate", "issue_description": "ewann commented on 24 Nov 2015\nWhen following the quickstart, specifically:\nhttps://github.com/mitsuhiko/flask/search?utf8=%E2%9C%93&q=++Screenshot+of+the+debugger+in+action\nI found myself jumping to google to learn how to activate the debugger. Perhaps if the screen grab showed & highlighted the console icon on the far left of my screen, that wouldn't have happened.\nI'm happy to submit a pull request with a replacement screenshot if you agree this would be useful, noting I'm not on mac, so screen grab might look out of place, if that detail is considered important", "issue_status": "Closed", "issue_reporting_time": "2015-11-24T00:15:52Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "942": {"issue_url": "https://github.com/pallets/flask/issues/1623", "issue_id": "#1623", "issue_summary": "demo doesn't show the active port", "issue_description": "Contributor\nllimllib commented on 22 Nov 2015\nOn python 3.4.3 with flask-0.10.1, running the demo in the quickstart doesn't print what port it's on:\n$ python helloworld.py\n * Restarting with stat\n * Debugger is active!\n * Debugger pin code: 281-051-764\nit is on port 5000, so you can guess it from the docs, but I think it should tell the user what port it's running on?", "issue_status": "Closed", "issue_reporting_time": "2015-11-22T03:51:24Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "943": {"issue_url": "https://github.com/pallets/flask/issues/1622", "issue_id": "#1622", "issue_summary": "Werkzeug 0.11 does not allow debug", "issue_description": "ghost commented on 21 Nov 2015\nRunning Flask, on Linux or Windows or OS X, if you run:\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return \"foo\"\n\nif __name__ == '__main__':\n    app.run(debug=True)\n...then python kills itself with an error (cant remember from top of my head...as I am not at my PC).\nHowever, when you remove debug=True everything is fine.\nRunning # pip uninstall werkzeug", "issue_status": "Closed", "issue_reporting_time": "2015-11-21T17:57:44Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "944": {"issue_url": "https://github.com/pallets/flask/issues/1620", "issue_id": "#1620", "issue_summary": "xss issue", "issue_description": "linuzzz commented on 20 Nov 2015\nHello, i'm using this repository to start learning python + flask.\nI red that flask with the help of jinja2 should escape any sql injection or xss attack.\nAnyway if i start using the flaskr app in the examples i see that it is possible to inject xss code, i did a simple test with [<script>alert\"hello\"</script> ohh...github doesn't show the code of the alert] and it's working...it's a permanent xxs because it is written in the db. I would like to start writing secure code from the beginning, someone could explain how to avoid xss in this simple app? many thanks", "issue_status": "Closed", "issue_reporting_time": "2015-11-20T10:22:13Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "945": {"issue_url": "https://github.com/pallets/flask/issues/1619", "issue_id": "#1619", "issue_summary": "Flask extremely slow on SQL Server view queries versus pure table queries", "issue_description": "erxnmedia commented on 20 Nov 2015\nHi,\nI\u2019ve noticed that Flask takes 10 or 20 seconds to display a page based on a view query but will display the page in less than a second for a non-view version of the same query. For example here is a query on view CurveVersionReport:\nselect CurveEditID,AsOfDate,TaskDefinition,VersionName,acattribute,DataPoints\nFROM CurveVersionReport\nwhere market = 'Commodity' and submarket = 'Agriculture' and activeversion='Yes' and curvename='CO_PRICE_VAR_USD_OTC_BO'\norder by curvename, curveeditid\nand the corresponding non-view version:\nselect a.[CurveEditID],[AsOfDate],TaskDefinition\n,[CurveVersion] as VersionName\n, tree + '.' + attribute as acattribute\n,count(*) AS DataPoints\nFROM [CurveEdits] a, curvedefinition b, submarket c, TaskDefinition d, curveversion e, curvepoints f, acattribute g\nwhere a.curveid = b.curveid\nand b.marketid = c.marketid\nand a.TaskDefinitionID=d.TaskDefinitionID\nand a.[CurveVersionID]=e.[CurveVersionID]\nand f.curveeditid = a.curveeditid\nand f.acattributeid = g.acattributeid\nand market = 'Commodity' and submarket = 'Agriculture' and activeversion=1 and curvename='CO_PRICE_VAR_USD_OTC_BO'\ngroup by market, submarket, curvename, a.[CurveEditID],[AsOfDate],TaskDefinition,[CurveVersion],[ActiveVersion], tree, attribute\norder by acattribute\nThis is the Flask method that processes the query:\n@app.route('/curve///')\ndef Curve(market, submarket, curve):\nglobal cur\nquery = ...one of the above\ncur.execute(query, (market, submarket, curve))\nedits=[x for x in cur.fetchall()]\nreturn render_template('curve.html', market=market, submarket=submarket, curve=curve, edits=edits)\nHere is the template file:\nPFE Analytics: Market: Submarket: Curve: {{market}} {{submarket}} {{curve}}\n{% for (CurveEditID,AsOfDate,TaskDefinition,VersionName,acattribute,DataPoints) in edits %}\n{% endfor %}\nCurveEditID AsOfDate TaskDefinition VersionName acattribute DataPoints\n{{CurveEditID}} {{AsOfDate}} {{TaskDefinition}} {{VersionName}} {{acattribute}} {{DataPoints}}\nDo you know why view version would be extremely slow versus non-view?\nThanks,\nLars Ericson\nQuantitative Analytics Consultant\nMarket & Institutional Risk Management\nWells Fargo Bank, N.A. | 301 S. College St., 4th Floor | Charlotte, NC 28202-6000\nMAC D1053-04X\nTel 704-410-2219 | Cell 917-891-1639\nlars.ericson@wellsfargo.com", "issue_status": "Closed", "issue_reporting_time": "2015-11-19T21:36:03Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "946": {"issue_url": "https://github.com/pallets/flask/issues/1618", "issue_id": "#1618", "issue_summary": "Review Flask-DropIn extension for listing and approval", "issue_description": "zh012 commented on 18 Nov 2015\nI've created an small extension Flask-DropIn, which aims to make it easy to organize\na large flask application. It basically borrows the idea from django app, and could\nbe much more flexible.\nI've tried to ensure following the extension guide, and believe that I have done everything\nrequired by the extension guideline\nGithub: https://github.com/zh012/flask-dropin\nDocs: http://pythonhosted.org/Flask-DropIn/\nPypi: https://pypi.python.org/pypi/Flask-DropIn\nThanks!", "issue_status": "Closed", "issue_reporting_time": "2015-11-18T15:30:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "947": {"issue_url": "https://github.com/pallets/flask/issues/1617", "issue_id": "#1617", "issue_summary": "OSError: [Errno 9] Bad file descriptor for python3 + flask", "issue_description": "hongy19 commented on 12 Nov 2015\nI got following error with flask (0.10.1) + python 3.5. But python 2.7 is OK.\nIf I turn off debug flag, python 3.5 is also OK.\nWerkzeug (0.11) works well with/with out debug flag for python 3.5\nC:\\tmp\\flask>py -3 test1.py\nTraceback (most recent call last):\nFile \"test1.py\", line 13, in\napp.run()\nFile \"C:\\Python35\\lib\\site-packages\\flask\\app.py\", line 772, in run\nrun_simple(host, port, self, **options)\nFile \"C:\\Python35\\lib\\site-packages\\werkzeug\\serving.py\", line 666, in run_simple\nos.set_inheritable(s.fileno(), True)\nOSError: [Errno 9] Bad file descriptor\nFlask code\nfrom flask import Flask\napp = Flask(name)\napp.debug = True\n@app.route(\"/\")\ndef index():\nreturn \"Hello world!\"\nif name == 'main':\napp.run()\nWerkzeug code\nfrom werkzeug.wrappers import Request, Response\nfrom werkzeug.debug import DebuggedApplication\n@Request.application\ndef application(request):\nreturn Response('Hello World!')\napplication = DebuggedApplication(application, evalex=True)\nif name == 'main':\nfrom werkzeug.serving import run_simple\nrun_simple('localhost', 4000, application)", "issue_status": "Closed", "issue_reporting_time": "2015-11-12T06:19:51Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "948": {"issue_url": "https://github.com/pallets/flask/issues/1615", "issue_id": "#1615", "issue_summary": "Documentation on setting up configuration file might cause friction to new users", "issue_description": "benjaminweb commented on 11 Nov 2015\nrefers to: http://flask.pocoo.org/docs/0.10/config/#development-production\nI did not have __init__.py present. I did not know whether .py to be part of server_config as filename.\nFriction for new user can be reduced by giving a more precise example, like:\napp.config.from_object('module.server_config')\nfiles:\nmodule/__init__.py (may be empty)\nmodule/server_config.py\nLet server_config.py contain the following:\nDEBUG = False\nTESTING = False\nDATABASE_URI = 'sqlite://:memory:'\nuser = 'Aladdin' \nHowever, app.config will carry only UPPERCASE keys (KEY=value) in config file.\nHence, app.config['DATABASE_URI'] will be set, app.config['user'] not.", "issue_status": "Closed", "issue_reporting_time": "2015-11-11T11:25:37Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "949": {"issue_url": "https://github.com/pallets/flask/issues/1614", "issue_id": "#1614", "issue_summary": "I can't to custome json decode error handler.", "issue_description": "wwjiang commented on 11 Nov 2015\nwhen I call request.get_json(), I found that request.json has been set.\nIf I post a http request with content-type:application/json with empty body or incomplete json string, this will abort in 400,\nI want to custom my json decode error handler, what should I do?", "issue_status": "Closed", "issue_reporting_time": "2015-11-11T10:22:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "950": {"issue_url": "https://github.com/pallets/flask/issues/1612", "issue_id": "#1612", "issue_summary": "[Document Bug] get_json(force=False, silent=False, cache=True)", "issue_description": "huntzhan commented on 9 Nov 2015\nParameters:\nforce \u2013 if set to True the mimetype is ignored.\nsilent \u2013 if set to False this method will **NOT** fail silently and return False.\ncache \u2013 if set to True the parsed JSON data is remembered on the request.\nhttp://flask.pocoo.org/docs/0.10/api/#flask.Request.get_json", "issue_status": "Closed", "issue_reporting_time": "2015-11-09T05:22:46Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "951": {"issue_url": "https://github.com/pallets/flask/issues/1611", "issue_id": "#1611", "issue_summary": "Unicode Error when running in debug mode", "issue_description": "apranav19 commented on 9 Nov 2015\nHello,\nI'm currently using flask while running Python3.5 and I just noticed this Unicode error for the first time. When I run my app in the debug mode, I receive this error:\nTraceback (most recent call last):\n  File \"main.py\", line 28, in <module>\n    app.run(debug=True)\n  File \"/Users/pranav/WebProjects/FitScout/fit_env/lib/python3.5/site-packages/flask/app.py\", line 772, in run\n    run_simple(host, port, self, **options)\n  File \"/Users/pranav/WebProjects/FitScout/fit_env/lib/python3.5/site-packages/werkzeug/serving.py\", line 633, in run_simple\n    application = DebuggedApplication(application, use_evalex)\n  File \"/Users/pranav/WebProjects/FitScout/fit_env/lib/python3.5/site-packages/werkzeug/debug/__init__.py\", line 169, in __init__\n    if self.pin is None:\n  File \"/Users/pranav/WebProjects/FitScout/fit_env/lib/python3.5/site-packages/werkzeug/debug/__init__.py\", line 179, in _get_pin\n    self._pin, self._pin_cookie = get_pin_and_cookie_name(self.app)\n  File \"/Users/pranav/WebProjects/FitScout/fit_env/lib/python3.5/site-packages/werkzeug/debug/__init__.py\", line 96, in get_pin_and_cookie_name\n    h.update('cookiesalt')\nTypeError: Unicode-objects must be encoded before hashing\nIs there an existing fix or do I need to change something on my end? I don't receive this error when running my app without the debug flag.\nThanks!", "issue_status": "Closed", "issue_reporting_time": "2015-11-09T03:33:44Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "952": {"issue_url": "https://github.com/pallets/flask/issues/1606", "issue_id": "#1606", "issue_summary": "Core signals template_rendered doesn't works", "issue_description": "ethe commented on 4 Nov 2015\nI try to subscribing a signal like this:\ndef log_template_renders(sender, template, context, **extra):\n    sender.logger.debug('Rendering template \"%s\" with context %s',\n                        template.name or 'string template',\n                        context)\n\nfrom flask import template_rendered\ntemplate_rendered.connect(log_template_renders, app)\nbut it doesn't works. It must be like this:\ndef log_template_renders(sender, template, context, **extra):\n    sender.logger.debug('Rendering template \"%s\" with context %s',\n                        template.name or 'string template',\n                        context)\n\nfrom flask import template_rendered\n\n@forum.before_request\ndef before_request():\n    template_rendered.connect(log_template_renders, app)\nthen it works well.", "issue_status": "Closed", "issue_reporting_time": "2015-11-04T10:06:44Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "953": {"issue_url": "https://github.com/pallets/flask/issues/1605", "issue_id": "#1605", "issue_summary": "New release and updated documentation please?", "issue_description": "rlam3 commented on 3 Nov 2015\nNew release and updated documentation please?", "issue_status": "Closed", "issue_reporting_time": "2015-11-03T12:20:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "954": {"issue_url": "https://github.com/pallets/flask/issues/1604", "issue_id": "#1604", "issue_summary": "OPTIONS requests sometimes match the wrong url_rule if there are multiple route handlers for different methods", "issue_description": "ahuling13 commented on 2 Nov 2015 \u2022\nedited by jeffwidman\nI have multiple route handlers with the same path but with different methods that they handles, e.g.\n@app.route('/users', methods=['GET'])\n@app.route('/users', methods=['POST'])\nThe problem occurs when a CORS pre-flight OPTIONS request is made to /users. Since the route and method match both endpoints, the wrong endpoint is sometimes returned which is problematic if you are trying to use the matched url_rule for any logic. In my case, I was using request.url_rule.methods to add the Access-Control-Allow-Methods header to the response.", "issue_status": "Closed", "issue_reporting_time": "2015-11-02T16:57:17Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "955": {"issue_url": "https://github.com/pallets/flask/issues/1602", "issue_id": "#1602", "issue_summary": "allow using alternative json library", "issue_description": "Member\njab commented on 1 Nov 2015\nIt looks like flask.json does not allow the user to specify an alternative json library (such as rapidjson). Instead it just does this:\ntry:\n    from itsdangerous import simplejson as _json\nexcept ImportError:\n    from itsdangerous import json as _json\nThis currently un-overridable behavior also means that, due to differences in when default(..) is called between simplejson and json, bugs can mysteriously appear when simplejson is installed that didn't appear without it.\nWould you consider giving the user some control over which json library is used?", "issue_status": "Closed", "issue_reporting_time": "2015-11-01T05:32:18Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "956": {"issue_url": "https://github.com/pallets/flask/issues/1601", "issue_id": "#1601", "issue_summary": "Duplicate: Downloadable documentation files links (pdf and zippe files) are dead", "issue_description": "dbenarfa commented on 31 Oct 2015\nDuplicate: Sorry\nI can't download the documentation ether pdf of zip file from flask website.\nDjoudi", "issue_status": "Closed", "issue_reporting_time": "2015-10-30T20:50:12Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "957": {"issue_url": "https://github.com/pallets/flask/issues/1600", "issue_id": "#1600", "issue_summary": "Add session methods to handle destruction and regeneration", "issue_description": "twolfson commented on 31 Oct 2015\nWe have been using flask-session for our sessions and noticed that there were no easy methods on flask or flask-session to handle session destruction/regeneration. These are practical as they aid in preventing session fixation attacks (e.g. when someone knows your session id and it doesn't get changed on login so they can reuse your session):\nhttps://www.owasp.org/index.php/Session_fixation\nWe saw that flask-kvsession has some logic for this:\nhttps://github.com/mbr/flask-kvsession/blob/0.6.2/flask_kvsession/__init__.py#L89-L124\nbut we were already invested into flask-session (added sha256 signing support) that we decided to implement similar logic there as well:\nfengsp/flask-session#27\nHowever, I'm not sure that's the ideal interface. I think the final product would look something more like\nflask.session.destroy()\nflask.session.regenerate()\nwhich in turn call flask.session_interface.destroy_session(self, app, session) and flask.session_interface.regenerate_session(self, app, session).\nWhat are your thoughts on this?", "issue_status": "Closed", "issue_reporting_time": "2015-10-30T19:57:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "958": {"issue_url": "https://github.com/pallets/flask/issues/1599", "issue_id": "#1599", "issue_summary": "PendingDeprecationWarning on use of import imp", "issue_description": "johnthagen commented on 30 Oct 2015\nInstall flask:\npip install flask\nIf test.py contains:\nimport flask\nA PendingDeprecationWarning is emitted:\npython -Werror test.py\nTraceback (most recent call last):\n  File \"test.py\", line 1, in <module>\n    import flask\n  File \"C:\\Users\\John Hagen\\AppData\\Local\\Programs\\Python\\Python35-32\\lib\\site-packages\\flask\\__init__.py\", line 21, in <module>\n    from .app import Flask, Request, Response\n  File \"C:\\Users\\John Hagen\\AppData\\Local\\Programs\\Python\\Python35-32\\lib\\site-packages\\flask\\app.py\", line 28, in <module>\n    from .config import ConfigAttribute, Config\n  File \"C:\\Users\\John Hagen\\AppData\\Local\\Programs\\Python\\Python35-32\\lib\\site-packages\\flask\\config.py\", line 12, in <module>\n    import imp\n  File \"C:\\Users\\John Hagen\\AppData\\Local\\Programs\\Python\\Python35-32\\lib\\imp.py\", line 33, in <module>\n    PendingDeprecationWarning, stacklevel=2)\nPendingDeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses", "issue_status": "Closed", "issue_reporting_time": "2015-10-29T19:25:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "959": {"issue_url": "https://github.com/pallets/flask/issues/1597", "issue_id": "#1597", "issue_summary": "KWC_code", "issue_description": "kingsring commented on 29 Oct 2015\nNo description provided.", "issue_status": "Closed", "issue_reporting_time": "2015-10-29T03:37:46Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "960": {"issue_url": "https://github.com/pallets/flask/issues/1591", "issue_id": "#1591", "issue_summary": "Example code leaked when running test", "issue_description": "shulhi commented on 22 Oct 2015\nRunning py.test leads to\ntests/test_regression.py:72:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <test_regression.assert_no_leak object at 0x104105550>, exc_type = None, exc_value = None, tb = None\n\n    def __exit__(self, exc_type, exc_value, tb):\n        if not hasattr(sys, 'getrefcount'):\n            gc.collect()\n        new_objects = len(gc.get_objects())\n        if new_objects > self.old_objects:\n>           pytest.fail('Example code leaked')\nE           Failed: Example code leaked\nI think this is an old issue (#452). I run the test on both CPython 2.7.8 and 3.5.0, and it failed on both occasions.", "issue_status": "Closed", "issue_reporting_time": "2015-10-22T03:45:14Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "961": {"issue_url": "https://github.com/pallets/flask/issues/1590", "issue_id": "#1590", "issue_summary": "in pluggable views, why not passing url variable parameters to view object?", "issue_description": "ethe commented on 22 Oct 2015\nin flask doc's giving examples, the view would look like this:\nclass UserAPI(MethodView):\n\n    def get(self, user_id):\n        if user_id is None:\n            # return a list of users\n            pass\n        else:\n            # expose a single user\n            pass\n\n    def post(self):\n        # create a new user\n        pass\n\n    def delete(self, user_id):\n        # delete a single user\n        pass\n\n    def put(self, user_id):\n        # update a single user\n        pass\nwhy not make it like this?\nclass UserAPI(MethodView):\n\n    def __init__(self, user_id):\n        self.user_id = user_id\n\n    def get(self):\n        if self.user_id is None:\n            # return a list of users\n            pass\n        else:\n            # expose a single user\n            pass\n\n    def post(self):\n        # create a new user\n        pass\n\n    def delete(self):\n        # delete a single user\n        pass\n\n    def put(self):\n        # update a single user\n        pass\nthe first way seems not simple and direct.\n1", "issue_status": "Closed", "issue_reporting_time": "2015-10-22T03:38:57Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "962": {"issue_url": "https://github.com/pallets/flask/issues/1587", "issue_id": "#1587", "issue_summary": "url_for: 500 Internal Server Error", "issue_description": "tfarina commented on 20 Oct 2015\nIn Flaskr example, I'm getting the following for url_for('add_entry')\nInternal Server Error\nThe server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.\nThis is running behind uwsgi with emperor mode. Logs are absent and do not show the real problem and I'm unable to diagnose.", "issue_status": "Closed", "issue_reporting_time": "2015-10-19T19:24:56Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "963": {"issue_url": "https://github.com/pallets/flask/issues/1586", "issue_id": "#1586", "issue_summary": "No wheel published", "issue_description": "Yuav commented on 19 Oct 2015\nPlease consider generating wheel for faster installs\nhttp://pythonwheels.com/", "issue_status": "Closed", "issue_reporting_time": "2015-10-19T11:36:34Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "964": {"issue_url": "https://github.com/pallets/flask/issues/1583", "issue_id": "#1583", "issue_summary": "Unknown error", "issue_description": "pingpong1109 commented on 18 Oct 2015\nMy code is as follows:\nfrom boto.mws.connection import MWSConnection\nimport xml.etree.ElementTree as ET\nfrom flask import Flask\n\nMWSConnection._parse_response = lambda s, x, y, z: z\nsecretKey =\"a\"\nsellerID=\"a\"\nmwsAuthToken=\"a\"\nmarketplaceID=\"a\"\nawsAccessKeyID=\"a\"\n\nmws = MWSConnection(awsAccessKeyID,secretKey)\napp = Flask(__name__)\n\nmws.SellerId = sellerID\nmws.Merchant = sellerID\nmws.MarketplaceId = marketplaceID\n\n@app.route('/products/matching/')\ndef getMatchingProduct(query):\n    response=mws.list_matching_products(MarketplaceId=marketplaceID,Query=query)\n    response=response.decode(encoding=\"utf-8\")\n    return response\n\nif __name__=='__name__':\n    app.run()\nAnd Visual Studio just tells me that there is an error and the program does not run. There is no leads for me to try to fix this but if I just do the following from the quickstart it works\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello World!'\n\nif __name__ == '__main__':\n    app.run()", "issue_status": "Closed", "issue_reporting_time": "2015-10-17T21:31:54Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "965": {"issue_url": "https://github.com/pallets/flask/issues/1582", "issue_id": "#1582", "issue_summary": "Enable distribution as a standalone, compiled executible with nuitka", "issue_description": "datnamer commented on 15 Oct 2015\nhttp://nuitka.net/pages/overview.html\nThoughts?", "issue_status": "Closed", "issue_reporting_time": "2015-10-15T02:05:21Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "966": {"issue_url": "https://github.com/pallets/flask/issues/1580", "issue_id": "#1580", "issue_summary": "Make SEND_FILE_MAX_AGE_DEFAULT support datetime.timedelta", "issue_description": "fnkr commented on 14 Oct 2015\nSEND_FILE_MAX_AGE_DEFAULT should support int or datetime.timedelta, like PERMANENT_SESSION_LIFETIME does.\nhttp://flask.pocoo.org/docs/0.10/config/#builtin-configuration-values", "issue_status": "Closed", "issue_reporting_time": "2015-10-14T07:29:54Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "967": {"issue_url": "https://github.com/pallets/flask/issues/1579", "issue_id": "#1579", "issue_summary": "route parameters", "issue_description": "gensmusic commented on 12 Oct 2015\nHow to route url like /usr?username=xxx ?", "issue_status": "Closed", "issue_reporting_time": "2015-10-12T07:13:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "968": {"issue_url": "https://github.com/pallets/flask/issues/1578", "issue_id": "#1578", "issue_summary": "Update docs on the website (at least the python 3 ones)", "issue_description": "JelteF commented on 5 Oct 2015\nThe website gives a very outdated view on the python 3 issue:\nhttp://flask.pocoo.org/docs/0.10/python3/\nThis seems to be updated to make it a lot more realistic, but is not online:\nhttps://github.com/mitsuhiko/flask/blob/master/docs/python3.rst\nThis RST file also seems to give a very different view than the dedicated python3 one:\nhttps://github.com/mitsuhiko/flask/blob/master/docs/advanced_foreword.rst", "issue_status": "Closed", "issue_reporting_time": "2015-10-05T17:16:20Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "969": {"issue_url": "https://github.com/pallets/flask/issues/1576", "issue_id": "#1576", "issue_summary": "an context confuse when i using the celery", "issue_description": "jiaqizho commented on 30 Sep 2015\nit appear in when i using the celery with flask_sqlalchemy\ni am using the celery with context by http://flask.pocoo.org/docs/0.10/patterns/celery/\nbut i find \"copy_current_request_context\" is not work , because the context is typeof the AppContext not the RequestContext . so when invoke @copy_current_request_context , it raise the\nRuntimeError('This decorator can only be used at local scopes '\n'when a request context is on the stack. For instance within '\n'view functions.')\nso i try to replace the RequestContext with AppContext in @copy_current_request_context , it work!\nthe code which i changed ( from flask/ctx.py ):\ndef copy_current_request_context(f):\n\n    top = _app_ctx_stack.top\n    if top is None:\n        raise RuntimeError('This decorator can only be used at local scopes '\n            'when a request context is on the stack.  For instance within '\n            'view functions.')\n    reqctx = top.copy()\n    def wrapper(*args, **kwargs):\n        with reqctx:\n            return f(*args, **kwargs)\n    return update_wrapper(wrapper, f)\n\n\n\n\n\nclass AppContext(object):\n\n    def __init__(self, app):\n        self.app = app\n        self.url_adapter = app.create_url_adapter(None)\n        self.g = app.app_ctx_globals_class()\n\n        # Like request context, app contexts can be pushed multiple times\n        # but there a basic \"refcount\" is enough to track them.\n        self._refcnt = 0\n\n    def copy(self):\n\n        mapp = self.__class__(self.app,)\n        return mapp\n\n    def push(self):\n        \"\"\"Binds the app context to the current context.\"\"\"\n        self._refcnt += 1\n        _app_ctx_stack.push(self)\n        appcontext_pushed.send(self.app)\n\n    def pop(self, exc=None):\n        \"\"\"Pops the app context.\"\"\"\n        self._refcnt -= 1\n        if self._refcnt <= 0:\n            if exc is None:\n                exc = sys.exc_info()[1]\n            self.app.do_teardown_appcontext(exc)\n        rv = _app_ctx_stack.pop()\n        assert rv is self, 'Popped wrong app context.  (%r instead of %r)' \\\n            % (rv, self)\n        appcontext_popped.send(self.app)\n\n    def __enter__(self):\n        self.push()\n        return self\n\n    def __exit__(self, exc_type, exc_value, tb):\n        self.pop(exc_value)", "issue_status": "Closed", "issue_reporting_time": "2015-09-30T16:14:24Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "970": {"issue_url": "https://github.com/pallets/flask/issues/1575", "issue_id": "#1575", "issue_summary": "What is the release schedule for 1.0?", "issue_description": "lipis commented on 28 Sep 2015\nWhat are the plans for the 1.0 release. This was brought up last year and there hasn't been any announcements since then. What progress is being made and what still remains?\n4", "issue_status": "Closed", "issue_reporting_time": "2015-09-28T17:54:51Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "971": {"issue_url": "https://github.com/pallets/flask/issues/1574", "issue_id": "#1574", "issue_summary": "support for rotating secret keys?", "issue_description": "coreybrett commented on 28 Sep 2015\nIs there any support for rotating secret keys in Flask?\nI would like to use http://securekey.heroku.com/ as a source.", "issue_status": "Closed", "issue_reporting_time": "2015-09-28T15:37:28Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "972": {"issue_url": "https://github.com/pallets/flask/issues/1572", "issue_id": "#1572", "issue_summary": "Logging Documentation, Patterns & Extending", "issue_description": "nfarrar commented on 25 Sep 2015\nI've spent the last month digging through flask and building a large application. Figuring out and configuring logging has been one of the most difficult things to get under control. I still don't understand it well enough that I'm comfortable or have things configured the way I'd like.\nWhen learning a new python package/framework/utility - the first thing I typically do is setup debug logging, so that I can see exactly what's going on. The more verbose the debugging messages are, the easier things are to figure out. Typically - debugging logs will dump information like:\na configuration file was loaded\na configuration value was set\nAPI providers have been initialized and are ready for use\nwhen API calls are performed, etc.\nAs far as I can tell, Flask doesn't do any of that - 'logs' are reserved for the instantiated flask application object itself - out of the box, running in debug mode - the only information I get out of the logs is that a request was received and answered. The debug logs don't seem to provide any information about flask's internal activities, things like:\na flask object was instantiated\na blueprint was registered\na route was configured\nan extension was loaded\nan extension was configured\nextension specific things\nThese are all things I've had to \"jump through hoops\" to understand (while designing my application, application structure, application patterns, etc) - things that seem like they would have been much easier to understand, had logs been available. As I dig further into Flask Internals while building out my application further, there's more and more stuff I'd like to be dumping to my logs so I know exactly what's going on, internally.\nAs an initial attempt to set this up - I started by using logging_tree to dump out the logger heirarchy to see what's what. Based on that - I basically hooked the Config object (similar to how flasky is doing this). Then I read through all the logger docs I could find, I started putting logging statements all over my application code, for example:\n    app.logger.debug('ENV:          %s' % app.config['ENV'])\n    app.logger.debug('HOST_ADDRESS: %s' % app.config['HOST_ADDRESS'])\n    app.logger.debug('HOST_PORT:    %s' % app.config['HOST_PORT'])\n    app.logger.debug('SECRET_KEY:   %s' % app.config['SECRET_KEY'])\n    app.logger.debug('PROJECT_ROOT: %s' % app.config['PROJECT_ROOT'])\n    app.logger.debug('APP_ROOT:     %s' % app.config['APP_ROOT'])\n    app.logger.debug('TMP_PATH:     %s' % app.config['TMP_PATH'])\nThis uses the default log format, which is very verbose (and is tailored to provide robust information about requests - not really great for what I'm trying to do here). Instead of getting 7 lines that that are tabularized and easy to read, this generates 28 lines, that not easy to scan for this use-case. I spent awhile trying to use app.logger as a logging.logger object, until I finally figured out (yes, it's in the docs, but a little counter-intuitive) that it's not actually a logging.logger object - it's actually a logging.StreamHandler() object.\nThen I spent a bunch of time learning more about logging and structured logging and reading through Flask's source, trying to understand exactly what's going on here. I've got some basic experience with structured logging in python, but what's going on here was well above my head and not easy to adjust. I ended up finding the Flask.debug_log_format() API, and used that to set my debug message format to the standard log messaging format - but when dealing with requests - now I miss the old format - and there's logs of other information I'd like to start injecting into those debugging messages as well, that I don't want in my standard messages.\nSo now - I've been attempting to figure out a pattern that will let me do something like:\nCreate a logging object that handles messages just for debugging messages related to my application setup & initialization - so I can dump things like:\nwhen a flask object is instantiated (im working on dispatching multiplication wsgi applications, as apart of the same flask application)\nthings specific to flask objects that have been instantiated:\nthe configuration values\nthe blueprints\nthe routes\nthe models\nCreate a separate request logger that:\nuses a log format similar to flask's default log format (very robust, specific to debugging requests)\ninjects additional information about requests into the logging formatter\nI'm still trying to figure out how to make this less explicit in my application code, so that automatically display debugging information about what flask is doing, rather than having to put debugging statements all throughout my application code\nI'm working through these things step by step, but they're definitely taking a long time - and unless I'm missing some documentation here or being very dense - these seem like a big challenge for user's new to to the Flask framwork. I've found some examples (by scouring google, github.com, and gist.github.com) that are helping me along, but nothing that really explains or walks through this kind of stuff.\nSo - am I missing some documentation here? Am I doing something that I shouldn't? Any suggestions or references you can point me to?", "issue_status": "Closed", "issue_reporting_time": "2015-09-25T17:20:10Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "973": {"issue_url": "https://github.com/pallets/flask/issues/1571", "issue_id": "#1571", "issue_summary": "@app.after_request should be able to process a non-response into a response", "issue_description": "ddevault commented on 22 Sep 2015\nThat is, the route should be able to return anything and after_request should be able to take that and convert it into an actual response object.\nUse case: all of our routes return dicts, which we serialize to JSON through a decorator. We have no non-JSON routes. I'd like to remove our decorator and make this change application-wide instead.\n1", "issue_status": "Closed", "issue_reporting_time": "2015-09-22T14:50:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "974": {"issue_url": "https://github.com/pallets/flask/issues/1570", "issue_id": "#1570", "issue_summary": "support unicode filename at download attachement by send_file in helper lib", "issue_description": "AndCycle commented on 17 Sep 2015\ncurrent send_file implement a traditional method to assign download filename,\naccording to RFC 5987 there is a method to have utf-8 encoding in it which is support by all modern browser nowadays,\nI use this line to make it\nrv.headers['Content-Disposition'] = \"attachment; filename*=UTF-8''%s\"%(urllib.quote_plus(filename.encode('utf-8')))\nI am not using headers.add,\nbecause you can see there have to use asterisk character which is nasty\nref:\nhttp://stackoverflow.com/questions/93551/how-to-encode-the-filename-parameter-of-content-disposition-header-in-http\nhttp://tools.ietf.org/html/rfc5987", "issue_status": "Closed", "issue_reporting_time": "2015-09-17T05:55:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "975": {"issue_url": "https://github.com/pallets/flask/issues/1569", "issue_id": "#1569", "issue_summary": "Flask Streaming Jsonify", "issue_description": "BrendanBall commented on 14 Sep 2015\nJsonify doesn't work with streaming in flask.\nIf I have a generator in a method that calls yield jsonify({'test':'test'})\nand I call the generator with\nreturn Response(stream_with_context(generator()), mimetype='application/json')\nthen flask throws an error saying application must write bytes.\nFor now I have resorted to using plain python json.dumps(dict)", "issue_status": "Closed", "issue_reporting_time": "2015-09-14T10:12:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "976": {"issue_url": "https://github.com/pallets/flask/issues/1564", "issue_id": "#1564", "issue_summary": "Popping application context after every request", "issue_description": "cmanallen commented on 27 Aug 2015\nI have tests that make multiple requests. After each test I'd like to pop the application context so it mimics the production environment as close as possible. Basically I'm looking to prevent any persistence in g between requests.\nWhat is the least painful way of implementing this?\nSample test:\ndef test(self):\n    user_get = self.client.get('user')\n    # pop context\n    jobs_get = self.client.get('jobs')", "issue_status": "Closed", "issue_reporting_time": "2015-08-26T23:01:54Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "977": {"issue_url": "https://github.com/pallets/flask/issues/1563", "issue_id": "#1563", "issue_summary": "Flask g persisting across requests in test suite", "issue_description": "cmanallen commented on 27 Aug 2015\ng seems to be persisting longer than it should. My understanding is that g only exists during a request's context. It shouldn't be persisted across multiple separate requests.\nMy auth handling\nWhen you visit the resource a token is used to determine who you are. Once we get the user_id from that token we persist it like the below code.\nif '_auth' not in g:\n    g._auth = Auth(user_id=user)\nreturn g._auth\nTest Setup\ndef test(self):\n    get = self.client.get('users', headers=make_headers())\n    raise Exception(g._auth.user_id) # returns the user id outside the request context\nAny ideas as to why g would be available? Let me know if you need more information. I wasn't sure how much to include.", "issue_status": "Closed", "issue_reporting_time": "2015-08-26T22:31:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "978": {"issue_url": "https://github.com/pallets/flask/issues/1562", "issue_id": "#1562", "issue_summary": "Flask app installed as egg raises builtins.NotADirectoryError for templates", "issue_description": "davidmegginson commented on 27 Aug 2015\nI've created a MANIFEST.in file and added the include_package_data flag to setup as recommended in #84 and have confirmed that the template files do appear in the egg file installed into my virtualenv:\n(test)david@snape:~$ unzip -l .virtualenvs/test/lib/python3.4/site-packages/hxl_proxy-0.3-py3.4.egg | grep error\n      154  2015-08-26 16:48   hxl_proxy/templates/error.html\nWhen I run from the source directory, all is fine. When I try to run from the egg installed in the virtualenv, I get the following error:\nTraceback (most recent call last):\n  File \"/home/david/.virtualenvs/test/lib/python3.4/site-packages/Flask-0.10.1-py3.4.egg/flask/app.py\", line 1836, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/home/david/.virtualenvs/test/lib/python3.4/site-packages/Flask-0.10.1-py3.4.egg/flask/app.py\", line 1820, in wsgi_app\n    response = self.make_response(self.handle_exception(e))\n  File \"/home/david/.virtualenvs/test/lib/python3.4/site-packages/Flask-0.10.1-py3.4.egg/flask/app.py\", line 1403, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/home/david/.virtualenvs/test/lib/python3.4/site-packages/Flask-0.10.1-py3.4.egg/flask/_compat.py\", line 33, in reraise\n    raise value\n  File \"/home/david/.virtualenvs/test/lib/python3.4/site-packages/Flask-0.10.1-py3.4.egg/flask/app.py\", line 1817, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/home/david/.virtualenvs/test/lib/python3.4/site-packages/Flask-0.10.1-py3.4.egg/flask/app.py\", line 1477, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"/home/david/.virtualenvs/test/lib/python3.4/site-packages/Flask-0.10.1-py3.4.egg/flask/app.py\", line 1379, in handle_user_exception\n    return handler(e)\n  File \"/home/david/.virtualenvs/test/lib/python3.4/site-packages/hxl_proxy-0.3-py3.4.egg/hxl_proxy/controllers.py\", line 44, in error\n    return render_template('error.html', message=str(e)), status\n  File \"/home/david/.virtualenvs/test/lib/python3.4/site-packages/Flask-0.10.1-py3.4.egg/flask/templating.py\", line 127, in render_template\n    return _render(ctx.app.jinja_env.get_or_select_template(template_name_or_list),\n  File \"/home/david/.virtualenvs/test/lib/python3.4/site-packages/Jinja2-2.8-py3.4.egg/jinja2/environment.py\", line 851, in get_or_select_template\n    return self.get_template(template_name_or_list, parent, globals)\n  File \"/home/david/.virtualenvs/test/lib/python3.4/site-packages/Jinja2-2.8-py3.4.egg/jinja2/environment.py\", line 812, in get_template\n    return self._load_template(name, self.make_globals(globals))\n  File \"/home/david/.virtualenvs/test/lib/python3.4/site-packages/Jinja2-2.8-py3.4.egg/jinja2/environment.py\", line 774, in _load_template\n    cache_key = self.loader.get_source(self, name)[1]\n  File \"/home/david/.virtualenvs/test/lib/python3.4/site-packages/Flask-0.10.1-py3.4.egg/flask/templating.py\", line 60, in get_source\n    return loader.get_source(environment, local_name)\n  File \"/home/david/.virtualenvs/test/lib/python3.4/site-packages/Jinja2-2.8-py3.4.egg/jinja2/loaders.py\", line 171, in get_source\n    f = open_if_exists(filename)\n  File \"/home/david/.virtualenvs/test/lib/python3.4/site-packages/Jinja2-2.8-py3.4.egg/jinja2/utils.py\", line 151, in open_if_exists\n    return open(filename, mode)\nNotADirectoryError: [Errno 20] Not a directory: '/home/david/.virtualenvs/test/lib/python3.4/site-packages/hxl_proxy-0.3-py3.4.egg/hxl_proxy/templates/error.html'", "issue_status": "Closed", "issue_reporting_time": "2015-08-26T20:53:57Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "979": {"issue_url": "https://github.com/pallets/flask/issues/1561", "issue_id": "#1561", "issue_summary": "add automatic pep8 test in travis", "issue_description": "liuchang0812 commented on 26 Aug 2015\nIt's very useful and easy to modify travis.yml\u3002", "issue_status": "Closed", "issue_reporting_time": "2015-08-26T05:01:08Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "980": {"issue_url": "https://github.com/pallets/flask/issues/1559", "issue_id": "#1559", "issue_summary": "url_for('static', _external=True) gives bogus url with app.url_map.host_matching = True", "issue_description": "Member\njab commented on 23 Aug 2015\napp = Flask(__name__)\napp.url_map.host_matching = True\napp.url_map._rules_by_endpoint['static'][0].host = 'mydomain.com'  # XXX better way to do this?\nwith app.test_request_context():\n    print url_for('static', filename='foo', _external=True)\n=>\n'http:///static/foo'\nExpected 'http://mydomain.com/static/foo'.\nAm I missing something, or is this a bug?\nThanks for looking and for the great work on Flask.", "issue_status": "Closed", "issue_reporting_time": "2015-08-23T02:10:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "981": {"issue_url": "https://github.com/pallets/flask/issues/1556", "issue_id": "#1556", "issue_summary": "PDF and zipped HTML doc links are broken in Flask homepage", "issue_description": "marcosps commented on 19 Aug 2015\nBroken:\nhttp://flask.pocoo.org/docs/flask-docs.pdf\nhttp://flask.pocoo.org/docs/flask-docs.zip\nWorking:\nhttp://flask.pocoo.org/docs/0.10/", "issue_status": "Closed", "issue_reporting_time": "2015-08-19T17:00:48Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "982": {"issue_url": "https://github.com/pallets/flask/issues/1555", "issue_id": "#1555", "issue_summary": "request.files blocks indefinitely on iOS Safari file upload", "issue_description": "expntly commented on 16 Aug 2015\nFlask (0.10.1)\nFlask-Cors (2.1.0)\nWhat happens is on file upload from an iPhone 6 Safari, the flask server hangs when trying to access request.files. The same iPhone with Chrome works fine. I tried an even bigger file with Chrome, works fine too, so size doesn't seem to be the issue.\n@app.route(\"/upload\", methods=[\"POST\"])\ndef upload():\n  print request.files\nFor debugging purposes, here's what the environ shows with the Safari client:\n   'environ': {'CONTENT_LENGTH': '1496190',                                                                                                                                                                     \n               'CONTENT_TYPE': 'multipart/form-data; boundary=----WebKitFormBoundaryaQ6AnBdQhCxhm4b1',                                                                                                          \n               'HTTP_ACCEPT': 'application/json, text/plain, */*',\n               'HTTP_ACCEPT_ENCODING': 'gzip, deflate',\n               'HTTP_ACCEPT_LANGUAGE': 'en-us',\n               'HTTP_CONNECTION': 'keep-alive',\n               'HTTP_HOST': '192.168.1.155:5000',\n               'HTTP_ORIGIN': 'http://192.168.1.155:3000',\n               'HTTP_REFERER': 'http://192.168.1.155:3000/',\n               'HTTP_USER_AGENT': 'Mozilla/5.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12A365 Safari/600.1.4',                                     \n               'PATH_INFO': '/upload',\n               'QUERY_STRING': '',\n               'REMOTE_ADDR': '192.168.1.137',                                                                                                                                                                  \n               'REMOTE_PORT': 52871,                                                                                                                                                                            \n               'REQUEST_METHOD': 'POST',\n               'SCRIPT_NAME': '',\n               'SERVER_NAME': '0.0.0.0',\n               'SERVER_PORT': '5000',\n               'SERVER_PROTOCOL': 'HTTP/1.1',\n               'SERVER_SOFTWARE': 'Werkzeug/0.10.4',\n               'werkzeug.request': <Request 'http://192.168.1.155:5000/upload' [POST]>,\n               'werkzeug.server.shutdown': <function shutdown_server at 0x10bab2938>,                                                                                                                           \n               'wsgi.errors': <open file '<stderr>', mode 'w' at 0x10ac741e0>,                                                                                                                                  \n               'wsgi.input': <socket._fileobject object at 0x10baade50>,                                                                                                                                        \n               'wsgi.multiprocess': False,\n               'wsgi.multithread': False,\n               'wsgi.run_once': False,\n               'wsgi.url_scheme': 'http',\n               'wsgi.version': (1, 0)},\nAnd the HTML is classic:\n<form method=\"POST\" enctype=\"multipart/form-data\">\n  <input type=\"file\" name=\"thefile\" ...", "issue_status": "Closed", "issue_reporting_time": "2015-08-16T07:17:59Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "983": {"issue_url": "https://github.com/pallets/flask/issues/1554", "issue_id": "#1554", "issue_summary": "Help needed: 404 error on every page dynamic page of the application", "issue_description": "Contributor\nAlexis-benoist commented on 11 Aug 2015\nHello,\nI'm running into the problem described in stackoverflow here.\nThe code is running on the server normally and on my colleagues computers. Though on my computer for every route is returning a 404 error, though static content is working. The capture below shows that I'm working on the good port and the route exists.\nI reinstalled the virtuelenv and I still have this issues. Do you guys have ever encountered this problem?\nI'm using Python 2.7.6 and flask:\nFlask==0.10.1\nWerkzeug==0.10.4\nJinja2==2.7.3\nAny answer is welcome.\nCheers,\nAlexis.", "issue_status": "Closed", "issue_reporting_time": "2015-08-11T08:18:15Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "984": {"issue_url": "https://github.com/pallets/flask/issues/1553", "issue_id": "#1553", "issue_summary": "Errors if server runs from in virtualenv.", "issue_description": "F483 commented on 7 Aug 2015\nStart with server not install in virtualenv (works fine).\n# setup env                                                                 \ncd /tmp                                                                     \nrm -rf dataserv                                                             \ngit clone https://github.com/Storj/dataserv                                 \ncd dataserv                                                                 \nvirtualenv -p /usr/bin/python3 env                                          \nenv/bin/python setup.py develop                                             \n\n# start server (XXX have to kill process manually)                          \n./env/bin/python -m dataserv.app &                                          \nsleep 5                                                                     \n\n# test calls                                                                \ncurl http://127.0.0.1:5000/api/register/1EdCc5bxUAsdsvuJN48gK8UteezYNC2ffU  \ncurl http://127.0.0.1:5000/api/height/1EdCc5bxUAsdsvuJN48gK8UteezYNC2ffU/2  \nStart with server install in virtualenv (raises 404s for some calls).\n# setup env                                                                 \ncd /tmp                                                                     \nrm -rf dataservenv                                                          \nvirtualenv -p /usr/bin/python3 dataservenv                                  \n./dataservenv/bin/pip install dataserv                                      \n\n# start server (XXX have to kill process manually)                          \n./dataservenv/bin/python -m dataserv.app &                                  \nsleep 5 # wait for server to start                                          \n\n# test calls                                                                \ncurl http://127.0.0.1:5000/api/register/1EdCc5bxUAsdsvuJN48gK8UteezYNC2ffU  \ncurl http://127.0.0.1:5000/api/height/1EdCc5bxUAsdsvuJN48gK8UteezYNC2ffU/2  ", "issue_status": "Closed", "issue_reporting_time": "2015-08-07T14:48:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "985": {"issue_url": "https://github.com/pallets/flask/issues/1552", "issue_id": "#1552", "issue_summary": "Flask Truck Factor", "issue_description": "gavelino commented on 7 Aug 2015\nAs part of my PhD research on code authorship, we calculated the Truck Factor (TF) of some popular GitHub repositories.\nAs you probably know, the Truck (or Bus) Factor designates the minimal number of developers that have to be hit by a truck (or quit) before a project is incapacitated. In our work, we consider that a system is in trouble if more than 50% of its files become orphan (i.e., without a main author).\nMore details on our work in this preprint: https://peerj.com/preprints/1233\nWe calculated the TF for Flask and obtained a value of 1.\nThe developer responsible for this TF is:\nArmin Ronacher - author of 90% of the files\nTo validate our results, we would like to ask Flask developers the following three brief questions:\n(a) Do you agree that the listed developer is the main developer of Flask?\n(b) Do you agree that Flask will be in trouble if the listed developer leave the project (e.g., if he wins in the lottery, to be less morbid)?\n(c) Does Flask have some characteristics that would attenuate the loss of the listed developer (e.g., detailed documentation)?\nThanks in advance for your collaboration,\nGuilherme Avelino\nPhD Student\nApplied Software Engineering Group (ASERG)\nUFMG, Brazil\nhttp://aserg.labsoft.dcc.ufmg.br/", "issue_status": "Closed", "issue_reporting_time": "2015-08-07T12:13:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "986": {"issue_url": "https://github.com/pallets/flask/issues/1551", "issue_id": "#1551", "issue_summary": "Backslash doesn't work with string URL Converter", "issue_description": "deepaknc commented on 7 Aug 2015\nI have this route\n@app.@app.route(/resource/<string:myresource>/details')\ndef handler(myresource):\n  ....\n  ...\nWhen I have a leading backslash in the name, it doesn't seem to be getting routed correctly.\nThis works:\n /resource/testresource/details/\nThis does not work:\n /resource/%5Ctestresource/details\nIs this expected? What am I doing wrong?", "issue_status": "Closed", "issue_reporting_time": "2015-08-07T01:01:37Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "987": {"issue_url": "https://github.com/pallets/flask/issues/1550", "issue_id": "#1550", "issue_summary": "Flask function decorator run at defintion time and call time?", "issue_description": "kevinschaich commented on 5 Aug 2015\nI'm trying to implement a decorator function in Flask that does two things: register a page route and add some things to my DB on definition time, and then on runtime, when a request is made to a page it processes whether a user is authenticated.\nI know that I can do these in two separate decorator functions, but this won't work because I eventually need to process the same set of information (app, rule, access groups, etc.) at both definition time and runtime.\nThe code below is what I have been messing with, but I have not been able to get it to work. It compiles and you are able to see \"Definition time\" in the console and \"index\" in the browser, but \"Runtime\" never gets printed. Can anyone suggest what I may be doing wrong?\nfrom flask import Flask\nfrom functools import wraps\n\napp = Flask(__name__)\n\n\ndef register(app, rule, **options):\n    def wrapper(f):\n        print \"Definition time\"\n        endpoint = options.pop('endpoint', f.__name__)\n        access_groups = options.pop('access_groups', None)\n        methods = options.get('methods', ['GET'])\n\n        app.add_url_rule(rule, endpoint, f, **options)\n\n        @wraps(f)\n        def wrapped(*args, **kwargs):\n            print \"Runtime\"\n            return f(*args, **kwargs)\n        return wrapped\n\n    return wrapper\n\n\n@register(app, '/', methods=['GET', 'POST'], access_groups=['all-access'])\ndef index():\n    return \"index\"\n\nif __name__ == '__main__':\n    app.run(debug=True)", "issue_status": "Closed", "issue_reporting_time": "2015-08-05T01:31:22Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "988": {"issue_url": "https://github.com/pallets/flask/issues/1547", "issue_id": "#1547", "issue_summary": "Quickstart > File Uploads > incorrect import: secure_filename", "issue_description": "luciferz2012 commented on 2 Aug 2015\nIt should be imported as:\nfrom werkzeug.utils import secure_filename\nNot:\nfrom werkzeug import secure_filename\nsee http://werkzeug.pocoo.org/docs/0.10/utils/\n2\n11\n1", "issue_status": "Closed", "issue_reporting_time": "2015-08-02T08:21:41Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "989": {"issue_url": "https://github.com/pallets/flask/issues/1546", "issue_id": "#1546", "issue_summary": "Broken links on website", "issue_description": "tigrafrog commented on 2 Aug 2015\nHi,\nlooks like you have some issues with website:\nDocumentation:\nhttp://flask.pocoo.org/docs/flask-docs.pdf returns 404\nhttp://flask.pocoo.org/docs/flask-docs.zip returns 404\nfeedback.flask.pocoo.org \"Server not found\"\nAn main question (why I try to use \"feedback\"):\nAny plans to full Python 3 support?", "issue_status": "Closed", "issue_reporting_time": "2015-08-02T03:56:01Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "990": {"issue_url": "https://github.com/pallets/flask/issues/1545", "issue_id": "#1545", "issue_summary": "Request.form data dict... Could we modify the structure?", "issue_description": "Lewiscowles1986 commented on 2 Aug 2015\nusing the following html form\n<h1>Debug Form</h1>\n<form action=\"/debug\" method=\"POST\">\n<input name=\"item[1][name]\" value=\"\" />\n<input name=\"item[2][name]\" value=\"\" />\n<button type=\"submit\">test</button>\n</form>\nto the following flask application method / view\n@app.route('/debug', methods=[\"GET\",\"POST\",\"PUT\",\"PATCH\",\"DELETE\"])\ndef debug_info():\n    return jsonify({\"data\":request.data,\"formdata\":request.form})\nI get\n{\n  \"data\": \"\", \n  \"formdata\": {\n    \"item[1][name]\": \"fdhnnhdsfsdslkkl\", \n    \"item[2][name]\": \"djdfhdjfh\"\n  }\n}\nI expected to see\n{\n  \"data\": \"\", \n  \"formdata\": {\n    \"item\":[\n      {\n         \"name\": \"fdhnnhdsfsdslkkl\"\n       },\n       { \n         \"name\": \"djdfhdjfh\"\n       }\n    ]\n  }\n}\nThe first and actual output requires further, more explicit parsing, from a sub-optimal data structure to achieve a nice dictionary; but I cannot see how the flat structure of the request.form object could be helping anyone...", "issue_status": "Closed", "issue_reporting_time": "2015-08-02T03:08:59Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "991": {"issue_url": "https://github.com/pallets/flask/issues/1544", "issue_id": "#1544", "issue_summary": "flask blueprint", "issue_description": "pyphrb commented on 2 Aug 2015\nis a good function", "issue_status": "Closed", "issue_reporting_time": "2015-08-01T18:48:32Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "992": {"issue_url": "https://github.com/pallets/flask/issues/1543", "issue_id": "#1543", "issue_summary": "Start recommending Python 3", "issue_description": "nitori commented on 1 Aug 2015\nIn the docs the section The Status of Python 3 states that you strongly recommend using Python 2.6 and 2.7.\nWell, isn't it about time to officially recommend to use Python 3 instead? Has this been discussed before (recently)?\nI myself at least never ran in any problems using Python 3 with Flask. Though, admittedly, I don't have any large projects or unusual dependencies - or maybe I just instinctively avoid anything that's not Python 3 compatible and thus never noticed problems.\nStill, it seems to me that a recommendation to Python 3 is reasonable, unless you have special dependencies, and it doesn't look to me that there are many (active) Flask-* packages that require Python 2.", "issue_status": "Closed", "issue_reporting_time": "2015-08-01T10:04:41Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "993": {"issue_url": "https://github.com/pallets/flask/issues/1541", "issue_id": "#1541", "issue_summary": "Returned 200 for illegal request url", "issue_description": "loggerhead commented on 28 Jul 2015\nFlask version is 0.10.1 and the below is code of server side.\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello World!'\n\nif __name__ == '__main__':\n    app.run()\nThe below is input and output of netcat tool.\nGET foo://127.999.999.999/ HTTP/1.1\n\nHTTP/1.0 200 OK\nContent-Type: text/html; charset=utf-8\nContent-Length: 12\nServer: Werkzeug/0.10.4 Python/2.7.10\nDate: Tue, 28 Jul 2015 02:56:03 GMT\n\nHello World!", "issue_status": "Closed", "issue_reporting_time": "2015-07-28T03:03:24Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "994": {"issue_url": "https://github.com/pallets/flask/issues/1540", "issue_id": "#1540", "issue_summary": "Jinja2 template not found on Large app how to wiki", "issue_description": "kimyu92 commented on 27 Jul 2015\nI am using flask-wtf v0.12\nRegarding to this guide: https://github.com/mitsuhiko/flask/wiki/Large-app-how-to\nDoes anyone know is the guide obsolete or am i missing something on the setup?", "issue_status": "Closed", "issue_reporting_time": "2015-07-26T19:32:21Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "995": {"issue_url": "https://github.com/pallets/flask/issues/1531", "issue_id": "#1531", "issue_summary": "gevent has been updated to use libev instead of livevent, docs needs to be updated", "issue_description": "WayneYe commented on 15 Jul 2015\nSince gevent 1.0, it has switched from libevent to libev, please refer: http://www.gevent.org/ and http://blog.gevent.org/2010/02/27/why-gevent/.\nI would like to submit a pull request for this doc page: http://flask.pocoo.org/docs/0.10/deploying/wsgi-standalone/, please confirm this update and I will prepare the pull request, thanks!", "issue_status": "Closed", "issue_reporting_time": "2015-07-14T18:54:54Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "996": {"issue_url": "https://github.com/pallets/flask/issues/1529", "issue_id": "#1529", "issue_summary": "Missing \"app.run\" in source code of example \"AJAX with jQuery\"", "issue_description": "Contributor\nAayush-Kasurde commented on 12 Jul 2015\nWhile debugging issue #1517 , found that app.run() line is missing in jqueryexample.py", "issue_status": "Closed", "issue_reporting_time": "2015-07-12T15:30:42Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "997": {"issue_url": "https://github.com/pallets/flask/issues/1528", "issue_id": "#1528", "issue_summary": "Application/request stack corruption if unhandled exception is raised in session interface", "issue_description": "WeirdCarrotMonster commented on 12 Jul 2015\nRequestContext push is called in wsgi_app method, outside try..finally block. In push() method application's open_session call takes place, which can possibly lead to exception. But, since original call is not in try..finally block, removal of stack top never takes place. This leads to following problems:\n1. Application context stack never updates again\nRequestContext.push() only checks that application context exists or belongs to current application, but same rules apply to previous context.\n2. Request context stack grows\nAgain, request context stack is pushed, but never removed. Actually just a memory leak :)\n3. Misleading code comment about open_session usage\nInspired by this comment, i started to develop multi-tenant application, and found nothing but disappointment. You can't actually access request_context before open_session interface call. This means, you can't configure which database to use before opening a session.\nMy proposition.\nMove open_session call to full_dispatch_request, and add interfaces and methods, similar to before_request - before_open_session, or call before_request before opening session (may break code that depends on session interface)", "issue_status": "Closed", "issue_reporting_time": "2015-07-12T07:06:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "998": {"issue_url": "https://github.com/pallets/flask/issues/1527", "issue_id": "#1527", "issue_summary": "Update docs at http://flask.pocoo.org/docs/0.10/patterns/fileuploads/", "issue_description": "d3QUone commented on 11 Jul 2015\nThere is a misprint at http://flask.pocoo.org/docs/0.10/patterns/fileuploads/\nfrom werkzeug import secure_filename\nwhich is fixed in this this repo\nfrom werkzeug.utils import secure_filename", "issue_status": "Closed", "issue_reporting_time": "2015-07-11T11:54:23Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "999": {"issue_url": "https://github.com/pallets/flask/issues/1526", "issue_id": "#1526", "issue_summary": "TypeError: unbound method __init__() must be called with AssertionError instance as first argument (got FormDataRoutingRedirect instance instead)", "issue_description": "Contributor\ncharlax commented on 10 Jul 2015\nI'm testing the behavior of a POST endpoint that issues a redirect.\nI get the following traceback:\nenv/local/lib/python2.7/site-packages/flask/app.py:1820: in wsgi_app\n    response = self.make_response(self.handle_exception(e))\nenv/local/lib/python2.7/site-packages/flask/app.py:1403: in handle_exception\n    reraise(exc_type, exc_value, tb)\nenv/local/lib/python2.7/site-packages/flask/app.py:1817: in wsgi_app\n    response = self.full_dispatch_request()\nenv/local/lib/python2.7/site-packages/flask/app.py:1477: in full_dispatch_request\n    rv = self.handle_user_exception(e)\nenv/local/lib/python2.7/site-packages/flask/app.py:1381: in handle_user_exception\n    reraise(exc_type, exc_value, tb)\nenv/local/lib/python2.7/site-packages/flask/app.py:1475: in full_dispatch_request\n    rv = self.dispatch_request()\nenv/local/lib/python2.7/site-packages/flask/app.py:1453: in dispatch_request\n    self.raise_routing_exception(req)\nenv/local/lib/python2.7/site-packages/flask/app.py:1439: in raise_routing_exception\n    raise FormDataRoutingRedirect(request)\nenv/local/lib/python2.7/site-packages/flask/debughelpers.py:68: in __init__\n    AssertionError.__init__(self, ''.join(buf).encode('utf-8'))\nE   TypeError: unbound method __init__() must be called with AssertionError instance as first argument (got FormDataRoutingRedirect instance instead)\nI understand the context around why we need to raise FormDataRoutingRedirect - and don't mind asserting that it's raised in my test. The problem here is the TypeError: unbound method __init__() must be called with AssertionError.\nI'll see if I can fix it a bit later but wanted to report it first. I checked the other reported issues.\nI'm using Python 2.7.9 and Flask 0.10.1", "issue_status": "Closed", "issue_reporting_time": "2015-07-10T11:59:12Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1000": {"issue_url": "https://github.com/pallets/flask/issues/1525", "issue_id": "#1525", "issue_summary": "Flask + eventlet slow response time", "issue_description": "cuonglm commented on 7 Jul 2015\nI have an issue with Flask + eventlet server, details in this link.\nI integrated Flask with Openstack keystone middleware to authenticate for my Flask API server.\nconfig_file = None\nif config_file:\n    prepare_service([None, '--config-file', config_file])\nelse:\n    prepare_service()\n\napplication = setup_app()\napplication.wsgi_app = middleware.install_keystone_middleware(application.wsgi_app, cfg.CONF)\nI profiled in Flask server and all things is normal, the server running time for each APIs is very low, from 2 to 20 ms.\n--------------------------------------------------------------------------------                                           [5994/9927$\nPATH: '/api/line_usages'\n         6913 function calls (6817 primitive calls) in 0.019 seconds\n\n   Ordered by: internal time\n   List reduced from 748 to 5 due to restriction <5>\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n       50    0.001    0.000    0.002    0.000 /usr/lib/python2.7/logging/__init__.py:451(format)\n       50    0.001    0.000    0.004    0.000 /opt/dev_myservice/openstack/common/log.py\n:626(format)\n        2    0.001    0.000    0.001    0.000 {method 'query' of '_mysql.connection' objects}\n       50    0.001    0.000    0.001    0.000 {method 'write' of 'file' objects}\n       25    0.001    0.000    0.001    0.000 /usr/lib/python2.7/logging/__init__.py:242(__init__)\nBut the response to client is still long. What is the reason for Flask slow response time and how can I solve this?", "issue_status": "Closed", "issue_reporting_time": "2015-07-07T11:02:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1001": {"issue_url": "https://github.com/pallets/flask/issues/1524", "issue_id": "#1524", "issue_summary": "error in user_timeline", "issue_description": "tfarina commented on 5 Jul 2015\nI'm getting the following error:\nTraceback (most recent call last):\nFile \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1836, in call\nreturn self.wsgi_app(environ, start_response)\nFile \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1820, in wsgi_app\nresponse = self.make_response(self.handle_exception(e))\nFile \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1403, in handle_exception\nreraise(exc_type, exc_value, tb)\nFile \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1817, in wsgi_app\nresponse = self.full_dispatch_request()\nFile \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1477, in full_dispatch_request\nrv = self.handle_user_exception(e)\nFile \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1381, in handle_user_exception\nreraise(exc_type, exc_value, tb)\nFile \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1475, in full_dispatch_request\nrv = self.dispatch_request()\nFile \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1461, in dispatch_request\nreturn self.view_functionsrule.endpoint\nFile \"flask/examples/minitwit/minitwit.py\", line 122, in user_timeline\n[username], one=True)\nTypeError: string indices must be integers, not unicode", "issue_status": "Closed", "issue_reporting_time": "2015-07-04T23:25:12Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1002": {"issue_url": "https://github.com/pallets/flask/issues/1523", "issue_id": "#1523", "issue_summary": "Relative import doesn't work in debug mode", "issue_description": "benjamin-hodgson commented on 1 Jul 2015\nI get an exception when I attempt to use a relative import with Flask in debug mode.\nSteps to reproduce\nMy package looks like this:\nmypkg\\\n  __init__.py\n  mymodule.py\nHere's __init__.py:\nxyz = 123\nAnd in mymodule.py:\nfrom flask import Flask\nfrom . import xyz\n\napp = Flask(__name__)\napp.run(debug=True)\nRun the application using python -m mypkg.mymodule. I'm using Python 3.4.3 on a Windows machine, with Flask 0.10.1 (the version from PyPI).\nActual results\nThe usual \"you attempted to use a relative import but you're not in a package\" exception:\nTraceback (most recent call last):\n  File \"...\\mymodule.py\", line 2, in <module>\n    from . import xyz\nSystemError: Parent module '' not loaded, cannot perform relative import\nIf you remove debug=True, or use an absolute import (from mypkg import xyz), there is no error. The error persists if you name your module __main__.py (instead of mymodule.py) and use python -m mypkg. The error persists if you attempt to import a name from a submodule of the package (it's nothing to do with the import being from __init__.py).\nI'm guessing it's something to do with Flask's magical reloading of edited files in debug mode.\nExpected results\nNo error; xyz is imported as usual.", "issue_status": "Closed", "issue_reporting_time": "2015-07-01T11:11:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1003": {"issue_url": "https://github.com/pallets/flask/issues/1521", "issue_id": "#1521", "issue_summary": "Better docs for app context and it's solutions", "issue_description": "rakanalh commented on 27 Jun 2015\nI've been using Flask for about a month now and i can say that it's pretty awesome.\nThe one thing that annoys me is the \"application context\" and it's lack of proper documentation.\nI understand that app context makes you able to instantiate multiple apps in a single python process. But i've been thinking for quite a while about what is a proper use case for this? can the documentation provide an example about why and how to do this?\nIn addition, if faced with \"working outside application context\" exception, how do you overcome this? for example in a celery task. Do we use something like, Flask Celery Helper? Because even using the Celery object alone would still result in such exception being raised inside whatever we do inside the celery task itself. That has been kind of a debugging nightmare.\nMany Thanks", "issue_status": "Closed", "issue_reporting_time": "2015-06-26T23:54:21Z", "fixed_by": "#1861", "pull_request_summary": "Document Runtime Error when running outside of application context", "pull_request_description": "Contributor\nryanbackman commented on 3 Jun 2016\nAdds a little documentation of the Runtime Error that you get when working outside an applications context.\nfix #1521", "pull_request_status": "Merged", "issue_fixed_time": "2016-06-02T21:15:24Z", "files_changed": [["5", "docs/appcontext.rst"]]}, "1004": {"issue_url": "https://github.com/pallets/flask/issues/1518", "issue_id": "#1518", "issue_summary": "Any plans for new versions? Maybe 1.0?", "issue_description": "surrealcristian commented on 25 Jun 2015\nHello everybody.\nPlease, forgive my poor english, and do not get me wrong, my question is not malicious.\nActually, are any plans to reach version 1.0? Or at least reach a new version?\n1.0, or a more fluid release versions can be a way to attract more users and developers.\nGreetings, and thanks for the work you do in Flask.", "issue_status": "Closed", "issue_reporting_time": "2015-06-25T18:13:42Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1005": {"issue_url": "https://github.com/pallets/flask/issues/1517", "issue_id": "#1517", "issue_summary": "sourcecode from \"AJAX with jQuery\" not working?", "issue_description": "BeryllN commented on 24 Jun 2015\nHi,\nI just downloaded the sourcecode for the AJAX with jQuery example (http://flask.pocoo.org/docs/0.10/patterns/jquery/).\nWhen i try and run index.html, it gives me an error: \"Uncaught ReferenceError: $ is not defined\" for index.html:5.\nFor layout.html, it gives 2 errors:\n\"GET http://localhost/templates/script.js\" for layout.html:5\n\"Uncaught SyntaxError: Unexpected token {\" for layout.html:7\nConsequently, the example doesn't work as no result is generated if you put 2 numbers in the input boxes.\nCheers", "issue_status": "Closed", "issue_reporting_time": "2015-06-24T12:58:51Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1006": {"issue_url": "https://github.com/pallets/flask/issues/1516", "issue_id": "#1516", "issue_summary": "cross domain", "issue_description": "lisper-inmove commented on 24 Jun 2015\ni met cross-domain and i use this decorate to solve this problem,\nhttp://flask.pocoo.org/snippets/56/\nbut only if\n@crossdomain(origin='*')\ncan success,and when i try to point a specific domain such as @crossdomain(origin=\"test.123.com\") or\n@crossdomain(origin=[\"test.123.com\"]), it failed. what should i do to point a specific domain?\ni need help, thx.", "issue_status": "Closed", "issue_reporting_time": "2015-06-24T12:57:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1007": {"issue_url": "https://github.com/pallets/flask/issues/1513", "issue_id": "#1513", "issue_summary": "Does the 'docs/quickstart.rst:A Minimal Application' missed something?", "issue_description": "eailfly commented on 23 Jun 2015\nI think the first application should be (and the official site is):\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello World!'\n\nif __name__ == '__main__':\n    app.run()\nIn this doc it's missing:\nif __name__ == '__main__':\n    app.run()", "issue_status": "Closed", "issue_reporting_time": "2015-06-23T13:18:20Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1008": {"issue_url": "https://github.com/pallets/flask/issues/1512", "issue_id": "#1512", "issue_summary": "No more than 5XX Requests/Second possible", "issue_description": "gobijan commented on 23 Jun 2015\nHi.\nI wrote a post about benchmarking some web frameworks and found a strange bug in Flask.\nRequests per seconds were very low and not above 600 req/s. @miguelgrinberg contacted me about it and first thought that the issue was on my side but he also experienced the same behaviour.\nHere is the Link to the Blogpost:\nhttps://medium.com/@tschundeee/express-vs-flask-vs-go-acc0879c2122\nSomething might be blocking requests in Flask or Werkzeug.\nI am willing to help towards inverstigation.\nCheers Bijan", "issue_status": "Closed", "issue_reporting_time": "2015-06-23T10:37:21Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1009": {"issue_url": "https://github.com/pallets/flask/issues/1511", "issue_id": "#1511", "issue_summary": "TaggedJSONSerializer loads(dumps(..)) breaks on certain values", "issue_description": "Member\nThiefMaster commented on 20 Jun 2015\ndiff --git a/tests/test_basic.py b/tests/test_basic.py\nindex 695e346..1e064ff 100644\n--- a/tests/test_basic.py\n+++ b/tests/test_basic.py\n@@ -387,6 +387,7 @@ def test_session_special_types():\n         flask.session['dt'] = now\n         flask.session['b'] = b'\\xff'\n         flask.session['t'] = (1, 2, 3)\n+        flask.session['spacefirst'] = {' t': 'not-a-tuple'}\n         return response\n\n     @app.route('/')\n@@ -403,6 +404,7 @@ def test_session_special_types():\n     assert rv['b'] == b'\\xff'\n     assert type(rv['b']) == bytes\n     assert rv['t'] == (1, 2, 3)\n+    assert rv['spacefirst'] == {' t': 'not-a-tuple'}\n\n\n def test_session_cookie_setting():\nWhile I don't see any cases where this would be likely to result in security problems (it would require custom types that are not safe to recreate with arbitrary arguments AND code that serializes a dict with both the key and value being provided by the user), I don't like that there's any input where value != loads(dumps(value)) without an exception.\nTwo ways to fix this:\nraise an exception when trying to encode a dict that has a single item with a key starting with a space.\ntag such dictionaries so they are decoded properly instead of being decoded as if they are a valid tagged it em", "issue_status": "Closed", "issue_reporting_time": "2015-06-20T16:25:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1010": {"issue_url": "https://github.com/pallets/flask/issues/1508", "issue_id": "#1508", "issue_summary": "where is SESSION_REFRESH_EACH_REQUEST?", "issue_description": "EricQAQ commented on 20 Jun 2015\nIn flask-0.10.1, I can't find SESSION_REFRESH_EACH_REQUEST in default_config. But SESSION_REFRESH_EACH_REQUEST is in the doc.\nThat means, in flask-0.10.1, there are 23 elements in default_config, but 24 in the doc of the flask.", "issue_status": "Closed", "issue_reporting_time": "2015-06-20T12:28:43Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1011": {"issue_url": "https://github.com/pallets/flask/issues/1507", "issue_id": "#1507", "issue_summary": "Blueprint url_prefix isn't additive with register_blueprint url_prefix", "issue_description": "tonymillion commented on 19 Jun 2015\nSo imagine I'm building an API from a set of blueprints like\n<snip from the signup.py file>\nsignupbp = Blueprint('signupbp', __name__, url_prefix=\"/signup\")\n\n@signupbp.route(\"/\")\ndef signup_start():\n    return \"signup_start\"\n\n@signupbp.route(\"/complete\")\ndef signup_complete():\n    return \"signup_complete\"\nthen in my main.py code I do something like:\napp.register_blueprint(signupbp, url_prefix='/api')\nI expect to see the following routes:\n/api/signup/                    signupbp.signup_start   \n/api/signup/complete            signupbp.signup_complete\n/static/<path:filename>         static                  \nWhat I actually see is:\n/api/                    signupbp.signup_start   \n/api/complete            signupbp.signup_complete\n/static/<path:filename>  static                  \nI imagine the url_prefixes should be additive not replacement (in the worse possible way). I've tried all combinations of / before and after the url_prefix params.\nThis is actually a very simplified example - in my API I'm using module names to implement versioning so I can't build the URL into any part of the code before thats suggested as a solution.", "issue_status": "Closed", "issue_reporting_time": "2015-06-19T00:18:23Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1012": {"issue_url": "https://github.com/pallets/flask/issues/1506", "issue_id": "#1506", "issue_summary": "flash(...) won't work!", "issue_description": "ghost commented on 18 Jun 2015\nHello!\nThe flash(...) function doesn't work at me \u2013 it raises an internal server error!\nMy code:\n@app.route('/')\ndef main():\nflash('This message will be visible!')\nreturn str(get_flashed_messages())\nthat's all! And with just return \"xxx\" it works.\nWhat's the problem? I'm using python 2.6.", "issue_status": "Closed", "issue_reporting_time": "2015-06-18T14:44:37Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1013": {"issue_url": "https://github.com/pallets/flask/issues/1505", "issue_id": "#1505", "issue_summary": "JSON Encoding in Python 3", "issue_description": "carsongee commented on 18 Jun 2015\nI'm trying to port an application to python 3 and ran into this encoding issue with this unit test:\n        with app.test_request_context():\n            from flask import jsonify\n            test_data = {'test': 1}\n            response = jsonify(test_data)\n            self.assertEqual(\n                response.response,\n                [json.dumps({'test': 1}, indent=2)]\n            )\nand getting this:\nE           AssertionError: Lists differ: [b'{\\n  \"test\": 1\\n}'] != ['{\\n  \"test\": 1\\n}']\nE\nE           First differing element 0:\nE           b'{\\n  \"test\": 1\\n}'\nE           {\nE             \"test\": 1\nE           }\nE\nE           - [b'{\\n  \"test\": 1\\n}']\nE           ?  -\nE\nE           + ['{\\n  \"test\": 1\\n}']\nso it appears that somewhere along the line the returned json isn't getting decoded to UTF-8 and results in having the b designator in the output. Is this maybe just something I'm doing wrong? The test passes in Python 2.7.\nI'm using these versions and Python 3.4.2 and 3.3.6:\nFlask==0.10.1\nFlask-Assets==0.10\nJinja2==2.7.3\nMarkupSafe==0.23\nWerkzeug==0.10.4\nitsdangerous==0.24", "issue_status": "Closed", "issue_reporting_time": "2015-06-18T12:34:13Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1014": {"issue_url": "https://github.com/pallets/flask/issues/1504", "issue_id": "#1504", "issue_summary": "Question: reload process too slow", "issue_description": "netqyq commented on 18 Jun 2015\neverytime when I changed some file , the flask will autoreload, but the reload process is too slow!\nhow solve this ?", "issue_status": "Closed", "issue_reporting_time": "2015-06-18T10:25:17Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1015": {"issue_url": "https://github.com/pallets/flask/issues/1503", "issue_id": "#1503", "issue_summary": "How to detect ssl(schema) protocol correctly with request.url_root?", "issue_description": "emamirazavi commented on 17 Jun 2015\nI'm using nginx + gunicorn + flask. With request.url_root i can not detect schema correctly because it's always http! although i'm routing with https configured in nginx!\ne.g i browse this url:\nhttps://www.example.com/hello\nand request.url reads:\nhttp://www.example.com/hello", "issue_status": "Closed", "issue_reporting_time": "2015-06-17T15:05:23Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1016": {"issue_url": "https://github.com/pallets/flask/issues/1500", "issue_id": "#1500", "issue_summary": "Tutorial Step 5: The View Functions", "issue_description": "xiekakaban commented on 14 Jun 2015\nThe following code is in the tutorial:\n@app.route('/add', methods=['POST'])\ndef add_entry():\n    if not session.get('logged_in'):\n        abort(401)\n    g.db.execute('insert into entries (title, text) values (?, ?)',\n                 [request.form['title'], request.form['text']])\n    g.db.commit()\n    flash('New entry was successfully posted')\n    return redirect(url_for('show_entries'))\nThe second arg to execute should be a tuple, not a list. g.db.execute('INSERT INTO entries(title,text) VALUES(?,?)',(request.form[\"title\"],request.form[\"text\"]))", "issue_status": "Closed", "issue_reporting_time": "2015-06-14T04:51:27Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1017": {"issue_url": "https://github.com/pallets/flask/issues/1498", "issue_id": "#1498", "issue_summary": "blueprint 404 error handler not honored with url_prefix", "issue_description": "ael-code commented on 13 Jun 2015\nReproduce the bug:\nmake a blueprint with an errorhandler for 404\nregister the blueprint on the main app under url_prefix=\"/blue\"\nNow, if you visit some not existent page under blueprint url prefix, like /blue/notExist you will recive response from the main app 404 error handler.\nThe only way to trigger the blueprint 404 error handler is by calling abort(404) from within the blueprint.\nThe correct behaviour would be to choose which error handler to activate also on the basis of the url_prefix parameter.\nimport unittest\nfrom flask import Flask, Blueprint, abort, request\n\n\napp = Flask(__name__)\nmyblueprint = Blueprint('myblueprint', __name__)\n\n@myblueprint.route('/hello', methods=['GET'])\ndef hello():\n    return 'hello world!'\n\n@myblueprint.route('/forced_404', methods=['GET'])\ndef forced_404():\n    abort(404)\n\nmyblueprint.errorhandler(404)(lambda e: ('myblueprint 404', 404))\n\napp.register_blueprint(myblueprint, url_prefix=\"/blue\")\n\napp.errorhandler(404)(lambda e: ('app 404', 404))\n\n\nclass BlueprintOrAppTestCase(unittest.TestCase):\n\n    def setUp(self):\n        self.client = app.test_client()\n\n    def test_200(self):\n        resp = self.client.get('/blue/hello')\n        self.assertEqual(resp.status_code, 200)\n        self.assertEqual(resp.get_data(True), 'hello world!')\n\n    def test_404_main(self):\n        with app.test_client() as client:\n            resp = client.get('/notExist')\n            self.assertEqual(resp.status_code, 404)\n            self.assertEqual(resp.get_data(True), 'app 404')\n\n    def test_404_blueprint(self):\n        with app.test_client() as client:\n            resp = client.get('/blue/notExist')\n            self.assertEqual(resp.status_code, 404)\n            self.assertEqual(resp.get_data(True), 'myblueprint 404')\n            self.assertEqual(request.blueprint, 'myblueprint')\n\n    def test_404_forced_blueprint(self):\n        with app.test_client() as client:\n            resp = client.get('/blue/forced_404')\n            self.assertEqual(resp.status_code, 404)\n            self.assertEqual(resp.get_data(True), 'myblueprint 404')\n            self.assertEqual(request.blueprint, 'myblueprint')\n\nif __name__ == '__main__':\n    # app.run(host=\"0.0.0.0\", use_reloader=True)\n    unittest.main()\nResponse:\n.F..\n======================================================================\nFAIL: test_404_blueprint (__main__.BlueprintOrAppTestCase)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"asd.py\", line 43, in test_404_blueprint\n    self.assertEqual(resp.get_data(True), 'myblueprint 404')\nAssertionError: u'app 404' != 'myblueprint 404'\n\n----------------------------------------------------------------------\nRan 4 tests in 0.013s\n\nFAILED (failures=1)\n1", "issue_status": "Closed", "issue_reporting_time": "2015-06-13T10:24:35Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1018": {"issue_url": "https://github.com/pallets/flask/issues/1497", "issue_id": "#1497", "issue_summary": "Feedback Links - 404 Error", "issue_description": "pingometer commented on 12 Jun 2015\nThe two links on (http://flask.pocoo.org/community/) to give feedback (http://feedback.flask.pocoo.org/) throw a 404 error.", "issue_status": "Closed", "issue_reporting_time": "2015-06-12T06:29:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1019": {"issue_url": "https://github.com/pallets/flask/issues/1494", "issue_id": "#1494", "issue_summary": "Handling HTTP 405 on the blueprint level", "issue_description": "jmagnusson commented on 11 Jun 2015\nI really like being able to override the error templates for each blueprint using their errorhandler methods. All error codes work great for me. Except one. 405's are AFAIK not catchable by the blueprint. This is a bit unfortunate when you have a JSON REST API where you want your consumers to be able to parse the data that they get back.\nThis line in werkzeug.routing is where the exception is raised. I feel a bit lost about the whole flow of a request in werkzeug/flask and don't really have any idea what I could do to be able to catch it in the Blueprint. Is this a bug? A known \"feature\"? Or am I doing something wrong?\nHere's a test case which shows this behavior:\nimport unittest\nfrom flask import Flask, Blueprint, request\n\napp = Flask(__name__)\nmyblueprint = Blueprint('myblueprint', __name__)\n\n\n@myblueprint.route('/', methods=['GET'])\ndef hello():\n    return 'hello world!'\n\nmyblueprint.errorhandler(405)(lambda e: ('myblueprint 405', 405))\napp.register_blueprint(myblueprint)\napp.errorhandler(405)(lambda e: ('app 405', 405))\n\n\nclass BlueprintOrAppTestCase(unittest.TestCase):\n\n    def setUp(self):\n        self.client = app.test_client()\n\n    def test_200(self):\n        resp = self.client.get('/')\n        self.assertEqual(resp.status_code, 200)\n\n    def test_405(self):\n        with app.test_client() as client:\n            resp = client.post('/?http405')\n            self.assertEqual(resp.status_code, 405)\n            self.assertEqual(resp.get_data(True), 'myblueprint 405')\n            self.assertEqual(request.blueprint, 'myblueprint')\n\n\nif __name__ == '__main__':\n    # app.run(use_reloader=True)\n    unittest.main()\nRunning this gives:\n.F\n======================================================================\nFAIL: test_405 (__main__.BlueprintOrAppTestCase)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"test.py\", line 30, in test_405\n    self.assertEqual(resp.get_data(True), 'myblueprint 405')\nAssertionError: 'app 405' != 'myblueprint 405'\n- app 405\n+ myblueprint 405\n\n\n----------------------------------------------------------------------\nRan 2 tests in 0.013s\n\nFAILED (failures=1)\nA version which tests more error codes can be found in this gist.", "issue_status": "Closed", "issue_reporting_time": "2015-06-11T01:35:47Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1020": {"issue_url": "https://github.com/pallets/flask/issues/1492", "issue_id": "#1492", "issue_summary": "Any new release ?", "issue_description": "nlamirault commented on 10 Jun 2015\nIs a new version planned?\nLast version 0.10.1 is very old : on Jun 14, 2013", "issue_status": "Closed", "issue_reporting_time": "2015-06-10T09:18:25Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1021": {"issue_url": "https://github.com/pallets/flask/issues/1490", "issue_id": "#1490", "issue_summary": "Get \u201cinsert_id\u201d for one to one relationship in Flask, SqlAlchemy", "issue_description": "JeanClaude3 commented on 9 Jun 2015\nHey guys,\nI tried seeking help on SO, but couldn't get any feedback. Thought I'd reach out to the Flask community.\nI'm trying to insert a new row through sqlalchemy. The parent table (Milestone) has a child table called Funding. Both tables share a relationship through a column called milestone_id. It is a one to one relationship.\nI have looked it up, but I can't figure out how to reference the milestone_id when INSERTING a new row in the Funding table. The parent ID is an autoincrement. I am using Flask and SqlAlchemy.\nmodels:\nclass Milestone(db.Model):\n    __tablename__ = \"**************\"\n\n   milestone_id = db.Column(db.Integer, primary_key=True)\n   company_id = db.Column(db.Integer, db.ForeignKey('stlines_startups.company_id'))\n   milestone_date = db.Column(db.Integer)\n   snapshots = db.relationship('Snapshot', uselist=False, primaryjoin='Milestone.milestone_id==Snapshot.milestone_id', backref='milestone')\n   fundraising = db.relationship('Funding', uselist=False, primaryjoin='Milestone.milestone_id==Funding.milestone_id', backref='milestone')\n\n   def __init__(self, milestone_id, company_id, milestone_date, snapshots = [], fundraising = []):\n    self.milestone_id = milestone_id\n    self.company_id = company_id\n    self.milestone_date = milestone_date\n    self.snapshots = snapshots\n    self.fundraising = fundraising\n\nclass Funding(db.Model):\n    __tablename__ = \"**************************\"\n\n   funding_id = db.Column(db.Integer, primary_key=True)\n   funding_type = db.Column(db.Text)\n   funding_message = db.Column(db.Text)\n   funding_amount = db.Column(db.Integer)\n   milestone_source = db.Column(db.Text)\n   company_id = db.Column(db.Integer, db.ForeignKey('stlines_milestones.company_id'))\n   milestone_id = db.Column(db.Integer, db.ForeignKey('stlines_milestones.milestone_id'))\n   user_id = db.Column(db.Integer)\n   funding_timestamp = db.Column(db.Integer)\n\ndef __init__(self, funding_id, funding_type, funding_message, funding_amount, milestone_source, milestone_id, company_id, user_id, funding_timestamp):\n    self.funding_id = funding_id\n    self.funding_type = funding_type\n    self.funding_message = funding_message\n    self.funding_amount = funding_amount\n    self.milestone_source = milestone_source\n    self.milestone_id = milestone_id\n    self.company_id = company_id\n    self.user_id = user_id\n    self.funding_timestamp = funding_timestamp\nAlchemy Query:\n@app.route('/_add_funding')\ndef add_funding():\n    funding_type = request.args.get('funding_stage', '', type=str)\n    funding_message = request.args.get('funding_message', '', type=str)\n    funding_amount = request.args.get('funding_amount', 0, type=int)\n    milestone_source = request.args.get('milestone_source', '', type=str)\n    milestone_date = request.args.get('milestone_date', '', type=str)\n    company_id = request.args.get('company_id', '', type=int)\n\n    milestone_date_final = datetime.datetime.strptime(milestone_date, '%B %d, %Y')\n\n    ''' In this line, I try to reference milestone_id with new_milestone.milestone_id, but nothing shows up in the database '''\n    new_funding = Funding('', funding_type=funding_type, funding_message=funding_message, funding_amount=funding_amount, milestone_source=milestone_source, company_id=company_id, milestone_id=new_milestone.milestone_id, user_id='1', funding_timestamp=milestone_date_final)\n    new_milestone = Milestone('', company_id=company_id, milestone_date=milestone_date_final, snapshots=None, fundraising=new_funding)\n    db.session.add(new_milestone)\n    output = new_milestone.milestone_id\n    db.session.commit()\n\n    return jsonify(result=output)\nHow can I tell SqlAlchemy to use the auto generated milestone_id from the milestone table when insert the funding information in the funding table? Should these be two separate queries? When I do them as two separate queries I get the error: sqlalchemy.orm.exc.ObjectDeletedError: Instance '<Milestone at 0x39ebeb0>' has been deleted, or its row is otherwise not present.\nAny help would be greatly appreciated, thanks guys :)", "issue_status": "Closed", "issue_reporting_time": "2015-06-08T23:39:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1022": {"issue_url": "https://github.com/pallets/flask/issues/1488", "issue_id": "#1488", "issue_summary": "If you aren't using classes for `view_func`s, you can't tell Flask not to serve OPTIONS", "issue_description": "jrmccarthy commented on 9 Jun 2015\nWe're using flask to serve mostly REST endpoints, and doing some setup at startup to create all the URL rules. Effectively, we're calling app.add_url_rule() for each method for each endpoint. This means that flask autogenerates an OPTIONS method and function for each ( https://github.com/mitsuhiko/flask/blob/master/flask/app.py#L1019 ), with no way to override.\nCan provide_automatic_options be added as a kwarg to add_url_rule, in case nothing is specified on the view_func?", "issue_status": "Closed", "issue_reporting_time": "2015-06-08T20:56:53Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1023": {"issue_url": "https://github.com/pallets/flask/issues/1485", "issue_id": "#1485", "issue_summary": "Consider adding documentation about script-name-stripping middleware to CGI deployment documentation", "issue_description": "DanielGibbsNZ commented on 7 Jun 2015\nThe FastCGI deployment documentation mentions that it may be necessary to configure some middleware to strip the SCRIPT_NAME environment variable of the actual script file name in order to prevent it appearing in the URL (e.g. example.com/yourapplication.fcgi/news/).\nThe default mod_rewrite configuration given in the CGI deployment documentation has the same issues yet no mention of this workaround is given. Please consider mentioning this on this page also.", "issue_status": "Closed", "issue_reporting_time": "2015-06-07T10:57:47Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1024": {"issue_url": "https://github.com/pallets/flask/issues/1481", "issue_id": "#1481", "issue_summary": "pkgutil.get_loader now throws errors on Python3.4", "issue_description": "rawrgulmuffins commented on 6 Jun 2015\nIn Python2.7 get_loader returns an empty string if a loader isn't found.\n$ python\nPython 2.7.6 (default, Mar 22 2014, 22:59:56) \n[GCC 4.8.2] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import pkgutil\n>>> pkgutil.get_loader(\"testing\")\n>>> pkgutil.get_loader(__name__)\n<pkgutil.ImpLoader instance at 0x7f03a435f8c0>\n>>> \nPython3.4 an AttributeError is thrown.\n$ python\nPython 3.4.0 (default, Apr 11 2014, 13:05:11) \n[GCC 4.8.2] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import pkgutil\n>>> pkgutil.get_loader(__name__)\n<class '_frozen_importlib.BuiltinImporter'>\n>>> pkgutil.get_loader(\"testing\")\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nFile \"/usr/lib/python3.4/pkgutil.py\", line 467, in get_loader\n    return find_loader(fullname)\nFile \"/usr/lib/python3.4/pkgutil.py\", line 488, in find_loader\n    return spec.loader\nAttributeError: 'NoneType' object has no attribute 'loader'\n>>> \nThis means that if someone does something like\nfrom flask import Flask\napp = Flask(\"testing\")\nThen\nAttributeError: 'NoneType' object has no attribute 'loader'\nis thrown on Python3.4\nSuggested changes in flask/flask/helpers.py\nin get_root_path\n637    # Next attempt: check the loader.\n638    loader = pkgutil.get_loader(import_name)\nto\nload =  None\ntry:\n    loader = pkgutil.get_loader(import_name)\nexcept AttributeError:\n    pass", "issue_status": "Closed", "issue_reporting_time": "2015-06-06T00:47:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1025": {"issue_url": "https://github.com/pallets/flask/issues/1478", "issue_id": "#1478", "issue_summary": "Flask keep-alive", "issue_description": "kvarga commented on 2 Jun 2015\nIs there a way to send intermittent responses to client to avoid timeout for long-running tasks (~2minutes)?\nIf not, I guess I will have to do the following flow:\nUser requests a webpage\nCheck if that webpage is available in cache\nIf not, redirect them to a holding page that checks ~15 seconds if that request is ready\nLoad the response\nSeems less than ideal, but gets the added benefit of showing some sort of progress indicator to the user", "issue_status": "Closed", "issue_reporting_time": "2015-06-02T02:20:46Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1026": {"issue_url": "https://github.com/pallets/flask/issues/1477", "issue_id": "#1477", "issue_summary": "Remove Blueprint.view_functions", "issue_description": "phryk commented on 1 Jun 2015\nhttps://github.com/mitsuhiko/flask/blob/master/flask/blueprints.py#L104\nBlueprint.view_functions should be removed as it does nothing besides potentially confuse people.", "issue_status": "Closed", "issue_reporting_time": "2015-05-31T21:46:03Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1027": {"issue_url": "https://github.com/pallets/flask/issues/1474", "issue_id": "#1474", "issue_summary": "Add flask laptop decals sale link to the website", "issue_description": "mnickey commented on 30 May 2015\nThis is neither a bug or issue but a request.\nWhere can I find laptop decals for flask? I'm loving this framework and would like to promote it with a laptop decal or sticker but I cannot find any.\nCan we make this happen? Stickermule was suggested on reddit but I think this should be held in flask 'store' should this come about.", "issue_status": "Closed", "issue_reporting_time": "2015-05-29T22:54:27Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1028": {"issue_url": "https://github.com/pallets/flask/issues/1473", "issue_id": "#1473", "issue_summary": "Flask server stops responding to new HTTP connections", "issue_description": "mk270 commented on 29 May 2015\nAfter a day or two, my Flask app stops noticing new connections; strace says:\nmk@pling /proc/31539/fd> strace -p 31539 -e '!stat'\nProcess 31539 attached - interrupt to quit\nselect(0, NULL, NULL, NULL, {0, 805175}) = 0 (Timeout)\nselect(0, NULL, NULL, NULL, {1, 0}) = 0 (Timeout)\nselect(0, NULL, NULL, NULL, {1, 0}) = 0 (Timeout)\nselect(0, NULL, NULL, NULL, {1, 0}^C <unfinished ...>\nProcess 31539 detached\n(note that the stat() calls between each select() have been omitted).\nSo select() is being called without any fds, basically as a blocking primitive, but I seem to have the following fds:\nlsof -p etc:\npython 31539 mk 3u IPv4 141934535 0t0 TCP *:5000 (LISTEN)\npython 31539 mk 4u IPv4 142787301 0t0 TCP 93.93.128.61:5000->61.240.144.65:60000 (ESTABLISHED)\nSo it should by rights be select()ing on fd 3 at the very least.", "issue_status": "Closed", "issue_reporting_time": "2015-05-29T10:43:52Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1029": {"issue_url": "https://github.com/pallets/flask/issues/1471", "issue_id": "#1471", "issue_summary": "Adding after_server_run", "issue_description": "ssundarraj commented on 25 May 2015\nIt would be nice to have a feature that would let a function be called after the server is started. As far as I've seen there is no such feature.", "issue_status": "Closed", "issue_reporting_time": "2015-05-25T05:13:12Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1030": {"issue_url": "https://github.com/pallets/flask/issues/1470", "issue_id": "#1470", "issue_summary": "route function quit unexpectedly", "issue_description": "shuokay commented on 25 May 2015\nWhen I call a python wrapper of C++ code in a flask route function, the flask route function quit unexpectedly. But if I call the wrapper from a normal python script ,everything goes well. Is there any condition that flask route function quit automatically?", "issue_status": "Closed", "issue_reporting_time": "2015-05-25T02:47:18Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1031": {"issue_url": "https://github.com/pallets/flask/issues/1469", "issue_id": "#1469", "issue_summary": "mod_wsgi (Apache) Troubleshooting tips needs one more", "issue_description": "dansalmo commented on 23 May 2015\nIn http://flask.pocoo.org/docs/0.10/deploying/mod_wsgi/\nI ran into an issue when following the guide to configure a current working Flask app for Apache. It would have been much easier to discover the cause if the following tip was given:\nProblem: application runs but can not access other files:\nFor WSGI applications, all paths used should always be absolute path names. Even though the app will work fine using relative paths with the simpler python serving method, they will not work with WSGI.", "issue_status": "Closed", "issue_reporting_time": "2015-05-22T20:34:40Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1032": {"issue_url": "https://github.com/pallets/flask/issues/1467", "issue_id": "#1467", "issue_summary": "Add support for default environ in test_client", "issue_description": "haizaar commented on 22 May 2015\nIt would be nice if test_client() would accept default environ dictionary. That would stop us doing hacks like this over and over.\nFor example:\ntest_client = app.test_client(defailt_environ = {\n    \"REMOTE_ADDR\": \"127.0.0.1\"\n})\ndefault_environ should be then passed down all the way to environment_base args of EnvironBuilder in test.py.\nThank you!", "issue_status": "Closed", "issue_reporting_time": "2015-05-21T19:15:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1033": {"issue_url": "https://github.com/pallets/flask/issues/1466", "issue_id": "#1466", "issue_summary": "try_trigger_before_first_request_functions in test cases", "issue_description": "nitori commented on 22 May 2015\nHi,\nI'm currently testing a feature (nitori/flask@f2ae742) that required to move the registration of the static url from __init__ to a method, and register that method using before_first_request (nitori/flask@6bc7736).\nIt works pretty well with a normal application, but it fails one test (tests/test_basic.py::test_static_files FAILED). And I realized, that the registered before_first_request functions are never actually called with the test client testing.FlaskClient. I fixed that locally by adding self.application.try_trigger_before_first_request_functions() right before the return statement of testing.FlaskClient.open (or should it even go to Client.open?).\nI'm wondering if there is a rationale behind not calling the registered functions? Or has there just never been a case where it's actually required?\nEdit\nI realized this doesn't work. If the first request is to a static URL, it will return 404, because the RequestContext was created before the static route was registered. If anything, I probably need another even like before_first_request_context or something like that. Maybe called inside of Flask.request_context.\nI'm sorry, it seems this turned into a completely different issue.", "issue_status": "Closed", "issue_reporting_time": "2015-05-21T18:42:29Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1034": {"issue_url": "https://github.com/pallets/flask/issues/1465", "issue_id": "#1465", "issue_summary": "packaging docs outdated", "issue_description": "Contributor\nwimglenn commented on 21 May 2015\nfrom here -> http://flask.pocoo.org/docs/0.10/patterns/distribute/\ndistribute has gone the way of the norwegian blue, hence dead link at http://python-distribute.org/distribute_setup.py should be cleaned up", "issue_status": "Closed", "issue_reporting_time": "2015-05-21T06:56:12Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1035": {"issue_url": "https://github.com/pallets/flask/issues/1464", "issue_id": "#1464", "issue_summary": "uWSGI / nginx documentation is incorrect", "issue_description": "jribbens commented on 20 May 2015\nThe Flask documentation for how to use it with uWSGI and nginx is incorrect. As the uWSGI docs say at http://uwsgi-docs.readthedocs.org/en/latest/Nginx.html#hosting-multiple-apps-in-the-same-process-aka-managing-script-name-and-path-info, \"ancient uWSGI versions used to support the so called \u201cuwsgi_modifier1 30\u201d approach. Do not do it. it is a really ugly hack\". The documentation should be updated to talk about the manage-script-name and mount options instead.", "issue_status": "Closed", "issue_reporting_time": "2015-05-20T13:09:01Z", "fixed_by": "#1558", "pull_request_summary": "Update uwsgi/nginx deployment documentation", "pull_request_description": "JonasGroeger commented on 22 Aug 2015\nThis fixes #1464 and adds some documentation on how to deploy with virtual environments.", "pull_request_status": "Merged", "issue_fixed_time": "2015-11-12T12:08:56Z", "files_changed": [["27", "docs/deploying/uwsgi.rst"]]}, "1036": {"issue_url": "https://github.com/pallets/flask/issues/1460", "issue_id": "#1460", "issue_summary": "Flask Documentation PDF is missing", "issue_description": "smorin commented on 14 May 2015\nFlask Documentation PDF is missing\nRead the documentation or download as PDF and zipped HTML\nLinks to http://flask.pocoo.org/docs/flask-docs.pdf and http://flask.pocoo.org/docs/flask-docs.zip\nBoth of which are missing.", "issue_status": "Closed", "issue_reporting_time": "2015-05-14T05:35:32Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1037": {"issue_url": "https://github.com/pallets/flask/issues/1459", "issue_id": "#1459", "issue_summary": "after_request excuted twice", "issue_description": "zhangwen9229 commented on 14 May 2015\nUse plugin\uff1aflask-restful\nin app.py:(please see my annotation)\ndef process_response(self, response):\nctx = _request_ctx_stack.top\nbp = ctx.request.blueprint\nfuncs = ctx._after_request_functions # here is None\nif bp is not None and bp in self.after_request_funcs:\nfuncs = chain(funcs, reversed(self.after_request_funcs[bp]))\nif None in self.after_request_funcs:\nfuncs = chain(funcs, reversed(self.after_request_funcs[None])) # here is <itertools.chain object at 0x000000000449FFD0>\nfor handler in funcs: # then this loop be excuted twice\nresponse = handler(response)\nif not self.session_interface.is_null_session(ctx.session):\nself.save_session(ctx.session, response)\nreturn response\nplease help..", "issue_status": "Closed", "issue_reporting_time": "2015-05-14T03:13:21Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1038": {"issue_url": "https://github.com/pallets/flask/issues/1457", "issue_id": "#1457", "issue_summary": "Clarify what app.config.from_object accepts", "issue_description": "Contributor\ntony commented on 12 May 2015\n$ python\nPython 2.7.9 (default, Apr 29 2015, 18:34:06) \n[GCC 4.9.2] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import flask\n>>> conf = {\"DEBUG\": True}\n>>> app = flask.Flask(__name__)                                                \n>>> app.config.from_object(conf)\n>>> app.debug\nFalse\nExpected behavior would be to accept to setting in the flask application object.\n>>> flask.__version__\n'0.10.1'\n>>> conf = {\"SECRET_KEY\": \"honey\"}                                                                                                                                      \n>>> app = flask.Flask(__name__)                                                                                                                                         \n>>> app.config.from_object(conf)                                                                                                                                        \n>>> app.secret_key", "issue_status": "Closed", "issue_reporting_time": "2015-05-11T19:15:17Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1039": {"issue_url": "https://github.com/pallets/flask/issues/1454", "issue_id": "#1454", "issue_summary": "test_client fails for url with \"%2F\"", "issue_description": "cthrax commented on 6 May 2015\nI'm working with a parameterized url such as:\n\"/api/<string:apiToken>\"\nWhen I send this token containing \"%2F\" the url encoded form of \"/\" I get a 404 from the test client. However, the running app works fine.\nI'm using Flask 0.10.1 and a minimal test example looks like the following:\nimport unittest\nimport flask\nclass TestTestClient(unittest.TestCase):\n    def test_url(self):\n        app = flask.Flask(__name__)\n        @app.route('/<string:parameter>')\n        def hello_world(parameter):\n            return parameter\n\n        test_client = app.test_client()\n\n        response = test_client.get(\"/FOO\")\n        self.assertEqual(response.status_code, 200)  # Passes\n        self.assertEqual(response.data, \"FOO\")  # Passes\n\n        response = test_client.get(\"/%%2F\")\n        self.assertEqual(response.status_code, 200) # Fails with 404", "issue_status": "Closed", "issue_reporting_time": "2015-05-06T15:05:14Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1040": {"issue_url": "https://github.com/pallets/flask/issues/1449", "issue_id": "#1449", "issue_summary": "imp module deprecated.", "issue_description": "Contributor\nCarreau commented on 2 May 2015\nThe imp module has been deprected in 3.4 and seem to be used in 2 places : flask/config.py and scripts/flaskext_compat.py to create modules.\nIt should be easy to replace with types.ModuleType(name) I guess.\ndiscovered because I'm running with -W error on another project, which change the warning in errors, and I fail here even before reaching the other lib where I'm trying to find where the warning are coming from.\nI'll try to see if i can send PR to fix that,\nThanks", "issue_status": "Closed", "issue_reporting_time": "2015-05-02T00:25:29Z", "fixed_by": "#1450", "pull_request_summary": "importlib deprecated in 3.4", "pull_request_description": "Contributor\nCarreau commented on 2 May 2015\nReplace the use of importlib by types.ModuleType in 3.4+\ncloses gh-1449\nNot sure how to make a test for it, either I need to monkeypatch stdlib, or have the tests run with -W error which I'm not sure how.", "pull_request_status": "Merged", "issue_fixed_time": "2015-05-02T19:58:44Z", "files_changed": [["4", "flask/config.py"], ["4", "scripts/flaskext_compat.py"]]}, "1041": {"issue_url": "https://github.com/pallets/flask/issues/1447", "issue_id": "#1447", "issue_summary": "typo in Quickstart documentation", "issue_description": "polycopter commented on 29 Apr 2015\n\"ommited\" should be \"omitted\"", "issue_status": "Closed", "issue_reporting_time": "2015-04-29T17:37:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1042": {"issue_url": "https://github.com/pallets/flask/issues/1445", "issue_id": "#1445", "issue_summary": "get_json raise on empty request body", "issue_description": "stuxxn commented on 25 Apr 2015\nDont know if this is a desired behavior, but if I send a request like this:\nContent-Type: application/json\nContent-Length: 0\nand access get_json it raises a 'Cant not decode' error.\nImho it would be better to just return None as if is_json == False.\nWorking with: Flask 0.11.dev0", "issue_status": "Closed", "issue_reporting_time": "2015-04-25T07:20:06Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1043": {"issue_url": "https://github.com/pallets/flask/issues/1444", "issue_id": "#1444", "issue_summary": "url_for with multiple query parameters escape '&'", "issue_description": "grubberr commented on 23 Apr 2015\n# cat templates/t.html \n{{ url_for('url', key1='val1', key2='val2') }}\nfrom flask import Flask, render_template\napp = Flask(__name__)\n\n@app.route('/url')\ndef url(): pass\n\nwith app.test_request_context():\n    print render_template('t.html')\nThis script produce such output:\n/url?key2=val2&amp;key1=val1\nI see that query string params separator '&' escaped -> '&'\nis it bug ?", "issue_status": "Closed", "issue_reporting_time": "2015-04-22T19:53:59Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1044": {"issue_url": "https://github.com/pallets/flask/issues/1443", "issue_id": "#1443", "issue_summary": "json_encoder not invoked from flask.jsonify", "issue_description": "andybarilla commented on 21 Apr 2015\nI created a custom JSON encoder class extended from flask.json.JSONEncoder but it is not called when calling flask.jsonify. Additionally, I removed my custom JSON encoder and confirmed that flask.json.JSONEncoder isn't called either via a break statement in Pycharm.\nfrom flask import Flask\nfrom flask import jsonify\nfrom flask.json import JSONEncoder\n\nclass MyEncoder(JSONEncoder):\n    def default(self, obj):\n        if hasattr(obj, '__json__'):\n            return obj.__json__()\n        else:\n            try:\n                iterable = iter(obj)\n            except TypeError:\n                pass\n            else:\n                return list(iterable)\n\n        return JSONEncoder.default(self, obj)\n\n\nclass MyClass(object):\n    key = 'a'\n    value = 'b'\n\n    def __json__(self):\n        return {'key': self.key, 'value': self.value}\n\napp = Flask(__name__)\napp.json_encoder = MyEncoder\n\n@app.route('/')\ndef hello_world():\n    return jsonify(MyClass())\n\n\nif __name__ == '__main__':\n    app.run(debug=True)", "issue_status": "Closed", "issue_reporting_time": "2015-04-21T14:47:11Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1045": {"issue_url": "https://github.com/pallets/flask/issues/1442", "issue_id": "#1442", "issue_summary": "small inaccuracy in get_json documentation", "issue_description": "lumilux commented on 21 Apr 2015\nIn the documentation for get_json, the silent parameter is described as \"if set to False this method will fail silently and return False\". It should probably say \"if set to True [...]\" instead.", "issue_status": "Closed", "issue_reporting_time": "2015-04-20T22:02:54Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1046": {"issue_url": "https://github.com/pallets/flask/issues/1440", "issue_id": "#1440", "issue_summary": "Change first argument in a Class methoc to 'self'", "issue_description": "andyxning commented on 18 Apr 2015\nI recently run into the app.logger usage. However, when i read the source code in flask v0.10.1 , i find that it uses x instead of self as the first method argument in class DebugLogger and DebugHandler.\nCan we just update this calling convention.", "issue_status": "Closed", "issue_reporting_time": "2015-04-18T13:45:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1047": {"issue_url": "https://github.com/pallets/flask/issues/1438", "issue_id": "#1438", "issue_summary": "Make TaggedJSONSerializer extensible", "issue_description": "Member\nThiefMaster commented on 16 Apr 2015\nMy suggestion would be to add a method to the class that lets you register custom types, e.g. like this:\nsession_json_serializer.register_type('md', MultiDict)\nThis would use the ' md' prefix when encountering a MultiDict object (type(x) is MultiDict as subclasses probably shouldn't be handled). To serialize/deserialize I'd simply use __getstate__ and __setstate__.", "issue_status": "Closed", "issue_reporting_time": "2015-04-16T09:09:14Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1048": {"issue_url": "https://github.com/pallets/flask/issues/1437", "issue_id": "#1437", "issue_summary": "Flask won't start in the Python 3.4 debugger", "issue_description": "tomkcook commented on 16 Apr 2015\nTest code:\nimport flask\napp = flask.Flask()\napp.run\nRun like this:\n$ pdb3 test.py\n> /home/tkcook/scratch/python/test.py(1)<module>()\n-> import flask\n(Pdb) cont\nTraceback (most recent call last):\n  File \"/usr/lib/python3.4/importlib/util.py\", line 95, in find_spec\n    spec = module.__spec__\nAttributeError: 'module' object has no attribute '__spec__'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/lib/python3.4/pkgutil.py\", line 481, in find_loader\n    spec = importlib.util.find_spec(fullname)\n  File \"/usr/lib/python3.4/importlib/util.py\", line 97, in find_spec\n    raise ValueError('{}.__spec__ is not set'.format(name))\nValueError: __main__.__spec__ is not set\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/usr/lib/python3.4/pdb.py\", line 1661, in main\n    pdb._runscript(mainpyfile)\n  File \"/usr/lib/python3.4/pdb.py\", line 1542, in _runscript\n    self.run(statement)\n  File \"/usr/lib/python3.4/bdb.py\", line 431, in run\n    exec(cmd, globals, locals)\n  File \"<string>\", line 1, in <module>\n  File \"/home/tkcook/scratch/python/test.py\", line 1, in <module>\n    import flask\n  File \"/usr/lib/python3/dist-packages/flask/app.py\", line 331, in __init__\n    instance_path = self.auto_find_instance_path()\n  File \"/usr/lib/python3/dist-packages/flask/app.py\", line 622, in auto_find_instance_path\n    prefix, package_path = find_package(self.import_name)\n  File \"/usr/lib/python3/dist-packages/flask/helpers.py\", line 661, in find_package\n    loader = pkgutil.get_loader(root_mod_name)\n  File \"/usr/lib/python3.4/pkgutil.py\", line 467, in get_loader\n    return find_loader(fullname)\n  File \"/usr/lib/python3.4/pkgutil.py\", line 487, in find_loader\n    raise ImportError(msg.format(fullname, type(ex), ex)) from ex\nImportError: Error while finding loader for '__main__' (<class 'ValueError'>: __main__.__spec__ is not set)\nUncaught exception. Entering post mortem debugging\nRunning 'cont' or 'step' will restart the program\n> /usr/lib/python3.4/pkgutil.py(487)find_loader()\n-> raise ImportError(msg.format(fullname, type(ex), ex)) from ex\nIs there a workaround for this?", "issue_status": "Closed", "issue_reporting_time": "2015-04-16T02:35:17Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1049": {"issue_url": "https://github.com/pallets/flask/issues/1435", "issue_id": "#1435", "issue_summary": "htmlsafe_dumps doesn't handle lazy strings", "issue_description": "manuelbua commented on 13 Apr 2015\nI need to be able to handle lazy strings in the Jinja2 |tojson filter and was thinking about some way to do it: as of now, the _iterencode_dict raises a TypeError exception, as expected:\nTraceback (most recent call last):\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/app.py\", line 1836, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/app.py\", line 1820, in wsgi_app\n    response = self.make_response(self.handle_exception(e))\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/app.py\", line 1403, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/app.py\", line 1817, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/app.py\", line 1477, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/app.py\", line 1381, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/app.py\", line 1475, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/app.py\", line 1461, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask_admin/base.py\", line 68, in inner\n    return self._run_view(f, *args, **kwargs)\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask_admin/base.py\", line 354, in _run_view\n    return fn(self, *args, **kwargs)\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask_admin/model/base.py\", line 1466, in index_view\n    return_url=self._get_list_url(view_args),\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask_admin/base.py\", line 294, in render\n    return render_template(template, **kwargs)\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/templating.py\", line 128, in render_template\n    context, ctx.app)\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/templating.py\", line 110, in _render\n    rv = template.render(context)\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/jinja2/environment.py\", line 969, in render\n    return self.environment.handle_exception(exc_info, True)\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/jinja2/environment.py\", line 742, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask_admin/templates/bootstrap3/admin/model/list.html\", line 5, in top-level template code\n    {% import 'admin/actions.html' as actionlib with context %}\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask_admin/templates/bootstrap3/admin/master.html\", line 1, in top-level template code\n    {% extends admin_base_template %}\n  File \"/home/manuel/dev/www/python/watest/webfu-app/webfu/modules/backend/templates/admin/custom-layout.html\", line 3, in top-level template code\n    {% import 'admin/static.html' as admin_static with context %}\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask_admin/templates/bootstrap3/admin/base.html\", line 80, in top-level template code\n    {% block tail %}\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask_admin/templates/bootstrap3/admin/model/list.html\", line 171, in block \"tail\"\n    {{ filter_groups|tojson|safe }},\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/json.py\", line 243, in tojson_filter\n    return Markup(htmlsafe_dumps(obj, **kwargs))\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/json.py\", line 186, in htmlsafe_dumps\n    rv = dumps(obj, **kwargs) \\\n  File \"/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/json.py\", line 126, in dumps\n    rv = _json.dumps(obj, **kwargs)\n  File \"/usr/lib/python2.7/json/__init__.py\", line 250, in dumps\n    sort_keys=sort_keys, **kw).encode(obj)\n  File \"/usr/lib/python2.7/json/encoder.py\", line 209, in encode\n    chunks = list(chunks)\n  File \"/usr/lib/python2.7/json/encoder.py\", line 434, in _iterencode\n    for chunk in _iterencode_dict(o, _current_indent_level):\n  File \"/usr/lib/python2.7/json/encoder.py\", line 382, in _iterencode_dict\n    raise TypeError(\"key \" + repr(key) + \" is not a string\")\nTypeError: key lu'Nome categoria' is not a string\nI can't really use the gettext since i need the lazy_gettext version, and was asking for advice and ideas on how to tackle this problem: i tried subclassing the flask.json.JSONEncoder class as per this example and i'm handling lazy strings in the default method there, but it looks like it doesn't get called at all.\nThere is the iterencode method i could try to subclass, but it probably won't be a clean way to do it?\nThanks for any input you can give.", "issue_status": "Closed", "issue_reporting_time": "2015-04-13T08:51:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1050": {"issue_url": "https://github.com/pallets/flask/issues/1434", "issue_id": "#1434", "issue_summary": "Explicit show the content-type of response", "issue_description": "felipevolpone commented on 12 Apr 2015\nHey guys, I was thinking that could be a good ideia create a decorator to put in the head of method, to show what kind of content-type that rest service will return.\nSomething like that:\n@return_json\n@app.route('/user/email')\ndef get_user_email():\n   return {'email': 'example@email.com'}\nSo, in the return_json decorator we could change the content-type of response. If someone think that is a good ideia, I can implement and send a pull request.", "issue_status": "Closed", "issue_reporting_time": "2015-04-12T16:10:15Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1051": {"issue_url": "https://github.com/pallets/flask/issues/1433", "issue_id": "#1433", "issue_summary": "Should we cache errorhandlers or not?", "issue_description": "Member\nuntitaker commented on 12 Apr 2015\nCont. #1291 (comment)", "issue_status": "Closed", "issue_reporting_time": "2015-04-12T12:02:06Z", "fixed_by": "#2362", "pull_request_summary": "Remove error handler cache", "pull_request_description": "Member\ndavidism commented on 5 Jun 2017\nCaching handlers for the exception MRO caused issues with some inheritance setups. I don't expect hierarchies to be deep enough for this to affect most cases, but if performance is an issues handlers should be explicitly registered for each class they apply to.\ncloses #2267, closes #1433", "pull_request_status": "Merged", "issue_fixed_time": "2017-06-05T13:34:49Z", "files_changed": [["4", "CHANGES"], ["26", "flask/app.py"], ["33", "tests/test_basic.py"]]}, "1052": {"issue_url": "https://github.com/pallets/flask/issues/1430", "issue_id": "#1430", "issue_summary": "request.json and a lot of other attributes don't use autodoc", "issue_description": "Member\nuntitaker commented on 11 Apr 2015\nSome attributes and methods have custom documentation in api.rst, while there doesn't seem to be a reason why that couldn't be generated through autodoc.", "issue_status": "Closed", "issue_reporting_time": "2015-04-11T16:22:28Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1053": {"issue_url": "https://github.com/pallets/flask/issues/1427", "issue_id": "#1427", "issue_summary": "Bug in send_file with temp files", "issue_description": "b4stien commented on 10 Apr 2015\nHey there,\nI don't know if anyone ran into this problem before because it works \"by chance\" in py2, but in py3 you can't send temporary file with send_file by passing a fp.\nThe main problems are here https://github.com/mitsuhiko/flask/blob/master/flask/helpers.py#L477 and there https://github.com/mitsuhiko/flask/blob/master/flask/helpers.py#L496.\nUnder py2 a tempfile.TemporaryFile is given the name '<fdopen>' whereas under py3 it's an integer.\nPython 2.7.9 (default, Dec 15 2014, 10:01:34)\n[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.56)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from tempfile import TemporaryFile\n>>> fp = TemporaryFile()\n>>> fp.name\n'<fdopen>'\nPython 3.4.3 (default, Mar 23 2015, 04:19:36)\n[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from tempfile import TemporaryFile\n>>> fp = TemporaryFile()\n>>> fp.name\n4\nThen when Flask tries to build filename it crashes (trying to concatenate a string and an integer in os.path.join(current_app.root_path, filename)).\nWould you consider merging a workaround for this problem? (like setting filename to None if we don't have a string_types for instance)", "issue_status": "Closed", "issue_reporting_time": "2015-04-10T16:52:33Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1054": {"issue_url": "https://github.com/pallets/flask/issues/1426", "issue_id": "#1426", "issue_summary": "Blueprint is ignored", "issue_description": "flaker commented on 10 Apr 2015\nHi,\nI was trying to create a small sample for another issue and run into a problem. I have a very simple demo app. This is the main file:\nfrom flask import Flask\n\napp = Flask(__name__)\n\nif __name__ == '__main__':\n    from sign import sign as sign_blueprint\n    app.register_blueprint(sign_blueprint, url_prefix='/sign')\n    app.run()\nBlueprint sign lives inside the sign directory and the __init__.py file there declares it.\nfrom flask import Blueprint\nsign = Blueprint('sign', __name__)\nfrom . import views\nviews just contains a simple handler that returns the string ok when requested. The problem is that my request was completely ignored. I started debugging and the routes collection has only the static route. The details for my blueprint disappeared.\nWriting\nhttp://127.0.0.1:5000/sign/order/2345\nhttp://127.0.0.1:5000/sign/order/\nhttp://127.0.0.1:5000/sign/\nhttp://127.0.0.1:5000/sign\ngets the same 404 error. It seems that somehow my blueprint is ignored and no route is created.\nAny ideas?\nThank you,\nFederico", "issue_status": "Closed", "issue_reporting_time": "2015-04-10T16:16:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1055": {"issue_url": "https://github.com/pallets/flask/issues/1425", "issue_id": "#1425", "issue_summary": "the master version of flask has not module.py, but 0.10.1 has it", "issue_description": "GreatmanBill commented on 10 Apr 2015\nI use the flask extension flask-theme, it has a import \uff1a\nfrom flask import (Module, send_from_directory, render_template, json,\n_request_ctx_stack, abort, url_for)\nthe master version has no Module\nso I reinstall flask to 0.10.1, but it hasn't cli.py\nso , I want to know, the module.py is not necessary in the fulture?", "issue_status": "Closed", "issue_reporting_time": "2015-04-10T04:21:33Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1056": {"issue_url": "https://github.com/pallets/flask/issues/1424", "issue_id": "#1424", "issue_summary": "Are there any interest in displaying current_user when logging exceptions?", "issue_description": "nextcoder commented on 10 Apr 2015\nI am sure I am not the only one who would like to see who was the current_user when an exception happens especially in production environments.\nCurrently, the \"standard\" way to accomplish this is to use logging.LoggingAdapter. But since every flask exception is hardwired to go to the app.logger, how can I use the adapter method?", "issue_status": "Closed", "issue_reporting_time": "2015-04-10T03:50:17Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1057": {"issue_url": "https://github.com/pallets/flask/issues/1423", "issue_id": "#1423", "issue_summary": "5 years, still not 1.0! what are you thinking about, pocoo?", "issue_description": "heziqiang commented on 8 Apr 2015\n5 years, still not 1.0! what are you thinking about, pocoo?", "issue_status": "Closed", "issue_reporting_time": "2015-04-08T06:41:52Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1058": {"issue_url": "https://github.com/pallets/flask/issues/1421", "issue_id": "#1421", "issue_summary": "`request.json` deprecation discussion", "issue_description": "Member\nuntitaker commented on 6 Apr 2015\ncont #1416 (comment)", "issue_status": "Closed", "issue_reporting_time": "2015-04-06T11:51:02Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1059": {"issue_url": "https://github.com/pallets/flask/issues/1420", "issue_id": "#1420", "issue_summary": "Flask reloader adds stdout buffering when used with supervisord", "issue_description": "hamiltont commented on 5 Apr 2015\nSorry for long report, this took a while to debug. I'm not an expert on how reloading works, so hopefully someone can explain what is happening. This only happens when I use Flask's reload while launching flask using supervisord, so if it ends up being a supervisord bug I will refile it on their bug tracker, but the problem only appears when using flask's reloading feature.\nHere's my simple flask app:\nfrom flask import Flask\n\napp = Flask(__name__, static_url_path='')\n\n@app.route('/start')\ndef start_build():\n  print \"Running command\"\n  return \"Starting\"\n\nif __name__ == \"__main__\":\n  app.run(debug=True)\nAs you'd expect, this generates the following output\nhamiltont$ python example.py\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n * Restarting with stat\nRunning command\n127.0.0.1 - - [04/Apr/2015 18:58:13] \"GET /start HTTP/1.1\" 200 -\nRunning command\n127.0.0.1 - - [04/Apr/2015 18:58:42] \"GET /start HTTP/1.1\" 200 -\nRunning command\n127.0.0.1 - - [04/Apr/2015 18:58:44] \"GET /start HTTP/1.1\" 200 -\nThis output is generated correctly for all combinations of python vs python -u and use_reloader=True vs use_reloader=False.\nNow I try to run the application (with reloading enabled) using supervisord and this supervisord.conf file\n[supervisord]\nnodaemon=true\n\n[program:flask]\ncommand=python -u example.py\n\n; Send stdout to console\nstdout_logfile=/dev/stdout\nstdout_logfile_maxbytes=0\n\n; Send stderr to console\nstderr_logfile=/dev/stderr\nstderr_logfile_maxbytes=0\n\n; Flask does not propagate signals to child processes when using debug\n; mode, so this tells supervisor to send the signal to the entire \n; process group instead of just the parent\nstopasgroup=true\n; Send interrupt so the server is shutdown gracefully\nstopsignal=INT\nNote that I'm intentionally specifying python -u in my command, just to avoid issues. Here's the output:\nhamiltont$ supervisord -c super.conf\n2015-04-04 19:02:59,762 INFO supervisord started with pid 22439\n2015-04-04 19:03:00,769 INFO spawned: 'flask' with pid 22442\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n * Restarting with stat\n2015-04-04 19:03:01,939 INFO success: flask entered RUNNING state, process has stayed up for > than 1 seconds (startsecs)\n127.0.0.1 - - [04/Apr/2015 19:04:07] \"GET /start HTTP/1.1\" 200 -\n127.0.0.1 - - [04/Apr/2015 19:04:11] \"GET /start HTTP/1.1\" 200 -\n127.0.0.1 - - [04/Apr/2015 19:04:11] \"GET /start HTTP/1.1\" 200 -\n^C\n2015-04-04 19:04:14,198 WARN received SIGINT indicating exit request\n2015-04-04 19:04:14,198 INFO waiting for flask to die\nRunning command\nRunning command\nRunning command\n2015-04-04 19:04:14,209 INFO stopped: flask (exit status 0)\nSo until I hit Ctrl-C to terminate, the stdout was being buffered. If I disable reloading, then everything works as expected:\nhamiltont$ supervisord -c super.conf\n2015-04-04 19:06:49,711 INFO supervisord started with pid 22462\n2015-04-04 19:06:50,715 INFO spawned: 'flask' with pid 22465\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n2015-04-04 19:06:52,268 INFO success: flask entered RUNNING state, process has stayed up for > than 1 seconds (startsecs)\nRunning command\n127.0.0.1 - - [04/Apr/2015 19:06:54] \"GET /start HTTP/1.1\" 200 -\nRunning command\n127.0.0.1 - - [04/Apr/2015 19:06:57] \"GET /start HTTP/1.1\" 200 -\nRunning command\n127.0.0.1 - - [04/Apr/2015 19:06:58] \"GET /start HTTP/1.1\" 200 -\n^C\n2015-04-04 19:07:03,959 WARN received SIGINT indicating exit request\n2015-04-04 19:07:03,960 INFO waiting for flask to die\n2015-04-04 19:07:03,968 INFO stopped: flask (exit status 0)\nI can also generate the expected output by manually wrapping stdout at the top of my example.py file\nimport sys\nimport os\nsys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)\n1", "issue_status": "Closed", "issue_reporting_time": "2015-04-04T23:11:13Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1060": {"issue_url": "https://github.com/pallets/flask/issues/1417", "issue_id": "#1417", "issue_summary": "OperationalError: no such table: entries", "issue_description": "dayiguizhen commented on 2 Apr 2015\nI am learning flask framework and want to set up flaskr by following the flask tutorial. In the end I am getting the error:OperationalError: no such table: entries.\nthe code of flaskr.py is here below\nimport os\nfrom sqlite3 import dbapi2 as sqlite3\nfrom flask import Flask, request, session, g, redirect, url_for, abort, render_template, flash\n\napp = Flask(__name__);\n\napp.config.update(dict(\n    DATABASE=os.path.join(app.root_path,'flaskr.db'),\n    DEBUG=True,\n    SECRET_KEY='development key',\n    USERNAME='admin',\n    PASSWORD='default'\n    ))\n\napp.config.from_envvar('FLASK_SETTINGS',silent=True);\n\ndef connect_db():\n    \"\"\"Connects to the specific database.\"\"\"\n    rv = sqlite3.connect(app.config['DATABASE']);\n    rv.row_factory = sqlite3.Row;\n    return rv;\n\ndef init_db():\n    db = get_db();\n    with app.open_resource('schema.sql',mode='r') as f:\n        db.cursor().executescript(f.read());\n    db.commit();\n\n@app.cli.command('initdb')\ndef initdb_command():\n    init_db();\n    print('Initialized the database.');\n\ndef get_db():\n    if not hasattr(g,'sqlite_db'):\n        g.sqlite_db = connect_db();\n    return g.sqlite_db;\n\n@app.teardown_appcontext\ndef close_db(error):\n    if hasattr(g,'sqlite_db'):\n        g.sqlite_db.close();\n\n@app.route('/')\ndef show_entries():\n    db = get_db();\n    cur = db.execute('select title, text from entries order by id desc');\n    entries = cur.fetchall();\n    return render_template('show_entries.html', entries=entries);\n\n@app.route('/add',methods=['POST'])\ndef add_entry():\n    if not session.get('logged_in'):\n        abort(401);\n    db = get_db();\n    db.execute('insert into entries (title, text) value (?, ?)',[request.form['title'],request.form['text']]);\n    db.commit();\n    flash('New entry was succeedfully posted');\n    return redirect(url_for('show_entries'));\n\n@app.route('/login',methods=['GET','POST'])\ndef login():\n    error = None;\n    if request.methods == 'POST':\n        if request.form['username'] != app.config['USERNAME']:\n            error = 'Invalid username';\n        elif request.form['password'] != app.config['PASSWORD']:\n            error = 'Invalid password';\n        else:\n            session['logged_in'] = True;\n            flash('You were logged in');\n            return redirect(url_for('show_entries'));\n    return render_template('login.html',error=error);\n\n@app.route('/logout')\ndef logout():\n    session.pop('logged_in',None);\n    flash('You were logged out');\n    return redirect(url_for('show_entries'));\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0',debug=True);", "issue_status": "Closed", "issue_reporting_time": "2015-04-02T10:51:42Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1061": {"issue_url": "https://github.com/pallets/flask/issues/1415", "issue_id": "#1415", "issue_summary": "The server stops serving webpages after being deployed for more than a day", "issue_description": "shubhamgoyal commented on 1 Apr 2015\nI deployed a simple Flask web server to serve http://www.holmusk.com/ and it mysteriously stops serving pages after a few hours. There are no errors on the console. Can you help guide me towards what the possible issue might be?", "issue_status": "Closed", "issue_reporting_time": "2015-04-01T16:08:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1062": {"issue_url": "https://github.com/pallets/flask/issues/1412", "issue_id": "#1412", "issue_summary": "url_for to another application during request?", "issue_description": "a-urth commented on 31 Mar 2015\nAssuming I have more than one Flask application (I'm using blueprints too, so there is not need to advice me them) and I want to build url from one to another. With no request context I was just using forced context of target application and it worked. But what should I do with existing request context? If i receive request to one application and want to do redirect to another one?\nOr, in another words, why url_for first of all searches for request context? Maybe it should be optional, through _external parameter for example?\nPlease, do not send me to stackoverflow, my question about similar problem is hanging for more than a week with no responses at all.", "issue_status": "Closed", "issue_reporting_time": "2015-03-31T10:03:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1063": {"issue_url": "https://github.com/pallets/flask/issues/1411", "issue_id": "#1411", "issue_summary": "Knowing if the App started", "issue_description": "Martin-Spamer commented on 31 Mar 2015\nThe suggested way to start the app from http://flask.pocoo.org/docs/0.10/quickstart/#a-minimal-application is app.run(...). Examining the source code of run, which chains run_simple it appears there is now way to detect success or failure.\nPerhaps the run method should return a status (True/False) or (self/None)", "issue_status": "Closed", "issue_reporting_time": "2015-03-31T09:40:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1064": {"issue_url": "https://github.com/pallets/flask/issues/1410", "issue_id": "#1410", "issue_summary": "Error: entries table doesn't exist", "issue_description": "lzbrooks commented on 31 Mar 2015\nWhen attempting to run complete flaskr tutorial code (stable site version).", "issue_status": "Closed", "issue_reporting_time": "2015-03-31T04:42:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1065": {"issue_url": "https://github.com/pallets/flask/issues/1409", "issue_id": "#1409", "issue_summary": "Creating a \"collective\"", "issue_description": "delijati commented on 30 Mar 2015\nIt would be nice to have a \"collective\" like Plones https://github.com/collective for Flask it would make contributing so much easier.", "issue_status": "Closed", "issue_reporting_time": "2015-03-30T14:06:02Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1066": {"issue_url": "https://github.com/pallets/flask/issues/1406", "issue_id": "#1406", "issue_summary": "Generic error handler for any exception", "issue_description": "joscarsson commented on 29 Mar 2015\nIs there a way to add a global catch-all error handler in which I can change the response to a generic JSON response?\nI can't use the got_request_exception signal, as it is not allowed to modify the response (http://flask.pocoo.org/docs/0.10/signals/).\nIn contrast all signal handlers are executed in undefined order and do not modify any data.\nI would prefer to not wrap the app.handle_exception function as that feels like internal API. I guess I'm after something like:\n@app.errorhandler()\ndef handle_global_error(e):\n  return \"Global error\"\nNote the errorhandler does not take any parameters, meaning it would catch all exceptions/status codes which does not have a specific error handler attached to them. I know I can use errorhandler(500) to catch exceptions, but if I do abort(409) for example, it will still return a HTML response.", "issue_status": "Closed", "issue_reporting_time": "2015-03-29T15:54:55Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1067": {"issue_url": "https://github.com/pallets/flask/issues/1398", "issue_id": "#1398", "issue_summary": "Oops, didn't mean to post this.", "issue_description": "jacobwhitten commented on 27 Mar 2015\nI know man", "issue_status": "Closed", "issue_reporting_time": "2015-03-27T02:06:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1068": {"issue_url": "https://github.com/pallets/flask/issues/1397", "issue_id": "#1397", "issue_summary": "flask.Request should have an is_static field for content served from the static folder", "issue_description": "zippy1981 commented on 26 Mar 2015\nIt would be nice to be able to easily tell static content served from flask is static in a before_request for example.", "issue_status": "Closed", "issue_reporting_time": "2015-03-26T14:17:43Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1069": {"issue_url": "https://github.com/pallets/flask/issues/1396", "issue_id": "#1396", "issue_summary": "Flask mailing list not accepting my messages", "issue_description": "dunpyl commented on 24 Mar 2015\nOver the past 2 months I've sent 3 questions to the mailing flask@librelist.com mailing list. It had worked for me before, The questions have been completely ignored, and they don't even appear in the archive.\nI've sent another question earlier, in mid December 2014, and it was archived and responded to. The 3 questions since then have not.", "issue_status": "Closed", "issue_reporting_time": "2015-03-24T03:36:23Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1070": {"issue_url": "https://github.com/pallets/flask/issues/1395", "issue_id": "#1395", "issue_summary": "Support for mixins on MethodViews", "issue_description": "Contributor\ntaion commented on 24 Mar 2015\nIt looks like @menudoproblema already has PR open for this: #1276\nI'm filing this issue to register my interest in having support for implementing HTTP methods via mixins on MethodView classes as well.", "issue_status": "Closed", "issue_reporting_time": "2015-03-23T22:15:34Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1071": {"issue_url": "https://github.com/pallets/flask/issues/1394", "issue_id": "#1394", "issue_summary": "url_for within different Flask instances", "issue_description": "a-urth commented on 24 Mar 2015\nHi everyone, question here.\nI have complex flask application with several Flask instances dispatched by werkzeug middleware. And in such situation I have two questions related not actually with url_for, but with flask context management actually.\nHow do I create url from one application to another?\nMain one - how do I create url for specific application with no app_context at all. For example i need to create some url on import time or from celery task. I tried to do wrapper over all application instances and redefine url_for like\ndef url_for(self, *args, **kwargs):\n    with self.app.app_context():\n        return url_for(*args, **kwargs) \nbut just received following error\n\"Application was not able to create a URL adapter for request independent URL generation. You might be able to fix this by setting the SERVER_NAME config variable.\"\nAny suggestions?", "issue_status": "Closed", "issue_reporting_time": "2015-03-23T20:53:33Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1072": {"issue_url": "https://github.com/pallets/flask/issues/1392", "issue_id": "#1392", "issue_summary": "AppContext.pop() should use a different sentinel for the exception value.", "issue_description": "Contributor\nmjpieters commented on 23 Mar 2015\nConsider the following:\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.teardown_appcontext\ndef teardown(exception):\n    print exception\n\nwith app.app_context():\n    try:\n        raise ValueError()\n    except ValueError:\n        pass\nWithin the app.app_context() context (managed by with) an exception is raised and handled. However, the teardown_appcontext() handler is still passed the exception value.\nThat's because the exception was raised and handled within the same frame, and thus sys.exc_info() is still available. The AppContext.__exit__() method did pass in None for the exception value:\ndef __exit__(self, exc_type, exc_value, tb):\n    self.pop(exc_value)\nbut the AppContext.pop() method cannot distinguish this from not passing in a value at all:\ndef pop(self, exc=None):\n    \"\"\"Pops the app context.\"\"\"\n    self._refcnt -= 1\n    if self._refcnt <= 0:\n        if exc is None:\n            exc = sys.exc_info()[1]\n        self.app.do_teardown_appcontext(exc)\nThis can easily be remedied by using a different sentinel default value:\n_sentinel = object()\n\ndef pop(self, exc=_sentinel):\n    \"\"\"Pops the app context.\"\"\"\n    self._refcnt -= 1\n    if self._refcnt <= 0:\n        if exc is _sentinel:\n            exc = sys.exc_info()[1]\n        self.app.do_teardown_appcontext(exc)", "issue_status": "Closed", "issue_reporting_time": "2015-03-23T14:49:26Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1073": {"issue_url": "https://github.com/pallets/flask/issues/1391", "issue_id": "#1391", "issue_summary": "How to include pages dynamically in flask", "issue_description": "marthees commented on 23 Mar 2015\nHi I am developing one page that has header, footer, menu and main body page.\nThe header and footer are never get change. Whennever the user clicks the menu, then it should redirect to corresponding main body page.\nIs there any framework there in flask? Dynamically include pages.\nI don't want to refresh header, footer, menu.", "issue_status": "Closed", "issue_reporting_time": "2015-03-23T13:43:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1074": {"issue_url": "https://github.com/pallets/flask/issues/1388", "issue_id": "#1388", "issue_summary": "Flask doesn't support resume download to client (no HTTP byte-range support) in 'static' folder", "issue_description": "dns commented on 22 Mar 2015\napp = Flask(name, static_folder='static', static_url_path='')\nI've tested this, currently Flask seems doesn't support resuming download when serving static files in \"static\" directory.\nThis feature is very useful if the client (browser/download manager) requested very large files.", "issue_status": "Closed", "issue_reporting_time": "2015-03-22T00:56:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1075": {"issue_url": "https://github.com/pallets/flask/issues/1387", "issue_id": "#1387", "issue_summary": "Cannot install Flask on Ubuntu Server 14.10", "issue_description": "Candunc commented on 21 Mar 2015\nNo matter what I try (setup.py Pip), I always get a maximum recursion depth exceeded. I know nothing about Python, and I need it as a requirement for another program. How could I go about fixing this?\n'python setup.py' dump: (Beware, really long!)\nTraceback (most recent call last):\n  File \"setup.py\", line 110, in <module>\n    test_suite='flask.testsuite.suite'\n  File \"/usr/lib/python2.7/distutils/core.py\", line 111, in setup\n    _setup_distribution = dist = klass(attrs)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 580, in resolve\n    dist = best[req.key] = env.best_match(req, self, installer)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 825, in best_match\n    return self.obtain(req, installer) # try and download/install\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 837, in obtain\n    return installer(requirement)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 272, in fetch_build_egg\n    dist = self.__class__({'script_args':['easy_install']})\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 225, in __init__\n    _Distribution.__init__(self,attrs)\n  File \"/usr/lib/python2.7/distutils/dist.py\", line 287, in __init__\n    self.finalize_options()\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/setuptools/dist.py\", line 257, in finalize_options\n    ep.require(installer=self.fetch_build_egg)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2029, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 579, in resolve\n    env = Environment(self.entries)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 748, in __init__\n    self.scan(search_path)\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 777, in scan\n    for dist in find_distributions(item):\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 1757, in find_on_path\n    path_item,entry,metadata,precedence=DEVELOP_DIST\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2151, in from_location\n    py_version=py_version, platform=platform, **kw\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 2128, in __init__\n    self.project_name = safe_name(project_name or 'Unknown')\n  File \"/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py\", line 1139, in safe_name\n    return re.sub('[^A-Za-z0-9.]+', '-', name)\n  File \"/usr/lib/python2.7/re.py\", line 151, in sub\n    return _compile(pattern, flags).sub(repl, string, count)\nRuntimeError: maximum recursion depth exceeded", "issue_status": "Closed", "issue_reporting_time": "2015-03-21T04:48:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1076": {"issue_url": "https://github.com/pallets/flask/issues/1386", "issue_id": "#1386", "issue_summary": "form.hidden_tag() not XHTML 1.1-compliant", "issue_description": "nvitucci commented on 19 Mar 2015\nUsing form.hidden_tag() results in an element like the following:\nwhich is not compliant with the XHTML 1.1 standard as the \"input\" element is not closed.", "issue_status": "Closed", "issue_reporting_time": "2015-03-19T09:41:43Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1077": {"issue_url": "https://github.com/pallets/flask/issues/1385", "issue_id": "#1385", "issue_summary": "log", "issue_description": "LoganZhu commented on 19 Mar 2015\nNo description provided.", "issue_status": "Closed", "issue_reporting_time": "2015-03-19T04:06:31Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1078": {"issue_url": "https://github.com/pallets/flask/issues/1384", "issue_id": "#1384", "issue_summary": "request.files is empty after POSTing a file", "issue_description": "bepetersn commented on 18 Mar 2015\nHey guys, I don't know if this is the right place to make this bug report, but I could sure use some help, I have been banging my head against a wall for a bit. See this repo where I'm reproducing my error: https://github.com/bepetersn/special-repo.\nI'm seeing weird behavior around the Flask request object. After uploading a file with the requests library, e.g. requests.post(uri, files=<my_files>), by the time the request propagated to my view function, request.files was empty. Oddly, I observed that the contents of the file itself was available under request.form[None].\nMy only lead was that when I debugged this at length, I saw that the request data was being treated as a mimetype of \"application/x-www-form-urlencoded\" rather than the correct \"multipart/form\" for uploading binary files... But, I just threw this example together really quickly, and I'm not seeing that right now, so I'm no longer sure.\nI've also seen some other errors on this repo involving calling request.data vs request.form. I don't really know anything about that. I'd greatly appreciate a pointer in the right direction.", "issue_status": "Closed", "issue_reporting_time": "2015-03-18T14:54:48Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1079": {"issue_url": "https://github.com/pallets/flask/issues/1382", "issue_id": "#1382", "issue_summary": "Flask Request Signal - Workflow", "issue_description": "rturk commented on 15 Mar 2015\nPlease comment if the attached workflow is a correct description of how Flak handles an request and when and how signals are triggered\nI'm particularly interested in the request_tearing_down signal. I want to log requests (user page views) to a database, but I don't want to compromise the client experience regarding speed. So I would like to only log the request data to a DB after the data was successfully sent to the client", "issue_status": "Closed", "issue_reporting_time": "2015-03-15T17:07:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1080": {"issue_url": "https://github.com/pallets/flask/issues/1379", "issue_id": "#1379", "issue_summary": "Flask-Mega Tutorial error", "issue_description": "GillysWindows commented on 13 Mar 2015\nHi i am currently working through the Flask Mega-Tutorial and when i try to create a new user in part 4 (Databases) at the Play Time section i am getting the following errors and would appreciate any help in solving this issue --- I am extremely new to Linux, Python and Flask so apologise if ive overlooked something very simple here.\nu = models.User(nickname='john', email='john@email.com')\nTraceback (most recent call last):\nFile \"\", line 1, in\nFile \"\", line 2, in init\nFile \"/home/gilly/microblog/flask/local/lib/python2.7/site-packages/sqlalchemy/orm/instrumentation.py\", line 324, in _new_state_if_none\nstate = self._state_constructor(instance, self)\nFile \"/home/gilly/microblog/flask/local/lib/python2.7/site-packages/sqlalchemy/util/langhelpers.py\", line 725, in get\nobj.dict[self.name] = result = self.fget(obj)\nFile \"/home/gilly/microblog/flask/local/lib/python2.7/site-packages/sqlalchemy/orm/instrumentation.py\", line 158, in state_constructor\nself.dispatch.first_init(self, self.class)\nFile \"/home/gilly/microblog/flask/local/lib/python2.7/site-packages/sqlalchemy/event/attr.py\", line 260, in call\nfn(_args, *_kw)\nFile \"/home/gilly/microblog/flask/local/lib/python2.7/site-packages/sqlalchemy/orm/mapper.py\", line 2693, in _event_on_first_init\nconfigure_mappers()\nFile \"/home/gilly/microblog/flask/local/lib/python2.7/site-packages/sqlalchemy/orm/mapper.py\", line 2589, in configure_mappers\nmapper._post_configure_properties()\nFile \"/home/gilly/microblog/flask/local/lib/python2.7/site-packages/sqlalchemy/orm/mapper.py\", line 1694, in _post_configure_properties\nprop.init()\nFile \"/home/gilly/microblog/flask/local/lib/python2.7/site-packages/sqlalchemy/orm/interfaces.py\", line 144, in init\nself.do_init()\nFile \"/home/gilly/microblog/flask/local/lib/python2.7/site-packages/sqlalchemy/orm/relationships.py\", line 1549, in do_init\nself._process_dependent_arguments()\nFile \"/home/gilly/microblog/flask/local/lib/python2.7/site-packages/sqlalchemy/orm/relationships.py\", line 1605, in _process_dependent_arguments\nself.target = self.mapper.mapped_table\nFile \"/home/gilly/microblog/flask/local/lib/python2.7/site-packages/sqlalchemy/util/langhelpers.py\", line 725, in get\nobj.dict[self.name] = result = self.fget(obj)\nFile \"/home/gilly/microblog/flask/local/lib/python2.7/site-packages/sqlalchemy/orm/relationships.py\", line 1535, in mapper\n% (self.key, type(argument)))\nsqlalchemy.exc.ArgumentError: relationship 'posts' expects a class or a mapper argument (received: <class 'sqlalchemy.sql.schema.Table'>)\nThanks in advance for any help given.\nWayne.", "issue_status": "Closed", "issue_reporting_time": "2015-03-13T00:24:35Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1081": {"issue_url": "https://github.com/pallets/flask/issues/1377", "issue_id": "#1377", "issue_summary": "CPU usage increase when debug=True running by virtualenv", "issue_description": "coolcoca commented on 12 Mar 2015\nWhen I running a flask app with debug=True in virtualenv, the cpu usage increase to 20%. But if I set debug=False, the cpu usage is only 1%.\nIf I running without virtualenv, all is ok.", "issue_status": "Closed", "issue_reporting_time": "2015-03-12T08:05:40Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1082": {"issue_url": "https://github.com/pallets/flask/issues/1375", "issue_id": "#1375", "issue_summary": "documentation PDF link is dead", "issue_description": "introvertmac commented on 12 Mar 2015\ngot 404 for \"download document as PDF\"", "issue_status": "Closed", "issue_reporting_time": "2015-03-11T22:18:33Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1083": {"issue_url": "https://github.com/pallets/flask/issues/1374", "issue_id": "#1374", "issue_summary": "flaskr tutorial doesn't match flaskr repo", "issue_description": "kissmygritts commented on 12 Mar 2015\nThis is making it difficult as I am getting an error, I check the repo and the code is completely different. This makes it difficult for a beginner.", "issue_status": "Closed", "issue_reporting_time": "2015-03-11T19:18:33Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1084": {"issue_url": "https://github.com/pallets/flask/issues/1373", "issue_id": "#1373", "issue_summary": "When debug mode is enabled, control-c takes forever to quit, and reloads are slow.", "issue_description": "spideynn commented on 11 Mar 2015\nWhen I do control-c in the Python Console, it either takes a minute, or doesn't do anything.\nAlso, when I make a change to the file and save it, it takes a while to reload the file as well.\nRunning Python 3.4, Windows 8.1. Running in the Spyder IDE Python Console.\nEdit: This also happens in the regular python console.\nEdit 2: It seems that Control-C takes effect when the file reloads...", "issue_status": "Closed", "issue_reporting_time": "2015-03-11T12:53:32Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1085": {"issue_url": "https://github.com/pallets/flask/issues/1372", "issue_id": "#1372", "issue_summary": "Logging Application approaches", "issue_description": "jonaprieto commented on 10 Mar 2015\nHi guys, I'm using for the first time your framework and I happy find out all capabilities with this \"micro-framework'. Btw, I just came up with this decorator, something more friendly for logging task\nI created my project in you want to look for a moment: http://github.com/d555/visionapp\nIn something like manage.py ,inside the Flask app in app root directory:\n...\nimport logging\nfrom logging.handlers import RotatingFileHandler\n...\nhandler = RotatingFileHandler('app-log.txt', maxBytes=10000, backupCount=1)\nhandler.setLevel(logging.INFO) # puede ser loggin.ERROR\napp.logger.addHandler(handler)\nSo, in a somewhere possibly main/decorators.py:\nfrom flask import current_app\n...\ndef logging(hora=None):\n    logger = None\n    def decorador(f):\n        @wraps(f)\n        def vista(*args, **kwargs):\n            logger = current_app.logger\n            kwargs['log'] = logger\n            return f(*args, **kwargs)\n        return vista\n    return decorador\nAfter that, I could nicely use the above decorator in the following way in whatever view:\n@logging()\ndef view_function(log):\n    log.info('friendly logging call')\n   return ...\nMay be, you could just say that in each view wrote something like:\nfrom flask import current_app\ndef view_function():\n     log = current_app.logger\n     log.info('another message')\nFor now, above approach works fine for me, but maybe you know a better approach to do that:\n``using the logger defined in configuration of app, to access from every view functions in any folder to logger\nHow is better do a logging tracking? (something like 'using`getLogger`? and the normal use?)\nIs there something relate with`from flask import logging`. I couldn't find in documentation something relate (maybe https://github.com/mitsuhiko/flask-extended-logging, http://flask.pocoo.org/docs/0.10/errorhandling/) if It's abroad here excuse me.\nThanks in advance.", "issue_status": "Closed", "issue_reporting_time": "2015-03-10T08:52:18Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1086": {"issue_url": "https://github.com/pallets/flask/issues/1370", "issue_id": "#1370", "issue_summary": "before_render_template signal", "issue_description": "Member\nThiefMaster commented on 9 Mar 2015\nThis signal would receive the name of the template and the context and would be able to modify the context before the template is actually rendered. It could even go one step further and use the return value from the signal instead of rendering the template if it's not None.", "issue_status": "Closed", "issue_reporting_time": "2015-03-09T09:10:30Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1087": {"issue_url": "https://github.com/pallets/flask/issues/1362", "issue_id": "#1362", "issue_summary": "Flask Roadmap", "issue_description": "pythonui commented on 4 Mar 2015\nWhat about Flask 1.0 roadmap?", "issue_status": "Closed", "issue_reporting_time": "2015-03-04T05:00:55Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1088": {"issue_url": "https://github.com/pallets/flask/issues/1361", "issue_id": "#1361", "issue_summary": "Method `render_template` does not use blueprint specified `template_folder`", "issue_description": "Kevin922 commented on 3 Mar 2015\nFile structure:\nproject -\n      - templates \\\n                - a \\\n                      search.html\n                - b \\\n                      search.html\n      - start.py\n      - myapplication \\\n                - test.py \nStart file:\n# start.py\nfrom flask import Flask\nfrom myapplication.test import test_blueprint\n\napp = Flask(__name__)\napp.register_blueprint(test_blueprint)\nmy application\n# test.py\nfrom flask import Blueprint, render_template, abort\nfrom jinja2 import TemplateNotFound\n\ntest_blueprint = Blueprint('test_blueprint', __name__,\n                        template_folder='absolute_path_to_project/templates/a')  \n                        # YES, I specified the absolute path to the template a\n\n@test_blueprint.route('/test')\ndef show():\n    try:\n        return render_template(''search.html\") # HERE is the problem\n    except TemplateNotFound:\n        abort(404)\nIs this a problem?\n# Actually, I want to render a/search.html\n# But, render_template() does not use test_blueprint's template_folder\n# render_template() search the template list, find the first search.html, then render\n# So, maybe render a/search.html or b/search.html\n# This depend on the sequence of the template list", "issue_status": "Closed", "issue_reporting_time": "2015-03-03T03:06:26Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1089": {"issue_url": "https://github.com/pallets/flask/issues/1359", "issue_id": "#1359", "issue_summary": "Ability to disable Flasks internal logger", "issue_description": "geekscrapy commented on 27 Feb 2015\nHi, I need to be able to disable flasks internal logger as I have implemented my own within my application that utilises Flask.\nI would like this ability whether I am in debug mode or not.\nTAI", "issue_status": "Closed", "issue_reporting_time": "2015-02-27T07:39:46Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1090": {"issue_url": "https://github.com/pallets/flask/issues/1357", "issue_id": "#1357", "issue_summary": "Support for @blueprint.cli.command", "issue_description": "lnielsen commented on 20 Feb 2015\nIt would be great to have access to the functionality of app.cli.command via blueprints - i.e. something like:\nblueprint = Blueprint('myblueprint', __name__,)\n\n@blueprint.cli.command()\ndef doblueprintstuff():\n    \"\"\"Initialize the database.\"\"\"\n    #....\nIt would help a lot when building modular applications.\n7", "issue_status": "Closed", "issue_reporting_time": "2015-02-20T12:57:19Z", "fixed_by": "#2784", "pull_request_summary": "Add Blueprint level cli registration-- #1357", "pull_request_description": "Contributor\ndoobeh commented on 15 May 2018 \u2022\nedited by davidism\nSo, this tries to address the ability to easily add commands to blueprints, and let them get stacked into the applications cli group in one of three ways.\nThe default is nested, with name taken from the bp name, giving you flask user create:\nbp = Blueprint('user', __name__)\nbp.cli.command('create')\nOptionally you can override that grouping name, giving you flask librarian create:\nbp = Blueprint('user', __name__, cli_group='librarian')\nbp.cli.command('create')\nOr, you can specify None as the group, which applies it directly to the root app's cli group giving flask add_user:\nbp = Blueprint('user', __name__, cli_group=None)\nbp.cli.command('add_user')\nThe tests show each of these options. Let me know your thoughts and I'll add the documentation changes required if everyone think's it's useful to proceed.\ncli_group can also be specified when registering on the app: app.register_blueprint(bp, cli_group=\"librarian\") to override the bp level cli_group choice.\ncloses #1357\n3", "pull_request_status": "Merged", "issue_fixed_time": "2019-05-24T21:47:49Z", "files_changed": [["3", "CHANGES.rst"], ["56", "docs/cli.rst"], ["10", "flask/app.py"], ["21", "flask/blueprints.py"], ["9", "flask/helpers.py"], ["45", "tests/test_cli.py"]]}, "1091": {"issue_url": "https://github.com/pallets/flask/issues/1356", "issue_id": "#1356", "issue_summary": "Documentation PDF 404's on flask site", "issue_description": "davidthewatson commented on 20 Feb 2015\nThis link:\nhttp://flask.pocoo.org/docs/flask-docs.pdf\non this page:\nhttp://flask.pocoo.org/\nGenerates a 404.", "issue_status": "Closed", "issue_reporting_time": "2015-02-19T20:57:27Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1092": {"issue_url": "https://github.com/pallets/flask/issues/1355", "issue_id": "#1355", "issue_summary": "New Watchdog Reloader Is Not Detecting Changes", "issue_description": "jquacinella commented on 19 Feb 2015\nHello all,\nI just upgraded to Werkzeug 0.10, after which I install watchdog to get the new inotify reloader working to help reduce CPU usage on my laptop. However, the reloader no longer works (or at am minimum is random in what it detects).\nTo start debugging, I tried to run the sample watchdog code on their homepage (https://pypi.python.org/pypi/watchdog) in an iPython shell and initially got an error. It related to not being able to allocate inotify watches due to a system constraint. After upping the limit (echo \"131072\" >> /proc/sys/fs/inotify/max_user_watches), I was able to run the code in the shell.\nHowever, after that, the reloader still does not work. I am not sure what else I can do to help debug this, as watchdog seems to import correctly and my app does not throw any errors. Some diagnostic details:\n% lsb_release -a\nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription: Ubuntu 14.04.1 LTS\nRelease: 14.04\nCodename: trusty\nVersions:\nWerkzeug==0.10.1\nwatchdog==0.8.3\nFlask==0.10.1\nPlease let me know if you need further information, I would be glad to debug.", "issue_status": "Closed", "issue_reporting_time": "2015-02-19T17:05:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1093": {"issue_url": "https://github.com/pallets/flask/issues/1353", "issue_id": "#1353", "issue_summary": "Reload takes > 60 seconds", "issue_description": "dmitrybelyakov commented on 19 Feb 2015\nHi everyone!\nSince I updated werkzeug to 0.10.1 this morning reloader stopped working. Is any specific configuration required besides installing watchdog?\nI run with:\nrun_simple(\n        hostname='0.0.0.0',\n        port=5000,\n        application=app,\n        use_reloader=True,\n        use_debugger=True,\n        reloader_type='watchdog'\n    )\n\n# * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)\n# * Restarting with inotify reloader\nI'm under vagrant and tried both with and without NFS to no success.", "issue_status": "Closed", "issue_reporting_time": "2015-02-19T07:59:55Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1094": {"issue_url": "https://github.com/pallets/flask/issues/1352", "issue_id": "#1352", "issue_summary": "Problem running Flask with an ssl_context under Werkzeug 0.10.1", "issue_description": "Cabu commented on 16 Feb 2015\nWith the last Werkzeug (0.10.1) I get the following error message:\nException in thread Thread-1:\nTraceback (most recent call last):\n  File \"C:\\PGM\\Python27\\lib\\threading.py\", line 810, in __bootstrap_inner\n    self.run()\n  File \"C:\\PGM\\Python27\\lib\\threading.py\", line 763, in run\n    self.__target(*self.__args, **self.__kwargs)\n  File \"C:\\PGM\\Python27\\lib\\site-packages\\werkzeug\\serving.py\", line 602, in inner\n    passthrough_errors, ssl_context).serve_forever()\n  File \"C:\\PGM\\Python27\\lib\\site-packages\\werkzeug\\serving.py\", line 506, in make_server\n    passthrough_errors, ssl_context)\n  File \"C:\\PGM\\Python27\\lib\\site-packages\\werkzeug\\serving.py\", line 450, in __init__\n    self.socket = ssl_context.wrap_socket(self.socket,\nAttributeError: 'Context' object has no attribute 'wrap_socket'\nReverting to Werkzeug 0.9.6 make it work again like a charm.", "issue_status": "Closed", "issue_reporting_time": "2015-02-16T15:55:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1095": {"issue_url": "https://github.com/pallets/flask/issues/1351", "issue_id": "#1351", "issue_summary": "Overloading of JSON Decoder causing cookies decoding problems", "issue_description": "Cabu commented on 16 Feb 2015\nWhen trying to change the flask.json_decoder to my own decoder, the unserialisation of cookies doesn't work anymore.\n# -- coding: utf-8\n\nfrom flask import Flask, flash, url_for, redirect, render_template_string\nfrom flask.json import JSONEncoder, JSONDecoder\n\n\ntemplate = \"\"\"\n<!DOCTYPE html>\n<html><head><title>Test JSON encoder/decoder</title></head><body>\n{% with messages = get_flashed_messages(with_categories=true) %}{% if messages %}{% for message in messages %}\n<p>Flash: {{ message }}</p>\n{% endfor %}{% endif %}{% endwith %}\n<p>Flash should be: ['Flash message', 'success']</p>\n<p><a href=\"{{ url_for('index') }}\">Try again</a></p>\n</body></html>\n\"\"\"\n\n\nclass CustomJSONEncoder(JSONEncoder):\n    \"\"\" Do nothing custom json encoder \"\"\"\n    def default(self, obj):\n        return super(CustomJSONEncoder, self).defaults(obj)\n\n\nclass CustomJSONDecoder(JSONDecoder):\n    \"\"\" Do nothing custom json decoder \"\"\"\n    def __init__(self, *args, **kargs):\n        super(CustomJSONDecoder, self).__init__(object_hook=self.decode)\n\n    def decode(self, d):\n        return d\n\n\napp = Flask(__name__, static_url_path='')\napp.config['SECRET_KEY'] = 'secret-key'\napp.json_encoder = CustomJSONEncoder\napp.json_decoder = CustomJSONDecoder        # WorkingCustomJSONDecoder\n\n\n@app.route('/')\ndef index():\n    flash('Flash message', 'success')\n    return redirect(url_for('display'))\n\n\n@app.route('/b')\ndef display():\n    return render_template_string(template)\n\n\nif __name__ == '__main__':\n    app.run()\nFor the cookies to work again I should copy part of TaggedJSONSerializer in my decoder...\nimport uuid\nfrom base64 import b64decode\nfrom werkzeug.http import parse_date\nfrom markupsafe import Markup\nfrom flask._compat import iteritems\n\n\nclass CustomJSONDecoder(JSONDecoder):\n    \"\"\" Do nothing custom json decoder \"\"\"\n    def __init__(self, *args, **kargs):\n        super(CustomJSONDecoder, self).__init__(object_hook=self.decode)\n\n    def decode(self, d):\n        # Copy of the code from Flask.sessions.TaggedJSONSerializer(object).loads(self, value).object_hook(obj)\n        if len(d) == 1:\n            the_key, the_value = next(iteritems(d))\n            if the_key == ' t':\n                return tuple(the_value)\n            elif the_key == ' u':\n                return uuid.UUID(the_value)\n            elif the_key == ' b':\n                return b64decode(the_value)\n            elif the_key == ' m':\n                return Markup(the_value)\n            elif the_key == ' d':\n                return parse_date(the_value)\n        return d\nCould it be a but or most probably an error from my part?", "issue_status": "Closed", "issue_reporting_time": "2015-02-16T15:29:17Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1096": {"issue_url": "https://github.com/pallets/flask/issues/1350", "issue_id": "#1350", "issue_summary": "Include wheels on the PyPI release", "issue_description": "prophile commented on 16 Feb 2015\nIt would be a nice speed increase for pip install flask if the PyPI release had wheel distributions.", "issue_status": "Closed", "issue_reporting_time": "2015-02-16T01:29:22Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1099": {"issue_url": "https://github.com/pallets/flask/issues/1345", "issue_id": "#1345", "issue_summary": "flask.send_file gives bad security advice", "issue_description": "Contributor\nezyang commented on 8 Feb 2015\nOn http://flask.pocoo.org/docs/latest/api/#flask.send_file the following is suggested:\nPlease never pass filenames to this function from user sources without checking them first. Something like this is usually sufficient to avoid security problems:\nif '..' in filename or filename.startswith('/'):\n       abort(404)\nThis is terrible advice. It would be much better to tell people that if they want to pass in filenames, they should use http://flask.pocoo.org/docs/latest/api/#flask.send_from_directory instead.", "issue_status": "Closed", "issue_reporting_time": "2015-02-07T22:54:27Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1100": {"issue_url": "https://github.com/pallets/flask/issues/1344", "issue_id": "#1344", "issue_summary": "It's been almost 2 years since the last major update.. is there any realistic date for any new release?", "issue_description": "lipis commented on 7 Feb 2015\nNo description provided.", "issue_status": "Closed", "issue_reporting_time": "2015-02-07T12:22:31Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1101": {"issue_url": "https://github.com/pallets/flask/issues/1340", "issue_id": "#1340", "issue_summary": "Snippets - Decorators: Verify a Google authentication token", "issue_description": "laukamp commented on 6 Feb 2015\nIn snippets -> decorators -> Verify a Google authentication token\nI would change:\n                       headers={'Host': 'www.googleapis.com',\n                                'Authorization': access_token})\nto:\n                       headers={'Host': 'www.googleapis.com',\n                               'Authorization': 'Bearer '+access_token\n                       })\nYou can try in https://developers.google.com/oauthplayground/", "issue_status": "Closed", "issue_reporting_time": "2015-02-06T09:57:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1102": {"issue_url": "https://github.com/pallets/flask/issues/1336", "issue_id": "#1336", "issue_summary": "request.url returns decoded version. How to get encoded one?", "issue_description": "chuanconggao commented on 2 Feb 2015\nIf I have an URL 'http://localhost/test?p=%23iphone&q=http%3A%2F%2Fwww.google.com', when I use request.url it returns a decoded version:\nIn [9]: 'http://localhost/test?p=#iphone&q=http://www.google.com'\nThe problem is I cannot use urllib.parse on the decoded version, as it will return wrong result:\nIn [9]: urlparse('http://localhost/test?p=#iphone&q=http://www.google.com')\nOut[9]: ParseResult(scheme='http', netloc='localhost', path='/test', params='', query='p=', fragment='iphone&q=http://www.google.com')\nI cannot encode it back to correct version too:\nIn [11]: quote_plus('http://localhost/test?p=#iphone&q=http://www.google.com')\nOut[11]: 'http%3A%2F%2Flocalhost%2Ftest%3Fp%3D%23iphone%26q%3Dhttp%3A%2F%2Fwww.google.com'\nIn [13]: quote('http://localhost/test?p=#iphone&q=http://www.google.com')\nOut[13]: 'http%3A//localhost/test%3Fp%3D%23iphone%26q%3Dhttp%3A//www.google.com'\nHow can I get the correct encoded URL? I think I can use request.args, but it there a better way? I also want to include possible params and fragment, are there any information from request?", "issue_status": "Closed", "issue_reporting_time": "2015-02-02T06:52:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1103": {"issue_url": "https://github.com/pallets/flask/issues/1334", "issue_id": "#1334", "issue_summary": "Typo on flask.g documentation section", "issue_description": "michaelamie commented on 2 Feb 2015\nWhere: http://flask.pocoo.org/docs/0.10/api/#flask.g\n\"On top of that it will delegate access to the current application\u2019s JSOn encoders and decoders for easier customization.\"\nShould be JSON not JSOn, right?", "issue_status": "Closed", "issue_reporting_time": "2015-02-01T21:14:17Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1104": {"issue_url": "https://github.com/pallets/flask/issues/1333", "issue_id": "#1333", "issue_summary": "Error 404 for linked flask-docs.zip", "issue_description": "hartwork commented on 29 Jan 2015\nAt\nhttp://flask.pocoo.org/\nthere is a link \"zipped HTML\" to\nhttp://flask.pocoo.org/docs/flask-docs.zip\ngiving 404.\nPlease fix :)", "issue_status": "Closed", "issue_reporting_time": "2015-01-29T16:42:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1105": {"issue_url": "https://github.com/pallets/flask/issues/1330", "issue_id": "#1330", "issue_summary": "Method is_json does not support capital letters in mimetype", "issue_description": "KarelJakubec commented on 28 Jan 2015\nMethod is_json (flask/wrappers.py:112) tests whether mimetype is in format 'application/...+json'. According to http://tools.ietf.org/html/rfc2045, mime types are case insensitive.\n'The type, subtype, and parameter names are not case sensitive. For example, TEXT, Text, and TeXt are all equivalent top-level media types.'\nSo mimetype 'ApLiCaTiOn/jSoN' is technically fine (and yes, extremely rare) and as the method tests the mimetype just for lowercase mimetype 'application/json' the previous example will fail, yet it should be ok.", "issue_status": "Closed", "issue_reporting_time": "2015-01-28T15:34:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1106": {"issue_url": "https://github.com/pallets/flask/issues/1329", "issue_id": "#1329", "issue_summary": "Programatically enforce styleguide", "issue_description": "Member\nuntitaker commented on 28 Jan 2015\nOfficially the pocoo projects follow its own styleguide, however, there are no tools built around this style, so I'd recommend sticking to PEP8. Flake8 has very sensible defaults, and apart from the ever-controversial line length limit, it should be possible to integrate it into Flask quickly.", "issue_status": "Closed", "issue_reporting_time": "2015-01-28T13:56:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1107": {"issue_url": "https://github.com/pallets/flask/issues/1328", "issue_id": "#1328", "issue_summary": "Strange behaviour in app.route decorator 'methods' parameter when using string", "issue_description": "entd commented on 28 Jan 2015\napp = Flask(__name__)\n\n@app.route('/')\ndef form():\n    return render_template('form_submit.html')\n@app.route('/hello/', methods=('POST'))\ndef hello():\n    name=request.form['yourname']\n    email=request.form['youremail']\n    return render_template('form_action.html', name=name, email=email)\n\n# Run the app :)\nif __name__ == '__main__':\n  app.run( \n        host=\"0.0.0.0\",\n        port=int(\"7777\")\n  )\nWhile tupple is iterable for flask accept this without any error warning or problem: even more: (\"GET\", \"POST\") works as well as [\"GET\", \"POST\"].\nHowever with single element string there is problem:\nimport requests\nr = requests.post(\"http://127.0.0.1:7777/hello\")\nprint(\"Status code: {}\".format(str(r.status_code)))\nprint(\"Headers: {}\".format(r.headers))\nOutput:\nStatus code: 405\nHeaders:  {'Allow': 'O, OPTIONS, T, P, S', 'Date': 'Wed, 28 Jan 2015 07:38:05 GMT', 'Content-Type': 'text/html', 'Server': 'Werkzeug/0.9.6 Python/3.4.2', 'Content-Length': '178'}\nSeems that flask happily parses ((\"POST\")) letter by letter. Posting with curl using method \"P\" is valid thing in flask.\nWhile it is stupid use case, I doubt that Flask should happily churn String letter by letter. Also I think that after possible fix it would be easy to unit test I think even for custom method definition this is not a valid or good behaviour.", "issue_status": "Closed", "issue_reporting_time": "2015-01-28T07:48:33Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1108": {"issue_url": "https://github.com/pallets/flask/issues/1327", "issue_id": "#1327", "issue_summary": "AttributeError: 'function' object has no attribute 'name'", "issue_description": "zhguokai commented on 25 Jan 2015\nwhen i register a blueprint in my flask app,an error occurred,the error msg is :\n`\n             /usr/bin/python3.4.2 /data/AppCode/05CodeNet/MicroStone_flask/runServer.py\n             Traceback (most recent call last):\n             File \"/data/AppCode/05CodeNet/MicroStone_flask/runServer.py\", line 11, in <module>\n             app.register_blueprint(login)\n             File \"/home/zhgk/.local/lib/python3.4/site-packages/flask/app.py\", line 62, in wrapper_func\n             return f(self, *args, **kwargs)\n             File \"/home/zhgk/.local/lib/python3.4/site-packages/flask/app.py\", line 880,\n             in register_blueprint\n            if blueprint.name in self.blueprints:\n            AttributeError: 'function' object has no attribute 'name'\n`\nand my py code is :\nrunserver.py:\n`\n       # -*- coding: utf-8 -*-\n        \"\"\"\n             Flask\u5e94\u7528\u542f\u52a8\u5165\u53e3\n       \"\"\"\n\n        from flask import Flask\n\n        from apps.login.ctrl.login import login\n\n        app = Flask(__name__)\n        app.register_blueprint(login)\n        if __name__ == \"__main__\":\n               app.run()\n        __author__ = 'zhgk'\n`\nlogin.py :\n`\n          # -*- coding: utf-8 -*-\n               \"\"\"\n\n            \"\"\"\n\n            from flask.blueprints import Blueprint\n\n             login = Blueprint('login', __name__)\n\n\n             @login.route(\"/\")\n            def login():\n                 return \"Login\"\n\n\n              __author__ = 'zhgk'\n`\nanyone can tell me why?", "issue_status": "Closed", "issue_reporting_time": "2015-01-25T13:26:40Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1109": {"issue_url": "https://github.com/pallets/flask/issues/1324", "issue_id": "#1324", "issue_summary": "test_client removes query_string", "issue_description": "flaker commented on 21 Jan 2015\nI've been trying to use test_client with some simple services I've made but noticed that when calling a service sending something through the query string, nothing is received on the endpoint. So:\ntest_client.get(\"http://localhost/api1_0/some-service?param1=value1\")\n(Actually I use url_to())\ngets to some-service as expected, but the request.args collection is empty. This call works perfectly if I use an external tool like curl.\nDebugging, I've got to the method make_test_environ_builder (testing.py) where url.path is used but url.querystring is just disregarded.\nIn the end, I've found a workaround (while writing this issue):\ntest_client.get(\"http://localhost/api1_0/some-service\", query_string = \"param1=value1\")\nThe added parameter travels to the EnvironBuilder.\nIt seems to me that this is a bug since there is no reason why the query string should be disregarded in the first place. But I am new to Flask so I may be missing something\nThank you.", "issue_status": "Closed", "issue_reporting_time": "2015-01-20T22:29:46Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1110": {"issue_url": "https://github.com/pallets/flask/issues/1323", "issue_id": "#1323", "issue_summary": "Extra slashes causes route error", "issue_description": "robnagler commented on 20 Jan 2015\nExtra slashes in the URL change the routing. For example, /x and //x do not route the same way.\nHere's a unit test which demonstrates this:\nhttps://gist.github.com/robnagler/1a5d0361cc71a6806fc6\nIf you put a proxy in front of flask, it will normalize the URLs so this isn't an issue. It would seem, however, that Flask should normalize the URLs as well.", "issue_status": "Closed", "issue_reporting_time": "2015-01-19T23:22:11Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1111": {"issue_url": "https://github.com/pallets/flask/issues/1322", "issue_id": "#1322", "issue_summary": "distribute_setup.py link for windows setup has gone bad", "issue_description": "tbarn commented on 18 Jan 2015\nIn http://flask.pocoo.org/docs/0.10/installation/#windows-easy-install the distribute_setup.py link looks like the domain owner didn't renew or lost the site so the script is not there.\nI looked elsewhere for a good script, not sure which one would be the best to think to. A lot of the sites that also host the script just look fishy but could be options.", "issue_status": "Closed", "issue_reporting_time": "2015-01-17T22:27:51Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1112": {"issue_url": "https://github.com/pallets/flask/issues/1321", "issue_id": "#1321", "issue_summary": "Make it easier to serve 304 (Not Modified) using a database file.", "issue_description": "Contributor\nflying-sheep commented on 18 Jan 2015\nCurrently, i have to do this if i want to simply reply 304.\ngiven an object f with the fields mime, modified and data:\nrv = send_file(BytesIO(f.data), mimetype=f.mime)\nrv.last_modified = f.modified.timestamp()\nreturn rv.make_conditional(request)\nusing python 2, this would be worse, as it is most times:\nrv.last_modified = (f.modified - datetime(1970, 1, 1)).total_seconds()\ni\u2019d like to have a way to make use of a datetime object or POSIX timestamp in combination with the existing conditional argument to send_file. a way that one can use without having to discover last_modified and make_conditional both, e.g. (last_modified can be a datetime or timestamp):\nreturn send_file(BytesIO(f.data), mimetype=f.mime,\n                 conditional=True, last_modified=f.modified)\nDocs\nthe documentation to the conditional parameter would be extended to mention that last_timestamp has to be supplied if the first argument is a file handle instead of a name.\nImplementation\nwe could create a helper function:\ndef to_timestamp(da_ti):\n    if PY2:\n        epoch = datetime(1970, 1, 1, tzinfo=da_ti.tzinfo)  # use tzinfo to ensure subtractability\n        return (da_ti - epoch).total_seconds()\n    else:  # we do require python 3 >= 3.3, right?\n        return da_ti.timestamp()", "issue_status": "Closed", "issue_reporting_time": "2015-01-17T19:27:17Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1113": {"issue_url": "https://github.com/pallets/flask/issues/1319", "issue_id": "#1319", "issue_summary": "Error With Quickstart Tutorial - Print url_for('profile'...)", "issue_description": "diek commented on 17 Jan 2015\nFrom the Quickstart Tutorial, Running, print url_for('profile', username='John Doe') generates the following error.\nTraceback (most recent call last):\nFile \"\", line 2, in\nFile \"/Users/diek/.virtualenvs/flask_quickstart/lib/python2.7/site-packages/flask/helpers.py\", line 312, in url_for\nreturn appctx.app.handle_url_build_error(error, endpoint, values)\nFile \"/Users/diek/.virtualenvs/flask_quickstart/lib/python2.7/site-packages/flask/app.py\", line 1641, in handle_url_build_error\nreraise(exc_type, exc_value, tb)\nFile \"/Users/diek/.virtualenvs/flask_quickstart/lib/python2.7/site-packages/flask/helpers.py\", line 305, in url_for\nforce_external=external)\nFile \"/Users/diek/.virtualenvs/flask_quickstart/lib/python2.7/site-packages/werkzeug/routing.py\", line 1616, in build\nraise BuildError(endpoint, values, method)\nwerkzeug.routing.BuildError: ('profile', {'username': 'John Doe'}, None)", "issue_status": "Closed", "issue_reporting_time": "2015-01-17T05:13:11Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1114": {"issue_url": "https://github.com/pallets/flask/issues/1317", "issue_id": "#1317", "issue_summary": "flask.wrappers.Request.get_json fails to check for data", "issue_description": "kenjones-cisco commented on 15 Jan 2015\nIf it is possible to provide optional data input as part of request, and content type is set to application/json, but no data was provided as it was optional, a call flask.request.json or flask.request.get_json will result in a BadRequest exception.\nInstead of attempting to perform a json.loads on None or empty string, add at line 153:\nif not data: return None\nI do realize there is a silent option, but that would seem to apply to situations when data was supplied but incorrectly formatted such that json was unable to load the data. Versus the situation where there is no data at all to even load.\nI have also opened an issue with flask-restful (flask-restful/flask-restful#387) as well to change how or when the call to get_json happens, always pass silent=True, or provide consumers an option to pass through the option silent=True.\nBut it seems cleaner to check for the existence of data prior to trying to process the data.", "issue_status": "Closed", "issue_reporting_time": "2015-01-14T23:09:05Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1115": {"issue_url": "https://github.com/pallets/flask/issues/1316", "issue_id": "#1316", "issue_summary": "ehh .. how to say", "issue_description": "zh18 commented on 14 Jan 2015\nI have two models , A and B\nfile A:\nimport ...\napp = Flask(name)\n@app.route('/');\ndef something():pass\nif main:\napp.run();\n\\\\\\\\\\\\\\\\\\\\\\\\\nfile B:\nimport ...\napp = Flask(name)\n@app.route('/abc/');\ndef anything():pass\n\\\\\\\\\\\\\\\\\\\\\\\nThe question is , how can i import B in to A , so when I run A , and type localhost/abc/som in my browser , can call the function anything() in B ?\nI see the document , but I have a little confused , please help , Thanks .", "issue_status": "Closed", "issue_reporting_time": "2015-01-14T02:54:20Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1116": {"issue_url": "https://github.com/pallets/flask/issues/1314", "issue_id": "#1314", "issue_summary": "Flaskr tutorial Step 3 is missing content", "issue_description": "TPMoyer commented on 13 Jan 2015\nhttp://flask.pocoo.org/docs/0.10/tutorial/dbinit/\nshows only the header and a portion of the first paragraph.", "issue_status": "Closed", "issue_reporting_time": "2015-01-13T17:06:27Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1117": {"issue_url": "https://github.com/pallets/flask/issues/1312", "issue_id": "#1312", "issue_summary": "pylint errors on all example & template project", "issue_description": "DavidHwu commented on 12 Jan 2015\nLike to see flask examples follow good Python standards and pass pylint validation, especially with their examples people use for setup and reference.\nIs there a reason why these don't follow the standard python package and and setups found in Pypi?\nHere is an example:\nhttps://pypi.python.org/pypi/python_boilerplate_template\nHaving looked at several other micro frameworks (ie. Pyramid, CherryPy, Pecan, etc)... they all seem to adopt these template patterns and work with pylint.\nHere is a sample ...\n(sandbox)Davids-MacBook-Pro-2:sandbox dhwu$ pylint --version\nNo config file found, using default configuration\npylint 1.4.0,\nastroid 1.3.2, common 0.63.2\nPython 3.4.2 (default, Dec 18 2014, 08:45:34)\nGCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.56)Davids-MacBook-Pro-2:sandbox dhwu$\n(sandbox)Davids-MacBook-Pro-2:sandbox dhwu$ pylint /Users/dhwu/eng/Flask-0.10.1/examples/blueprintexample\nNo config file found, using default configuration\nF: 1, 0: error while code parsing: Unable to load file '/Users/dhwu/eng/Flask-0.10.1/examples/blueprintexample/init.py' ([Errno 2] No such file or directory: '/Users/dhwu/eng/Flask-0.10.1/examples/blueprintexample/init.py') (parse-error)\n(sandbox)Davids-MacBook-Pro-2:sandbox dhwu$\nF: 1, 0: error while code parsing: Unable to load file '/Users/dhwu/eng/Flask-0.10.1/examples/flaskr/init.py' ([Errno 2] No such file or directory: '/Users/dhwu/eng/Flask-0.10.1/examples/flaskr/init.py') (parse-error)", "issue_status": "Closed", "issue_reporting_time": "2015-01-12T18:20:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1118": {"issue_url": "https://github.com/pallets/flask/issues/1310", "issue_id": "#1310", "issue_summary": "persona example error", "issue_description": "rwdim commented on 5 Jan 2015\nOut of the box, running the persona example, you get:\nImportError: No module named requests\nRemoving the import and replacing \"requests\" with \"request\" appears to resolve the issue.", "issue_status": "Closed", "issue_reporting_time": "2015-01-05T17:09:48Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1119": {"issue_url": "https://github.com/pallets/flask/issues/1305", "issue_id": "#1305", "issue_summary": "request.form issue", "issue_description": "ghost commented on 2 Jan 2015\nJust encountered this issue. Don't know if it had already been reported.\nUsing request.form['field'] to access checkbox doesnot work; whereas request.form.get('field') works. It is possible to use both request.form.get('field') or request.form['field'] to access text fields.", "issue_status": "Closed", "issue_reporting_time": "2015-01-02T15:13:17Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1120": {"issue_url": "https://github.com/pallets/flask/issues/1304", "issue_id": "#1304", "issue_summary": "Dev server fails to terminate, becomes orphan", "issue_description": "fvgs commented on 2 Jan 2015\nRunning OS X Yosemite.\nI had the dev server running and was toggling the debug option. i.e. app.debug={True, False} in my entry-point file. I started running without debug and was surprised that the server was loading changes I made to my templates without having to restart the server. This is the reason I was toggling the option. Though, this is not the issue, since I later learned that that was the correct behavior.\nIn any case, I proceeded to then set debug to True and save the entry-point file. I may have restarted the server at this point, but either way things were still running regularly. However, trouble ensued when I then commented the line setting debug to True (thus leaving it set to the default False value) and saved. After this, I restarted the server, but was met with a traceback ending in:\n...\nFile \"/usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/socket.py\", line 224, in meth\n    return getattr(self._sock,name)(*args)\nsocket.error: [Errno 48] Address already in use\nI restarted the server multiple times, before and after relaunching the Terminal app, and was met with this traceback each time. From this I suspected the server process was still running and had been orphaned. Using Activity Monitor, I found a python process running and terminated it. After that, when I tried running the dev server, I received a smaller (though similarly-ending) traceback. (not sure what to conclude from receiving a different traceback)\nI didn't get to do much more testing after that. I came to GitHub to begin documenting the bug when my MacBook suddenly restarted. I can't say the restart is related to this issue. However, the restart was due to an OS X panic relating to OSXFuse. I've never had an OS X panic since updating to Yosemite, so I find a correlation to the dev server issue possible.", "issue_status": "Closed", "issue_reporting_time": "2015-01-02T07:10:42Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1121": {"issue_url": "https://github.com/pallets/flask/issues/1302", "issue_id": "#1302", "issue_summary": "testing documentation missing \"TESTING\" config", "issue_description": "yisding commented on 1 Jan 2015\nhttp://flask.pocoo.org/docs/dev/testing/\nIn the first code box there's flaskr.app.config['TESTING'] = True\nBut then it goes missing here:\nhttp://flask.pocoo.org/docs/dev/testing/#the-first-test", "issue_status": "Closed", "issue_reporting_time": "2014-12-31T21:28:12Z", "fixed_by": "#2117", "pull_request_summary": "Added missing testing config", "pull_request_description": "Contributor\naccraze commented on 19 Dec 2016\nThis PR contains an update to docs/testing.rst:\nThe testing documentation was missing TESTING config from one of the examples.\nfixes #1302", "pull_request_status": "Merged", "issue_fixed_time": "2017-04-13T23:45:25Z", "files_changed": [["8", "docs/testing.rst"]]}, "1122": {"issue_url": "https://github.com/pallets/flask/issues/1300", "issue_id": "#1300", "issue_summary": "Links to PDF and HTML Zipped Docs return 404 error", "issue_description": "texpilot commented on 31 Dec 2014\nTrying to download the PDF version of the flask docs from URL http://flask.pocoo.org returns error code 404. Same thing with the HTML Zipped link.\nLooking forward to getting into Flask!", "issue_status": "Closed", "issue_reporting_time": "2014-12-30T23:47:12Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1123": {"issue_url": "https://github.com/pallets/flask/issues/1298", "issue_id": "#1298", "issue_summary": "Flask doc unittest error", "issue_description": "Toshinaki commented on 30 Dec 2014\nHi everyone.\nI'm new to Flask, and following the tutorial.\nUntill The First Test of Testing Flask Applications\nthe code bellow\ndef test_empty_db(self):\n    rv = self.app.get('/')\n    assert 'No entries here so far' in rv.data\nwent wrong.\nTraceback (most recent call last):\n  File \"D:\\Programming\\Python3_mine\\Flask\\flaskr\\flaskr_tests.py\", line 21, in test_empty_db\n    assert 'No entries here so far' in rv.data\nTypeError: Type str doesn't support the buffer API\nThen I checked the rv.data's type.(rv is a response_class object)\nAnd it's bytes type. So I use b'No entries here so far' and it worked.\nDid this happen to everyone else?\nI think someone should correct the document to save beginners' time.\nAnd I'm still working on my English so forgive me if there're any grammar or spelling mistake.\nThank you for reading!! :)", "issue_status": "Closed", "issue_reporting_time": "2014-12-30T08:48:51Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1124": {"issue_url": "https://github.com/pallets/flask/issues/1296", "issue_id": "#1296", "issue_summary": "\u9ebb\u70e6\u95ee\u4e0b\uff0c \u4f60\u7684\u6570\u636e\u5e93\u600e\u4e48\u5347\u7ea7\u554a", "issue_description": "kaniel commented on 29 Dec 2014\n\u6211\u5728models\u91cc\u9762\u52a0\u4e86\u8868\u7ed3\u6784\uff0c \u6211\u53bb\u6267\u884cmigrate \u548cupgrade\uff0c \u4e0d\u80fd\u5347\u7ea7\uff0c\n\u6570\u636e\u5e93\u600e\u4e48\u5347\u7ea7\u554a\uff1f", "issue_status": "Closed", "issue_reporting_time": "2014-12-29T06:50:29Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1125": {"issue_url": "https://github.com/pallets/flask/issues/1294", "issue_id": "#1294", "issue_summary": "Documentation", "issue_description": "DavidCDean commented on 25 Dec 2014\nIs there a documentation download for Flask (and/or Jinja and Werkzeug)?", "issue_status": "Closed", "issue_reporting_time": "2014-12-25T09:27:16Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1126": {"issue_url": "https://github.com/pallets/flask/issues/1293", "issue_id": "#1293", "issue_summary": "Project Feedback Site", "issue_description": "DavidCDean commented on 25 Dec 2014\nThe project feedback site referenced on the Flask website appears to be unavailable.", "issue_status": "Closed", "issue_reporting_time": "2014-12-25T09:26:27Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1127": {"issue_url": "https://github.com/pallets/flask/issues/1289", "issue_id": "#1289", "issue_summary": "bad content-length default", "issue_description": "reteptilian commented on 20 Dec 2014\nIn werkzeug's WSGIRequestHandler, CONTENT-LENGTH defaults to an empty string ('') if the client did not provide a Content-Length header.\nThis is causing me problems in my flask web service, which is trying to proxy requests. The user creates a request without Content-Length, flask gives it to me and then I pass it along to another server, which then returns HTTP 400 due to the bad Content-Length that werkzeug has inserted. According to RFC 2616, Content-Length must be a number.\nInitially I thought this should be considered a werkzeug bug but maybe the empty string was intended to be werkzeug's signifier for a non-existent Content-Length, rather than an actual Content-Length value that could be used directly. If that's the case, then I would modify flask so that Content-Length isn't included in the incoming request's headers if it is the empty string.\nBottom line, I believe that a client request that is missing a Content-Length header should not result in an incoming flask request with the Content-Length equal to the empty string.", "issue_status": "Closed", "issue_reporting_time": "2014-12-19T20:43:10Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1128": {"issue_url": "https://github.com/pallets/flask/issues/1288", "issue_id": "#1288", "issue_summary": "app.add_url_rule() should look for OPTIONS methods in a case-insensitive manner", "issue_description": "reteptilian commented on 20 Dec 2014\nadd_url_rule() has logic that says that if the user has not included OPTIONS in their methods, flask will automatically provide an implementation.\nUnfortunately, this logic is only triggered if the method string is OPTIONS in all upper case. So if you've included lower case \"options\" in your methods you will still end up with the flask-provided options functionality.\nI think it should be a case-insensitive comparison since all the rest of the routing is all case-insensitive.", "issue_status": "Closed", "issue_reporting_time": "2014-12-19T20:39:27Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1129": {"issue_url": "https://github.com/pallets/flask/issues/1286", "issue_id": "#1286", "issue_summary": "send_file fails when filename contains unicode symbols", "issue_description": "georgthegreat commented on 18 Dec 2014\nHi.\nI've detected an issue with supporting unicode filenames in send_file.\nIf send_file attempts to respond with utf-8 in http headers, the answer is empty, the log contains something like \"http-headers should containbe latin-1\".\nI know that browser support IS A MESS, but it seems, that sending two filenames (filename= and filename*=) separated by semicolon should work.\nI'd like this to be handled by flask or werkzeug. Will you accept such pull request?\n2", "issue_status": "Closed", "issue_reporting_time": "2014-12-18T13:32:21Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1130": {"issue_url": "https://github.com/pallets/flask/issues/1284", "issue_id": "#1284", "issue_summary": "`itsdangerous` dependency not marked", "issue_description": "larkost commented on 18 Dec 2014\nIt appears (at least in version 10.1) that there is a dependency on the its dangerous module. This is not in the standard library (at least on MacOS), so at least should be added to the dependencies listed in the first paragraph of http://flask.pocoo.org/docs/0.10/installation/", "issue_status": "Closed", "issue_reporting_time": "2014-12-17T21:59:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1131": {"issue_url": "https://github.com/pallets/flask/issues/1283", "issue_id": "#1283", "issue_summary": "response time problem", "issue_description": "anch0vy commented on 17 Dec 2014\n[sorry for my english]\nsometime, my flask app return page with very slow latency time.(10s~20s)\n\nmy code is very simple and it takes times under 0.01s\nso i try to strace command and i found this\ncommand: strace -tt python main.py\n23:01:29.815894 recvfrom(4, \"\", 8192, 0, NULL, NULL) = 0 <- take 20s\n23:01:49.059271 close(4) = 0", "issue_status": "Closed", "issue_reporting_time": "2014-12-17T14:38:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1132": {"issue_url": "https://github.com/pallets/flask/issues/1282", "issue_id": "#1282", "issue_summary": "raise FormDataRoutingRedirect", "issue_description": "ghostbod99 commented on 17 Dec 2014\nI found a exception when i use NestableBlueprint. It raise FormDataRoutingRedirect Exception.\nAnd I found this exception again where I run a simple test demo.\ntest demo:\n@user.route('/v1/', methods=['GET', 'POST'])\ndef user_test():\nprint 'test'\nreturn 'test'\nget http://192.168.2.103:7700/v1 -> successed\nget http://192.168.2.103:7700/v1/ -> successed\npost http://192.168.2.103:7700/v1/ -> successed\npost http://192.168.2.103:7700/v1 -> raise FormDataRoutingRedirect:\nFile \"/home/ghostbod/python/hmt_api/venv/lib/python2.7/site-packages/flask/app.py\", line 1439, in raise_routing_exception\nraise FormDataRoutingRedirect(request)\nFormDataRoutingRedirect: A request was sent to this URL (http://192.168.2.103:7700/v1) but a redirect was issued automatically by the routing system to \"http://192.168.2.103:7700/v1/\". The URL was defined with a trailing slash so Flask will automatically redirect to the URL with the trailing slash if it was accessed without one. Make sure to directly send your POST-request to this URL since we can't make browsers or HTTP clients redirect with form data reliably or without user interaction.\nNestableBlueprint test demo\ninit.py:\nfrom modules.warehouse.bp import warehouse\napp.register_blueprint(warehouse, url_prefix='/v1/warehouse')\nbp.py:\nfrom wh.views import bp_wh\nwarehouse = NestableBlueprint('warehouse', name)\nwarehouse.register_blueprint(bp_wh, url_prefix='/wh')\nview.ppy:\n@bp_wh.route('/', methods=['POST'])\n@oauth.common_require_oauth()\ndef test(cid, uid):\nreturn \"test\"\nhttp://192.168.2.103:7700/v1/warehouse/wh/?access_token=NX5fUsTrKR8Gi6AsrWgT0tFQAR5C7w -> successed\nhttp://192.168.2.103:7700/v1/warehouse/wh?access_token=NX5fUsTrKR8Gi6AsrWgT0tFQAR5C7w -> raise FormDataRoutingRedirect(request)", "issue_status": "Closed", "issue_reporting_time": "2014-12-17T02:01:37Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1133": {"issue_url": "https://github.com/pallets/flask/issues/1279", "issue_id": "#1279", "issue_summary": "Doc inconsistency", "issue_description": "duanchenggang commented on 15 Dec 2014\nOn http://flask.pocoo.org/docs/0.10/patterns/jquery/ there's a line saying that:\n$('selector') selects an element and lets you operate on it.\nBut there's no selector anywhere except that line.\nIt's the same on http://flask.pocoo.org/docs/dev/patterns/jquery/.", "issue_status": "Closed", "issue_reporting_time": "2014-12-15T10:18:35Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1134": {"issue_url": "https://github.com/pallets/flask/issues/1278", "issue_id": "#1278", "issue_summary": "Command 'flask' not installed and can't run from module", "issue_description": "briancline commented on 15 Dec 2014\nWhen attempting to follow the docs, I can't run any example applications because the 'flask' command-line tool doesn't get installed.\nHere's the full sequence of events using a virtualenv:\ndiscovery:~/dev/flasktest% virtualenv .venv\nNew python executable in .venv/bin/python\nInstalling setuptools, pip...done.\n\ndiscovery:~/dev/flasktest% . .venv/bin/activate\n\ndiscovery:~/dev/flasktest% pip install Flask\n\ndiscovery:~/dev/flasktest% flask\nzsh: command not found: flask\n\ndiscovery:~/dev/flasktest% ls .venv/bin\nactivate         activate.fish    easy_install     pip              pip2.7           python2\nactivate.csh     activate_this.py easy_install-2.7 pip2             python           python2.7\nAdditionally, when I try using the alternative method in the documentation via python -m flask, I get the following:\ndiscovery:~/dev/flasktest% python -m flask -a hello run --debug\n/Users/bc/dev/flasktest/.venv/bin/python: No module named flask.__main__; 'flask' is a package and cannot be directly executed\nAccording to the docs, though, this was only a problem with Python <2.7, and I'm running with 2.7.8:\ndiscovery:~/dev/flasktest% python --version\nPython 2.7.8\n\ndiscovery:~/dev/flasktest% pip --version\npip 1.5.6 from /Users/bc/dev/flasktest/.venv/lib/python2.7/site-packages (python 2.7)\n\ndiscovery:~/dev/flasktest% pip freeze\nFlask==0.10.1\nJinja2==2.7.3\nMarkupSafe==0.23\nWerkzeug==0.9.6\nitsdangerous==0.24\nwsgiref==0.1.2\nHow should I run my Flask app?", "issue_status": "Closed", "issue_reporting_time": "2014-12-15T04:03:56Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1135": {"issue_url": "https://github.com/pallets/flask/issues/1274", "issue_id": "#1274", "issue_summary": "reloader crashing", "issue_description": "uunsamp commented on 10 Dec 2014\nHi, I seem to be running into a Flask specific issue, here are the details:\noperating system:\n$ lsb_release -a\nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription:    Ubuntu 14.04.1 LTS\nRelease:    14.04\nCodename:   trusty\nstructure of package:\n$ tree pantry\npantry\n\u251c\u2500\u2500 db.py\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 models\n\u2502   \u251c\u2500\u2500 food.py\n\u2502   \u2514\u2500\u2500 __init__.py\n\u2514\u2500\u2500 run.py\nThe __init__.py files are empty.\nerror received:\n$ pwd\n/home/sam\n\n$ python3.4 -m pantry.run\n * Running on http://127.0.0.1:5000/\n * Restarting with reloader\nTraceback (most recent call last):\n  File \"/home/sam/pantry/run.py\", line 2, in <module>\n    from pantry.models.food import Food\nImportError: No module named 'pantry'\ndb.py:\nfrom flask.ext.sqlalchemy import SQLAlchemy\n\ndb = SQLAlchemy()\nfood.py\nfrom pantry.db import db\n\nclass Food(db.Model):\n\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), unique=True)\n    amount = db.Column(db.Integer, unique=False)\n\n    def __repr__(self):\n        return '<Food %r>' % self.name\nrun.py\nfrom flask import Flask, jsonify\nfrom pantry.models.food import Food\nfrom pantry.db import db\nimport json\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\ndb.init_app(app)\n\n@app.route('/food', methods=['GET'])\ndef list_food():\n    items = []\n    for food in Food.query.all():\n        item = {\n            \"name\": food.name,\n            \"amount\": food.amount,\n        }\n        items.append(item)\n    return jsonify(items)\n\nif __name__ == '__main__':\n    app.run(debug=True)", "issue_status": "Closed", "issue_reporting_time": "2014-12-10T15:50:10Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1136": {"issue_url": "https://github.com/pallets/flask/issues/1272", "issue_id": "#1272", "issue_summary": "Time for a new release ?", "issue_description": "sfermigier commented on 8 Dec 2014\nThe latest Flask release is 0.10.1, which is close to 18 months old now (https://pypi.python.org/pypi/Flask/0.10.1).\nA lot of work has been done since, including a new CLI this summer, which I find personally very useful, and many many small fixes.\nI believe that the plan was to make a 1.0 release from the current code base. I don't know if there are still blocking issues in this respect.\nIf there are blocking issues, maybe it's time to mark them as such on the GitHub issue tracker. It would also help some people, I think, if another 0.x release was made in the interim.\nI see on https://github.com/mitsuhiko/flask/blob/master/CHANGES that a 0.10.2 release was also planned with only fixes. In that case, maybe it would be time to to it (if this is still convenient) and do a 0.11 if it's not possible to do a 1.0 in the short term.", "issue_status": "Closed", "issue_reporting_time": "2014-12-08T14:26:34Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1137": {"issue_url": "https://github.com/pallets/flask/issues/1271", "issue_id": "#1271", "issue_summary": "Route parameter types", "issue_description": "ghost commented on 8 Dec 2014\n@auth.route('/users/<int:user_id>')\nIf user_id > sys.maxint then user_id is long.\nIs this actually wanted behavior? Because now you cant actually pass those forward without double checking them. Found this when I was expecting integer to be integer and passed it to straigh to peewee and got \"OverflowError: long too big to convert\".", "issue_status": "Closed", "issue_reporting_time": "2014-12-08T03:26:53Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1138": {"issue_url": "https://github.com/pallets/flask/issues/1270", "issue_id": "#1270", "issue_summary": "Snippet \u201cSign in with Steam ID\u201d has issues", "issue_description": "Contributor\nflying-sheep commented on 7 Dec 2014\nflash is not imported\nuser.nickname is defined as db.String(80) instead of db.Column(db.String(80))", "issue_status": "Closed", "issue_reporting_time": "2014-12-07T01:54:26Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1139": {"issue_url": "https://github.com/pallets/flask/issues/1267", "issue_id": "#1267", "issue_summary": "Add Bottle-like route sugar", "issue_description": "robertlagrant commented on 4 Dec 2014\nAs well as the usual\n@app.route('/login', methods=['POST'])\nCould we have the sugary treats of shortcut decorators:\n@app.post('/login')            // equivalent to the above\n\n@app.put('/article/new')    // the brave new world of REST\n\n@app.get('/login')              // synonymous with @app.route('/login')\n\n@app.getPost('/login')       // synonymous with @app.route('login', methods=['GET','POST']\nOkay, the last one might be going a bit far (although practically it would be very useful). But in general, they're very pleasant ways to add RESTful route descriptions.", "issue_status": "Closed", "issue_reporting_time": "2014-12-04T07:23:17Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1140": {"issue_url": "https://github.com/pallets/flask/issues/1266", "issue_id": "#1266", "issue_summary": "Slowloris DoS Vulnerability", "issue_description": "Contributor\nNoraCodes commented on 4 Dec 2014\nThe Flask development is vulnerable to RSnake's SlowLoris single-machine denial of service attack. I tested Flask on Ubuntu 14.04 with a Raspberry Pi Model B running Raspbian as the attacker. The DoS succeeded in under a second. This is generally caused by restrictive threading limits, see http://ha.ckers.org/slowloris/\nUnfortunately, unlike many webservers, Flask does not seem to recover gracefully when the attack ends, instead throwing broken pipe errors and no longer serving pages until restarted. This affects both debug and normal modes.\nEdit: Looks like this was discovered previously and is mentioned here: http://librelist.com/browser//flask/2014/9/2/fwd-dos-via-socketserver/", "issue_status": "Closed", "issue_reporting_time": "2014-12-04T04:25:02Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1141": {"issue_url": "https://github.com/pallets/flask/issues/1265", "issue_id": "#1265", "issue_summary": "Slash in route affects sorting/matching order", "issue_description": "nicolas-garcia commented on 3 Dec 2014\nHi !\nI'm in trouble since a moment using Flask with that point.\nI'm registring 2 url rules in a blueprint :\nclass MyClass(Blueprint):\n    def setup(self):\n        self.add_url_rule('<service>.<ext>', view_func=service_call)\n        self.add_url_rule('networks.<ext>', view_func=networks)\nI've read somewhere that the rule with the less number of parameters is taken in routing.\nBut, when I'm typing /networks.json, I'm in the service_call() function, not in networks()\nWhen I print the url_map :\nMap([ <Rule '/v1/<service>.<ext>' (HEAD, OPTIONS, GET) -> v1.service_call>,\n <Rule '/v1/networks.<ext>' (HEAD, OPTIONS, GET) -> v1.networks>,\n <Rule '/static/<filename>' (HEAD, OPTIONS, GET) -> static>])\nAfter some tests, it seems that following code is working as expected :\nclass MyClass(Blueprint):\n    def setup(self):\n        self.add_url_rule('<service>/<ext>', view_func=service_call)\n        self.add_url_rule('networks/<ext>', view_func=networks)\nSo, the dot isn't considered as a \"separator\" ?\nIs there a way to fix that ?\nThanks in advance for your help !", "issue_status": "Closed", "issue_reporting_time": "2014-12-03T15:52:20Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1142": {"issue_url": "https://github.com/pallets/flask/issues/1261", "issue_id": "#1261", "issue_summary": "Python 3.4 and PyCharm breakpoints when use_reloader=True", "issue_description": "msurdi commented on 29 Nov 2014\nRunning a flask application with debug=True (and thus, use_reloader=True) in Pycharm, breakpoints inside view functions don't work. Setting use_reloader=False works, but I miss the reloader. This works as expected when running on Python 2.7. I'm not sure if this is an issue on Flask, Werkzeug or Pycharm. Is there somebody with better insights on Werkzeug internals and how the Pycharm debugger works that could help me with this?.", "issue_status": "Closed", "issue_reporting_time": "2014-11-29T08:26:48Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1143": {"issue_url": "https://github.com/pallets/flask/issues/1259", "issue_id": "#1259", "issue_summary": "Unicode in Flask - Uploading Files", "issue_description": "nklever commented on 27 Nov 2014\nAs you mentioned in Unicode in Flas Flask is totally Unicode based. And more \"Flask just assumes that if you are sending Unicode out you want it to be UTF-8 encoded. Flask will do the encoding and setting of the appropriate headers for you.\"\nThis assumption is on my opinion be broken in uploading files, because the read method of the FileStorage io.BytesIO stream in the following code is returning an ascii string (type 'str') and not an unicode string (type 'unicode') - so you have to decode this string to the Flask Unicode Behaviour:\n@app.route('/upload', methods=['GET', 'POST'])\ndef upload_file():\n    if request.method == 'POST':\n        f = request.files['the_file']\n        content = f.stream.read()\n        if isinstance(content, str): print('content is str')\n        content = content.decode('utf-8')\n        if isinstance(content, unicode): print('content is unicode')\n        ...\nI know, that Flask don't knows if an uploaded file will be utf-8 or any other, but analogue as in the assumption above, Flask should assume utf-8 and not ascii as default encoding.", "issue_status": "Closed", "issue_reporting_time": "2014-11-27T14:39:24Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1144": {"issue_url": "https://github.com/pallets/flask/issues/1257", "issue_id": "#1257", "issue_summary": "Calling redirect() from Blueprint#before_app_request()", "issue_description": "fmoo commented on 26 Nov 2014\nCalling flask.redirect() or returning data from a callback passed to Blueprint#before_app_request() are ignored, despite the callback executing.\nFlask#before_request() and Blueprint#before_request() both appear to work as intended, redirecting and/or handling the request as appropriate.\nIt's not immediately clear from reading the inline documentation that this particular behavior is intended. The only documentation I can find on the matter is on Flask#preprocess_request(), which doesn't really touch on Blueprint behavior:\n    \"\"\"Called before the actual request dispatching and will\n    call every as :meth:`before_request` decorated function.\n    If any of these function returns a value it's handled as\n    if it was the return value from the view and further\n    request handling is stopped.\n\n    This also triggers the :meth:`url_value_processor` functions before\n    the actual :meth:`before_request` functions are called.\n    \"\"\"\nIs this a bug or just an undocumented / intended behavior?", "issue_status": "Closed", "issue_reporting_time": "2014-11-26T04:54:18Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1145": {"issue_url": "https://github.com/pallets/flask/issues/1256", "issue_id": "#1256", "issue_summary": "Confusing line in Uploading Files pattern documentation", "issue_description": "jhorneman commented on 25 Nov 2014\nflask/blob/master/docs/patterns/fileuploads.rst, after the first bit of sample code, says:\n\"Then we add a URL rule by hand to the application.\"\nBut I see no place in that code where a URL rule is added.\nExpected: Either a URL rule is added in that piece of code, or the text doesn't state that that happens.", "issue_status": "Closed", "issue_reporting_time": "2014-11-25T15:01:03Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1146": {"issue_url": "https://github.com/pallets/flask/issues/1255", "issue_id": "#1255", "issue_summary": "Sqlite3 doc page for 0.10.1 missing a function", "issue_description": "davidxia commented on 24 Nov 2014\nThis page http://flask.pocoo.org/docs/0.10/patterns/sqlite3/ references a function connect_to_database that isn't mentioned anywhere.\nLooking at 0.9 http://flask.readthedocs.org/en/0.9/patterns/sqlite3/, it looks like this snippet should be somewhere:\ndef connect_to_database():\n    return sqlite3.connect(DATABASE)", "issue_status": "Closed", "issue_reporting_time": "2014-11-24T15:04:14Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1147": {"issue_url": "https://github.com/pallets/flask/issues/1254", "issue_id": "#1254", "issue_summary": "Make the _external keyword available in the test clients url_for function", "issue_description": "jakab922 commented on 24 Nov 2014\nSo basically I would like to test redirects in my codebase which I currently do the following way:\nimport ... import app\nfrom flask import url_for\n...\n\ndef test_stuff(client):  # client is a flask.testing.FlaskClient instance\n  response = client.get(....)\n  assert response.status_code == 302\n  with app.test_request_context('/'):\n    expected_url = url_for(..., _external=True)\n  assert response.headers['Location'] == expected_url\nWhile if we had the _external keyword on the client's url_for function I could replace the last 3 lines with this(plus I wouldn't have to do the 2 imports):\nassert response.headers['Location'] == client.url_for(..., _external=True)", "issue_status": "Closed", "issue_reporting_time": "2014-11-24T14:12:05Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1148": {"issue_url": "https://github.com/pallets/flask/issues/1252", "issue_id": "#1252", "issue_summary": "hidden attribute", "issue_description": "cashaddy commented on 19 Nov 2014\ntests/test_helpers.py\n[135]\ntests/test_helpers.py\n[127]", "issue_status": "Closed", "issue_reporting_time": "2014-11-19T15:39:02Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1149": {"issue_url": "https://github.com/pallets/flask/issues/1251", "issue_id": "#1251", "issue_summary": "Flask Doc Download Link Broken", "issue_description": "Dinesh-Ramakrishnan commented on 19 Nov 2014\nThe Flask Doc Download link mentioned below are broken\nhttp://flask.pocoo.org/docs/flask-docs.pdf\nhttp://flask.pocoo.org/docs/flask-docs.zip", "issue_status": "Closed", "issue_reporting_time": "2014-11-19T08:49:27Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1150": {"issue_url": "https://github.com/pallets/flask/issues/1250", "issue_id": "#1250", "issue_summary": "Some question about attribute cls.__unicode__ in flask/_compat.py", "issue_description": "RushPu commented on 18 Nov 2014\nIn function: implement_to_string, it build a unicode attribute and pass it to lambda expression.\ndef implements_to_string(cls):\n        cls.__unicode__ = cls.__str__\n        cls.__str__ = lambda x: x.__unicode__().encode('utf-8')\n        return cls\nI think it should be\ndef implements_to_string(cls):\n        cls.__str__ = lambda x: x.__str__().encode('utf-8')\n        cls.__unicode__ = cls.__str__\n        return cls", "issue_status": "Closed", "issue_reporting_time": "2014-11-18T13:35:42Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1151": {"issue_url": "https://github.com/pallets/flask/issues/1249", "issue_id": "#1249", "issue_summary": "Need more documentation for usage of instance_path", "issue_description": "jgonggrijp commented on 14 Nov 2014\nThere is one short section on instance paths in the configuration handling doc, but nothing else. I have questions like the following:\nSuppose I want to separate the application package, the instance directory and the configuration file. In other words, I want all three to be in different locations within the filesystem and I don't want those locations to be hard-coded in the package. The WSGI script should load the application factory from the package and pass the instance path and the configuration file to the factory, after which the factory returns an application object. The application and some of the blueprints registered on it should use the instance directory for uploads but not for configuration. How should I write my code in order to realize that?\nPlease help me find the answer to the question above, and please consider providing more documentation on the instance path!", "issue_status": "Closed", "issue_reporting_time": "2014-11-14T13:56:52Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1152": {"issue_url": "https://github.com/pallets/flask/issues/1248", "issue_id": "#1248", "issue_summary": "404 on PDF version of documentation", "issue_description": "dhamaniasad commented on 12 Nov 2014\n404 on the PDF documentation.", "issue_status": "Closed", "issue_reporting_time": "2014-11-12T18:01:48Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1153": {"issue_url": "https://github.com/pallets/flask/issues/1246", "issue_id": "#1246", "issue_summary": "Flask fails to start with use_reloader=True when using absolute import", "issue_description": "mavroprovato commented on 12 Nov 2014\nI'm using Flask v0.10.1 and I have the following project structure:\ntest\n\u251c\u2500\u2500 api\n\u2502   \u251c\u2500\u2500 hello.py\n\u2502   \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 config\n\u2502   \u251c\u2500\u2500 config.py\n\u2502   \u2514\u2500\u2500 __init__.py\n\u2514\u2500\u2500 __init__.py\nThe hello.py file is:\nimport sys\nimport flask\nfrom test.config import config\n\napp = flask.Flask(__name__)\n\n@app.route('/hello')\ndef hello():\n    return config.MESSAGE\n\ndef main(argv):\n    reloader = '--reloader' in argv\n    print('Starting with reloader={}'.format(reloader))\n    app.run(host='0.0.0.0', port=8080, debug=True, use_reloader=reloader)\n\nif __name__ == '__main__':\n    main(sys.argv)\nand the config.py is simply\nMESSAGE = 'Hello!'\nWhen I run api.py with use_reloader=False (python -m test.api.hello) the server starts correctly. If I run it with use_reloader=True (python -m test.api.hello --reloader) it fails with:\nStarting with reloader=True\n * Running on http://0.0.0.0:8080/\n * Restarting with reloader\nTraceback (most recent call last):\n  File \"/home/kostas/Tmp/testproj/test/api/hello.py\", line 3, in <module>\n    from test.config import config\nImportError: No module named config", "issue_status": "Closed", "issue_reporting_time": "2014-11-12T09:22:17Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1154": {"issue_url": "https://github.com/pallets/flask/issues/1241", "issue_id": "#1241", "issue_summary": "Flask.redirect() bug?", "issue_description": "madevelopers commented on 5 Nov 2014\nI've been experimenting with Flask lately and when I came to this part of the tutorial Redirects, I encountered a type error saying:\nTypeError: redirect() takes 0 positional arguments but 1 was given\nBut when I checked the API documentation for Flask.redirect it states that it accepts 2 arguments location and code. Could this be a bug? I am using Flask 0.10.1, Python 3.4 on Windows 7.\n1", "issue_status": "Closed", "issue_reporting_time": "2014-11-05T06:40:01Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1155": {"issue_url": "https://github.com/pallets/flask/issues/1239", "issue_id": "#1239", "issue_summary": "Multiple Ports in URL when using redirect behind BrowserSync", "issue_description": "danieldiekmeier commented on 5 Nov 2014\nHey,\nthis may be a bit specific, but I hope there is a way to solve this, and I'm just unable to work it out.\nSo, my setup is like this:\nMy Flask-App is running on 127.0.0.1:5000, SERVER_NAME is set to blickpunkt.dev:5000, blickpunkt.dev is an entry in my hosts-File, it just translates to 127.0.0.1\nI'm running BrowserSync with the proxy setting set to blickpunkt.dev:5000, and I can open the browser to localhost:3000 to see everything.\nThis mostly works. I can see the site, I can click on most links.\nExcept: When I'm using redirect(url_for('some_view')), it redirects me to localhost:3000:5000/some_view. This is absurd. I looked into the response I was getting from the redirect, but the port isn't even in there. It seems to me that it should just redirect to /some_view, but it somehow puts the port the app is running on in there. If I remove the second port from the url, it works again, of course.\nCan I fix this behaviour? How can I fix it?", "issue_status": "Closed", "issue_reporting_time": "2014-11-05T00:37:30Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1156": {"issue_url": "https://github.com/pallets/flask/issues/1238", "issue_id": "#1238", "issue_summary": "url_for extension for REST Apis", "issue_description": "b14ckkn19ht commented on 5 Nov 2014\nHi,\nit would be extremely nice to have an extended or second url_for which only provides an url to the view function without the need of parameters. At the moment I have to workaround the standard url_for by making all parameters optional, which i think is not the right way around this, in order to make it usable in dynamical delivered javascript rest clients.\nbest regards\nblackknight", "issue_status": "Closed", "issue_reporting_time": "2014-11-04T21:20:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1157": {"issue_url": "https://github.com/pallets/flask/issues/1233", "issue_id": "#1233", "issue_summary": "New label 'good first bug'", "issue_description": "jrm2k6 commented on 2 Nov 2014\nSorry in advance if it is not the right place to open this kind of issue.\nI think it would be nice to have issues labelled 'good first bug' for people wanting to contribute but not knowing how to start.", "issue_status": "Closed", "issue_reporting_time": "2014-11-02T17:50:05Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1158": {"issue_url": "https://github.com/pallets/flask/issues/1232", "issue_id": "#1232", "issue_summary": "The 'download as PDF and zipped HTML' links on flask.pocoo.org are broken.", "issue_description": "adnang commented on 1 Nov 2014\nhttp://flask.pocoo.org/docs/flask-docs.pdf and http://flask.pocoo.org/docs/flask-docs.zip return 404 errors.", "issue_status": "Closed", "issue_reporting_time": "2014-11-01T17:24:30Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1159": {"issue_url": "https://github.com/pallets/flask/issues/1231", "issue_id": "#1231", "issue_summary": "flask-docs.pdf lost", "issue_description": "dust8 commented on 1 Nov 2014\nhttp://flask.pocoo.org/docs/flask-docs.pdf\nChapter 404: The Lost Page", "issue_status": "Closed", "issue_reporting_time": "2014-10-31T23:15:30Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1160": {"issue_url": "https://github.com/pallets/flask/issues/1228", "issue_id": "#1228", "issue_summary": "Doc link broken", "issue_description": "jonashaag commented on 30 Oct 2014\nhttp://flask.pocoo.org/docs/0.10/advanced_foreword/#the-status-of-python-3\nIf you do want to dive into Python 3 already have a look at the python3_support page.\n\"python3_support\" should link to http://flask.pocoo.org/docs/0.10/python3/", "issue_status": "Closed", "issue_reporting_time": "2014-10-30T14:16:43Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1161": {"issue_url": "https://github.com/pallets/flask/issues/1227", "issue_id": "#1227", "issue_summary": "teardown_{request,appcontext} not called on first request if it throws an exception when DEBUG is True", "issue_description": "mathiasson commented on 29 Oct 2014\nfrom flask import Flask\n\napp = Flask(__name__)\napp.config['DEBUG'] = True\n\n@app.teardown_appcontext\ndef td_ac(exc):\n    # This will not get called on the first request if the first request fails,\n    # that is if /err is requested. It will be called on subsequent requests,\n    # no matter if they're throwing exceptions or not.\n    print('td_ac exception: %r' % exc)\n\n@app.teardown_request\ndef td_req(exc):\n    # This will not get called on the first request if the first request fails,\n    # that is if /err is requested. It will be called on subsequent requests,\n    # no matter if they're throwing exceptions or not.\n    print('td_req exception: %r' % exc)\n\n@app.route('/ok')\ndef ok():\n    return 'ok'\n\n@app.route('/err')\ndef err():\n    raise Exception('error')\n\nif __name__ == '__main__':\n    app.run()", "issue_status": "Closed", "issue_reporting_time": "2014-10-29T09:25:14Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1162": {"issue_url": "https://github.com/pallets/flask/issues/1224", "issue_id": "#1224", "issue_summary": "Starting up a public server.", "issue_description": "savionlee commented on 27 Oct 2014\nI ran into this problem today with one of my applications trying to make it public to my local network.\nC:\\Users\\Savion\\Documents\\GitHub\\Example-Flask-Website>flask\\Scripts\\python run.\npy\nRunning on http://127.0.0.1:5000/\nRestarting with reloader\n10.101.37.124 - - [26/Oct/2014 15:51:23] \"GET / HTTP/1.1\" 404 -\nRunning on http://0.0.0.0:5000/\n10.101.37.124 - - [26/Oct/2014 15:51:38] \"GET / HTTP/1.1\" 404 -\nThe problem that i run into is the fact that this app continuously attempts to default to localhost. It is not until 2 Ctrl + C, that it goes to 0.0.0.0, then I still receive a 404 error in my browser. I do have routes that are valid when running locally. I have tried to create a new virtualenv and i still recieve the same error, I reset the firewall rule on this application. All effort that did not return rewarded.\nAny Ideas onto why my app makes an attempt to startup on the localhost first then moves over, but then returns a 404?", "issue_status": "Closed", "issue_reporting_time": "2014-10-26T21:52:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1163": {"issue_url": "https://github.com/pallets/flask/issues/1216", "issue_id": "#1216", "issue_summary": "Display Flask Server IP address", "issue_description": "rturk commented on 25 Oct 2014\nWhere cat I get info of the Server IP that flask is running on?\napp.config['SERVER_NAME'] returns None, any other options?", "issue_status": "Closed", "issue_reporting_time": "2014-10-25T00:58:33Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1164": {"issue_url": "https://github.com/pallets/flask/issues/1215", "issue_id": "#1215", "issue_summary": "Is there a Login Manager?", "issue_description": "savionlee commented on 25 Oct 2014\nI made an attempt to run a flask based site using the git repo, but recieved the error that LoginManager is not defined. I ran it again with the flask downloaded via \"pip install flask\" and it works fine.", "issue_status": "Closed", "issue_reporting_time": "2014-10-24T19:58:12Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1165": {"issue_url": "https://github.com/pallets/flask/issues/1214", "issue_id": "#1214", "issue_summary": "Switch TEMPLATES_AUTO_RELOAD to False by default", "issue_description": "Contributor\ndefuz commented on 24 Oct 2014\nI see that version 1.0 includes a lot of significant changes. It may be reasonable to change the default value of option TEMPLATES_AUTO_RELOAD to False. It will reduce mostly useless interaction with the hard drive and positive impact on performance.\nI think most apps that use Flask will never change the template files on the fly in production, so this change is not reflected in their stability. For other cases, it remains possible to explicitly set the value to True. And of course, it will not affect the debugging capabilities.\nMore explanation in related PR: #876. It's merged, but default value is set to True for backward compatibility.\n@untitaker, @kennethreitz what do you think about this?", "issue_status": "Closed", "issue_reporting_time": "2014-10-24T11:31:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1166": {"issue_url": "https://github.com/pallets/flask/issues/1212", "issue_id": "#1212", "issue_summary": "itsdangerous.py - \"ImportError: cannot import name _compare_digest\"", "issue_description": "gwgundersen commented on 24 Oct 2014\nI am trying to follow the basic Flask tutorial online and getting a weird error; I've searched for a fix online but haven't seen anyone with this issue with Flask:\nC:\\Users\\Gregory Gundersen\\Documents\\Research\\flask-test>python run.py\nTraceback (most recent call last):\n  File \"run.py\", line 2, in <module>\n    from app import app\n  File \"C:\\Users\\Gregory Gundersen\\Documents\\Research\\flask-test\\app\\__init__.py\", line 1, in <module>\n    from flask import Flask\n  File \"C:\\Python27\\lib\\site-packages\\flask\\__init__.py\", line 21, in <module>\n    from .app import Flask, Request, Response\n  File \"C:\\Python27\\lib\\site-packages\\flask\\app.py\", line 26, in <module>\n    from . import json\n  File \"C:\\Python27\\lib\\site-packages\\flask\\json.py\", line 25, in <module>\n    from itsdangerous import json as _json\n  File \"C:\\Python27\\lib\\site-packages\\itsdangerous.py\", line 14, in <module>\n    import hmac\n  File \"C:\\Python27\\lib\\hmac.py\", line 8, in <module>\n    from operator import _compare_digest as compare_digest\n  ImportError: cannot import name _compare_digest\nThoughts?", "issue_status": "Closed", "issue_reporting_time": "2014-10-23T19:16:22Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1167": {"issue_url": "https://github.com/pallets/flask/issues/1211", "issue_id": "#1211", "issue_summary": "The way Flask handles `www` and subdomains is ambiguous", "issue_description": "01walid commented on 23 Oct 2014\nHi,\nFirst, read this: \"why use www\" if you didn't already...\nThe problem\nhaving many blueprints, with only some blueprints having subdomain value set to a given subdomain, the rest of the blueprints should serve the root domain name (with the consideration of www)\nexamples:\nstatic blueprint set to serve static.example.com\ndashboard blueprint set to serve dashboard.example.com\nother blueprints, like users, frontend, messages, ..etc do not have subdomain set, and should serve www.example.com (assuming example.com auto redirect to www.example.com)\nSetting SERVER_NAME to example.com wouldn't automatically handle the www part, and requires setting www as the subdomain of the rest of the blueprints, which I find it redundant and error prone.\nSetting SERVER_NAME to www.example.com will cause other subdomain blueprints to generate static.www.example.com and dashboard.www.example.com which is not what you would expect.\nI tried using app.url_map.default_subdomain = 'www' but it had no effect at all (did I miss anything else?)\nAs a workaround, I was forced to use this:\ndef configure_blueprints(app, blueprints):\n    for blueprint in blueprints:\n        if not blueprint.subdomain:\n            blueprint.subdomain = 'www'\n        app.register_blueprint(blueprint)\nSuggested solution\nwww is a special subdomain and should be treated a bit differently and in a more explicit manner.\nadd DEFAULT_SUBDOMAIN or WWW or something similar to Flask's set of config variables/flags beside SERVER_NAME (which should be noted in documentation that SERVER_NAME should in most of the cases hold the naked domain name.)\nwhen DEFAULT_SUBDOMAIN = 'www' # for instance or WWW = True, blueprints subdomain defaults to the given value.\nextras\nWe would also add FORCE_WWW = Boolean, and when set to True would redirect the naked domain to its www one. Or make the subdomain param accept an array of value in case one would serve the same content via the naked and the non naked version of their domain name (e.g. example.com and www.example.com would serve the same set of their related blueprints.)\nThese are just some suggestions, I might be wrong or missing something, and if it's the case, please inform me.\nRelated issues to take into consideration: #998, #905, #821 .", "issue_status": "Closed", "issue_reporting_time": "2014-10-23T16:40:26Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1168": {"issue_url": "https://github.com/pallets/flask/issues/1210", "issue_id": "#1210", "issue_summary": "One namespace for route handlers", "issue_description": "ondratu commented on 21 Oct 2014\nIn Flask 10.1 there is one namespace for route handlers, so there could be one function with the same name in each module. See example\n# core.py\nfrom flask import Flask\n\napp = Flask('test')\n\n@app.route('/hello_world')\ndef hello_world():\n    return 'Hello World core!'\n#tcore.py\nimport core\n\n@core.app.route('/ahoj_svete')\ndef hello_world_():\n    return \"Ahoj svete\"\nThis example crash with \"AssertionError: View function mapping is overwriting an existing endpoint function: hello_world\". Second problem is when i use some function name which is used by flask, for example static.", "issue_status": "Closed", "issue_reporting_time": "2014-10-21T07:22:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1169": {"issue_url": "https://github.com/pallets/flask/issues/1207", "issue_id": "#1207", "issue_summary": "broken documentation links on Flask site (http://flask.pocoo.org/)", "issue_description": "mscheper commented on 16 Oct 2014\nMy colleague said 'get Flask'.\nI said 'Okay! ... wow, looks cool, and it installs so easily! ... and this site is even built on it\u2014how delightful! ... and I can download the docs as a zipped HTML\u2014how convenient! ... and... the link's broken\u2014how sloppy!' ;-)\nSince the site's supposed to be built on Flask, I thought this would be the place to report this. Please excuse me if this assumption is incorrect.\nAt http://flask.pocoo.org/, which Google took me to, clicking either of the latter links in 'Read the documentation or download as PDF and zipped HTML' took me to http://flask.pocoo.org/docs/flask-docs.pdf and http://flask.pocoo.org/docs/flask-docs.zip, respectively. Both 404ed.", "issue_status": "Closed", "issue_reporting_time": "2014-10-15T23:52:18Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1170": {"issue_url": "https://github.com/pallets/flask/issues/1205", "issue_id": "#1205", "issue_summary": "Read documentation in pdf does not work", "issue_description": "yasoob commented on 14 Oct 2014\nRead documentation in pdf button on the home page does not work. The same is the case with \"zipped html\"\nhomepage: http://flask.pocoo.org/\nPDF: http://flask.pocoo.org/docs/flask-docs.pdf (doesn't work)\nZipped HTML: http://flask.pocoo.org/docs/flask-docs.zip (doesn't work)", "issue_status": "Closed", "issue_reporting_time": "2014-10-14T12:20:16Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1171": {"issue_url": "https://github.com/pallets/flask/issues/1202", "issue_id": "#1202", "issue_summary": "Large Dictionaries Not Released From Memory", "issue_description": "Contributor\npawl commented on 13 Oct 2014\nExample: https://gist.github.com/pawl/8067c988b1cbfd48b855\nI'm using Flask==0.10.1 and python 2.7.4.\nIs there a way to release the large dictionary from memory after the return?", "issue_status": "Closed", "issue_reporting_time": "2014-10-13T16:31:53Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1172": {"issue_url": "https://github.com/pallets/flask/issues/1201", "issue_id": "#1201", "issue_summary": "How do I only enable cookies if the user logs in?", "issue_description": "ghost commented on 11 Oct 2014\nI have a Flask app that runs on https behind nginx. The app also uses flask-login to log users in.\nI have set my app.secret_key and have 3 views:\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    form = Login()\n    if form.validate_on_submit():\n        # log the user in...\n        ......\n        return redirect(request.args.get('next') or '/')\n    return render_template('login.html', form=form)\n\n@login_required\n@app.route('/logged_in')\ndef logged_in():\n    return render_template('logged_in.html')\nThe vast, vast majority of my users do not log in (and don't have a user account) and some are complaining that we are setting cookies on them. I can confirm this behavior in my browser (Firefox) when I delete the cookie, visit \"https://www.example.com\" and see that the cookie gets reset.\nHow do I change the behavior so that the cookie only gets set if the user logs in?", "issue_status": "Closed", "issue_reporting_time": "2014-10-11T06:17:26Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1173": {"issue_url": "https://github.com/pallets/flask/issues/1200", "issue_id": "#1200", "issue_summary": "MAX_CONTENT_LENGHT not being respected with JSON payload", "issue_description": "ispmarin commented on 9 Oct 2014\nSetting the MAX_CONTENT_LENGHT variable does nothing to limit a json payload larger than the set limit. We are using Flask Classy to write the post method and Flask to handle the requests.\n<Config {'JSON_AS_ASCII': True, 'BASIC_AUTH_REALM': '', 'MONGO_UNIX_SOCKET': '/tmp/mongodb-27017.sock', 'REC_SYS_API_PORT': 5000, 'SQLALCHEMY_POOL_RECYCLE': None, 'MONGO_PORT': 27017, 'PROJECT_ROOT': '/home/project', 'SQLALCHEMY_POOL_TIMEOUT': None, 'SQLALCHEMY_RECORD_QUERIES': None, 'SESSION_COOKIE_DOMAIN': None, 'SESSION_COOKIE_NAME': 'session', 'DB_NAME': 'test_tracks', 'TRACK_ACTIONS': ['apply'], 'SQLALCHEMY_NATIVE_UNICODE': None, 'MAX_CONTENT_LENGTH': 65536, 'PERMANENT_SESSION_LIFETIME': datetime.timedelta(31), 'SQLALCHEMY_POOL_SIZE': None, 'SQLALCHEMY_MAX_OVERFLOW': None, 'TRAP_HTTP_EXCEPTIONS': False, 'BASIC_AUTH_FORCE': False, 'PRESERVE_CONTEXT_ON_EXCEPTION': None, 'SQLALCHEMY_ECHO': False, 'SESSION_COOKIE_PATH': None, 'LOGGER_NAME': 'rtr', 'MONGO_USE_SOCKET': True, 'SECRET_KEY': None, 'APP_NAME': 'trkc', 'SERVER_NAME': None, 'PREFERRED_URL_SCHEME': 'http', 'TESTING': False, 'MONGODB_SETTINGS': {'DB': 'test_tracks'}, 'USE_X_SENDFILE': False, 'SQLALCHEMY_DATABASE_URI': 'sqlite:////tmp/test.db', 'SESSION_COOKIE_SECURE': False, 'SEND_FILE_MAX_AGE_DEFAULT': 43200, 'SQLALCHEMY_BINDS': {'logsite': 'sqlite:////tmp/test_logsite.db'}, 'DEBUG': False, 'SQLALCHEMY_COMMIT_ON_TEARDOWN': False, 'APPLICATION_ROOT': None, 'JSONIFY_PRETTYPRINT_REGULAR': True, 'PROPAGATE_EXCEPTIONS': None, 'TRAP_BAD_REQUEST_ERRORS': False, 'JSON_SORT_KEYS': True, 'SESSION_COOKIE_HTTPONLY': True, 'MONGO_HOST': 'localhost'}>\nCheers", "issue_status": "Closed", "issue_reporting_time": "2014-10-09T13:26:06Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1174": {"issue_url": "https://github.com/pallets/flask/issues/1199", "issue_id": "#1199", "issue_summary": "make runs superfluous tests when using a virtualenv", "issue_description": "slunk commented on 9 Oct 2014\nTests unrelated to flask run when I follow the \"living on the edge\" setup instructions (http://flask.pocoo.org/docs/0.10/installation/#living-on-the-edge) and run make. This was especially confusing for someone like me who is new to the project because some of these tests fail.\nThey're located in path/to/flask/venv/lib/python2.7/site-packages/setuptools/tests/\nMy setup\nos: osx 10.9.5\npython: 2.7.5\nvirtualenv: 1.11.6\npytest: 2.6.3\nPotential fix\ndiff --git a/Makefile b/Makefile\nindex e1835e8..3e1473d 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -3,7 +3,8 @@\n all: clean-pyc test\n\n test:\n-       py.test\n+       py.test examples\n+       py.test tests\n\n tox-test:\n        tox", "issue_status": "Closed", "issue_reporting_time": "2014-10-08T20:56:02Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1175": {"issue_url": "https://github.com/pallets/flask/issues/1198", "issue_id": "#1198", "issue_summary": "Flask accessing and editing config data", "issue_description": "serkandaglioglu commented on 6 Oct 2014\ni am using wtforms with flask framework. when i use DateTimeField i add format parameter.\nBut datetime format is coming from user which is logged in\nforms.py\n    from flask import g\n    from wtforms import *\n    import wtforms.validators as v\n    from flask.ext.babel import lazy_gettext as _\n    from flask.ext.babel import npgettext as _n\n\n    from app.app import app\n    from app.base_forms import *\n    from app.modules.post.models import *\n\n    class PostForm(BaseForm):\n        post_date = DateTimeField(\"Post Date\", format = app.config.get(\"DATETIME_FORMAT\"), validators =[v.Required(message=_(\"Post date is required\"))]  )\ni set value of app.config.get(\"DATETIME_FORMAT\") on before request\n    @app.before_request\n    def before_request():\n        if g.user.language == \"tr\"\n            app.config[\"DATETIME_FORMAT\"] = \"%d.%m.%Y %H:%M\"\n        else:\n            app.config[\"DATETIME_FORMAT\"] = \"%m-%d-%Y %H:%M\"\nmy application structure\n    /app\n        /modules\n            /post\n                /controllers.py\n                /forms.py\n                /models.py\n        /app.py\n    /run.py\ncontent of /app/app.py\n    from flask import Flask, url_for, g, request, redirect, render_template\n    app = Flask(__name__)\n    app.config.from_object('app.config.config.ConfigDevelopment')\n\n    # Import Modules\n    from modules.post.controllers.admin import module as modulePostAdmin\n    app.register_blueprint(modulePostAdmin)\n\n    # other codes here\n\n    @app.before_request\n    def before_request():\n        if g.user.language == \"tr\"\n            app.config[\"DATETIME_FORMAT\"] = \"%d.%m.%Y %H:%M\"\n        else:\n            app.config[\"DATETIME_FORMAT\"] = \"%m-%d-%Y %H:%M\"\ncontent of /run.py\n    from app.app import app\n    app.run(host='localhost', port=8080, debug=True)\nwhen i start app it throws that error \"KeyError: 'DATETIME_FORMAT'\". i think forms.py load before request so it throws keyError.\nThis problem is not only about wtforms, i will get this problem in every codes which out of context. What is the correct way for solving this problem.", "issue_status": "Closed", "issue_reporting_time": "2014-10-06T17:09:40Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1176": {"issue_url": "https://github.com/pallets/flask/issues/1197", "issue_id": "#1197", "issue_summary": "pdf documentation", "issue_description": "MohammedAttya commented on 6 Oct 2014\nI get \"Chapter 404: The Lost Page\" message while I click to download the pdf documentation", "issue_status": "Closed", "issue_reporting_time": "2014-10-06T06:22:13Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1177": {"issue_url": "https://github.com/pallets/flask/issues/1194", "issue_id": "#1194", "issue_summary": "wtforms get all errors as list", "issue_description": "serkandaglioglu commented on 30 Sep 2014\ni am trying to get all errors as list.\ni have BaseForm\nfrom flask.ext.wtf import Form\n\nclass BaseForm(Form):\n    @property\n    def error_list(self):\n        _errors = []\n        for fieldName, errorMessages in self.errors.iteritems():\n            _errors.extend(errorMessages)\n        return _errors\nmy form class\nfrom app.base_forms import *\nfrom wtforms import StringField, TextField, PasswordField\nimport wtforms.validators as validators\n\nclass LoginForm(BaseForm):\n    email    = StringField('Email Address', [ validators.Email(), validators.Required(message='Forgot your email address?')])\n    password = PasswordField('Password', [ validators.Required(message='Must provide a password. ')])\ndef login(self):\n    form = LoginForm()\n    print  form.error_list\n    print form.errors\n    ...\nthis output form.errors\n    \"email\": [\n      \"Forgot your email address?\"\n    ], \n    \"password\": [\n      \"Must provide a password. \"\n    ]\nthis output form.error_list\n[\n    \"Must provide a password. \", \n]\nNormally form has two errors but form.error_list return only one error that \"Must provide a password.\"\nwhat is the wrong.\nHow can i solve this problem?", "issue_status": "Closed", "issue_reporting_time": "2014-09-30T11:39:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1178": {"issue_url": "https://github.com/pallets/flask/issues/1193", "issue_id": "#1193", "issue_summary": "PDF and HTML docs not available on homepage", "issue_description": "arthurhammer commented on 29 Sep 2014\nThe PDF and HTML linked on Flask's homepage cannot be found (404) .", "issue_status": "Closed", "issue_reporting_time": "2014-09-29T09:41:30Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1179": {"issue_url": "https://github.com/pallets/flask/issues/1190", "issue_id": "#1190", "issue_summary": "Blueprint template not found", "issue_description": "serkandaglioglu commented on 27 Sep 2014\nI am trying to do that example http://flask.pocoo.org/docs/0.10/blueprints/#templates .\nMy application structure\n/app\n    /modules\n        /module_test\n            controllers.py\n            /templates\n                 /test\n                      index.html\n    /templates\n/app/modules/module_test/controllers.py\nmodule = Blueprint('test', \"test\",  url_prefix='/test', template_folder='templates' )\n\nclass TestController(PublicController, View):\n    methods = [\"GET\", \"POST\"]\n    viewData = {}\n\n    def __init__(self):\n        super(TestController, self).__init__()\n\n    def dispatch_request(self):\n        self.viewData[\"title\"] = \"Test\"\n        return render_template( \"test/index.html\", **self.viewData )\n\n\nmodule.add_url_rule('/', view_func=TestController.as_view('test'))\nthe error is \"jinja2.exceptions.TemplateNotFound TemplateNotFound: test/index.html\".\ni put index.html in /app/templates/test/index.html and i tried with flask classy it worked.\ni want to put template files in blueprint that \"/app/modules/module_test/templates\". How can i solve this problem?", "issue_status": "Closed", "issue_reporting_time": "2014-09-27T11:46:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1180": {"issue_url": "https://github.com/pallets/flask/issues/1189", "issue_id": "#1189", "issue_summary": "Test failures with pypy2.4", "issue_description": "domenkozar commented on 26 Sep 2014\n======================================================================\nERROR: test_timelines (minitwit_tests.MiniTwitTestCase)\nMake sure that timelines work\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/tmp/nix-build-pypy2.4-flask-0.10.1.drv-0/Flask-0.10.1/flask/testsuite/../../examples/minitwit/minitwit_tests.py\", line 109, in test_timelines\n    self.register_and_login('foo', 'default')\n  File \"/tmp/nix-build-pypy2.4-flask-0.10.1.drv-0/Flask-0.10.1/flask/testsuite/../../examples/minitwit/minitwit_tests.py\", line 55, in register_and_login\n    return self.login(username, password)\n  File \"/tmp/nix-build-pypy2.4-flask-0.10.1.drv-0/Flask-0.10.1/flask/testsuite/../../examples/minitwit/minitwit_tests.py\", line 50, in login\n    }, follow_redirects=True)\n  File \"/nix/store/hdq8nfhsjv4rlkzp76c6zwq9vb37his2-pypy2.4-werkzeug-0.9.4/lib/pypy2.4/site-packages/werkzeug/test.py\", line 771, in post\n    return self.open(*args, **kw)\n  File \"/tmp/nix-build-pypy2.4-flask-0.10.1.drv-0/Flask-0.10.1/flask/testing.py\", line 108, in open\n    follow_redirects=follow_redirects)\n  File \"/nix/store/hdq8nfhsjv4rlkzp76c6zwq9vb37his2-pypy2.4-werkzeug-0.9.4/lib/pypy2.4/site-packages/werkzeug/test.py\", line 735, in open\n    response = self.run_wsgi_app(environ, buffered=buffered)\n  File \"/nix/store/hdq8nfhsjv4rlkzp76c6zwq9vb37his2-pypy2.4-werkzeug-0.9.4/lib/pypy2.4/site-packages/werkzeug/test.py\", line 658, in run_wsgi_app\n    rv = run_wsgi_app(self.application, environ, buffered=buffered)\n  File \"/nix/store/hdq8nfhsjv4rlkzp76c6zwq9vb37his2-pypy2.4-werkzeug-0.9.4/lib/pypy2.4/site-packages/werkzeug/test.py\", line 854, in run_wsgi_app\n    app_iter = app(environ, start_response)\n  File \"/tmp/nix-build-pypy2.4-flask-0.10.1.drv-0/Flask-0.10.1/flask/app.py\", line 1836, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/tmp/nix-build-pypy2.4-flask-0.10.1.drv-0/Flask-0.10.1/flask/app.py\", line 1820, in wsgi_app\n    response = self.make_response(self.handle_exception(e))\n  File \"/tmp/nix-build-pypy2.4-flask-0.10.1.drv-0/Flask-0.10.1/flask/app.py\", line 1403, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/tmp/nix-build-pypy2.4-flask-0.10.1.drv-0/Flask-0.10.1/flask/app.py\", line 1817, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/tmp/nix-build-pypy2.4-flask-0.10.1.drv-0/Flask-0.10.1/flask/app.py\", line 1477, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"/tmp/nix-build-pypy2.4-flask-0.10.1.drv-0/Flask-0.10.1/flask/app.py\", line 1381, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/tmp/nix-build-pypy2.4-flask-0.10.1.drv-0/Flask-0.10.1/flask/app.py\", line 1475, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"/tmp/nix-build-pypy2.4-flask-0.10.1.drv-0/Flask-0.10.1/flask/app.py\", line 1461, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"/tmp/nix-build-pypy2.4-flask-0.10.1.drv-0/Flask-0.10.1/flask/testsuite/../../examples/minitwit/minitwit.py\", line 201, in login\n    request.form['password']):\n  File \"/nix/store/hdq8nfhsjv4rlkzp76c6zwq9vb37his2-pypy2.4-werkzeug-0.9.4/lib/pypy2.4/site-packages/werkzeug/security.py\", line 224, in check_password_hash\n    return safe_str_cmp(_hash_internal(method, salt, password)[0], hashval)\n  File \"/nix/store/hdq8nfhsjv4rlkzp76c6zwq9vb37his2-pypy2.4-werkzeug-0.9.4/lib/pypy2.4/site-packages/werkzeug/security.py\", line 117, in safe_str_cmp\n    return _builtin_safe_str_cmp(a, b)\nTypeError: unsupported operand types(s) or combination of types: 'str' and 'unicode'\n\n----------------------------------------------------------------------", "issue_status": "Closed", "issue_reporting_time": "2014-09-26T15:44:12Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1181": {"issue_url": "https://github.com/pallets/flask/issues/1188", "issue_id": "#1188", "issue_summary": "[Website] Documentation PDF and zipped HTML download links return 404", "issue_description": "kz26 commented on 26 Sep 2014\nhttp://flask.pocoo.org/docs/flask-docs.pdf\nhttp://flask.pocoo.org/docs/flask-docs.zip", "issue_status": "Closed", "issue_reporting_time": "2014-09-25T21:39:34Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1182": {"issue_url": "https://github.com/pallets/flask/issues/1182", "issue_id": "#1182", "issue_summary": "Deprecate and remove APIs", "issue_description": "Contributor\nmethane commented on 19 Sep 2014 \u2022\nedited by davidism\nWhen making Flask 1.0, could you remove some old APIs?\ndeprecate flask.ext, see #1484 and #1135\nremove modules, see #1204 and #861\ndeprecate *_session()\nAllow all objects in JSON, see #673, #1177, #248, #170, #510\ndeprecate request.json, see #1206 and #1204\nremove support for name guessing from send_file #1427", "issue_status": "Closed", "issue_reporting_time": "2014-09-19T13:35:12Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1183": {"issue_url": "https://github.com/pallets/flask/issues/1180", "issue_id": "#1180", "issue_summary": "Modify docs for new testsuite", "issue_description": "MikeiLL commented on 18 Sep 2014\nI tried viewing some of the bundled docs with https://www.tele3.cz/jbar/rest/render.py and restview. Both returned errors.\nAre there docs somewhere that would apply to latest version of test_flaskr which uses pytest?\nThis one uses unittest.", "issue_status": "Closed", "issue_reporting_time": "2014-09-18T01:04:13Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1184": {"issue_url": "https://github.com/pallets/flask/issues/1179", "issue_id": "#1179", "issue_summary": "Print line after server is started", "issue_description": "k-bx commented on 18 Sep 2014\nI know this might sound silly, but it's actually quite a problem for me.\nI have integration tests that test our infrastructure, which contains multiple web services and daemons. I wrote a small wrapper that, inside a test, when you try to access a web service, would launch it. How it works for our non-python web apps is that it launches server process and waits for a regexp that it would produce, containing \"listening on ...\" phrase. That would mean it's ready to serve requests.\nCurrently, our flask app prints this output when you launch app.py:\n(tldr-env)\u279c  tldr-mediabuyer git:(staging) \u2717 python app.py\n * Running on http://127.0.0.1:5000/\n * Restarting with reloader\nUnfortunately, neither of these means app actually listens on those ports (it takes more than a second to actually serve requests).\nSo, my proposal is to only print \"Running on ...\" when you actually accept requests. Same for \"Restarting with reloader\".\nI hope idea is clear and not too weird :) Thanks!\np.s.: when I said \"quite a problem\" I didn't mean it's hard to solve. It can be \"solved\" in multiple ways, but I would prefer this one as one that doesn't require you to either \"sleep\" or \"curl some url in a loop\" solutions.", "issue_status": "Closed", "issue_reporting_time": "2014-09-17T19:38:17Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1185": {"issue_url": "https://github.com/pallets/flask/issues/1177", "issue_id": "#1177", "issue_summary": "Should jsonify() throw an exception when provided a list?", "issue_description": "jgehrcke commented on 16 Sep 2014\nConsider jsonify()cation of a dictionary contained in a list:\nprint flask.__version__\nprint repr(flask.jsonify([{\"a\": 1, \"b\": 2}]).data)\nWith the following output:\n0.10.1\n'{\\n  \"a\": \"b\"\\n}'\njsonify() has -- without complaining -- mangled the data into something really not useful: The original dictionary values are gone, and the \"b\" key suddenly is a value.\nI appreciate that top-level array elements are not allowed to be created in Flask's jsonify() implementation (http://flask.pocoo.org/docs/0.10/security/#json-security). Also, there are for sure straight-forward strategies for solving this in application code, for example by wrapping the list in a dictionary: jsonify({\"items\": collection}).\nHowever, in the Python world we do not find it very often that an entity accepts invalid input and produces garbled output without complaining. Also, it looks like jsonify() once raised an exception when provided a list (at least in 2011 it did raise a TypeError: #170).\nShould we raise an exception again or is the current behavior carefully designed with a focus on performance? I mean, it is unlikely that this data mangling ends up in a production environment (a developer really should realize that jsonify() produces garbage in this case , like I did).", "issue_status": "Closed", "issue_reporting_time": "2014-09-16T15:18:51Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1186": {"issue_url": "https://github.com/pallets/flask/issues/1174", "issue_id": "#1174", "issue_summary": "docs/_themes/.git is in the tarball at PyPi", "issue_description": "thiderman commented on 13 Sep 2014\nI was experimenting with making a clean build of a project of mine that includes flask 0.10.1. I was going to run git clean -fdx to get a pristine clean environment to build from, but it crashes:\nthiderman@dragonisle ~/git/piper venv:piper(master:+6) \n> git clean -fdx -n \nWould remove .coverage\nWould remove .tox/\nWould remove argparse-1.2.1-py2.6.egg\nWould remove bin/\nfatal: Not a git repository: /Users/mitsuhiko/Development/flask/.git/modules/docs/_themes\nIf I remove docs/_themes/.git it works. git autodetects it and thinks that it's a submodule, and since my computer is not @mitsuhiko's Mac machine it kinda fails. :P\nCould this file be excluded from the tarball? I can't really see that it serves a purpose, and it breaks my project in an unexpected way.", "issue_status": "Closed", "issue_reporting_time": "2014-09-12T20:22:21Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1187": {"issue_url": "https://github.com/pallets/flask/issues/1173", "issue_id": "#1173", "issue_summary": "python3 -mpdb myflaskapp.py fon ubuntu 14.04", "issue_description": "davidabarrett commented on 10 Sep 2014\nOn ubuntu 14.04, python3 -mpdb ... raises exception after hitting\n'c' to run on the 'import flask' statement:\nTraceback (most recent call last):\nFile \"/usr/lib/python3.4/importlib/util.py\", line 95, in find_spec\nspec = module.spec\nAttributeError: 'module' object has no attribute 'spec'\nWorks fine for python 2.7 though.\nHere is the myflaskapp.py:\nimport flask\napp = flask.Flask(name)\n@app.route('/')\ndef root():\nreturn ('root')\nif name == 'main':\napp.run(debug=True)", "issue_status": "Closed", "issue_reporting_time": "2014-09-10T17:17:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1188": {"issue_url": "https://github.com/pallets/flask/issues/1171", "issue_id": "#1171", "issue_summary": "Documentation on flask.pocoo.org is missing", "issue_description": "ddrone commented on 8 Sep 2014\nThis link from main page gives 404 error: http://flask.pocoo.org/docs/flask-docs.pdf", "issue_status": "Closed", "issue_reporting_time": "2014-09-08T16:22:14Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1189": {"issue_url": "https://github.com/pallets/flask/issues/1169", "issue_id": "#1169", "issue_summary": "BUG in \"send_file\" and \"send_from_directory\"", "issue_description": "baisk commented on 4 Sep 2014\nL496 in helpers.py\nIf i use flask as a package instead of a module, I want to expose a file which is not in package.\nchecks in send_from_directory will be passed because of rel path. However, in send_file, added abs folder, it occur an error.", "issue_status": "Closed", "issue_reporting_time": "2014-09-04T10:38:47Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1190": {"issue_url": "https://github.com/pallets/flask/issues/1168", "issue_id": "#1168", "issue_summary": "function flash() not working with redirect()", "issue_description": "robin92 commented on 4 Sep 2014\nHere's the example:\nfrom flask import Flask, flash, get_flashed_messages, redirect, url_for\n\napp = Flask(__name__)\napp.secret_key = 'some_secret'\n\n@app.route('/')\ndef index():\n    app.logger.debug(get_flashed_messages())\n    return 'Hello world'\n\n@app.route('/generate/success')\ndef page_success():\n    flash('This message will be visible!')\n    return str(get_flashed_messages())\n\n@app.route('/generate/fail',)\ndef page_fail():\n    flash('This message will be lost!')\n    return redirect(url_for('index'))\n\nif __name__ == \"__main__\":\n    app.run()\nAs you can see flash() fails when using redirect. Tried with SERVER_NAME both set and unset. Using Flask==0.10.1.\nPlease resolve the issue ASAP since it's a top blocker in my project.", "issue_status": "Closed", "issue_reporting_time": "2014-09-04T06:29:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1191": {"issue_url": "https://github.com/pallets/flask/issues/1167", "issue_id": "#1167", "issue_summary": "Randomly Unresponsive After Strange Character Requests", "issue_description": "whatsdis commented on 4 Sep 2014\nI use a flask server to serve static files from a server but once in a while the server becomes completely unresponsive, downloading a file keeps loading but never downloads. When I opened up the terminal, I found some weird requests, I hit CTRL + C and the server immediately becomes responsive again and downloads continue. This happens every so often and I have no idea what's causing this and how to prevent it from freezing my flask server, is this someone trying to hack?\nuser@server:~/worker# python server.py\n * Running on http://0.0.0.0:80/\n93.134.13.318 - - [03/Sep/2014 02:07:18] code 400, message Bad request syntax ('\\x00')\n93.134.13.318 - - [03/Sep/2014 02:07:18] \"\" 400 -\n93.134.13.318 - - [03/Sep/2014 02:07:19] \"GET http://httpheader.net HTTP/1.1\" 404 -\n93.134.13.318 - - [03/Sep/2014 02:07:40] code 400, message Bad request syntax ('\\x04\\x01\\x00P\\xc6\\xce\\x0eu0\\x00')\n93.174.93.218 - - [03/Sep/2014 02:07:40] \"P\ufffd\ufffdu0\" 400 -\n^C----------------------------------------\nException happened during processing of request from ('93.174.93.218 ', 45082)\nTraceback (most recent call last):\n  File \"/usr/lib/python2.7/SocketServer.py\", line 284, in _handle_request_noblock\n    self.process_request(request, client_address)\n  File \"/usr/lib/python2.7/SocketServer.py\", line 310, in process_request\n    self.finish_request(request, client_address)\n  File \"/usr/lib/python2.7/SocketServer.py\", line 323, in finish_request\n    self.RequestHandlerClass(request, client_address, self)\n  File \"/usr/lib/python2.7/SocketServer.py\", line 638, in __init__\n    self.handle()\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 200, in handle\n    rv = BaseHTTPRequestHandler.handle(self)\n  File \"/usr/lib/python2.7/BaseHTTPServer.py\", line 340, in handle\n    self.handle_one_request()\n  File \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 231, in handle_one_request\n    self.raw_requestline = self.rfile.readline()\n  File \"/usr/lib/python2.7/socket.py\", line 447, in readline\n    data = self._sock.recv(self._rbufsize)\nKeyboardInterrupt\n----------------------------------------\n42.36.63.90 - - [03/Sep/2014 03:21:20] \"GET / HTTP/1.1\" 404 -\n63.63.193.195 - - [03/Sep/2014 03:21:20] \"GET / HTTP/1.1\" 404 -", "issue_status": "Closed", "issue_reporting_time": "2014-09-03T20:37:59Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1192": {"issue_url": "https://github.com/pallets/flask/issues/1166", "issue_id": "#1166", "issue_summary": "run linux command in flask app", "issue_description": "wujiandong commented on 3 Sep 2014\ni need to run '/etc/init.d/httpd start' in my flask app(port is 443),i used subprocess.Popen and apache can normal start,but i found strange phenomenon,i use lsof -i:443, below is output\uff1a\npython 10549 root 5u IPv4 25638 0t0 TCP *:443 (LISTEN)\nhttpd 10559 root 5u IPv4 25638 0t0 TCP *:443 (LISTEN)\nhttpd 10559 root 6u IPv4 25518 0t0 TCP kxddz_matchserver1:443->192.168.239.1:54365 (CLOSE_WAIT)\nhttpd 10561 apache 5u IPv4 25638 0t0 TCP *:443 (LISTEN)\nhttpd 10561 apache 6u IPv4 25518 0t0 TCP kxddz_matchserver1:443->192.168.239.1:54365 (CLOSE_WAIT)\nhttpd 10562 apache 5u IPv4 25638 0t0 TCP *:443 (LISTEN)\nhttpd 10562 apache 6u IPv4 25518 0t0 TCP kxddz_matchserver1:443->192.168.239.1:54365 (CLOSE_WAIT)\nhttpd 10563 apache 5u IPv4 25638 0t0 TCP *:443 (LISTEN)\nhttpd 10563 apache 6u IPv4 25518 0t0 TCP kxddz_matchserver1:443->192.168.239.1:54365 (CLOSE_WAIT)\nhttpd 10564 apache 5u IPv4 25638 0t0 TCP *:443 (LISTEN)\nhttpd 10564 apache 6u IPv4 25518 0t0 TCP kxddz_matchserver1:443->192.168.239.1:54365 (CLOSE_WAIT)\nhttpd 10565 apache 5u IPv4 25638 0t0 TCP *:443 (LISTEN)\nhttpd 10565 apache 6u IPv4 25518 0t0 TCP kxddz_matchserver1:443->192.168.239.1:54365 (CLOSE_WAIT)\nhttpd 10566 apache 5u IPv4 25638 0t0 TCP *:443 (LISTEN)\nhttpd 10566 apache 6u IPv4 25518 0t0 TCP kxddz_matchserver1:443->192.168.239.1:54365 (CLOSE_WAIT)\nhttpd 10567 apache 5u IPv4 25638 0t0 TCP *:443 (LISTEN)\nhttpd 10567 apache 6u IPv4 25518 0t0 TCP kxddz_matchserver1:443->192.168.239.1:54365 (CLOSE_WAIT)\nhttpd 10568 apache 5u IPv4 25638 0t0 TCP *:443 (LISTEN)\nhttpd 10568 apache 6u IPv4 25518 0t0 TCP kxddz_matchserver1:443->192.168.239.1:54365 (CLOSE_WAIT)\nthis why\uff1f", "issue_status": "Closed", "issue_reporting_time": "2014-09-03T05:39:13Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1193": {"issue_url": "https://github.com/pallets/flask/issues/1159", "issue_id": "#1159", "issue_summary": "Homepage: Wrong PDF and zipped HTML Link", "issue_description": "Hocdoc commented on 28 Aug 2014\nThe links on the homepage for the documentation PDF http://flask.pocoo.org/docs/flask-docs.pdf or zipped HTML file http://flask.pocoo.org/docs/flask-docs.zip are not valid (-> chapter 404).", "issue_status": "Closed", "issue_reporting_time": "2014-08-28T12:54:01Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1194": {"issue_url": "https://github.com/pallets/flask/issues/1157", "issue_id": "#1157", "issue_summary": "Add Click to Readme", "issue_description": "Siecje commented on 26 Aug 2014\nUnder What do I need? click should also be listed.", "issue_status": "Closed", "issue_reporting_time": "2014-08-26T18:05:31Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1195": {"issue_url": "https://github.com/pallets/flask/issues/1155", "issue_id": "#1155", "issue_summary": "`pip install flask==dev` does not work.", "issue_description": "AlexFrazer commented on 25 Aug 2014\nI followed the documentation found on flask's site. What I was looking to do was pip install Flask==dev. Received the following traceback:\n(burddy)crow@ burddy (master)$ pip install Flask==dev\nDownloading/unpacking Flask==dev\n  Could not find a version that satisfies the requirement Flask==dev (from versions: 0.1, 0.10.1, 0.10, 0.2, 0.3.1, 0.3, 0.4, 0.5.1, 0.5.2, 0.5, 0.6.1, 0.6, 0.7.1, 0.7.2, 0.7, 0.8.1, 0.8, 0.9)\nCleaning up...\nNo distributions matching the version for Flask==dev", "issue_status": "Closed", "issue_reporting_time": "2014-08-25T17:23:47Z", "fixed_by": "#1160", "pull_request_summary": "Don't mention Flask dev releases anymore", "pull_request_description": "Member\nuntitaker commented on 28 Aug 2014\nFix #1155", "pull_request_status": "Merged", "issue_fixed_time": "2014-08-28T14:12:27Z", "files_changed": [["11", "docs/installation.rst"]]}, "1196": {"issue_url": "https://github.com/pallets/flask/issues/1154", "issue_id": "#1154", "issue_summary": "consider adding CC-BY license for documentation only", "issue_description": "eshellman commented on 20 Aug 2014\nMany channels for distribution of documentation (Internet Archive, most libraries) find it easier to distribute the documentation if it is Creative Commons (CC) licensed - they aren't able to spend the time to read a custom license, even if it's just a modified Apache License. But for documentation only, there's really no difference between the Flask license and CC-BY http://creativecommons.org/licenses/by/4.0/", "issue_status": "Closed", "issue_reporting_time": "2014-08-19T22:54:35Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1197": {"issue_url": "https://github.com/pallets/flask/issues/1152", "issue_id": "#1152", "issue_summary": "\"after_response\"?", "issue_description": "matthewrobertbell commented on 18 Aug 2014\nI am curious why there isn't an after_response function, in the spirit of after_request. There are often tasks that can take a while and don't need to be 100% reliable, such as writing statistics to a data store, or hitting a third party API, and don't affect the response object. It'd therefore be nice to be able to do this work after the response object has been sent to the user, with an after_response function. This could be done with a task queue, but for a lot of projects this vastly increases complexity.", "issue_status": "Closed", "issue_reporting_time": "2014-08-18T09:52:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1198": {"issue_url": "https://github.com/pallets/flask/issues/1151", "issue_id": "#1151", "issue_summary": "Documention for \"The Application Context\" is confusing", "issue_description": "Ceasar commented on 15 Aug 2014\nSee: http://flask.pocoo.org/docs/appcontext/\nThere seems to be two main issues with this page.\nI'm not sure how to say it, but the prose is vague and lacks focus. The effect in any case is that the concepts are difficult to grasp. [1] [2] [3]\nSyntax errors and wordiness [4] [5] [6]\n[1] \"The application setup state in which the application implicitly is on the module level.\"\n[2] \"In contrast, during request handling, a couple of other rules exist\"\n[3] \"There is a third state which is sitting in between a little bit.\"\n[4] \"The main reason for the application\u2019s context existence is that in the past a bunch of functionality was attached to the request context in lack of a better solution. Since one of the pillar\u2019s of Flask\u2019s design is that you can have more than one application in the same Python process.\"\n[5] \"To make an application context there are two ways.\"\n[6] \"The context is typically used to cache resources on there that need to be created on a per-request or usage case.\"\n13", "issue_status": "Closed", "issue_reporting_time": "2014-08-15T16:48:13Z", "fixed_by": "#2685", "pull_request_summary": "rework context docs", "pull_request_description": "Member\ndavidism commented on 9 Apr 2018\ncloses #1151\nMostly keeps the same sections and concepts. References to old version behavior is removed since it's no longer relevant. Added more explanation about what to do about \"no app / request context\" errors, since it comes up constantly on Stack Overflow. Added more cross references and cleaned up many API docs as well to make them more consistent. Added documentation for _AppCtxGlobals rather than recreating it in the g docs. Added documentation about the test_request_context arguments.\nThis is an inherently advanced topic, so I don't think there's any way to make it completely clear to all readers. Hopefully it's at least easier to follow to get an idea of how the process works.\n2", "pull_request_status": "Merged", "issue_fixed_time": "2018-04-09T07:22:17Z", "files_changed": [["93", "docs/api.rst"], ["211", "docs/appcontext.rst"], ["381", "docs/reqcontext.rst"], ["163", "flask/app.py"], ["44", "flask/ctx.py"], ["4", "flask/globals.py"], ["21", "flask/testing.py"]]}, "1199": {"issue_url": "https://github.com/pallets/flask/issues/1149", "issue_id": "#1149", "issue_summary": "pdf&epub of docs has wrong version", "issue_description": "RobberPhex commented on 14 Aug 2014\nIn http://flask.pocoo.org/docs/ , the download link http://flask.pocoo.org/docs/flask-docs.pdf (sha1:6ddf4ea31f4c5146afb7b68060bc9bd87eacc4c8) is for v0.11-dev, like that:\nBut, the latest release version of Flask is v0.10.1. Please fix it, thank you.", "issue_status": "Closed", "issue_reporting_time": "2014-08-14T14:11:54Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1200": {"issue_url": "https://github.com/pallets/flask/issues/1148", "issue_id": "#1148", "issue_summary": "Flaskr example app hooked up with some Selenium tests running on Sauce Labs and Travis CI", "issue_description": "christian-bromann commented on 14 Aug 2014\nHi,\nI've created an Flaskr example application for a talk that can help people to run Selenium tests on their Flask apps. It uses Travis CI as continuous integration server and Sauce Labs to execute the tests in the cloud. If you're interested I would send you an PR. Here is the link:\nhttps://github.com/christian-bromann/flask-webdriver-demo\nCheers", "issue_status": "Closed", "issue_reporting_time": "2014-08-14T00:04:02Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1201": {"issue_url": "https://github.com/pallets/flask/issues/1147", "issue_id": "#1147", "issue_summary": "dev version; click subcommands not working as intended", "issue_description": "AlexFrazer commented on 12 Aug 2014\nwhat I was doing on console: fairly self-explanatory\n(burddy)crow@crow-VPCS111FM:~/code/burddy$ burddy --help\nUsage: burddy [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --debug / --no-debug  Enable or disable debug mode.\n  --help                Show this message and exit.\n\nCommands:\n  article  manage the articles\n  db       Perform database migrations.\n  initdb   create the database\n  run      Runs a development server.\n  seed     make a fake populated website\n  shell    Runs a shell in the app context.\n  user     manage the users\n(burddy)crow@crow-VPCS111FM:~/code/burddy$ burddy db upgrade\n(burddy)crow@crow-VPCS111FM:~/code/burddy$ burddy user --help\nUsage: burddy user [OPTIONS] COMMAND [ARGS]...\n\n  manage the users\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  seed  adds fake users to database\n(burddy)crow@crow-VPCS111FM:~/code/burddy$ burddy user seed\nUsage: burddy [OPTIONS]\n\nError: Got unexpected extra arguments (user seed)\n(burddy)crow@crow-VPCS111FM:~/code/burddy$ \nSome of the commands do work. If I did burddy shell, it works, or burddy run, or even burddy db upgrade, however, article and user, in particular, do not have access to their \"subcommands\".\nMy repo is here if you wish to view it", "issue_status": "Closed", "issue_reporting_time": "2014-08-12T16:14:29Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1202": {"issue_url": "https://github.com/pallets/flask/issues/1146", "issue_id": "#1146", "issue_summary": "Add app config setting for defaulting _external to True in url_for", "issue_description": "danovotny commented on 12 Aug 2014\nIt would be nice to have an app level config setting for defaulting _external to True in url_for on sites where absolute URLs are required or preferred, removing the need to add the parameter on each url_for call.\nPossibly near here: https://github.com/mitsuhiko/flask/blob/master/flask/helpers.py#L292:\nif current_app.config['NEW_SETTING_NAME_HERE']:\n    external = True", "issue_status": "Closed", "issue_reporting_time": "2014-08-12T02:47:05Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1203": {"issue_url": "https://github.com/pallets/flask/issues/1145", "issue_id": "#1145", "issue_summary": "Flask needs more opinions on config and deployment", "issue_description": "robodude666 commented on 11 Aug 2014\nI love Flask. It's really great.\nBut one of the things that bothers me about it is how un-opinionated it tries to be, which I think in the end makes it a lot more difficult to use.\nThere are at least half a dozen or so way of setting configurations:\nYou can set values manually.\nYou can read from an object.\nYou can read from a JSON file.\nYou can read from an environment variable.\nYou can read from a string to a module.\nNot to mention all of the other extensions that add support for yaml, and other methods.\nAnd then, where do you place them?\nYou can use instance folders.\nYou can not use instance folders.\nYou can use some path defined in an environment variable.\nYou can dump them with the app.\nThis makes it very difficult to figure out what the best way of setting up a project, because if you look through all of the different example starter projects on GitHub, they're all laid out completely differently.\nThen it comes to, how to structure your app?\nDo you use an app factory?\nDo you not use an app factory?\nIf you do use an app factory, and you want to use gunicorn:\nDo I create a simple gunicorn.py that creates an app from the factory and makes an app?\nDo I write a custom script with Click or Flask-Script that launches gunicorn?\nCertainly, if you've deployed dozens of Flask apps already, and you have your own template project setup and figured out the way you want to do everything it's okay. But, for those new to Flask, or coming from other Frameworks it can be a bit daunting to have so many options, and not having anyone agree on what should be used.", "issue_status": "Closed", "issue_reporting_time": "2014-08-11T15:57:48Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1204": {"issue_url": "https://github.com/pallets/flask/issues/1143", "issue_id": "#1143", "issue_summary": "Thread in flask but 2 threads are created instead of one", "issue_description": "deeptiChawla commented on 7 Aug 2014\nNo description provided.", "issue_status": "Closed", "issue_reporting_time": "2014-08-07T10:23:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1205": {"issue_url": "https://github.com/pallets/flask/issues/1140", "issue_id": "#1140", "issue_summary": "Can we make use of the Milestones features of GitHub to have at least an indication of how far we are from the next release?", "issue_description": "lipis commented on 5 Aug 2014\nThe latest Milestones section is not that bad and it would really nice indication on what is left until the next version, or why is not there yet..\nIt's been more than a year since the last release, but the project is far from inactive as we can see from the commits and issues..", "issue_status": "Closed", "issue_reporting_time": "2014-08-05T10:48:57Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1206": {"issue_url": "https://github.com/pallets/flask/issues/1139", "issue_id": "#1139", "issue_summary": "Wrong Flask.instance_path inside virtualenv", "issue_description": "sahutd commented on 3 Aug 2014\nThere is a bug in detection of Flask.instance_path when run inside a virtualenv. I have experienced this issue on both python2.7 and python3.4. My machines are debian wheezy and debian jessie.\nThis issue is not present when run from system Python. I have described below the simplest code to reproduce the error.\nI am willing to submit a patch provided this issue is real, and not something wrong on my end.\nSome sample code to reproduce the error:\nDirectory tree:\n|-- app.py\n|-- run.py\n|-- views.py\nContents of files\n#app.py\nfrom flask import Flask\napp = Flask(__name__)\nimport views\n\n#run.py\nfrom app import app\napp.run()\n\n#views.py\nfrom app import app\n@app.route('/')\ndef index():\n    return app.instance_path\nVirtualenv python\npython run.py\n--\ncurl http://127.0.0.1:5000\n/home/saimadhav/development/demo/var/app-instance\nSystem python\npython3.4 run.py\n--\ncurl http://127.0.0.1:5000\n/home/saimadhav/development/demo/instance\nEDIT1: The above 3 files in my instance are placed in a folder demo", "issue_status": "Closed", "issue_reporting_time": "2014-08-03T07:14:59Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1207": {"issue_url": "https://github.com/pallets/flask/issues/1135", "issue_id": "#1135", "issue_summary": "Deprecate flask.ext and create migration tool to flask_*", "issue_description": "Contributor\nDasIch commented on 27 Jul 2014\nNo description provided.", "issue_status": "Closed", "issue_reporting_time": "2014-07-27T11:33:29Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1208": {"issue_url": "https://github.com/pallets/flask/issues/1134", "issue_id": "#1134", "issue_summary": "Quote all HTML attributes", "issue_description": "Contributor\nDasIch commented on 26 Jul 2014\nJust what the title says. See #1116 for a longer discussion on the issue.", "issue_status": "Closed", "issue_reporting_time": "2014-07-26T09:08:25Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1209": {"issue_url": "https://github.com/pallets/flask/issues/1133", "issue_id": "#1133", "issue_summary": "custom rendering view not possible anymore", "issue_description": "matdrapeau commented on 25 Jul 2014\nThis decorator seems not supported anymore in 0.10\nhttp://flask.pocoo.org/snippets/18/\nHow can we double decorate a function using a custom view?\nIn the case we don't want to define different endpoints, like this:\n@view(app, '/<name>', render_html('page.html'))\n@view(app, '/api/page/<name>', render_json)\ndef show_page(name):\n    ...", "issue_status": "Closed", "issue_reporting_time": "2014-07-25T04:10:06Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1210": {"issue_url": "https://github.com/pallets/flask/issues/1131", "issue_id": "#1131", "issue_summary": "How to share endpoints between different apps in Flask", "issue_description": "douglarek commented on 23 Jul 2014\napp.wsgi_app = DispatcherMiddleware(app.wsgi_app, {'/api': api}) # before this, I have a blueprint named web in app.\nnow, I have a endpoint named validate_user in api app, and how can i invoke this endpoint in blueprint web ?\nThanks", "issue_status": "Closed", "issue_reporting_time": "2014-07-23T04:34:46Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1211": {"issue_url": "https://github.com/pallets/flask/issues/1130", "issue_id": "#1130", "issue_summary": "Automatic route redirect changes domain to 127.0.0.1:port", "issue_description": "danieldiekmeier commented on 23 Jul 2014\nOkay, so I got an application running on 127.0.0.1:62781.\nI'm redirecting all traffic to this port, via htaccess.\nEverything works quite well. Except for the automatic route redirect that kicks in if you have specified routes like these:\n@app.route('/users/', defaults={'page': 1})\n@app.route('/users/page/<int:page>')\ndef show_users(page):\n    pass\nOf course, I'm mostly using url_for, so it's not a huge problem, but if a user visits /users/page/1, he should get redirected to /users, but instead flask wants to send him to 127.0.0.1:62781/users.\nHow can I prevent that from happening?\nI tried it with gunicorn and the \"standard\" run.py that looks like this:\nimport lesetagebuch.main as main\nmain.app.run(\n    host='0.0.0.0',\n    port=62781\n)\n1", "issue_status": "Closed", "issue_reporting_time": "2014-07-22T19:51:30Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1212": {"issue_url": "https://github.com/pallets/flask/issues/1129", "issue_id": "#1129", "issue_summary": "url_for _external does not use PREFERRED_URL_SCHEME", "issue_description": "philipithomas commented on 22 Jul 2014\nTo reproduce:\nset a PREFERRED_URL_SCHEME in the app config != http\nUse a url_for with _external=True\nNote that the URL does not use the PREFERRED_URL_SCHEME\nNotes: I'm using blueprints and Flask version 0.10.1", "issue_status": "Closed", "issue_reporting_time": "2014-07-22T17:10:49Z", "fixed_by": "#1144", "pull_request_summary": "Add documentation about url_for's default scheme", "pull_request_description": "Member\nuntitaker commented on 11 Aug 2014\nFix #1129", "pull_request_status": "Merged", "issue_fixed_time": "2014-08-12T18:46:56Z", "files_changed": [["5", "flask/helpers.py"]]}, "1213": {"issue_url": "https://github.com/pallets/flask/issues/1128", "issue_id": "#1128", "issue_summary": "Jinja template docs link is outdated", "issue_description": "freeslugs commented on 22 Jul 2014\non http://flask.pocoo.org/docs/templating/\nthe \"Jinja2 Template Documentation\" link at the top of the page gives a 404 error.\nupdate link to http://jinja.pocoo.org/docs/templates/#", "issue_status": "Closed", "issue_reporting_time": "2014-07-22T02:47:55Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1214": {"issue_url": "https://github.com/pallets/flask/issues/1127", "issue_id": "#1127", "issue_summary": "Keep development out of master", "issue_description": "danielchatfield commented on 22 Jul 2014\nConvention is (and rightly so) that the master branch is stable. There have been several issues lately that are related to the accidental use of the development version.\nAlso the docs here track the development version so you can hardly blame someone for getting stuck trying to follow them when they have loads of stuff that doesn't apply to the current stable version.\nCan we make an effort to sort this out?", "issue_status": "Closed", "issue_reporting_time": "2014-07-21T20:14:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1215": {"issue_url": "https://github.com/pallets/flask/issues/1126", "issue_id": "#1126", "issue_summary": "Flask ignore FLASK_STATIC_FOLDER setted outside of constructor.", "issue_description": "proofit404 commented on 21 Jul 2014\nIf I do following:\napp = Flaks(__name__, static_folder='/var/www/static')\nall works just fine, but if I do\nclass Config(object):\n    FLASK_STATIC_FOLDER = '/var/www/static'\n\napp = Flask(__name__)\napp.config.from_object(Config)\ncurrent_app.send_static_file can't find static file. Is it any difference between those two settings?", "issue_status": "Closed", "issue_reporting_time": "2014-07-21T14:27:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1216": {"issue_url": "https://github.com/pallets/flask/issues/1125", "issue_id": "#1125", "issue_summary": "Add testing best practices and others to wiki", "issue_description": "Contributor\naugiwan commented on 16 Jul 2014\nCan someone from the team write in https://github.com/mitsuhiko/flask/wiki/Large-app-how-to#other-good-practices?", "issue_status": "Closed", "issue_reporting_time": "2014-07-16T18:15:55Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1217": {"issue_url": "https://github.com/pallets/flask/issues/1124", "issue_id": "#1124", "issue_summary": "CLI: \"flask\" command help doesn't list custom commands", "issue_description": "erwagasore commented on 16 Jul 2014\nI am playing with the latest release of flask with cli module. I have created a command called initdb and when I call flask initdb it works as expected, but when I just call flask command it supposed to show the list of all available commands including initdb, which is not the case. Any idea why?", "issue_status": "Closed", "issue_reporting_time": "2014-07-16T08:39:22Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1218": {"issue_url": "https://github.com/pallets/flask/issues/1123", "issue_id": "#1123", "issue_summary": "Provide examples extending the custom script in cli docs", "issue_description": "Contributor\nlimeburst commented on 16 Jul 2014\nCLI docs could use some improvements by providing some example commands, using the flask.cli.pass_script_info decorator.", "issue_status": "Closed", "issue_reporting_time": "2014-07-16T06:22:25Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1219": {"issue_url": "https://github.com/pallets/flask/issues/1121", "issue_id": "#1121", "issue_summary": "Bad link", "issue_description": "sylnsr commented on 15 Jul 2014\nOn home page, \"uses Jinja2 templating\" points to a 404. I believe it should be \"http://jinja.pocoo.org/docs/templates/\"", "issue_status": "Closed", "issue_reporting_time": "2014-07-15T06:18:06Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1220": {"issue_url": "https://github.com/pallets/flask/issues/1118", "issue_id": "#1118", "issue_summary": "Context processor decorator design", "issue_description": "Contributor\nprakashpp commented on 14 Jul 2014\nIn current design, methods decorated with app.context_processor is expected to return a dictionary. What was the reason behind this design? Can't we have decorator like app.context_processor('name') on method itself so that we can decorate method directly.", "issue_status": "Closed", "issue_reporting_time": "2014-07-14T13:31:14Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1221": {"issue_url": "https://github.com/pallets/flask/issues/1115", "issue_id": "#1115", "issue_summary": "\"Error handling request\" with Gunicorn and gevent worker", "issue_description": "dsoprea commented on 13 Jul 2014\nI'm using Flask with Gunicorn using the \"gevent\" worker. The request completes, the client receives the response, and Gunicorn spits out \"Error handling request\", and then waits for a new request.\nThis is the stacktrace:\n    2014-07-12 18:01:53 [38427] [INFO] Booting worker with pid: 38427\n    2014-07-12 18:01:55 [38427] [DEBUG] POST /job/dev/job1\n    2014-07-12 18:01:55 [38427] [ERROR] Error handling request\n    Traceback (most recent call last):\n      File \"/Users/dustin/development/python/mapreduce/lib/python2.7/site-packages/gunicorn/workers/async.py\", line 116, in handle_request\n        raise StopIteration()\n    StopIteration\n(I should note that this is coming out of the \"async\" worker module, and not the intended \"gevent\" one).\nThis is the relevant portion of that module:\n        except Exception:\n            if resp and resp.headers_sent:\n                # If the requests have already been sent, we should close the\n                # connection to indicate the error.\n                self.log.exception(\"Error handling request\")\n                try:\n                    sock.shutdown(socket.SHUT_RDWR)\n                    sock.close()\n                except socket.error:\n                    pass\n                raise StopIteration()\n            raise\n        finally:\nI'm a long-time user of Gunicorn, but haven't used Flask very often. I'm guessing that Flask is doing something to have the headers sent back early.", "issue_status": "Closed", "issue_reporting_time": "2014-07-12T22:15:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1222": {"issue_url": "https://github.com/pallets/flask/issues/1114", "issue_id": "#1114", "issue_summary": "Race condition in get_flashed_messages()", "issue_description": "peter-conalgo commented on 12 Jul 2014\nIn https://github.com/mitsuhiko/flask/blob/master/flask/helpers.py#L401:\n_request_ctx_stack.top.flashes = flashes = session.pop('_flashes') \\\n      if '_flashes' in session else []\nThis check for the key existence, and then a pop causes a race condition in my system because it is possible for the _flashes key to disappear between the check and the pop, leading to a KeyError. (I saw it happen under load.)\nThe fix is easy: use the \"default\" argument to the pop. That path is implemented in an atomic manner in my session code already.", "issue_status": "Closed", "issue_reporting_time": "2014-07-12T13:53:34Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1223": {"issue_url": "https://github.com/pallets/flask/issues/1113", "issue_id": "#1113", "issue_summary": "How to have flask.jsonify take Decimals?", "issue_description": "kramer65 commented on 12 Jul 2014\nI'm writing a website using Flask (I love it) in which I use a lot of decimals. This however, presents me with a problem when wanting to jsonify dicts or lists containing Decimals (which happens a lot in my website).\nIn this stackoverflow answer there is a suggestion to overcome this with the basic json.dumps() method:\ndef decimal_default(obj):\n    if isinstance(obj, decimal.Decimal):\n        return float(obj)\n    raise TypeError\n\njson.dumps({'x': decimal.Decimal('5.5')}, default=decimal_default)\nI wouldn't know how to use this way of doing it with the flask builtin jsonify though. Does anybody know how I can make jsonify also convert Decimals correctly? All tips are welcome!", "issue_status": "Closed", "issue_reporting_time": "2014-07-11T21:46:41Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1224": {"issue_url": "https://github.com/pallets/flask/issues/1108", "issue_id": "#1108", "issue_summary": "Feedback website not working.", "issue_description": "ajknzhol commented on 6 Jul 2014\nNo description provided.", "issue_status": "Closed", "issue_reporting_time": "2014-07-06T13:26:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1225": {"issue_url": "https://github.com/pallets/flask/issues/1106", "issue_id": "#1106", "issue_summary": "Weird error with \"Flask\" in setup_requires.", "issue_description": "Ayrx commented on 6 Jul 2014\nI have noticed a rather weird error when installing a package that has Flask in install_requires. Here is the partial output of python setup.py install\nSearching for Flask\nBest match: Flask RESTful-0.2.12\nDownloading https://pypi.python.org/packages/source/F/Flask-RESTful/Flask-RESTful-0.2.12.tar.gz#md5=53049771f4ccb3f40194696bb683db77\nProcessing Flask-RESTful-0.2.12.tar.gz\nWriting /tmp/easy_install-ljhjqn/Flask-RESTful-0.2.12/setup.cfg\nRunning Flask-RESTful-0.2.12/setup.py -q bdist_egg --dist-dir /tmp/easy_install-ljhjqn/Flask-RESTful-0.2.12/egg-dist-tmp-4d1snj\nFlask-RESTful 0.2.12 is already the active version in easy-install.pth\n\nInstalled /home/ayrx/.virtualenvs/test/lib/python3.3/site-packages/Flask_RESTful-0.2.12-py3.3.egg\nerror: Could not find required distribution Flask\nHere is the relevant bit of setup.py\n    install_requires=[\n        \"Flask\",\n        \"Flask-RESTful\",\n        \"cryptography\"\n    ]\nChanging \"Flask\" to \"flask\" seems to fix things. Not a breaking bug but seems weird nonetheless especially since the packaging docs seem to indicate that \"Flask\" works fine.", "issue_status": "Closed", "issue_reporting_time": "2014-07-06T06:41:08Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1226": {"issue_url": "https://github.com/pallets/flask/issues/1104", "issue_id": "#1104", "issue_summary": "Links to Werkzeug and Jinja in Document are wrong", "issue_description": "rezakamalifard commented on 5 Jul 2014\nLinks to Werkzeug and Jinja on http://flask.pocoo.org/docs/ are wrong.\nLinked to http://jinja.pocoo.org/2/documentation/ and http://werkzeug.pocoo.org/documentation/ instead of http://werkzeug.pocoo.org/docs/ and http://jinja.pocoo.org/docs/", "issue_status": "Closed", "issue_reporting_time": "2014-07-05T05:54:16Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1227": {"issue_url": "https://github.com/pallets/flask/issues/1102", "issue_id": "#1102", "issue_summary": "Let's kill run", "issue_description": "Contributor\nDasIch commented on 4 Jul 2014\nIn order to run a Flask application during development we have the .run() method or with 1.0 flask run. While both are convenient they are a bad idea.\nFirst of all their naming implies that, they are used for running a Flask application, they aren't. They are for running a Flask application during development, a subtle but important difference that causes significant confusion. Apart from that though, running a Flask application is never what you want.\nInstead you want to develop, test or deploy an application. While development and testing can imply running a web server, running a web server during development means something different than running a web server during testing. In deployment you don't actually want to run your application at all, you should let a web server do that.\nSo far we kind of allow people to signal their intent with DEBUG and TESTING, but this needs to be explicitly configured by every user and issues such as #1049, show that this is not without issues.\nTherefore what I would like to propose is to create three commands develop, test and deploy. These commands should be extendable through extensions and users. It should be easily possible to use different configurations for these scenarios. Extensions that are only helpful during development like Flask-Debugtoolbar could activate/deactivate themselves based on intent, Flask-Migrate could perform migrations during development and extensions dealing with assets could start background threads monitoring the file system for changes during development. It would further simply clear up a lot of confusion for newcomers.\nRunning flask with either of these commands should by default set DEVELOPMENT (for backwards compatibilty also DEBUG but let's remove that, the name is awful), TESTING or DEPLOYMENT respectively and issue a signal. Furthermore develop should run the development server as run does now. test and deployment shouldn't actually test or deploy the application as we don't want to enforce a specific test runner or deployment solution. Instead the user should be implement these, if so desired. Nevertheless they would be useful as they establish convention extensions can rely on.\nI realize that such a change is probably somewhat controversial (which is why this is not a pull request), it would also distinguish us significantly from Django, which works like Flask does now. Nevertheless I think it would be a great idea and I'm curious what others think of this idea. So, thoughts?", "issue_status": "Closed", "issue_reporting_time": "2014-07-04T14:04:01Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1228": {"issue_url": "https://github.com/pallets/flask/issues/1101", "issue_id": "#1101", "issue_summary": "Python 3 docs are quite outdated", "issue_description": "JelteF commented on 4 Jul 2014\nI've been using Flask with Python 3 from since it was supported. Back then there were definitely some issues with certain libraries that were only compatible on the git repo and not on pypi. But I'm currently running quite a complex website using Python 3 and Flask and haven't had any real problems in like half a year.\nI think Python 3 has become mature, especially with Python 3.4, and the general opinion is that new projects should be using Python 3. The current docs quite strongly suggest otherwise.\nI would be happy to rewrite them, but before I do I would like to know if you guys agree.", "issue_status": "Closed", "issue_reporting_time": "2014-07-03T22:49:13Z", "fixed_by": "#1112", "pull_request_summary": "Update python3.rst", "pull_request_description": "Contributor\nmethane commented on 10 Jul 2014\nFixes #1101", "pull_request_status": "Merged", "issue_fixed_time": "2014-07-27T11:22:36Z", "files_changed": [["15", "docs/python3.rst"]]}, "1229": {"issue_url": "https://github.com/pallets/flask/issues/1098", "issue_id": "#1098", "issue_summary": "Flask Badges", "issue_description": "ragmha commented on 30 Jun 2014\nhttp://flask.pocoo.org/community/badges/\nFlask Badge Images are not working.Needs to be fixed", "issue_status": "Closed", "issue_reporting_time": "2014-06-30T16:56:12Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1230": {"issue_url": "https://github.com/pallets/flask/issues/1095", "issue_id": "#1095", "issue_summary": "jsonify big numbers", "issue_description": "Ghotrix commented on 26 Jun 2014\nIt seems that .jsonify round up big numbers like 2114380775380674674 to 2114380775380674600 etc. Is it bug or some undocumented feature?", "issue_status": "Closed", "issue_reporting_time": "2014-06-26T13:31:10Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1231": {"issue_url": "https://github.com/pallets/flask/issues/1094", "issue_id": "#1094", "issue_summary": "Issue with deferred callbacks pattern when an exception occurs in a @teardown_request decorated function", "issue_description": "aegarbutt commented on 19 Jun 2014\nWe recently stumbled across an issue with the @after_this_request decorator deferred callback pattern (described at http://flask.pocoo.org/docs/patterns/deferredcallbacks/).\nThis issue does not occur in v0.9, but does occur in v0.10 and v0.10.1. The issue also does not occur when using the @after_this_request decorator defined in 'flask/ctx.py'.\nIf an exception occurs in a function decorated with @teardown_request, any callback added with the @after_this_request decorator copied from the pattern will continue to be executed on subsequent requests. This occurs when running standalone:\n$ python flask_teardown_exception.py\nand when running under uwsgi:\n$ uwsgi --yaml uwsgi.yaml (Be sure to correct paths if you want to use this)\nWe realize that @teardown_request documentation indicates that one should be careful never to throw an exception, but the end result was still very surprising.\nA minimal testcase can be found in the github repo referenced at the bottom. It defines two functions to be executed after the current request. One using the built-in decorator, and one using the pattern and code sample. Both functions add a header to the response indicating the handling processID and an incrementing request ID. An exception can be triggered in the @teardown_request function by passing any value to the \"e\" GET parameter. After an exception is triggered, the built-in @after_this_request continues to work as expected an all subsequent requests that do not throw an exception. However, the functions added with the custom @after_this_request decorator following the pattern code sample continue to execute for all subsequent requests. For example, if I trigger an exception on request 6, and make 4 more requests, then the second to last request (request 9) will have the headers for request 6 ,7, 8 and 9; and the last request (request 10) will have the headers for request 6, 7, 8, 9 and 10.\nThe github repo also includes console output running under both uwsgi and standalone, and HTTP request/response pairs for 10 requests showing the outcome.\nhttps://github.com/aegarbutt/teardown_request_exception", "issue_status": "Closed", "issue_reporting_time": "2014-06-19T17:55:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1232": {"issue_url": "https://github.com/pallets/flask/issues/1092", "issue_id": "#1092", "issue_summary": "Issue with module path/name in imported classes when using from...import on flask.ext.* (Python 3)", "issue_description": "lyschoening commented on 17 Jun 2014\nThere is an issue when importing something inside an extension using Python 3 where Flask imports the classes in such a way that they are no longer equal to the same classes imported inside the extension. The issue occurs when importing from a submodule of an extension using from flask.ext.xxx.yyy import zzz.\nThe classes imported using from-import get masked as <class 'flask.ext.xxx.yyy.zzz'>, where <class 'flask_xxx.yyy.zzz'> would be expected.\nThe issue is specific to Python 3.\nExample:\nPython 3.4.0 (default, Apr  9 2014, 11:51:10) \n[GCC 4.2.1 Compatible Apple LLVM 5.1 (clang-503.0.38)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from flask.ext.restful.fields import String\n>>> from flask_restful.fields import String as String_internal\n>>> String == String_internal\nFalse\n>>> String\n<class 'flask.ext.restful.fields.String'>\n>>> String_internal\n<class 'flask_restful.fields.String'>\n>>> import flask.ext.restful\n>>> import flask_restful\n>>> flask.ext.restful.fields.String == flask_restful.fields.String\nTrue\n>>> flask.ext.restful.fields.String\n<class 'flask_restful.fields.String'>\n>>> flask_restful.fields.String\n<class 'flask_restful.fields.String'>", "issue_status": "Closed", "issue_reporting_time": "2014-06-17T09:45:05Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1233": {"issue_url": "https://github.com/pallets/flask/issues/1087", "issue_id": "#1087", "issue_summary": "Wrong link to Jinja2 website in docs webpage", "issue_description": "mmcasetti commented on 15 Jun 2014\nThere are two links to the Jinja2 project website. Both should link to http://jinja.pocoo.org/docs/ instead of http://jinja.pocoo.org/2/\n(All the links to the Jinja2 website that I see in the docs on github are correct.)", "issue_status": "Closed", "issue_reporting_time": "2014-06-15T13:34:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1234": {"issue_url": "https://github.com/pallets/flask/issues/1084", "issue_id": "#1084", "issue_summary": "Testing render_template()", "issue_description": "nueverest commented on 8 Jun 2014\nHow do I test this line?\nreturn render_template(u'http_error.html', error_detail=detail)\nI am a beginner as far as flask testing is concerned.\nCould you document the answer to this on your testing page? http://flask.pocoo.org/docs/testing/\nThere is an unanswered question similar to this on stackoverflow.\nhttp://stackoverflow.com/questions/23987564/test-flask-render-template-context", "issue_status": "Closed", "issue_reporting_time": "2014-06-08T04:08:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1235": {"issue_url": "https://github.com/pallets/flask/issues/1083", "issue_id": "#1083", "issue_summary": "Publish 0.10 documentation", "issue_description": "Contributor\nmjpieters commented on 7 Jun 2014\nWith click integrated in to Flask 1.0, the published documentation at readthedocs is getting rather out of sync with 0.10 reality.\nSpecifically, today I could not link someone to the documentation on how to enable debug=True in their dev server, as the quickstart section on Debug Mode changed, and the 0.8 documentation is... outdated for 0.10 in places.\nCan a 0.10 version of the docs be published too?", "issue_status": "Closed", "issue_reporting_time": "2014-06-06T18:53:17Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1236": {"issue_url": "https://github.com/pallets/flask/issues/1082", "issue_id": "#1082", "issue_summary": "Flask eliminates error and stack trace when production mode.", "issue_description": "Contributor\nmethane commented on 6 Jun 2014\nhttp://flask.pocoo.org/docs/errorhandling/\nBy default if your application runs in production mode, Flask will display a very simple page for you and log the exception to the logger.\nBut https://github.com/mitsuhiko/flask/blob/master/flask/logging.py#L34\n    class DebugHandler(StreamHandler):\n        def emit(x, record):\n            StreamHandler.emit(x, record) if app.debug else None\nThis means Flask just ignore all errors and not produce any logs.\nWe can't get exception message and traceback in production envirionment.", "issue_status": "Closed", "issue_reporting_time": "2014-06-06T16:09:44Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1237": {"issue_url": "https://github.com/pallets/flask/issues/1081", "issue_id": "#1081", "issue_summary": "Support X-Sendfile-Temporary", "issue_description": "letmaik commented on 5 Jun 2014\nThere is mod_xsendfile which in it's current beta version supports X-Sendfile-Temporary which is like X-Sendfile but removes the file afterwards.\nIs there some chance of supporting this? If not (because it's beta and not supported by other servers yet), what would be the recommended way to implement this myself? Of course I can just send the header, but I'm not sure if that's enough, judging by the length of send_file().", "issue_status": "Closed", "issue_reporting_time": "2014-06-05T15:54:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1238": {"issue_url": "https://github.com/pallets/flask/issues/1080", "issue_id": "#1080", "issue_summary": "flask redirect not support itms-services", "issue_description": "humiaozuzu commented on 5 Jun 2014\nitms-services://?action=download-manifest&url=http://tietie-static.qiniudn.com/downloads/TieTie_iOS.plist becomes\nitms-services:?action=download-manifest&url=http://tietie-static.qiniudn.com/downloads/TieTie_iOS.plist when using redirect(url_here)\nget_wsgi_headers will be called in after_request callback, so nothing works even I make redirect response by hand...\nset autocorrect_location_header to False also not work", "issue_status": "Closed", "issue_reporting_time": "2014-06-05T03:35:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1239": {"issue_url": "https://github.com/pallets/flask/issues/1078", "issue_id": "#1078", "issue_summary": "app.cli.command", "issue_description": "yekeqiang commented on 4 Jun 2014\nthe flaskr.py has a issue when i run \uff0cthe error is follow:\nAttributeError: 'Flask' object has no attribute 'cli'", "issue_status": "Closed", "issue_reporting_time": "2014-06-04T03:22:43Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1240": {"issue_url": "https://github.com/pallets/flask/issues/1076", "issue_id": "#1076", "issue_summary": "terminal no longer echos input after pdb is aborted by reloader", "issue_description": "numerodix commented on 30 May 2014\nSteps to reproduce:\nWrite a trivial flask app, include a call to pdb.set_trace() in the request path, then request this url (browser, curl, ...). You're now in a pdb session. But at the same time flask's reloader is watching imported modules of your app for changes. Make a change in one of these modules (mod.py) and save the file. The reloader will restart your application, and abort your pdb session. Now you can stop the application with Ctrl+C. Result: your terminal no longer echos input.\nIsolated test case:\nhttps://gist.github.com/numerodix/c13ce7c1c0917b3b7dd9", "issue_status": "Closed", "issue_reporting_time": "2014-05-30T18:04:47Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1241": {"issue_url": "https://github.com/pallets/flask/issues/1074", "issue_id": "#1074", "issue_summary": "docs: add import to SQLAlchemy example", "issue_description": "Contributor\nbrannerchinese commented on 30 May 2014\nUnder SQL Abstraction Layer in the docs it says\nIf you just want to use the database system (and SQL) abstraction layer you basically only need the engine:\nfrom sqlalchemy import create_engine, MetaData\nBut a few lines down is given the example\nusers = Table('users', metadata, autoload=True)\nFor this, Table also needs to be imported.", "issue_status": "Closed", "issue_reporting_time": "2014-05-30T16:46:16Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1242": {"issue_url": "https://github.com/pallets/flask/issues/1073", "issue_id": "#1073", "issue_summary": "Python Flask Gevent stack - Simple \u201cHello World\u201d app shows as inefficient when benchmarked", "issue_description": "ghost commented on 30 May 2014\nI have the following simple \"Hello World\" app:\nfrom gevent import monkey\nmonkey.patch_all()\nfrom flask import Flask\nfrom gevent import wsgi\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n  return 'Hello World'\n\nserver = wsgi.WSGIServer(('127.0.0.1', 5000), app)\nserver.serve_forever()\nAs you can see it's pretty straightforward.\nThe problem is that despite such simpliness it's pretty slow/inefficient as the following benchmark (made with Apache Benchmark) shows:\nab -k -n 1000 -c 100 http://127.0.0.1:5000/\n\nBenchmarking 127.0.0.1 (be patient)\nCompleted 100 requests\nCompleted 200 requests\nCompleted 300 requests\nCompleted 400 requests\nCompleted 500 requests\nCompleted 600 requests\nCompleted 700 requests\nCompleted 800 requests\nCompleted 900 requests\nCompleted 1000 requests\nFinished 1000 requests\n\n\nServer Software:        \nServer Hostname:        127.0.0.1\nServer Port:            5000\n\nDocument Path:          /\nDocument Length:        11 bytes\n\nConcurrency Level:      100\nTime taken for tests:   1.515 seconds\nComplete requests:      1000\nFailed requests:        0\nWrite errors:           0\nKeep-Alive requests:    0\nTotal transferred:      146000 bytes\nHTML transferred:       11000 bytes\nRequests per second:    660.22 [#/sec] (mean)\nTime per request:       151.465 [ms] (mean)\nTime per request:       1.515 [ms] (mean, across all concurrent requests)\nTransfer rate:          94.13 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    0   0.6      0       3\nProcessing:     1  145  33.5    149     191\nWaiting:        1  144  33.5    148     191\nTotal:          4  145  33.0    149     191\n\nPercentage of the requests served within a certain time (ms)\n  50%    149\n  66%    157\n  75%    165\n  80%    173\n  90%    183\n  95%    185\n  98%    187\n  99%    188\n 100%    191 (longest request)\nEventually increasing the number of connections and/or concurrency doesn't bring better results, in fact it becomes worse.\nWhat I'm most concerned about is the fact that I can't go over 700 Requests per second and a Transfer rate of 98 Kbytes/sec.\nAlso, the individual Time per request seems to be too much.\nI got curious about what Python and Gevent are doing in the background, or better, what the OS is doing, so I used a strace to determine eventual system-side issues and here's the result:\n% time     seconds  usecs/call     calls    errors syscall\n------ ----------- ----------- --------- --------- ----------------\n 56.46    0.000284           0      1386           close\n 24.25    0.000122           0      1016           write\n 10.74    0.000054           0      1000           send\n  4.17    0.000021           0      3652      3271 open\n  2.19    0.000011           0       641           read\n  2.19    0.000011           0      6006           fcntl64\n  0.00    0.000000           0         1           waitpid\n  0.00    0.000000           0         1           execve\n  0.00    0.000000           0         3           time\n  0.00    0.000000           0        12        12 access\n  0.00    0.000000           0        32           brk\n  0.00    0.000000           0         5         1 ioctl\n  0.00    0.000000           0      5006           gettimeofday\n  0.00    0.000000           0         4         2 readlink\n  0.00    0.000000           0       191           munmap\n  0.00    0.000000           0         1         1 statfs\n  0.00    0.000000           0         1         1 sigreturn\n  0.00    0.000000           0         2           clone\n  0.00    0.000000           0         2           uname\n  0.00    0.000000           0        21           mprotect\n  0.00    0.000000           0        69        65 _llseek\n  0.00    0.000000           0        71           rt_sigaction\n  0.00    0.000000           0         1           rt_sigprocmask\n  0.00    0.000000           0         3           getcwd\n  0.00    0.000000           0         1           getrlimit\n  0.00    0.000000           0       243           mmap2\n  0.00    0.000000           0      1838       748 stat64\n  0.00    0.000000           0        74           lstat64\n  0.00    0.000000           0       630           fstat64\n  0.00    0.000000           0         1           getuid32\n  0.00    0.000000           0         1           getgid32\n  0.00    0.000000           0         1           geteuid32\n  0.00    0.000000           0         1           getegid32\n  0.00    0.000000           0         4           getdents64\n  0.00    0.000000           0         3         1 futex\n  0.00    0.000000           0         1           set_thread_area\n  0.00    0.000000           0         2           epoll_ctl\n  0.00    0.000000           0        12         1 epoll_wait\n  0.00    0.000000           0         1           set_tid_address\n  0.00    0.000000           0        26           clock_gettime\n  0.00    0.000000           0         2           openat\n  0.00    0.000000           0         1           set_robust_list\n  0.00    0.000000           0         1           eventfd2\n  0.00    0.000000           0         1           epoll_create1\n  0.00    0.000000           0         1           pipe2\n  0.00    0.000000           0         1           socket\n  0.00    0.000000           0         1           bind\n  0.00    0.000000           0         1           listen\n  0.00    0.000000           0      1000           accept\n  0.00    0.000000           0         1           getsockname\n  0.00    0.000000           0      2000      1000 recv\n  0.00    0.000000           0         1           setsockopt\n------ ----------- ----------- --------- --------- ----------------\n100.00    0.000503                 24977      5103 total\nAs you can see there are 5103 errors, the worst offender being the open syscall which I suspect has to do with files not being found (ENOENT). To my surprise epoll didn't look like a troubler, as I heard of many horror stories about it.\nI wish to post the full strace which goes into the detail of every single call, but it is way too large.\nA final note; I also set the following system parameters (which are the maximum allowed amount) hoping it would change the situation but it didn't:\necho \u201c32768   61000\u2033 > /proc/sys/net/ipv4/ip_local_port_range\nsysctl -w fs.file-max=128000\nsysctl -w net.ipv4.tcp_keepalive_time=300\nsysctl -w net.core.somaxconn=61000\nsysctl -w net.ipv4.tcp_max_syn_backlog=2500\nsysctl -w net.core.netdev_max_backlog=2500\nulimit -n 1024\nMy question is, given that the sample I'm using can't be changed so much to fix these issues, where should I look to correct them?\nFor a comparison I made the following \"Hello World\" script with Wheezy.web & Gevent and I got ~2000 Requests per second:\nfrom gevent import monkey\nmonkey.patch_all()\nfrom gevent import pywsgi\nfrom wheezy.http import HTTPResponse\nfrom wheezy.http import WSGIApplication\nfrom wheezy.routing import url\nfrom wheezy.web.handlers import BaseHandler\nfrom wheezy.web.middleware import bootstrap_defaults\nfrom wheezy.web.middleware import path_routing_middleware_factory\n\ndef helloworld(request):\n    response = HTTPResponse()\n    response.write('hello world')\n    return response\n\n\nroutes = [\n    url('hello', helloworld, name='helloworld')\n]\n\n\noptions = {}\nmain = WSGIApplication(\n    middleware=[\n        bootstrap_defaults(url_mapping=routes),\n        path_routing_middleware_factory\n    ],\n    options=options\n)\n\n\nserver = pywsgi.WSGIServer(('127.0.0.1', 5000), main, backlog=128000)\nserver.serve_forever()\nAnd the benchmark results:\nab -k -n 1000 -c 1000 http://127.0.0.1:5000/hello\n\nBenchmarking 127.0.0.1 (be patient)\nCompleted 100 requests\nCompleted 200 requests\nCompleted 300 requests\nCompleted 400 requests\nCompleted 500 requests\nCompleted 600 requests\nCompleted 700 requests\nCompleted 800 requests\nCompleted 900 requests\nCompleted 1000 requests\nFinished 1000 requests\n\n\nServer Software:        \nServer Hostname:        127.0.0.1\nServer Port:            5000\n\nDocument Path:          /front\nDocument Length:        11 bytes\n\nConcurrency Level:      1000\nTime taken for tests:   0.484 seconds\nComplete requests:      1000\nFailed requests:        0\nWrite errors:           0\nKeep-Alive requests:    0\nTotal transferred:      170000 bytes\nHTML transferred:       11000 bytes\nRequests per second:    2067.15 [#/sec] (mean)\nTime per request:       483.758 [ms] (mean)\nTime per request:       0.484 [ms] (mean, across all concurrent requests)\nTransfer rate:          343.18 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    8  10.9      0      28\nProcessing:     2   78  39.7     56     263\nWaiting:        2   78  39.7     56     263\nTotal:         18   86  42.6     66     263\n\nPercentage of the requests served within a certain time (ms)\n  50%     66\n  66%     83\n  75%    129\n  80%    131\n  90%    152\n  95%    160\n  98%    178\n  99%    182\n 100%    263 (longest request)\nI find Wheezy.web's speed great, but I'd still like to use Flask as it's far simpler and less time consuming to work with.\n2", "issue_status": "Closed", "issue_reporting_time": "2014-05-30T11:30:28Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1243": {"issue_url": "https://github.com/pallets/flask/issues/1072", "issue_id": "#1072", "issue_summary": "incomplete formatted string expression", "issue_description": "jarmstro commented on 28 May 2014 \u2022\nedited by untitaker\nin the example code of doc page\nhttp://flask.pocoo.org/docs/patterns/mongokit/\nthe formatted string expression in the exception has two %s placeholders but only one variable.\nsee excerpt following:\n'''\nHere is an example document (put this also into app.py, e.g.):\ndef max_length(length):\ndef validate(value):\nif len(value) <= length:\nreturn True\nraise Exception('%s must be at most %s characters long' % length)\nreturn validate\n'''", "issue_status": "Closed", "issue_reporting_time": "2014-05-28T17:15:11Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1244": {"issue_url": "https://github.com/pallets/flask/issues/1071", "issue_id": "#1071", "issue_summary": "cannot read static file whose path include Chinese chars under Windows OS", "issue_description": "honglei commented on 27 May 2014\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xd6 in position 17: ordinal not in range(128)\nFile \"c:\\Users\\honglei\\AppData\\Local\\Enthought\\Canopy\\User\\Lib\\site-packages\\waitress\\task.py\", line 74, in handler_thread\ntask.service()\nFile \"c:\\Users\\honglei\\AppData\\Local\\Enthought\\Canopy\\User\\Lib\\site-packages\\waitress\\channel.py\", line 337, in service\ntask.service()\nFile \"c:\\Users\\honglei\\AppData\\Local\\Enthought\\Canopy\\User\\Lib\\site-packages\\waitress\\task.py\", line 173, in service\nself.execute()\nFile \"c:\\Users\\honglei\\AppData\\Local\\Enthought\\Canopy\\User\\Lib\\site-packages\\waitress\\task.py\", line 392, in execute\napp_iter = self.channel.server.application(env, start_response)\nFile \"c:\\Users\\honglei\\AppData\\Local\\Enthought\\Canopy\\User\\Lib\\site-packages\\flask\\app.py\", line 1917, in call\nreturn self.wsgi_app(environ, start_response)\nFile \"c:\\Users\\honglei\\AppData\\Local\\Enthought\\Canopy\\User\\Lib\\site-packages\\flask\\app.py\", line 1901, in wsgi_app\nresponse = self.make_response(self.handle_exception(e))\nFile \"c:\\Users\\honglei\\AppData\\Local\\Enthought\\Canopy\\User\\Lib\\site-packages\\flask\\app.py\", line 1483, in handle_exception\nself.log_exception((exc_type, exc_value, tb))\nFile \"c:\\Users\\honglei\\AppData\\Local\\Enthought\\Canopy\\User\\Lib\\site-packages\\flask\\app.py\", line 1499, in log_exception\n), exc_info=exc_info)\nFile \"c:\\Users\\honglei\\AppData\\Local\\Enthought\\Canopy\\User\\Lib\\site-packages\\flask\\app.py\", line 1898, in wsgi_app\nresponse = self.full_dispatch_request()\nFile \"c:\\Users\\honglei\\AppData\\Local\\Enthought\\Canopy\\User\\Lib\\site-packages\\flask\\app.py\", line 1553, in full_dispatch_request\nrv = self.handle_user_exception(e)\nFile \"c:\\Users\\honglei\\AppData\\Local\\Enthought\\Canopy\\User\\Lib\\site-packages\\flask\\app.py\", line 1457, in handle_user_exception\nreraise(exc_type, exc_value, tb)\nFile \"c:\\Users\\honglei\\AppData\\Local\\Enthought\\Canopy\\User\\Lib\\site-packages\\flask\\app.py\", line 1551, in full_dispatch_request\nrv = self.dispatch_request()\nFile \"c:\\Users\\honglei\\AppData\\Local\\Enthought\\Canopy\\User\\Lib\\site-packages\\flask\\app.py\", line 1537, in dispatch_request\nreturn self.view_functionsrule.endpoint\nFile \"c:\\Users\\honglei\\AppData\\Local\\Enthought\\Canopy\\User\\Lib\\site-packages\\flask\\helpers.py\", line 872, in send_static_file\ncache_timeout=cache_timeout)\nFile \"c:\\Users\\honglei\\AppData\\Local\\Enthought\\Canopy\\User\\Lib\\site-packages\\flask\\helpers.py\", line 617, in send_from_directory\nfilename = safe_join(directory, filename)\nFile \"c:\\Users\\honglei\\AppData\\Local\\Enthought\\Canopy\\User\\Lib\\site-packages\\flask\\helpers.py\", line 587, in safe_join\nreturn os.path.join(directory, filename)\nFile \"C:\\Users\\honglei\\AppData\\Local\\Enthought\\Canopy\\App\\appdata\\canopy-1.3.0.1715.win-x86_64\\Lib\\ntpath.py\", line 108, in join\npath += \"\" + b\ndirectory\n'F:\\Flask\\EmberJS\\xd6\\xd0\\xce\\xc4\\Prj\\static'\nfilename\nu'todomvc/index.html'\nsafe_join(directory.decode(sys.getfilesystemencoding()),filename)\nu'F:\\Flask\\EmberJS\\u4e2d\\u6587\\Prj\\static\\todomvc/index.html'", "issue_status": "Closed", "issue_reporting_time": "2014-05-27T14:12:54Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1245": {"issue_url": "https://github.com/pallets/flask/issues/1070", "issue_id": "#1070", "issue_summary": "How to catch the whole request lifetime in Flask", "issue_description": "Contributor\nfengsp commented on 25 May 2014\nI am writing a little extension Flask-Profile, nothing serious but one tiny tool to do profiling for Flask.\nFirstly I use one middleware(which is quite obvious for my purpose), middleware is working great on catching the whole thing but with one issue. I can not append the\nprofiling result to the response which is already sent, and I really do not want to see\nthe result using another way.\nThen I use the before_request and after_request hook, more issues appear, now I can modify the response to append my profiling result, though, all other extensions have\nto be used after Flask-Profile so they can be profiled. Also I am not catching the whole\nlifetime, I do not catch the request_context pushing and session related stuff, session\nis opened during the request_context pushing and is saved after after_request hooks\nwere executed.\nTry to use the request-started and request-finished signal. Issues exist, signalling support is available only when blinker library is installed, and I still can not catch the\nsession opening. The good news is that all extensions can be caught no matter which\none calls init_app first.\nAfter all this, What I want is one hook that is called just after request get in and request_context is pushed(however session are not opened) and another hook that is called after process_response, both of which Flask does not have.\nI can only think of monkeying patching the Flask.wsgi_app which is the last thing I want to do. Any better ideas?", "issue_status": "Closed", "issue_reporting_time": "2014-05-25T04:46:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1246": {"issue_url": "https://github.com/pallets/flask/issues/1069", "issue_id": "#1069", "issue_summary": "Flask re-raise exception that already been processed.", "issue_description": "honglei commented on 25 May 2014\nI get an an error during request to a static html file.\nserving on http://0.0.0.0:8080\nERROR:main:Exception on /static/bloggr-client/index.html [GET]\nTraceback (most recent call last):\nFile \"c:\\users\\honglei\\appdata\\local\\enthought\\canopy\\user\\lib\\site-packages\\flask\\app.py\", line 1898, in wsgi_app\nresponse = self.full_dispatch_request()\nFile \"c:\\users\\honglei\\appdata\\local\\enthought\\canopy\\user\\lib\\site-packages\\flask\\app.py\", line 1553, in full_dispatch_request\nrv = self.handle_user_exception(e)\nFile \"c:\\users\\honglei\\appdata\\local\\enthought\\canopy\\user\\lib\\site-packages\\flask\\app.py\", line 1457, in handle_user_exception\nreraise(exc_type, exc_value, tb)\nFile \"c:\\users\\honglei\\appdata\\local\\enthought\\canopy\\user\\lib\\site-packages\\flask\\app.py\", line 1551, in full_dispatch_request\nrv = self.dispatch_request()\nFile \"c:\\users\\honglei\\appdata\\local\\enthought\\canopy\\user\\lib\\site-packages\\flask\\app.py\", line 1537, in dispatch_request\nreturn self.view_functionsrule.endpoint\nFile \"c:\\users\\honglei\\appdata\\local\\enthought\\canopy\\user\\lib\\site-packages\\flask\\helpers.py\", line 872, in send_static_file\ncache_timeout=cache_timeout)\nFile \"c:\\users\\honglei\\appdata\\local\\enthought\\canopy\\user\\lib\\site-packages\\flask\\helpers.py\", line 623, in send_from_directory\nreturn send_file(filename, **options)\nFile \"c:\\users\\honglei\\appdata\\local\\enthought\\canopy\\user\\lib\\site-packages\\flask\\helpers.py\", line 498, in send_file\nmimetype = mimetypes.guess_type(filename or attachment_filename)[0]\nFile \"C:\\Users\\honglei\\AppData\\Local\\Enthought\\Canopy\\App\\appdata\\canopy-1.3.0.1715.win-x86_64\\lib\\mimetypes.py\", line 297, in guess_type\ninit()\nFile \"C:\\Users\\honglei\\AppData\\Local\\Enthought\\Canopy\\App\\appdata\\canopy-1.3.0.1715.win-x86_64\\lib\\mimetypes.py\", line 358, in init\ndb.read_windows_registry()\nFile \"C:\\Users\\honglei\\AppData\\Local\\Enthought\\Canopy\\App\\appdata\\canopy-1.3.0.1715.win-x86_64\\lib\\mimetypes.py\", line 258, in read_windows_registry\nfor subkeyname in enum_types(hkcr):\nFile \"C:\\Users\\honglei\\AppData\\Local\\Enthought\\Canopy\\App\\appdata\\canopy-1.3.0.1715.win-x86_64\\lib\\mimetypes.py\", line 249, in enum_types\nctype = ctype.encode(default_encoding) # omit in 3.x!\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xb0 in position 1: ordinal not in range(128)\nctype's value\n'.\\xb0\\xa2\\xc0\\xef\\xcd\\xfa\\xcd\\xfa\\xbd\\xd3\\xca\\xd5\\xb5\\xc4\\xbf\\xc9\\xd2\\xc9\\xce\\xc4\\xbc\\xfe'\nI don't think a unkown ctype in Windows's registry should cause Flask give up user's request.", "issue_status": "Closed", "issue_reporting_time": "2014-05-24T19:21:21Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1247": {"issue_url": "https://github.com/pallets/flask/issues/1068", "issue_id": "#1068", "issue_summary": "JSONEncoder support for datetime.date and datetime.time serialization", "issue_description": "Contributor\nalanhamlett commented on 24 May 2014\nDatabases support not just DateTime objects but also Date and Time objects, but Flask's jsonify doesn't:\nTypeError: datetime.time(0, 0) is not JSON serializable\nThis would be an easy pull request, but I want to check if it's been discussed before. Is there any reason why I should not add support for datetime.time and datetime.date objects to JSONEncoder?", "issue_status": "Closed", "issue_reporting_time": "2014-05-24T09:54:48Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1248": {"issue_url": "https://github.com/pallets/flask/issues/1067", "issue_id": "#1067", "issue_summary": "Documentation .mobi file not found", "issue_description": "klaus-weiss commented on 22 May 2014\nThe .mobi file of the documentation has gone missing, does anyone know the whereabouts of it?\nEDIT: #841", "issue_status": "Closed", "issue_reporting_time": "2014-05-21T19:18:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1249": {"issue_url": "https://github.com/pallets/flask/issues/1065", "issue_id": "#1065", "issue_summary": "PREFERRED_URL_SCHEME behavior question", "issue_description": "pypingou commented on 20 May 2014\nI have a flask application deployed behind a reversed proxy.\nThe proxy is configured to use https, the application server running the flask application is using http.\nWhen setting PREFERRED_URL_SCHEME='https' in the configuration I expected flask to return a location in the headers using https. Using curl we could check the location returned and they are using http.\nI added debugging statement to the application just before the return flask.redirect(flask.url_for()) is called.\nprint APP.config['PREFERRED_URL_SCHEME'] returns 'https'\nprint flask.current_app.config['PREFERRED_URL_SCHEME'] returns 'https'\nprint flask.redirect(url) returns <BaseResponse 249 bytes [302 FOUND]>\nUsing the logic presented at http://flask.pocoo.org/snippets/35/ we could make the location returned use https however it was my understanding that setting correctly PREFERRED_URL_SCHEME would spare us from having to add more code in our application to support https.\nCould you please let me know whether this is indeed the expected behavior or our original expectations were the correct one?\nFull disclaimer: the application is still running flask 0.9", "issue_status": "Closed", "issue_reporting_time": "2014-05-19T19:36:05Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1250": {"issue_url": "https://github.com/pallets/flask/issues/1060", "issue_id": "#1060", "issue_summary": "Blueprint view with same name will be override", "issue_description": "Contributor\nsteelywing commented on 16 May 2014\nReproduce:\nclone https://github.com/SteelyWing/flask-blueprint-test.git\nrun index.py\nopen http://localhost:5000/bp-0/ , display blueprint 0 (Correct)\nopen http://localhost:5000/bp-1/ , display blueprint 0 (Incorrect)\nclose index.py\nrun index.py\nopen http://localhost:5000/bp-1/ , display blueprint 1 (Correct)\nopen http://localhost:5000/bp-0/ , display blueprint 1 (Incorrect)\nclose index.py\nIs it the cache issue ? I tried if rename blueprint_0/index.html to blueprint_0/bp_0.html, and blueprint_1/index.html to blueprint_1/bp_1.html, all work.\nI also add a test of this, please have a see of THIS", "issue_status": "Closed", "issue_reporting_time": "2014-05-16T12:09:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1251": {"issue_url": "https://github.com/pallets/flask/issues/1059", "issue_id": "#1059", "issue_summary": "flask-uploads", "issue_description": "schaefer0 commented on 15 May 2014\nHi,\nI was searching for examples for flask-uploads to see if it is useful at all and discovered there needs to be:\ndisambiguation between examples per version as the flask-uploads API has changed significantly between versions.\ndisambiguation in examples between what is flask and what is the database\na database free or at least a database isolated example:\nI downloaded sqlacademy only to discover the flask-uploads part of the example was out of date, I am now trying how to modify the couchDB example w/o having to install couchDB.\nI know you all aren't responsible for other's examples, but if you could provide your own working example, that would help greatly. Basically you are hurting your cause by making flask extensions difficult to use.\nThanks!", "issue_status": "Closed", "issue_reporting_time": "2014-05-15T15:09:42Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1252": {"issue_url": "https://github.com/pallets/flask/issues/1051", "issue_id": "#1051", "issue_summary": "Docs: cli.rst typos", "issue_description": "riverrun commented on 9 May 2014\nThere are a couple of typos in cli.rst file.\nThe command 'python -m flask' appears with no space between the m and the f of flask (I presume this is an error).\nIn Script Info section, the first reasons is spelt 'rasons' (OK, not so important I know, but ...)", "issue_status": "Closed", "issue_reporting_time": "2014-05-09T01:08:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1253": {"issue_url": "https://github.com/pallets/flask/issues/1048", "issue_id": "#1048", "issue_summary": "cannot run example flaskr", "issue_description": "vatslav commented on 7 May 2014\nclone repository flask\ncd PycharmProjects/flask/examples/flaskr/\npython flaskr.py\nerror output:\nTraceback (most recent call last):\nFile \"flaskr.py\", line 48, in\n@app.cli.command('initdb')\nAttributeError: 'Flask' object has no attribute 'cli'\nI checked, did not found attribut 'cli'", "issue_status": "Closed", "issue_reporting_time": "2014-05-07T13:54:33Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1254": {"issue_url": "https://github.com/pallets/flask/issues/1047", "issue_id": "#1047", "issue_summary": "testsuite status, 0.10.; FAILED (failures=3, errors=2)", "issue_description": "idella commented on 6 May 2014\nwith pypy; $ pypy -V\nPython 2.7.3 (87aa9de10f9ca71da9ab4a3d53e0ba176b67d086, Apr 09 2014, 00:32:56) [PyPy 2.2.1]\n * pypy: running distutils-r1_run_phase python_test\n............E...............................................................................................................F..........................F.............................F......................................E............\n======================================================================\nERROR: test_build_error_handler (flask.testsuite.basic.BasicFunctionalityTestCase)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/mnt/gen2/TmpDir/portage/dev-python/flask-0.10.1-r1/work/Flask-0.10.1/flask/testsuite/basic.py\", line 758, in test_build_error_handler\n    flask.url_for('spam')\nTypeError: exceptions must be old-style classes or derived from BaseException, not NoneType\n\n======================================================================\nERROR: test_session_transactions_no_null_sessions (flask.testsuite.testing.TestToolsTestCase)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/mnt/gen2/TmpDir/portage/dev-python/flask-0.10.1-r1/work/Flask-0.10.1/flask/testsuite/testing.py\", line 106, in test_session_transactions_no_null_sessions\n    with c.session_transaction() as sess:\nTypeError: exceptions must be old-style classes or derived from BaseException, not NoneType\n\n======================================================================\nFAIL: test_uninstalled_package_paths (flask.testsuite.config.InstanceTestCase)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/mnt/gen2/TmpDir/portage/dev-python/flask-0.10.1-r1/work/Flask-0.10.1/flask/testsuite/config.py\", line 167, in test_uninstalled_package_paths\n    self.assert_equal(app.instance_path, os.path.join(here, 'test_apps', 'instance'))\n  File \"/mnt/gen2/TmpDir/portage/dev-python/flask-0.10.1-r1/work/Flask-0.10.1/flask/testsuite/__init__.py\", line 139, in assert_equal\n    return self.assertEqual(x, y)\nAssertionError: '/mnt/gen2/TmpDir/portage/dev-python/flask-0.10.1-r1/work/Flask-0.10.1/flask/testsuite/test_apps/config_package_app/instance' != '/mnt/gen2/TmpDir/portage/dev-python/flask-0.10.1-r1/work/Flask-0.10.1/flask/testsuite/test_apps/instance'\n\n======================================================================\nFAIL: test_json_key_sorting (flask.testsuite.helpers.JSONTestCase)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/mnt/gen2/TmpDir/portage/dev-python/flask-0.10.1-r1/work/Flask-0.10.1/flask/testsuite/helpers.py\", line 200, in test_json_key_sorting\n    '}'\n  File \"/mnt/gen2/TmpDir/portage/dev-python/flask-0.10.1-r1/work/Flask-0.10.1/flask/testsuite/__init__.py\", line 139, in assert_equal\n    return self.assertEqual(x, y)\nAssertionError: Lists differ: [u'{', u'\"values\": {', u'\"0\": ... != ['{', '\"values\": {', '\"0\": \"fo...\n\nFirst differing element 4:\n\"10\": \"foo\",\n\"2\": \"foo\",\n\nDiff is 955 characters long. Set self.maxDiff to None to see it.\n\n======================================================================\nFAIL: test_appcontext_signals (flask.testsuite.signals.SignalsTestCase)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/mnt/gen2/TmpDir/portage/dev-python/flask-0.10.1-r1/work/Flask-0.10.1/flask/testsuite/signals.py\", line 118, in test_appcontext_signals\n    self.assert_equal(recorded, ['push', 'pop'])\n  File \"/mnt/gen2/TmpDir/portage/dev-python/flask-0.10.1-r1/work/Flask-0.10.1/flask/testsuite/__init__.py\", line 139, in assert_equal\n    return self.assertEqual(x, y)\nAssertionError: Lists differ: ['push', 'push'] != ['push', 'pop']\n\nFirst differing element 1:\npush\npop\n\n- ['push', 'push']\n?            ^^^\n\n+ ['push', 'pop']\n?            ^^\n\n\n----------------------------------------------------------------------\nRan 233 tests in 5.798s\n\nFAILED (failures=3, errors=2)\nditto py2.7 3.3. Not got deps installed under py3.4 at this stage.\nTo me it appears the tests are simply written for py2 py3 and pypy misses out because of how pypy selects and or uses exception classes in case of the errors triggered by these tests. As for the failures=3, well, 1 is a unicode issue, the others just don't work.\nOh. see 837", "issue_status": "Closed", "issue_reporting_time": "2014-05-06T03:49:47Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1255": {"issue_url": "https://github.com/pallets/flask/issues/1046", "issue_id": "#1046", "issue_summary": "unittest loader discover throwing \"AssertionError: View function mapping is overwriting an existing endpoint function\"", "issue_description": "docapotamus commented on 4 May 2014\nI have have an issue with unittest.TestLoader().discover() throwing the error \"AssertionError: View function mapping is overwriting an existing endpoint function\".\nI have an application as a package.\nI brake the package up logically into sub-packages (no blueprints).\nEach sub-package has a 'tests.py' file, which holds the units tests for that sub-package.\nOutside of the application package I have a script called 'run_tests.py', it uses the following code to discover the tests:\nimport unittest\n\nsuite = unittest.TestLoader().discover('<application package>', pattern='*tests.py')\nunittest.TextTestRunner().run(suite)\nAll views are stored in the sub-packages as 'views.py' these are loaded by the applications package 'init.py' when the application is run. This is also the same file the Flask() application is created.\nWhen I run the script 'run_tests.py' I get the following issue:\nAssertionError: View function mapping is overwriting an existing endpoint function: <endpint name>\nIf however I point discover at '.<sub-package' I do not get the issue.\nIt would appear that 'unittest' loads the modules each time in tries to discover.\nI know this is not a good idea for people Googling in future but I have a GH repo branch which replicates the issue: https://github.com/pjuu/pjuu/tree/0.3dev\nI am guessing I can fix this issue with an application factory instead of an 'app' variable inside the applications 'init.py'.\nI have fixed the issue by moving all tests to a separate sub package called 'tests' in which no views/endpoints are loaded.\nI have asked on IRC and been informed this may be as issue. I will happy to find out it isn't and a pointer to my own mistake/misunderstanding.\nIs this a Flask issue, a unittest issue or something else?", "issue_status": "Closed", "issue_reporting_time": "2014-05-04T16:16:51Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1256": {"issue_url": "https://github.com/pallets/flask/issues/1045", "issue_id": "#1045", "issue_summary": "static content mime-type always text/plain", "issue_description": "praveenpuglia commented on 4 May 2014\nI have this weird problem. I am trying to include css files from the static directory, the browser downloads the content of the CSS file but it says the server is sending the css with mime-type:text/plain\nIt's best explained here - http://stackoverflow.com/questions/23452967/jinja2-static-files-mime-type-always-text-plain. I am unable to include any CSS file.", "issue_status": "Closed", "issue_reporting_time": "2014-05-04T14:33:37Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1257": {"issue_url": "https://github.com/pallets/flask/issues/1044", "issue_id": "#1044", "issue_summary": "Cannot run `flask` from command line", "issue_description": "RodericDay commented on 4 May 2014\nI'm getting the same error whether installing into a blank venv with 2.7 or 3.4, straight from the git repository. It's my first day using flask (trying to initialize my db for the flaskr example).\nTraceback (most recent call last):\n  File \"/Users/roderic/Developer/testflask/bin/flask\", line 9, in <module>\n    load_entry_point('Flask==0.11-dev-20140504', 'console_scripts', 'flask')()\n  File \"/Users/roderic/Developer/testflask/lib/python2.7/site-packages/flask/cli.py\", line 352, in main\n    auto_envvar_prefix='FLASK')\n  File \"/Users/roderic/Developer/testflask/lib/python2.7/site-packages/click/core.py\", line 303, in main\n    with self.make_context(prog_name, args, **extra) as ctx:\n  File \"/Users/roderic/Developer/testflask/lib/python2.7/site-packages/click/core.py\", line 261, in make_context\n    value, args = param.handle_parse_result(ctx, opts, args)\n  File \"/Users/roderic/Developer/testflask/lib/python2.7/site-packages/click/core.py\", line 575, in handle_parse_result\n    value = self.callback(ctx, value)\n  File \"/Users/roderic/Developer/testflask/lib/python2.7/site-packages/flask/cli.py\", line 202, in set_app_id\n    ctx.ensure_object(ScriptInfo).app_import_path = value\nAttributeError: 'Context' object has no attribute 'ensure_object'", "issue_status": "Closed", "issue_reporting_time": "2014-05-04T09:25:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1258": {"issue_url": "https://github.com/pallets/flask/issues/1043", "issue_id": "#1043", "issue_summary": "Why isn't there `Blueprint.after_last_app_request`?", "issue_description": "shoooe commented on 3 May 2014\nI was expecting to be able to run a function right before the application object is destroyed (right after the last request). Just like there's a Blueprint.before_app_first_request, why isn't there the equivalent for the last request, along the lines of after_app_last_request?", "issue_status": "Closed", "issue_reporting_time": "2014-05-02T23:46:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1259": {"issue_url": "https://github.com/pallets/flask/issues/1042", "issue_id": "#1042", "issue_summary": "404 .mobi format of the Documentation", "issue_description": "bhongy commented on 29 Apr 2014\nThe \"as .mobi\" link on http://flask.pocoo.org/docs/ cannot be found (404).\nhttp://flask.pocoo.org/docs/flask-docs.mobi\nPDF, epub, and zipped HTML are fine, fyi.", "issue_status": "Closed", "issue_reporting_time": "2014-04-29T17:34:29Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1260": {"issue_url": "https://github.com/pallets/flask/issues/1041", "issue_id": "#1041", "issue_summary": "Feature: override defaults from a config file", "issue_description": "Contributor\nschlamar commented on 29 Apr 2014\nA lot of command line tools has the support to override defaults from one (or more) config files (e.g. coverage). It would be really great if click supports this out of the box.\nProof of concept (with configobj): https://gist.github.com/schlamar/11400688", "issue_status": "Closed", "issue_reporting_time": "2014-04-29T13:44:06Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1261": {"issue_url": "https://github.com/pallets/flask/issues/1038", "issue_id": "#1038", "issue_summary": "security hazard in app.route decorator ordering", "issue_description": "joernhees commented on 28 Apr 2014\nIt's quite common to use the app.route decorator together with other decorators to restrict access like this for example:\n@app.route('/foo')\n@auth.admin_required\ndef foo():\n  pass\nThis can easily become a security issue (also described in gae-init/gae-init#149) if you sloppily swap the order of the decorators:\n@auth.admin_required\n@app.route('/foo')\ndef foo():\n  pass\nThis will silently register foo without any guards and can easily hit developers \"off-guard\" ;). IMO this is a bit too easy and silent. I'd even bet that quite some people make this mistake.\nI can think of a solution based on inspection at decoration time (inside app.route above app.route.decorator) check that @app.route decorators are not decorated with anything else. This doesn't feel nice but might prevent security flaws... thoughts?\n1", "issue_status": "Closed", "issue_reporting_time": "2014-04-28T12:12:47Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1262": {"issue_url": "https://github.com/pallets/flask/issues/1037", "issue_id": "#1037", "issue_summary": "Documentation - link to Jinja website", "issue_description": "ghost commented on 28 Apr 2014\nLinks to jinja website point to this 404 page: http://jinja.pocoo.org/2/documentation/templates\nExample:\n=Templates\nThis section only gives a very quick introduction into how Jinja2 is integrated into Flask. If you want information on the template engine\u2019s syntax itself, head over to the official Jinja2 Template Documentation...", "issue_status": "Closed", "issue_reporting_time": "2014-04-28T03:47:06Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1263": {"issue_url": "https://github.com/pallets/flask/issues/1036", "issue_id": "#1036", "issue_summary": "Website Badges", "issue_description": "ghost commented on 28 Apr 2014\nWebsite badges are not showing. Images are pointing to: localhost\n<a href=\"http://localhost/\"><img\n   src=\"http://localhost/static/badges/flask-powered.png\"\n   border=\"0\"\n   alt=\"Flask powered\"\n   title=\"Flask powered\"></a>", "issue_status": "Closed", "issue_reporting_time": "2014-04-28T03:43:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1264": {"issue_url": "https://github.com/pallets/flask/issues/1034", "issue_id": "#1034", "issue_summary": "Add etag and last-modified helpers to improve cachability", "issue_description": "fb commented on 26 Apr 2014\nI noticed that there are no helpers for Etag or Last-Modified based caching.\nThat way we could use\ndef json():\n    etag(some_etag)\n    last_modified(some_timestamp)\n\n    some_response = do_expensive_stuff\n    return some_response\nwhich is very useful when you implement an API with expensive operations which often get requests for the exactly same response. Add a caching proxy and and they are only expensive once.\nSinatra (Ruby) has those helpers: https://github.com/sinatra/sinatra/blob/v1.4.5/lib/sinatra/base.rb#L439-L554", "issue_status": "Closed", "issue_reporting_time": "2014-04-25T21:16:13Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1265": {"issue_url": "https://github.com/pallets/flask/issues/1033", "issue_id": "#1033", "issue_summary": "admin notification when rate limit is reached", "issue_description": "dagallob commented on 24 Apr 2014\nHi guys,\nIs there some way of sending an email to the admins when the rate limit is reached for certain tasks?\nThanks.\nDavid.", "issue_status": "Closed", "issue_reporting_time": "2014-04-24T09:28:11Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1266": {"issue_url": "https://github.com/pallets/flask/issues/1031", "issue_id": "#1031", "issue_summary": "Serving static files from root static folder rather than blueprint's static folder", "issue_description": "avidas commented on 22 Apr 2014\nHi,\nI have a blueprint defined as :\nauth_login = Blueprint('auth_login', name, template_folder='templates', static_folder='static', static_url_path='/static')\nI am registering it as :\napp.register_blueprint(auth_login, url_prefix='/user')\nI have a route:\n@auth_login.route('//')\ndef profile(username):\nreturn render_template('profile/user.html',\nusername = username)\nWith this setup, the /user/ endpoint never manages to load the static files as I get,\n\"GET /user//static/css/lib/bootstrap.min.css HTTP/1.1\" 404 -\n\"GET /user//static/css/lib/font-awesome/css/font-awesome.min.css HTTP/1.1\" 404 -\nWhat I really want is to look into the static folder of the root application and not the blueprint, so I want it to request\n\"GET /static/css/lib/bootstrap.min.css HTTP/1.1\" 200 -\nIs it possible to configure this via static_folder or static_url_path so that the route will look for the static files at root and not relative to where the blueprint is mounted?", "issue_status": "Closed", "issue_reporting_time": "2014-04-21T23:12:52Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1267": {"issue_url": "https://github.com/pallets/flask/issues/1027", "issue_id": "#1027", "issue_summary": "Flask authentication", "issue_description": "ngprnk commented on 17 Apr 2014\ni think flask needs awesome way to implement sessions and authentication", "issue_status": "Closed", "issue_reporting_time": "2014-04-17T15:18:16Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1268": {"issue_url": "https://github.com/pallets/flask/issues/1025", "issue_id": "#1025", "issue_summary": "Calling post method in loop yields unexpected results", "issue_description": "SimplicityGuy commented on 15 Apr 2014\nserver (very basic!):\nfrom flask import (Flask, request, jsonify)\nfrom werkzeug import secure_filename\n\napp = Flask(__name__)\napp.config.from_object(__name__)\napp.config['MAX_CONTENT_LENGTH'] = 1024 * 1024 * 1024\n\n@app.route('/files', methods=['POST'])\ndef post_files():\n    r = dict()\n    r['directory'] = request.form['directory']\n    # yes, there is more code here, but this is the simplest repro!\n    return jsonify(r)\n\n\nif __name__ == '__main__':\n    app.run(debug=True, host='0.0.0.0')\nclient (with debugging output)\nfrom itertools import izip_longest\nfrom requests_toolbelt import MultipartEncoder\nimport requests\nimport os\nimport sys\nimport argparse\n\nURL = \"http://localhost:5000/files\"\n\n\ndef grouper(n, iterable, fillvalue=None):\n    args = [iter(iterable)] * n\n    return izip_longest(fillvalue=fillvalue, *args)\n\n\ndef import(source_folder, url):\n    for (path, dirs, files) in os.walk(source_folder):\n        if '.DS_Store' in files:\n            files.remove('.DS_Store')\n\n        if '.git' in dirs:\n            dirs.remove('.git')\n\n        # in order to limit the number of files being uploaded at once, keep it to 3 at a time\n        for f1, f2, f3 in grouper(3, files):\n            fields = dict()\n            fields['directory'] = os.path.basename(path)\n            if f1 is not None:\n                fields['f1'] = (f1, open(os.path.join(path, f1), 'rb'))\n            if f2 is not None:\n                fields['f2'] = (f2, open(os.path.join(path, f2), 'rb'))\n            if f3 is not None:\n                fields['f3'] = (f3, open(os.path.join(path, f3), 'rb'))\n            print fields\n            print\n            m = MultipartEncoder(fields=fields)\n            r = requests.post(url,\n                              data=m,\n                              headers={'Content-Type': m.content_type})\n            print r.json()\n            print r\n            print\n            print\n\n\ndef main():\n    parser = argparse.ArgumentParser(description='importer')\n    parser.add_argument('source',\n                        help='source folder to import from')\n    parser.add_argument('--server',\n                        help='server to upload folder to',\n                        dest='url',\n                        required=False,\n                        default=URL)\n\n    args = parser.parse_args()\n    import(args.source, args.url)\n\n\nif __name__ == '__main__':\n    status = main()\n    sys.exit(status)\nWhen I run it with an input directory that has 9 files, the first time through, I get a RESPONSE 200, second time through, I get a RESPONSE 400:\n127.0.0.1 - - [14/Apr/2014 22:02:30] \"POST /files HTTP/1.1\" 200 -\n127.0.0.1 - - [14/Apr/2014 22:02:30] \"POST /files HTTP/1.1\" 400 -\nAny idea why this is happening?", "issue_status": "Closed", "issue_reporting_time": "2014-04-15T05:06:18Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1269": {"issue_url": "https://github.com/pallets/flask/issues/1024", "issue_id": "#1024", "issue_summary": "Flask performance issue", "issue_description": "Contributor\nfengsp commented on 15 Apr 2014\nI know benchmark is a lie, still, can we do any improvement? I love Flask and really feel bad when flask loses always in these benchmarks.\nSo what do you guys think about this issue? Is it really a issue or what? Is any improvement necessary? If no, why?\nhttp://blog.startifact.com/posts/webob-and-werkzeug-compared.html\nhttp://faruk.akgul.org/blog/python-web-frameworks-benchmark/\nhttp://mindref.blogspot.com/2012/09/python-fastest-web-framework.html\n......", "issue_status": "Closed", "issue_reporting_time": "2014-04-15T04:05:43Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1270": {"issue_url": "https://github.com/pallets/flask/issues/1023", "issue_id": "#1023", "issue_summary": "About flask docs translations", "issue_description": "liks79 commented on 14 Apr 2014\n#756\nHello @kennethreitz , We've created 'flask-docs-kr' project in readthedocs.org.\n(http://flask-docs-kr.readthedocs.org/ko/latest/)\nWe hope to enable 'flask.readthedocs.org/ko/latest' URL.\nPlease add our flask-docs-kr project to official flask readthedocs.org project.\n('Admin -> Translations -> Existing Translations')\nThanks.", "issue_status": "Closed", "issue_reporting_time": "2014-04-14T01:31:17Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1271": {"issue_url": "https://github.com/pallets/flask/issues/1021", "issue_id": "#1021", "issue_summary": "Change testsuite to be compatible with py.test and nose", "issue_description": "Member\nuntitaker commented on 13 Apr 2014\nCurrently py.test fails to discover any tests. It'd be nice if Flask's, Werkzeug's and Jinja's testsuites could be modified so that third-party testrunners like py.test and nose are able to run them correctly.", "issue_status": "Closed", "issue_reporting_time": "2014-04-13T07:26:46Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1272": {"issue_url": "https://github.com/pallets/flask/issues/1020", "issue_id": "#1020", "issue_summary": "Odd error while running run-tests.py under coverage.py", "issue_description": "rawrgulmuffins commented on 13 Apr 2014\nCloned the latest Flask source from github with the intention of increase flasks test coverage and the first thing I did was run-tests.\nOutput was,\nRan 240 tests in 1.415s\n\nOK\nWhen I ran-tests under coverage however I received this error.\ncoverage run run-tests.py .................................................................................................................................E..............................................................................................................\n======================================================================\nERROR: test_main_module_paths (flask.testsuite.config.InstanceTestCase)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/Users/happy/opt/lib/python3.4/pkgutil.py\", line 481, in find_loader\n    spec = importlib.util.find_spec(fullname)\n  File \"/Users/happy/opt/lib/python3.4/importlib/util.py\", line 100, in find_spec\n    raise ValueError('{}.__spec__ is None'.format(name))\nValueError: __main__.__spec__ is None\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/Users/happy/flask/flask_source/flask/flask/testsuite/config.py\", line 198, in test_main_module_paths\n    from main_app import app\n  File \"/Users/happy/flask/flask_source/flask/flask/testsuite/test_apps/main_app.py\", line 4, in <module>\n    app = flask.Flask('__main__')\n  File \"/Users/happy/flask/flask_source/flask/flask/app.py\", line 354, in __init__\n    instance_path = self.auto_find_instance_path()\n  File \"/Users/happy/flask/flask_source/flask/flask/app.py\", line 645, in auto_find_instance_path\n    prefix, package_path = find_package(self.import_name)\n  File \"/Users/happy/flask/flask_source/flask/flask/helpers.py\", line 704, in find_package\n    loader = pkgutil.get_loader(root_mod_name)\n  File \"/Users/happy/opt/lib/python3.4/pkgutil.py\", line 467, in get_loader\n    return find_loader(fullname)\n  File \"/Users/happy/opt/lib/python3.4/pkgutil.py\", line 487, in find_loader\n    raise ImportError(msg.format(fullname, type(ex), ex)) from ex\nImportError: Error while finding loader for '__main__' (<class 'ValueError'>: __main__.__spec__ is None)\n\n----------------------------------------------------------------------\nRan 240 tests in 1.703s\n\nFAILED (errors=1)\nEnvironment:\nOS X 10.8.5 (12F45)\nPython3.4\n    pip freeze produces\n        Flask==0.10.1\n        Jinja2==2.7.2\n        MarkupSafe==0.19\n        Werkzeug==0.9.4\n        coverage==3.7.1\n        itsdangerous==0.24\nUnsure at this point if this is a coverage.py issue or a flask issue.", "issue_status": "Closed", "issue_reporting_time": "2014-04-13T06:04:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1273": {"issue_url": "https://github.com/pallets/flask/issues/1016", "issue_id": "#1016", "issue_summary": "Flash category constants", "issue_description": "l0b0 commented on 9 Apr 2014\nIt would be useful to be able to refer to flash categories using constants, for example:\nFLASH_CATEGORY_MESSAGE = 'message'\nFLASH_CATEGORY_DEFAULT = FLASH_CATEGORY_MESSAGE\nThis gives an overview of the already defined categories, and an obvious way to avoid duplicating these in every Flask application.", "issue_status": "Closed", "issue_reporting_time": "2014-04-09T14:17:29Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1274": {"issue_url": "https://github.com/pallets/flask/issues/1015", "issue_id": "#1015", "issue_summary": "Add flask-bouncer to extension registry", "issue_description": "jtushman commented on 6 Apr 2014\nHi guys:\nI wrote flask-bouncer, a authorization library based on RyanBates' CanCan ruby gem\ndocs: http://pythonhosted.org/flask-bouncer/\ngithub: https://github.com/jtushman/flask-bouncer\npypi: https://pypi.python.org/pypi/flask-bouncer/0.1.11\nWould love to have it listed in flask-registry. I hope it will be useful for the community.\nAny feedback will be well received\nThanks!", "issue_status": "Closed", "issue_reporting_time": "2014-04-05T19:41:33Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1275": {"issue_url": "https://github.com/pallets/flask/issues/1011", "issue_id": "#1011", "issue_summary": "Python 3.4 changed `pkgutil.get_loader` behavior", "issue_description": "mitgr81 commented on 2 Apr 2014\nIn doing a test upgrade to python 3.4 I encountered the following traceback (snippet)\n  File \"/my/virtualenv/wonderboom34/lib/python3.4/site-packages/flask/app.py\", line 319, in __init__\n    template_folder=template_folder)\n  File \"/my/virtualenv/wonderboom34/lib/python3.4/site-packages/flask/helpers.py\", line 742, in __init__\n    self.root_path = get_root_path(self.import_name)\n  File \"/my/virtualenv/wonderboom34/lib/python3.4/site-packages/flask/helpers.py\", line 631, in get_root_path\n    loader = pkgutil.get_loader(import_name)\n  File \"/usr/local/Cellar/python3/3.4.0/Frameworks/Python.framework/Versions/3.4/lib/python3.4/pkgutil.py\", line 467, in get_loader\n    return find_loader(fullname)\n  File \"/usr/local/Cellar/python3/3.4.0/Frameworks/Python.framework/Versions/3.4/lib/python3.4/pkgutil.py\", line 488, in find_loader\n    return spec.loader\nAttributeError: 'NoneType' object has no attribute 'loader'\nI was able to resolve it with the following:\ndiff --git a/helpers.py b/helpers.py\nindex 62a64bb..f671c27 100644\n--- a/helpers.py\n+++ b/helpers.py\n@@ -628,7 +628,10 @@ def get_root_path(import_name):\n         return os.path.dirname(os.path.abspath(mod.__file__))\n\n     # Next attempt: check the loader.\n-    loader = pkgutil.get_loader(import_name)\n+    try:\n+        loader = pkgutil.get_loader(import_name)\n+    except AttributeError:\n+        loader = None\n\n     # Loader does not exist or we're referring to an unloaded main module\n     # or a main module without path (interactive sessions), go with the\n@@ -658,7 +661,10 @@ def find_package(import_name):\n     folder structure exists (lib, share etc.).\n     \"\"\"\n     root_mod_name = import_name.split('.')[0]\n-    loader = pkgutil.get_loader(root_mod_name)\n+    try:\n+        loader = pkgutil.get_loader(root_mod_name)\n+    except AttributeError:\n+        loader = None\n\n     if loader is None or import_name == '__main__':\n         # import name is not found, or interactive/main module\nIf you want a formal pull request, I'd be happy to provide one, and do it \"right\", this feels pretty brute-force, I'm sure there's a better way.", "issue_status": "Closed", "issue_reporting_time": "2014-04-01T18:54:03Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1276": {"issue_url": "https://github.com/pallets/flask/issues/1009", "issue_id": "#1009", "issue_summary": "Ajax render selected complete EmbeddedDocument", "issue_description": "lov3catch commented on 26 Mar 2014\nHi!\nflask-admin, mongoengine\nI have EmbeddedDocument objects and I want render to page selected EmbeddedDocument. Selected from .\nHow I can render EmbeddedDocument by ID?\nHave any standart decision?", "issue_status": "Closed", "issue_reporting_time": "2014-03-26T10:22:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1277": {"issue_url": "https://github.com/pallets/flask/issues/1008", "issue_id": "#1008", "issue_summary": "The Flask Mailinglist page is out of date", "issue_description": "lingthio commented on 24 Mar 2014\nThe Flask Mailinglist page:\nhttp://flask.pocoo.org/mailinglist/\nmentions this page:\nhttp://flask.pocoo.org/mailinglist/archive/\nWhich shows the latest email from 2012-10-29, giving the impression that the Flask community is no longer active\nThis page seems to be up to date:\nhttp://librelist.com/browser/flask/\nPlease update http://flask.pocoo.org/mailinglist/ to reflect this change.\nThank you.", "issue_status": "Closed", "issue_reporting_time": "2014-03-24T03:07:57Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1278": {"issue_url": "https://github.com/pallets/flask/issues/1007", "issue_id": "#1007", "issue_summary": "Flask can't read multipart form boundaries from custom HTTP clients", "issue_description": "TMiguelT commented on 23 Mar 2014\nI consistently get the error \"TypeError: cannot concatenate 'str' and 'NoneType' objects\" whenever I send a multipart form from anywhere that's not an HTML\n.\nFor example AndroidQuery's, Apache HttpClient, and the Chrome Postman plugin all give this error.\nTrace:\nFile \"C:\\Python27\\lib\\site-packages\\werkzeug\\formparser.py\", line 382, in parse_lines\nnext_part = b'--' + boundary", "issue_status": "Closed", "issue_reporting_time": "2014-03-23T05:44:31Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1279": {"issue_url": "https://github.com/pallets/flask/issues/1006", "issue_id": "#1006", "issue_summary": "Set app.jinja_env.undefined to something better when debug = True", "issue_description": "Member\nuntitaker commented on 20 Mar 2014\nCurrently missing attributes of template variables are swallowed by Flask, even\nin debug mode:\n@app.route('/')\ndef index():\n    # template contains:\n    # {{ lol.asdf }}\n    return flask.render_template('lol.htm', lol=3)\nI propose we set app.jinja_env.undefined to some type that logs warnings to\nconsole when Flask's debug mode is enabled.", "issue_status": "Closed", "issue_reporting_time": "2014-03-20T14:55:40Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1280": {"issue_url": "https://github.com/pallets/flask/issues/1005", "issue_id": "#1005", "issue_summary": "Using encodings other than UTF-8 in Response", "issue_description": "barosl commented on 20 Mar 2014\nThe Flask documentation states that Flask assumes the encoding of the response to be UTF-8.\nthe encoding for text on your website is UTF-8\n\nFrom http://flask.pocoo.org/docs/unicode/\nDoes that mean we are discouraged to use the encodings other than UTF-8 in the Flask response? I was unable to find a way to change the intended encoding of neither flask.wrappers.Response nor werkzeug.wrappers.Response correctly.\nI cannot directly pass the text to the constructor, as it calls set_data() with the UTF-8 encoding. That's because the constructor has no charset parameter. There is no way to change its behavior. So I should create the response object with no constructor arguments, and then assign 'utf-8' to response.charset, and call response.set_data().\nBut still, as content_type is determined in the constructor, it will still be \"text/html; charset=UTF-8\" because the charset attribute is always 'utf-8' during the object creation process. So I'm forced to pass content_type to the constructor, which is kinda confusing because my original intention was just changing the encoding, rather than explicitly setting the Content-Type.\nDo I understand the process accurately?\nIf I'm right, I suggest:\nAllow passing charset to the Response class.\nOr, the content_type attribute should be updated again when the user manually sets the charset attribute.", "issue_status": "Closed", "issue_reporting_time": "2014-03-19T21:17:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1281": {"issue_url": "https://github.com/pallets/flask/issues/1002", "issue_id": "#1002", "issue_summary": "Allow using |tojson in double-quoted HTML attributes again", "issue_description": "Contributor\njoeyespo commented on 17 Mar 2014\nI'm in a project where double-quoted HTML attributes is part of the style guide. We're also using data- attributes to pass data to code and consider it a bad practice to render anything directly within scripts.\nBeing able to remove |safe within <script> seems convenient at first glance. But after discovering that it changes the behavior of |tojson everywhere else when using double-quoted attributes, it doesn't seem as nice. It's just less intuitive overall. Forcing you to use a particular HTML style or requiring |forceescape (as opposed to just |e) isn't really a great tradeoff for implying |safe within <script>.\nSo the underlying question. Can we allow |tojson to work within double-quotes attributes again? Or is there some technical reason why we can't. And if not, why not add another filter to use within <script> blocks instead so the principal of least surprise isn't violated?", "issue_status": "Closed", "issue_reporting_time": "2014-03-16T22:36:46Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1282": {"issue_url": "https://github.com/pallets/flask/issues/1001", "issue_id": "#1001", "issue_summary": "Please document PyCharm support", "issue_description": "qtaraki commented on 16 Mar 2014\nFlask is great, but it would be nice if you document a quick start with PyCharm", "issue_status": "Closed", "issue_reporting_time": "2014-03-16T02:39:35Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1283": {"issue_url": "https://github.com/pallets/flask/issues/999", "issue_id": "#999", "issue_summary": "send_file in combination with chrome on android", "issue_description": "sander76 commented on 13 Mar 2014\nA cStringIO file containing pdf data is uploaded using send_file:\n# pdf is the cStringIO instance.\nreturn send_file(pdf, mimetype=\"application/pdf\",\n                         as_attachment=True,\n                         attachment_filename=\"basicreport.pdf\")\nthis works on android when using firefox. On chrome the download fails with an \"Untitled\" filename.\nWhen manually creating the response manually all works fine..\nresponse = make_response(pdf.read())\nresponse.headers['Content-Type'] = 'application/pdf'\nresponse.headers['Content-Disposition'] = 'attachment; filename=basicreport.pdf'", "issue_status": "Closed", "issue_reporting_time": "2014-03-13T14:12:13Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1284": {"issue_url": "https://github.com/pallets/flask/issues/998", "issue_id": "#998", "issue_summary": "SERVER_NAME configuration should not implicitly change routing behavior.", "issue_description": "Contributor\nekoka commented on 13 Mar 2014\nWhen Flask.config['SERVER_NAME'] is set to a domain (thedomain.com:8080) it alters the route matching behavior. Requests on \"subdomained\" urls (sub1.thedomain.com:8080/some/route) then only resolve to subdomained Blueprints (Blueprints with their 'subdomain' attribute set). With app.config['SERVER_NAME'] set to None, subdomained url would also properly resolve to non-subdomained Blueprints.\nIn other words, the presence of app.config['SERVER_NAME'] effectively serves as an implicit switch to subdomain matching behaviour for Blueprints.\n(1) if this is intentional the documentation is not clear about it.\n(2) the naming of that config is not very indicative of this behavior altering property either.\n(3) this is not always the desirable behavior. Sometimes one still wants to use subdomains and set app.config['SERVER_NAME'], but does not want to map blueprints to subdomains. Such is the case for example, when using the value contained by app.config['SERVER_NAME'] to extract the subdomain info from the requested url in one's own user-defined function (a before_request handler for example). As it stands, the behavior altering property of app.config['SERVER_NAME'] forces developers in the latter use-case to set another more innocuous config property with the same value (e.g. app.config['SERVER_DOMAIN']).\nI propose that a new config flag that will explicitly enable subdomain matching behavior be added. The presence of which would make app.config['SERVER_NAME'] mandatory (can't have subdomain support without it). But the presence of app.config['SERVER_NAME'] should not impose subdomain matching behavior.", "issue_status": "Closed", "issue_reporting_time": "2014-03-13T06:28:07Z", "fixed_by": "#2635", "pull_request_summary": "Require opt-in for subdomain matching", "pull_request_description": "Member\nmitsuhiko commented on 20 Feb 2018\nThis fixes #998. An argument can be made that this should actually land in\nWerkzeug instead. Question is if we want a new release for this or not.\nCan be worked around in Flask for now.", "pull_request_status": "Merged", "issue_fixed_time": "2018-02-23T16:47:20Z", "files_changed": [["5", "CHANGES.rst"], ["15", "docs/config.rst"], ["44", "flask/app.py"], ["35", "tests/test_basic.py"], ["8", "tests/test_testing.py"]]}, "1285": {"issue_url": "https://github.com/pallets/flask/issues/996", "issue_id": "#996", "issue_summary": "Tutorial Typo: tutorial/views/#tutorial-views -- add_entry()", "issue_description": "mvagnoni commented on 6 Mar 2014\nhttp://flask.pocoo.org/docs/tutorial/views/#tutorial-views\nShould be \"sessions\" not \"session\"\n@app.route('/add', methods=['POST'])\ndef add_entry():\nif not session.get('logged_in'):", "issue_status": "Closed", "issue_reporting_time": "2014-03-05T23:21:03Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1286": {"issue_url": "https://github.com/pallets/flask/issues/995", "issue_id": "#995", "issue_summary": "Update send_file() docstring - file name required", "issue_description": "anddam commented on 5 Mar 2014\nsend_file() is assuming a file has a visible filename on the file system thus leading to errors when trying to use a file object returned by tempfile.TemporaryFile() .\nThis should be mentioned in the docstring along with the suggestion to use NamedTemporaryFile() instead of TemporaryFile() .", "issue_status": "Closed", "issue_reporting_time": "2014-03-05T09:08:31Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1287": {"issue_url": "https://github.com/pallets/flask/issues/993", "issue_id": "#993", "issue_summary": "Attempted implicit sequence conversion but the response object is in direct passthrough mode", "issue_description": "rbpasker commented on 4 Mar 2014\nCan someone please take a look at this issue in Flask-gzip? Just using flask and flask-gzip, but getting this error after upgrading from 0.9 to 0.10.1\ncloseio/Flask-gzip#7\nthis did, however, make the error go away:\n@app.after_request\ndef after_request(response):\n    response.direct_passthrough = False\n    return response", "issue_status": "Closed", "issue_reporting_time": "2014-03-04T15:50:08Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1288": {"issue_url": "https://github.com/pallets/flask/issues/990", "issue_id": "#990", "issue_summary": "Review Flask-User extension for listing, and approval", "issue_description": "lingthio commented on 1 Mar 2014\nDear Flask Team,\nTHANK YOU SO MUCH for developing such a delightful platform.\nI truly love my work in large part because of Flask!\nI have an opportunity to 'give back' to the Flask community. I would like to submit an extension for listing in the Flask Extension Registry, and have it accepted as an Approved Extension.\nWarmly,\nLing.\nExtension: https://pypi.python.org/pypi/Flask-User\nVersion: v0.3.6\nI have followed your guidelines below:\no. An approved Flask extension requires a maintainer.\nMaintainer: Ling Thio <ling.thio [at] gmail.com>\nRepository: https://github.com/lingthio/flask-user\nAn approved Flask extension must provide exactly one package or module named flask_extensionname.\nModule: flask_user\nIt must ship a testing suite that can either be invoked with make test or python setup.py test.\npython setup.py test\nRuns automated tests and coverage currently runs at 98%.\nAPIs of approved extensions will be checked\nUserManager.init(app) sets self.app = app\nUserManager.init_app(app) does NOT set self.app\nThe license must be BSD/MIT/WTFPL licensed.\nBSD License\nThe naming scheme for official extensions\nFlask-User\nApproved extensions must define all their dependencies in the setup.py file\nmkvirtualenv test # brand new env\npip install flask-user\ncan run the flask_user/example_apps/basic_app.py\nThe extension must have documentation that uses one of the two Flask themes for Sphinx documentation.\nSee http://pythonhosted.org//Flask-User/\nThe setup.py description (and thus the PyPI description) has to link to...\nThe documentation: http://pythonhosted.org//Flask-User/\nHome page: https://github.com/lingthio/flask-user\nBug track: https://github.com/lingthio/flask-user/issues\nDevelopment version: n/a\nThe zip_safe flag in the setup script must be set to False\nsetup.py:\nzip_safe=False,\nAn extension currently has to support Python 2.6 as well as Python 2.7\nTravis-CI runs Flask-Utils on Python 2.6, 2.7 and 3.3", "issue_status": "Closed", "issue_reporting_time": "2014-03-01T03:35:32Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1289": {"issue_url": "https://github.com/pallets/flask/issues/989", "issue_id": "#989", "issue_summary": "Typo in fastcgi docs", "issue_description": "volkerp commented on 26 Feb 2014\nSecond paragraph in\nhttp://flask.pocoo.org/docs/deploying/fastcgi/\nreads\nPlease make sure in advance that any app.run() calls you might have in your application file are inside an if __ name __ == '__ main __': block or moved to a separate file. Just make sure it\u2019s not called because this will always start a local WSGI server which we do not want if we deploy that application to FastCGI.\nShouldn't this be \"start a local HTTP server\"", "issue_status": "Closed", "issue_reporting_time": "2014-02-26T16:03:05Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1290": {"issue_url": "https://github.com/pallets/flask/issues/988", "issue_id": "#988", "issue_summary": "Parent task (with debug=True) doesn't properly kill children", "issue_description": "mortoray commented on 24 Feb 2014\nIf I run a server in debug mode and the kill the parent process the child process is left running. It should be killed along with the parent (as usually happens with parent-child processes).\nimport flask\napp = flask.Flask(__name__)\nif __name__ == \"__main__\":\n    app.run(debug=True)\n> ps -ef | grep python\nedA-qa   18280 16524  4 15:38 pts/7    00:00:00 python min.py\nedA-qa   18285 18280  4 15:38 pts/7    00:00:00 /usr/bin/python min.py\n> kill 18280\n> ps -ef | grep python\nedA-qa   18285     1  1 15:38 pts/7    00:00:00 /usr/bin/python min.py\nThis is interfering with my ability to use Flask as a test server in a test suite. I spawn a process with Popen and kill it when I'm done. Unfortunately the server is left and only a wrapper process is killed.", "issue_status": "Closed", "issue_reporting_time": "2014-02-24T14:39:34Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1291": {"issue_url": "https://github.com/pallets/flask/issues/986", "issue_id": "#986", "issue_summary": "Remove or downplay Tornado recommendation", "issue_description": "Contributor\nbdarnell commented on 23 Feb 2014\nhttp://flask.pocoo.org/docs/deploying/wsgi-standalone/ talks about Tornado's scaling properties, but does not mention that most of this scalability is lost when the single-threaded asynchronous server is combined with a synchronous WSGI framework like flask. I see a lot of questions on stackoverflow from people who use Flask on Tornado and are surprised that they are not getting any concurrency.\nI think it would be best to remove Tornado from this page entirely since Tornado is not really focused on being a WSGI container and WSGI apps are nearly always better served by a multi-threaded server like gunicorn or uwsgi. If you do want to keep a mention of Tornado as a WSGI server, please acknowledge its limitations (single-threaded) and that it really only makes sense when you want to combine a WSGI app with a Tornado-native app in the same process.", "issue_status": "Closed", "issue_reporting_time": "2014-02-23T04:33:22Z", "fixed_by": "#1187", "pull_request_summary": "Stop recommending Tornado as a WSGI server", "pull_request_description": "Contributor\nbdarnell commented on 25 Sep 2014\nTornado's WSGI server is less scalable than the alternatives and only really makes sense when you have a specific need to run both WSGI apps and Tornado-native apps in the same process. This recommendation has been an ongoing source of confusion, e.g. http://stackoverflow.com/questions/26015116/making-tornado-to-serve-a-request-on-a-separate-thread.\nFixes #986.", "pull_request_status": "Merged", "issue_fixed_time": "2014-09-25T15:21:44Z", "files_changed": [["22", "docs/deploying/wsgi-standalone.rst"]]}, "1292": {"issue_url": "https://github.com/pallets/flask/issues/984", "issue_id": "#984", "issue_summary": "Teardown functions sometimes receive spurious exceptions from Gunicorn", "issue_description": "astonm commented on 20 Feb 2014\nWhile using Flask-SQLAlchemy's SQLALCHEMY_COMMIT_ON_TEARDOWN feature, I noticed certain successful-looking requests didn't have their results committed to the database. After further investigation I discovered some exceptions from Gunicorn end up being passed into the teardown function Flask-SQLAlchemy uses to implement the post-request commit functionality.\nI was able to reproduce the issue on a minimal case with the code below (as test.py):\nfrom flask import Flask, redirect, request, url_for\n\napp = Flask(__name__)\napp.debug = True\n\n@app.route(\"/\")\ndef index():\n    return \"Hello World!\"\n\n@app.teardown_request\ndef teardown_request(exception=None):\n    if exception:\n        app.logger.error(\"Unexpected exception {}\".format(exception))\n\nif __name__ == \"__main__\":\n    app.run()\nWith the app run with the following line:\ngunicorn test:app -w 1\nI fairly consistently get the following output:\n2014-02-19 14:00:34 [4459] [INFO] Starting gunicorn 18.0\n2014-02-19 14:00:34 [4459] [INFO] Listening at: http://127.0.0.1:8000 (4459)\n2014-02-19 14:00:34 [4459] [INFO] Using worker: sync\n2014-02-19 14:00:34 [4462] [INFO] Booting worker with pid: 4462\n--------------------------------------------------------------------------------\nERROR in test [/Users/aston/.envs/flask-gunicorn-bug/test.py:12]:\nUnexpected exception [Errno 35] Resource temporarily unavailable\n--------------------------------------------------------------------------------\nErrno 35 is EAGAIN.\nI'm running on a Mac, but I first noticed this behavior on Heroku (it's Errno 11 there). Also, the behavior isn't consistent, and though I found it more consistently locally with app.debug = True, I noticed the behavior with debugging off (again, on Heroku).\nThere's been some discussion about this issue in Gunicorn's issues section here, but they consider EAGAIN a non-fatal exception (and as you can see from running the example, the requests always successfully return data), so the fact that Flask sees it and thinks it's real is a problem.\nI believe Gunicorn could help fix this bug by clearing sys.exc_info() after ignoring the exception (i.e. around here: https://github.com/tilgovi/gunicorn/blob/master/gunicorn/workers/sync.py#L43:L45), but it'd still be racy.\nThe real fix, I believe is for Flask not to throw arbitrary \"if not exc: exc = sys.exc_info()[1]\" in areas where no exception is being explicitly caught by the code (e.g. here). Another alternative, if that behavior is generally desirable, would be to ignore any exceptions with a stack trace that doesn't go deep enough to include any Flask or user-provided code.", "issue_status": "Closed", "issue_reporting_time": "2014-02-19T22:10:17Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1293": {"issue_url": "https://github.com/pallets/flask/issues/983", "issue_id": "#983", "issue_summary": "Can't customize url_for external links without causing 404 errors", "issue_description": "hawicz commented on 19 Feb 2014\nI have a server set up where there is a front-end web server (i.e. proxy) sitting in front of my Flask application. Because of this, I need to be able to generate external links that have a different url than the actual requests coming to my Flask application.\ne.g. my app is running on http://foo.example.com:1234/, but url_for(..., _external=True) needs to generate things like \"https://some.other.com/\"\nThe suggested way of doing this, by changing SERVER_NAME, doesn't work because that is for both url_for() and by the underlying werkzeug routing code so changing it causes 404 errors.\nWould it be feasible to add an EXTERNAL_SERVER_NAME setting that is used instead?", "issue_status": "Closed", "issue_reporting_time": "2014-02-19T16:47:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1294": {"issue_url": "https://github.com/pallets/flask/issues/981", "issue_id": "#981", "issue_summary": "Cannot lazily load views in 0.10.1", "issue_description": "str4d commented on 14 Feb 2014\nI was lazily loading views in 0.9, and some views needed to use the same function, e.g.\nurl('/<lang:lang>/blog/', 'blog.views.blog_index', defaults={'page': 1})\nurl('/<lang:lang>/blog/page/<int:page>', 'blog.views.blog_index')\nUpon updating Flask to 0.10.1, I now get the following error:\nAssertionError: View function mapping is overwriting an existing endpoint function\nThe cause is the same as #796, but your current documentation still says this is a valid way of having a central URL map.\nIs there a way around this, beyond just storing every single LazyView in a dict and looking it up each time url() is called? The above documentation needs to be updated to reflect the answer.", "issue_status": "Closed", "issue_reporting_time": "2014-02-13T20:09:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1295": {"issue_url": "https://github.com/pallets/flask/issues/978", "issue_id": "#978", "issue_summary": "autoescape false doesn't work as expected", "issue_description": "ScarletCarson commented on 11 Feb 2014\nThis works:\n{% autoescape false %}\n{{ something_without_spaces }}\n{% endautoescape %}\nThis pops with python exception:\n{% autoescape false %}\n{{ something with spaces }}\n{% endautoescape %}\nThis breaks client side jquery templating with script tags\nPython version 2.7\nFlask latest-stable", "issue_status": "Closed", "issue_reporting_time": "2014-02-10T23:11:34Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1296": {"issue_url": "https://github.com/pallets/flask/issues/976", "issue_id": "#976", "issue_summary": "\"import os\" statement missing from tutorial", "issue_description": "Godsmith commented on 10 Feb 2014\nVery minor issue - on http://flask.pocoo.org/docs/tutorial/setup/#tutorial-setup, \"import os\" should be added to the first code block.", "issue_status": "Closed", "issue_reporting_time": "2014-02-09T19:14:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1297": {"issue_url": "https://github.com/pallets/flask/issues/974", "issue_id": "#974", "issue_summary": "jsonify() ignores the sort order of an OrderedDict", "issue_description": "wmax commented on 6 Feb 2014\nHi, I would like to know whether this is a bug or a feature.\nExample:\nfrom flask import Flask, jsonify\nfrom collections import OrderedDict\napp = Flask('__name__')\n\n@app.route('/')\ndef jsonify_test():\n    unsorted_dict = {'foo': 1, 'bar': 4, 'baz': 0}\n    sorted_dict = OrderedDict(sorted(unsorted_dict.items(), key=lambda x: x[1]))\n    return jsonify(sorted_dict)\n\nif __name__ == '__main__':\n    app.run(debug = True)\nResult:\n{\n    \"bar\": 4, \n    \"baz\": 0, \n    \"foo\": 1\n}\n8", "issue_status": "Closed", "issue_reporting_time": "2014-02-06T12:30:44Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1298": {"issue_url": "https://github.com/pallets/flask/issues/973", "issue_id": "#973", "issue_summary": "Test client unicode bug", "issue_description": "tbicr commented on 6 Feb 2014\nSee next example with python 2.7.5, flask=0.10.1, werkzeug==0.9.4:\nimport unittest\nfrom cStringIO import StringIO\nfrom flask import Flask, request\n\n\napp = Flask(__name__)\n\n@app.route('/', methods=[\"POST\"])\ndef test_view():\n    print(request.values, request.files)\n    return \"OK\"\n\n\nclass UnicodeTestCase(unittest.TestCase):\n    def setUp(self):\n        self.client = app.test_client(use_cookies=False)\n\n    def test_unicode_file(self):\n        file = (StringIO(\"0\" * 1000), \"filename.txt\")\n        self.assertEquals(200, self.client.post('/', data={'file': file}).status_code)\n\n    def test_unicode_string(self):\n        string = u\"\u2206_\u2206\"\n        self.assertEquals(200, self.client.post('/', data={'string': string}).status_code)\n\n    def test_unicode_file_and_string(self):\n        file = (StringIO(\"0\" * 1000), \"filename.txt\")\n        string = u\"\u2206_\u2206\"\n        self.assertEquals(200, self.client.post('/', data={'file': file, 'string': string}).status_code)\n\n\nif __name__ == '__main__':\n    app.run('0.0.0.0', 8080, True)\nWhen I make request directly all work fine. But with test client have error:\nError\nTraceback (most recent call last):\n  File \"/Users/user1/tests/test_uni.py\", line 108, in test_unicode\n    self.assertEquals(200, client.post('/', data={'file': file, 'string': string}).status_code)\n  File \"/Users/user1/.virtualenvs/test/lib/python2.7/site-packages/werkzeug/test.py\", line 771, in post\n    return self.open(*args, **kw)\n  File \"/Users/user1/.virtualenvs/test/lib/python2.7/site-packages/flask/testing.py\", line 108, in open\n    follow_redirects=follow_redirects)\n  File \"/Users/user1/.virtualenvs/test/lib/python2.7/site-packages/werkzeug/test.py\", line 725, in open\n    environ = args[0].get_environ()\n  File \"/Users/user1/.virtualenvs/test/lib/python2.7/site-packages/werkzeug/test.py\", line 535, in get_environ\n    stream_encode_multipart(values, charset=self.charset)\n  File \"/Users/user1/.virtualenvs/test/lib/python2.7/site-packages/werkzeug/test.py\", line 104, in stream_encode_multipart\n    write('\\r\\n\\r\\n' + value)\n  File \"/Users/user1/.virtualenvs/test/lib/python2.7/site-packages/werkzeug/test.py\", line 71, in write\n    write_binary(string.encode(charset))\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xe2 in position 4: ordinal not in range(128)\nSee details http://stackoverflow.com/q/21584413/880326.", "issue_status": "Closed", "issue_reporting_time": "2014-02-06T08:21:37Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1299": {"issue_url": "https://github.com/pallets/flask/issues/971", "issue_id": "#971", "issue_summary": "Debug output only show error line in own scripts possible?", "issue_description": "kramer65 commented on 4 Feb 2014\nI'm building a website using Flask, and so far I love it. The only thing that constantly bothers me however, is that when I get debug output, it's always so much. And most of it is just internal error messages from Flask, which don't tell me anything. 99.9% of the time, I'm just interested in the line which led to this error which is located in my own scripts. If I know that, I normally can quickly find the solution, but all the other output just confuses me.\nSo; is there a way that I can just output the lines in my own written scripts that led to the error?", "issue_status": "Closed", "issue_reporting_time": "2014-02-04T14:15:34Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1300": {"issue_url": "https://github.com/pallets/flask/issues/969", "issue_id": "#969", "issue_summary": "New Converters: bool, long etc.?", "issue_description": "RichardProsser commented on 1 Feb 2014\nFrom the 'quickstart' dcoumentation:\nThe following converters exist:\n\nint accepts integers\nfloat   like int but for floating point values\npath    like the default but also accepts slashes\nCan other types be added please? I may need them for an OpenMeetings API wrapper.", "issue_status": "Closed", "issue_reporting_time": "2014-02-01T15:01:52Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1301": {"issue_url": "https://github.com/pallets/flask/issues/968", "issue_id": "#968", "issue_summary": "GET params discarded by flask test client, when using full url", "issue_description": "vladzloteanu commented on 30 Jan 2014\nUsing full URL in flask test client. GET params are silently discarded:\nimport unittest\nfrom flask import Flask, request\n\napp = Flask(__name__)\napp.testing = True\n\n@app.route('/action')\ndef action():\n    return \"\"\n\n\nclass MyTestCase(unittest.TestCase):\n\n    def test_get_with_path(self):\n        with app.test_client() as c:\n            rv = c.get('/action?vodka=42')\n            assert 'vodka' in request.args # assertion OK\n\n    def test_get_with_complete_url(self):\n        with app.test_client() as c:\n            rv = c.get('http://domain.com/action?vodka=42')\n            assert 'vodka' in request.args # assertion error\n\n    def test_post_with_complete_url(self):\n        with app.test_client() as c:\n            rv = c.post('http://domain.com/action?vodka=42', data={'gin': 43})\n            assert 'gin' in request.form # assertion OK\n            assert 'vodka' in request.args # assertion error\n\n\nif __name__ == '__main__':\n    unittest.main()\nThis may also be considered inconsistent with the behaviour on POST params.\nIf this is not the way one should use test client, maybe put a warning in the docs ?", "issue_status": "Closed", "issue_reporting_time": "2014-01-29T19:37:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1302": {"issue_url": "https://github.com/pallets/flask/issues/967", "issue_id": "#967", "issue_summary": "Optional Jinja2", "issue_description": "kolypto commented on 29 Jan 2014\nWhat about making Jinja2 optional, so one can install it with\npip install flask[jinja2]\n?\nThat's easy with this directive in setup.py:\nextras_require={\n    'jinja2': [\n        'jinja2 >= 2.4',\n    ]\n},\nFor users that develop APIs with Flask, this will allow to exclude extra dependencies.", "issue_status": "Closed", "issue_reporting_time": "2014-01-28T23:39:33Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1303": {"issue_url": "https://github.com/pallets/flask/issues/966", "issue_id": "#966", "issue_summary": "Support other JSON media types in `Request.get_json`", "issue_description": "Contributor\nmattupstate commented on 29 Jan 2014\nCurrently, Request.get_json is hardcoded to only accept JSON requests with a media type of application/json. There are a plethora of emerging JSON media types and it would be handy to be able to configure the application with a set of acceptable JSON media types.\nA probably half brained idea is to change the conditional statement inside Request.get_json to something like:\njson_mimetypes = _request_ctx_stack.top.app.config.get('JSON_MIMETYPES', ('application/json',))\n\nif self.mimetype not in json_mimetypes and not force:\n    return None", "issue_status": "Closed", "issue_reporting_time": "2014-01-28T18:47:21Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1304": {"issue_url": "https://github.com/pallets/flask/issues/965", "issue_id": "#965", "issue_summary": "0.10 Documentation - Unit Testing - Error", "issue_description": "LuckyURE commented on 27 Jan 2014\nHello, I'm new to Python and Flask so bare with me. I'm using Windows 8, PyCharm, Python 2.7.4, and Flask 0.10.\nI followed the documentation to create the Flaskr application which is working great! So then I moved on to the unit testing application and began following the instructions.\nI created a new module as instructed, copied and pasted the example code, and then ran python flaskr_tests.py and got the following:\nTraceback (most recent call last):\nFile \"flaskr_tests.py\", line 2, in\nimport flaskr\nImportError: No module named flaskr\nI did everything as described but yet get this error? I went back and checked everything and still can't figure out what I'm missing?", "issue_status": "Closed", "issue_reporting_time": "2014-01-27T02:32:01Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1305": {"issue_url": "https://github.com/pallets/flask/issues/964", "issue_id": "#964", "issue_summary": "jsonify response mime type", "issue_description": "ClodoaldoPinto commented on 26 Jan 2014\nAccording to the jQuery-File-Upload docs Iframe based uploads require a Content-type of text/plain or text/html for the JSON response\nSo I can't use jsonify as it sets the response mime type to application/json and must use code like this\nresp = make_response(json.dumps({'error': 'File too big'}))\nif request.headers.get('Accept', '').find('application/json') > -1:\n    resp.mimetype = 'application/json'\nelse:\n    resp.mimetype = 'text/plain'\nreturn resp\nIn instead of\nreturn jsonify({'error': 'File too big'})\nAm I missing something? How clueless would I be if I were to suggest adding some option to jsonify to customize the response mime type depending on the requested mime type?", "issue_status": "Closed", "issue_reporting_time": "2014-01-26T09:01:22Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1306": {"issue_url": "https://github.com/pallets/flask/issues/963", "issue_id": "#963", "issue_summary": "pocoo docs out of sync", "issue_description": "Contributor\nnZac commented on 25 Jan 2014\n#950 showed that the pocoo docs are out of sync with the repository.\nDoes that set of documentation only get updated on releases? Is it possible to make the Read The Docs the primary documentation reference?", "issue_status": "Closed", "issue_reporting_time": "2014-01-25T01:31:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1307": {"issue_url": "https://github.com/pallets/flask/issues/956", "issue_id": "#956", "issue_summary": "Empty response when serving files with WSGI, if app.debug is True", "issue_description": "recognosco commented on 20 Jan 2014\nIt is kind of understandable if Flask is deliberately not sending the Debug Page when it is serving through WSGI, even if app.debug = True, because Flask doesn't want the user to show that page in production by mistake. It is probably a security feature for the greater good. However, this means, Flask assumes that when the user is deploying it using WSGI, it is in production mode. Which may or may not be true. However, we can accept it for the sake of security.\nThat being said, the part that does not make sense is that it is not sending any data to WSGI in this situation. The least it could do is to send the 500 error page that it would have sent by default, if app.debug was False. Seeing an empty reply doesn't instinctively make sense.\nI have setup a simple test to demonstrate the problem over here: https://github.com/recognosco/flask-uwsgi-error", "issue_status": "Closed", "issue_reporting_time": "2014-01-20T04:39:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1308": {"issue_url": "https://github.com/pallets/flask/issues/953", "issue_id": "#953", "issue_summary": "flaskr Stored XSS [FIX]", "issue_description": "sankosk commented on 15 Jan 2014\nHI, I was testing flaskr because I want to use it (for my website).\nWhen you write javascript code into the text form a XSS appear:\nSo, we have to fix it editing show_entries.html:\n\" { entry.title }} {{ entry.text| safe }} \"\nreplacing it for :\n\" {{ entry.title }} {{ entry.text }} \"\nNow, if I wirte the js code again, the xss will disappear:\n<svg/onload=confirm(document.cookie);>\nEDIT : I guess that it's an intentional vulnerability but is not the correct way to do it, we(my team and I) will continue writing it to improve the \"example code\"\nRegards", "issue_status": "Closed", "issue_reporting_time": "2014-01-15T18:16:20Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1309": {"issue_url": "https://github.com/pallets/flask/issues/950", "issue_id": "#950", "issue_summary": "flaskr.py in Flaskr Tutorial, LINE 23", "issue_description": "AlanSixth commented on 13 Jan 2014\nDATABASE='/tmp/flaskr.db' does not work on my machine.\nI changed it to (by removing the slash before 'tmp')\nDATABASE='tmp/flaskr.db'\nand it then worked.", "issue_status": "Closed", "issue_reporting_time": "2014-01-13T01:22:15Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1310": {"issue_url": "https://github.com/pallets/flask/issues/949", "issue_id": "#949", "issue_summary": "Flaskr should mention Heroku does not support sqlite3", "issue_description": "nouyang commented on 12 Jan 2014\nSince heroku is one of the recommended quickstart deployment options, after following the (great) flaskr tutorial I tried to deploy on heroku only to realize some hours later that heroku does not support sqlite3 and thus the flaskr tutorial will never deploy on heroku with 500 Internal Service Errors. Perhaps this should be mentioned in the Flaskr tutorial, as other beginners may also follow both official documentation suggestions to failure.", "issue_status": "Closed", "issue_reporting_time": "2014-01-12T06:15:02Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1311": {"issue_url": "https://github.com/pallets/flask/issues/941", "issue_id": "#941", "issue_summary": "Registering a handler for HTTPException has no effect", "issue_description": "mdeous commented on 4 Jan 2014\nWhen registering a handler for werkzeug.exceptions.HTTPException, it has no effect when an HTTP error is raised.\nAssume the following handler:\n@app.errorhandler(HTTPException)\ndef http_err_handler(error):\n    response = jsonify({\n        \"success\": False, \n        \"message\": error.name\n    })\n    response.status_code = error.code\n    return response\nWhen requesting a page for which no route exists, a JSON response should be returned by the error handler, but instead, the usual Flask-generated HTTP error page is returned.\nOn the other hand, if the error handler is defined to handle a specific error code (by passing the error code to the app.errorhandler decorator), the exception is trapped and the JSON message returned.\nAs wekzeug.exceptions.HTTPException is the class raised internally by the abort() function, why isn't it possible to create a \"catch-all\" handler like this? Am I missing something?", "issue_status": "Closed", "issue_reporting_time": "2014-01-03T18:58:20Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1312": {"issue_url": "https://github.com/pallets/flask/issues/939", "issue_id": "#939", "issue_summary": "Default HTML errors don't tell their encoding and aren't HTML5", "issue_description": "JeromeJ commented on 1 Jan 2014\nHello,\nJust noticed that the default HTML errors (like 404 Not Found) are:\nNot using HTML5 yet.\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\nDon't indicate their encoding, which raises a message in the Firefox console:\n\" The character encoding of the HTML document was not declared. The document will render with garbled text in some browser configurations if the document contains characters from outside the US-ASCII range. The character encoding of the page must be declared in the document or in the transfer protocol. \"\nCordially.", "issue_status": "Closed", "issue_reporting_time": "2014-01-01T11:01:23Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1313": {"issue_url": "https://github.com/pallets/flask/issues/937", "issue_id": "#937", "issue_summary": "Can not register a 500 error handler for blueprint", "issue_description": "humiaozuzu commented on 27 Dec 2013\ncode as follows:\napi = Blueprint('api', 'api')\n@api.errorhandler(500)\ndef error_500(error):\nmsg = {\n'message': 'Server Error'\n}\nreturn jsonify(msg), 500\nbut flask throw this error:\nAssertionError: It is currently not possible to register a 500 internal server error on a per-blueprint level.", "issue_status": "Closed", "issue_reporting_time": "2013-12-27T07:57:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1314": {"issue_url": "https://github.com/pallets/flask/issues/934", "issue_id": "#934", "issue_summary": "Include favicon in the documentation", "issue_description": "ClodoaldoPinto commented on 20 Dec 2013\nI like to have the local documentation of Flask in a Firefox pinned tab along some others. To distinguish it from the others I include a <link rel> to the index.html:\n<link rel=\"icon\" href=\"_static/flask.png\" type=\"image/png\" />\nI tried to find where in the sources to make the change but I have no time now to learn sphinx.\nWould it be possible to include it in the next release?", "issue_status": "Closed", "issue_reporting_time": "2013-12-20T10:52:14Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1315": {"issue_url": "https://github.com/pallets/flask/issues/933", "issue_id": "#933", "issue_summary": "Overriding blueprint template does not take effect until restart", "issue_description": "adrianlopezroche commented on 20 Dec 2013\nOverriding a blueprint's template does not take effect without restarting the development server.\nFollow these steps to reproduce:\nFirst, add and register the following blueprint without creating any templates. It should produce a \"Template Not Found\" error:\nfrom flask import Blueprint, render_template\n\nblueprint = Blueprint(\n    'blueprint', \n    __name__, \n    template_folder='blueprint/templates')\n\n@blueprint.route('/testoverride')\ndef TestOverride():\n    return render_template('test.html')\nNext, add a new template called \"test.html\" under the blueprint's template directory and refresh the page. It should find the template without restarting the server.\nNow add a second template having the same filename but different content under the application's template directory and refresh the page. The page's content will not change without restarting the server.\nRestart the server and refresh the page. Confirm the content has now changed.", "issue_status": "Closed", "issue_reporting_time": "2013-12-20T07:23:13Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1316": {"issue_url": "https://github.com/pallets/flask/issues/932", "issue_id": "#932", "issue_summary": "Anyway to reload only one app in DispatcherMiddleware", "issue_description": "humiaozuzu commented on 20 Dec 2013\nfrom http://flask.pocoo.org/docs/patterns/appdispatch\nfrom werkzeug.wsgi import DispatcherMiddleware\nfrom frontend_app import application as frontend\nfrom backend_app import application as backend\n\napplication = DispatcherMiddleware(frontend, {\n    '/backend':     backend\n})\nIn deployment environment, I can only reload both frontend and backend app.", "issue_status": "Closed", "issue_reporting_time": "2013-12-20T03:18:46Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1317": {"issue_url": "https://github.com/pallets/flask/issues/927", "issue_id": "#927", "issue_summary": "Read config from JSON file", "issue_description": "Contributor\nTurbo87 commented on 13 Dec 2013\nIt might make sense to implement something like app.config.from_jsonfile('config.json') to be able to share the configuration with JS based frontend tools like grunt.", "issue_status": "Closed", "issue_reporting_time": "2013-12-12T23:04:37Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1318": {"issue_url": "https://github.com/pallets/flask/issues/926", "issue_id": "#926", "issue_summary": "Number of opened sockets grow unlimited", "issue_description": "ThomasJannaud commented on 12 Dec 2013\nHi\nI have a very small number of requests incoming on my server and yet the flask server always ends up getting stuck/hanging indefinitely.\nI tracked down the problem to : the allowed number of files that the server opens reaches ulimit.\nThe flask server creates sockets one after the other and I don't know why it doesn't close them. I am not doing anything crazy, just rendering a page or putting a number in a mongo database\nAny thoughts ?\nSee full issue here : http://stackoverflow.com/questions/20540129/ever-increasing-number-of-opened-sockets-on-python-web-server\n(I don't know how issues work on github, first timer here ; I don't mind copying the full issue here if you prefer)\nThanks", "issue_status": "Closed", "issue_reporting_time": "2013-12-12T13:53:24Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1319": {"issue_url": "https://github.com/pallets/flask/issues/925", "issue_id": "#925", "issue_summary": "Message Flashing's implementation is broken and should be removed anyway", "issue_description": "mcilrain commented on 10 Dec 2013\nMessage flashing as implemented in Flask is currently broken, under certain conditions it's possible for messages to be flashed to the wrong tab or in extreme cases the wrong device/browser.\nA correct implementation would require functionality beyond Flask's scope, message flashing itself is arguably beyond Flask's scope already.\nWhy not make a piss-poor user account system that exists solely in session cookies? It seems like the same logic behind Flask's message flashing functionality.", "issue_status": "Closed", "issue_reporting_time": "2013-12-10T14:40:10Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1320": {"issue_url": "https://github.com/pallets/flask/issues/923", "issue_id": "#923", "issue_summary": "Documentation stylesheet unclear link differentiation", "issue_description": "redspider commented on 6 Dec 2013\nOne of these two things is a link, the other is not. Clear differentiation between the two would be really good.", "issue_status": "Closed", "issue_reporting_time": "2013-12-06T00:11:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1321": {"issue_url": "https://github.com/pallets/flask/issues/922", "issue_id": "#922", "issue_summary": "Template filter: tojson and sort_keys", "issue_description": "b4stien commented on 5 Dec 2013\nI spent couple of hours yesterday trying to understand why tojson output had a different order from json.dumps order.\nThe thing is that Flask sets sort_keys to True by default (see https://github.com/mitsuhiko/flask/blob/master/flask/json.py#L102). Is it possible to add something regarding this, and the JSON_SORT_KEYS in the doc ?", "issue_status": "Closed", "issue_reporting_time": "2013-12-05T08:57:41Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1322": {"issue_url": "https://github.com/pallets/flask/issues/920", "issue_id": "#920", "issue_summary": "Python3 compatibility: test_client response not UTF-8", "issue_description": "LarsKumbier commented on 3 Dec 2013\nWhen using the test_client for unittesting, the return of the the tester is cast to bytestring instead of utf-8. As the default charset for webpages is now utf-8 and Flask also returning utf-8, the test_client should honor that.\napp.py:\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return \"H\u00e9llo, W\u00f4rld!\"\n\nif __name__ == \"__main__\":\n    app.run()\ntest.py\nfrom app import app\n\nimport unittest\n\nclass BasicTestCase(unittest.TestCase):\n    def test_DefaultReturnShouldBeUtf8(self):\n        tester = app.test_client(self)\n        response = tester.get(\"/\", content_type=\"html/text\")\n        self.assertRegex(response.content_type, \"charset=utf-8\")\n        self.assertEqual(response.data, \"H\u00e9llo, W\u00f4rld!\")\n\n    def test_DefaultReturnShouldBeUtf8_Workaround(self):\n        tester = app.test_client(self)\n        response = tester.get(\"/\", content_type=\"html/text\")\n        self.assertRegex(response.content_type, \"charset=utf-8\")\n        self.assertEqual(response.data.decode(\"utf-8\", \"strict\"), \"H\u00e9llo, W\u00f4rld!\")\n\nif __name__ == \"__main__\":\n    unittest.main()", "issue_status": "Closed", "issue_reporting_time": "2013-12-03T10:24:16Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1323": {"issue_url": "https://github.com/pallets/flask/issues/918", "issue_id": "#918", "issue_summary": "Sessions on heroku", "issue_description": "okdistribute commented on 28 Nov 2013\nSessions don't seem to be working on heroku\n2013-11-27T17:47:24.382234+00:00 app[web.1]: Traceback (most recent call last):\n2013-11-27T17:47:24.382234+00:00 app[web.1]:     super(GeventWorker, self).handle_request(*args)\n2013-11-27T17:47:24.382234+00:00 app[web.1]:   File \"/app/.heroku/python/lib/python2.7/site-packages/flask/app.py\", line 1701, in __call__\n2013-11-27T17:47:24.382234+00:00 app[web.1]:     return self.wsgi_app(environ, start_response)\n2013-11-27T17:47:24.382469+00:00 app[web.1]:     response = self.make_response(self.handle_exception(e))\n2013-11-27T17:47:24.382656+00:00 app[web.1]:     client.resource_owner_key = tup[0]\n2013-11-27T17:47:24.382469+00:00 app[web.1]:   File \"/app/.heroku/python/lib/python2.7/site-packages/flask/app.py\", line 1689, in wsgi_app\n2013-11-27T17:47:24.382469+00:00 app[web.1]:   File \"/app/.heroku/python/lib/python2.7/site-packages/flask/app.py\", line 1358, in full_dispatch_request\n2013-11-27T17:47:24.382469+00:00 app[web.1]:     rv = self.dispatch_request()\n2013-11-27T17:47:24.382656+00:00 app[web.1]:     data = self.handle_oauth1_response()\n2013-11-27T17:47:24.382656+00:00 app[web.1]:   File \"/app/.heroku/python/lib/python2.7/site-packages/flask_oauthlib/client.py\", line 528, in handle_oauth1_response\n2013-11-27T17:47:24.382234+00:00 app[web.1]: 2013-11-27 17:47:24 [10] [ERROR] Error handling request\n2013-11-27T17:47:24.382234+00:00 app[web.1]:   File \"/app/.heroku/python/lib/python2.7/site-packages/gunicorn/workers/async.py\", line 45, in handle\n2013-11-27T17:47:24.382234+00:00 app[web.1]:   File \"/app/.heroku/python/lib/python2.7/site-packages/gunicorn/workers/async.py\", line 93, in handle_request\n2013-11-27T17:47:24.382469+00:00 app[web.1]:   File \"/app/.heroku/python/lib/python2.7/site-packages/flask/app.py\", line 1360, in full_dispatch_request\n2013-11-27T17:47:24.382469+00:00 app[web.1]:     rv = self.handle_user_exception(e)\n2013-11-27T17:47:24.382234+00:00 app[web.1]:   File \"/app/.heroku/python/lib/python2.7/site-packages/gunicorn/workers/ggevent.py\", line 119, in handle_request\n2013-11-27T17:47:24.382234+00:00 app[web.1]:     respiter = self.wsgi(environ, resp.start_response)\n2013-11-27T17:47:24.382656+00:00 app[web.1]: TypeError: 'NoneType' object has no attribute '__getitem__'\n2013-11-27T17:47:24.382469+00:00 app[web.1]:     response = self.full_dispatch_request()\n2013-11-27T17:47:24.382469+00:00 app[web.1]:   File \"/app/.heroku/python/lib/python2.7/site-packages/flask/app.py\", line 1344, in dispatch_request\n2013-11-27T17:47:24.382469+00:00 app[web.1]:     return self.view_functions[rule.endpoint](**req.view_args)\n2013-11-27T17:47:24.382469+00:00 app[web.1]:   File \"/app/.heroku/python/lib/python2.7/site-packages/flask/app.py\", line 1687, in wsgi_app\n2013-11-27T17:47:24.382656+00:00 app[web.1]:   File \"/app/.heroku/python/lib/python2.7/site-packages/flask_oauthlib/client.py\", line 594, in decorated\nlocalhost cookies (this works):\nsession=\"xxxx?_fresh=yyyy==&twitter_oauthtok=zzzz\"\nheroku cookies (doesn't work):\nNone=\"xxxx=?_id=yyyy==&twitter_oauthtok=zzzz\"", "issue_status": "Closed", "issue_reporting_time": "2013-11-27T23:32:31Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1324": {"issue_url": "https://github.com/pallets/flask/issues/917", "issue_id": "#917", "issue_summary": "TypeError in CSRF Token Checking Under Python 3", "issue_description": "holdenweb commented on 27 Nov 2013\nI was trying to check out some DropBox API code, and came up with the following Flask server (mostly lifted from the Dropbpx docs)::\nfrom dropbox.client import DropboxOAuth2Flow\nfrom flask import (Flask, request, session, g, redirect, url_for,\n                   abort, render_template, flash)\n\n# configuration\n#DATABASE = '/tmp/flaskr.db'\n#PASSWORD = 'default'\nDEBUG = True\nSECRET_KEY = 'development key'\nUSERNAME = 'admin'\n\napp = Flask(\"test_connect\")\napp.config.from_object(\"test_connect\")\n\nDROPBOX_APP_KEY = 'APP_KEY' # use your own value\nDROPBOX_APP_SECRET = 'APP_SECRET' # use your own value\n\n@app.route('/')\ndef home():\n    if not 'access_token' in session:\n        return redirect(url_for('dropbox_auth_start'))\n    return 'Authenticated.'\n\n@app.route('/dropbox-auth-start')\ndef dropbox_auth_start():\n    return redirect(get_auth_flow().start())\n\n@app.route('/dropbox-auth-finish')\ndef dropbox_auth_finish():\n    try:\n        access_token, user_id, url_state = get_auth_flow().finish(request.args)\n    except ValueError:\n        abort(400)\n    else:\n        session['access_token'] = access_token\n    return redirect(url_for('home'))\n\ndef get_auth_flow():\n    redirect_uri = url_for('dropbox_auth_finish', _external=True)\n    return DropboxOAuth2Flow(DROPBOX_APP_KEY, DROPBOX_APP_SECRET, redirect_uri,\n                         session, 'dropbox-auth-csrf-token')\n\nif __name__ == \"__main__\":\n    app.run()\nWhen I submit the root URI I see the following console output:\n(py3)localhost:ipynb3 sholden$ 127.0.0.1 - - [26/Nov/2013 14:13:42] \"GET / HTTP/1.1\" 302 -\n127.0.0.1 - - [26/Nov/2013 14:13:42] \"GET /dropbox-auth-start HTTP/1.1\" 302 -\n127.0.0.1 - - [26/Nov/2013 14:13:48] \"GET /dropbox-auth-finish?code=EtdzRFdUsSsAAAAAAAAAAYsGGTJcWs8YtbQB_gvT99c&state=nBOWOVAN6XTqH-wdOaSmpw%3D%3D HTTP/1.1\" 500 -\nTraceback (most recent call last):\n  File \"/Users/sholden/.virtualenvs/py3/lib/python3.3/site-packages/flask/app.py\", line 1836, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/Users/sholden/.virtualenvs/py3/lib/python3.3/site-packages/flask/app.py\", line 1820, in wsgi_app\n    response = self.make_response(self.handle_exception(e))\n  File \"/Users/sholden/.virtualenvs/py3/lib/python3.3/site-packages/flask/app.py\", line 1403, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/Users/sholden/.virtualenvs/py3/lib/python3.3/site-packages/flask/_compat.py\", line 33, in reraise\n    raise value\n  File \"/Users/sholden/.virtualenvs/py3/lib/python3.3/site-packages/flask/app.py\", line 1817, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/Users/sholden/.virtualenvs/py3/lib/python3.3/site-packages/flask/app.py\", line 1477, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"/Users/sholden/.virtualenvs/py3/lib/python3.3/site-packages/flask/app.py\", line 1381, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/Users/sholden/.virtualenvs/py3/lib/python3.3/site-packages/flask/_compat.py\", line 33, in reraise\n    raise value\n  File \"/Users/sholden/.virtualenvs/py3/lib/python3.3/site-packages/flask/app.py\", line 1475, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"/Users/sholden/.virtualenvs/py3/lib/python3.3/site-packages/flask/app.py\", line 1461, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"/Users/sholden/Projects/Python/ipynb3/test_connect.py\", line 33, in dropbox_auth_finish\n    access_token, user_id, url_state = get_auth_flow().finish(request.args)\n  File \"/Users/sholden/.virtualenvs/py3/lib/python3.3/site-packages/dropbox/client.py\", line 1234, in finish\n    if not _safe_equals(csrf_token_from_session, given_csrf_token):\n  File \"/Users/sholden/.virtualenvs/py3/lib/python3.3/site-packages/dropbox/client.py\", line 1306, in _safe_equals\n    res |= ord(ca) ^ ord(cb)\nTypeError: ord() expected string of length 1, but int found\nUsing the excellent Werkzeug debugging features I discovered the trouble appears to be due to the finish() function calling _safe_equals() with one bytes argument and one string.\nOf course there could easily be something wrong with my code, in which case sorry for the spurious issue report.", "issue_status": "Closed", "issue_reporting_time": "2013-11-26T22:30:57Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1325": {"issue_url": "https://github.com/pallets/flask/issues/914", "issue_id": "#914", "issue_summary": "Convincing manager with large high traffic sites using Flask. Any tips?", "issue_description": "kramer65 commented on 14 Nov 2013\nSeeing that I have (some) experience in Flask I really really want to use it for a new project we're about to start here in our company. I'm now looking for a couple websites that are either or all of the below:\nhigh traffic\nslick looking\nbig/known names\nI checked out the \"powered by\" part of the Flask website (http://flask.pocoo.org/community/poweredby/) but I can't find any big names on there. I think I once saw a little list of good sites using Flask, but I can't find them anymore.\nAnybody any tips?\n1", "issue_status": "Closed", "issue_reporting_time": "2013-11-14T11:35:05Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1326": {"issue_url": "https://github.com/pallets/flask/issues/913", "issue_id": "#913", "issue_summary": "Print of several 'Running on' ...", "issue_description": "franciscocorrales commented on 13 Nov 2013\nIf I use try and except, Flask still prints the \"Running on http...\" from the try clause.\nI have:\ntry:\n    app.run(host='public_ip.com')\nexcept Exception:\n    app.run(host='local_ip')\nI get:\n* Running on http://public_ip.com/\n* Running on http://local_ip/\nEven though the second one is the only one that is running.", "issue_status": "Closed", "issue_reporting_time": "2013-11-13T16:13:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1327": {"issue_url": "https://github.com/pallets/flask/issues/912", "issue_id": "#912", "issue_summary": "Address already in use at Threads", "issue_description": "franciscocorrales commented on 12 Nov 2013\nHi,\nI get Address already in use if I use threads...\nWhy is that happening ?\nI have:\nthread_empty_trash()\n...\napp.run(....  use_reloader=False .... )", "issue_status": "Closed", "issue_reporting_time": "2013-11-12T18:14:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1328": {"issue_url": "https://github.com/pallets/flask/issues/908", "issue_id": "#908", "issue_summary": "Flask needs a way to announce new versions", "issue_description": "arnuschky commented on 8 Nov 2013\nI think that flask needs some sort of dedicated channel to announce critical updates (or in general, new versions).\nThe reason is that flask grew to a point where there is a lot of activity on the repository and the general mailing list. Listening on the mailing list or \"watching\" the repository for maintenance-only projects in order to catch new critical updates means siphoning through a lot of messages.\nWould setting up something like a separate announce list be possible?", "issue_status": "Closed", "issue_reporting_time": "2013-11-08T09:13:24Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1329": {"issue_url": "https://github.com/pallets/flask/issues/907", "issue_id": "#907", "issue_summary": "Unicode error when serving static file with unicode characters", "issue_description": "arthurprs commented on 7 Nov 2013\nI'm getting the following error once in a while, notice the request path\nThu Nov 07 16:14:42 UTC 2013 : ERROR, Exception on /\u523a\u5ba2\u7248\u672c.rar [HEAD]\nTraceback (most recent call last):\nFile \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1817, in wsgi_app\nresponse = self.full_dispatch_request()\nFile \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1477, in full_dispatch_request\nrv = self.handle_user_exception(e)\nFile \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1381, in handle_user_exception\nreraise(exc_type, exc_value, tb)\nFile \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1475, in full_dispatch_request\nrv = self.dispatch_request()\nFile \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1461, in dispatch_request\nreturn self.view_functionsrule.endpoint\nFile \"/usr/local/lib/python2.7/dist-packages/flask/helpers.py\", line 822, in send_static_file\ncache_timeout=cache_timeout)\nFile \"/usr/local/lib/python2.7/dist-packages/flask/helpers.py\", line 613, in send_from_directory\nif not os.path.isfile(filename):\nFile \"/usr/lib/python2.7/genericpath.py\", line 29, in isfile\nst = os.stat(path)\nUnicodeEncodeError: 'ascii' codec can't encode characters in position 41-44: ordinal not in range(128)", "issue_status": "Closed", "issue_reporting_time": "2013-11-07T16:45:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1330": {"issue_url": "https://github.com/pallets/flask/issues/905", "issue_id": "#905", "issue_summary": "Allow subdomains to work with no SERVER_NAME", "issue_description": "yannk commented on 5 Nov 2013\nWould you be open to a patch allowing the use of subdomain routing with no SERVER_NAME pre-configured?\nThe motivation is to allow multiple domains to match a request, just like it does when SERVER_NAME is None, while still benefiting from the nice subdomain matcher. This is particularly useful in DEV to be able to develop on machine.local but also tunnel the instance to a vpn, and use things like xip.io (which all change the host).\nThe change would probably be mostly focused on create_url_adapter(). I imagine a configuration variable switching a different logic on for this function: it would look for subdomains and deduce the server_name which is the reverse of what's going on today.\nThe list of subdomains could come from the configuration I suppose, or better be deduced from the compilation of the routes.\nWhat do you think of this idea?\nIf you are opposed to it, what alternative approach do you suggest instead?\nIf you are not opposed to it, how do you think the implementation should look like?", "issue_status": "Closed", "issue_reporting_time": "2013-11-04T22:07:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1331": {"issue_url": "https://github.com/pallets/flask/issues/904", "issue_id": "#904", "issue_summary": "POST request from Dropzone.js failing in Flask", "issue_description": "teechap commented on 5 Nov 2013\nI'm trying to post files to a MongoDB collection with Flask. I decided to use the Dropzone.js library to make a file drop zone. After some troubleshooting, I realized my database code was fine, but Flask isn't returning anything when request.method == \"POST\". Does anyone know why Flask isn't hitting the return statement when the request method is post for the index view?\nfrom flask import Flask, request, render_template, redirect\nfrom flask.ext.mongoengine import MongoEngine \nimport datetime\n\napp = Flask(__name__)\n\n#set up database\napp.config[\"MONGODB_SETTINGS\"] = {'DB': 'pdfs'}\napp.config['SECRET_KEY'] = \"reallysecret\"\n\ndb = MongoEngine(app)\n\nclass PDF(db.Document):\n    pdf = db.FileField()\n    uploaded_at = db.DateTimeField(default=datetime.datetime.now)\n    file_size = None\n\n    def __unicode__(self):\n        return self.uploaded_at\n\n    meta = {\n        'indexes':['-uploaded_at'],\n        'ordering':['-uploaded_at']\n    }\n\n@app.route('/', methods=[\"GET\", \"POST\"])\ndef index():\n    if request.method == \"GET\":\n        return render_template('index.html')\n    if request.method == \"POST\":\n        return \"Didn't do anything with POST, but here's a message.\"\nMy index.html template looks like this:\n<!doctype html>\n<head>\n    <title>File Upload</title>\n    <link rel=stylesheet type=text/css href=\"{{ url_for('static', filename='dropzone.css') }}\">\n    <script src=\"{{url_for('static', filename='dropzone.js')}}\"></script>\n</head>\n<body>\n    <form action=\"{{url_for('index')}}\" class=\"dropzone dz-clickable\">\n        <div class=\"dz-default dz-message\"></div>\n    </form>\n</body>\nIn Terminal, it looks like the POST request succeeded (code 200), but the return message does not display in the browser and Dropzone says the server responded with code 0.\nTerminal output: 127.0.0.1 - - [03/Nov/2013 18:37:06] \"GET / HTTP/1.1\" 200 - 127.0.0.1 - - [03/Nov/2013 18:37:06] \"GET /static/dropzone.css HTTP/1.1\" 304 - 127.0.0.1 - - [03/Nov/2013 18:37:06] \"GET /static/dropzone.js HTTP/1.1\" 304 - 127.0.0.1 - - [03/Nov/2013 18:37:06] \"GET /static/spritemap.png HTTP/1.1\" 304 - 127.0.0.1 - - [03/Nov/2013 18:37:07] \"GET /favicon.ico HTTP/1.1\" 500 - 127.0.0.1 - - [03/Nov/2013 18:37:13] \"POST / HTTP/1.1\" 200 -\nBrowser window, Dropzone says server responded with code 0: http://imgur.com/JsfISMp", "issue_status": "Closed", "issue_reporting_time": "2013-11-04T19:42:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1332": {"issue_url": "https://github.com/pallets/flask/issues/903", "issue_id": "#903", "issue_summary": "How to generate a SecureCookie in latest version?", "issue_description": "seaders commented on 4 Nov 2013\nWith Flask 0.9 and Werkzeug 0.8.3 I was able to test many of our functions by creating a SecureCookie with\nfrom werkzeug.contrib.securecookie import SecureCookie\nsession = SecureCookie(dict(uid=uid), app.secret_key).serialize()\nBut that now gives me an empty session when we get to the request function, even though\n    SecureCookie.unserialize(request.cookies['session'], app.config['SECRET_KEY'])\ngives the correct dict that was passed through.\nI tried to figure it out from the source, but couldn't quite get the gist of it.", "issue_status": "Closed", "issue_reporting_time": "2013-11-04T17:41:55Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1333": {"issue_url": "https://github.com/pallets/flask/issues/902", "issue_id": "#902", "issue_summary": "The flask application always hang.", "issue_description": "shawnXiao commented on 3 Nov 2013\nI have a simple site which used flask. but the question is that the site always hang.\nI start it but after several hours or sometimes longer, the site is hanged.\nAny one has suggestion about this question?\nMy site is :\nhttp://116.255.163.99:5000/recommend", "issue_status": "Closed", "issue_reporting_time": "2013-11-03T11:43:25Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1334": {"issue_url": "https://github.com/pallets/flask/issues/901", "issue_id": "#901", "issue_summary": "accessing config settings from other files", "issue_description": "jabbalaci commented on 2 Nov 2013\nHi,\nThe documentation could be improved a bit. Chapter 10 \"Configuration Handling\" explains well ho to set the config. However, it doesn't explain how to retrieve values from the config in other files. I found the following solution:\nfrom flask import current_app as app\n...\napp.config['MY_SETTINGS']\nIt should be added to the docs.\nBest,\nLaszlo\n11", "issue_status": "Closed", "issue_reporting_time": "2013-11-01T20:49:33Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1335": {"issue_url": "https://github.com/pallets/flask/issues/900", "issue_id": "#900", "issue_summary": "If an URL path element contains %2F (an escaped \"/\") Flask.route considers it as an unescaped slash.", "issue_description": "exhuma commented on 30 Oct 2013\nHere's an example:\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/<urlvar>')\ndef hello_world(urlvar):\n    return 'Hello World! ' + repr(urlvar)\n\nif __name__ == '__main__':\n    app.run(debug=True)\nWhen running:\ncurl http://localhost:5000/aaa%2Fbbb\nI would expect to see:\nHello World! u'aaa/bbb'\nInstead I get:\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again.</p>\nI tested this against Flask 0.9 and Flask 0.10.1. Both had the same error.\nWhile searching for existing bug reports, I came across this: pallets/werkzeug#21\nIs this related? If yes, what's the status?\nIn any case, being a WSGI spec problem or not, this is behaviour is incorrect!\n7", "issue_status": "Closed", "issue_reporting_time": "2013-10-30T09:17:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1336": {"issue_url": "https://github.com/pallets/flask/issues/898", "issue_id": "#898", "issue_summary": "g request context is not per request?", "issue_description": "tedostrem commented on 30 Oct 2013\nToday in our system, one user managed to update the profile of another user.(\nThe only explanation I can come up with to this is that the Flask g context contained\nthe user_id of user_a when user_b updated his profile.\nAm I using g incorrectly or is this maybe a bug?\nWe have about 15k users and this is the first time I saw this happen.\nFlask==0.10.1\n@app.before_request\ndef before_request():\n    g.user_token = UserToken.from_request_token(\n        request.headers.get('Authorization')\n        .replace('Token token=\"', '').replace('\"', ''))\n\n@app.route('/api/profile',  methods=['GET', 'PUT'])\ndef profile():\n    if request.method == 'PUT':\n        try:\n            user_service.update_userprofile(\n                UserProfile(\n                    g.user_token.user_id,\n                    request.json.get('name'),\n                    request.json.get('gender'),\n                    request.json.get('location')\n                    None))\n            return PostResultModel(PostResult.Success,\n                                   'Userprofile updated',\n                                   PostResultErrorCode.NoError).json()\n        except:\n            return PostResultModel(PostResult.Error,\n                                   'Could not update profile',\n                                   PostResultErrorCode.ServerError).json()", "issue_status": "Closed", "issue_reporting_time": "2013-10-30T05:13:15Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1337": {"issue_url": "https://github.com/pallets/flask/issues/896", "issue_id": "#896", "issue_summary": "Routes for class-based views can't be overloaded when using View.as_view()", "issue_description": "aroberts commented on 28 Oct 2013\nThis is related to #766 - still broken when View.as_view() is used to register views, as in all the documentation.\nThis is probably best illustrated with an example:\n#!/usr/bin/env python \n\nfrom flask import Flask\nfrom flask.views import View\n\napp = Flask(__name__)\n\nclass IndexView(View):\n    methods = ['GET']\n\n    def dispatch_request(self, name=None):\n        if not name:\n            name = 'user'\n\n        return 'Hello %s!' % name\n\napp.add_url_rule('/', view_func=IndexView.as_view('hello'))\napp.add_url_rule('/<name>', view_func=IndexView.as_view('hello'))\n\nif __name__ == '__main__':\n    app.run() \napp.add_url_rule() complains here, because of the equality check referenced in #766:\n>>> IndexView.as_view('hello') == IndexView.as_view('hello')\nFalse", "issue_status": "Closed", "issue_reporting_time": "2013-10-28T17:59:23Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1338": {"issue_url": "https://github.com/pallets/flask/issues/892", "issue_id": "#892", "issue_summary": "Too many files open when instantiating the app thousands times", "issue_description": "olegpidsadnyi commented on 16 Oct 2013\nCould it be the case that instantiating the flask application opens some file and doesn't close it?\nI have tests with py.test and I didn't specify the scope of the flask application fixture to be 'sesson' so the flask application was instantiated basically for every test that needs it (we are using url map actively).\nAt some point I get the traceback related to the limit of the files open etc.\nI understand that probably you don't have to instantiate more than one app per process, but it might be also interesting to clean up the resources. At least if you test the app creation with different configurations. Maybe I could call something in the fixture finalizer to release the resources?\nself = <Application 'httpapi.server'>\ndef auto_find_instance_path(self):\n    \"\"\"Tries to locate the instance path if it was not provided to the\n        constructor of the application class.  It will basically calculate\n        the path to a folder named ``instance`` next to your main file or\n        the package.\n\n        .. versionadded:: 0.8\n        \"\"\"\n  prefix, package_path = find_package(self.import_name)\n../.virtualenvs/my/lib/python2.6/site-packages/Flask-0.10.1-py2.6.egg/flask/app.py:622:\nimport_name = 'httpapi.server'\ndef find_package(import_name):\n    \"\"\"Finds a package and returns the prefix (or None if the package is\n    not installed) as well as the folder that contains the package or\n    module as a tuple.  The package path returned is the module that would\n    have to be added to the pythonpath in order to make it possible to\n    import the module.  The prefix is the path below which a UNIX like\n    folder structure exists (lib, share etc.).\n    \"\"\"\n    root_mod_name = import_name.split('.')[0]\n    loader = pkgutil.get_loader(root_mod_name)\n    if loader is None or import_name == '__main__':\n        # import name is not found, or interactive/main module\n        package_path = os.getcwd()\n    else:\n        # For .egg, zipimporter does not have get_filename until Python 2.7.\n        if hasattr(loader, 'get_filename'):\n          filename = loader.get_filename(root_mod_name)\n../.virtualenvs/my/lib/python2.6/site-packages/Flask-0.10.1-py2.6.egg/flask/helpers.py:668:\nself = <pkgutil.ImpLoader instance at 0x10db70290>, fullname = 'httpapi'\ndef get_filename(self, fullname=None):\n    fullname = self._fix_name(fullname)\n    mod_type = self.etc[2]\n    if self.etc[2]==imp.PKG_DIRECTORY:\n      return self._get_delegate().get_filename()\nE AttributeError: 'NoneType' object has no attribute 'get_filename'\n/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/pkgutil.py:313: AttributeError", "issue_status": "Closed", "issue_reporting_time": "2013-10-16T13:46:44Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1339": {"issue_url": "https://github.com/pallets/flask/issues/887", "issue_id": "#887", "issue_summary": "cannot call methods decorated with setupmethod from before_first_request handlers", "issue_description": "bmathieu33 commented on 14 Oct 2013\nExample use case: trying to register a blueprint as lately as possible.\nbp = Blueprint(...)\n\n@app.before_first_request\ndef register_bp():\n    app.register_blueprint(bp)\nIn debug mode we will get an AssertionError from setupmethod decorator, saying \"A setup function was called after the first request was handled.\".\nhttps://github.com/mitsuhiko/flask/blob/master/flask/app.py#L54\nThis is because _got_first_request flag is set to True before before_first_request_funcs are called.\nhttps://github.com/mitsuhiko/flask/blob/master/flask/app.py#L1493\nIs there a reason for not setting the flag after handlers have been called? or is it safe (and thus it should be allowed) to call such \"setupmethods\"?", "issue_status": "Closed", "issue_reporting_time": "2013-10-14T16:58:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1340": {"issue_url": "https://github.com/pallets/flask/issues/882", "issue_id": "#882", "issue_summary": "app.test_request_context() is affected by except blocks that happen before it", "issue_description": "satiani commented on 8 Oct 2013\nTo illustrate the issue, see this code snippet:\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.teardown_request\ndef teardown(exc = None):\n    if exc is not None:\n        print \"An exception has occured!\"\n\ntry:\n    raise Exception('dummy')\nexcept:\n    pass\n\n# uncomment this to remove the issue\n# import sys; sys.exc_clear()\n\nwith app.test_request_context():\n    print \"Nothing happening here\"\n\n# Output:\n# Nothing happening here\n# An exception has occured! <== this is unexpected!\nThis happens because flask relies on sys.exc_info() to figure out if some exception happened in the request. However, sys.exc_info() gets populated whenever an except block has been executed. This could lead to weird behavior in unit tests, perhaps the enter method on RequestContext should contain a sys.exc_clear()?", "issue_status": "Closed", "issue_reporting_time": "2013-10-08T15:15:26Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1341": {"issue_url": "https://github.com/pallets/flask/issues/881", "issue_id": "#881", "issue_summary": "Config - Custom variables must be all uppercase", "issue_description": "JCotton1123 commented on 6 Oct 2013\nConfig will not load variables unless they are all uppercase. Perhaps loading custom variables into config is discouraged but if it isn't you should note this in the tutorial. It took me too long to figure this out.", "issue_status": "Closed", "issue_reporting_time": "2013-10-05T19:15:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1342": {"issue_url": "https://github.com/pallets/flask/issues/879", "issue_id": "#879", "issue_summary": "before_app_first_request strange behaviour", "issue_description": "Contributor\nzvin commented on 3 Oct 2013\nHello,\nWhen you set an initialization function with the before_app_first_request decorator you expect this function to be launched once before the first request.\nBut, if this function takes some time to execute, flask may respond to requests before it has finished.\nHere is the code of Flask.try_trigger_before_first_request_functions(self)\nif self._got_first_request:\n    return\nwith self._before_request_lock:\n    if self._got_first_request:\n        return\n    self._got_first_request = True\n    for func in self.before_first_request_funcs:\n        func()\nNow, imagine 2 concurrent requests when the server starts:\nthe first one takes the lock and sets _got_first_request to True BEFORE calling functions in self.before_first_request_funcs\nthe second sees that _got_first_request is True and returns\nThe fix is simple: just put self._got_first_request = True after the calls to functions in self.before_first_request_funcs.", "issue_status": "Closed", "issue_reporting_time": "2013-10-03T14:57:11Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1343": {"issue_url": "https://github.com/pallets/flask/issues/873", "issue_id": "#873", "issue_summary": "tests fails in sample apps on python 3.3", "issue_description": "ghost commented on 26 Sep 2013\nIn the various tutorials test functions, the returned data is always accessed as if it was a str. In python 3.3, the results are binary, so they must be decoded:\nInstead of:\nassert \"Some string\" in rv.data\nuse:\nassert \"Some string\" in rv.data.decode('utf-8')\n(there are other ways too - encode the string constant, etc.).", "issue_status": "Closed", "issue_reporting_time": "2013-09-26T00:49:41Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1344": {"issue_url": "https://github.com/pallets/flask/issues/871", "issue_id": "#871", "issue_summary": "Set up automatic cronjob for updating flask.pocoo.org from repositories", "issue_description": "Member\nuntitaker commented on 21 Sep 2013\nCurrently only @mitsuhiko can update the site, which is rather suboptimal. Not sure if this could/should be made with the help of travis.", "issue_status": "Closed", "issue_reporting_time": "2013-09-21T17:50:24Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1345": {"issue_url": "https://github.com/pallets/flask/issues/870", "issue_id": "#870", "issue_summary": "Unexpected Hello word", "issue_description": "grillermo commented on 20 Sep 2013\nHey, this is the simplest flask ever\n@app.route(\"/\")\ndef landing():\nreturn render_template('index.html')\n@app.route(\"/path:all_other_urls\")\ndef missing_url(all_other_urls):\n'''\nRedirect and be done with it\n'''\nreturn redirect('/')\nYes its just set up to redirect everything to index.html.\nSome random times flask doesnt render index.html but Hello World, out of the blue, and if i append a slash(or remove it) to the url it serves index.html again.\nAny ideas?", "issue_status": "Closed", "issue_reporting_time": "2013-09-20T16:47:51Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1346": {"issue_url": "https://github.com/pallets/flask/issues/868", "issue_id": "#868", "issue_summary": "Deploying Flask on AWS linked in QuickStart?", "issue_description": "lashex commented on 19 Sep 2013\nHello,\nI was wondering if there was a specific reason that the ability for Flask to deployed to AWS using Elastic Beanstalk was not something that was captured here in the QuickStart guide.\nhttp://flask.pocoo.org/docs/quickstart/#deploying-to-a-web-server\n...specifically the ability to deploy Flask in Beanstalk is documented in this location in AWS' documentation.\nhttp://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_Python_flask.html\nIt seems like a nice, more direct help for folks if the Quick Start just had a link to the AWS documentation. I'd be willing to make the change to the QuickStart myself if that would help.", "issue_status": "Closed", "issue_reporting_time": "2013-09-19T02:56:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1347": {"issue_url": "https://github.com/pallets/flask/issues/866", "issue_id": "#866", "issue_summary": "InstanceTestCase tests fail when run by a non-standard user", "issue_description": "nieder commented on 15 Sep 2013\nThe InstanceTestCase tests fail on OS X when being packaged by an unprivileged user:\n/sw/bin/python2.7 run-tests.py || exit 2\n........................................................................................................................F..FF.....................................................................................................\n======================================================================\nFAIL: test_main_module_paths (flask.testsuite.config.InstanceTestCase)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/sw/build.build/flask-py27-0.10.1-1/Flask-0.10.1/flask/testsuite/config.py\", line 155, in test_main_module_paths\n    self.assert_equal(app.instance_path, os.path.join(here, 'instance'))\n  File \"/sw/build.build/flask-py27-0.10.1-1/Flask-0.10.1/flask/testsuite/__init__.py\", line 139, in assert_equal\n    return self.assertEqual(x, y)\nAssertionError: '/sw/var/run-tests-instance' != '/sw/build.build/flask-py27-0.10.1-1/Flask-0.10.1/instance'\n\n======================================================================\nFAIL: test_uninstalled_module_paths (flask.testsuite.config.InstanceTestCase)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/sw/build.build/flask-py27-0.10.1-1/Flask-0.10.1/flask/testsuite/config.py\", line 162, in test_uninstalled_module_paths\n    self.assert_equal(app.instance_path, os.path.join(here, 'test_apps', 'instance'))\n  File \"/sw/build.build/flask-py27-0.10.1-1/Flask-0.10.1/flask/testsuite/__init__.py\", line 139, in assert_equal\n    return self.assertEqual(x, y)\nAssertionError: '/sw/var/config_module_app-instance' != '/sw/build.build/flask-py27-0.10.1-1/Flask-0.10.1/flask/testsuite/test_apps/instance'\n\n======================================================================\nFAIL: test_uninstalled_package_paths (flask.testsuite.config.InstanceTestCase)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/sw/build.build/flask-py27-0.10.1-1/Flask-0.10.1/flask/testsuite/config.py\", line 167, in test_uninstalled_package_paths\n    self.assert_equal(app.instance_path, os.path.join(here, 'test_apps', 'instance'))\n  File \"/sw/build.build/flask-py27-0.10.1-1/Flask-0.10.1/flask/testsuite/__init__.py\", line 139, in assert_equal\n    return self.assertEqual(x, y)\nAssertionError: '/sw/var/config_package_app-instance' != '/sw/build.build/flask-py27-0.10.1-1/Flask-0.10.1/flask/testsuite/test_apps/instance'\n\n----------------------------------------------------------------------\nRan 226 tests in 1.038s\n\nFAILED (failures=3)\nI'm packaging flask for use in the Fink project (an OS X package manager). We use an unprivileged user to build and assemble a package before installation. The above three tests fail during our build process. If I build and test flask as a normal user, the tests pass, so it seems that there is some incorrect assumption being made somewhere about what the environment should be. '/sw' is our prefix. '/sw/build.build' is the sandboxed build root.", "issue_status": "Closed", "issue_reporting_time": "2013-09-15T01:28:43Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1348": {"issue_url": "https://github.com/pallets/flask/issues/865", "issue_id": "#865", "issue_summary": "Update docs on Approved Extensions", "issue_description": "Contributor\nrduplain commented on 12 Sep 2013\nExtension approval docs are out of date:\nhttp://flask.pocoo.org/docs/extensiondev/#approved-extensions\nSpecifically, now that Flask supports Python3 as of its 0.10 release, extensions in the community should follow. Maintained extensions should support the same Python versions as Flask itself. On that note, I personally do not want to write any library that keeps support for Python 2.6. I prefer Python 2.7 and Python 3.2+.", "issue_status": "Closed", "issue_reporting_time": "2013-09-11T19:19:54Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1349": {"issue_url": "https://github.com/pallets/flask/issues/861", "issue_id": "#861", "issue_summary": "Disable modules by default", "issue_description": "danielchatfield commented on 6 Sep 2013\nThis is not accurate: https://github.com/mitsuhiko/flask/blob/0.10/flask/app.py#L239-L242\nWhat is the current plan with regards to module support?", "issue_status": "Closed", "issue_reporting_time": "2013-09-06T13:55:01Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1350": {"issue_url": "https://github.com/pallets/flask/issues/860", "issue_id": "#860", "issue_summary": "debug=True triggers SyntaxError: can't assign to operator", "issue_description": "mikeswoods commented on 5 Sep 2013\napp = Flask(name)\napp.debug = True\napp.run()\nas well as app.run(debug=True)\ncause a SyntaxError: can't assign to operator execption to be raised\nTrace:\nFile \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 772, in run\nrun_simple(host, port, self, **options)\nFile \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 708, in run_simple\nrun_with_reloader(inner, extra_files, reloader_interval)\nFile \"/usr/local/lib/python2.7/dist-packages/werkzeug/serving.py\", line 617, in run_with_reloader\nsys.exit(restart_with_reloader())", "issue_status": "Closed", "issue_reporting_time": "2013-09-04T19:13:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1351": {"issue_url": "https://github.com/pallets/flask/issues/857", "issue_id": "#857", "issue_summary": "Exception when trying to run Flask app via CGIHandler", "issue_description": "Contributor\nhomeworkprod commented on 4 Sep 2013\nI have a very simple app. It runs fine when the module (itself calling app.run()) is run.\nHowever, when I try to run the app via CGI on Apache 2 using this .cgi script:\n#!/usr/bin/env python\n\nfrom wsgiref.handlers import CGIHandler\nfrom someapp import app\n\nCGIHandler().run(app)\nit results in an exception:\nTraceback (most recent call last):\n  File \"/usr/lib/python2.7/wsgiref/handlers.py\", line 85, in run\n    self.result = application(self.environ, self.start_response)\n  File \"/home/user/projects/SomeProject/venv/lib/python2.7/site-packages/flask/app.py\", line 1836, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/home/user/projects/SomeProject/venv/lib/python2.7/site-packages/flask/app.py\", line 1812, in wsgi_app\n    ctx = self.request_context(environ)\n  File \"/home/user/projects/SomeProject/venv/lib/python2.7/site-packages/flask/app.py\", line 1773, in request_context\n    return RequestContext(self, environ)\n  File \"/home/user/projects/SomeProject/venv/lib/python2.7/site-packages/flask/ctx.py\", line 247, in __init__\n    self.match_request()\n  File \"/home/user/projects/SomeProject/venv/lib/python2.7/site-packages/flask/ctx.py\", line 286, in match_request\n    self.url_adapter.match(return_rule=True)\n  File \"/home/user/projects/SomeProject/venv/lib/python2.7/site-packages/werkzeug/routing.py\", line 1386, in match\n    self.subdomain, path_info.lstrip('/'))\nAttributeError: 'NoneType' object has no attribute 'lstrip'\nThe setup is Flask 0.10.1 with Werkzeug 0.9.4.\nOn first sight, the WSGI environment variables seem to be incomplete, or something like that.", "issue_status": "Closed", "issue_reporting_time": "2013-09-04T01:37:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1352": {"issue_url": "https://github.com/pallets/flask/issues/856", "issue_id": "#856", "issue_summary": "typo in quickstart.rst", "issue_description": "dormouse commented on 3 Sep 2013\nin following line:\nThis behavior allows relative URLs to continue working even if the trailing slash is ommited, consistent with how Apache and other servers work. Also, the URLs will stay unique, which helps search engines avoid indexing the same page twice.\n\"ommited\" should be \"omitted\"", "issue_status": "Closed", "issue_reporting_time": "2013-09-03T08:02:21Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1353": {"issue_url": "https://github.com/pallets/flask/issues/855", "issue_id": "#855", "issue_summary": "Typo in documentation for FastCGI", "issue_description": "clark800 commented on 3 Sep 2013\nThere is a parenthesis missing at the end of the lighttpd configuration file snippet on this page: http://flask.pocoo.org/docs/deploying/fastcgi/\nAlso, it may be helpful to show the required module include statements:\nserver.modules += (\"mod_fastcgi\", \"mod_rewrite\", \"mod_alias\")", "issue_status": "Closed", "issue_reporting_time": "2013-09-02T22:33:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1354": {"issue_url": "https://github.com/pallets/flask/issues/854", "issue_id": "#854", "issue_summary": "SSL Issue", "issue_description": "0xbadc0de commented on 3 Sep 2013\nHello! I have self signed certificate. But there is an error when i try to use it (Python 3.3.2)\ncontext_SSL = SSL.Context(SSL.SSLv23_METHOD)\ncontext_SSL.use_privatekey_file(conf.SSLKeyPath)\ncontext_SSL.use_certificate_file(conf.SSLCertPath)\napp.run(host=conf.host, port=conf.port, ssl_context=context_SSL)\nHere the error\nUnhandled exception in thread started by <function run_simple..inner at 0x7f8a306d1cb0>\nTraceback (most recent call last):\nFile \"/usr/lib/python3.3/site-packages/werkzeug/serving.py\", line 692, in inner\npassthrough_errors, ssl_context).serve_forever()\nFile \"/usr/lib/python3.3/site-packages/werkzeug/serving.py\", line 486, in make_server\npassthrough_errors, ssl_context)\nFile \"/usr/lib/python3.3/site-packages/werkzeug/serving.py\", line 425, in init\nself.socket = tsafe.Connection(ssl_context, self.socket)\nFile \"/usr/lib/python3.3/site-packages/OpenSSL/tsafe.py\", line 11, in init\nself._ssl_conn = apply(_ssl.Connection, args)\nNameError: global name 'apply' is not defined", "issue_status": "Closed", "issue_reporting_time": "2013-09-02T19:53:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1355": {"issue_url": "https://github.com/pallets/flask/issues/853", "issue_id": "#853", "issue_summary": "\"no such table\" with sqlite3", "issue_description": "andreas00 commented on 3 Sep 2013\nHi,\nI've write a simple code for open a sqlite db with flask.\nfrom flask import Flask, render_template, g\nimport sqlite3 as lite\n\n# configuration\nDATABASE = 'card.db'\nDEBUG = True\n\napp = Flask(__name__)\napp.config.from_object(__name__)\n\n@app.route('/')\ndef index():\n   g.db = lite.connect(app.config['DATABASE'])\n   cur = g.db.execute('select * from card')\n   cards = [dict(card_name=row[1], low=row[2], medium=row[3], high=row[4]) for  row in cur.fetchall()]\n   g.db.close()\n   render_template('index.html', cards=cards)\n\nif __name__ == '__main__':\n    app.run()\nbut when i launch the app:\nOperationalError: no such table: card\n'card.db' is in the main folder with the script and when i open the db with the python console work perfectly\n>>> import sqlite3 as lite\n>>> conn = lite.connect('card.db')\n>>> cur = conn.execute('select * from card')\n>>> rows = cur.fetchall()\n>>> for row in rows:\n...     print row\nI've try to change path but:\nOperationalError: unable to open database file\nor remove the quotes from app.config['DATABASE'] but:\nKeyError: 'card.db'\nI've tried with another project from 0, another db, other information but flask give me the same error\nOperationalError: no such table: film\nHow i can resolve?", "issue_status": "Closed", "issue_reporting_time": "2013-09-02T19:13:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1356": {"issue_url": "https://github.com/pallets/flask/issues/852", "issue_id": "#852", "issue_summary": "installation.rst typo", "issue_description": "dormouse commented on 1 Sep 2013\nInstallation\nFlask depends on two external libraries, Werkzeug and Jinja2. Werkzeug is a toolkit for WSGI, the standard Python interface between web applications and a variety of servers for both development and deployment. Jinja2 renders templates.\nSo how do you get all that on your computer quickly? There are many ways you could do that, but the most kick-ass method is virtualenv, so let's have a look at that first.\nYou will need Python 2.6 or higher to get started, so be sure to have an up-to-date Python 2.x installation. For using Flask with Python 3 have a look at :ref:python3-support.\n:ref:python3-support should be :ref:python3_support.", "issue_status": "Closed", "issue_reporting_time": "2013-09-01T13:48:22Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1357": {"issue_url": "https://github.com/pallets/flask/issues/850", "issue_id": "#850", "issue_summary": "Multiple request headers with same name", "issue_description": "Tyilo commented on 27 Aug 2013\nI'm deploying my flask website to heroku and they pass 4 headers to flask: X-Forwarded-For, X-Forwarded-Proto, X-Forwarded-Port & X-Request-Start.\nI want to use all of these headers in flask, however if there are multiple of these headers (except X-Forwarded-For) flask will only use the last ones, even when using request.headers.get_all or request.headers.getlist.\nThis is problematic as the client can easily fake these headers, which will override those values passed from heroku.\nAs the request.headers object is already the type werkzeug.datastructures.EnvironHeaders, which subclasses werkzeug.datastructures.Headers, which have support for a key with multiple values, I don't think it will be that hard to implement.\nExample code:\ntest.py\nimport requests\nfrom flask import Flask, request\napp = Flask(__name__)\n\n@app.route('/')\ndef test():\n    k = 'X-Request-Start'\n    h = request.headers\n    print h.get(k)\n    print h.get_all(k)\n    print h.getlist(k)\n    return 'Check the logs\\n'\n\nif __name__ == '__main__':\n    app.run()\nTesting:\npython test.py &\ncurl -H 'X-Request-Start: test1' -H 'X-Request-Start: test2' http://127.0.0.1:5000/\nLogs:\n * Running on http://127.0.0.1:5000/\ntest2\n['test2']\n['test2']\n127.0.0.1 - - [27/Aug/2013 17:30:45] \"GET / HTTP/1.1\" 200 -\nExpected result in logs:\n * Running on http://127.0.0.1:5000/\ntest2\n['test1', 'test2']\n['test1', 'test2']\n127.0.0.1 - - [27/Aug/2013 17:30:45] \"GET / HTTP/1.1\" 200 -", "issue_status": "Closed", "issue_reporting_time": "2013-08-27T15:33:30Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1358": {"issue_url": "https://github.com/pallets/flask/issues/841", "issue_id": "#841", "issue_summary": "Documentation MOBI for Download is outdated", "issue_description": "geraldoandradee commented on 20 Aug 2013\nWhen download documentation as mobi format all references are to Flask 0.9. The actually version of Flask is 0.10.1.\nI find this issue in Flask documentation download mobi link.", "issue_status": "Closed", "issue_reporting_time": "2013-08-19T20:25:24Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1359": {"issue_url": "https://github.com/pallets/flask/issues/837", "issue_id": "#837", "issue_summary": "Flask-0.10.1 test failures", "issue_description": "idella commented on 16 Aug 2013\nPythons 2.7.5, 2.6.8, 3.3.2.\n...work/Flask-0.10.1 $ PYTHONPATH=. python2.7 run-tests.py\nOR\n...work/Flask-0.10.1 $ PYTHONPATH=../Flask-0.10.1-python3_3/lib/ python3.3 run-tests.py\nyield\n======================================================================\nFAIL: test_uninstalled_package_paths (flask.testsuite.config.InstanceTestCase)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/mnt/gen2/TmpDir/portage/dev-python/flask-0.10.1-r1/work/Flask-0.10.1/flask/testsuite/config.py\", line 167, in test_uninstalled_package_paths\n    self.assert_equal(app.instance_path, os.path.join(here, 'test_apps', 'instance'))\n  File \"/mnt/gen2/TmpDir/portage/dev-python/flask-0.10.1-r1/work/Flask-0.10.1/flask/testsuite/__init__.py\", line 139, in assert_equal\n    return self.assertEqual(x, y)\nAssertionError: '/mnt/gen2/TmpDir/portage/dev-python/flask-0.10.1-r1/work/Flask-0.10.1/flask/tes [truncated]... != '/mnt/gen2/TmpDir/portage/dev-python/flask-0.10.1-r1/work/Flask-0.10.1/flask/tes [truncated]...\n- /mnt/gen2/TmpDir/portage/dev-python/flask-0.10.1-r1/work/Flask-0.10.1/flask/testsuite/test_apps/config_package_app/instance\n?                                                                                                 -------------------\n+ /mnt/gen2/TmpDir/portage/dev-python/flask-0.10.1-r1/work/Flask-0.10.1/flask/testsuite/test_apps/instance\n\n\n======================================================================\nFAIL: test_json_key_sorting (flask.testsuite.helpers.JSONTestCase)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/mnt/gen2/TmpDir/portage/dev-python/flask-0.10.1-r1/work/Flask-0.10.1/flask/testsuite/helpers.py\", line 200, in test_json_key_sorting\n    '}'\n  File \"/mnt/gen2/TmpDir/portage/dev-python/flask-0.10.1-r1/work/Flask-0.10.1/flask/testsuite/__init__.py\", line 139, in assert_equal\n    return self.assertEqual(x, y)\nAssertionError: Lists differ: ['{', '\"values\": {', '\"0\": \"fo... != ['{', '\"values\": {', '\"0\": \"fo...\n\nFirst differing element 4:\n\"10\": \"foo\",\n\"2\": \"foo\",\n\n  ['{',\n   '\"values\": {',\n   '\"0\": \"foo\",',\n   '\"1\": \"foo\",',\n+  '\"2\": \"foo\",',\n+  '\"3\": \"foo\",',\n+  '\"4\": \"foo\",',\n+  '\"5\": \"foo\",',\n+  '\"6\": \"foo\",',\n+  '\"7\": \"foo\",',\n+  '\"8\": \"foo\",',\n+  '\"9\": \"foo\",',\n   '\"10\": \"foo\",',\n   '\"11\": \"foo\",',\n   '\"12\": \"foo\",',\n   '\"13\": \"foo\",',\n   '\"14\": \"foo\",',\n   '\"15\": \"foo\",',\n   '\"16\": \"foo\",',\n   '\"17\": \"foo\",',\n   '\"18\": \"foo\",',\n-  '\"19\": \"foo\",',\n?              -\n\n+  '\"19\": \"foo\"',\n-  '\"2\": \"foo\",',\n-  '\"3\": \"foo\",',\n-  '\"4\": \"foo\",',\n-  '\"5\": \"foo\",',\n-  '\"6\": \"foo\",',\n-  '\"7\": \"foo\",',\n-  '\"8\": \"foo\",',\n-  '\"9\": \"foo\"',\n   '}',\n   '}']\n\n======================================================================\nFAIL: test_appcontext_signals (flask.testsuite.signals.SignalsTestCase)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/mnt/gen2/TmpDir/portage/dev-python/flask-0.10.1-r1/work/Flask-0.10.1/flask/testsuite/signals.py\", line 118, in test_appcontext_signals\n    self.assert_equal(recorded, ['push', 'pop'])\n  File \"/mnt/gen2/TmpDir/portage/dev-python/flask-0.10.1-r1/work/Flask-0.10.1/flask/testsuite/__init__.py\", line 139, in assert_equal\n    return self.assertEqual(x, y)\nAssertionError: Lists differ: ['push', 'push'] != ['push', 'pop']\n\nFirst differing element 1:\npush\npop\n\n- ['push', 'push']\n?            ^^^\n\n+ ['push', 'pop']\n?            ^^\n\n\n----------------------------------------------------------------------\nRan 233 tests in 4.839s\n\nFAILED (failures=3)", "issue_status": "Closed", "issue_reporting_time": "2013-08-16T08:50:21Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1360": {"issue_url": "https://github.com/pallets/flask/issues/836", "issue_id": "#836", "issue_summary": "Tutorial stores passwords in plaintext", "issue_description": "ssbr commented on 15 Aug 2013\nhttp://flask.pocoo.org/docs/tutorial/views/#login-and-logout\nFlask should not lead new users astray, and should instead make it as easy and obvious as possible to do the right thing.", "issue_status": "Closed", "issue_reporting_time": "2013-08-14T21:29:45Z", "fixed_by": "#1854", "pull_request_summary": "Issue #836: Tweaking tutorial warning about plain text passwords and \u2026", "pull_request_description": "Contributor\nwldtyp commented on 3 Jun 2016 \u2022\nedited\n\u2026pointing users towards extensions registry\nNot a huge change, but hopefully makes it clear that plain text is dangerous and puts people on the right path to implement password hashing if they choose\nfix #836", "pull_request_status": "Merged", "issue_fixed_time": "2016-06-03T08:00:55Z", "files_changed": [["25", "docs/tutorial/views.rst"]]}, "1361": {"issue_url": "https://github.com/pallets/flask/issues/835", "issue_id": "#835", "issue_summary": "jsonify a Decimal", "issue_description": "michaelfillier commented on 14 Aug 2013\nCurrently getting a TypeError: Decimal('0.10') is not JSON serializable error when, you guessed it, I try to encode a Decimal.\nI found an accepted fix here: http://stackoverflow.com/questions/4019856/decimal-to-json, but not sure where I should be implementing that within Flask. I tried it within my main app file, but it doesn't appear to be working.\n3", "issue_status": "Closed", "issue_reporting_time": "2013-08-14T15:32:51Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1362": {"issue_url": "https://github.com/pallets/flask/issues/834", "issue_id": "#834", "issue_summary": "How to get the serialized version of the session cookie in 0.10?", "issue_description": "lipis commented on 14 Aug 2013\nIn version 0.9 I could simply get the value of the session like this:\nflask.session.serialize()\nBut after upgrading to 0.10 this is not working anymore.. what's the alternative? How can I get the session value?\n(flask.request.cookies.get('session') is not good for me, because I would like to get the session right after login, so it's not part of the request yet)", "issue_status": "Closed", "issue_reporting_time": "2013-08-13T19:13:32Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1363": {"issue_url": "https://github.com/pallets/flask/issues/833", "issue_id": "#833", "issue_summary": "mod_wsgi docuementation", "issue_description": "lpapp commented on 12 Aug 2013\nUnfortunately, I have spent almost two hours altogether with tracking down a simple Attribute issue alongside others' time who were trying to kindly help me.\nThe problem is simply that I could not get the error message to fix a trivial issue. This is because I was trying to use the following these two lines to get debug messages based on the quick start:\nif name == 'main':\napplication.run(debug=True)\n... however this will not work with mod_wsgi, now I know.\nHereby, I suggest to improve the documentation by including this fact, and advise the use of the following instead:\napplication.debug = True\nThis will potentially save a lot of time for those users, and it is not an intrusive documentation addition either.", "issue_status": "Closed", "issue_reporting_time": "2013-08-12T17:03:43Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1364": {"issue_url": "https://github.com/pallets/flask/issues/832", "issue_id": "#832", "issue_summary": "URLSafeTimedSerializer may be vulnerable to a CRIME or BREACH style attack in some implemtations?", "issue_description": "public commented on 12 Aug 2013\nURLSafeTimedSerializer is the default session backend and it seems to match the requirements (mostly it's use of zlib) for this class of attack to work even if protocol level mitigations have already been used. You'd need a user controllable value in the cookie but I suspect this is not entirely uncommon.", "issue_status": "Closed", "issue_reporting_time": "2013-08-12T09:53:34Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1365": {"issue_url": "https://github.com/pallets/flask/issues/828", "issue_id": "#828", "issue_summary": "itsdangerous dependency missing LICENSE file", "issue_description": "jml commented on 8 Aug 2013\nThe source tarball for itsdangerous 0.22 is missing a LICENSE file. pallets/itsdangerous#22 This means that flask 0.10.1 cannot be packaged.", "issue_status": "Closed", "issue_reporting_time": "2013-08-08T11:45:01Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1366": {"issue_url": "https://github.com/pallets/flask/issues/826", "issue_id": "#826", "issue_summary": "Reloader changes sys.path", "issue_description": "daryltucker commented on 8 Aug 2013\nWhen loading my flask module python -m project.modules.flaskhandler.py everything works nicely. Unfortunately, if I enable debug mode and use_reloader, the module is loaded, but when reloader restarts the application, it changes my sys.path.\nsys.path's first value changes from '' to 'project/modules/' which prevents absolute imports from other modules in my project.\nI was able to work around this problem with the following code at the top of my flaskhandler.py file:\nimport sys\nimport os\n\n# Flask reloader hack\nsys.path.append(os.getcwd())", "issue_status": "Closed", "issue_reporting_time": "2013-08-07T21:54:48Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1367": {"issue_url": "https://github.com/pallets/flask/issues/825", "issue_id": "#825", "issue_summary": "Incomplete mod_wsgi documentation", "issue_description": "lpapp commented on 7 Aug 2013\nI have been having issues for 3-4 days now to get a hello world up and running on the remote server. I figured out that it would be nice if there was a documentation from A-Z how to get that done and working.\nhttp://flask.pocoo.org/docs/deploying/mod_wsgi/\nThe current documentation does not provide an example what to put into an exact python file, and what url to open up in the web browser to get the desired python module running on the remote server. It is okay to have references to other places if that is more logical, but the idea is to have a self-contained page which I can start reading, and by I reach the end, I will have a working remote hello world.\nThis would be well appreciated.", "issue_status": "Closed", "issue_reporting_time": "2013-08-07T14:07:27Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1368": {"issue_url": "https://github.com/pallets/flask/issues/824", "issue_id": "#824", "issue_summary": "url_for(*args, _external=True) doesn't add the port to the full url", "issue_description": "celestian02 commented on 6 Aug 2013\nWhen using url_for with _external argument set to \"True\", the returned url does not contain the port which defaults the url to port 80.\nI have read a few posts regarding this and it was because people were not specifying the full \"SERVER_NAME\" but I didn't set it.\nAt first, I was creating an app context to use url_for but it told me I had to set my server name but I can't set it as it might be dynamic upon a user configuration.\nAnyhow, what I did was to create an app context and create a test_request context to use url_for which gave me the whole URL without the port.", "issue_status": "Closed", "issue_reporting_time": "2013-08-06T14:41:11Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1369": {"issue_url": "https://github.com/pallets/flask/issues/822", "issue_id": "#822", "issue_summary": "Feature request. Regex in url rules", "issue_description": "iLikeKoffee commented on 6 Aug 2013\nI wish to be able to use regex in url rules. For example\n@app.route('/<regex:*regular expression*:var>/')\ndef page(var):\n     return var.Upper()\nIs it possible to make it real?\nP.S. I wish to take part in it, but I need a kind of mentoring.", "issue_status": "Closed", "issue_reporting_time": "2013-08-05T21:53:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1370": {"issue_url": "https://github.com/pallets/flask/issues/821", "issue_id": "#821", "issue_summary": "Support mapping multiple subdomains to a single blueprint", "issue_description": "rturpin commented on 5 Aug 2013\nI have a website with acces by more subdomain like :\n'www.mysite.com', 'category1.mysite.com', 'category2.mysite.com', ...\nwhose point to one blueprint.\nIt's interesting to manage more one subdomain by blueprint, for example by a list :\nlanding_bp = Blueprint('landing', name, subdomain=['www','category1','category2'], url_prefix='/landing')\nOr disable subdomain.\nThank's you.", "issue_status": "Closed", "issue_reporting_time": "2013-08-05T08:15:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1371": {"issue_url": "https://github.com/pallets/flask/issues/818", "issue_id": "#818", "issue_summary": "In the Flaskr Exemple - Change '/ tmp / flaskr.db' to 'flaskr.db'", "issue_description": "matheus commented on 2 Aug 2013\nI am new to programming, I tried to run flaskr but could not because the application does not find the directory '/ tmp / flaskr.db' if the path is 'flaskr.db' not to run the application.\nCan I do this?", "issue_status": "Closed", "issue_reporting_time": "2013-08-02T17:17:08Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1372": {"issue_url": "https://github.com/pallets/flask/issues/815", "issue_id": "#815", "issue_summary": "methods argument of Flask.route should be validated at import time", "issue_description": "Member\nuntitaker commented on 31 Jul 2013\nI've seen that people often write @app.route(..., methods=[\"POST\"]) as @app.route(..., methods=\"POST\"), which won't error immediately, but return a 405 status code later.\nWhich is very unfortunate, as people might think the methods parameter is a space or comma separated string with methods. Sometimes i write that myself because i still don't memorize that this part of Flask's API is actually that \"heavy\" on the syntax.\nSo what i propose is to add the following normalization code in Flask.add_url_rule:\nif isinstance(methods, str):\n    if ',' in methods:\n        methods = methods.split(',')\n    elif ' ' in methods:\n        methods = methods.split(' ')\n    else:\n        methods = (methods,)", "issue_status": "Closed", "issue_reporting_time": "2013-07-30T19:39:03Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1373": {"issue_url": "https://github.com/pallets/flask/issues/812", "issue_id": "#812", "issue_summary": "flash(my_message) raised 'is not JSON serializable' when Flask 0.9 migrate to 0.10", "issue_description": "adesst commented on 30 Jul 2013\nFedora 14 64bit, using virtualenv\ncode in views.py\n...\ndef index()\n...\nflash(message)\nreturn ...\nin Flask 0.9 it works fine.\nBut when i use 0.10 then it throws me:\nTraceback (most recent call last):\nFile \"/opt/flask/lib/python2.7/site-packages/gevent/pywsgi.py\", line 438, in handle_one_response\nself.run_application()\nFile \"/opt/flask/lib/python2.7/site-packages/gevent/pywsgi.py\", line 424, in run_application\nself.result = self.application(self.environ, self.start_response)\nFile \"/opt/flask/flask-websocket/app/init.py\", line 52, in my_app\nreturn app(environ, start_response)\nFile \"/opt/flask/lib/python2.7/site-packages/flask/app.py\", line 1836, in call\nreturn self.wsgi_app(environ, start_response)\nFile \"/opt/flask/lib/python2.7/site-packages/flask/app.py\", line 1820, in wsgi_app\nresponse = self.make_response(self.handle_exception(e))\nFile \"/opt/flask/lib/python2.7/site-packages/flask/app.py\", line 1403, in handle_exception\nreraise(exc_type, exc_value, tb)\nFile \"/opt/flask/lib/python2.7/site-packages/flask/app.py\", line 1817, in wsgi_app\nresponse = self.full_dispatch_request()\nFile \"/opt/flask/lib/python2.7/site-packages/flask/app.py\", line 1479, in full_dispatch_request\nresponse = self.process_response(response)\nFile \"/opt/flask/lib/python2.7/site-packages/flask/app.py\", line 1693, in process_response\nself.save_session(ctx.session, response)\nFile \"/opt/flask/lib/python2.7/site-packages/flask/app.py\", line 837, in save_session\nreturn self.session_interface.save_session(self, session, response)\nFile \"/opt/flask/lib/python2.7/site-packages/flask/sessions.py\", line 326, in save_session\nval = self.get_signing_serializer(app).dumps(dict(session))\nFile \"/opt/flask/lib/python2.7/site-packages/itsdangerous.py\", line 537, in dumps\npayload = want_bytes(self.dump_payload(obj))\nFile \"/opt/flask/lib/python2.7/site-packages/itsdangerous.py\", line 809, in dump_payload\njson = super(URLSafeSerializerMixin, self).dump_payload(obj)\nFile \"/opt/flask/lib/python2.7/site-packages/itsdangerous.py\", line 522, in dump_payload\nreturn want_bytes(self.serializer.dumps(obj))\nFile \"/opt/flask/lib/python2.7/site-packages/flask/sessions.py\", line 85, in dumps\nreturn json.dumps(_tag(value), separators=(',', ':'))\nFile \"/opt/flask/lib/python2.7/site-packages/flask/json.py\", line 126, in dumps\nrv = _json.dumps(obj, **kwargs)\nFile \"/usr/lib64/python2.7/site-packages/simplejson/init.py\", line 268, in dumps\nuse_decimal=use_decimal, **kw).encode(obj)\nFile \"/usr/lib64/python2.7/site-packages/simplejson/encoder.py\", line 216, in encode\nchunks = list(chunks)\nFile \"/usr/lib64/python2.7/site-packages/simplejson/encoder.py\", line 485, in _iterencode\nfor chunk in _iterencode_dict(o, _current_indent_level):\nFile \"/usr/lib64/python2.7/site-packages/simplejson/encoder.py\", line 459, in _iterencode_dict\nfor chunk in chunks:\nFile \"/usr/lib64/python2.7/site-packages/simplejson/encoder.py\", line 380, in _iterencode_list\nfor chunk in chunks:\nFile \"/usr/lib64/python2.7/site-packages/simplejson/encoder.py\", line 459, in _iterencode_dict\nfor chunk in chunks:\nFile \"/usr/lib64/python2.7/site-packages/simplejson/encoder.py\", line 380, in _iterencode_list\nfor chunk in chunks:\nFile \"/usr/lib64/python2.7/site-packages/simplejson/encoder.py\", line 495, in _iterencode\no = _default(o)\nFile \"/opt/flask/lib/python2.7/site-packages/flask/json.py\", line 83, in default\nreturn _json.JSONEncoder.default(self, o)\nFile \"/usr/lib64/python2.7/site-packages/simplejson/encoder.py\", line 190, in default\nraise TypeError(repr(o) + \" is not JSON serializable\")\nTypeError: lu'Transaction 20 of F3535324 has been added ' is not JSON serializable", "issue_status": "Closed", "issue_reporting_time": "2013-07-30T06:48:56Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1374": {"issue_url": "https://github.com/pallets/flask/issues/810", "issue_id": "#810", "issue_summary": "Running flask with unbuffered stdout exits upon reload", "issue_description": "michaelyork commented on 29 Jul 2013\nWhen you run a Flask application with Python's -u parameter and Flask's auto-reloader, the application exits upon reload. Expected action is to reload and continue to run.", "issue_status": "Closed", "issue_reporting_time": "2013-07-29T04:58:37Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1375": {"issue_url": "https://github.com/pallets/flask/issues/805", "issue_id": "#805", "issue_summary": "Run an applicaton with another server", "issue_description": "phndiaye commented on 26 Jul 2013\nCurrently, the run() method of the Flask object takes as parameters the host, the port, the debug mode, and some options (like the reloader mode).\nIt would be cool to add a server parameter that will be set default to Werkzeug's run_simple() function but could be another one like Gunicorn.\nTo run an application with our choice server, we could do:\napplication.run(host=0.0.0.0, port=5000, server='gunicorn')\nThis is mostly a \u00abshortcut\u00bb than a real feature. If you have any cons (or pros, why not), please tell me :)", "issue_status": "Closed", "issue_reporting_time": "2013-07-26T09:44:24Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1376": {"issue_url": "https://github.com/pallets/flask/issues/804", "issue_id": "#804", "issue_summary": "Instructions for configuring FastCGI under Apache are incorrect", "issue_description": "Contributor\neradman commented on 26 Jul 2013\nThe use of ScriptAlias at http://flask.pocoo.org/docs/deploying/fastcgi/\nis not correct because it will spawn one process per request. This is a more useful example derived from http://requesttracker.wikia.com/wiki/FastCGIConfiguration\nLoadModule fastcgi_module /usr/lib64/httpd/modules/mod_fastcgi.so\n\nFastCgiServer /var/www/html/eventlog/app.fcgi -idle-timeout 300 -processes 5\n<VirtualHost *>\n    ServerName webapp1.mydomain.com\n    DocumentRoot /var/www/html/eventlog\n\n    AddHandler fastcgi-script fcgi\n    ScriptAlias / /var/www/html/eventlog/app.fcgi/\n\n    <Location />\n        SetHandler fastcgi-script\n    </Location>\n</VirtualHost>", "issue_status": "Closed", "issue_reporting_time": "2013-07-25T18:50:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1377": {"issue_url": "https://github.com/pallets/flask/issues/803", "issue_id": "#803", "issue_summary": "can not correctly handle the POST param with \"_\" underscore", "issue_description": "AlvarHHM commented on 25 Jul 2013\nwill return\n<title>400 Bad Request</title>\nBad Request\nThe browser (or proxy) sent a request that this server could not understand.", "issue_status": "Closed", "issue_reporting_time": "2013-07-25T12:56:21Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1378": {"issue_url": "https://github.com/pallets/flask/issues/802", "issue_id": "#802", "issue_summary": "Acquire SSL client certificate from development server", "issue_description": "motine commented on 23 Jul 2013\nDear Flask-Team,\nthanks for the good work. I have been using Flask for quite a while now.\nIn my project I use flask to receive requests from a command line client.\nThe server is running with an adhoc SSL context. The client sends a SSL client certificate which I need to parse in the request handler.\nIf I use a web server (e.g. nginx) to dispatch the request to Flask, I can configure the request environment to include the client certificate like so:\nfastcgi_param CLIENT_CERT $ssl_client_cert;\nfastcgi_param CLIENT_RAW_CERT $ssl_client_raw_cert;\nNow, I want the same behavior when I run the development server (or any other mean to get the client cert).\nCurrently I am starting the app server like so:\nself._app.run(host=host, port=app_port, ssl_context='adhoc', debug=True)\nCan you help?", "issue_status": "Closed", "issue_reporting_time": "2013-07-23T11:21:35Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1379": {"issue_url": "https://github.com/pallets/flask/issues/801", "issue_id": "#801", "issue_summary": "Given absolute URL, testclient discards query params", "issue_description": "ryanolson commented on 23 Jul 2013\nThe following fails at the assert inside the index subroutine.\nimport unittest\nfrom flask import Flask, url_for, request, jsonify\n\nclass TestFlask(unittest.TestCase):\n\n    def test_get_with_arguments(self):\n        app = Flask(__name__)\n        app.debug = True\n\n        @app.route('/echo')\n        def index():\n            assert 'key' in request.args\n            return jsonify( dict(key=request.args['key']) )\n\n        url = None\n        with app.test_request_context():\n            url = url_for('index', key='test', _external=True)\n\n        assert url == 'http://localhost/echo?key=test'\n\n        rv = app.test_client().get(url)\n        assert 'key' in rv.data", "issue_status": "Closed", "issue_reporting_time": "2013-07-23T06:04:41Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1380": {"issue_url": "https://github.com/pallets/flask/issues/797", "issue_id": "#797", "issue_summary": "Can't find requet.form or requesrt.values items with post request for flask 0.10.1", "issue_description": "tbicr commented on 11 Jul 2013\nI have next example which work fine with flask==0.9, werkzeug==0.8.3 and fail with flask==0.10.1, werkzeug==0.9.1:\nfrom flask import Flask, request\n\n\ndef create_app():\n    class Config(object):\n        SECRET_KEY = 'test'\n\n    app = Flask(__name__)\n    app.config.from_object(Config)\n\n    @app.route('/', methods=['POST'])\n    def home():\n        assert request.values['PHONE'] == '+7(910)123-45-67'\n        return request.values['PHONE']\n\n    return app\n\n\nif __name__ == '__main__':\n    app = create_app()\n    #app.run('0.0.0.0', 8080, True)\n    client = app.test_client()\n    response = client.post('/', data={'PHONE': '+7(910)123-45-67'})\n    assert response.data == '+7(910)123-45-67', response.data\nWhen I try wget --post-data='PHONE=%2B7%28910%29123-45-67' localhost:8080 it also will work with flask==0.9 and don't with flask==0.10.1.\nFor flask==0.10.1 I have request.data=='PHONE=%2B7%28910%29123-45-67', but empty request.values and request.form.", "issue_status": "Closed", "issue_reporting_time": "2013-07-11T11:25:43Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1381": {"issue_url": "https://github.com/pallets/flask/issues/796", "issue_id": "#796", "issue_summary": "Compatibility problems between 0.9 - 0.10?", "issue_description": "rplopes commented on 9 Jul 2013\nI'm getting the following error in flask 0.10:\nAssertionError: View function mapping is overwriting an existing endpoint function: etc\nThe other members of the project, who have configured their environment earlier, are not getting this error. The requirements.txt file is requesting flask 0.9, but whenever I try to install that version, I end up having 0.10.\nSo I'm assuming that the difference between their environment and mine is that version number (since that error is related to flask). So are there new features in 0.10 that break apps developed for 0.9? And how can I install 0.9? It looks like the 0.9 branch is missing in the repo.", "issue_status": "Closed", "issue_reporting_time": "2013-07-09T17:51:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1382": {"issue_url": "https://github.com/pallets/flask/issues/795", "issue_id": "#795", "issue_summary": "route to view_func with same decorators", "issue_description": "anas-aldrees commented on 9 Jul 2013\nlets suppose i have this routes:\napp.add_url_rule('/',\n                  view_func=index,\n                  methods=['GET'])\n\napp.add_url_rule('login',\n                  view_func=login,\n                  methods=['GET', 'POST'])\n\n@validate_access()\ndef index():\n    #......\n\n@validate_access()\ndef login():\n    #......\nI have 2 endpoints with same decorator \"@validate_access\".\nWhen i run this code i got\nAssertionError: View function mapping is overwriting an existing endpoint function: wrapperAssertionError: View function mapping is overwriting an existing endpoint function: wrapper\nI don't know if its a bug or not. But please inform me if there is a solution for this.\nThanks :)", "issue_status": "Closed", "issue_reporting_time": "2013-07-09T05:23:53Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1383": {"issue_url": "https://github.com/pallets/flask/issues/794", "issue_id": "#794", "issue_summary": "Pluggable Method Views broken by fix for #570", "issue_description": "ajford commented on 8 Jul 2013\nSo I'm not sure if this is meant to happen, but when you attempt to use MethodViews as described in the docs http://flask.pocoo.org/docs/views/#method-views-for-apis, I get an Assertion Error generated by the app.add_url_rule added in 661ee54. This commit was created to fix #570.\nThe MethodView example in the docs calls for registering multiple routes to the same class, which causes an AssertionError to be raised.\nIs there another way to create a method based set of views without causing this error to be raised? Would it be better to switch from an AssertionError to a Warning that could be ignored?", "issue_status": "Closed", "issue_reporting_time": "2013-07-07T22:33:20Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1384": {"issue_url": "https://github.com/pallets/flask/issues/793", "issue_id": "#793", "issue_summary": "How to use the multi url_prefix with same Blueprint?", "issue_description": "dreampuf commented on 7 Jul 2013\nbp = Blueprint(__name__, __name__, url_prefix=(\"/profile\", \"/personal/profile\"), static_folder=\"static\")\n\n@bp.route(\"/main\", methods=[\"GET\"])\ndef page():\n    pass", "issue_status": "Closed", "issue_reporting_time": "2013-07-07T16:55:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1385": {"issue_url": "https://github.com/pallets/flask/issues/791", "issue_id": "#791", "issue_summary": "os.system in a own thread blocks the REST request if Response is a generator", "issue_description": "chilicat commented on 5 Jul 2013\nHello,\nI'm new to python and I'm just playing around Flask.\nPlease consider following application (I have simplified my application to just show the issue):\n@app.route('/thread', methods=['GET'])\ndef thre():\n\n    def run():\n        # Execute some external command. \n        # Note: I tried popen, call, etc...\n        os.system(\"sleep 10\")\n        print \"Done\"\n\n    # Execute the external command in a own process in order to return quickly\n    # Note: I tried Thread, start_thread, etc...\n    backProc = Process(target=run, args=())\n    backProc.start()        \n\n    # Create a generator/iterator. (Simplified)\n    def gen():\n        yield \"My Result\"\n        return\n\n    # Return the generator. \n    return Response(gen(),  status = 200, mimetype='text/plain')\nIf I will now call the REST service with curl\ncurl localhost:5000/thread\nthen I noticed that curl waits 10 seconds before it returns. It seem like that the \"os.system\" call blocks Flask of sending the data to the client.\nIf I use the same example without generator/iterator everything works as expected. The client receives the \"My Result\" before the \"os.system\" call finished.", "issue_status": "Closed", "issue_reporting_time": "2013-07-05T07:36:22Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1386": {"issue_url": "https://github.com/pallets/flask/issues/789", "issue_id": "#789", "issue_summary": "Adjust documentation on testing to reflect changes to ``flask.g``", "issue_description": "joostdevries commented on 3 Jul 2013\nOn docs/_sources/testing.txt it states in the section Faking resources and context:\nA very common pattern is to store user authorization information and\ndatabase connections on the application context or the :attr:flask.g\nobject. The general pattern for this is to put the object on there on\nfirst usage and then to remove it on a teardown. Imagine for instance\nthis code to get the current user::\nThis should be adjusted as fask.g is now registered on the application context.", "issue_status": "Closed", "issue_reporting_time": "2013-07-03T12:04:57Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1387": {"issue_url": "https://github.com/pallets/flask/issues/788", "issue_id": "#788", "issue_summary": "json.py use bson.json_util", "issue_description": "chmoder commented on 3 Jul 2013\nHi,\nI was testing out flask today and noticed that the default object type returned from PyMongo specifically (flask.ext.pymongo) could not parse objects with ObjectID and some date types.\nThere is a library in bson called json_util that can serialize eveything dumps can and everything from a mongodb document.\nSo I was wondering if you would consider using that, i am testing it in my code locally now. I may even try return an array or object depending on the size of the mongo result.\nfrom __future__ import absolute_import\nfrom flask import make_response, current_app\n<<<from bson import json_util>>>\nfrom json import dumps\n\n# This dictionary contains any kwargs that are to be passed to the json.dumps\n# function, used below.\nsettings = {}\n\n\ndef output_json(data, code, headers=None):\n    \"\"\"Makes a Flask response with a JSON encoded body\"\"\"\n\n    # If we're in debug mode, and the indent is not set, we set it to a\n    # reasonable value here.  Note that this won't override any existing value\n    # that was set.  We also set the \"sort_keys\" value.\n    local_settings = settings.copy()\n    if current_app.debug:\n        local_settings.setdefault('indent', 4)\n        local_settings.setdefault('sort_keys', True)\n\n    # We also add a trailing newline to the dumped JSON if the indent value is\n    # set - this makes using `curl` on the command line much nicer.\n    dumped = dumps(data, <<<default=json_util.default,>>> **local_settings)\n    if 'indent' in local_settings:\n        dumped += '\\n'\n\n    resp = make_response(dumped, code)\n    resp.headers.extend(headers or {})\n    return resp", "issue_status": "Closed", "issue_reporting_time": "2013-07-02T20:46:10Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1388": {"issue_url": "https://github.com/pallets/flask/issues/785", "issue_id": "#785", "issue_summary": "No way create url with `url_for` to another host", "issue_description": "tbicr commented on 29 Jun 2013\nIf I have multilanguage site, for example english version hosted on example.com and russian on example.ru I can't create url to site with another language with url_for.\nIf I have static files and want put it to CDN for production. I can't set url to it with url_for.\nSo it will be greate add additional variable to _external, _method, _achor like _server_name (or make _external as string to another host) for url_for.\nIf _server_name is None (or _external is False or not basestring) , then return url like now.\nIf _server_name is not None and _external is True, then raise exception or ignore _external.\nIf _servet_name is not None and _external is False (or _external is basestring), then return url like application config have SERVER_NAME == _sever_name and _external is True.\nAlso will be greate make default _server_name (or _external) for specific endpoints. For example for static endpoint add default server name to application config because it allow move current static to CDN with changing just config.", "issue_status": "Closed", "issue_reporting_time": "2013-06-29T16:46:48Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1389": {"issue_url": "https://github.com/pallets/flask/issues/783", "issue_id": "#783", "issue_summary": "flaskr tutorial suggestion: Omit or isolate the text about \"from_envvar\"", "issue_description": "maveryKearney commented on 28 Jun 2013\nIt's my curse to discover documentation ambiguities ( even when they don't exist ) and then trip over them.\nWhen I read, (step 2 of flaskr tutorial)\n\"Usually, it is a good idea to load a configuration from a configurable file. This is what from_envvar() can do, replacing the from_object() line above:\napp.config.from_envvar('FLASKR_SETTINGS', silent=True)\nThat way someone can set an environment variable called FLASKR_SETTINGS to specify a config file to be loaded which will then override the default values. The silent switch just tells Flask to not complain if no such environment key is set.\"\nI took that to mean, \"Replace that 'from_object\" instance. Well no. The text does not say that but I did anyway and debugged for a while until I removed the silent option, saw the noise and realized that that line would not work as described in this context.\nIt is a good point. Configuration files are good. I would box this into a \"Note:\" That concludes with a, \"Do not replace this line now.\"\nSimpler of course would be to omit entirely. Another alternative is to leave as a problem for the reader at the end of the section.\n(Documentation is hard - there are too many personally costumized mental OS's out there to ever possibly fully debug docs)", "issue_status": "Closed", "issue_reporting_time": "2013-06-27T18:48:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1390": {"issue_url": "https://github.com/pallets/flask/issues/782", "issue_id": "#782", "issue_summary": "Flaskr tutorial suggestion - Use DATABASE='flaskr' instead of DATABASE='/tmp/flaskr'", "issue_description": "maveryKearney commented on 27 Jun 2013\nTitle says it all.\n1..DATABASE='flaskr' works for windows and linux\n2..DATABASE='/tmp/flaskr' only works for linux and probably OS10", "issue_status": "Closed", "issue_reporting_time": "2013-06-27T18:24:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1391": {"issue_url": "https://github.com/pallets/flask/issues/781", "issue_id": "#781", "issue_summary": "test_appcontext_signals() fails with blinker installed", "issue_description": "Arfrever commented on 27 Jun 2013\ntest_appcontext_signals() fails with blinker installed. I use blinker 1.2. This failure occurs with Python 2.6, 2.7 and 3.3.\n======================================================================\nFAIL: test_appcontext_signals (flask.testsuite.signals.SignalsTestCase)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/tmp/flask/flask/testsuite/signals.py\", line 118, in test_appcontext_signals\n    self.assert_equal(recorded, ['push', 'pop'])\n  File \"/tmp/flask/flask/testsuite/__init__.py\", line 139, in assert_equal\n    return self.assertEqual(x, y)\nAssertionError: Lists differ: ['push', 'push'] != ['push', 'pop']\n\nFirst differing element 1:\npush\npop\n\n- ['push', 'push']\n?            ^^^\n\n+ ['push', 'pop']\n?            ^^", "issue_status": "Closed", "issue_reporting_time": "2013-06-27T02:46:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1392": {"issue_url": "https://github.com/pallets/flask/issues/780", "issue_id": "#780", "issue_summary": "test_json_key_sorting() fails with simplejson installed", "issue_description": "Arfrever commented on 27 Jun 2013\ntest_json_key_sorting() fails with simplejson installed. I use simplejson 3.3.0. This failure occurs with Python 2.6, 2.7 and 3.3.\n======================================================================\nFAIL: test_json_key_sorting (flask.testsuite.helpers.JSONTestCase)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/tmp/flask/flask/testsuite/helpers.py\", line 200, in test_json_key_sorting\n    '}'\n  File \"/tmp/flask/flask/testsuite/__init__.py\", line 139, in assert_equal\n    return self.assertEqual(x, y)\nAssertionError: Lists differ: ['{', '\"values\": {', '\"0\": \"fo... != ['{', '\"values\": {', '\"0\": \"fo...\n\nFirst differing element 4:\n\"10\": \"foo\",\n\"2\": \"foo\",\n\n  ['{',\n   '\"values\": {',\n   '\"0\": \"foo\",',\n   '\"1\": \"foo\",',\n+  '\"2\": \"foo\",',\n+  '\"3\": \"foo\",',\n+  '\"4\": \"foo\",',\n+  '\"5\": \"foo\",',\n+  '\"6\": \"foo\",',\n+  '\"7\": \"foo\",',\n+  '\"8\": \"foo\",',\n+  '\"9\": \"foo\",',\n   '\"10\": \"foo\",',\n   '\"11\": \"foo\",',\n   '\"12\": \"foo\",',\n   '\"13\": \"foo\",',\n   '\"14\": \"foo\",',\n   '\"15\": \"foo\",',\n   '\"16\": \"foo\",',\n   '\"17\": \"foo\",',\n   '\"18\": \"foo\",',\n-  '\"19\": \"foo\",',\n?              -\n\n+  '\"19\": \"foo\"',\n-  '\"2\": \"foo\",',\n-  '\"3\": \"foo\",',\n-  '\"4\": \"foo\",',\n-  '\"5\": \"foo\",',\n-  '\"6\": \"foo\",',\n-  '\"7\": \"foo\",',\n-  '\"8\": \"foo\",',\n-  '\"9\": \"foo\"',\n   '}',\n   '}']", "issue_status": "Closed", "issue_reporting_time": "2013-06-27T02:44:54Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1393": {"issue_url": "https://github.com/pallets/flask/issues/779", "issue_id": "#779", "issue_summary": "Doc suggestion: In QuickStart 10.1 define \"Reversing\" before using it", "issue_description": "maveryKearney commented on 27 Jun 2013\nUnder the URL Building section. I read,\n\"Reversing is often more descriptive than hard-coding the URLs.\"\nAnd I thought, \"I have been asleep while reading again\". So I did a search on the Quickstart, and this is the first instance of the term \"reversing\" in the text. I couldn't make any sense of \"reversing'\". Worse how could it be more descriptive when I have no idea what it is. After searching a bit, I suggest the following minor change to text at the beginning of the section.\nReplace:\n\"If it can match URLs, can Flask also generate them? Of course it can. To build a URL to a specific function you can use the url_for() function.\"\nWith:\n\"If Flask can match URLs, can it also generate them? Of course it can. To build a URL for a specific function you can use the url_for() function. This is called reversing the view.\"\nDo I have this right? Django at least talks about functionality that is similar to what you are talking about here. Terminology is never an exact match across similar tools. So if my suggestion is not correct, then it is demonstration of how I came to the wrong conclusion.\nRegards, Flask is definitely cool.\n-m", "issue_status": "Closed", "issue_reporting_time": "2013-06-26T22:25:15Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1394": {"issue_url": "https://github.com/pallets/flask/issues/778", "issue_id": "#778", "issue_summary": "repr(request) is broken if the query string or url contains non-ascii characters", "issue_description": "Member\nThiefMaster commented on 26 Jun 2013\nrepr(request) raises\nUnicodeEncodeError: 'ascii' codec can't encode character u'\\xf6' in position 44: ordinal not in range(128)\noddly enough, request._get_current_object().__repr__() works\nApparently __repr__ must return str in Python 2: http://stackoverflow.com/questions/3627793/best-output-type-and-encoding-practices-for-repr-functions", "issue_status": "Closed", "issue_reporting_time": "2013-06-26T14:51:54Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1395": {"issue_url": "https://github.com/pallets/flask/issues/777", "issue_id": "#777", "issue_summary": "infinite processes with multiprocessing and app.run(debug=True)", "issue_description": "dpinney commented on 25 Jun 2013\nI'm building a flask app that would benefit from being able to spawn some subprocesses via python's standard multiprocessing module.\nHowever, spawning just one leads to an endless loop where an infinite number of processes are spawned. Yikes! It only happens when debug=True is passed to app.run. So it's not a problem in production, but it makes debugging hard.\nThis problem doesn't happen with the threading module, interestingly enough.\nCode to reproduce (Python version 2.7.3 on Windows 7 x64) follows:\nimport time\nfrom multiprocessing import Process\nfrom flask import Flask\n\napp = Flask(__name__)\n\ndef testFun():\n    print 'Starting'\n    time.sleep(3)\n    print '3 Seconds Later'\nbackProc = Process(target=testFun, args=())\nbackProc.start()\n\n@app.route('/')\ndef root():\n    return 'Root'\n\nif __name__ == '__main__':\n    app.run(debug=True)", "issue_status": "Closed", "issue_reporting_time": "2013-06-25T00:35:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1396": {"issue_url": "https://github.com/pallets/flask/issues/774", "issue_id": "#774", "issue_summary": "Add a way to give feedback from the command line.", "issue_description": "Member\nuntitaker commented on 23 Jun 2013\nhttp://feedback.flask.pocoo.org/faq\nWhile we cannot integrate that into Flask in the same way because we do not have any kind of user interface that could accomodate such a button, we however encourage users to send us little messages about their experience with Flask.\nThere is a way to give users a way to send feedback through Flask -- by making the feedback form part of Flask's API.\nMy original idea was to create a new module flask.feedback that would expose two functions called something like is_good/is_bad which would be imported from flask.__init__.\nSo the enduser can do the following:\n>>> import flask\n>>> flask.is_good(\"I love me some Python 3 support.\")\nThanks!\n>>> flask.is_bad(\"lol it duznt werk\")\nNoted.\nDuring an initial discussion in IRC, @rpicard also brought up the idea of exposing this through a CLI tool flask-feedback.\nI already looked into a possible implementation of this, by determining whether this could be cleanly implemented via the API that already exists for the form on the website. The form seems to contain some Javascript-based spam-protection though.\nWhile there are the options of 1.) creating a new API just for the integrated tool 2.) removing the protection, i am hesitant to do any more work, as such a feature built into Flask itself could be easily used to send massive amounts of spam, and there is little protection available against this.\nI'd just hope nobody brings up the dedication to modify the tool. While i didn't check it, i guess the javascript protection could be easily bypassed as well. Probably the goal of it is just to protect against bots that crawl arbitrary websites and send off forms, not the ones that target Flask's feedback website specifically.\nHowever, before any implementation i'd like some feedback on it.", "issue_status": "Closed", "issue_reporting_time": "2013-06-22T19:18:56Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1397": {"issue_url": "https://github.com/pallets/flask/issues/773", "issue_id": "#773", "issue_summary": "url_for + redirect does not respect http vs https", "issue_description": "sebsto commented on 18 Jun 2013\nI am using Flask with SSL.\nTesting in dev environment with stunnel and a self-signed certificate.\nhttp://localhost:5000 is Flask\nhttps://localhost:8000 is SSL Flask through stunnel\nWhen using redirect(url_for(...)) in the program below, the browser is redirected to http://localhost:8000/ssl (HTTP protocol instead of HTTPS)\nCorrect URL should be https://localhost:8000/ssl\nHere is a sample program to demonstrate:\nfrom flask import Flask, request, url_for, redirect\n\n# Flask Initialization\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef index():\n    return \"Hello World\"\n\n@app.route(\"/ssl\")\ndef ssl():\n    return \"Hello SSL World\"\n\n@app.route('/redirect/')\ndef redirectToSSL():\n    return redirect(url_for('ssl'))\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\nMy stunnel config is\npid =\nforeground = yes\n\ncert = ./stunnel.crt\nkey = ./stunnel.pem\n\n[https]\naccept=8000\nconnect=5000\nTo test this,\nstart your stunnel\nstart the application\nconnect to https://localhost:8000 - you should see 'Hello World'\nconnect to https://localhost:8000/redirect - you should receive an error page as the browser is redirected to http://localhost:8000/ssl (instead of https:// ...)", "issue_status": "Closed", "issue_reporting_time": "2013-06-18T06:37:52Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1398": {"issue_url": "https://github.com/pallets/flask/issues/772", "issue_id": "#772", "issue_summary": "Flask 0.10.x and Werkzeug 0.9.x encoding issue", "issue_description": "Contributor\nmaxcountryman commented on 17 Jun 2013\nThis appears to be an issue with how Werkzeug is encoding headers, new to the version series 0.9.x:\n>>> from flask import Flask\n>>> app = Flask(__name__)\n>>> app.test_client().get('/', headers=[('User-Agent', u'\u4e2d\u6587')])\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/Library/Python/2.7/site-packages/werkzeug/test.py\", line 760, in get\n    return self.open(*args, **kw)\n  File \"/Library/Python/2.7/site-packages/flask/testing.py\", line 108, in open\n    follow_redirects=follow_redirects)\n  File \"/Library/Python/2.7/site-packages/werkzeug/test.py\", line 724, in open\n    environ = args[0].get_environ()\n  File \"/Library/Python/2.7/site-packages/werkzeug/test.py\", line 573, in get_environ\n    for key, value in self.headers.to_wsgi_list():\n  File \"/Library/Python/2.7/site-packages/werkzeug/datastructures.py\", line 1185, in to_wsgi_list\n    return [(k, v.encode('latin1')) for k, v in self]\nUnicodeEncodeError: 'latin-1' codec can't encode characters in position 0-1: ordinal not in range(256)\nThis affects maxcountryman/flask-login#78.", "issue_status": "Closed", "issue_reporting_time": "2013-06-17T15:49:01Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1399": {"issue_url": "https://github.com/pallets/flask/issues/771", "issue_id": "#771", "issue_summary": "url_to does not correctly url encode params", "issue_description": "sebsto commented on 16 Jun 2013\nWhen passing params with special characters, url_to does not url encode '+' signs.\nOther special characters are correctly encoded.\nTested against 0.10.1\nTest Case:\nfrom flask import Flask, request, url_for, redirect\n\n# Flask Initialization\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef index():\n    param = {'id' : 'aaa:bbb/ccc+ddd:eee'}\n    return redirect(url_for(\"session\", **param))\n\n@app.route('/session/')\ndef session():\n    return request.args['id']\n\nif __name__ == \"__main__\":\n    app.run(debug=True) \nURL generated is http://127.0.0.1:5000/session/?id=aaa%3Abbb%2Fccc+ddd%3Aeee\nOutput printed is aaa:bbb/ccc ddd:eee\nNotice the '+' not encoded in the URL, resulting is a space in the string output", "issue_status": "Closed", "issue_reporting_time": "2013-06-16T06:02:03Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1400": {"issue_url": "https://github.com/pallets/flask/issues/769", "issue_id": "#769", "issue_summary": "Difference in flask.g behaviour between Python 2.7 and Python 3.3", "issue_description": "aartur commented on 14 Jun 2013\nPython 2.7.3 returns False and Python 3.3.2 throws an exception for the same code:\n$ python2 -c 'import flask; print(flask.__version__); print(hasattr(flask.g, \"xyz\"))'\n0.10.1\nFalse\nand Python 3:\n$ python3 -c 'import flask; print(flask.__version__); print(hasattr(flask.g, \"xyz\"))'\n0.10.1\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\n  File \"/usr/local/lib/python3.3/site-packages/werkzeug/local.py\", line 338, in __getattr__\n    return getattr(self._get_current_object(), name)\n  File \"/usr/local/lib/python3.3/site-packages/werkzeug/local.py\", line 297, in _get_current_object\n    return self.__local()\n  File \"/usr/local/lib/python3.3/site-packages/flask/globals.py\", line 27, in _lookup_app_object\n    raise RuntimeError('working outside of application context')\nRuntimeError: working outside of application context", "issue_status": "Closed", "issue_reporting_time": "2013-06-14T14:44:32Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1401": {"issue_url": "https://github.com/pallets/flask/issues/765", "issue_id": "#765", "issue_summary": "Flask-MakeStatic listing and approval", "issue_description": "Contributor\nDasIch commented on 14 Jun 2013\nI would appreciate listing and review for approval of Flask-MakeStatic, code and documentation are available. The extension supports 2.6, 2.7 and 3.3 and due to the latter requires Flask 0.10. Tests are included and can be run with setup.py test (which installs dependencies) and make test (which does not.)", "issue_status": "Closed", "issue_reporting_time": "2013-06-13T20:09:43Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1402": {"issue_url": "https://github.com/pallets/flask/issues/763", "issue_id": "#763", "issue_summary": "Documentation for Flask.route() incorrect", "issue_description": "Contributor\nrsyring commented on 7 Jun 2013\nhttps://github.com/mitsuhiko/flask/blob/master/flask/app.py#L999\nThe documentation for Flask.route() seems to show options that don't apply to the decorator.", "issue_status": "Closed", "issue_reporting_time": "2013-06-07T12:38:46Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1403": {"issue_url": "https://github.com/pallets/flask/issues/762", "issue_id": "#762", "issue_summary": "Debug mode crashes with python 3.3.1 on Windows 8", "issue_description": "nyctef commented on 6 Jun 2013\nOn a clean virtualenv with python 3.3.1 and latest versions of werkzeug/flask from git, then running this:\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n   return 'Hello World!'\n\nif __name__ == '__main__':\n    app.run(debug=True)\nproduces this:\n(newenv) C:\\Users\\nyctef\\testenv>python test.py\n * Running on http://127.0.0.1:5000/\n * Restarting with reloader\nTraceback (most recent call last):\n  File \"test.py\", line 9, in <module>\n    app.run(debug=True)\n  File \"C:\\Users\\nyctef\\testenv\\newenv\\lib\\site-packages\\flask-0.10_dev_20130605-py3.3.egg\\flask\\app.py\", line 761, in run\n    run_simple(host, port, self, **options)\n  File \"C:\\Users\\nyctef\\testenv\\newenv\\lib\\site-packages\\werkzeug-0.9_devdev_20130605-py3.3.egg\\werkzeug\\serving.py\", line 704, in run_simple\n    run_with_reloader(inner, extra_files, reloader_interval)\n  File \"C:\\Users\\nyctef\\testenv\\newenv\\lib\\site-packages\\werkzeug-0.9_devdev_20130605-py3.3.egg\\werkzeug\\serving.py\", line 613, in run_with_reloader\n    sys.exit(restart_with_reloader())\n  File \"C:\\Users\\nyctef\\testenv\\newenv\\lib\\site-packages\\werkzeug-0.9_devdev_20130605-py3.3.egg\\werkzeug\\serving.py\", line 597, in restart_with_reloader\n    exit_code = subprocess.call(args, env=new_environ)\n  File \"C:\\Python33\\Lib\\subprocess.py\", line 520, in call\n    with Popen(*popenargs, **kwargs) as p:\n  File \"C:\\Python33\\Lib\\subprocess.py\", line 820, in __init__\n    restore_signals, start_new_session)\n  File \"C:\\Python33\\Lib\\subprocess.py\", line 1106, in _execute_child\n    startupinfo)\nTypeError: environment can only contain strings\nRemoving debug=True makes it work, but having debug mode would be nice :)", "issue_status": "Closed", "issue_reporting_time": "2013-06-05T21:00:53Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1404": {"issue_url": "https://github.com/pallets/flask/issues/760", "issue_id": "#760", "issue_summary": "blueprint.route methods argument typo throws unclear exception", "issue_description": "adamkal commented on 4 Jun 2013\nroute method takes *options which catches all keyword arguments and passes it further to *url_rule_class which -- in case of typo like 'method' instead of 'methods' -- leads to misleading exception:\n[..]\nFile \"/[..]/python2.7/site-packages/flask/app.py\", line 943, in add_url_rule\n  rule = self.url_rule_class(rule, methods=methods, **options)\nTypeError: __init__() got an unexpected keyword argument 'method'", "issue_status": "Closed", "issue_reporting_time": "2013-06-04T10:45:24Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1405": {"issue_url": "https://github.com/pallets/flask/issues/759", "issue_id": "#759", "issue_summary": "Broken `g.var is defined` behaviour", "issue_description": "aartur commented on 4 Jun 2013\nJinja template test g.nonexistent_var is defined returns True in Flask latest git version and False in Flask 0.9. I think commit 0973536 broke this (__getitem__ returns None instead of raising AttributeError).", "issue_status": "Closed", "issue_reporting_time": "2013-06-04T07:58:37Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1406": {"issue_url": "https://github.com/pallets/flask/issues/758", "issue_id": "#758", "issue_summary": "Location header key is unicode in case of relative redirects, breaks uwsgi", "issue_description": "Member\nThiefMaster commented on 3 Jun 2013\nfrom flask import Flask, redirect\napp = Flask(__name__)\n\n@app.route('/blah')\ndef blah():\n    return 'blah'\n\napp.add_url_rule('/', view_func=lambda: redirect('/blah'))\nRun it like this:\nuwsgi --plugin python27 --http 0.0.0.0:31337 --module app --callable app --virtualenv .\nThen access it, e.g. using httpie:\nhttp get http://myhost:31337\nuwsgi shows this error:\nTraceback (most recent call last):\n  File \"/tmp/werkzeug-uwsgi-unicode-headers/lib/python2.7/site-packages/flask/app.py\", line 1829, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/tmp/werkzeug-uwsgi-unicode-headers/lib/python2.7/site-packages/flask/app.py\", line 1814, in wsgi_app\n    return response(environ, start_response)\n  File \"/tmp/werkzeug-uwsgi-unicode-headers/lib/python2.7/site-packages/werkzeug/wrappers.py\", line 1103, in __call__\n    start_response(status, headers)\nTypeError: http header key must be a string\na print headers in __call__ shows this:\n[('Content-Type', 'text/html; charset=utf-8'), ('Content-Length', '217'), (u'Location', 'http://myhost:31337/blah')]", "issue_status": "Closed", "issue_reporting_time": "2013-06-03T12:47:06Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1407": {"issue_url": "https://github.com/pallets/flask/issues/757", "issue_id": "#757", "issue_summary": "Is there best solution for http client connection pool?", "issue_description": "OleksandrLoboda commented on 3 Jun 2013\nI need client http connection by incoming http request in Flask and looking for best solution with connection pool.", "issue_status": "Closed", "issue_reporting_time": "2013-06-03T11:09:59Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1408": {"issue_url": "https://github.com/pallets/flask/issues/755", "issue_id": "#755", "issue_summary": "teardown_appcontext missing exception when PRESERVE_CONTEXT_ON_EXCEPTION is set", "issue_description": "Contributor\nTurbo87 commented on 3 Jun 2013\nif the context is preserved for later inspection, it doesn't get popped off the stack immediately, but later, when the next context gets pushed. And when it does eventually get popped, the teardown_appcontext handler is called with no exception, instead of the one that was handled by the debugger. this is causing the Flask-SQLAlchemy extension to commit() the session even though the rollback() method should have been called instead.\n(see pallets/flask-sqlalchemy#131 and pallets/flask-sqlalchemy#115)\nthanks to @mgax for the further investigation of the issue", "issue_status": "Closed", "issue_reporting_time": "2013-06-02T20:15:25Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1409": {"issue_url": "https://github.com/pallets/flask/issues/754", "issue_id": "#754", "issue_summary": "non-latin urls python 3", "issue_description": "notnami commented on 3 Jun 2013\nI believe the issue was fixed on the Werkzeug side, but I think there still may be a bug in Flask.\nWhen I have a url of the form /someurl/, where name is non-ascii (specifically, cyrillic), my app does not fetch the right template/file. It works fine under Python 2.\nIf I have a top-level URL of the form /\u0442\u0435\u0441\u0442, and attempt to access it, I get a 404. I believe Werkzeug handles the request correctly, but I don't know at which point it gets mangled into something which doesn't get me to the endpoint (for example, <Request 'http://localhost:1111/\u00d1\ufffd\u00d0\u00b5\u00d1\ufffd\u00d1\ufffd' [GET]>). That last bit is UTF-8 which is for some reason rendered as ISO-8859-1.\nAny suggestions as to where in the framework (either Flask or Werkzeug) this could be happening?", "issue_status": "Closed", "issue_reporting_time": "2013-06-02T19:56:51Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1410": {"issue_url": "https://github.com/pallets/flask/issues/752", "issue_id": "#752", "issue_summary": "FireLogger / FirePython integration?", "issue_description": "jonathaneunice commented on 31 May 2013\nThe sweet web app console built into Firebug is easily accessible to JavaScript programmers via console.log(). The FireLogger extension lets server-side languages like PHP and Python write directly to the same console. In Python's case, via the FirePython module.\nUnfortunately, Python integration is web-framework specific. Django is directly supported; Flask is not. FirePython already supports WSGI, so using it with Flask / Werkzeug should be straightforward. But it's not--at least not for me. The documentation basically says \"read the source and figure it out.\" Given that I'm a complete novice with Flask's WSGI underpinnings, my efforts have flopped around without success.\nSo this is a request to those in the Flask community who are conversant with WSGI, Werkzeug, and logging to have a look and provide a recipe for how to link these individually great, but as yet not-talking-to-one-another, components. Looking at the code, I'd bet there's a <15 lines of code incantation that would do the trick; I just can't see the right permutation.\nFWIW, this is the opposite of a one-off support request; easy Firebug logging would make an awesome app debugging facility for many Flask / webapp developers.", "issue_status": "Closed", "issue_reporting_time": "2013-05-30T23:55:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1411": {"issue_url": "https://github.com/pallets/flask/issues/749", "issue_id": "#749", "issue_summary": "Flask not working in Virtualenv setup (from S.O.)", "issue_description": "sharmavivek commented on 29 May 2013\nSetUp\nVirtualBox | Ubuntu Server 12.04.2\n(flaskve)vks@UbSrVb:~/flaskve$ python --version\nPython 2.7.3\nifconfig\n192.168.1.100 (the bridge interface on which i interact with VirtualBox)\ncode I am trying to run.\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello World!'\n\nif __name__ == '__main__':\n    app.run(host='192.168.1.100', port=8080, debug=True)\nWhen I do\n(flaskve)vks@UbSrVb:~/flaskve$ python start.py \n(flaskve)vks@UbSrVb:~/flaskve$\nIt does not run or do anything, it just returns back to command prompt. Although I am running in debug=True mode.\nI then made a new VirtualEnv and install bottle in that. When I tried to run helloworld it shows the same behaviour.\nHowever I then started the python shell on the same virtualenv, imported bottle modules and ran\n>>> from bottle import route, run\n>>> run(host='192.168.1.100', port=8081, debug=True)\nBottle v0.11.6 server starting up (using WSGIRefServer())...\nListening on http://192.168.1.100:8081/\nHit Ctrl-C to quit.  \nWhat could be problem here ?\nEven debug does not show anything.\nFollowing link is the output of python -v start.py\nhttp://paste.ubuntu.com/5713138/", "issue_status": "Closed", "issue_reporting_time": "2013-05-29T13:32:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1412": {"issue_url": "https://github.com/pallets/flask/issues/748", "issue_id": "#748", "issue_summary": "update urls on extensions registry page", "issue_description": "zalew commented on 28 May 2013\nhttp://flask.pocoo.org/extensions/\nevery http://packages.python.org url needs to be changed to http://pythonhosted.org, because the former will be shut down eventually (and today it faced dns problems, so I noticed it).", "issue_status": "Closed", "issue_reporting_time": "2013-05-27T20:17:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1413": {"issue_url": "https://github.com/pallets/flask/issues/738", "issue_id": "#738", "issue_summary": "URLConf like Django -> urls.py", "issue_description": "micfan commented on 22 May 2013\nhi, I have thought that if flask use a URLConfig moudule instead of the derecrator of functions as its router, which like Django urls.py, and built-in regular-expression will help it make big projects.\nyes or no?", "issue_status": "Closed", "issue_reporting_time": "2013-05-22T15:33:54Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1414": {"issue_url": "https://github.com/pallets/flask/issues/729", "issue_id": "#729", "issue_summary": "Move core Flask repositories to an organization", "issue_description": "techniq commented on 17 May 2013\nNow that Github supports redirects, maybe it's time to consider moving Flask, and core extensions (Flask-SQLAlchemy, Flask-OAuth, etc) into an organization.\nThoughts from the team?", "issue_status": "Closed", "issue_reporting_time": "2013-05-17T15:00:44Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1415": {"issue_url": "https://github.com/pallets/flask/issues/728", "issue_id": "#728", "issue_summary": "CRUD", "issue_description": "shresthasudil commented on 17 May 2013\nNo description provided.", "issue_status": "Closed", "issue_reporting_time": "2013-05-17T00:44:11Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1416": {"issue_url": "https://github.com/pallets/flask/issues/725", "issue_id": "#725", "issue_summary": "Explicitly state that the jsonify method changes on request", "issue_description": "Eldelshell commented on 6 May 2013\nHi,\nThis drove me crazy, until I took a look at the source code of the jsonify method.\nIn the documentation for jsonify, it should state that it uses the request.is_xhr method to render either compact JSON or pretty print JSON depending on the X-Requested-With header.\nThanks for Flask.", "issue_status": "Closed", "issue_reporting_time": "2013-05-06T13:53:54Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1417": {"issue_url": "https://github.com/pallets/flask/issues/722", "issue_id": "#722", "issue_summary": "Flask on IIS", "issue_description": "akheirabadi commented on 2 May 2013\nHi All,\nI'm just wondering if anyone has deployed flask restful service on IIS? Is there any guide around this area ?\nThanks,\nAhad", "issue_status": "Closed", "issue_reporting_time": "2013-05-01T23:08:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1418": {"issue_url": "https://github.com/pallets/flask/issues/721", "issue_id": "#721", "issue_summary": "Second mini-example on flask.pocoo.org might suggest the dev server is production ready", "issue_description": "Member\nuntitaker commented on 25 Apr 2013 \u2022\nedited\nI just realized that the headline \"And easy to setup\" might trick the user into thinking that's all it takes to setup a Flask app on the production server.\nOf course the exact opposite is stated in the quickstart, but then we never can expect people to actually read documentation.\nIndependent of whether this is really an issue anybody else but me sees, i think a large \"Get Started\" button on the front page might animate people to read the docs from the beginning.", "issue_status": "Closed", "issue_reporting_time": "2013-04-24T20:40:59Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1419": {"issue_url": "https://github.com/pallets/flask/issues/720", "issue_id": "#720", "issue_summary": "Add Sentry to error logging documentation", "issue_description": "dcramer commented on 25 Apr 2013\nThoughts on this?\nDjango includes it. I might be bias, but pretty much everyone needs it :)", "issue_status": "Closed", "issue_reporting_time": "2013-04-24T20:01:30Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1420": {"issue_url": "https://github.com/pallets/flask/issues/718", "issue_id": "#718", "issue_summary": "Update flask online documentation", "issue_description": "jinzhangg commented on 24 Apr 2013\nThe documentation on Celery integration is found in the source code at:\nhttps://github.com/mitsuhiko/flask/blob/master/docs/patterns/celery.rst\nHowever, it does not appear in the online documentation:\nhttp://flask.pocoo.org/docs/", "issue_status": "Closed", "issue_reporting_time": "2013-04-24T06:32:57Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1421": {"issue_url": "https://github.com/pallets/flask/issues/716", "issue_id": "#716", "issue_summary": "Request.data should be unicode", "issue_description": "Contributor\njfinkels commented on 18 Apr 2013\nWhy isn't request.data of type unicode? The following test application reveals that the type is str.\nfrom flask import Flask, request\napp = Flask(__name__)\n\n@app.route('/', methods=['POST'])\ndef index():\n    return str(type(request.data))\n\nif __name__ == '__main__':\n    app.run(debug=True)\nThis is an issue if, for example, I have a Flask application that receives a JSON string as request data, then attempts to insert that data into a database that requires a unicode value.", "issue_status": "Closed", "issue_reporting_time": "2013-04-18T05:37:32Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1422": {"issue_url": "https://github.com/pallets/flask/issues/713", "issue_id": "#713", "issue_summary": "Add ability to app.route pluggable views", "issue_description": "ghost commented on 11 Apr 2013\nRationale\nSome Views could be created and used only once, for example MethodViews instead of \"standard\" functions with if request.method == 'POST'. This kind of use could be made easier.\nProposal\nInstead of writing:\nclass MyFantasticView(View):\n    ...\napp.add_url_rule('/fantastic/', view_func=MyFantasticView.as_view('fantastic'))\nwe could make it easier and consistent with other parts of the API:\n@app.route('/fantastic/', endpoint='fantastic')\nclass MyFantasticView(View):\n    ...", "issue_status": "Closed", "issue_reporting_time": "2013-04-11T16:48:42Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1423": {"issue_url": "https://github.com/pallets/flask/issues/712", "issue_id": "#712", "issue_summary": "HTML5 Video problem on iOS devices when using Flask development server", "issue_description": "spmacdonald commented on 10 Apr 2013\nWhen I render this template and serve it using the development server, it works correctly in Chrome, Safari and IE:\n<video id=\"video\" controls>\n  <source src=\"{{ url_for('static', filename='videos/trailer.mp4') }}\" type=\"video/mp4\">\n  <source src=\"{{ url_for('static', filename='videos/trailer.webm') }}\" type=\"video/webm\">\n</video>\nWhen I try to load the same page with an iOS device I see the following exception:\n192.168.0.116 - - [10/Apr/2013 10:42:57] \"GET /static/videos/trailer.mp4 HTTP/1.1\" 200 -\n----------------------------------------\nException happened during processing of request from ('192.168.0.116', 52979)\nTraceback (most recent call last):\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/SocketServer.py\", line 284, in _handle_request_noblock\n    self.process_request(request, client_address)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/SocketServer.py\", line 310, in process_request\n    self.finish_request(request, client_address)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/SocketServer.py\", line 323, in finish_request\n    self.RequestHandlerClass(request, client_address, self)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/SocketServer.py\", line 641, in __init__\n    self.finish()\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/SocketServer.py\", line 694, in finish\n    self.wfile.flush()\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/socket.py\", line 303, in flush\n    self._sock.sendall(view[write_offset:write_offset+buffer_size])\nerror: [Errno 32] Broken pipe\nIf I replace the template with:\n<video id='video'\n    controls preload='none' \n    poster=\"http://media.w3.org/2010/05/sintel/poster.png\">\n    <source id='mp4'\n    src=\"http://media.w3.org/2010/05/sintel/trailer.mp4\"\n    type='video/mp4'>\n    <source id='webm'\n    src=\"http://media.w3.org/2010/05/sintel/trailer.webm\"\n    type='video/webm'>\n    <source id='ogv'\n    src=\"http://media.w3.org/2010/05/sintel/trailer.ogv\"\n    type='video/ogg'>\n    <p>Your user agent does not support the HTML5 Video element.</p>\n</video>\nTaken from, http://www.w3.org/2010/05/video/mediaevents.html\nThe video plays as expected on all devices I have tried it on (iPad and iPhone)", "issue_status": "Closed", "issue_reporting_time": "2013-04-10T18:03:47Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1424": {"issue_url": "https://github.com/pallets/flask/issues/710", "issue_id": "#710", "issue_summary": "Documentation page missing from Table of Contents", "issue_description": "hugows commented on 8 Apr 2013\nThe page http://flask.pocoo.org/docs/deploying/others/ is missing from the ToC - this can be seen by clicking \"Prev\" and noticing it doesn't appear on the previous page's \"Next\" link.", "issue_status": "Closed", "issue_reporting_time": "2013-04-08T17:24:48Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1425": {"issue_url": "https://github.com/pallets/flask/issues/706", "issue_id": "#706", "issue_summary": "Review flask-mongo-sessions for approval", "issue_description": "ivanyu commented on 1 Apr 2013\nHello.\nI want to propose my small extension flask-mongo-sessions to review for approval.\nThe aim of the extension is to provide your sites with server-side sessions stored in MongoDB.\nThe project lives here. Documentation and PyPI package are available.\nIf something is wrong, I'll be glad to receive a feedback.\nRegards,\nIvan.", "issue_status": "Closed", "issue_reporting_time": "2013-04-01T14:36:29Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1426": {"issue_url": "https://github.com/pallets/flask/issues/704", "issue_id": "#704", "issue_summary": "Memory leakage: leaking threads", "issue_description": "eoranged commented on 29 Mar 2013\nFirst, sorry if not Flask-related, but It's the most magical thing we use in our setup, so most suspicious one.\nOur setup:\nFlask==0.9\nJinja2==2.6\nWerkzeug==0.8.3\ngevent==0.13.8\ngreenlet==0.4.0\ngunicorn==0.17.2\nmsgpack-python==0.3.0\npsycopg2==2.4.6\nredis==2.7.2\nsetproctitle==1.1.7\nwsgiref==0.1.2\nAs I can see in gc info, we are leaking threads and Semaphores in it.\nThe application logic is pretty simple:\nparse data from the user\nstore it in postgres and redis\nsay user that everything is fine (or not)\nAnd we are running it behind gunicorn.\nI have no idea what could cause such leakage and gc information drives me crazy, because It's too much of it (and most of It are pretty useless).\nGuys, if someone faced similar problem or have and idea what's going on, please help or It will drive me crazy.\nThanks in advance,\nVladimir.", "issue_status": "Closed", "issue_reporting_time": "2013-03-29T12:54:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1427": {"issue_url": "https://github.com/pallets/flask/issues/697", "issue_id": "#697", "issue_summary": "JavaScript setRequestHeader of custom X-value not retrievable via Flask request.headers.get()", "issue_description": "lashex commented on 20 Mar 2013\nI add a specific header in JavaScript as follows:\nvar xhr = new XMLHttpRequest();\nif (xhr.upload && file.type == \"image/jpeg\" && file.size <= $id(\"MAX_FILE_SIZE\").value) {\n// start upload\nxhr.open(\"POST\", $id(\"upload\").action, true);\nxhr.setRequestHeader(\"X-FILENAME\", file.name);\nxhr.send(file);\n...and then I get the request as a POST in my Flask application and dump the headers. Therein is the X-Filename header.\nin POST\nHeader:  ('Cookie', 'csrftoken=gWf8wkaqKjq1szyCbxSzaxxxxxxxxxx; splashShown1.6=1')\nHeader:  ('Origin', 'http://localhost:5000')\nHeader:  ('Content-Length', '8355')\nHeader:  ('User-Agent', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_3) AppleWebKit/536.28.10 (KHTML, like Gecko) Version/6.0.3 Safari/536.28.10')\nHeader:  ('Connection', 'keep-alive')\nHeader:  ('Referer', 'http://localhost:5000/')\nHeader:  ('X-Filename', 'hamster_jedi.jpg')\nHeader:  ('Host', 'localhost:5000')\nHeader:  ('Accept', '*/*')\nHeader:  ('Accept-Language', 'en-us')\nHeader:  ('Content-Type', 'application/x-www-form-urlencoded')\nHeader:  ('Accept-Encoding', 'gzip, deflate')\nHeader:  ('Referer', 'http://localhost:5000/')\nHeader:  ('Origin', 'http://localhost:5000')\nHeader:  ('Content-Length', '294')\nHeader:  ('User-Agent', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_3) AppleWebKit/536.28.10 (KHTML, like Gecko) Version/6.0.3 Safari/536.28.10')\nHeader:  ('Connection', 'keep-alive')\nHeader:  ('Cookie', 'csrftoken=gWf8wkaqKjq1szyCbxSzaxxxxxxxxxx; splashShown1.6=1')\nHeader:  ('Host', 'localhost:5000')\nHeader:  ('Accept', 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8')\nHeader:  ('Accept-Language', 'en-us')\nHeader:  ('Content-Type', 'multipart/form-data; boundary=----WebKitFormBoundaryrBnRQT9BcQBT8DPb')\nHeader:  ('Accept-Encoding', 'gzip, deflate')\nThe X-Filename header is not retrievable using the following code in my simple Flask app.\n        if request.method == 'POST':\n        print 'in POST'\n        for h in request.headers:\n            print \"Header: \", h   # dump shown above\n        filename = request.headers.get('X-Filename')\n        print 'X-Filename:', filename, ':'\nThe output I receive is:\nX-Filename: None :\nI don't know if this is a bug, but I've tried sending and retrieving X_Filename, X_FILENAME, X-FILENAME, and X-Filename ... all without luck.", "issue_status": "Closed", "issue_reporting_time": "2013-03-20T07:02:28Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1428": {"issue_url": "https://github.com/pallets/flask/issues/691", "issue_id": "#691", "issue_summary": "Request to add a callback hook while registering blueprint.", "issue_description": "tonyseek commented on 15 Mar 2013\nShould it send a signal while register_blueprint been calling? Sometime we may expect to initialize something while a new blueprint been loading.", "issue_status": "Closed", "issue_reporting_time": "2013-03-15T07:43:31Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1429": {"issue_url": "https://github.com/pallets/flask/issues/690", "issue_id": "#690", "issue_summary": "Semicolon in filename truncates following characters", "issue_description": "imposeren commented on 12 Mar 2013\nfilname:\n\u0440\u0443\u0441\u0441_-{},.ss.\u00bb\u2019\u201d\u203a\u2e03!\"#%&',:;?.jpg\nrequest.files misses everything after \":\":\n  <FileStorage: u'\"\\u0440\\u0443\\u0441\\u0441_-{}[](),.ss.\\xbb\\u2019\\u201d\\u203a\\u2e03!\\\\\"#%&\\',:' ('image/jpeg')>", "issue_status": "Closed", "issue_reporting_time": "2013-03-11T22:41:18Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1430": {"issue_url": "https://github.com/pallets/flask/issues/688", "issue_id": "#688", "issue_summary": "Review Flask-Funnel", "issue_description": "rehandalal commented on 28 Feb 2013\nThis is an extension to help with asset compression/minification.\nGitHub Repo:\nhttps://github.com/rehandalal/flask-funnel", "issue_status": "Closed", "issue_reporting_time": "2013-02-28T06:54:26Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1431": {"issue_url": "https://github.com/pallets/flask/issues/686", "issue_id": "#686", "issue_summary": "Raise 400 JSONBadRequest instead of KeyError when accessing JSON request data", "issue_description": "Contributor\ncharlax commented on 27 Feb 2013\nI might implement it if you find the idea interesting: what do you think of raising JSONBadRequest when trying to access an item that does not exist in the JSON data?\nJust like request.form[\"absent\"] will raise BadRequest, it seems logical that request.json[\"absent\"] raises JSONBadRequest.\nIt is yet unclear to me whether flask or werkzeug is responsible for it. The BadRequest behavior is defined in werkzeug but JSONBadRequest is defined in flask. Also, flask already raise JSONBadRequest when accessing request.json and the JSON parsing failed.\nThanks a lot,\nCharles", "issue_status": "Closed", "issue_reporting_time": "2013-02-27T18:24:18Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1432": {"issue_url": "https://github.com/pallets/flask/issues/685", "issue_id": "#685", "issue_summary": "Review Flask-Mobility", "issue_description": "rehandalal commented on 25 Feb 2013\nThis is an extension to help with the development of mobile-friendly sites.\nGitHub Repo:\nhttps://github.com/rehandalal/flask-mobility", "issue_status": "Closed", "issue_reporting_time": "2013-02-25T08:03:30Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1433": {"issue_url": "https://github.com/pallets/flask/issues/682", "issue_id": "#682", "issue_summary": "Several issues with the mailing list (librelist), time to look for an alternative?", "issue_description": "sfermigier commented on 20 Feb 2013\nThere are several issues currently with the mailing list on librelist:\nThe website (http://librelist.com/) is currently down. This might be transient, or this might be because the service has been slowly decaying over the last months.\nThe synchro to http://flask.pocoo.org/mailinglist/archive/ is broken since 2012/10/29.\nI've been unsubscribed a few months ago due to transient a problem with my DNS. I have since tried many times to subscribe again with the same address, with no success. This may be a very specific problem, or this may be a manifestation of more general issues with the mailing list management system.\nI have also tried registering with gmail adresses created just for the purpose of reading the Flask mailing list. I've had mixed successes, and I've also noticed that some of the emails I could see on the librelist.com archives were not delivered to my account(s).\nAFAICT, traffic to the mailing list has been going down over approximately the last 2-3 months. This might be because interest in Flask is slowly fading away (if true, bad news for us Flask users), or this might be because of some of the technical issues I've mentioned above (or others), in which case proactive actions should be taken to keep users engaged.\nFor these reasons, I'm wondering if moving to another mailing list management platform would not be appropriate.\nS.", "issue_status": "Closed", "issue_reporting_time": "2013-02-20T10:27:59Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1434": {"issue_url": "https://github.com/pallets/flask/issues/680", "issue_id": "#680", "issue_summary": "url_for() problem with CGI and .htaccess", "issue_description": "Delyo commented on 17 Feb 2013\nI've just upgraded to the newest Flask version - 0.9.\nI have to use Flask with CGI and I use .htaccess rule to rewrite the urls:\nRewriteRule ^([a-zA-Z0-9-/?]*)$ main.py/$1 [L]\nIn version 0.8 I didn't have any problems but now url_for() doesn't rewrite the rule and urls come with 'main.py' - http://localhost/zaemide/main.py/funding", "issue_status": "Closed", "issue_reporting_time": "2013-02-17T17:14:18Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1435": {"issue_url": "https://github.com/pallets/flask/issues/679", "issue_id": "#679", "issue_summary": "Problem with sending form with enctype=\"multipart/form-data\".", "issue_description": "Delyo commented on 17 Feb 2013\nI am using Flask 0.8 on developing server WAMP.\nOn production server I have no problem uploading images. But when I send the form to the localhost I get ClientDisconnected: 400: Bad Request.\nIt is enough just to have the enctype=\"multipart/form-data\" atribute to get the error, doesn't matter if there is a file uploaded or not. Wnen I try to get request.form or request.files I get error.\nI tested to upload with PHP on the same server and it works. There must be something between Flask and WAMP.\nThe imports:\nfrom flask import Flask, request, session, g, redirect, url_for, abort, render_template, flash, _request_ctx_stack, current_app, get_flashed_messages\nfrom werkzeug import secure_filename\nThe handler:\n@app.route('/upload', methods=['GET', 'POST'])\n@requires_admin\ndef upload():\nif request.method == 'POST':\nid = request.form['id']\nimg = request.files['img']\n...\nThe traceback:\nTraceback (most recent call last):\nFile \"C:/wamp/www/zaemide/main.py\", line 203, in edit\nform = request.form.copy()\nFile \"C:\\wamp\\www\\vedacon\\werkzeug\\local.py\", line 336, in getattr\nreturn getattr(self._get_current_object(), name)\nFile \"C:\\wamp\\www\\vedacon\\werkzeug\\utils.py\", line 77, in get\nvalue = self.func(obj)\nFile \"C:\\wamp\\www\\vedacon\\werkzeug\\wrappers.py\", line 383, in form\nself._load_form_data()\nFile \"C:\\wamp\\www\\vedacon\\flask\\wrappers.py\", line 119, in _load_form_data\nRequestBase._load_form_data(self)\nFile \"C:\\wamp\\www\\vedacon\\werkzeug\\wrappers.py\", line 318, in _load_form_data\ndata = parser.parse_from_environ(self.environ)\nFile \"C:\\wamp\\www\\vedacon\\werkzeug\\formparser.py\", line 164, in parse_from_environ\nreturn self.parse(stream, mimetype, content_length, options)\nFile \"C:\\wamp\\www\\vedacon\\werkzeug\\formparser.py\", line 188, in parse\ncontent_length, options)\nFile \"C:\\wamp\\www\\vedacon\\werkzeug\\formparser.py\", line 100, in wrapper\nstream.exhaust()\nFile \"C:\\wamp\\www\\vedacon\\werkzeug\\wsgi.py\", line 782, in exhaust\nself.read(chunk)\nFile \"C:\\wamp\\www\\vedacon\\werkzeug\\wsgi.py\", line 800, in read\nreturn self.on_disconnect()\nFile \"C:\\wamp\\www\\vedacon\\werkzeug\\wsgi.py\", line 768, in on_disconnect\nraise ClientDisconnected()\nClientDisconnected: 400: Bad Request\nThanks!", "issue_status": "Closed", "issue_reporting_time": "2013-02-17T14:13:24Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1436": {"issue_url": "https://github.com/pallets/flask/issues/678", "issue_id": "#678", "issue_summary": "Flask exception logging has a catch-22", "issue_description": "sergedomk commented on 16 Feb 2013\nFlask only logs in debug mode.\nhandle_exception raises an exception in debug, else returns an InternalServerError and logs the exception.\nExcept that by default, it can't log the exception because it's in debug.\nThis is mostly just an annoyance as long as you are running with run_simple, as the Werkzueg debugger will log the exception that got re-raised in handle_exception and provide you with a great debugging interface. However, if you switch to a different WSGI engine, you end up with no way to see a traceback.\nIn app.py handle_exception:\n    if self.propagate_exceptions:\n        # if we want to repropagate the exception, we can attempt to\n        # raise it with the whole traceback in case we can do that\n        # (the function was actually called from the except part)\n        # otherwise, we just raise the error again\n        if exc_value is e:\n            raise exc_type, exc_value, tb\n        else:\n            raise e\n\n    self.log_exception((exc_type, exc_value, tb))\n    if handler is None:\n        return InternalServerError()\n    return handler(e)", "issue_status": "Closed", "issue_reporting_time": "2013-02-15T23:10:15Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1437": {"issue_url": "https://github.com/pallets/flask/issues/677", "issue_id": "#677", "issue_summary": "Minor typo in quickstart", "issue_description": "twekberg commented on 14 Feb 2013\nGo to the quickstart guide:\nhttp://flask.pocoo.org/docs/quickstart\nSearch for \"get the result object\". I suspect it should be \"get the response object\" because the subsequent code fragment is dealing with the response object.", "issue_status": "Closed", "issue_reporting_time": "2013-02-14T17:17:26Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1438": {"issue_url": "https://github.com/pallets/flask/issues/674", "issue_id": "#674", "issue_summary": "Need instructions about pylint/pychecker setup", "issue_description": "patrakov commented on 8 Feb 2013\nAny attempt to run pylint or pychecker on anything that uses any Flask extension, e.g.:\nfrom flask.ext.login import user_logged_in, user_logged_out\nproduces errors like the following:\nF:  5,0: Unable to import 'flask.ext.login'\nE:  5,0: No name 'login' in module 'flask.ext'\nSome documentation is needed how to coerce pylint and pychecker into understanding how flask.ext.login is imported.", "issue_status": "Closed", "issue_reporting_time": "2013-02-08T06:46:03Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1439": {"issue_url": "https://github.com/pallets/flask/issues/673", "issue_id": "#673", "issue_summary": "Can't jsonify list object", "issue_description": "skyfox commented on 1 Feb 2013\nJSON standard (http://json.org/) say, that any entity can be object or array.\nWhen I try:\njsonify(['a','b','c', 'd', 'e', 'f'])\nI got an error:\nValueError: dictionary update sequence element #0 has length 8; 2 is required\nI think it is not a correct answer from flask. It should returns a JSON-object with array.", "issue_status": "Closed", "issue_reporting_time": "2013-02-01T13:03:29Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1440": {"issue_url": "https://github.com/pallets/flask/issues/672", "issue_id": "#672", "issue_summary": "Curious about logo images in your web sites", "issue_description": "lifesinger commented on 28 Jan 2013\nI am very curious about logo images in the pages of Flask site, such as:\n\n...\nThis black and white style is very attractive to me, and I wonder how to generate this style image.\nWould you give me some tips? Thanks.", "issue_status": "Closed", "issue_reporting_time": "2013-01-28T09:52:25Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1441": {"issue_url": "https://github.com/pallets/flask/issues/671", "issue_id": "#671", "issue_summary": "`redirect` calls are not caught by `handle_http_exception` while RequestRedirect is.", "issue_description": "sergedomk commented on 26 Jan 2013\nI'm using Flask to implement an app that returns JSON for most requests including error responses for bad requests, page not found, etc.\nTo do this I wrapped the default handle_http_exception method of the app similar to how it was handled in the Flask_exceptional module https://github.com/jzempel/flask-exceptional/blob/master/flask_exceptional.py so that I could return the Response as JSON rather than the default generated HTML.\nWhat I found was that any views that used the Flask redirect function rendered the redirect as HTML. However, if you add a route which ends with a slash, Werkzeug's routing code will automatically fire off a RequestRedirect which would get caught by the handle_http_exception and rendered as JSON.", "issue_status": "Closed", "issue_reporting_time": "2013-01-25T19:33:11Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1442": {"issue_url": "https://github.com/pallets/flask/issues/668", "issue_id": "#668", "issue_summary": "babel can't extract text from template with \"with\" statement", "issue_description": "zfdang commented on 18 Jan 2013\nmy template has the following code:\n{% with messages = get_flashed_messages() %}\n  {% if messages %}\n  <div class=\"alert alert-info\">\n    <a class=\"close\" data-dismiss=\"alert\">&times;</a>\n    <ul>\n    {% for message in messages %}\n      <li>{{ message }}</li>\n    {% endfor %}\n    </ul>\n  </div>\n  {% endif %}\n{% endwith %}\nbut pybabel can't extract text from this file unless I remove the {% with %} statement.\nis there any mistake I made in this case?", "issue_status": "Closed", "issue_reporting_time": "2013-01-18T06:30:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1443": {"issue_url": "https://github.com/pallets/flask/issues/666", "issue_id": "#666", "issue_summary": "The mailing list for Flask hosted on librelist is not accepting any questions.", "issue_description": "mickey06 commented on 17 Jan 2013\nNo description provided.", "issue_status": "Closed", "issue_reporting_time": "2013-01-17T15:49:43Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1444": {"issue_url": "https://github.com/pallets/flask/issues/664", "issue_id": "#664", "issue_summary": "problem with example in deferred callbacks documentation", "issue_description": "Contributor\ntrungly commented on 15 Jan 2013\nI found this issue when trying out the example code the Deferred Callbacks pattern:\nhttp://flask.pocoo.org/docs/patterns/deferredcallbacks/\nIn the for loop of the call_after_request_callbacks() function, it is setting the response to the return value of callback function. Then later, under Practical Example, the remember_language() function implicitly returns None. This will likely cause a problem on the second iteration of the for loop.\nThis can be fixed by either 1) not setting the response to the callback returned value, or by b) returning the response in the remember_language() function.", "issue_status": "Closed", "issue_reporting_time": "2013-01-14T23:02:55Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1445": {"issue_url": "https://github.com/pallets/flask/issues/663", "issue_id": "#663", "issue_summary": "Double '/' in URLs causes static content not to load?", "issue_description": "SamuelMarks commented on 10 Jan 2013\nThis static content includes: JavaScript, CSS &etc.\nE.g.: http://flask.pocoo.org/docs/patterns// vs. http://flask.pocoo.org/docs/patterns/", "issue_status": "Closed", "issue_reporting_time": "2013-01-10T04:25:52Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1446": {"issue_url": "https://github.com/pallets/flask/issues/662", "issue_id": "#662", "issue_summary": "AppEngine environments: Flask ExtensionImporter class (flask.ext) is getting in the way when flask extensions import external modules", "issue_description": "irvingpop commented on 6 Jan 2013\nSeveral people have noted issues when installing/updating Flask extensions that use the new style flask.ext path, specifically in Google AppEngine environments.\nRelevant discussion and troubleshooting here: thadeusb/flask-cache#38\nWhat is happening (my understanding):\nflask extension (ex: Flask-Cache) imports a module (ex: \"from jinja2 import nodes\")\nin the extension's context, ExtensionImporter class has added its own path (flask.ext) to sys.meta_path\nWhen ExtensionImporter load_module() is run, it fails to load the external module (with an ImportError?) and thus bombs\nTroubleshooting notes:\nthis may be caused by AppEngine's dev_appserver_import_hook.py, line 1577, in LoadModuleRestricted\nThe application will run normally if you comment out line 86 in flask/exthook.py \"raise ImportError('No module named %s' % fullname)\" or by reverting to the the old flaskext path\nAny assistance is highly appreciated.", "issue_status": "Closed", "issue_reporting_time": "2013-01-06T00:14:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1447": {"issue_url": "https://github.com/pallets/flask/issues/661", "issue_id": "#661", "issue_summary": "@app.teardown_request function doesn't called in debug mode [NOT-A-BUG]", "issue_description": "seriyps commented on 6 Jan 2013\nUPD: not a bug, see #661 (comment)\nfrom flask import Flask\n\napp = Flask('teardown')\n\n@app.teardown_request\ndef shutdown_session(err):\n    print repr(err)\n\n@app.route('/')\ndef index():\n    raise ValueError('test exc')\n\nif __name__ == '__main__':\n    app.run()\nSo, when I open index page and see 500 error page, console output is ValueError('test exc'). But when I start app in debug mode, eg\nif __name__ == '__main__':\n    app.run(debug=True)\nOutput is None, when expected ValueError('test exc').\nThis is important for me, because I use teardown_request for sqlalchemy transaction management like\n@app.teardown_request\ndef shutdown_session(exception):\n    if exception:\n        db.session.rollback()\n    else:\n        db.session.commit()", "issue_status": "Closed", "issue_reporting_time": "2013-01-05T21:57:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1448": {"issue_url": "https://github.com/pallets/flask/issues/659", "issue_id": "#659", "issue_summary": "\"flaskext.mail\" documentation", "issue_description": "maxcnunes commented on 3 Jan 2013\nI found two pages on the documentation with a problem on a import explanation\nfrom flaskext.mail import Mail\nAnd the correct should be (with a dot between flask and ext):\nfrom flask.ext.mail import Mail\nThe pages with this wrong import are: http://packages.python.org/flask-mail/ and http://flask.pocoo.org/snippets/85/", "issue_status": "Closed", "issue_reporting_time": "2013-01-03T17:08:23Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1449": {"issue_url": "https://github.com/pallets/flask/issues/658", "issue_id": "#658", "issue_summary": "The problem with _micro_ frameworks is a lack of structure", "issue_description": "daGrevis commented on 3 Jan 2013\nSo here is my pain \u2014 there are no structure restrictions. Single file is fine until there are more than X lines. And apps do grow. Very fast. No restrictions are good, but structure skeletons are awesome. Let me explain it...\nI had big problems w/ re-structuring my app so that everything is not in a single file. I'm just a newbie programmer, not an architect. At least for now. Micro frameworks should improve my productivity, not forcing me to structure things.\nI suggest to create skeletons / boilerplate for possible ways to structure app. They could be sorted for estimated size of the product (tiny, small, medium, big & huge) plus used components (ORM, template engine, test framework, form abstraction etc.). What do you think?", "issue_status": "Closed", "issue_reporting_time": "2013-01-03T07:54:41Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1450": {"issue_url": "https://github.com/pallets/flask/issues/651", "issue_id": "#651", "issue_summary": "Cannot start Flask application in a thread other than main", "issue_description": "ianj-als commented on 12 Dec 2012\nStarting a Flask application in a thread other than the main thread does not work and produces the following:\nRunning on http://0.0.0.0:5000/\nException in thread flask_application_thread:\nTraceback (most recent call last):\nFile \"/opt/python2.7/lib/python2.7/threading.py\", line 551, in __bootstrap_inner\nself.run()\nFile \"harness.py\", line 23, in run\nself.__application.run(host = '0.0.0.0', debug = True)\nFile \"/opt/python2.7/lib/python2.7/site-packages/Flask-0.9-py2.7.egg/flask/app.py\", line 739, in run\nrun_simple(host, port, self, **options)\nFile \"/opt/python2.7/lib/python2.7/site-packages/Werkzeug-0.8.3-py2.7.egg/werkzeug/serving.py\", line 615, in run_simple\nrun_with_reloader(inner, extra_files, reloader_interval)\nFile \"/opt/python2.7/lib/python2.7/site-packages/Werkzeug-0.8.3-py2.7.egg/werkzeug/serving.py\", line 529, in run_with_reloader\nsignal.signal(signal.SIGTERM, lambda *args: sys.exit(0))\nValueError: signal only works in main thread\nIs there a workaround. I've tried using multiprocessing.Process which is no an option in my application.\nThanks.", "issue_status": "Closed", "issue_reporting_time": "2012-12-12T17:30:57Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1451": {"issue_url": "https://github.com/pallets/flask/issues/650", "issue_id": "#650", "issue_summary": "wiki: Large app how to, incompete and not runnable", "issue_description": "quite commented on 12 Dec 2012\nI thought this would be a nice skeleton for a beginner, but it's incomplete.\nWhat should go the following?\n/app/users/init.py\nPerhaps I'm just ignorant about python module system...", "issue_status": "Closed", "issue_reporting_time": "2012-12-12T12:34:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1452": {"issue_url": "https://github.com/pallets/flask/issues/648", "issue_id": "#648", "issue_summary": "Problem with non-escaped chars in URL.", "issue_description": "gabrielpjordao commented on 11 Dec 2012\nIs it a project's decision or a bug? Please, check it out:\nGist:\nhttps://gist.github.com/4259170", "issue_status": "Closed", "issue_reporting_time": "2012-12-11T15:46:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1453": {"issue_url": "https://github.com/pallets/flask/issues/646", "issue_id": "#646", "issue_summary": "Please improve CGI documentation slightly.", "issue_description": "vonj commented on 10 Dec 2012\nPlease mention on web page that when deploying Flask on CGI, you can not have any random \"print\" in the source code, it will mess up the output.\nhttp://stackoverflow.com/a/13799083/193892", "issue_status": "Closed", "issue_reporting_time": "2012-12-10T10:47:46Z", "fixed_by": "#647", "pull_request_summary": "Added hint about print statements in CGI.", "pull_request_description": "Member\nuntitaker commented on 10 Dec 2012\nFix #646", "pull_request_status": "Merged", "issue_fixed_time": "2012-12-13T00:06:18Z", "files_changed": [["4", "docs/deploying/cgi.rst"]]}, "1454": {"issue_url": "https://github.com/pallets/flask/issues/645", "issue_id": "#645", "issue_summary": "Missing linebreaks on homepage", "issue_description": "cconrad commented on 3 Dec 2012\nThe frontpage example on flask.pocoo.org seems to miss linebreaks?\nhttp://screencast.com/t/akBXxkqJ", "issue_status": "Closed", "issue_reporting_time": "2012-12-02T19:48:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1455": {"issue_url": "https://github.com/pallets/flask/issues/644", "issue_id": "#644", "issue_summary": "user could customs non-OK entry body", "issue_description": "shuge commented on 2 Dec 2012\nfor example,\nflask.abort(400, 'missing parameter username')", "issue_status": "Closed", "issue_reporting_time": "2012-12-02T10:11:17Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1456": {"issue_url": "https://github.com/pallets/flask/issues/642", "issue_id": "#642", "issue_summary": "Flaskr tests - 3 errors", "issue_description": "DarkRedman commented on 29 Nov 2012\nHello,\nI'm using python (default version 2.7.3) on Ubuntu, I installed flask\nand then I'm running the tests of Flaskr and I got 3 errors.\nTraceback (most recent call last):\n  File \"flaskr_tests.py\", line 12, in <module>\n    import flaskr\n  File \"/home/user/flaskr/flaskr.py\", line 14, in <module>\n    from flask import Flask, request, session, g, redirect, url_for, abort, \\\nImportError: cannot import name _app_ctx_stack\nI don't really understand how Flask doesn't have an object that Flaskr request, how could I fix it ?\nThanks in advance.", "issue_status": "Closed", "issue_reporting_time": "2012-11-29T06:09:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1457": {"issue_url": "https://github.com/pallets/flask/issues/641", "issue_id": "#641", "issue_summary": "Design issue with flask.logger.create_logger().", "issue_description": "itsjohncs commented on 29 Nov 2012\nflask.logger.create_logger() destroys any log handlers that have been added previously. Because the creation of the logger (and the calling of create_logger() that this entails) is deferred until the first time flask.app.logger is accessed, this can lead to the destruction of log handlers that were purposefully added by the application.\nI just tracked down a bug due to this that took me a very long time to debug because I had no idea this went on. To my eyes, it looked like the standard logging module was breaking at a seemingly random moment (it wasn't even my code that was accessing app.logger, it was Flask's internal error handling code). Therefore, I think one of two courses of action should be taken:\nBecause this behavior of create_logger() seems very strange, perhaps it should be removed. As in don't delete log handlers that are already in place when create_logger() gets called.\nIf there is a good reason for this behavior to remain, it should be documented clearly in app.logger's docstring.\nI am happy to carry out either (or some other) change and send a pull request.\n9", "issue_status": "Closed", "issue_reporting_time": "2012-11-29T03:10:40Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1458": {"issue_url": "https://github.com/pallets/flask/issues/639", "issue_id": "#639", "issue_summary": "Get HTTP_REFERER in flask", "issue_description": "Zdunek commented on 25 Nov 2012\nHello\nFirst, sorry for my english.\nI have problem. I need HTTP_REFERER, like php to hotlinks protection.\nin request.headers i have\nContent-Length:\nUser-Agent: Mozilla/5.0 (Windows NT 5.1; rv:16.0) Gecko/20100101 Firefox/16.0\nConnection: keep-alive\nHost: dbooks.local:8080\nCache-Control: max-age=0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8\nAccept-Language: pl,en-us;q=0.7,en;q=0.3\nContent-Type:\nAccept-Encoding: gzip, deflate\nBut i don't have HTTP_REFERER.\nWhat i can do with this?", "issue_status": "Closed", "issue_reporting_time": "2012-11-25T16:12:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1459": {"issue_url": "https://github.com/pallets/flask/issues/637", "issue_id": "#637", "issue_summary": "Flask not sending 304 Not Modified even if last_modified<=if_modified_since.", "issue_description": "a9entropy commented on 25 Nov 2012\nHere's my view.\n@app.route('/image/<file_id>')\n@login_required\ndef images(file_id):\n    file = file_like_object_here\n    rv = send_file(file,\n            mimetype=file.content_type,\n            # as_attachment=True,\n            attachment_filename=file.filename,\n            add_etags=False,\n            conditional=True\n        )\n    rv.last_modified = file.upload_date\n    app.logger.debug(rv.last_modified)    # 2012-11-24 08:51:27\n    app.logger.debug(request.if_modified_since)    # 2012-11-24 08:51:27\n    app.logger.debug(rv.last_modified<=request.if_modified_since)    # True\n    return rv\nHere is the HTTP:\nRequest\nRequest URL:http://127.0.0.1:5000/image/50b0855f2c2d291cbe896e56\nRequest Method:GET\nStatus Code:200 OK\n\nGET /image/50b0855f2c2d291cbe896e56 HTTP/1.1\nHost: 127.0.0.1:5000\nConnection: keep-alive\nCache-Control: max-age=0\nUser-Agent: Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Encoding: gzip,deflate,sdch\nAccept-Language: en-US,en;q=0.8\nAccept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3\nCookie: session=\"lde2mnK7NSOGS8DqcU5YVgTkVEc=?_expires=STEzNTY1MDE0OTgKLg==&_permanent=STAxCi4=&username=VmFhYWFhCnAxCi4=\"\nIf-Modified-Since: Sat, 24 Nov 2012 08:51:27 GMT\nResponse:\nHTTP/1.0 200 OK\nContent-Type: image/png\nCache-Control: public, max-age=43200\nExpires: Sun, 25 Nov 2012 18:43:12 GMT\nLast-Modified: Sat, 24 Nov 2012 08:51:27 GMT\nConnection: close\nServer: Werkzeug/0.8.3 Python/2.7.3\nDate: Sun, 25 Nov 2012 06:43:12 GMT\nIdeally it should return 304 Not Modified but you can see that's not happening.", "issue_status": "Closed", "issue_reporting_time": "2012-11-25T06:48:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1460": {"issue_url": "https://github.com/pallets/flask/issues/633", "issue_id": "#633", "issue_summary": "send_file breaks when flask app run as nobody", "issue_description": "ernwa commented on 13 Nov 2012\non my system I am trying to run a flask app with minimum permissions. In this case, it is run as:\nsudo -u nobody python flask_webapp.py\nall the files in its directory are readable by everyone, but some parent directories are not. The app fails whenever I try to serve up a file, either indirectly by trying to access http://myapp.com/static/test.html, or directly by the following code:\n@app.route('/test')\ndef web_app():\n    return send_file(\"./static/test.html\")\nThe problem is, flask converts all relative paths to absolute paths in the send_file function. This breaks if it doesn't have directory read access all the way to the system root.\nThe problem seems to arise from the following lines, 543 to 545 of helpers.py\nif filename is not None:\n    if not os.path.isabs(filename):\n        filename = os.path.join(current_app.root_path, filename)", "issue_status": "Closed", "issue_reporting_time": "2012-11-12T20:04:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1461": {"issue_url": "https://github.com/pallets/flask/issues/631", "issue_id": "#631", "issue_summary": "Add config parser to blueprints", "issue_description": "jhutchins commented on 9 Nov 2012\nI think that it would be useful to be able to add configuration items to a blueprint and then have those merged into the app configuration on load. My thinking is simply that there might be configurations specific to your blueprint that should have default values stored as part of the blueprint. I suppose this feature could also lead to use cases where people make blueprint simply to hold different configuration for the application.", "issue_status": "Closed", "issue_reporting_time": "2012-11-08T23:11:08Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1462": {"issue_url": "https://github.com/pallets/flask/issues/628", "issue_id": "#628", "issue_summary": "Benchmarking fails with 3 requests", "issue_description": "ghost commented on 7 Nov 2012\nHi,\nI am running a local flask instance on my mac. I thought I would see how flask stood up to apache benchmark (ab). I threw 10 requests with one concurrent user and it fails!\nIs this something thats expected?\nab -n10 -c1 -q http://127.0.0.1:5000/\nThis is ApacheBench, Version 2.3 <$Revision: 655654 $>\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\nLicensed to The Apache Software Foundation, http://www.apache.org/\nBenchmarking 127.0.0.1 (be patient)...apr_socket_recv: Connection reset by peer (54)\nTotal of 2 requests completed\nIn my debug console I see three requests:\n127.0.0.1 - - [06/Nov/2012 21:41:20] \"GET / HTTP/1.0\" 200 -\n127.0.0.1 - - [06/Nov/2012 21:41:20] \"GET / HTTP/1.0\" 200 -\n127.0.0.1 - - [06/Nov/2012 21:41:20] \"GET / HTTP/1.0\" 200 -\nand my code:\nfrom flask import Flask\nfrom flask import render_template, send_from_directory\nimport os\n\napp = Flask(__name__)\napp.debug = True\n\n@app.route('/favicon.ico')\ndef favicon():\n    return send_from_directory('.', 'favicon.ico')\n\n@app.route(\"/\")\ndef index():\n  return render_template(\"index\")\n\nif __name__ == \"__main__\":\n  app.run()\nindex:\n<!DOCTYPE HTML>\n<html>\n  <head>\n    <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n    <title></title>\n\n  </head>\n  <body>\n\n  </body>\n</html>", "issue_status": "Closed", "issue_reporting_time": "2012-11-07T05:47:29Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1463": {"issue_url": "https://github.com/pallets/flask/issues/623", "issue_id": "#623", "issue_summary": "missing text in url_for() app context RuntimeError message", "issue_description": "joeshaw commented on 3 Nov 2012\nIn flask/helpers.py, near the top of url_for() there is this code:\n    appctx = _app_ctx_stack.top\n    reqctx = _request_ctx_stack.top\n    if appctx is None:\n        raise RuntimeError('Attempted to generate a URL with the application '\n                           'context being pushed.  This has to be executed ')\nIt looks like that RuntimeError message is cut off. This has to be executed when? :)", "issue_status": "Closed", "issue_reporting_time": "2012-11-02T18:56:35Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1464": {"issue_url": "https://github.com/pallets/flask/issues/622", "issue_id": "#622", "issue_summary": "Review Flask-S3", "issue_description": "e-dard commented on 1 Nov 2012\nHi, I recently wrote an extension for making it easy to serve all your app's static assets from Amazon S3. It's called flask-s3; the docs are located here\nWould be great to have this extension included in the extension registry. I think that it meets all the requirements, but let me know if it's missing anything.", "issue_status": "Closed", "issue_reporting_time": "2012-10-31T23:23:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1465": {"issue_url": "https://github.com/pallets/flask/issues/621", "issue_id": "#621", "issue_summary": "Local extensions fail to import", "issue_description": "Soviut commented on 25 Oct 2012\nI have a Flask 0.9 project that has all dependencies stored locally beside my app.py file. The intention is to keep everything self-contained within a version control repository so anyone using or contributing to it won't need to make any additional installations.\nThis being the case, I want to use some Flask extensions and decided try manually installing the Flask-Login extension. I copied the flask_login.py file to the flask/ext directory and tried to import flask.ext.login from my app.py file the same way the example does. I got an ImportError: No module named login. I then tried import flask.ext.flask_login and that too failed.\nThe solution I wound up with from Stack Overflow was to comment out the setup() function in the flask/ext/__init__.py file and import flask.ext.flask_login directly in my app.py file.\nhttp://stackoverflow.com/questions/13065682/how-to-manually-install-flask-extensions\nI would really like to be able to use an unmodified version of Flask locally and without a virtual environment that can still import extensions the expected way.", "issue_status": "Closed", "issue_reporting_time": "2012-10-25T10:54:57Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1466": {"issue_url": "https://github.com/pallets/flask/issues/620", "issue_id": "#620", "issue_summary": "Documentation on IIS deployment.", "issue_description": "Member\nuntitaker commented on 21 Oct 2012\nJust for the record.\nhttp://feedback.flask.pocoo.org/message/305\nhttp://feedback.flask.pocoo.org/message/289", "issue_status": "Closed", "issue_reporting_time": "2012-10-20T18:30:33Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1467": {"issue_url": "https://github.com/pallets/flask/issues/618", "issue_id": "#618", "issue_summary": "Issue #524 was not one and flaskext_compat does not work anymore", "issue_description": "Contributor\nQuentinRoy commented on 20 Oct 2012\nfind_module is a method automatically called. Removing the path argument, even if not used, may cause (and causes) error such as:\nfrom flask.ext.babel import Babel\nTypeError: find_module() takes exactly 2 arguments (3 given)", "issue_status": "Closed", "issue_reporting_time": "2012-10-20T16:03:16Z", "fixed_by": "#619", "pull_request_summary": "Fix missing argument in find_module of flaskext_compat.py", "pull_request_description": "Contributor\nQuentinRoy commented on 20 Oct 2012\nAdd back path=None argument into find_module. This fixes #618 and revert #524.", "pull_request_status": "Merged", "issue_fixed_time": "2014-10-07T17:01:17Z", "files_changed": [["2", "scripts/flaskext_compat.py"]]}, "1468": {"issue_url": "https://github.com/pallets/flask/issues/616", "issue_id": "#616", "issue_summary": "FR: Make stream_template from the docs available in Flask", "issue_description": "Member\nuntitaker commented on 19 Oct 2012\nhttp://flask.pocoo.org/docs/patterns/streaming/#streaming-from-templates\nIt would be nice to have the stream_template method included in Flask, maybe unified with render_template", "issue_status": "Closed", "issue_reporting_time": "2012-10-19T15:05:18Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1469": {"issue_url": "https://github.com/pallets/flask/issues/615", "issue_id": "#615", "issue_summary": "UnicodeDecodeError when passing session to simplejson dumps", "issue_description": "Contributor\nalanhamlett commented on 19 Oct 2012\nLooks like Flask is sending simplejson bad arguments? Added a debug statement right before the call to dumps crashes:\nDEBUG in json [/usr/local/lib/python2.7/dist-packages/flask/json.py:96]:\n{'csrftoken': 'd3e5fb185f52567dce2c41ef4ca59959cd2a6a12', '_id': '\\x12A\\x07^D2>\\xa0ct\\xaa\\r\\xf6\\xf7\\xa5\"'}\n--------------------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1758, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1746, in wsgi_app\n    response = self.make_response(self.handle_exception(e))\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1744, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1419, in full_dispatch_request\n    response = self.process_response(response)\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1623, in process_response\n    self.save_session(ctx.session, response)\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 818, in save_session\n    return self.session_interface.save_session(self, session, response)\n  File \"/usr/local/lib/python2.7/dist-packages/flask/sessions.py\", line 291, in save_session\n    val = self.get_signing_serializer(app).dumps(dict(session))\n  File \"/usr/local/lib/python2.7/dist-packages/itsdangerous.py\", line 424, in dumps\n    return self.make_signer(salt).sign(self.dump_payload(obj))\n  File \"/usr/local/lib/python2.7/dist-packages/itsdangerous.py\", line 519, in dump_payload\n    json = super(URLSafeSerializerMixin, self).dump_payload(obj)\n  File \"/usr/local/lib/python2.7/dist-packages/itsdangerous.py\", line 407, in dump_payload\n    return self.serializer.dumps(obj)\n  File \"/usr/local/lib/python2.7/dist-packages/flask/sessions.py\", line 70, in dumps\n    return json.dumps(_tag(value), separators=(',', ':'))\n  File \"/usr/local/lib/python2.7/dist-packages/flask/json.py\", line 97, in dumps\n    return _json.dumps(obj, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/simplejson/__init__.py\", line 334, in dumps\n    **kw).encode(obj)\n  File \"/usr/local/lib/python2.7/dist-packages/simplejson/encoder.py\", line 237, in encode\n    chunks = self.iterencode(o, _one_shot=True)\n  File \"/usr/local/lib/python2.7/dist-packages/simplejson/encoder.py\", line 311, in iterencode\n    return _iterencode(o, 0)\nUnicodeDecodeError: 'utf8' codec can't decode byte 0xa0 in position 7: invalid start byte", "issue_status": "Closed", "issue_reporting_time": "2012-10-19T11:09:26Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1470": {"issue_url": "https://github.com/pallets/flask/issues/612", "issue_id": "#612", "issue_summary": "blueprint options from register_blueprint", "issue_description": "mizhi commented on 17 Oct 2012\nI've written a flask app that uses a blueprint to implement an API. When I create the server, I use register_blueprint to make the api available. I added a url_prefix parameter as a parameter to the call to register_blueprint. Thus, in theory, I could add multiple versions of this api for different instances.\nAs part of the blueprint, there is a particular method that needs to send a redirect to the requesting browser. This redirect is to another part of the blueprint. The problem is that url_prefix does not seem to be available within the request or current_app objects. At least, not in anyway that I've been able to see.\nHere's some code that illustrates the problem:\n# server.py\nblueprint = flask.Blueprint(\"mybp\", __name__)\n\n@blueprint.before_request\ndef before_request():\n    if not flask.request.url.endswith(\"/auth/login/\"):\n        return flask.redirect( \"/auth/login/\")\nAnd here's the part where the app server is created:\napp = flask.Flask(\"myapp\")\napp.register_blueprint(server.blueprint, url_prefix=\"/instance1\")\napp.register_blueprint(server.blueprint, url_prefix=\"/instance2\")\nThe correct behaviors would be to go to \"/instance1/auth/login\" or \"/instance2/auth/login.\" The problem is that the redirect code doesn't have a way (that I can see) of getting the url_prefix that was used to register the blueprint.\nMy initial thought was to see if I could get a hold of the Blueprint object that was registered on the app and maybe it would have the url_prefix that I could prepend on the redirect line. This would look something like:\n@blueprint.before_request\ndef before_request():\n    if not flask.request.url.endswith(\"/auth/login/\"):\n        url_prefix = flask.current_app.blueprints[flask.request.blueprint].url_prefix\n        return flask.redirect(url_prefix + \"/auth/login/\")\nThe problem is that the way blueprint is stored in Flask.register_blueprint (https://github.com/mitsuhiko/flask/blob/master/flask/app.py#L867):\nself.blueprints[blueprint.name] = blueprint\nmeans that each separate registration of blueprint shares the same blueprint object and url_prefix may not be valid between registrations. E.g. it's not enough to simply set url_prefix on the blueprint.\nMy solution to this was to create a factory method:\ndef make_blueprint(name, url_prefix):\n    blueprint = flask.Blueprint(name, __name__, url_prefix=url_prefix)\n\n    #\n    # Blueprint @route definitions follow\n    #\n\n    return blueprint\nand in the server creation code:\napp = flask.Flask(\"myapp\")\napp.register_blueprint(server.make_blueprint(\"instance1\", \"/instance1\"))\napp.register_blueprint(server.make_blueprint(\"instance2\", \"/instance2\"))\nThis works, and I have access to url_prefix in the instances. It wasn't critical for my project, but it was a surprising property of Flask.\nIt seems awkward, and a violation of the principle-of-least surprise. Why wouldn't the blueprint methods have access to the url_prefix (or any other options passed in during blueprint registration)? Are there any more elegant solutions than the one above?", "issue_status": "Closed", "issue_reporting_time": "2012-10-16T18:40:46Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1471": {"issue_url": "https://github.com/pallets/flask/issues/611", "issue_id": "#611", "issue_summary": "Minor typo in Tutorial, but possibly confusing", "issue_description": "riturajD commented on 16 Oct 2012\nThere is a minor typo in the Tutorial at this page: dbinit.\nThe line in question:\nJust add that function below the connect_db function in flask.py:\nOf course the filename should be flaskr.py and not flask.py.", "issue_status": "Closed", "issue_reporting_time": "2012-10-16T16:46:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1472": {"issue_url": "https://github.com/pallets/flask/issues/610", "issue_id": "#610", "issue_summary": "[BUG]TypeError: 'JsonObject' object is not callable", "issue_description": "xiocode commented on 16 Oct 2012\napp.py\nline num:1447\nif isinstance(rv, basestring):\nrv = self.response_class(rv, headers=headers, status=status)\nheaders = status = None\nelse:\nrv = self.response_class.force_type(rv, request.environ)\nif rv was JsonObject,application rise a exception\n'JsonObject' object is not callable\nflask version:0.9", "issue_status": "Closed", "issue_reporting_time": "2012-10-16T05:32:21Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1473": {"issue_url": "https://github.com/pallets/flask/issues/608", "issue_id": "#608", "issue_summary": "Putting extension in flask.ext: the import loader in ext/__init__.py raises unnecessary error", "issue_description": "chilons commented on 9 Oct 2012\nI'm running my app on Google App Engine.\nI put an extension (flask-lazyviews) in flask.ext and then import it, then an import error appears \"No module named flask.ext.lazy.werkzeug\".\nOf course it's not the extension's fault, because it just \"from werkzeug.xx import xx\", nothing's wrong with it.\nAnd if I disable the import hook in flask.ext.init.py, everything works, the import works, no problem whatsoever.\nI read the code of the import hook (in exthook.py), apparently it's raising an exception because it cannot import the module from some paths.\nI think it's not a valid behavior, how could it account for every possible path that the environment provides? It CANNOT! On Google App Engine there's a mysterious import path automatically added by some way (the application folder).\nIt should not raise an error.\nnote: the example in PEP 302 doesn't raise an error.", "issue_status": "Closed", "issue_reporting_time": "2012-10-09T12:00:22Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1474": {"issue_url": "https://github.com/pallets/flask/issues/606", "issue_id": "#606", "issue_summary": "LazyView, why not include it in Flask?", "issue_description": "chilons commented on 4 Oct 2012\nI'm just curious why the LazyView class - as described in the Lazily loading views article on Flask docs - isn't get included in the Flask source code for convenience?\nI see no application-specific thing in it.", "issue_status": "Closed", "issue_reporting_time": "2012-10-04T10:58:47Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1475": {"issue_url": "https://github.com/pallets/flask/issues/605", "issue_id": "#605", "issue_summary": "Regarding JSON inside <script> tag and HTML5 parser", "issue_description": "wh0 commented on 4 Oct 2012\nA JSON string in an HTML <script> tag may cause the parser to enter the script data double escaped state, in which </script> would not return the parser to the data state as expected.\nsample.html:\n<!doctype html>\n<script>alert({{ v|tojson|safe }});</script>\nsample.py:\nreturn render_template('sample.html', v='<!--<script>')", "issue_status": "Closed", "issue_reporting_time": "2012-10-03T22:01:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1476": {"issue_url": "https://github.com/pallets/flask/issues/602", "issue_id": "#602", "issue_summary": "Misspelling in docs @ flask.Flask.handle_exception", "issue_description": "Contributor\nrmacy commented on 1 Oct 2012\nDefault exception handling that kicks in when an exception occours that is not caught. In debug mode the exception will be re-raised immediately, otherwise it is logged and the handler for a 500 internal server error is used. If no such handler exists, a default 500 internal server error message is displayed.\nOccours should be occurs.\nI looked around in the project code to see if i could update this, but it looks like the docs subdir is no longer used? I could be wrong, if you let me know where this is at I'll update it and send a PR :)", "issue_status": "Closed", "issue_reporting_time": "2012-10-01T18:22:32Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1477": {"issue_url": "https://github.com/pallets/flask/issues/601", "issue_id": "#601", "issue_summary": "Getting raw POST data for whatever mimetype", "issue_description": "tito commented on 28 Sep 2012\nOk, this issue have been raised twice, but i got an use-case that i don't know how to handle without the raw POST data.\nIf you use PubSubHubbub api, you can can give a secret, and any data that you will receive will be signed:\nWhen you subscribe to a new hub, you can give a \"secret\"\nWhen you get a POST request, you get a X-Hub-Signature in the format \"sha1:xxxx\"\nThe signature is based on the secret you give at the subscription + the raw request data\nThe request data are POSTed, and accessible with request.form\nTo verify the signature, i think it should be something like:\nfrom hashlib import sha1\nimport hmac\nsignature = 'sha1:' + hmac.new(my_secret, request.data, sha1).hex_digest()\nI've tried to use json.dumps(request.form) to get the initial raw data, but it doesn't work, maybe cause of a space or a line break.\n(The real use case here is using the PubSubHubbub hook from Github, to get a CIA.vc like service)", "issue_status": "Closed", "issue_reporting_time": "2012-09-28T11:12:01Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1478": {"issue_url": "https://github.com/pallets/flask/issues/600", "issue_id": "#600", "issue_summary": "cannot run testsuite on Windows", "issue_description": "petef4 commented on 26 Sep 2012\nAttempting to run tests of Flask itself fails immediately.\n(python2.7) C:\\Users\\peter\\repos\\mitsuhiko\\flask.git>python run-tests.py\nError: 'module' object has no attribute 'samefile'\nThis is due to a call to os.path.samefile (in flask/testsuite/init.py) which is only available on Unix.", "issue_status": "Closed", "issue_reporting_time": "2012-09-26T15:16:16Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1479": {"issue_url": "https://github.com/pallets/flask/issues/596", "issue_id": "#596", "issue_summary": "sdist from master creates \"devdev\" version.", "issue_description": "Member\nuntitaker commented on 18 Sep 2012\n$ ls ./dist\nFlask-0.10-devdev-20120918.tar.gz\nExpected:\n$ ls ./dist\nFlask-0.10-dev-20120918.tar.gz", "issue_status": "Closed", "issue_reporting_time": "2012-09-18T12:17:22Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1480": {"issue_url": "https://github.com/pallets/flask/issues/595", "issue_id": "#595", "issue_summary": "sdist from master creates \"devdev\" version.", "issue_description": "Member\nuntitaker commented on 18 Sep 2012\nNo description provided.", "issue_status": "Closed", "issue_reporting_time": "2012-09-18T12:17:21Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1481": {"issue_url": "https://github.com/pallets/flask/issues/592", "issue_id": "#592", "issue_summary": "Incorrect Pluggable Views documentation?", "issue_description": "Chris2048 commented on 9 Sep 2012\nThe 'Pluggable Views' documentation includes the line\napp.add_url_rule('/users/', ShowUsers.as_view('show_users'))\nbut isn't the second parameter to add_url_rule the 'name', and the third parameter the view_func?", "issue_status": "Closed", "issue_reporting_time": "2012-09-08T19:47:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1482": {"issue_url": "https://github.com/pallets/flask/issues/589", "issue_id": "#589", "issue_summary": "pyinstaller + flask", "issue_description": "pythonmobile commented on 4 Sep 2012\nSeems like this issue:\nhttp://flask.pocoo.org/mailinglist/archive/2011/8/14/pyinstaller/#429b2ac09950c2717cf7506487166a3a\nwas never fixed. I still get : Unhandled ImportError: No module named werkzeug.exceptions when I use pyinstaller. Any ideas on how to fix this, or perhaps actually fix this in 0.91 :-)", "issue_status": "Closed", "issue_reporting_time": "2012-09-04T01:59:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1483": {"issue_url": "https://github.com/pallets/flask/issues/588", "issue_id": "#588", "issue_summary": "sqlite dict cursors", "issue_description": "ivan-kleshnin commented on 4 Sep 2012\nThere are whole sections based on assumption that sqlite has no built-in DictCursor behavior\nhttp://flask.pocoo.org/docs/tutorial/views/#tutorial-views\nhttp://flask.pocoo.org/docs/patterns/sqlite3/#easy-querying\nBesides verbosity, by wrapping result in dict() we block transparent data passing to INSERT which waits for \"tupled\" format\nHere is solution:\ndb = sqlite3.connect(app.config['DATABASE_NAME'])\ndb.row_factory = sqlite3.Row # trick!\nWhile \"print cur.fetchall()\" still looks like tuples are here... don't worry, it supports key access:\nfor item in cur.fetchall():\nprint item['title'] # works!\nSo you can easily remove those custom wrappers which i saw copied here and there...", "issue_status": "Closed", "issue_reporting_time": "2012-09-03T19:30:47Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1484": {"issue_url": "https://github.com/pallets/flask/issues/587", "issue_id": "#587", "issue_summary": "Python 3 port is available", "issue_description": "puzzlet commented on 2 Sep 2012\nI'm porting Flask (and Werkzeug) to run in Python 3.2:\nmaster branch: https://github.com/puzzlet/flask/tree/py3-dev\nforked-from-stable(0.9) branch: https://github.com/puzzlet/flask/tree/py3\nAt this time of writing it passes all the tests, and capable of running simple web applications.", "issue_status": "Closed", "issue_reporting_time": "2012-09-02T00:49:12Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1485": {"issue_url": "https://github.com/pallets/flask/issues/586", "issue_id": "#586", "issue_summary": "Session workaround in case cookie is disabled", "issue_description": "adsahay commented on 31 Aug 2012\nI'm trying to make an HTML5 app which is intended to work everywhere(!!). In iOS when a web app is added to the home screen, the resulting standalone app doesn't allow cookies, nor is there an option for the user to enable them.\nI'm using server-side sessions (on redis), and in this scenario I'm contemplating appending some sort of auth token to every url request (maybe as a header, say, X-MYTOKEN), which will be stored on the client using localStorage after it is generated after a successful login. Later on a logout or a timeout would invalidate this token on the server side, and the localStorage value would get rewritten on the subsequent login.\nCan you weigh in on this approach, or suggest something better?", "issue_status": "Closed", "issue_reporting_time": "2012-08-31T12:09:24Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1486": {"issue_url": "https://github.com/pallets/flask/issues/585", "issue_id": "#585", "issue_summary": "Multiple URL rules pointing to lambdas in the same scope do not work", "issue_description": "boomlinde commented on 31 Aug 2012\nI'm dynamically generating a bunch of views in a piece of code that essentially boils down to\nfor manager in managers:\n    app.add_url_rule('/managers/%s/<parameter>' % manager['identifier'], manager['lambda']\nwhere the lambda key in the manager objects is a lambda object using a small set of common functions with varying input parameters based on values in the manager object.\nThe issue is that when adding multiple url rules pointing to lambdas in the same module, all the routes will point to the lambda that was defined last. Upon further investigation, it seems Flask URL rules only refer to endpoint functions by name in a string, so all the endpoints that point to lambdas in the same scope will end up pointing at the same lambda, referred to as \"package.\".\nI realize that keeping names is necessary for reverse lookup of URL rules, but I think that ideally Flask should keep track of the endpoint function object itself by a pointer as well and use that to call.", "issue_status": "Closed", "issue_reporting_time": "2012-08-31T12:07:24Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1487": {"issue_url": "https://github.com/pallets/flask/issues/584", "issue_id": "#584", "issue_summary": "Handling of vendor trees and parameters in MIME Media Types", "issue_description": "exhuma commented on 30 Aug 2012\nI am currently developing a new RESTful application in our company, and I want to do my job as properly as possible. And as many more RESTful applications/services will follow, I am currently reading up on the topic as-I-go. Also, out of experience, I know that APIs will evolve over time, and the need to version them is not something new.\nAt the very beginning of my quest, I came to an answer on StackOverflow discussing just that. The answer itself, pointed me to both the RFC for Media Types. I am still in the process of reading it in all it's glory, but so far, the \"personal\" or even \"special\" sub-type trees seem to fit my needs perfectly. This let's me explicitly define the media type I am communicating with my client.\nIn parallel, the SO answer pointed me also indirect;ly to a section about versioning in the \"Nobody Understands REST or HTTP\" document.\nAll in all, I find the solution with the custom sub-type tree and the version parameter very appealing.\nUnfortunately, Flask is not yet able to parse this properly. As far as I can see, this could be handled transparently inside MIMEAccept by only relaxing the \"accept_json\" logic to represent a general \"does the client understand JSON\" question, and adding a few extra accessors which are more precise.\nI am not yet 100% certain how this could look like, but if you want I would be willing to look into it, and make a proposal via pull-request?", "issue_status": "Closed", "issue_reporting_time": "2012-08-30T12:14:23Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1488": {"issue_url": "https://github.com/pallets/flask/issues/580", "issue_id": "#580", "issue_summary": "POST with accidental tuple is very difficult to debug", "issue_description": "voltagex commented on 23 Aug 2012\nhttps://gist.github.com/3434633 shows a small application which I send a POST request to - unfortunately this causes the following traceback:\n127.0.0.1 - - [23/Aug/2012 19:55:27] \"POST /uptime/osiris/ HTTP/1.1\" 500 -\nTraceback (most recent call last):\nFile \"/usr/share/pyshared/flask/app.py\", line 1518, in call\nreturn self.wsgiapp(environ, start_response)\nFile \"/usr/share/pyshared/flask/app.py\", line 1506, in wsgi_app\nresponse = self.make_response(self.handle_exception(e))\nFile \"/usr/share/pyshared/flask/app.py\", line 1504, in wsgi_app\nresponse = self.full_dispatch_request()\nFile \"/usr/share/pyshared/flask/app.py\", line 1265, in full_dispatch_request\nresponse = self.make_response(rv)\nFile \"/usr/share/pyshared/flask/app.py\", line 1338, in make_response\nreturn self.response_class(*rv)\nFile \"/usr/share/pyshared/werkzeug/wrappers.py\", line 642, in _init\nself.status = status\nFile \"/usr/share/pyshared/werkzeug/wrappers.py\", line 748, in _set_status\nself._status_code = int(self._status.split(None, 1)[0])\nIndexError: list index out of range\nThis is with the following request - curl -d \"\" http://localhost:5000/uptime/test/ but supplying any post data will cause the same\nThe issue is with accidentally returning a tuple in my code - however the error doesn't seem like that at all and it was only due to an eagle-eyed person in the IRC channel that I found this one. Could this be made more explicit? (i.e something in the trace to say that this was supposed to be a (content, status) tuple or a single string.", "issue_status": "Closed", "issue_reporting_time": "2012-08-23T10:33:21Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1489": {"issue_url": "https://github.com/pallets/flask/issues/573", "issue_id": "#573", "issue_summary": "Debugging mode is not propagate to mounted apps (DispatcherMiddleware)", "issue_description": "nbcmayhem commented on 5 Aug 2012\nroot.py\nfrom flask import Flask\nfrom backend import app as backend\n\nfrontend = Flask('root')\n\n@frontend ....\n...\n\nfrontend.wsgi_app = DispatcherMiddleware(frontend.wsgi_app, {\n    '/mountpoint': backend\n})\ndaemon.py\nfrom root import frontend as app\n\nserver_debug():\n    frontend.debug = True\n    frontend.run()\ndebugger is only available in the frontend domain, not within the mountpoint", "issue_status": "Closed", "issue_reporting_time": "2012-08-05T14:08:14Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1490": {"issue_url": "https://github.com/pallets/flask/issues/572", "issue_id": "#572", "issue_summary": "INFO don't get logged for custom logger handle", "issue_description": "ibeex commented on 4 Aug 2012\nOS X 19.7.4, python 2.7.1, flask 0.9\nas in this example https://gist.github.com/3257877 , in log file there is nothing for level INFO", "issue_status": "Closed", "issue_reporting_time": "2012-08-04T13:57:20Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1491": {"issue_url": "https://github.com/pallets/flask/issues/570", "issue_id": "#570", "issue_summary": "Warn or raise when overriding an endpoint", "issue_description": "Contributor\nSimonSapin commented on 29 Jul 2012\nIt is apparently a common mistake to make multiple/distinct view functions sharing the same endpoint, the last overriding the earlier ones in the app.view_functions dict.\nWith a decorator: http://stackoverflow.com/questions/11064263/flask-custom-decorator-breaks-the-routing\nWith class-based views: http://stackoverflow.com/questions/11700698/flask-route-query-parameter\nIs there an use case to using app.route() or app.add_url_rule() with an existing endpoint and overriding it? I think it is more often a mistake than not. I suggest that such cases issue a warning or even raise an exception, in order to catch the mistake early. In uncommon scenarios where overriding is actually desired, the user can always use del app.view_functions[endpoint] before registering the new function.\n(I can provide a patch, but I\u2019d like to discuss the idea first.)", "issue_status": "Closed", "issue_reporting_time": "2012-07-29T08:41:40Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1492": {"issue_url": "https://github.com/pallets/flask/issues/569", "issue_id": "#569", "issue_summary": "Initialization error under Attest", "issue_description": "Kroisse commented on 27 Jul 2012\nI used Attest for testing my web application using Flask 0.8 and tried to upgrade it to 0.9.\nRunning the test after upgrade it, the testing raised an error when initializing a Flask app object.\nTesting with Flask 0.8 has no problem.\nHere is my traceback:\nTraceback (most recent call last):\n  File \".../testsuite/__init__.py\", line 5, in <module>\n    import project.api\n  File \"/Users/ecdysis/.virtualenvs/sheepfarm/lib/python2.7/site-packages/attest/hook.py\", line 260, in load_module\n    return imp.load_module(name, fd, fn, info)\n  File \".../project/api/__init__.py\", line 3, in <module>\n    from .http import app, init\n  File \"/Users/ecdysis/.virtualenvs/sheepfarm/lib/python2.7/site-packages/attest/hook.py\", line 260, in load_module\n    return imp.load_module(name, fd, fn, info)\n  File \".../project/api/http.py\", line 40, in <module>\n    app = Flask(__name__)\n  File \"/Users/ecdysis/.virtualenvs/sheepfarm/lib/python2.7/site-packages/Flask-0.9-py2.7.egg/flask/app.py\", line 303, in __init__\n    instance_path = self.auto_find_instance_path()\n  File \"/Users/ecdysis/.virtualenvs/sheepfarm/lib/python2.7/site-packages/Flask-0.9-py2.7.egg/flask/app.py\", line 608, in auto_find_instance_path\n    prefix, package_path = find_package(self.import_name)\n  File \"/Users/ecdysis/.virtualenvs/sheepfarm/lib/python2.7/site-packages/Flask-0.9-py2.7.egg/flask/helpers.py\", line 727, in find_package\n    if loader.is_package(root_mod_name):\nAttributeError: 'AssertImportHook' object has no attribute 'is_package'\nI think that Attest's AssertImportHook broke the internal behavior of Flask. So I temporarily disabled it, and the above error disappeared.", "issue_status": "Closed", "issue_reporting_time": "2012-07-27T08:24:59Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1493": {"issue_url": "https://github.com/pallets/flask/issues/568", "issue_id": "#568", "issue_summary": "helpers.py docstring error", "issue_description": "dormouse commented on 27 Jul 2012\nin docstring of flask.stream_with_context()\nline 116:should be a \"::\" not a \":\" in line end.", "issue_status": "Closed", "issue_reporting_time": "2012-07-27T01:54:32Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1494": {"issue_url": "https://github.com/pallets/flask/issues/566", "issue_id": "#566", "issue_summary": "flask.views.MethodView returns the response body for HEAD", "issue_description": "ghost commented on 26 Jul 2012\nSee https://github.com/mitsuhiko/flask/blob/master/flask/views.py#L148.\nWhen there's no HEAD handler, it uses the GET one but doesn't actually discard the response body, which it should. Most HTTP clients ignore it anyway so this should be safe to fix.", "issue_status": "Closed", "issue_reporting_time": "2012-07-26T09:49:18Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1495": {"issue_url": "https://github.com/pallets/flask/issues/561", "issue_id": "#561", "issue_summary": "A problem when use `app.config.from_object()`", "issue_description": "plucury commented on 21 Jul 2012\nHere is my code:\ninit.py:\napp = Flask(__name__)\napp.config.from_object(_config.DevConfig)#Without this line, It works well.\nimport model_name.view\nview.py:\n@app.route('/')                                                                 \ndef index():                                                                                                                                    \n    return render_template('index.html')\nProblem:When I use method from_object. The index page can't be found. But when I deleted it, It works very well.", "issue_status": "Closed", "issue_reporting_time": "2012-07-21T03:49:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1496": {"issue_url": "https://github.com/pallets/flask/issues/560", "issue_id": "#560", "issue_summary": "404 error", "issue_description": "sbitpdc commented on 21 Jul 2012\nI have a route:\n@app.route(\"/links/\", methods = (\"GET\", \"POST\"))\n@app.route(\"/links/string:url/\", methods = (\"GET\", \"POST\"))\ndef links(url = \"\"):\ndosomething()\nWhen I get 127.0.0.1:5000/links/www.4399.com/special/26.htm,it return 404 bad.\nWhy?", "issue_status": "Closed", "issue_reporting_time": "2012-07-21T01:17:47Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1497": {"issue_url": "https://github.com/pallets/flask/issues/557", "issue_id": "#557", "issue_summary": "Unable to render a template without request context", "issue_description": "rslinckx commented on 20 Jul 2012\nWith the recent introduction of flask.app_context() it is now possible to have code running in the context of an app, but without having a web request active.\nI would like to be able to use render_template while in an app context but there are some code paths that assume there is an active request context while doing so.\nThe following code snippets should be adapted:\nhttps://github.com/mitsuhiko/flask/blob/master/flask/app.py#L675 This function should not try to include blueprint related context processors when no active request is present\nhttps://github.com/mitsuhiko/flask/blob/master/flask/templating.py#L20 The default context processor should only include the config from the app context, then check if a request is present, and include the additional keys (session, request, g)\nIt seems odd to not be able to render a template without a request, obviously the user has to make sure that templates rendered in an app context don't use request-related references but that seems quite reasonable.\nDo you think this makes sense ? If yes, then i can provide a patch to do that, and if you think of any other issues related to this i'll be glad to fix them.\nThanks !", "issue_status": "Closed", "issue_reporting_time": "2012-07-20T09:33:10Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1498": {"issue_url": "https://github.com/pallets/flask/issues/556", "issue_id": "#556", "issue_summary": "Get raw data from POST request", "issue_description": "desaiashu commented on 20 Jul 2012\nHow can I get the raw data from a POST request in Flask?\nI am moving from web.py to Flask and have some clients in production that unfortunately are using the content-type header application/x-www-form-urlencoded, so changing the header value of the request is not an option (unless it is overwritten on the server)\nI cannot use: data = request.form.keys()[0] Because occasionally the '&' character shows up in my data and trying to loop through the form.keys adding the '&' seems to corrupt the data for some reason.\nI'm currently using the solution proposed in this post: Python (Flask): How to get whole raw post body? But I'm not too sure if this has any performance issues.\nI'm looking for one of three things:\nConfirmation that the WGSICopyBody method won't have any adverse performance issues\nAbility to make this (data = request.form.keys()[0]) method work by looping through the keys and properly restoring the & in the data\nAnother solution to the problem, possibly by subclassing the Request class?", "issue_status": "Closed", "issue_reporting_time": "2012-07-20T03:34:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1499": {"issue_url": "https://github.com/pallets/flask/issues/555", "issue_id": "#555", "issue_summary": "Subdomains in blueprints don't work", "issue_description": "tomekwojcik commented on 20 Jul 2012\nLook at the code below:\n# -*- coding: utf-8 -*-\n\nfrom flask import Flask, Blueprint\n\napp = Flask(__name__)\napp.config.DEBUG = True\n#app.url_map.default_subdomain = 'www'\n\nwww = Blueprint('www', 'www', subdomain='www')\nsub = Blueprint('sub', 'sub', subdomain='sub')\n\n\n@www.route('/')\ndef www_hello():\n    return 'www.www_hello'\n\n\n@sub.route('/')\ndef sub_hello():\n    return 'sub.sub_hello'\n\n\napp.register_blueprint(www)\napp.register_blueprint(sub)\n\nif __name__ == '__main__':\n    app.run(host='127.0.0.1', port=8888, debug=True)\nAssuming the app's being served at mysite.com.\nNavigating to www.mysite.com or sub.mysite.com will produce 404. When you uncomment app.url_map.default_subdomain both URLs will point to www_hello.\nIs it me or there's something seriously not right with Flask's Blueprints?", "issue_status": "Closed", "issue_reporting_time": "2012-07-19T20:14:37Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1500": {"issue_url": "https://github.com/pallets/flask/issues/553", "issue_id": "#553", "issue_summary": "Cannot route non-ascii URLs", "issue_description": "louiz commented on 18 Jul 2012\nTry this simple routing function:\n@app.route(u'/\u2665/')\ndef heart():\nreturn \"It works\"\nOr\n@app.route('/%E2%99%A5/')\ndef heart():\nreturn \"It works\"\nTrying to GET /%E2%99%A5/ HTTP/1.1\n(which is what a browser does when trying to reach http://example.com/\u2665/)\nYou get a 404 not found in return.\nI could not found anything in the doc talking about that, so I assume it\u2019s a bug.", "issue_status": "Closed", "issue_reporting_time": "2012-07-18T02:03:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1501": {"issue_url": "https://github.com/pallets/flask/issues/552", "issue_id": "#552", "issue_summary": "Reraising an HTTP exception from an error handler isn't the same as not trapping.", "issue_description": "adrianratnapala commented on 17 Jul 2012\nI am not sure if this is a bug, because I don't know what the expected behaviour is. I am reporting it just in case (there should also be a mailing list message from 2012-07-15 about this topic).\nbehaviour (that might be) expected:\nIf any exception is trapped and passed to a Flask error handler, but that handler decides to re-raise the exception, the effect should be the same as if no handler had been registered. For example, if an HTTP error handler is registered by their numerical code but then re-raises the exception, it should result in Flask's default HTTP error page for that code, even if TESTING=True.\nbehaviour observed:\nIf an HTTP error handler is registered via its numerical code re-raises an exception, the exception is then handled is if it were a non-HTTP exception. If TESTING=True, this results in a stack trace. If TESTING=False, the client gets a \"500 Internal Server Error\" regardless of what the original exception was.", "issue_status": "Closed", "issue_reporting_time": "2012-07-17T05:55:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1502": {"issue_url": "https://github.com/pallets/flask/issues/551", "issue_id": "#551", "issue_summary": "USE_RELOADER does not seem to work nor is documented", "issue_description": "italomaia commented on 17 Jul 2012\nShouldn't USE_RELOADER work with class based configuration? Doesn't seem to work.", "issue_status": "Closed", "issue_reporting_time": "2012-07-16T21:44:44Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1503": {"issue_url": "https://github.com/pallets/flask/issues/549", "issue_id": "#549", "issue_summary": "DEBUG reloader is too agressive", "issue_description": "rbucker commented on 16 Jul 2012\nMy webapp is a single file app. It's also 37K now. I'm editing the file using BBedit via the built-in SFTP feature in BBedit. In the last 24hours I've been experiencing latency between my desktop and the remote system. When I \"save\" my PY file and flask detects the change it immediately tried to reload it. When I was using vim locally it worked great. Now that I'm going remote... (1) flask tried to reload the py file but it's only partially there.\n(yes, it would be better if BBedit save the file to a tmp file and then renamed it, however, I do not claim to know the motivation for the current methodology)\nAnyway, give than I have no idea what the flask issues are... I'd recommend a token at the end of the file that could be detected to make sure that the entire file is ready before loading it.\nAlso, (2) the reloader seems to crash quietly each time.", "issue_status": "Closed", "issue_reporting_time": "2012-07-16T12:00:20Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1504": {"issue_url": "https://github.com/pallets/flask/issues/547", "issue_id": "#547", "issue_summary": "How to get value of the nested dictionary using ImmutableMultiDict?", "issue_description": "emqplus commented on 12 Jul 2012 \u2022\nedited by davidism\nHTTP POST:\n_ajax_nonce 7bf4f51ffb\naction meta-box-order\norder[column3] dashboard_incoming_links\norder[normal] dashboard_recent_comments,dashboard_recent_drafts\norder[side] dashboard_event_summary,dashboard_quick_press,dashboard_primary,dashboard_secondary,dashboard_plugins\npage dashboard\npage_columns 3\nImmutableMultiDict Got:\nImmutableMultiDict([\n    ('page_columns', u'2'),\n    ('order[column3]', u'dashboard_incoming_links'),\n    ('order[side]', u'dashboard_event_summary,dashboard_quick_press,dashboard_primary,dashboard_secondary,dashboard_plugins'),\n    ('order[normal]', u'dashboard_recent_comments,dashboard_recent_drafts'),\n    ('action', u'meta-box-order'),\n    ('_ajax_nonce', u'7bf4f51ffb'), ('page', u'dashboard')\n])\nHow to get a MultiDict like:\n{'order', {'column3': u'dashboard_incomming_links', 'side': '.......'}}", "issue_status": "Closed", "issue_reporting_time": "2012-07-12T03:14:26Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1505": {"issue_url": "https://github.com/pallets/flask/issues/546", "issue_id": "#546", "issue_summary": "Flask automatic stop working sometimes", "issue_description": "sbitpdc commented on 12 Jul 2012\n!/usr/bin/env python\ncoding=utf-8\nfrom my_flask import create_app\nfrom flask.ext.script import Manager\nfrom flask.ext.celery import install_commands as install_celery_commands\napp = create_app('config.cfg')\nmanager = Manager(app)\ninstall_celery_commands(manager)\nif name == \"main\":\nmanager.run()\nThe app sometime automatic stop working and it's not any tips which error , warning,notice .etc.Why?", "issue_status": "Closed", "issue_reporting_time": "2012-07-12T03:13:16Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1506": {"issue_url": "https://github.com/pallets/flask/issues/544", "issue_id": "#544", "issue_summary": "I just write a extension for use url_for in javascript", "issue_description": "dantezhu commented on 9 Jul 2012\nthe project is here:\nhttps://github.com/dantezhu/flask_util_js\nthen you can use url_for in javascript like this:\nvar url = flask_util.url_for('sub.bpt_index', {y:2, x:'/sdf'});\nmay be it can be put on the http://flask.pocoo.org/extensions/ ? hoho, anyway, some one may need this~ enjoy it~", "issue_status": "Closed", "issue_reporting_time": "2012-07-09T11:54:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1507": {"issue_url": "https://github.com/pallets/flask/issues/541", "issue_id": "#541", "issue_summary": "Clarify Cache Documentation", "issue_description": "burhan commented on 5 Jul 2012\nIn the cache documentation it states:\nIf you want to use memcached, make sure to have one of the memcache modules supported (you get them from PyPI) and a memcached server running somewhere.\nHowever it doesn't state which modules are supported and the werkzeug documentation is equally vague.", "issue_status": "Closed", "issue_reporting_time": "2012-07-05T06:56:33Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1508": {"issue_url": "https://github.com/pallets/flask/issues/532", "issue_id": "#532", "issue_summary": "Mention Extensions in the Docs more", "issue_description": "Contributor\nkennethreitz commented on 25 Jun 2012\nI had a friend that was going through the quickstart, and he had absolutely no idea that there were any extensions available for flask.\nHe was using SQLAlchemy directly and was becoming quite frustrated quickly.\nSince an ecosystem is clearly part of a framework, I think we should add some hints about extensions throughout the documentation. Not necessarily usage examples, just \"hey, this extension might be useful to you\".", "issue_status": "Closed", "issue_reporting_time": "2012-06-25T17:46:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1509": {"issue_url": "https://github.com/pallets/flask/issues/528", "issue_id": "#528", "issue_summary": "is_resource_modified return False if etag match while last-modified < mtime", "issue_description": "sthenault commented on 15 Jun 2012\nwhich sounds not conform to http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.26 :\nif any of the entity tags match the entity tag of the entity that would have been returned in the response to a similar GET request (without the If-None-Match header) on that resource, or if \"*\" is given and any current entity exists for that resource, then the server MUST NOT perform the requested method, unless required to do so because the resource's modification date fails to match that supplied in an If-Modified-Since header field in the request.", "issue_status": "Closed", "issue_reporting_time": "2012-06-15T12:03:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1510": {"issue_url": "https://github.com/pallets/flask/issues/526", "issue_id": "#526", "issue_summary": "flask in virtualenv: \"No module named inspect\"", "issue_description": "otherdave commented on 13 Jun 2012\nApologies if this was fixed, but I can't find a solution online.\nI'm following the tutorial in a virtualenv and when I try to run the flaskr.py file, I get:\nImportError: No module named inspect\nI've seen references to this being a corrupted sys.path in virtualenv but not everyone seems to have this problem. I'm using Python 2.7.2 on OSX with the virtualenv setup described on the flask website.", "issue_status": "Closed", "issue_reporting_time": "2012-06-13T00:58:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1511": {"issue_url": "https://github.com/pallets/flask/issues/524", "issue_id": "#524", "issue_summary": "unused argument in scripts/flaskext_compat.py", "issue_description": "Dillon-Benson commented on 12 Jun 2012\nThe find_module method has an unused \"path\" argument.", "issue_status": "Closed", "issue_reporting_time": "2012-06-11T20:38:29Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1512": {"issue_url": "https://github.com/pallets/flask/issues/521", "issue_id": "#521", "issue_summary": "flask-login does not work when using static_url_path", "issue_description": "maelp commented on 6 Jun 2012\nFor some reason\napp = flask.Flask(__name__, static_folder='public', static_url_path='')\nwill cause flask-login to return AttributeError: 'RequestContext' object has no attribute 'user', and\napp = flask.Flask(__name__, static_folder='public')\nworks", "issue_status": "Closed", "issue_reporting_time": "2012-06-06T11:59:22Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1513": {"issue_url": "https://github.com/pallets/flask/issues/519", "issue_id": "#519", "issue_summary": "Quickstart login example has unclear comment.", "issue_description": "dansalmo commented on 31 May 2012\nThe login example in the quickstart guide has an incorrect or unclear comment at the end. If the comment is referring to the error = 'Invalid username/password' line, then this code will NOT be executed if the request method was GET. If the comment is meant to mean that code placed after the comment would execute, then it should be re-worded as such.\n@app.route('/login', methods=['POST', 'GET'])\ndef login():\n    error = None\n    if request.method == 'POST':\n        if valid_login(request.form['username'],\n                       request.form['password']):\n            return log_the_user_in(request.form['username'])\n        else:\n            error = 'Invalid username/password'\n    # this is executed if the request method was GET or the\n    # credentials were invalid", "issue_status": "Closed", "issue_reporting_time": "2012-05-31T04:42:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1514": {"issue_url": "https://github.com/pallets/flask/issues/516", "issue_id": "#516", "issue_summary": "Login example broke the flow", "issue_description": "dansalmo commented on 31 May 2012\nI am very new to python, flask, heroku, git etc. but I was able to easily and successfully flow through the quickstart guide and get the minimal app deployed on heroku. I was very impressed with documentation flow and accuracy. However, I ran into a significant stumbling block with the \"HTTP Methods\" section. There were two issues that caused me stumble and I think others may stumble here as well.\nThe most significant issue was that the login example code calls descriptive stubs that don't exist. This may be fine for those that already understand what the example is showing, but for people like me that learn by trying to run the code examples, it took quite a while to figure that my app was crashing due to the non-existent function calls.\nThe second issue involves the difference between the flask routing and what I was familiar with for form processing in PHP. I initially expected something along the lines of a login.py script that would get invoked by action=\"http://mysite.com/login.py\" attribute of the form.\nEventually I figured out how it worked by creating what I believe would be a more easily understood example for the method and form functionality. This is the code that I eventually created to learn and confirm the functionality.\nPlease consider revising the Flask example(s) to show code that can actually be executed like the previous examples I have tried, and to show what the HTML would look like if needed.\n@app.route('/form', methods=['POST', 'GET'])\ndef form():\n    if request.method == 'POST':\n        return 'form POST dictionary: %s' % request.form\n    if request.method == 'GET':\n        return 'form GET args: %s' % request.args\n<form method=\"POST\" action=\"http://your_sites_url_here.com/form\">\n  Username: <input type=\"text\" name=\"username\" size=\"15\" /><br />\n  Password: <input type=\"password\" name=\"password\" size=\"15\" /><br />\n            <p><input type=\"submit\" value=\"Login\" /></p>\n </form>", "issue_status": "Closed", "issue_reporting_time": "2012-05-31T01:31:16Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1515": {"issue_url": "https://github.com/pallets/flask/issues/513", "issue_id": "#513", "issue_summary": "FAIL: test_jsonify", "issue_description": "ddrouin commented on 28 May 2012\nddrouin@Dave:~> git clone https://github.com/mitsuhiko/flask.git \nCloning into 'flask'...\nversion = '0.9-dev' appears in flask/flask/init.py\nTests run with Python 2.7.3 on Ubuntu 12.04 LTS\nddrouin@Dave:~/flask> python run-tests.py \n........................................................................................................................................E..................................................\n======================================================================\nERROR: test_jsonify (flask.testsuite.helpers.JSONTestCase)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/ddrouin/flask/flask/testsuite/helpers.py\", line 88, in test_jsonify\n    self.assert_equal(rv.mimetype, 'application/json', url)\nTypeError: assert_equal() takes exactly 3 arguments (4 given)\n\n----------------------------------------------------------------------\nRan 187 tests in 0.706s\n\nFAILED (errors=1)\n/kw and /dict work fine, occurs on /unpadded.\nsimplejson is present, version 2.3.2\nline 136 in flask/flask.helpers has:\nif 'padded' in kwargs:\n     ....\n     return current_app.response_class(content, mimetype='application/javascript')\nSo the defect is triggered by kwargs containing {'padded': False}. To fix this - I ended up changing my copy to this and now the tests all pass:\n    if 'padded' in kwargs:\n        padded = kwargs['padded']\n        del kwargs['padded']\n    else:\n        padded = False\n\n    if padded:\n        if isinstance(padded, str):\n            callback = request.args.get(padded) or 'jsonp'\n        else:\n            callback = request.args.get('callback') or \\\n                       request.args.get('jsonp') or 'jsonp'\n        json_str = json.dumps(dict(*args, **kwargs), indent=None)\n        content = str(callback) + \"(\" + json_str + \")\"\n        return current_app.response_class(content, mimetype='application/javascript')\n    return current_app.response_class(json.dumps(dict(*args, **kwargs),\n        indent=None if request.is_xhr else 2), mimetype='application/json')", "issue_status": "Closed", "issue_reporting_time": "2012-05-27T20:39:40Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1516": {"issue_url": "https://github.com/pallets/flask/issues/512", "issue_id": "#512", "issue_summary": "Review Flask-WhooshAlchemy", "issue_description": "gyllstromk commented on 19 May 2012\nhttps://github.com/gyllstromk/Flask-WhooshAlchemy", "issue_status": "Closed", "issue_reporting_time": "2012-05-19T02:41:15Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1517": {"issue_url": "https://github.com/pallets/flask/issues/511", "issue_id": "#511", "issue_summary": "Review Flask-WhooshAlchemy extension", "issue_description": "gyllstromk commented on 19 May 2012\nI'm happy to resolve any issues.\nhttps://github.com/gyllstromk/Flask-WhooshAlchemy", "issue_status": "Closed", "issue_reporting_time": "2012-05-18T19:20:56Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1518": {"issue_url": "https://github.com/pallets/flask/issues/510", "issue_id": "#510", "issue_summary": "Can jsonify return array?", "issue_description": "guotie commented on 17 May 2012\nas the title says, can i use jsonify as this:\njsonify( [ { 'a': 1, 'b': 2 }, { 'c': 3, 'd': 4 } ] )", "issue_status": "Closed", "issue_reporting_time": "2012-05-17T02:40:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1519": {"issue_url": "https://github.com/pallets/flask/issues/508", "issue_id": "#508", "issue_summary": "Context not available when combining decorators and generators", "issue_description": "NicolasT commented on 15 May 2012\nIn some application I was writing I created a decorator to allow for streaming responses:\ndef stream(*args, **kwargs):\n    def wrapper(f):\n        @functools.wraps(f)\n        def wrapped(*a, **kw):\n            return flask.Response(f(*a, **kw), *args, **kwargs)\n\n        return wrapped\n\n    return wrapper\nand another one to JSON'ify the response:\ndef jsonify(f):\n    @stream(\n        content_type='application/json',\n        headers={\n            'Cache-Control': 'no-cache',\n        })\n    @functools.wraps(f)\n    def wrapped(*args, **kwargs):\n        res = f(*args, **kwargs)\n\n        for chunk in json.JSONEncoder().iterencode(res):\n            yield chunk\n\n    return wrapped\nUsing these on handlers which require access to a context fails though:\nRuntimeError: working outside of request context\nFull example with some ok and not-ok handers is available at https://gist.github.com/4a443e8214c2c6eea1a5", "issue_status": "Closed", "issue_reporting_time": "2012-05-14T18:40:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1520": {"issue_url": "https://github.com/pallets/flask/issues/507", "issue_id": "#507", "issue_summary": "Flask-Login source link incorrect", "issue_description": "fhsm commented on 11 May 2012\nThe \"on bitbucket\" link for the flask-login extension listed at http://flask.pocoo.org/extensions/ is incorrect.\nIt should read:\n\"on github\": https://github.com/maxcountryman/flask-login/", "issue_status": "Closed", "issue_reporting_time": "2012-05-10T19:18:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1521": {"issue_url": "https://github.com/pallets/flask/issues/503", "issue_id": "#503", "issue_summary": "Allow blueprint-local routing for errorhandlers", "issue_description": "Contributor\njfinkels commented on 4 May 2012\nThe comment in flask.Blueprint.errorhandler notes, \"Please be aware that routing does not happen local to a blueprint so an error handler for 404 usually is not handled by a blueprint unless it is caused inside a view function.\"\nPlease add Blueprint-local routing for errors triggered by any request to an endpoint defined by a blueprint.", "issue_status": "Closed", "issue_reporting_time": "2012-05-04T02:50:32Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1522": {"issue_url": "https://github.com/pallets/flask/issues/501", "issue_id": "#501", "issue_summary": "safe_join with '..'", "issue_description": "Contributor\nSimonSapin commented on 24 Apr 2012\nIs this a problem?\n>>> from flask import safe_join\n>>> safe_join('/foo', '..')\n'/foo/..'\nI think it could be if we\u2019re exposing not just files but also directories (maybe making indexes, ...). Should safe_join check for '..' and not just '../' ?", "issue_status": "Closed", "issue_reporting_time": "2012-04-24T09:44:08Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1523": {"issue_url": "https://github.com/pallets/flask/issues/500", "issue_id": "#500", "issue_summary": "flaskr, minitwit css style not rendering in firefox 11", "issue_description": "drewverlee commented on 24 Apr 2012\nIf flaskr loads into firefox 11 the css style sheet: flask/examples/flaskr/static/style.css doesn't render.\nI was able to correct it by renaming style.css to anythingelse.css. I believe that firefox is overriding style.css with its own style.css", "issue_status": "Closed", "issue_reporting_time": "2012-04-24T05:27:17Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1524": {"issue_url": "https://github.com/pallets/flask/issues/495", "issue_id": "#495", "issue_summary": "padded attribute on jsonify not functioning as expected", "issue_description": "codehugger commented on 20 Apr 2012\nWhen calling jsonify with the padded argument as True the expected behavior is padded JSON response that uses the callback argument. Example\nhandleResponse({\"foo\": \"bar\"})\nHowever when setting padded to False the result is still a padded JSON response with the name of the callback function set to jsonp. Example\njsonp({\"foo\": \"bar\"})\nShould be\n{\"foo\": \"bar\"}", "issue_status": "Closed", "issue_reporting_time": "2012-04-20T11:28:55Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1525": {"issue_url": "https://github.com/pallets/flask/issues/494", "issue_id": "#494", "issue_summary": "Flask.inject_url_defaults() incorrectly splits Blueprint's name", "issue_description": "Contributor\nekoka commented on 20 Apr 2012\nThe Flask.inject_url_defaults() function splits the endpoint at the wrong location to retrieve the name of the blueprint. This causes url_for() not to work properly for blueprints when combined with Blueprint.url_defaults()\ne.g.\nendpoint = \"catalogue.admin.products.index\"\nbp = endpoint.split('.', 1)[0]\nbp is now 'catalogue' rather than 'catalogue.admin.products'\nI presume rsplit() would be more appropriate than split() for this one.", "issue_status": "Closed", "issue_reporting_time": "2012-04-19T20:17:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1526": {"issue_url": "https://github.com/pallets/flask/issues/491", "issue_id": "#491", "issue_summary": "host_matching is in Werkzeug since 0.7 but not in Flask", "issue_description": "constb commented on 14 Apr 2012\nhaving 'example.com' and 'example.org' running on the same server with the same data backend I thought it would be simple to serve both from a single Flask app, especially since Werkzeug has host_matching but it isn't.\nI currently workaround this by 'injecting' hostname into urls with nginx's url rewrites but this is a bit too hackish, you know.\nI would like to have syntax like this:\n@app.route(\"/\", host=\"example.org\")\ndef hello():\n    return \"Hello World!\"", "issue_status": "Closed", "issue_reporting_time": "2012-04-13T20:19:57Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1527": {"issue_url": "https://github.com/pallets/flask/issues/487", "issue_id": "#487", "issue_summary": "loader.is_package is a optional method", "issue_description": "Contributor\nRonnyPfannschmidt commented on 11 Apr 2012\nflask relies on loader.is_package in find_package(import_name) of flask.helpers\nhowever that method is optional as per PEP 302, this it breaks with loaders that don't implement it", "issue_status": "Closed", "issue_reporting_time": "2012-04-10T21:57:46Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1528": {"issue_url": "https://github.com/pallets/flask/issues/485", "issue_id": "#485", "issue_summary": "Review Flask-Restless for approval.", "issue_description": "Contributor\njfinkels commented on 10 Apr 2012\nSource at https://github.com/jfinkels/flask-restless, documentation at http://readthedocs.org/docs/flask-restless. All requirements are met once I release version 0.5 tonight (which includes dual license\u2014GNU AGPLv3 or BSD).", "issue_status": "Closed", "issue_reporting_time": "2012-04-10T17:44:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1529": {"issue_url": "https://github.com/pallets/flask/issues/484", "issue_id": "#484", "issue_summary": "Revise updated foreword (rduplain).", "issue_description": "Contributor\nrduplain commented on 10 Apr 2012\nAt the Flask sprint, @garbados split the foreword into two sections in #438, which I approve. Now it's waiting on me to pass through the new foreword and revise as needed. Excellent contribution; just needs a committer to make a pass.", "issue_status": "Closed", "issue_reporting_time": "2012-04-09T21:35:11Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1530": {"issue_url": "https://github.com/pallets/flask/issues/482", "issue_id": "#482", "issue_summary": "Evaluate readthedocs.org for Flask.", "issue_description": "Contributor\nrduplain commented on 9 Apr 2012\nCustom theme? Should work.\nAutodoc? Yes.\nOther extensions? I don't know.", "issue_status": "Closed", "issue_reporting_time": "2012-04-09T17:01:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1531": {"issue_url": "https://github.com/pallets/flask/issues/481", "issue_id": "#481", "issue_summary": "Add a FORCE_URL_SCHEME option", "issue_description": "Member\nmitsuhiko commented on 9 Apr 2012\nIt should be possible to force the URL scheme to https for all things. That includes URL generation as well as automatic redirect checks on all requests.", "issue_status": "Closed", "issue_reporting_time": "2012-04-09T14:00:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1532": {"issue_url": "https://github.com/pallets/flask/issues/480", "issue_id": "#480", "issue_summary": ":inherited-members: does not work for attributes", "issue_description": "Contributor\nSimonSapin commented on 9 Apr 2012\nI am not sure if this is a bug in Sphinx, but stuff like the root_path and static_url_path attributes/properties from _PackageBoundObject end up not documented in the API page of the docs. api.rst just contains this:\n.. autoclass:: Flask\n   :members:\n   :inherited-members:", "issue_status": "Closed", "issue_reporting_time": "2012-04-09T12:37:02Z", "fixed_by": "#2363", "pull_request_summary": "document inherited attributes for Flask and Blueprint", "pull_request_description": "Member\ndavidism commented on 6 Jun 2017\nSphinx autodoc :inherited-members: doesn't include attributes. The only solution is to duplicate the _PackageBoundObject attributes and their docs in the Flask and Blueprint classes.\nThe duplicated attributes can be removed once sphinx-doc/sphinx#741 is fixed.\ncloses #480", "pull_request_status": "Merged", "issue_fixed_time": "2017-06-06T14:52:56Z", "files_changed": [["15", "flask/app.py"], ["15", "flask/blueprints.py"], ["39", "flask/helpers.py"]]}, "1533": {"issue_url": "https://github.com/pallets/flask/issues/478", "issue_id": "#478", "issue_summary": "return jsonify(d), 201 breaks the 'application/json' mimetype", "issue_description": "lbsnrs commented on 8 Apr 2012\nUsing\nreturn jsonify(d), 201\nresults in returning the client a response with the intended status code and body, but with a text/html mimetype.\nI realize this may not be the intended way of using jsonify and the status code shortcut, nevertheless if would be a neat feature.\nFor the records, if you need to use jsonify and need to return a custom status code you could do\nresponse = jsonify(d)\nresponse.status_code = 201\nreturn response\nOr extend jsonify (I created a gist here: https://gist.github.com/2336085).\n1", "issue_status": "Closed", "issue_reporting_time": "2012-04-08T09:10:23Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1534": {"issue_url": "https://github.com/pallets/flask/issues/477", "issue_id": "#477", "issue_summary": "something missing in patterns/mongokit.rst", "issue_description": "dormouse commented on 7 Apr 2012\n>>> collection = connection['test'].users\n>>> user = {'name': u'admin', 'email': u'admin@localhost'}\n>>> collection.insert(user)\n\nprint list(collection.find())\nprint collection.find_one({'name': u'admin'})\nline 125 and 126 maybe missing \">>>\" ,am I right?", "issue_status": "Closed", "issue_reporting_time": "2012-04-07T10:17:14Z", "fixed_by": "#479", "pull_request_summary": "Removed unneeded print statements form mongokit pattern doc", "pull_request_description": "Contributor\ndmishe commented on 9 Apr 2012\nFixes #477", "pull_request_status": "Merged", "issue_fixed_time": "2012-06-17T13:25:10Z", "files_changed": [["3", "docs/patterns/mongokit.rst"]]}, "1535": {"issue_url": "https://github.com/pallets/flask/issues/472", "issue_id": "#472", "issue_summary": "Add test for flashed messages using sessions on external storage.", "issue_description": "Contributor\nrduplain commented on 2 Apr 2012\nAdd a test for #417.", "issue_status": "Closed", "issue_reporting_time": "2012-04-01T22:43:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1536": {"issue_url": "https://github.com/pallets/flask/issues/468", "issue_id": "#468", "issue_summary": "No single entry point for logging documentation.", "issue_description": "Contributor\nrduplain commented on 1 Apr 2012\nAt least, I don't have a single link to send users new to Flask and Python's std lib logging. Flask doesn't log by default in production; okay, but what's a good example of logging requests? Logging is currently scattered.", "issue_status": "Closed", "issue_reporting_time": "2012-04-01T15:54:27Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1537": {"issue_url": "https://github.com/pallets/flask/issues/466", "issue_id": "#466", "issue_summary": "Option for jsonify handles dates by converting to isoformat", "issue_description": "brianmhunt commented on 30 Mar 2012\nWhen jsonify is called on an object with a 'date' it throws:\nTypeError: datetime.date(2012, 3, 30) is not JSON serializable\nThere is an innocuous fix - see http://stackoverflow.com/questions/455580\ndef date_handler(obj):\n    if hasattr(obj, 'isoformat'):\n        return obj.isoformat()\n    else:\n        raise TypeError, 'Object of type %s with value of %s is not JSON serializable' % (type(obj), repr(obj))\nAnd https://github.com/mitsuhiko/flask/blob/master/flask/helpers.py#L142 becomes:\njson_str = json.dumps(dict(*args, **kwargs), indent=None, default=date_handler)\nThis strikes me as preferable to TypeError.\nAlternatively, jsonify could accept a default argument that is passed to json.dumps.", "issue_status": "Closed", "issue_reporting_time": "2012-03-30T14:57:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1538": {"issue_url": "https://github.com/pallets/flask/issues/461", "issue_id": "#461", "issue_summary": "Add flask.raw_context().", "issue_description": "Contributor\nrduplain commented on 26 Mar 2012\nflask.raw_context() would do the same thing as test_request_context but without actually creating a request.\n(Would it then be called flask.test_context()? That might get confusing.)", "issue_status": "Closed", "issue_reporting_time": "2012-03-26T17:11:42Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1539": {"issue_url": "https://github.com/pallets/flask/issues/460", "issue_id": "#460", "issue_summary": "Problem with file uploading", "issue_description": "akolesnikov93 commented on 25 Mar 2012\nStrange error happened to 100% working code (I mean this code has been working brilliantly for a while, but now gives strange errors).\nUsing flask (0.7.2), flask-wtf, flask-uploads.\nMain code:\n@app.route('/task/new', methods=['GET', 'POST'])\ndef task():\n    form = TaskForm(request.form)\n    if request.method == 'POST' and form.validate():\n        print type(form.image) # <class 'flaskext.wtf.file.FileField'>\n        print type(form.image.file) # <type 'unicode'>\n        print type(form.image.data) # <type 'unicode'>\n        print form.image.file.filename # gives AttributeError: 'unicode' object has no attribute 'filename'\nSome part from forms.py:\nfrom flaskext.wtf import ....... FileField,  file_allowed\nfrom flaskext.uploads import UploadSet, IMAGES\n\nimages = UploadSet(\"images\", IMAGES)\n\nclass TaskForm(Form):\n    url = TextField(u'URL', [validators.Length(min=4, max=400), validators.Required()])\n    title = TextField(u'TITLE', [validators.Length(min=4, max=4000), validators.Required()])\n    description = TextAreaField(u'Desc', [validators.Length(min=4, max=4000), validators.Required()])\n    image = FileField(u'Image', [file_allowed(images, \"Images only!\")])\nJinja 2 template:\n<form action=\"{{ url_for('task', task_id=task.id) }}\" method=\"POST\" enctype=\"multipart/form-data\">\n    {{ form.hidden_tag() }}\n    {{ help.render_field(form.url) }} # using rendering form macro, no problem there\n    {{ help.render_field(form.title) }}\n        {{ help.render_field(form.description) }}\n        {{ help.render_field(form.image) }}\n        <button class=\"positive\" type=\"submit\">Save</button>\n</form>\nIn Firefox submitting this form makes required fields (url, title, description) giving error \"This field is required. \" (Surely they are filled correctly).\nIn Chrome it's OK, but (from the main code):\n    print type(form.image) # <class 'flaskext.wtf.file.FileField'>\n    print type(form.image.file) # <type 'unicode'>\n    print type(form.image.data) # <type 'unicode'>\n    print form.image.file.filename # gives AttributeError: 'unicode' object has no attribute 'filename'\nEnctype is correct (it was working well, no changes were made).\nSo what can I do with this errors? It was working great, but now crashes. If needed, hosting is ep.io", "issue_status": "Closed", "issue_reporting_time": "2012-03-25T10:09:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1540": {"issue_url": "https://github.com/pallets/flask/issues/459", "issue_id": "#459", "issue_summary": "Problem with file uploading", "issue_description": "akolesnikov93 commented on 25 Mar 2012\nStrange error happened to 100% working code (I mean this code has been working brilliantly for a while, but now gives strange errors).\nUsing flask (0.7.2), flask-wtf, flask-uploads.\nMain code:\n@app.route('/task/new', methods=['GET', 'POST'])\ndef task():\nform = TaskForm(request.form)\nif request.method == 'POST' and form.validate():\nprint type(form.image) # <class 'flaskext.wtf.file.FileField'>\nprint type(form.image.file) # <type 'unicode'>\nprint type(form.image.data) # <type 'unicode'>\nprint form.image.file.filename # gives AttributeError: 'unicode' object has no attribute 'filename'\nSome part from forms.py:\nfrom flaskext.wtf import ....... FileField, file_allowed\nfrom flaskext.uploads import UploadSet, IMAGES\nimages = UploadSet(\"images\", IMAGES)\nclass TaskForm(Form):\nurl = TextField(u'URL', [validators.Length(min=4, max=400), validators.Required()])\ntitle = TextField(u'TITLE', [validators.Length(min=4, max=4000), validators.Required()])\ndescription = TextAreaField(u'Desc', [validators.Length(min=4, max=4000), validators.Required()])\nimage = FileField(u'Image', [file_allowed(images, \"Images only!\")])\nJinja 2 template:\n{{ form.hidden_tag() }} {{ help.render_field(form.url) }} # using rendering form macro, no problem there {{ help.render_field(form.title) }} {{ help.render_field(form.description) }} {{ help.render_field(form.image) }} Save\nIn Firefox submitting this form makes required fields (url, title, description) giving error \"This field is required. \" (Surely they are filled correctly).\nIn Chrome it's OK, but (from the main code):\nprint type(form.image) # <class 'flaskext.wtf.file.FileField'>\nprint type(form.image.file) # <type 'unicode'>\nprint type(form.image.data) # <type 'unicode'>\nprint form.image.file.filename # gives AttributeError: 'unicode' object has no attribute 'filename'\nEnctype is correct (it was working well, no changes were made).\nSo what can I do with this errors? It was working great, but now crashes. If needed, hosting is ep.io", "issue_status": "Closed", "issue_reporting_time": "2012-03-25T10:05:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1541": {"issue_url": "https://github.com/pallets/flask/issues/456", "issue_id": "#456", "issue_summary": "Add hooks for to override url_for behavior.", "issue_description": "Contributor\nrduplain commented on 20 Mar 2012\nAn app can inject_url_defaults but it cannot otherwise change the url_for behavior. I'd like for url_for to check the current_app to see if it provides its own url_for. If it does; use it. Otherwise proceed as currently implemented.\nAn alternative would be to register url-building handlers, but this would not fit well with multiple-app processes given that the current url_for is module-level.\nI'm writing a Flask extension to provide cross-application URL-building, and I'd like to add a custom url_for method to all Flask instances which have been passed through init_app.", "issue_status": "Closed", "issue_reporting_time": "2012-03-20T15:45:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1542": {"issue_url": "https://github.com/pallets/flask/issues/454", "issue_id": "#454", "issue_summary": "not clear how to set charset for static json", "issue_description": "siznax commented on 19 Mar 2012\ni can't get a charset in json responses with my Flask app\nrunning wsgi under apache.\nfor static json files outside of my Flask app with httpd.conf:\nAddDefaultCharset UTF-8\nAddType 'application/json; charset=UTF-8' .json\ni get the proper response:\nContent-Type:application/json; charset=utf-8\nbut in my Flask app i still get only:\nContent-Type:application/json\nis there a way to fix this without moving my json files outside\nof my app, or creating a view just for them? that would be silly,\nwouldn't it?", "issue_status": "Closed", "issue_reporting_time": "2012-03-19T15:38:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1543": {"issue_url": "https://github.com/pallets/flask/issues/452", "issue_id": "#452", "issue_summary": "\"Example code leaked\" on all but Python 2.7", "issue_description": "Contributor\nSimonSapin commented on 19 Mar 2012\nRunning tox, I get the following error for Python 2.5, 2.6 and PyPy, but not 2.7. I have no idea where the real problem is. Is it in CPython/PyPy rather than Flask?\nFAIL: test_memory_consumption (flask.testsuite.regression.MemoryTestCase)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/simon/dev/projects/flask/flask/testsuite/regression.py\", line 77, in test_memory_consumption\n    fire()\n  File \"/home/simon/dev/projects/flask/flask/testsuite/regression.py\", line 50, in __exit__\n    self.testcase.fail('Example code leaked')\nAssertionError: Example code leaked", "issue_status": "Closed", "issue_reporting_time": "2012-03-19T00:07:35Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1544": {"issue_url": "https://github.com/pallets/flask/issues/449", "issue_id": "#449", "issue_summary": "Recent Werkzeug required?", "issue_description": "Contributor\nSimonSapin commented on 19 Mar 2012\nRunning the test suite from git master in an old virtualenv with Werkzeug 0.6.2 installed, I got a failure went away when upgrading Werkzeug to 0.7 or the latest 0.8.3:\nFAIL: test_test_app_proper_environ (flask.testsuite.basic.BasicFunctionalityTestCase)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/simon/dev/projects/flask/flask/testsuite/basic.py\", line 820, in test_test_app_proper_environ\n    self.assert_equal(rv.status_code, 404)\n  File \"/home/simon/dev/projects/flask/flask/testsuite/__init__.py\", line 133, in assert_equal\n    return self.assertEqual(x, y)\nAssertionError: 200 != 404\nThe fix was hinted by the test having different code paths for Werkzeug 0.7 and 0.8. Flask\u2019s setup.py requires Werkzeug>=0.6.1, should that be changed to 0.7?", "issue_status": "Closed", "issue_reporting_time": "2012-03-18T23:21:13Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1545": {"issue_url": "https://github.com/pallets/flask/issues/448", "issue_id": "#448", "issue_summary": "No get_send_file_options on blueprints, test fail on master", "issue_description": "Contributor\nSimonSapin commented on 19 Mar 2012\nThe Flask.get_static_file_options method uses the SEND_FILE_MAX_AGE_DEFAULT config, but there is nothing of the sort for blueprints. Tests fail on the current git master because of that:\nFAIL: test_templates_and_static (flask.testsuite.blueprints.BlueprintTestCase)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/simon/dev/projects/flask/flask/testsuite/blueprints.py\", line 370, in test_templates_and_static\n    self.assert_equal(cc.max_age, expected_max_age)\n  File \"/home/simon/dev/projects/flask/flask/testsuite/__init__.py\", line 133, in assert_equal\n    return self.assertEqual(x, y)\nAssertionError: 43200 != 3600\nI\u2019d write a patch, but I\u2019m not sure how to access the app config from a blueprint method. Would using flask.current_app be appropriate?", "issue_status": "Closed", "issue_reporting_time": "2012-03-18T23:20:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1546": {"issue_url": "https://github.com/pallets/flask/issues/443", "issue_id": "#443", "issue_summary": "FR: A way to pass parameters to werkzeug's DebuggedApplication", "issue_description": "arefiev commented on 13 Mar 2012\nIt would be really nice to have a way to disable the LedgeIt button (so that I couldn't post tracebacks with potentially sensitive information to a public permanent storage with a single click or by accidentally hitting enter) or make it point to 255.255.255.255 without turning off the debugging mode entirely.\nPerhaps there can be a way to pass arguments to DebuggedApplication.init from werkzeug.debug (through **options of app.run or otherwise).", "issue_status": "Closed", "issue_reporting_time": "2012-03-13T13:06:40Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1547": {"issue_url": "https://github.com/pallets/flask/issues/434", "issue_id": "#434", "issue_summary": "sessions documentation (client side vs server side)", "issue_description": "Contributor\nwilsaj commented on 12 Mar 2012\nmore explicit docs on client side sessions vs server side sessions (and how to implement server-side sessions)\nrecent mailing list discussion: http://flask.pocoo.org/mailinglist/archive/2012/3/1/is-it-wise-for-flask-to-store-session-variables-on-the-client/\nunhappy feedback: http://feedback.flask.pocoo.org/message/223\n1", "issue_status": "Closed", "issue_reporting_time": "2012-03-12T15:49:59Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1548": {"issue_url": "https://github.com/pallets/flask/issues/432", "issue_id": "#432", "issue_summary": "Review flask-mongokit", "issue_description": "Contributor\njarus commented on 12 Mar 2012\nIn my eyes flask-mongokit fulfil all requirements for a aproved extension.\nPlease review.\nThanks\nPS: It is already listed under extensions.", "issue_status": "Closed", "issue_reporting_time": "2012-03-12T10:53:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1549": {"issue_url": "https://github.com/pallets/flask/issues/429", "issue_id": "#429", "issue_summary": "pdf version of docs has strange characters", "issue_description": "Contributor\nwilsaj commented on 12 Mar 2012\nunhappy comment: \"The pdf version of the doc contains strange ' chars, thus copy-pasting the code won't work. (It's ok with the online version though)\"\nlink: http://feedback.flask.pocoo.org/message/277", "issue_status": "Closed", "issue_reporting_time": "2012-03-12T03:48:52Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1550": {"issue_url": "https://github.com/pallets/flask/issues/426", "issue_id": "#426", "issue_summary": "better docs on message flashing and error handling in quickstart", "issue_description": "Contributor\nwilsaj commented on 12 Mar 2012\nunhappy user feedback: \"Message Flashing and Error Handling are not explained well in the Quickstart section.\"\nlink: http://feedback.flask.pocoo.org/message/282", "issue_status": "Closed", "issue_reporting_time": "2012-03-12T03:33:46Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1551": {"issue_url": "https://github.com/pallets/flask/issues/425", "issue_id": "#425", "issue_summary": "Partial content support", "issue_description": "Contributor\nwilsaj commented on 12 Mar 2012\nfrom feedback site: \"it doesn't support serving partial content (206), which seems to confuse browsers when serving them HTML5 media files even if it shouldn't.\"\nlink: http://feedback.flask.pocoo.org/message/288", "issue_status": "Closed", "issue_reporting_time": "2012-03-12T03:16:14Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1552": {"issue_url": "https://github.com/pallets/flask/issues/424", "issue_id": "#424", "issue_summary": "Allow entire blueprints to have lazy-loaded views despite using route decorators", "issue_description": "jamesonquinn commented on 9 Mar 2012\nFor me, a single blueprint naturally goes in a module folder, and all the views go in a views.py there. If that's how you do it, it makes sense to lazy-load one blueprint at a time. But in order to do that, you have to change your whole routing system, using add_url_rule() instead of @bp.route(). I've got a fix for this, but it takes some modification of flask itself (so that there's a way to later .remove() the temporary lazy-loader rule added by add_url_rule; and so that you can app.full_redispatch_request after the lazy-loading is done).\nIs this some horrid sin from the evil world of Django, or would my patches be welcome, or what?\nHere's my lazyblueprint.py for reference:\nfrom flask import Blueprint\n\nclass LazyBlueprint(Blueprint):\n    def __init__(self, name, import_name, static_folder=None,\n                 static_url_path=None, template_folder=None,\n                 url_prefix=None, subdomain=None, url_defaults=None):\n        super(LazyBlueprint, self).__init__(name, import_name, static_folder,\n                 static_url_path, template_folder,\n                 url_prefix, subdomain, url_defaults)\n        self.views = '.'.join([import_name,'views'])\n        print import_name, self.views\n        self.lazyrules = []\n        self.states = []\n        self.record(self.setuplazyload)\n\n    def setuplazyload(self, state):\n        self.lazyrules.append(state.add_url_rule('/<path:endpoint>', 'index', self.lazyloadfor(state)))\n        self.lazyrules.append(state.add_url_rule('/', 'index', self.lazyloadfor(state),\n                                                  defaults={'endpoint':''}))\n        self.states.append(state)\n\n    def lazyloadfor(self, state):\n        def innerlazyload(endpoint, **kw):\n            for rule in self.lazyrules:\n                rule.remove()\n            self.base_functions, self.deferred_functions = self.deferred_functions, []\n            __import__(self.views)\n\n            state.app.debug, debug = False, state.app.debug #don't trigger setupfunction warnings\n            for fixstate in self.states:\n                for deferred in self.deferred_functions:\n                    deferred(fixstate)\n            state.app.debug = debug\n            self.deferred_functions = self.base_functions + self.deferred_functions\n            return self.redispatch(state, endpoint, **kw)\n        return innerlazyload\n\n    def redispatch(self, state, endpoint, **kw):\n        return state.app.full_redispatch_request()\nHere's how you'd use it: first skyblue/init.py:\nfrom lazyblueprint import LazyBlueprint\n\nskyblue = LazyBlueprint('simple_page', __name__,\n                        template_folder='templates')\nthen skyblue/views.py:\nfrom skyblue import skyblue\n\n@skyblue.route('/')\ndef index():\n    return \"<html><body>sky:1...blue:2...<a href=\"hello\">Say hi!</a></body></html>\"\n\n@skyblue.route('/hello')\ndef hello():\n    return \"Hello skyblue!\"", "issue_status": "Closed", "issue_reporting_time": "2012-03-08T22:00:26Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1553": {"issue_url": "https://github.com/pallets/flask/issues/422", "issue_id": "#422", "issue_summary": "Allow specifying request_class on a per-blueprint basis", "issue_description": "Contributor\njfinkels commented on 9 Mar 2012\nSuppose we have a situation in which a user creates a blueprint for a ReSTful JSON API and another blueprint for something else. On a badly formatted request, the URLs in the API blueprint will be parsing JSON (using Request.json) and should return JSON responses (possibly using Request.on_json_loading_failed), but bad requests to URLs in the other blueprint should respond with regular old HTML responses.\nIn this case the user should be able to set a custom Flask.request_class for the API blueprint only which overrides the on_json_loading_failed method.", "issue_status": "Closed", "issue_reporting_time": "2012-03-08T21:40:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1554": {"issue_url": "https://github.com/pallets/flask/issues/421", "issue_id": "#421", "issue_summary": "pip/virtualenv flaskext import error", "issue_description": "davidovich commented on 9 Mar 2012\nFound this while searching for a solution: python-babel/flask-babel#19\nIn this issue, @ralfonso mentions that he is having trouble importing an editable babel package. I am having this problem too, but with another extension (flask_mongokit).\nfrom the python interpreter, if I import:\nfrom flaskext.mongokit import MongoKit\nI get an ImportError: No module named mongokit\nWhen I run my tests with nosetests, everything is fine. When I import from ipython, it works too. But running and importing from the plain interpreter fails.\nsys.path contains:\n~/.virtualenvs/myflask_project/src/flask-mongokit\nI am not sure what is going on, because I know I ran the application before, and since then I pip installed/uninstalled many packages (non-editable).\nNOTE\nAfter uninstalling flask-openid, the setup works again as intended. Is something wrong with flask-openid's setup? Or with the flask exthook functionality?", "issue_status": "Closed", "issue_reporting_time": "2012-03-08T18:57:03Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1555": {"issue_url": "https://github.com/pallets/flask/issues/419", "issue_id": "#419", "issue_summary": "request.mimetype always empty", "issue_description": "FND commented on 6 Mar 2012\nit appears that request.mimetype is always an empty string - which I assume is a bug:\n$ cat testcase.py\nfrom flask import Flask, request, make_response\n\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef root():\n    response = make_response(\"mimetype: %s\\n\\n%s\" % (repr(request.mimetype),\n            request.headers))\n    response.headers[\"Content-Type\"] = \"text/plain\"\n    return response\n\n\nif __name__ == \"__main__\":\n    app.run()\n\n$ python testcase.py &\n\n$ curl -X GET -H \"Accept: text/plain\" http://127.0.0.1:5000/\nmimetype: ''\n\nAccept: text/plain\n...\n\n$ curl -X GET -H \"Accept: application/json\" http://127.0.0.1:5000/\nmimetype: ''\n\nAccept: application/json\n...\n\n$ curl -X GET -H \\\n    \"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\" \\\n    http://127.0.0.1:5000/\nmimetype: ''\n\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\n...\nMy expectation was that request.mimetype be populated based on the Accept header - is this perhaps misguided?\n(I've traced this into Werkzeug, but kinda got lost along the way.)", "issue_status": "Closed", "issue_reporting_time": "2012-03-06T09:26:51Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1556": {"issue_url": "https://github.com/pallets/flask/issues/414", "issue_id": "#414", "issue_summary": "\"silent\" keyword argument only partially implemented by Config.from_envvar", "issue_description": "Contributor\ndave-shawley commented on 1 Mar 2012\nConfig.from_envvar raises an exception if the configuration variable exists and references a file that does not exist. The expectation is that the following test case should pass:\n    def test_config_from_envvar_missing(self):\n        env = os.environ\n        try:\n            os.environ = {'FOO_SETTINGS': 'missing.cfg'}\n            try:\n                app = flask.Flask(__name__)\n                app.config.from_envvar('FOO_SETTINGS')\n            except IOError:\n                pass\n            else:\n                self.fail('expected IOError')\n            self.assertFalse(not app.config.from_envvar('FOO_SETTINGS', silent=True))\n        finally:\n            os.environ = env", "issue_status": "Closed", "issue_reporting_time": "2012-03-01T13:53:31Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1557": {"issue_url": "https://github.com/pallets/flask/issues/410", "issue_id": "#410", "issue_summary": "Preserve request context in the face of new requests", "issue_description": "dplepage commented on 24 Feb 2012\nRequestContext.push pops and discards the top of the context stack if the top is preserved. Consequently, if you hit an exception in debug mode and drop into the debugger, but then make another request of the server, your debugger can no longer access the preserved context from the exception.\nThis is particularly a problem in Google Chrome, which follows each request with a request for \"/favicon.ico\". Any exception in debug mode will leave a preserved context on the stack, but will then immediately discard it when the favicon request arrives.", "issue_status": "Closed", "issue_reporting_time": "2012-02-24T16:02:53Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1558": {"issue_url": "https://github.com/pallets/flask/issues/407", "issue_id": "#407", "issue_summary": "flask does not run in bjoern server", "issue_description": "linychuo commented on 22 Feb 2012\nhi,when I test app on the bjoern server,console displays below errors\nTraceback (most recent call last):\nFile \"/usr/local/lib/python2.6/dist-packages/Flask-0.8-py2.6.egg/flask/app.py\", line 1506, in wsgi_app\nresponse = self.make_response(self.handle_exception(e))\nFile \"/usr/local/lib/python2.6/dist-packages/Flask-0.8-py2.6.egg/flask/app.py\", line 1504, in wsgi_app\nresponse = self.full_dispatch_request()\nFile \"/usr/local/lib/python2.6/dist-packages/Flask-0.8-py2.6.egg/flask/app.py\", line 1264, in full_dispatch_request\nrv = self.handle_user_exception(e)\nFile \"/usr/local/lib/python2.6/dist-packages/Flask-0.8-py2.6.egg/flask/app.py\", line 1262, in full_dispatch_request\nrv = self.dispatch_request()\nFile \"/usr/local/lib/python2.6/dist-packages/Flask-0.8-py2.6.egg/flask/app.py\", line 1248, in dispatch_request\nreturn self.view_functionsrule.endpoint\nFile \"/usr/local/lib/python2.6/dist-packages/Flask-0.8-py2.6.egg/flask/helpers.py\", line 623, in send_static_file\nreturn send_from_directory(self.static_folder, filename)\nFile \"/usr/local/lib/python2.6/dist-packages/Flask-0.8-py2.6.egg/flask/helpers.py\", line 473, in send_from_directory\nreturn send_file(filename, conditional=True, **options)\nFile \"/usr/local/lib/python2.6/dist-packages/Flask-0.8-py2.6.egg/flask/helpers.py\", line 385, in send_file\ndata = wrap_file(request.environ, file)\nFile \"/usr/local/lib/python2.6/dist-packages/Werkzeug-0.8.3-py2.6.egg/werkzeug/wsgi.py\", line 536, in wrap_file\nreturn environ.get('wsgi.file_wrapper', FileWrapper)(file, buffer_size)\nTypeError: FileWrapper() takes exactly 1 argument (2 given)", "issue_status": "Closed", "issue_reporting_time": "2012-02-22T14:37:02Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1559": {"issue_url": "https://github.com/pallets/flask/issues/405", "issue_id": "#405", "issue_summary": "Favicon request pops request context in debugger", "issue_description": "pgega commented on 21 Feb 2012\n127.0.0.1 - - [21/Feb/2012 12:36:49] \"GET / HTTP/1.1\" 500 -\nTraceback (most recent call last):\n  File \"/tmp/python2.7/lib/python2.7/site-packages/flask/app.py\", line 1518, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/tmp/python2.7/lib/python2.7/site-packages/flask/app.py\", line 1506, in wsgi_app\n    response = self.make_response(self.handle_exception(e))\n  File \"/tmp/python2.7/lib/python2.7/site-packages/flask/app.py\", line 1504, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/tmp/python2.7/lib/python2.7/site-packages/flask/app.py\", line 1264, in full_dispatch_\n    rv = self.handle_user_exception(e)\n  File \"/tmp/python2.7/lib/python2.7/site-packages/flask/app.py\", line 1262, in full_dispatch_\n    rv = self.dispatch_request()\n  File \"/tmp/python2.7/lib/python2.7/site-packages/flask/app.py\", line 1248, in dispatch_reque\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"/tmp/t.py\", line 8, in test\n    raise Exception\nException\n127.0.0.1 - - [21/Feb/2012 12:36:49] \"GET /?__debugger__=yes&cmd=resource&f=style.css HTTP/1.1\" 200 -\n127.0.0.1 - - [21/Feb/2012 12:36:49] \"GET /?__debugger__=yes&cmd=resource&f=jquery.js HTTP/1.1\" 200 -\n127.0.0.1 - - [21/Feb/2012 12:36:49] \"GET /?__debugger__=yes&cmd=resource&f=debugger.js HTTP/1.1\" 200 -\n127.0.0.1 - - [21/Feb/2012 12:36:49] \"GET /?__debugger__=yes&cmd=resource&f=console.png HTTP/1.1\" 200 -\n127.0.0.1 - - [21/Feb/2012 12:36:49] \"GET /?__debugger__=yes&cmd=resource&f=source.png HTTP/1.1\" 200 -\n127.0.0.1 - - [21/Feb/2012 12:36:49] \"GET /?__debugger__=yes&cmd=resource&f=ubuntu.ttf HTTP/1.1\" 200 -\n127.0.0.1 - - [21/Feb/2012 12:36:49] \"GET /favicon.ico HTTP/1.1\" 404 -\n127.0.0.1 - - [21/Feb/2012 12:37:03] \"GET /?__debugger__=yes&cmd=dump(request)&frm=13152656&s=EYoKchPnHhuZ75RuzgrG HTTP\n127.0.0.1 - - [21/Feb/2012 12:37:05] \"GET / HTTP/1.1\" 500 -\nTraceback (most recent call last):\n  File \"/tmp/python2.7/lib/python2.7/site-packages/flask/app.py\", line 1518, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/tmp/python2.7/lib/python2.7/site-packages/flask/app.py\", line 1506, in wsgi_app\n    response = self.make_response(self.handle_exception(e))\n  File \"/tmp/python2.7/lib/python2.7/site-packages/flask/app.py\", line 1504, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/tmp/python2.7/lib/python2.7/site-packages/flask/app.py\", line 1264, in full_dispatch_\n    rv = self.handle_user_exception(e)\n  File \"/tmp/python2.7/lib/python2.7/site-packages/flask/app.py\", line 1262, in full_dispatch_\n    rv = self.dispatch_request()\n  File \"/tmp/python2.7/lib/python2.7/site-packages/flask/app.py\", line 1248, in dispatch_reque\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"/tmp/t.py\", line 8, in test\n    raise Exception\nException\n127.0.0.1 - - [21/Feb/2012 12:37:05] \"GET /?__debugger__=yes&cmd=resource&f=style.css HTTP/1.1\" 200 -\n127.0.0.1 - - [21/Feb/2012 12:37:05] \"GET /?__debugger__=yes&cmd=resource&f=jquery.js HTTP/1.1\" 200 -\n127.0.0.1 - - [21/Feb/2012 12:37:05] \"GET /?__debugger__=yes&cmd=resource&f=debugger.js HTTP/1.1\" 200 -\n127.0.0.1 - - [21/Feb/2012 12:37:05] \"GET /?__debugger__=yes&cmd=resource&f=console.png HTTP/1.1\" 200 -\n127.0.0.1 - - [21/Feb/2012 12:37:05] \"GET /?__debugger__=yes&cmd=resource&f=source.png HTTP/1.1\" 200 -\n127.0.0.1 - - [21/Feb/2012 12:37:05] \"GET /?__debugger__=yes&cmd=resource&f=ubuntu.ttf HTTP/1.1\" 200 -\n127.0.0.1 - - [21/Feb/2012 12:37:05] \"GET /favicon.ico HTTP/1.1\" 404 -\n127.0.0.1 - - [21/Feb/2012 12:37:11] \"GET /?__debugger__=yes&cmd=dump(request)&frm=16515728&s=EYoKchPnHhuZ75RuzgrG HTTP\n127.0.0.1 - - [21/Feb/2012 12:37:47] \"GET /?__debugger__=yes&cmd=source&frm=16515728&s=EYoKchPnHhuZ75RuzgrG HTTP/1.1\" 2\n127.0.0.1 - - [21/Feb/2012 12:58:50] \"GET /?__debugger__=yes&cmd=source&frm=16515728&s=EYoKchPnHhuZ75RuzgrG HTTP/1.1\" 200 -\nChromium constantly requests favicon (http://code.google.com/p/chromium/issues/detail?id=39402) - hence the request context is cleared on every request to debugger.\nThis is not an issue on Firefox (as it caches 404 response).", "issue_status": "Closed", "issue_reporting_time": "2012-02-21T13:05:40Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1560": {"issue_url": "https://github.com/pallets/flask/issues/404", "issue_id": "#404", "issue_summary": "Convert the Blueprint doc example into a runnable example.", "issue_description": "Contributor\nrduplain commented on 15 Feb 2012\nDiscussion on #403 points out the need for a runnable example in the examples/ directory. Convert the example in the doc at http://flask.pocoo.org/docs/blueprints into working project in examples/. Write tests. Register the blueprint twice to demonstrate Blueprint's design.", "issue_status": "Closed", "issue_reporting_time": "2012-02-15T02:57:10Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1561": {"issue_url": "https://github.com/pallets/flask/issues/403", "issue_id": "#403", "issue_summary": "Blueprints Example Broken in Docs", "issue_description": "espeed commented on 15 Feb 2012\nThe Blueprints example on http://flask.pocoo.org/docs/blueprints is broken because it doesn't include the templates_folder param, which evidently is required now because templates_folder defaults to None (https://github.com/mitsuhiko/flask/blob/master/flask/blueprints.py).\nSee http://librelist.com/browser//flask/2011/9/17/templates-for-blueprints/#34dea3bacebdd468a670709228abb067\nJames", "issue_status": "Closed", "issue_reporting_time": "2012-02-14T23:05:18Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1562": {"issue_url": "https://github.com/pallets/flask/issues/402", "issue_id": "#402", "issue_summary": "Better error/debugging page", "issue_description": "honzajavorek commented on 9 Feb 2012\nError page is fine, but it could be better.\nFor example see this: http://translate.google.com/translate?hl=cs&sl=cs&tl=en&u=http%3A%2F%2Fdoc.nette.org%2Fcs%2Fdebugging (I am sorry, the page doesn't have an English version, but I think the point is understandable via Google Translator)\nExample is here: http://examples.nette.org/ndebug/nette-exception.html\nPHP code: https://github.com/nette/nette/tree/master/Nette/Diagnostics\nMoreover, it's plain HTML/JavaScript page, so framework can log right these into some defined place. It's very handy to run app on production -- when something fails, you can go to your log directory and see exactly what happened in the same way as it happened on your development server at localhost. You just open the saved HTML page with exception described and you can clearly see what happened. Of course, now you can e-mail the exceptions, but this dynamic plain HTML is so much more handy :-) E-mails are more like an alert, but they don't help much, even if they contain whole traceback.\nI don't say we should have exactly this in Flask, I want to just suggest we could improve the page, we could learn something.", "issue_status": "Closed", "issue_reporting_time": "2012-02-09T16:09:26Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1563": {"issue_url": "https://github.com/pallets/flask/issues/401", "issue_id": "#401", "issue_summary": "Run example application tests in Flask test runner.", "issue_description": "Contributor\nrduplain commented on 8 Feb 2012\nLet's be sure to release Flask with fully functional example application tests. Inspired by #400.", "issue_status": "Closed", "issue_reporting_time": "2012-02-07T18:49:40Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1564": {"issue_url": "https://github.com/pallets/flask/issues/400", "issue_id": "#400", "issue_summary": "code errors at http://flask.pocoo.org/docs/testing/#testing", "issue_description": "arohacs commented on 8 Feb 2012\nThe flaskr_tests.py app as constructed by the code on the page will fail all 3 tests. I copied the source file at https://github.com/mitsuhiko/flask/blob/master/examples/flaskr/flaskr_tests.py and it runs all tests successfully. A vimdiff showed the following issues between the files (I hope the formatting isn't mangled too badly - if so, it's not hard to copy, paste, and do another vimdiff):\nsource file from github: code from tutorial:\nhttps://github.com/mitsuhiko/flask/blob/ http://flask.pocoo.org/docs/testing/#testing\nmaster/examples/flaskr/flaskr_tests.py\ndef tearDown(self): def tearDown(self):\n\"\"\"Get rid of the database again after each test\nos.unlink(flaskr.app.config['DATABASE'])                             os.unlink(flaskr.DATABASE) \nos.unlink(flaskr.app.config['DATABASE'])                             os.unlink(flaskr.DATABASE)  \ndef test_login_logout(self): def test_login_logout(self):\n\"\"\"Make sure login and logout works\"\"\"\nrv = self.login(flaskr.app.config['USERNAME'], rv = self.login('admin', 'default')\nflaskr.app.config['PASSWORD'])\nrv = self.login(flaskr.app.config['USERNAME'] +                   rv = self.login('adminx', 'default')            \n                      flaskr.app.config['PASSWORD'])             \n\nrv = self.login(flaskr.app.config['USERNAME'],                     rv = self.login('admin', 'defaultx')            \n                      flaskr.app.config['PASSWORD'] +         \ndef test_messages(self): def test_messages(self):\n\"\"\"Test that messages work\"\"\" self.login('admin', 'default')\nself.login(flaskr.app.config['USERNAME'],\nflaskr.app.config['PASSWORD'])", "issue_status": "Closed", "issue_reporting_time": "2012-02-07T18:34:24Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1565": {"issue_url": "https://github.com/pallets/flask/issues/399", "issue_id": "#399", "issue_summary": "Collab me!", "issue_description": "Contributor\nkennethreitz commented on 7 Feb 2012\n@mitsuhiko, I'd like to spend some significant time improving some parts of the documentation. You should add me as a collab on the repo. @rduplain agrees :)", "issue_status": "Closed", "issue_reporting_time": "2012-02-07T02:30:57Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1566": {"issue_url": "https://github.com/pallets/flask/issues/397", "issue_id": "#397", "issue_summary": "Add a \"ignore_mimetype\" parameter to request.json", "issue_description": "adamjernst commented on 1 Feb 2012\nIt would be nice to have a lightweight way to ignore the request's mime type and parse JSON regardless. My suggestion is an \"ignore_mimetype\" parameter that defaults to False.\nI love Flask, thanks for an excellent framework.", "issue_status": "Closed", "issue_reporting_time": "2012-02-01T17:59:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1567": {"issue_url": "https://github.com/pallets/flask/issues/391", "issue_id": "#391", "issue_summary": "Review Flask-Cake extension", "issue_description": "rsenk330 commented on 28 Jan 2012\nThe project is located on Github here and the documentation is located on Read The Docs. I know I need unit tests yet to have it listed as an approved extension (will be adding those soon), but any other feedback and a listing as a non-approved extension (for now) would be appreciated.", "issue_status": "Closed", "issue_reporting_time": "2012-01-28T01:29:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1568": {"issue_url": "https://github.com/pallets/flask/issues/389", "issue_id": "#389", "issue_summary": "send_from_directory() filename", "issue_description": "shuhaowu commented on 24 Jan 2012\nFrom my experience, send_from_directory() sends a file but it's downloaded as the last part of the url as the browser see it.\nAnyway to force the browser to download it as some other filename? I don't see the option, or know if it's even a flask thing or I have to do something else.", "issue_status": "Closed", "issue_reporting_time": "2012-01-24T17:22:41Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1569": {"issue_url": "https://github.com/pallets/flask/issues/388", "issue_id": "#388", "issue_summary": "Flask documentation in ePub/Mobi format as well", "issue_description": "fmaida commented on 24 Jan 2012\nIn the future please consider to publish the flask documentation not only in PDF but also in formats easily readable by an ebook reader like Kindle or Nook. At least for me it's much easier to read longer documentation on a e-ink device rather than a monitor, and PDF are rendered quite awfully on my Kindle 3g.\nI see that there's a builder for Sphinx that permits to build epub files along with their HTML versions here: http://sphinx.pocoo.org/builders.html#module-sphinx.builders.epub\nePub would be a easier format to convert, through Calibre we could have a 1:1 conversion in MOBI format too.\nThank you", "issue_status": "Closed", "issue_reporting_time": "2012-01-24T10:10:59Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1570": {"issue_url": "https://github.com/pallets/flask/issues/386", "issue_id": "#386", "issue_summary": "Gunicorn and debugging", "issue_description": "mafrosis commented on 22 Jan 2012\nHi, can I get your opinion on the following SO post? This may well be as-designed, and if so, the SO post should reflect that for others in the future.\nhttp://stackoverflow.com/questions/8950674/debugging-a-flask-app-running-in-gunicorn\nThanks", "issue_status": "Closed", "issue_reporting_time": "2012-01-22T05:06:20Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1571": {"issue_url": "https://github.com/pallets/flask/issues/385", "issue_id": "#385", "issue_summary": "API change proposal : inconsistency for getting parameters in a request", "issue_description": "jpcaruana commented on 19 Jan 2012\nHi,\nI come from a java background and I love using flask. But there is some itch with flask GET/POST API (production code and test code) I would like to discuss about.\nIn a java servlet, it doesn't matter what http method you're using (GET, POST, PUT), you always do this to get a parameter from input :\nString username = request.getParameter(\"username\");\nString password = request.getParameter(\"password\");\nIn flask, this is inconsistent :\nfor a POST, flasks \"assumes\" data come from a form (wich is not mandatory, you can submit data without a form) :\nusername = request.form['username']\nTo me, in terms of API, form is wrong. But worse, if you do a GET, you can't use form, you'll have to user args :\nGET :\nusername = request.args['username']\nI would prefer to see, in POST/GET/PUT/whatever (I'm using parameter, as in java HttpServlet API) :\nusername = request.parameter['username']\nAs Im doing TDD, I observed the same inconsiancy in writing unit tests :\nto test a POST, you can submit a dict (which is great and very pythonic) :\napp.test_client().post('/login', data=dict(\n        username=username,\n        password=))\nto test a GET, you can't pass a dict, you have to reconstruct the URL (which I don't find very pythonic) :\napp.test_client().get('/agent/login?username=%s&password=%s' % (username, password))\nI would love to be able to write this for a GET too :\napp.test_client().get('/login', data=dict(\n        username=username,\n        password=))\nAnyway, what do you think ?\nThanks for your feedback.", "issue_status": "Closed", "issue_reporting_time": "2012-01-19T11:30:33Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1572": {"issue_url": "https://github.com/pallets/flask/issues/382", "issue_id": "#382", "issue_summary": "Set TRAP_BAD_REQUEST_ERRORS to True as the default when debugging is enabled", "issue_description": "catlee commented on 17 Jan 2012\nWhen debugging an application, it's surprising to get a simple \"400 Bad Request\" when accessing a form parameter that doesn't exist instead of a full traceback. I always forget that I also need to set TRAP_BAD_REQUEST_ERRORS.\nIs there a reason why this isn't set by default when debugging is enabled?", "issue_status": "Closed", "issue_reporting_time": "2012-01-17T15:01:37Z", "fixed_by": "#2348", "pull_request_summary": "make debugging bad key errors easier", "pull_request_description": "Member\ndavidism commented on 30 May 2017 \u2022\nedited\nTRAP_BAD_REQUEST_ERRORS is enabled by default in debug mode\nBadRequestKeyError has the key in the description in debug mode\nIf app.debug is true but we're not running in the interactive debugger, this now raises a 500 error (the traceback in the console has the key error though). Can get the old behavior by setting TRAP_BAD_REQUEST_ERRORS = False.\nThis error is one of the most recurring questions about Flask on Stack Overflow. Making the error visible will hopefully answer a lot of questions before they're asked.\ncloses #382", "pull_request_status": "Merged", "issue_fixed_time": "2017-05-30T02:53:19Z", "files_changed": [["6", "CHANGES"], ["5", "docs/config.rst"], ["31", "flask/app.py"], ["7", "tests/test_basic.py"], ["2", "tests/test_helpers.py"]]}, "1573": {"issue_url": "https://github.com/pallets/flask/issues/381", "issue_id": "#381", "issue_summary": "Consider debug=True in test client.", "issue_description": "Contributor\nrduplain commented on 17 Jan 2012\nIf the test client could set debug=True, it would allow testing with assertions in view functions hit by the test client.\nWhen updating tests for pull request 336, I noticed the testing pattern of making assertions inside an inner view function -- while clever -- must be done carefully. Because the test client does not set debug=True, the exceptions caused by the assertions were swallowed (which could have resulted in silently failing tests). With debug=False in the test client, you have to verify the status code in the test client to ensure all assertions pass, which the test case now does.\nhttp://github.com/mitsuhiko/flask/blob/master/flask/testsuite/basic.py#L363\nHere's the pull request for reference:\nhttp://github.com/mitsuhiko/flask/pull/336", "issue_status": "Closed", "issue_reporting_time": "2012-01-17T04:25:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1574": {"issue_url": "https://github.com/pallets/flask/issues/380", "issue_id": "#380", "issue_summary": "Cannot run flask on app engine", "issue_description": "aksonov commented on 16 Jan 2012\nFile \"/Users/aksonov/PycharmProjects/issuengine/flask/app.py\", line 289, in init\ninstance_path = self.auto_find_instance_path()\nFile \"/Users/aksonov/PycharmProjects/issuengine/flask/app.py\", line 577, in auto_find_instance_path\nprefix, package_path = find_package(self.import_name)\nFile \"/Users/aksonov/PycharmProjects/issuengine/flask/helpers.py\", line 532, in find_package\nfilename = loader.archive\nAttributeError: 'HardenedModulesHook' object has no attribute 'archive'\nINFO 2012-01-16 12:52:07,534 dev_appserver.py:2832] \"GET / HTTP/1.1\" 500", "issue_status": "Closed", "issue_reporting_time": "2012-01-16T12:53:34Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1575": {"issue_url": "https://github.com/pallets/flask/issues/378", "issue_id": "#378", "issue_summary": "jsonify should set the charset", "issue_description": "lexs commented on 12 Jan 2012\nI just read this blog post: http://wekeroad.com/2011/10/24/a-fun-little-json-murder-mystery-with-ie9/\nIt mentions that IE9 requires json responses to have a proper charset set for it to parse it correctly. I looked at what my API currently does (which uses jsonify) and it does not set the charset at all.\nI might be missing something but I think that it should set it.", "issue_status": "Closed", "issue_reporting_time": "2012-01-11T18:35:06Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1576": {"issue_url": "https://github.com/pallets/flask/issues/377", "issue_id": "#377", "issue_summary": "little documentation error", "issue_description": "trololo88 commented on 11 Jan 2012\nhttp://flask.pocoo.org/docs/api/#flask.render_template_string\nParameters should be \"source\" and \"context\", now there is \"template_name\" and \"context\"", "issue_status": "Closed", "issue_reporting_time": "2012-01-11T10:48:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1577": {"issue_url": "https://github.com/pallets/flask/issues/376", "issue_id": "#376", "issue_summary": "Blueprints overwrite their templates_folder", "issue_description": "tomekwojcik commented on 10 Jan 2012\nI have an app with two blueprints - admin and default. Both are stored in separate packages - app.modules.admin and app.modules.default. Both have separate templates and static folders. default is registered first (w/o url_prefix), admin is registered second (with url_prefix='admin'). Now, when rendering a template in an admin view function Flask searches for the file first in default/templates and then in admin/templates, so if I have file home/index.html in both blueprints (which is my case) Flask loads the file from first registered blueprint (default in my case), totally ignoring paths. The same goes for templates loaded with extends statement.", "issue_status": "Closed", "issue_reporting_time": "2012-01-10T14:08:43Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1578": {"issue_url": "https://github.com/pallets/flask/issues/374", "issue_id": "#374", "issue_summary": "error in view.rst", "issue_description": "anh commented on 4 Jan 2012\nview.rst:\napp.add_url_rule('%s<%s:%s>' % (url, pk, pk_type), view_func=view_func,\nmethods=['GET', 'PUT', 'DELETE'])\nIt should be:\napp.add_url_rule('%s<%s:%s>' % (url, pk_type, pk), view_func=view_func,\nmethods=['GET', 'PUT', 'DELETE'])", "issue_status": "Closed", "issue_reporting_time": "2012-01-04T04:33:54Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1579": {"issue_url": "https://github.com/pallets/flask/issues/373", "issue_id": "#373", "issue_summary": "Review Flask-PyMongo for approval", "issue_description": "dcrosta commented on 1 Jan 2012\n@rduplain has already listed it at http://flask.pocoo.org/extensions/#Flask-PyMongo\nI believe it meets the criteria for approval, save that it could use more tests for the helper functions.", "issue_status": "Closed", "issue_reporting_time": "2012-01-01T01:36:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1580": {"issue_url": "https://github.com/pallets/flask/issues/372", "issue_id": "#372", "issue_summary": "Document Creole syntax for snippets comments", "issue_description": "Contributor\nSimonSapin commented on 31 Dec 2011\nThe \u201cnew snippet\u201d has a nice explanation for the Creole dialect that is used:\nhttp://flask.pocoo.org/snippets/new/\nBut there is no such thing when adding a new snippet comment. A link to the new snippet page or the creole website in the comment form should be enough.\nThis is a follow-up on a mailing-list question: http://flask.pocoo.org/mailinglist/archive/2011/12/31/how-do-i-add-code-markers-to-snippets/", "issue_status": "Closed", "issue_reporting_time": "2011-12-31T03:54:08Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1581": {"issue_url": "https://github.com/pallets/flask/issues/371", "issue_id": "#371", "issue_summary": "Quickstart: Unique URLs / Redirection Behaviour", "issue_description": "BruceEckel commented on 27 Dec 2011\n(And in general in the quickstart) Instead of using \"pass\" which causes the code to break when pasted into hello.py:\n@app.route('/projects/')\ndef projects():\npass\n@app.route('/about')\ndef about():\npass\nIt would be nice if the code did enough so that the first-time user isn't faced with a non-working system. Even something as simple as:\n@app.route('/projects/')\ndef projects():\nreturn \"projects\"\n@app.route('/about')\ndef about():\nreturn \"about\"", "issue_status": "Closed", "issue_reporting_time": "2011-12-27T17:53:41Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1582": {"issue_url": "https://github.com/pallets/flask/issues/370", "issue_id": "#370", "issue_summary": "Quickstart: Variable Rules Section", "issue_description": "BruceEckel commented on 27 Dec 2011\nIf you paste the code from \"Variable Rules\" into your test app (hello.py), it generates error messages when you go to those URLs. That code needs some fleshing out so that it doesn't break; for example:\n@app.route('/user/')\ndef show_user_profile(username):\n# show the user profile for that user\nreturn \"foo %s\" % username\n@app.route('/post/int:post_id')\ndef show_post(post_id):\n# show the post with the given id, the id is an integer\nreturn \"bar %d\" % post_id", "issue_status": "Closed", "issue_reporting_time": "2011-12-27T17:47:37Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1583": {"issue_url": "https://github.com/pallets/flask/issues/368", "issue_id": "#368", "issue_summary": "unused code in app.logger ?", "issue_description": "bayazee commented on 26 Dec 2011\nHi\nIt's seem that these lines are unused and can be remve.\nhttps://github.com/mitsuhiko/flask/blob/master/flask/app.py#L518\n    if self._logger and self._logger.name == self.logger_name:\n        return self._logger", "issue_status": "Closed", "issue_reporting_time": "2011-12-26T08:17:25Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1584": {"issue_url": "https://github.com/pallets/flask/issues/367", "issue_id": "#367", "issue_summary": "support for HTTP/1.1 Transfer-Encoding: chunked", "issue_description": "Contributor\nkislyuk commented on 23 Dec 2011\nFlask seems to choke on chunked encoded requests (I've only tried with Content-Type: application/json). This results in an error when parsing the request body (and being able to deal with chunked encoding is a requirement of HTTP 1.1).", "issue_status": "Closed", "issue_reporting_time": "2011-12-22T23:34:43Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1585": {"issue_url": "https://github.com/pallets/flask/issues/364", "issue_id": "#364", "issue_summary": "Invalid name of converter in API docs", "issue_description": "insmo commented on 19 Dec 2011\nThe API docs of Flask state that there are 4 builtin converters, unicode, int, float and path. While the werkzeug docs state that the unicode converter's name is actually string. Either change werkzeug name of converter or correct the flask docs.\nhttp://werkzeug.pocoo.org/docs/routing/#werkzeug.routing.UnicodeConverter\nhttp://flask.pocoo.org/docs/api/#url-route-registrations\n1", "issue_status": "Closed", "issue_reporting_time": "2011-12-19T12:54:17Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1586": {"issue_url": "https://github.com/pallets/flask/issues/363", "issue_id": "#363", "issue_summary": "Review Flask-Bcrypt for approval", "issue_description": "Contributor\nmaxcountryman commented on 15 Dec 2011\nAlthough Flask-Bcrypt is already in the extension registry it has been recently updated to include proper documentation and I believe should be listed as an approved extension.\nThanks!", "issue_status": "Closed", "issue_reporting_time": "2011-12-15T12:40:21Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1587": {"issue_url": "https://github.com/pallets/flask/issues/362", "issue_id": "#362", "issue_summary": "Flask HTML form arrays are mangled", "issue_description": "devdave commented on 13 Dec 2011\nGiven a reference script like https://gist.github.com/1472832\nI was expecting the form input named \"drint_type\" to be a list of multiple values, but it always == the first checkbox selected value. I assume this is a problem with the lower level dependencies but wasn't sure.", "issue_status": "Closed", "issue_reporting_time": "2011-12-13T16:41:13Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1588": {"issue_url": "https://github.com/pallets/flask/issues/361", "issue_id": "#361", "issue_summary": "send_file uses 2x file's size in memory with conditional = True", "issue_description": "qxcv commented on 13 Dec 2011\nhttps://github.com/mitsuhiko/flask/blob/master/flask/helpers.py#L423\nConditional responses (Response.make_conditional()) cause the iterator to be converted to a list (which stores the contents of the file in memory) and then ''.join() is used on the list (!!) which stores the contents of the file in memory AGAIN so Flask can use len() to determine content length. So for a short time it uses twice the item size in memory until the list conversion function returns the string from ''.join() and the original list is destroyed.\nThis isn't mentioned anywhere in the Flask docs, and can be avoided by calculating the file size and setting the Content-Length header using os.path.getsize() or fp.seek() and fp.tell() before rv.make_conditional is called.", "issue_status": "Closed", "issue_reporting_time": "2011-12-13T00:49:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1589": {"issue_url": "https://github.com/pallets/flask/issues/360", "issue_id": "#360", "issue_summary": "Review Flask-SeaSurf extension", "issue_description": "Contributor\nmaxcountryman commented on 12 Dec 2011\nProject is located here: https://github.com/maxcountryman/flask-seasurf\nIncludes tests.\nDocumentation is located here: http://packages.python.org/Flask-SeaSurf/", "issue_status": "Closed", "issue_reporting_time": "2011-12-12T15:37:18Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1590": {"issue_url": "https://github.com/pallets/flask/issues/358", "issue_id": "#358", "issue_summary": "More examples/documentation for pluggable view decorators", "issue_description": "Contributor\nplaes commented on 8 Dec 2011\nCurrent docs for pluggable view (Flask.views.MethodView and Flask.views.View) decorators are a big vague - although it is mentioned that one cannot use regular view decorators, it doesn't actually give a working example how to write that decorator.\nI'm proposing to use a simple active user check instead of current incomplete rate_limited example...", "issue_status": "Closed", "issue_reporting_time": "2011-12-08T14:58:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1591": {"issue_url": "https://github.com/pallets/flask/issues/357", "issue_id": "#357", "issue_summary": "flask_autoindex fails with flask 0.8.0 but works with 0.7.0", "issue_description": "davidthewatson commented on 6 Dec 2011\nI was having trouble with flask_autoindex which I documented here:\ngeneral03/flask-autoindex#1\nThis was installed with:\nvirtualenv --no-site-packages env\nsource env/bin/activate\npip install flask_autoindex\nHere's the traceback\nTraceback (most recent call last):\nFile \"/Users/davidthewatson/github/flongo/env/lib/python2.7/site-packages/flask/app.py\", line 1518, in call\nreturn self.wsgi_app(environ, start_response)\nFile \"/Users/davidthewatson/github/flongo/env/lib/python2.7/site-packages/flask/app.py\", line 1506, in wsgi_app\nresponse = self.make_response(self.handle_exception(e))\nFile \"/Users/davidthewatson/github/flongo/env/lib/python2.7/site-packages/flask/app.py\", line 1504, in wsgi_app\nresponse = self.full_dispatch_request()\nFile \"/Users/davidthewatson/github/flongo/env/lib/python2.7/site-packages/flask/app.py\", line 1264, in full_dispatch_request\nrv = self.handle_user_exception(e)\nFile \"/Users/davidthewatson/github/flongo/env/lib/python2.7/site-packages/flask/app.py\", line 1262, in full_dispatch_request\nrv = self.dispatch_request()\nFile \"/Users/davidthewatson/github/flongo/env/lib/python2.7/site-packages/flask/app.py\", line 1248, in dispatch_request\nreturn self.view_functionsrule.endpoint\nFile \"/Users/davidthewatson/github/flongo/flaskengine/views.py\", line 31, in archive\nidx = AutoIndex(app, browse_root=curdir)\nFile \"/Users/davidthewatson/github/flongo/env/lib/python2.7/site-packages/flaskext/autoindex/init.py\", line 203, in init\n*_silk_options)\nFile \"/Users/davidthewatson/github/flongo/env/lib/python2.7/site-packages/flaskext/autoindex/init.py\", line 72, in init\nself.silk = Silk(self.base, *_silk_options)\nFile \"/Users/davidthewatson/github/flongo/env/lib/python2.7/site-packages/flaskext/silk/init.py\", line 40, in init\nself.silkicon = self.base.route(rule)(self.silkicon)\nFile \"/Users/davidthewatson/github/flongo/env/lib/python2.7/site-packages/flask/app.py\", line 923, in decorator\nself.add_url_rule(rule, endpoint, f, **options)\nFile \"/Users/davidthewatson/github/flongo/env/lib/python2.7/site-packages/flask/app.py\", line 56, in wrapper_func\nraise AssertionError('A setup function was called after the '\nAssertionError: A setup function was called after the first request was handled. This usually indicates a bug in the application where a module was not imported and decorators or other functionality was called too late.\nTo fix this make sure to import all your view modules, database models and everything related at a central place before the application starts serving requests.\nThe relevant code is:\nfrom flaskext.autoindex import AutoIndex\n@app.route('/archive/', methods=['GET'])\ndef archive(path='./archive'):\nidx = AutoIndex(app, browse_root=curdir)\nreturn idx.render_autoindex(path)\nHowever, this works fine when I pip uninstall flask and pip install -I flask==0.7.0. I'm not sure where the bug is, but I thought I'd mention it in case I did something wrong or it can be resolved such that the default pip installed version will work in virtualenv.\nThanks.", "issue_status": "Closed", "issue_reporting_time": "2011-12-06T03:33:16Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1592": {"issue_url": "https://github.com/pallets/flask/issues/356", "issue_id": "#356", "issue_summary": "FTBFS with python-werkzeug-0.6.2-1.el6.noarch", "issue_description": "mcepl commented on 29 Nov 2011\nSee https://gist.github.com/1402052 for build log, but just looking at flask/testsuite/basic.py line 722, it seems to me that you don't really expect using 'Werkzeug>=0.6.1' which is what you require in setup.py.\nSo, what's correct ... setup.py or the testsuite?\nThanks", "issue_status": "Closed", "issue_reporting_time": "2011-11-28T21:07:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1593": {"issue_url": "https://github.com/pallets/flask/issues/354", "issue_id": "#354", "issue_summary": "Update documentation of url_for to indicate more clearly that substitution token values are required (maybe an example?)", "issue_description": "nathan-rice commented on 24 Nov 2011\nUpon initially reading the url_for function documentation I assumed that if I provided an endpoint matched to a URL rule with substitution tokens without specifying substitution values, it would return the base rule. Having debugged my problem and re-read the url_for documentation closely, I realized that you tried to express this, it just isn't very 'tard friendly.", "issue_status": "Closed", "issue_reporting_time": "2011-11-23T19:30:02Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1594": {"issue_url": "https://github.com/pallets/flask/issues/353", "issue_id": "#353", "issue_summary": "MethodViews for API example is missing parameter", "issue_description": "toddself commented on 21 Nov 2011\nOn http://flask.pocoo.org/docs/views/#method-views-for-apis\nAt the end of the page in the very last code example you have:\ndef register_api(view, endpoint, url, pk='id', pk_type='int'):\n    view_func = view.as_view(endpoint)\n    app.add_url_rule(url, defaults={pk: None},\n                     view_func=view_func, methods=['GET', 'POST'])\n    app.add_url_rule('%s<%s:%s>' % (url, pk), view_func=view_func,\n                     methods=['GET', 'PUT', 'DELETE'])\n\nregister_api(UserAPI, 'user_api', '/users/', pk='user_id')\nThe last app.add_url_rule has three substitutions in the string, but the tuple only has two items.\nIt should read:\n    app.add_url_rule('%s<%s:%s>' % (url, pk_type, pk), view_func=view_func,\n                     methods=['GET', 'PUT', 'DELETE'])", "issue_status": "Closed", "issue_reporting_time": "2011-11-21T15:14:32Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1595": {"issue_url": "https://github.com/pallets/flask/issues/352", "issue_id": "#352", "issue_summary": "Review flask-lettuce extension", "issue_description": "italomaia commented on 21 Nov 2011\nhttps://github.com/dqminh/flask-lettuce\nExtension has docs, example usage and tests.", "issue_status": "Closed", "issue_reporting_time": "2011-11-21T02:14:12Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1596": {"issue_url": "https://github.com/pallets/flask/issues/351", "issue_id": "#351", "issue_summary": "session is saved before @after_request callbacks", "issue_description": "matejcik commented on 20 Nov 2011\nThis makes it impossible to add data to session in said callbacks. For example, the following code does not work, because session is never stored:\n@app.before_request\ndef before_request():\n    u = session.get('user')\n    g.user = u and db.User(u) or None\n\n@app.after_request\ndef after_request(response):\n    session['user'] = g.user and dict(g.user) or None\n    return response", "issue_status": "Closed", "issue_reporting_time": "2011-11-20T00:23:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1597": {"issue_url": "https://github.com/pallets/flask/issues/350", "issue_id": "#350", "issue_summary": "Endless redirect loop in flask 0.7.2", "issue_description": "jssebastian commented on 18 Nov 2011\nNot sure if this is already fixed in the latest release. Seems related to this discussion:\nhttp://librelist.com/browser//flask/2011/6/29/psa-routing-redirect-behavior/\n..but this was apparently fixed in 0.7.1.\nI am getting an endless redirect loop when doing the following:\n@app.route('/loop', defaults={\"a\":\"Hello\", \"b\":\"World\"})\n@app.route('/loop.<b>', defaults={\"a\":\"Hello\"})\n@app.route('/loop/<a>', defaults={\"b\":\"World\"})\n@app.route('/loop/<a>.<b>')\ndef endless_loop(a, b):\n    return \"%s %s\" % (a, b)\n(In case you are interested, in my application b is a file extension that specifies my API's output format)\nThis is what happens when you visit /loop:\n127.0.0.1 - - [16/Nov/2011 17:16:35] \"GET /loop HTTP/1.1\" 301 -\n127.0.0.1 - - [16/Nov/2011 17:16:35] \"GET /loop.World HTTP/1.1\" 301 -\n127.0.0.1 - - [16/Nov/2011 17:16:35] \"GET /loop HTTP/1.1\" 301 -\n127.0.0.1 - - [16/Nov/2011 17:16:35] \"GET /loop.World HTTP/1.1\" 301 -\nA good workaround for my use case was to simply disable the redirection for defaults:\napp.url_map.redirect_defaults = False\nThis is ok in my case since I am developing an API that does not need or want to be indexed by search engines, but for normal websites it would be suboptimal.\nThe smallest test case I could produce that triggers the bug is the following:\n@app.route('/loop2', defaults={\"a\":\"Hello\", \"b\":\"World\"}) \n@app.route('/loop2/<a>', defaults={\"b\":\"World\"})\ndef endless_loop2(a, b):\n    return \"%s %s\" % (a, b)\n127.0.0.1 - - [16/Nov/2011 17:15:31] \"GET /loop2 HTTP/1.1\" 301 -\n127.0.0.1 - - [16/Nov/2011 17:15:31] \"GET /loop2/Hello HTTP/1.1\" 301 -\n127.0.0.1 - - [16/Nov/2011 17:15:31] \"GET /loop2 HTTP/1.1\" 301 -\n127.0.0.1 - - [16/Nov/2011 17:15:31] \"GET /loop2/Hello HTTP/1.1\" 301 -\nI am running the packaged version of flask from ubuntu oneiric:\npython-flask 0.7.2-1\npython-werkzeug 0.6.2-1", "issue_status": "Closed", "issue_reporting_time": "2011-11-17T19:02:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1598": {"issue_url": "https://github.com/pallets/flask/issues/348", "issue_id": "#348", "issue_summary": "Static files only work for blueprints registered with url_prefix", "issue_description": "deshipu commented on 8 Nov 2011\nThe option static_folder for blueprints only works correctly when the blueprint has been registered with a url_prefix, otherwise the application's default static URL takes precedence.\nThere is nothing wrong in that behavior, but it is not documented. It would be nice to have that fact mentioned at http://flask.pocoo.org/docs/blueprints/#static-files and/or http://flask.pocoo.org/docs/api/#blueprint-objects", "issue_status": "Closed", "issue_reporting_time": "2011-11-08T17:50:06Z", "fixed_by": "#2686", "pull_request_summary": "document blueprint static folder without prefix", "pull_request_description": "Member\ndavidism commented on 9 Apr 2018\ncloses #348\nDocuments that blueprint static URL is only accessible if the blueprint has a prefix, otherwise the application static URL takes precedence.", "pull_request_status": "Merged", "issue_fixed_time": "2018-04-09T08:27:26Z", "files_changed": [["26", "docs/blueprints.rst"]]}, "1599": {"issue_url": "https://github.com/pallets/flask/issues/344", "issue_id": "#344", "issue_summary": "flask memory consumption", "issue_description": "unStatiK commented on 5 Nov 2011\nI write my first app. On start my app consumes about 14mb, then at work increases the memory consumption. Can increase up to 60 mb after 7 days of work. Why is this and how to fix it. My version flask and python and code of my app there http://pastebin.com/n69tbVfR", "issue_status": "Closed", "issue_reporting_time": "2011-11-05T08:20:41Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1600": {"issue_url": "https://github.com/pallets/flask/issues/339", "issue_id": "#339", "issue_summary": "Broken setup.py (SyntaxError:invalid syntax)", "issue_description": "DenekUrich commented on 23 Oct 2011\nDownloading/unpacking Flask (from -r requirements.txt (line 1))\n  Running setup.py egg_info for package Flask\n    Traceback (most recent call last):\n      File \"\", line 14, in \n      File \"/home/denekurich/Projects/langoid.com/build/Flask/setup.py\", line 62\n        print \"Audit requires PyFlakes installed in your system.\"\"\"\n                                                                ^\n    SyntaxError: invalid syntax\n    Complete output from command python setup.py egg_info:\n    Traceback (most recent call last):\n\n  File \"\", line 14, in \n\n  File \"/home/denekurich/Projects/langoid.com/build/Flask/setup.py\", line 62\n\n    print \"Audit requires PyFlakes installed in your system.\"\"\"\n\n                                                            ^\n\nSyntaxError: invalid syntax", "issue_status": "Closed", "issue_reporting_time": "2011-10-22T18:52:46Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1601": {"issue_url": "https://github.com/pallets/flask/issues/338", "issue_id": "#338", "issue_summary": "TypeError in \"Method Views for APIs\"", "issue_description": "jzempel commented on 20 Oct 2011\nFollowing the example code in Method Views for APIs results in:\nTypeError: post() got an unexpected keyword argument 'user_id'\nEither the post() method needs to take a user_id (probably doesn't make sense), or an HTTP POST needs its own url_rule.", "issue_status": "Closed", "issue_reporting_time": "2011-10-20T18:16:10Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1602": {"issue_url": "https://github.com/pallets/flask/issues/332", "issue_id": "#332", "issue_summary": "Flask.template_test()", "issue_description": "iuriikomarov commented on 6 Oct 2011\nWhile there is template_filter() decorator for creating jinja2 custom filters, it's good idea to add template_test:\ndef template_test(self, name=None):\n    def decorator(f):\n        self.jinja_env.tests[name or f.__name__] = f\n        return f\n    return decorator", "issue_status": "Closed", "issue_reporting_time": "2011-10-06T18:03:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1603": {"issue_url": "https://github.com/pallets/flask/issues/331", "issue_id": "#331", "issue_summary": "static file would not send to browser correctly", "issue_description": "heavenshell commented on 30 Sep 2011\nHi,\nI've got a issue about static file.\nWhen I put css file in /static/css/style.css in static directory and I described view function with Variable Rules.\nPlease see sample code on https://gist.github.com/1254213\nGET /static/css/style.css request dispatch to view function and css file did not send to browser correctly.\nI expected to GET /static/css/style.css should send css file to browser, not dispatch to view function.\nRegards.", "issue_status": "Closed", "issue_reporting_time": "2011-09-30T16:36:26Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1604": {"issue_url": "https://github.com/pallets/flask/issues/329", "issue_id": "#329", "issue_summary": "Better support for error_handler register without decorator", "issue_description": "italomaia commented on 24 Sep 2011\nAs written here, the prefered way to register error_handlers to an application is through the app.error_handler decorator but, when using factories, this method becames far from ideal for \"big application\" patterns.", "issue_status": "Closed", "issue_reporting_time": "2011-09-23T21:50:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1605": {"issue_url": "https://github.com/pallets/flask/issues/328", "issue_id": "#328", "issue_summary": "Review Flask-Peewee for listing, then approval.", "issue_description": "Contributor\nrduplain commented on 24 Sep 2011\nCharles Leifer\nhttp://charlesleifer.com/docs/flask-peewee/index.html\nhttps://github.com/coleifer/flask-peewee", "issue_status": "Closed", "issue_reporting_time": "2011-09-23T19:50:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1606": {"issue_url": "https://github.com/pallets/flask/issues/326", "issue_id": "#326", "issue_summary": "Move Some Context Preservation Logic into App", "issue_description": "Member\nmitsuhiko commented on 22 Sep 2011\nRight now a test client can preserve the context for a little longer, so can exceptions. However there is no information if there is a context \"on hold\" on the stack which leads to the problem that if you continue to trigger exception you build up items on the stack in debug mode for nothing. There should always only be one context on the stack preserved and if another request comes in it should be removed.\nThis might also make the test client cleaner.", "issue_status": "Closed", "issue_reporting_time": "2011-09-21T23:58:02Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1607": {"issue_url": "https://github.com/pallets/flask/issues/323", "issue_id": "#323", "issue_summary": "SERVER_NAME set to 127.0.0.1:5000 in dev breaks flash method", "issue_description": "italomaia commented on 16 Sep 2011\nIn my local machine, using flask 0.7.2, if I set SERVER_NAME to \"127.0.0.1:5000\", with all other options set to defaul, the flash method stops working in webkit based browsers. Firefox works normally.\nI didn't dig further into the problem, but someone said it was fixed in 0.8dev.", "issue_status": "Closed", "issue_reporting_time": "2011-09-16T15:06:53Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1608": {"issue_url": "https://github.com/pallets/flask/issues/321", "issue_id": "#321", "issue_summary": "create_global_jinja_loader has outdated docstring", "issue_description": "Member\njab commented on 14 Sep 2011\n\"create_jinja_loader\" should be \"jinja_loader\" in http://flask.pocoo.org/docs/api/#flask.Flask.create_global_jinja_loader", "issue_status": "Closed", "issue_reporting_time": "2011-09-13T23:18:26Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1609": {"issue_url": "https://github.com/pallets/flask/issues/318", "issue_id": "#318", "issue_summary": "Review Flask-ZODB for approval", "issue_description": "Contributor\ndag commented on 7 Sep 2011\nhttps://github.com/dag/flask-zodb\nI'm releasing soon, but if there's any blockers for approval I'd like to fix them before the first release. Please review.", "issue_status": "Closed", "issue_reporting_time": "2011-09-07T03:28:56Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1610": {"issue_url": "https://github.com/pallets/flask/issues/317", "issue_id": "#317", "issue_summary": "Review Flask-Sijax for approval.", "issue_description": "Contributor\nrduplain commented on 6 Sep 2011\nSlavi Pantaleev\nhttp://packages.python.org/Flask-Sijax/", "issue_status": "Closed", "issue_reporting_time": "2011-09-06T18:14:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1611": {"issue_url": "https://github.com/pallets/flask/issues/316", "issue_id": "#316", "issue_summary": "Review Flask-Exceptional for approval.", "issue_description": "Contributor\nrduplain commented on 6 Sep 2011\nJonathan Zempel\nhttp://packages.python.org/Flask-Exceptional/\nhttp://github.com/jzempel/flask-exceptional", "issue_status": "Closed", "issue_reporting_time": "2011-09-06T17:48:52Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1612": {"issue_url": "https://github.com/pallets/flask/issues/315", "issue_id": "#315", "issue_summary": "'Float' converter in route not working", "issue_description": "chipotle commented on 6 Sep 2011\nIn Flask 0.7.2, I have a route defined as:\n@app.route('/venues/<float:lat>/<float:lon>/<float:rad>/')\nTrying to access that route at http://127.0.0.1/10/20/30 will produce a \"404 Not Found\" error. If you change the route to\n@app.route('/venues/<lat>/<lon>/<rad>/')\nor substitute int for float using the conversion notation, then the route works correctly.", "issue_status": "Closed", "issue_reporting_time": "2011-09-05T22:29:10Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1613": {"issue_url": "https://github.com/pallets/flask/issues/314", "issue_id": "#314", "issue_summary": "Add search to website for snippets and mailing list archives.", "issue_description": "Contributor\nrduplain commented on 5 Sep 2011\n... and docs.", "issue_status": "Closed", "issue_reporting_time": "2011-09-05T17:47:31Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1614": {"issue_url": "https://github.com/pallets/flask/issues/313", "issue_id": "#313", "issue_summary": "Example @login_required decorator confusing", "issue_description": "Contributor\ndag commented on 5 Sep 2011\nSeveral people on IRC have failed to use this decorator correctly. The problem is they forget to pass the \"next\" value along in their POST of the login form. The situation could be improved with a note in the docs for view decorators.\nThe confusion typically is that they think they have a \"next\" value in request.args, because they do in the GET request to their login view, and then suddenly for no apparent reason it's not there - because it's a new request, the POST request of the login credentials. The solution is to add a hidden input with the value of the next URL:\n<input type=hidden name=next value=\"{{ request.values.next }}\">\nand then use either request.values or request.form instead of request.args in the login view where the POST request is handled.\n17:05 <flipmoe> Is there something to pay attention to if you try to access request args using blueprints and an app factory? I get 'None' although there is a next parameter in the url. Thx\n17:07 <donri> flipmoe: from where are you doing this?\n17:07 <flipmoe> donri: from my login view\n17:08 <donri> paste code paste.pocoo.org\n17:13 <flipmoe> donri: http://paste.pocoo.org/show/470727/ \n17:14 <donri> and the code that redirects to login?\n17:15 <DasIch> donri: line 32\n17:15 <donri> nope\n17:16 <flipmoe> donri: you mean the login_required decorator?\n17:16 <donri> probably\n17:16 <flipmoe> donri: ok\n17:17 <flipmoe> donri: http://paste.pocoo.org/show/470731/ \n17:26 <donri> flipmoe: ah i see it\n17:26 <donri> flipmoe: your redirect results in the GET which renders the template, where i assume you have a form that POST to login\n17:26 <donri> flipmoe: but you're probably not passing along the 'next' from the GET\n17:27 <donri> flipmoe: add an input hidden to the form and use request.values\n17:28 <donri> remember that your login view handles two different forms of requests (get and post)\n17:28 <donri> and validate_on_submit checks that the request method is POST\n17:29 <flipmoe> donri: ok thx, do you have an example for that hidden input?\n17:29 <donri> <input type=hidden name=next value=\"{{ request.values.next }}\">\n17:29 <donri> request.values is just a combined dict of the request.form and request.args\n17:30 <flipmoe> donri: ok thank you!\n17:30 <donri> then make sure to use request.values in the login view too\n17:30 <flipmoe> donri: jep\n17:31 <donri> may need to do something more to make the form valid against LoginForm with \"next\" in the form dict\n17:32 <donri> (you could just pass it in form action=login?next=... but mitsuhiko seems to think that's bad for some reason i forgot)\n17:33 <flipmoe> ok", "issue_status": "Closed", "issue_reporting_time": "2011-09-05T15:42:13Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1615": {"issue_url": "https://github.com/pallets/flask/issues/312", "issue_id": "#312", "issue_summary": "use extended dict as app config", "issue_description": "bayazee commented on 5 Sep 2011\nhi\nApp.config is a class based on dict object.\nSo we must use it as a dict later and all settings in it accessed same as a dict.\nlike:\napp.config['DEBUG']\nBut i think it will be good to it can be accessed such as a class.\napp.config.DEBUG\nit can be down by some simple overrided methods. i write simple code for this:\nclass EDict(dict):\ndef __init__(self, **kwargs):\n    for key, value in kwargs.iteritems():\n        self.__setitem__(key, value)\n    dict.__init__(self)\n\ndef __getattr__(self, attr):\n    return super(EDict, self).__getitem__(attr)\n\ndef __setattr__(self, attr, value):\n    self[attr] = value\n\ndef __delattr__(self, key):\n    return super(EDict, self).__delitem__(key)", "issue_status": "Closed", "issue_reporting_time": "2011-09-05T08:29:16Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1616": {"issue_url": "https://github.com/pallets/flask/issues/310", "issue_id": "#310", "issue_summary": "Switch to primitive types in the config", "issue_description": "Member\nmitsuhiko commented on 30 Aug 2011\nRight now PERMANENT_SESSION_TIMEOUT can only be a datetime.timedelta object which is annoying. Make it possible to set this to an integer.", "issue_status": "Closed", "issue_reporting_time": "2011-08-30T12:24:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1617": {"issue_url": "https://github.com/pallets/flask/issues/306", "issue_id": "#306", "issue_summary": "make Cookie Path configurable", "issue_description": "Spida commented on 25 Aug 2011\nIt should be possible to set the Cookie Path to something different from \"/\", default should be the application root path.", "issue_status": "Closed", "issue_reporting_time": "2011-08-25T09:55:16Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1618": {"issue_url": "https://github.com/pallets/flask/issues/305", "issue_id": "#305", "issue_summary": "option to turn off Jinja2", "issue_description": "Member\njab commented on 24 Aug 2011\nI'd like to use Flask over pure Werkzeug but I don't need templating. It's fine for Jinja2 to be required to be installed since Flask extensions might expect it, but would it be possible (and worth it) for Flask to take an option to tell it not to bother setting up a default Jinja environment for the app since I won't be using it?", "issue_status": "Closed", "issue_reporting_time": "2011-08-24T14:36:48Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1619": {"issue_url": "https://github.com/pallets/flask/issues/301", "issue_id": "#301", "issue_summary": "Add flash_error and get_flashed_errors", "issue_description": "Poincare commented on 11 Aug 2011\nI think it would be convenient if we could have a flash_error and get_flashed_errors (I don't know if this is to be included in Jinja, or here) method, because its quite a pain to filter through the categories every time, especially when the messages and errors must be on different parts of the page.\nIf you guys do approve, I would like to be able to write the code for solving the issue, if you don't mind.", "issue_status": "Closed", "issue_reporting_time": "2011-08-11T04:13:20Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1620": {"issue_url": "https://github.com/pallets/flask/issues/299", "issue_id": "#299", "issue_summary": "make_release.py won't work for August dates", "issue_description": "espeed commented on 8 Aug 2011\nHi Armin -\nI am using your make_release.py script in Bulbs, and the script was breaking when I was trying to make a release today because the parse_date function was replacing the the \"st\" in August (this may be an issue for other months too):\ndef parse_date(string):\nstring = string.replace('th ', ' ').replace('nd ', ' ')\n.replace('rd ', ' ').replace('st ', ' ')\nreturn datetime.strptime(string, '%B %d %Y')\nJames", "issue_status": "Closed", "issue_reporting_time": "2011-08-07T22:53:01Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1621": {"issue_url": "https://github.com/pallets/flask/issues/298", "issue_id": "#298", "issue_summary": "Flask website license", "issue_description": "Contributor\nSimonSapin commented on 7 Aug 2011\nWhat is the license for the Flask website? I would like to re-use the code for Librelist archives, but Flask\u2019s website branch has no LICENSE file.", "issue_status": "Closed", "issue_reporting_time": "2011-08-07T08:19:55Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1622": {"issue_url": "https://github.com/pallets/flask/issues/294", "issue_id": "#294", "issue_summary": "Traceback logs not available for POST requests", "issue_description": "garyshi commented on 5 Aug 2011\nWhen the app runs in debug mode, exceptions in handling GET requests would be displayed on the page and logging output. But for POST requests, it only returns \"400 Bad Request\", without any traceback, making debugging difficult. If it's a bad idea to display the traceback in web page, at least it should be displayed in the logging output.", "issue_status": "Closed", "issue_reporting_time": "2011-08-05T09:09:29Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1623": {"issue_url": "https://github.com/pallets/flask/issues/291", "issue_id": "#291", "issue_summary": "before_request functions not run before every request", "issue_description": "Member\njab commented on 3 Aug 2011\nI have a before_request function which I'd like to be actually run before every request. It sets some variables on g based on things like headers that I would like a custom error handler to be able to access. If I e.g. abort(404) from one of my own views, I'm fine, but if a request comes in that werkzeug can determine has no matching route, it bypasses my before_request function and goes straight to the error handler, so g is missing info.", "issue_status": "Closed", "issue_reporting_time": "2011-08-02T21:19:42Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1624": {"issue_url": "https://github.com/pallets/flask/issues/290", "issue_id": "#290", "issue_summary": "request.json is documented twice", "issue_description": "Contributor\nSimonSapin commented on 2 Aug 2011\nflask.request.json is documented twice in http://flask.pocoo.org/docs/api/#incoming-request-data\nThe two descriptions should be merged. Also they should say what happens when the request is not JSON. Is the .json attribute None?", "issue_status": "Closed", "issue_reporting_time": "2011-08-02T14:31:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1625": {"issue_url": "https://github.com/pallets/flask/issues/287", "issue_id": "#287", "issue_summary": "Setting multiple headers is not(?) supported in response", "issue_description": "bra-fsn commented on 26 Jul 2011\nDuring the development of a HTTP proxy (which uses flask for the response view generation) I came into the issue of setting multiple header values.\nThe problem is that I get multiple Set-Cookies response from the upstream HTTP server, which I have to insert into flask's response. But currently it seems it's impossible due to the dictionary interface.\nAny ideas?", "issue_status": "Closed", "issue_reporting_time": "2011-07-26T12:42:24Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1626": {"issue_url": "https://github.com/pallets/flask/issues/286", "issue_id": "#286", "issue_summary": "AttributeError: type object 'EventsCodes' has no attribute 'IN_DELETE_SELF'", "issue_description": "gekitsuu commented on 26 Jul 2011\nIt only happens when I try to enable debugging but this is the traceback I get\nTraceback (most recent call last):\nFile \"niftysite.py\", line 33, in\nmain()\nFile \"niftysite.py\", line 30, in main\napp.run(host='0.0.0.0')\nFile \"/home/aglenn/.virtualenvs/niftysite/local/lib/python2.7/site-packages/flask/app.py\", line 553, in run\nreturn run_simple(host, port, self, **options)\nFile \"/home/aglenn/.virtualenvs/niftysite/local/lib/python2.7/site-packages/werkzeug/serving.py\", line 609, in run_simple\nrun_with_reloader(inner, extra_files, reloader_interval)\nFile \"/home/aglenn/.virtualenvs/niftysite/local/lib/python2.7/site-packages/werkzeug/serving.py\", line 528, in run_with_reloader\nreloader_loop(extra_files, interval)\nFile \"/home/aglenn/.virtualenvs/niftysite/local/lib/python2.7/site-packages/werkzeug/serving.py\", line 436, in reloader_loop\nreloader(fnames, interval=interval)\nFile \"/home/aglenn/.virtualenvs/niftysite/local/lib/python2.7/site-packages/werkzeug/serving.py\", line 464, in _reloader_inotify\nmask = reduce(lambda m, a: m | getattr(EventsCodes, a), mask, 0)\nFile \"/home/aglenn/.virtualenvs/niftysite/local/lib/python2.7/site-packages/werkzeug/serving.py\", line 464, in\nmask = reduce(lambda m, a: m | getattr(EventsCodes, a), mask, 0)\nAttributeError: type object 'EventsCodes' has no attribute 'IN_DELETE_SELF'", "issue_status": "Closed", "issue_reporting_time": "2011-07-26T01:35:13Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1627": {"issue_url": "https://github.com/pallets/flask/issues/283", "issue_id": "#283", "issue_summary": "Provide a built-in development server command-line interface.", "issue_description": "Contributor\nrduplain commented on 23 Jul 2011\nAs discussed on the mailing list:\nhttp://flask.pocoo.org/mailinglist/archive/2011/7/22/application-mount-point/#abdbeee9ca8eda65f0e17a0aeb4fab5f\nMake it possible to run a Flask application from the command line with this:\n$ python -mflask.server yourapplication\nWhat would that do? It would attempt to import yourapplication and then looks for an object called \"app\". If it finds that it uses that, otherwise you would have to do (yourapplication:application) or something. Then it runs that with the development server.\nWhat would that solve?\nFirst of all it would no longer require if __name__ == '__main__', secondly it would solve the double importing problems we commonly see as well as the fact that modules work different to applications. Lastly the application object would no longer have to be a Flask application object but just any WSGI application object.", "issue_status": "Closed", "issue_reporting_time": "2011-07-23T16:29:28Z", "fixed_by": "pallets/werkzeug#225", "pull_request_summary": "Application Dispatching > Combining Applications documentation is incorrect", "pull_request_description": "oscherler commented on 26 Apr 2011\nThe example in the docs under Application Dispatching > Combining Applications is incorrect:\nfrom werkzeug.wsgi import DispatcherMiddleware\nfrom frontend_app import application as frontend\nfrom backend_app import application as backend\n\napplication = DispatcherMiddleware(frontend, {\n    '/backend':     backend\n})\nIt leaves you with nothing to run, because application is not an application (and thus cannot be run()) but an instance of DispatcherMiddleware, which nothing can be done with whatsoever. Google had no mention of DispatcherMiddleware apart from the above page and the Werkzeug web site. You therefore try to run it as a Werkzeug application, but:\nThe Werkzeug documentation is lame and no help at all;\nIt is not the right approach anyway.\nThe code sample should either be:\nfrom werkzeug.wsgi import DispatcherMiddleware\nfrom frontend_app import application as frontend\nfrom backend_app import application as backend\n\nfrontend.wsgi_app = DispatcherMiddleware(frontend.wsgi_app, {\n    '/backend':     backend\n})\n\nfrontend.run()\nor:\nfrom flask import Flask\nfrom werkzeug.wsgi import DispatcherMiddleware\nfrom frontend_app import application as frontend\nfrom backend_app import application as backend\n\napplication = Flask(__name__)\n\napplication.wsgi_app = DispatcherMiddleware(frontend, {\n    '/backend':     backend\n})\n\napplication.run()\nThere is one hint of this in Quickstart > Hooking in WSGI Middlewares and another in the API reference for the Flask class, but neither of them is returned in Google searches about Flask Werkzeug middleware for example.", "pull_request_status": "Merged", "issue_fixed_time": "2011-04-26T11:44:40Z", "files_changed": []}, "1628": {"issue_url": "https://github.com/pallets/flask/issues/279", "issue_id": "#279", "issue_summary": "route / add_url_rule Documentation", "issue_description": "Member\nmitsuhiko commented on 14 Jul 2011\nThe docs are kinda inconsistent between route() and add_url_rule. The former should be documented as a decorator version of the latter which is true since Flask 0.3 at least.\nAlso with 0.7 and 0.8 we have some attributes on view functions that can have meanings attached. These now have a separate headline in the API docs, but I guess it would make sense to tidy this up a bit.", "issue_status": "Closed", "issue_reporting_time": "2011-07-14T13:00:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1629": {"issue_url": "https://github.com/pallets/flask/issues/278", "issue_id": "#278", "issue_summary": "Typos in flask.app.Flask docstrings/comments", "issue_description": "decafjoe commented on 13 Jul 2011\nLine 85. \"yourapplicaiton\" where it should be \"yourapplication\":\n        an SQL query in debug mode.  If the import name is not properly set\n        up, that debugging information is lost.  (For example it would only\n        pick up SQL queries in `yourapplicaiton.app` and not\n        `yourapplication.views.frontend`)\nAlso, line 108, \"ocurrs\" where it should be \"occurs\":\n    #: The debug flag.  Set this to `True` to enable debugging of the\n    #: application.  In debug mode the debugger will kick in when an unhandled\n    #: exception ocurrs and the integrated server will automatically reload\n    #: the application if changes in the code are detected.", "issue_status": "Closed", "issue_reporting_time": "2011-07-13T00:35:40Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1630": {"issue_url": "https://github.com/pallets/flask/issues/270", "issue_id": "#270", "issue_summary": "Blueprints and URL processors", "issue_description": "semond commented on 6 Jul 2011\nIn 0.7.1..\nWhen I follow the example at the end of http://flask.pocoo.org/docs/patterns/urlprocessors/, I get...\nTypeError: 'dict' object is not callable\nIn Blueprint's init(), I see:\n    if url_defaults is None:\n        url_defaults = {}\n    self.url_defaults = url_defaults\nwhich seems to overwrite the \"def url_defaults(..)\" below.\nEverything seem to work as expected if I use something like this:\nBlueprint.url_defaults_fix = Blueprint.url_defaults\n\nbp = Blueprint(....)\n\n@bp.url_defaults_fix\ndef abc(..):\n    ....", "issue_status": "Closed", "issue_reporting_time": "2011-07-06T00:22:43Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1631": {"issue_url": "https://github.com/pallets/flask/issues/268", "issue_id": "#268", "issue_summary": "Flask-7.0 uses with statement without import in helpers.py (Python2.5 incompatible)", "issue_description": "ftofficer commented on 29 Jun 2011\nFlask-7.0 uses with statement without \"from future import with_statement\" in helpers.py, which cause broken on Python 2.5 environment.\nThe FIX:\nadd \"from future import with_statement\" to helpers.py", "issue_status": "Closed", "issue_reporting_time": "2011-06-29T08:22:17Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1632": {"issue_url": "https://github.com/pallets/flask/issues/266", "issue_id": "#266", "issue_summary": "Blueprint template lookup not documented enough", "issue_description": "Member\nmitsuhiko commented on 29 Jun 2011\nThe new blueprint template lookup scheme where the templates folder is just added to the searchpath instead of doing some weird stuff with the names as before. The documentation has to be clearer about that.", "issue_status": "Closed", "issue_reporting_time": "2011-06-28T21:50:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1633": {"issue_url": "https://github.com/pallets/flask/issues/264", "issue_id": "#264", "issue_summary": "with_statement & appengine compatibility", "issue_description": "gokult commented on 28 Jun 2011\nhelpers.py in 0.7 uses the with_statement, but doesn't import it from future. This breaks appengine compatibility, at least when running with their runtime locally.\nFix is to do as app.py does and import with_statement.", "issue_status": "Closed", "issue_reporting_time": "2011-06-28T15:57:54Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1634": {"issue_url": "https://github.com/pallets/flask/issues/261", "issue_id": "#261", "issue_summary": "Support for Class Based Views", "issue_description": "Member\nmitsuhiko commented on 28 Jun 2011\nFlask 0.8 should provide support for class based views similar to how they work in Django.\nAdditionally each CBV can provide the methods it responds so you don't have to register them on the route yourself, same with the endpoint.", "issue_status": "Closed", "issue_reporting_time": "2011-06-28T07:13:51Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1635": {"issue_url": "https://github.com/pallets/flask/issues/260", "issue_id": "#260", "issue_summary": "Wrong Enctype Warnings", "issue_description": "Member\nmitsuhiko commented on 27 Jun 2011\nBecause browsers send the filename of a filename if the enctype is urlencoded we could provide helpful warnings if the user attempts to use a file that's not there because the wrong enctype is set.", "issue_status": "Closed", "issue_reporting_time": "2011-06-27T08:22:15Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1636": {"issue_url": "https://github.com/pallets/flask/issues/258", "issue_id": "#258", "issue_summary": "Make Tests for bluprints with dotted Names", "issue_description": "Member\nmitsuhiko commented on 27 Jun 2011\nWe want to encourage blueprint names with dots in, make sure they work.", "issue_status": "Closed", "issue_reporting_time": "2011-06-27T05:59:05Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1637": {"issue_url": "https://github.com/pallets/flask/issues/256", "issue_id": "#256", "issue_summary": "url_for still reference module", "issue_description": "ghost commented on 27 Jun 2011\nurl_for docstrings still reference module which are gone in 0.7\nhttps://github.com/mitsuhiko/flask/blob/master/flask/helpers.py#L152", "issue_status": "Closed", "issue_reporting_time": "2011-06-26T23:31:35Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1638": {"issue_url": "https://github.com/pallets/flask/issues/254", "issue_id": "#254", "issue_summary": "Documentation Updates for 0.7", "issue_description": "Member\nmitsuhiko commented on 24 Jun 2011\nHere is what we still need to do:\nimprove the upgrading documentation.\nexpain some patterns you can do with blueprints\nshow how blueprints can be provided by extensions\nshow patterns with blueprints", "issue_status": "Closed", "issue_reporting_time": "2011-06-24T15:38:15Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1639": {"issue_url": "https://github.com/pallets/flask/issues/253", "issue_id": "#253", "issue_summary": "Reports of sessions not working when SERVER_NAME set with port", "issue_description": "Member\nmitsuhiko commented on 24 Jun 2011\nNot sure how cookies are supposed to work with ports right now, but we got reports that they don't work with an explicitly set port. Investigate.", "issue_status": "Closed", "issue_reporting_time": "2011-06-24T14:38:20Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1640": {"issue_url": "https://github.com/pallets/flask/issues/251", "issue_id": "#251", "issue_summary": "handle_exception doesn't catch everything.", "issue_description": "Contributor\nReisen commented on 23 Jun 2011\nAny errors that occur inside request_context are not properly caught by handle_exception. From app.py:\ndef wsgi_app(self, environ, start_response):\n    with self.request_context(environ):\n        try:\n            response = self.full_dispatch_request()\n        except Exception, e:\n            response = self.make_response(self.handle_exception(e))\n            return response(environ, start_response)\nAs an example, create an error handler for error code 500. Set config['SERVER_NAME'] to something your client won't send, and visit the application. The call to url_map.bind_to_environ in RequestContext results in a ValueError from werkzeug.", "issue_status": "Closed", "issue_reporting_time": "2011-06-23T12:58:31Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1641": {"issue_url": "https://github.com/pallets/flask/issues/248", "issue_id": "#248", "issue_summary": "Review JSON Security", "issue_description": "Member\nmitsuhiko commented on 20 Jun 2011\nECMAscript 5 changed behavior of Array literals. That part of the documentation is outdated by now. We should check what browsers are affected by this and update the docs accordingly.", "issue_status": "Closed", "issue_reporting_time": "2011-06-20T07:57:08Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1642": {"issue_url": "https://github.com/pallets/flask/issues/247", "issue_id": "#247", "issue_summary": "don't spread JSON FUD", "issue_description": "michaelficarra commented on 20 Jun 2011\n@rstacruz recently pointed me to the JSON security section of your documentation. It is irresponsible to pass off some sort of buggy browser behaviour (which probably doesn't even exist) as an inherent issue with using an array as the top-level object in a JSON document. The ecmascript 5 specification very clearly states:\nLet array be the result of creating a new object as if by the expression new Array() where Array is the standard built-in constructor with that name.\nAny browsers that behave as you say they should in your documentation are not following the spec. I tested for this behaviour in Chrome, Opera, and Firefox, and none of them behaved as was described. Because of that, I ask that you remove that section of the documentation and put in its place a disclaimer that what was there previously (for over a year now!) was not factual. If anyone does find this behaviour in any browser, report it instead in the proper place.", "issue_status": "Closed", "issue_reporting_time": "2011-06-19T18:54:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1643": {"issue_url": "https://github.com/pallets/flask/issues/246", "issue_id": "#246", "issue_summary": "Split up Testsuite", "issue_description": "Member\nmitsuhiko commented on 17 Jun 2011\nAfter the 0.7 release we really should be splitting up the testsuite into more than one file :)", "issue_status": "Closed", "issue_reporting_time": "2011-06-17T02:05:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1644": {"issue_url": "https://github.com/pallets/flask/issues/244", "issue_id": "#244", "issue_summary": "Minor documentation fix", "issue_description": "emiel commented on 16 Jun 2011\nhttp://flask.pocoo.org/docs/patterns/appfactories/#basic-factories\nHow do you get access the application with the config?\nHow do you get access to the application with the config?", "issue_status": "Closed", "issue_reporting_time": "2011-06-16T14:11:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1645": {"issue_url": "https://github.com/pallets/flask/issues/241", "issue_id": "#241", "issue_summary": "Tutorial Step 4 : teardown code sample is not well formated", "issue_description": "nsteinmetz commented on 6 Jun 2011\nOn : http://flask.pocoo.org/docs/tutorial/dbcon/#tutorial-dbcon, the second sample code which should illustrate the teardown_request is not well formated.\n@app.before_request def before_request():\ng.db = connect_db()\n@app.teardown_request def teardown_request(exception):\ng.db.close()\nSource code looks good anyway ?!?!", "issue_status": "Closed", "issue_reporting_time": "2011-06-05T19:13:46Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1646": {"issue_url": "https://github.com/pallets/flask/issues/240", "issue_id": "#240", "issue_summary": "How to include custom Jinja extensions?", "issue_description": "swaroopch commented on 4 Jun 2011\nHow do I include FragmentCacheExtension example into Flask?", "issue_status": "Closed", "issue_reporting_time": "2011-06-04T17:29:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1647": {"issue_url": "https://github.com/pallets/flask/issues/235", "issue_id": "#235", "issue_summary": "website's twitter.py script requires optional keywords", "issue_description": "meisterluk commented on 24 May 2011\ntwitter.py lines 65--70\n        for word in self.required:\n            if word not in text:\n                return False\n        for word in self.optional:\n            if word in text:\n                return True\n        return False\nTrue can only be returned, if optional keywords are given. Therefore I recommend returning True if none of the for loops returned a value.", "issue_status": "Closed", "issue_reporting_time": "2011-05-24T07:53:27Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1648": {"issue_url": "https://github.com/pallets/flask/issues/234", "issue_id": "#234", "issue_summary": "logging improperly extending directly from Logger class", "issue_description": "etrikp commented on 20 May 2011\nThe python logging facility provides a getter for the base logger class, logging.getLoggerClass(). This allows the base class of the logging singleton to be extended multiple times without overriding previous calls to logging.setLoggerClass(), In my case specifically I'm setting up a base logging facility via an extended Logger, flask won't play nice with this because its DebugLogger is not extended from the class returned via getLoggerClass(). For a patched version of the create_logging function see https://gist.github.com/981450", "issue_status": "Closed", "issue_reporting_time": "2011-05-19T19:05:24Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1649": {"issue_url": "https://github.com/pallets/flask/issues/231", "issue_id": "#231", "issue_summary": "pip install flask==dev resulting in svn warning", "issue_description": "codehugger commented on 14 May 2011\nWhen I do the following in a fresh virtualenv initialized with --no-site-packages\npip install flask==dev\nand then\npip freeze\nthen the result looks like this\nWarning: cannot find svn location for Flask==0.7dev-20110514\n## FIXME: could not find svn URL in dependency_links for this package:\nFlask==0.7dev-20110514\nJinja2==2.5.5\nWerkzeug==0.6.2\nwsgiref==0.1.2", "issue_status": "Closed", "issue_reporting_time": "2011-05-14T11:28:35Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1650": {"issue_url": "https://github.com/pallets/flask/issues/229", "issue_id": "#229", "issue_summary": "don't save session if nothing to save", "issue_description": "orutherfurd commented on 6 May 2011\nmakes caching w/varnish easier\ndiff -r 66cb5def7b6e flask/app.py\n--- a/flask/app.py      Fri Dec 31 15:21:46 2010 +0100\n+++ b/flask/app.py      Thu May 05 15:45:18 2011 -0400\n@@ -439,6 +439,8 @@ class Flask(_PackageBoundObject):\n                         object)\n         :param response: an instance of :attr:`response_class`\n         \"\"\"\n+        if not session:\n+            return\n         expires = domain = None\n         if session.permanent:\n             expires = datetime.utcnow() + self.permanent_session_lifetime", "issue_status": "Closed", "issue_reporting_time": "2011-05-05T19:48:41Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1651": {"issue_url": "https://github.com/pallets/flask/issues/227", "issue_id": "#227", "issue_summary": "get_flashed_messages() always forces session.should_save", "issue_description": "foresto commented on 28 Apr 2011\nI recently added message flashing to one of my apps, and noticed that it started re-issuing the session cookie on every response.\nA bit of digging revealed that get_flashed_messages() calls session.pop('_flashes') without first checking to see if session['_flashes'] is missing or empty. This has a side effect of triggering ModificationTrackingDict.on_update(), which in turn marks the session as modified even though it wasn't. It happens even when no flash messages are set.\nThe fix should be easy. Replace this part of get_flashed_messages():\nif flashes is None:\n    _request_ctx_stack.top.flashes = flashes = session.pop('_flashes', [])\nWith something like this:\nif flashes is None and '_flashes' in session:\n    _request_ctx_stack.top.flashes = flashes = session.pop('_flashes')\nelse:\n    _request_ctx_stack.top.flashes = flashes =  []", "issue_status": "Closed", "issue_reporting_time": "2011-04-27T19:24:16Z", "fixed_by": "#232", "pull_request_summary": "Fixes Issue #227 where pop causes the session to be modified.", "pull_request_description": "Contributor\nsharoonthomas commented on 17 May 2011\nPrevent pop if flashes not in session to avoid modification to session fixes #227", "pull_request_status": "Merged", "issue_fixed_time": "2011-05-24T14:41:27Z", "files_changed": [["3", "flask/helpers.py"]]}, "1652": {"issue_url": "https://github.com/pallets/flask/issues/226", "issue_id": "#226", "issue_summary": "Static files in non-url_prefixed modules don't work.", "issue_description": "tomekwojcik commented on 27 Apr 2011\nHi,\nI've encountered a strange bug while working with Flask. When I have two modules (say 'frontend' and 'admin') static files aren't found in frontend module. Admin module is url_prefixed with '/admin' and everything is fine with it.\nThe only workaround I found was to add a /static route in frontend module and serve files manually.\nI've created a simple demo app to show the bug. It's available here: https://github.com/tomekwojcik/Flask-Module-Static-Files\nBest ragards.", "issue_status": "Closed", "issue_reporting_time": "2011-04-27T07:26:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1653": {"issue_url": "https://github.com/pallets/flask/issues/225", "issue_id": "#225", "issue_summary": "Application Dispatching > Combining Applications documentation is incorrect", "issue_description": "oscherler commented on 26 Apr 2011\nThe example in the docs under Application Dispatching > Combining Applications is incorrect:\nfrom werkzeug.wsgi import DispatcherMiddleware\nfrom frontend_app import application as frontend\nfrom backend_app import application as backend\n\napplication = DispatcherMiddleware(frontend, {\n    '/backend':     backend\n})\nIt leaves you with nothing to run, because application is not an application (and thus cannot be run()) but an instance of DispatcherMiddleware, which nothing can be done with whatsoever. Google had no mention of DispatcherMiddleware apart from the above page and the Werkzeug web site. You therefore try to run it as a Werkzeug application, but:\nThe Werkzeug documentation is lame and no help at all;\nIt is not the right approach anyway.\nThe code sample should either be:\nfrom werkzeug.wsgi import DispatcherMiddleware\nfrom frontend_app import application as frontend\nfrom backend_app import application as backend\n\nfrontend.wsgi_app = DispatcherMiddleware(frontend.wsgi_app, {\n    '/backend':     backend\n})\n\nfrontend.run()\nor:\nfrom flask import Flask\nfrom werkzeug.wsgi import DispatcherMiddleware\nfrom frontend_app import application as frontend\nfrom backend_app import application as backend\n\napplication = Flask(__name__)\n\napplication.wsgi_app = DispatcherMiddleware(frontend, {\n    '/backend':     backend\n})\n\napplication.run()\nThere is one hint of this in Quickstart > Hooking in WSGI Middlewares and another in the API reference for the Flask class, but neither of them is returned in Google searches about Flask Werkzeug middleware for example.", "issue_status": "Closed", "issue_reporting_time": "2011-04-26T11:44:40Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1654": {"issue_url": "https://github.com/pallets/flask/issues/224", "issue_id": "#224", "issue_summary": "Docs should mention that url_for() skips query string args with value=None", "issue_description": "foresto commented on 20 Apr 2011\n(Related to #20)\nI just discovered that, when passing extra arguments to url_for(), it skips those whose values are None. This is a convenient feature. If it was documented, I would use it without worrying that it might disappear in the next version.", "issue_status": "Closed", "issue_reporting_time": "2011-04-20T18:07:10Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1655": {"issue_url": "https://github.com/pallets/flask/issues/223", "issue_id": "#223", "issue_summary": "sys.excepthook error", "issue_description": "ghost commented on 20 Apr 2011\nWhen restarting in debug mode, this error was output:\nDetected change in 'atest.py', reloading\nUnhandled exception in thread started by\nsys.excepthook is missing\nlost sys.stderr\nRestarting with reloader...\nIt may be related to a known issue calling sys.excepthook from threads, see http://bugs.python.org/issue1230540\nUsing Flask 0.6.1, Werkzeug 0.62 under Python 2.7 64-bit on Solaris10/SPARC.", "issue_status": "Closed", "issue_reporting_time": "2011-04-19T23:37:32Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1656": {"issue_url": "https://github.com/pallets/flask/issues/222", "issue_id": "#222", "issue_summary": "WTFForms: Error Handling for Forms in Templates", "issue_description": "PhilipCammarata commented on 19 Apr 2011\nIn the WTForms' documentation on displaying errors it gives an example of putting all of a form's errors in a neat little section (second example) but when I run the aforementioned code Flask returns:\nValueError\nValueError: too many values to unpack\nI imagine it comes from this line:\n{% for field_name, field_errors in form.errors if field_errors %}\nIs their example Django specific or am I just missing something?", "issue_status": "Closed", "issue_reporting_time": "2011-04-19T15:40:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1657": {"issue_url": "https://github.com/pallets/flask/issues/221", "issue_id": "#221", "issue_summary": "Subclassing of Flask should be documented", "issue_description": "Contributor\ndag commented on 19 Apr 2011\nIt should be made clear that for some problems (such as a custom Jinja environment), subclassing is the solution and Flask is explicitly designed for it.\nSome examples and best-practices would be helpful, maybe as a 'pattern'. How to extend rather than replace the defaults, how to deal with immutable containers etc.\nThe reasons for the need to subclass, and the design choice of immutable containers, could be explained and defended. (Needed at construction time?)\nOn IRC, questions for which subclassing is the answer, are not uncommon, and at the same time few realize that you can and should do this for some things, and they're often confused as to how it's properly done.\nIf I find the energy I might try to draft some of the above.", "issue_status": "Closed", "issue_reporting_time": "2011-04-19T08:43:40Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1658": {"issue_url": "https://github.com/pallets/flask/issues/220", "issue_id": "#220", "issue_summary": "Custom default function for jsonify", "issue_description": "Contributor\ndag commented on 19 Apr 2011\nIt would be neat to be able to control the serialization of arbitrary objects with jsonify. The dumps function allows you to pass a callable for this. I propose the addition of either an overridable method on the Flask class that is passed by jsonify, or a decorator for registering such a function. The \"default default\" could simply raise TypeError, the \"default default\" for the json module.\nclass JSONAdaptiveFlask(Flask):\n\n    def json_defaults(self, obj):\n        if isinstance(obj, datetime):\n            return obj.isoformat()\n        try:\n            return obj.__json__()\n        except AttributeError:\n            raise TypeError\n\u2026 or \u2026\n@app.json_defaults\ndef json_adaption(obj):\n    if isinstance(obj, datetime):\n        return obj.isoformat()\n    try:\n        return obj.__json__()\n    except AttributeError:\n        raise TypeError\nUnlike the rejected pull-request, this should be thread-safe. As for direct use of the json module, one can simply pass the reference:\njson.dumps(obj, default=app.json_defaults)\nIn a discussion on IRC, Armin expressed concern that this kind of adaption isn't very useful in practice, because it differs between requests what one wants serialized from an object. This problem can be solved by exploiting the fact that jsonify is request-bound, and the defaults function is able to read context-locals such as 'g'. It may not \"feel\" right but it is essentially what we need: a global state for the request.\nclass User(Model):\n\n    def __json__(self):\n        data = dict(name=self.name, joined=self.created_at)\n        if g.user is self:\n            data.update(email=self.email)\n        if g.verbose_json:\n            data.update(posts=self.posts)\nThe gain is that we can simplify views and structure the code better by moving model-logic to models. We can avoid repeating ourselves \u2014 the serialization is recursive, we just reference a datetime object and a list of instances of the Post model. We don't lose anything because by default it will behave as before and regardless we can still pass standard types directly to jsonify.\nIf you [Armin] approve the idea and decide on an API, I'll try my hand at a patch if you like.", "issue_status": "Closed", "issue_reporting_time": "2011-04-19T08:25:20Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1659": {"issue_url": "https://github.com/pallets/flask/issues/219", "issue_id": "#219", "issue_summary": "before_request versus HTTP exceptions", "issue_description": "Member\nmitsuhiko commented on 18 Apr 2011\nRight now before_request cannot emit HTTP exceptions. This should be improved by allowing a certain useful subset of exception functionality there.", "issue_status": "Closed", "issue_reporting_time": "2011-04-18T14:37:59Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1660": {"issue_url": "https://github.com/pallets/flask/issues/217", "issue_id": "#217", "issue_summary": "Allow Header: appends an erroneous GET", "issue_description": "jzempel commented on 15 Apr 2011\nA GET request is allowed for any route, even when it is not in the listed methods. The result is a 404 for the GET request.\nFor example:\n@module.route('/foo', methods=[\"PUT\"])\ndef foo():\n    return Response(status=204)\nHere's the result of an OPTIONS request with the incorrect additional GET in the Allow header:\n$ curl -IX OPTIONS http://localhost:5000/foo\n\nHTTP/1.0 200 OK\nContent-Type: text/html; charset=utf-8\nAllow: PUT, HEAD, OPTIONS, GET\nContent-Length: 0\nServer: Werkzeug/0.6.2 Python/2.7\nDate: Fri, 15 Apr 2011 17:17:31 GMT\nA GET request responds with a 404:\n$ curl -IX GET http://localhost:5000/foo\n\nHTTP/1.0 404 NOT FOUND\nContent-Type: text/html\nContent-Length: 238\nServer: Werkzeug/0.6.2 Python/2.7\nDate: Fri, 15 Apr 2011 17:17:42 GMT", "issue_status": "Closed", "issue_reporting_time": "2011-04-15T17:21:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1661": {"issue_url": "https://github.com/pallets/flask/issues/216", "issue_id": "#216", "issue_summary": "flask has no programmatically-accessible version number", "issue_description": "foresto commented on 7 Apr 2011\nI need to work around a problem in flask that is fixed in the development code. I wish flask had something like sys.version_info that my code could check before enabling the workaround.", "issue_status": "Closed", "issue_reporting_time": "2011-04-06T21:36:55Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1662": {"issue_url": "https://github.com/pallets/flask/issues/212", "issue_id": "#212", "issue_summary": "Module.after_app_request causes exception (0.6.1)", "issue_description": "Contributor\nremyroy commented on 31 Mar 2011\nWhen trying to use Module.after_app_request, it causes the following exception:\nTraceback (most recent call last):\n  File \"/Users/remyroy/VirtualEnvs/issueproject/lib/python2.6/site-packages/flask/app.py\", line 889, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/Users/remyroy/VirtualEnvs/issueproject/lib/python2.6/site-packages/flask/app.py\", line 883, in wsgi_app\n    response = self.make_response(self.handle_exception(e))\n  File \"/Users/remyroy/VirtualEnvs/issueproject/lib/python2.6/site-packages/flask/app.py\", line 881, in wsgi_app\n    response = self.process_response(response)\n  File \"/Users/remyroy/VirtualEnvs/issueproject/lib/python2.6/site-packages/flask/app.py\", line 796, in process_response\n    response = handler(response)\nTypeError: after_request() takes no arguments (1 given)\nSteps to reproduce:\nCreate a new folder issueproject.\nCreate a file called issueproject.py in that folder with the following content:\n   # -_\\- coding: utf-8 -_-\n   from flask import Flask\n   from issueproject.views import views\n\napp = Flask(**name**)\n\napp.config.from_object('issueproject.config.Config')\napp.register_module(views)\n\nif **name** == \"**main**\":\n    app.run()\nCreate a sub folder issueproject.\nAdd a file called views.py in that sub folder with the following content:\n# -*- coding: utf-8 -*-\nfrom flask import Module\nviews = Module(__name__)\n\n@views.after_app_request\ndef after_request():\n    pass\n\n@views.route('/')\ndef index():\n    return 'hello world'\nAdd a file called config.py in that sub folder with the following content:\n   # -_\\- coding: utf-8 -_-\n\nclass Config(object):\n    DEBUG = True\n    TESTING = False\nRun the main issueproject.py with the following command line:\npython issueproject.py\nNavigate to http://localhost:5000/ .\nSee the exception.\nHere is the pip freeze from my environment:\nFlask==0.6.1\nJinja2==2.5.5\nPyRSS2Gen==1.0.0\nTwisted==8.2.0\nWerkzeug==0.6.2\naltgraph==0.6.8.dev\nbdist-mpkg==0.4.3.dev\nbonjour-py==0.3\ndecorator==3.2.1\njsonrpc==0.01\nmacholib==1.2.1.dev\nmercurial==1.8\nmodulegraph==0.7.2.dev\nnumpy==1.2.1\npy==1.4.2\npy2app==0.4.2\npyOpenSSL==0.7\npyobjc-core==2.2b3\npyobjc-framework-AddressBook==2.2b3\npyobjc-framework-AppleScriptKit==2.2b3\npyobjc-framework-Automator==2.2b3\npyobjc-framework-CFNetwork==2.2b3\npyobjc-framework-CalendarStore==2.2b3\npyobjc-framework-Cocoa==2.2b3\npyobjc-framework-Collaboration==2.2b3\npyobjc-framework-CoreData==2.2b3\npyobjc-framework-CoreText==2.2b3\npyobjc-framework-DictionaryServices==2.2b3\npyobjc-framework-ExceptionHandling==2.2b3\npyobjc-framework-FSEvents==2.2b3\npyobjc-framework-InputMethodKit==2.2b3\npyobjc-framework-InstallerPlugins==2.2b3\npyobjc-framework-InstantMessage==2.2b3\npyobjc-framework-InterfaceBuilderKit==2.2b3\npyobjc-framework-LatentSemanticMapping==2.2b3\npyobjc-framework-LaunchServices==2.2b3\npyobjc-framework-Message==2.2b3\npyobjc-framework-PreferencePanes==2.2b3\npyobjc-framework-PubSub==2.2b3\npyobjc-framework-QTKit==2.2b3\npyobjc-framework-Quartz==2.2b3\npyobjc-framework-ScreenSaver==2.2b3\npyobjc-framework-ScriptingBridge==2.2b3\npyobjc-framework-SearchKit==2.2b3\npyobjc-framework-SyncServices==2.2b3\npyobjc-framework-SystemConfiguration==2.2b3\npyobjc-framework-WebKit==2.2b3\npyobjc-framework-XgridFoundation==2.2b3\npyopencl==0.92\npytest==2.0.2\npython-dateutil==1.2\npytools==11\nvirtualenv==1.5.1\nwsgiref==0.1.2\nwxPython==2.8.8.1\nwxPython-common==2.8.8.1\nwxaddons==2.8.8.1\nxattr==0.5\nzope.interface==3.5.1", "issue_status": "Closed", "issue_reporting_time": "2011-03-31T02:23:08Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1663": {"issue_url": "https://github.com/pallets/flask/issues/211", "issue_id": "#211", "issue_summary": "template and static directory names are hard-coded", "issue_description": "foresto commented on 29 Mar 2011\nWhile porting to flask, I found that there is no easy way to make flask look for templates and static files in the directories my application already uses for those files. For various reasons, \"static\" and \"templates\" are not good choices for my app. I wish I could configure flask to use my existing ones.", "issue_status": "Closed", "issue_reporting_time": "2011-03-28T23:10:33Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1664": {"issue_url": "https://github.com/pallets/flask/issues/209", "issue_id": "#209", "issue_summary": "url_for does not list HOST:PORT on \".static\" entries", "issue_description": "JasonGiedymin commented on 22 Mar 2011\nI've got a module based Flask app and expected to see the http://host:port/asset.file when calling url_for(\".static\"...\nIt does everything right except not listing the port number.", "issue_status": "Closed", "issue_reporting_time": "2011-03-22T17:32:23Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1665": {"issue_url": "https://github.com/pallets/flask/issues/208", "issue_id": "#208", "issue_summary": "Testing, Request Contexts, Extensions and Documentation", "issue_description": "Member\nmitsuhiko commented on 21 Mar 2011\nRight now it's not quite clear to many people how the request context can be used in unittests. It's a little bit weird because of a bunch of different issues.\nan application in non debug mode will not propagate exceptions. There should be a TESTING mode that raises exceptions through and also closes down the context unless preserved.\nExtensions should not connect to databases and similar things in before_request but attach to the context as necessary by themselves.\nDocs should outline how testing is supposed to happen.", "issue_status": "Closed", "issue_reporting_time": "2011-03-20T20:39:03Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1666": {"issue_url": "https://github.com/pallets/flask/issues/207", "issue_id": "#207", "issue_summary": "Can we simplify Config.from_pyfile?", "issue_description": "bebeka3 commented on 15 Mar 2011\nWhy not:\nimp.load_source('', path)\ninstead of https://github.com/mitsuhiko/flask/blob/master/flask/config.py#L123", "issue_status": "Closed", "issue_reporting_time": "2011-03-15T12:07:44Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1667": {"issue_url": "https://github.com/pallets/flask/issues/205", "issue_id": "#205", "issue_summary": "PackageName==dev is required", "issue_description": "Member\nmitsuhiko commented on 15 Mar 2011\nRight now ExtensionName==dev is required to be approved however supporting that turns out to be surprisingly hard if you have changing repository URLs. We should either drop this requirement or provide a script that updates all existing descriptions with new names.\nRight now a lot of Pocoo stuff itself does not support ==dev.", "issue_status": "Closed", "issue_reporting_time": "2011-03-15T03:12:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1668": {"issue_url": "https://github.com/pallets/flask/issues/199", "issue_id": "#199", "issue_summary": "DispatcherMiddleware and application creating documentation", "issue_description": "Member\nmitsuhiko commented on 14 Mar 2011\nMultiple applications should be documented on top of dispatcher middleware and some other things.", "issue_status": "Closed", "issue_reporting_time": "2011-03-14T02:16:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1669": {"issue_url": "https://github.com/pallets/flask/issues/198", "issue_id": "#198", "issue_summary": "Config.from_envvar should be able to fail silent", "issue_description": "Member\nmitsuhiko commented on 14 Mar 2011\nRight now from_envvar does not support silent falling back. This should be fixed and implemented similar to from_pyfile.", "issue_status": "Closed", "issue_reporting_time": "2011-03-14T02:11:26Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1670": {"issue_url": "https://github.com/pallets/flask/issues/197", "issue_id": "#197", "issue_summary": "Extension Reviewing", "issue_description": "Member\nmitsuhiko commented on 14 Mar 2011\nApprove new extension reviewers and do a bunch of extension reviewing at pycon.", "issue_status": "Closed", "issue_reporting_time": "2011-03-14T01:35:22Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1671": {"issue_url": "https://github.com/pallets/flask/issues/192", "issue_id": "#192", "issue_summary": "log exceptions using app.logger", "issue_description": "orutherfurd commented on 4 Mar 2011\nI'm working on a project where we're running flask w/mod_wsgi in development and it'd be really nice to be able to route all errors the app's log (vs having some in the app's log and some in the apache log). Though the built-in dev server is more convenient, we're running mod_wsgi in development for consistency with production.", "issue_status": "Closed", "issue_reporting_time": "2011-03-04T18:03:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1672": {"issue_url": "https://github.com/pallets/flask/issues/191", "issue_id": "#191", "issue_summary": "Update the readme", "issue_description": "Contributor\nDasIch commented on 3 Mar 2011\nThe readme is horribly outdated, especially the 'Is it ready?' section. It should be updated to reflect the maturity of the project.\nAlso it mentions that Flask is intended for small projects which, even though it is true, probably scares away people who want to build a medium to large sized project, which is really not necessary.", "issue_status": "Closed", "issue_reporting_time": "2011-03-03T15:14:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1673": {"issue_url": "https://github.com/pallets/flask/issues/190", "issue_id": "#190", "issue_summary": "Should link to Werkzeug\u2019s docs prominently", "issue_description": "Contributor\nSimonSapin commented on 22 Feb 2011\nMany Flask questions on the mailing list or IRC are easily answered by reading Werkzeug documentation. Maybe Flask docs should make more obvious (and repeat everywhere) that many thing (Request and Response objects, routing, ...) are just inherited from Werkzeug, and link to the relevant documentation.", "issue_status": "Closed", "issue_reporting_time": "2011-02-22T14:41:11Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1674": {"issue_url": "https://github.com/pallets/flask/issues/189", "issue_id": "#189", "issue_summary": "{{ url_for('static', filename='style.css') }} is not working in Python 2.7.1", "issue_description": "pikhovkin commented on 21 Feb 2011\n{{ url_for('static', filename='style.css') }} is not working, gives error 500.\nPython 2.7.1, Flask 0.6.1\nTry to run minitwit.py", "issue_status": "Closed", "issue_reporting_time": "2011-02-21T15:28:51Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1675": {"issue_url": "https://github.com/pallets/flask/issues/188", "issue_id": "#188", "issue_summary": "Please review Flask-FlatPages and Flask-Static", "issue_description": "Contributor\nSimonSapin commented on 20 Feb 2011\nPlease review the Flask-FlatPages and Flask-Static extensions for approval.\nAll requirements are met as far as I can tell.", "issue_status": "Closed", "issue_reporting_time": "2011-02-20T12:46:46Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1676": {"issue_url": "https://github.com/pallets/flask/issues/183", "issue_id": "#183", "issue_summary": "Document Auth&Auth", "issue_description": "Member\nmitsuhiko commented on 18 Feb 2011\nPeople seem to be put off by the lack of auth&auth in Flask. Just because it's not there it does not mean it's hard. Documentation should show an example, maybe with Flask-SQLAlchemy.\nRelated feedback issues:\nhttp://feedback.flask.pocoo.org/message/54", "issue_status": "Closed", "issue_reporting_time": "2011-02-17T22:25:12Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1677": {"issue_url": "https://github.com/pallets/flask/issues/182", "issue_id": "#182", "issue_summary": "\"Nothing is rendered\"", "issue_description": "Member\nmitsuhiko commented on 18 Feb 2011\nThere seem to be a few situations left where \"nothing is rendered and nothings is displayed\" ends up for the user. This probably means that the debug mode was not enabled. We should probably add a stderr based error logging by default in production mode because of that or at least warn the user in the documentation more.\nRelated feedback issues:\nhttp://feedback.flask.pocoo.org/message/56", "issue_status": "Closed", "issue_reporting_time": "2011-02-17T22:23:57Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1678": {"issue_url": "https://github.com/pallets/flask/issues/181", "issue_id": "#181", "issue_summary": "Discouraging Foreword in Documentation", "issue_description": "Member\nmitsuhiko commented on 18 Feb 2011\nThe documentation is currently very discouraging to many new users. We shouldn't have written the documentation that way because nobody else does and honesty is not expected I guess :)\nRelated feedback issues:\nhttp://feedback.flask.pocoo.org/message/60", "issue_status": "Closed", "issue_reporting_time": "2011-02-17T22:22:33Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1679": {"issue_url": "https://github.com/pallets/flask/issues/180", "issue_id": "#180", "issue_summary": "Documentation not properly cross referenced", "issue_description": "Member\nmitsuhiko commented on 18 Feb 2011\nThe documentation should cross reference better. A few of these might be caused by the recent moving around inside Werkzeug.\nRelated feedback issues:\nhttp://feedback.flask.pocoo.org/message/92", "issue_status": "Closed", "issue_reporting_time": "2011-02-17T22:11:15Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1680": {"issue_url": "https://github.com/pallets/flask/issues/179", "issue_id": "#179", "issue_summary": "mod_wsgi Deployment Chapter is incomplete", "issue_description": "Member\nmitsuhiko commented on 18 Feb 2011\nWe have to expand the mod_wsgi deployment chapter.\nRelated feedback issues:\nhttp://feedback.flask.pocoo.org/message/98", "issue_status": "Closed", "issue_reporting_time": "2011-02-17T22:09:18Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1681": {"issue_url": "https://github.com/pallets/flask/issues/178", "issue_id": "#178", "issue_summary": "Flask Bugtracker is not obvious", "issue_description": "Member\nmitsuhiko commented on 18 Feb 2011\nPeople have a hard time finding the issue tracker apparently. We should probably link that from more prominent places.\nRelated feedback issues:\nhttp://feedback.flask.pocoo.org/message/103", "issue_status": "Closed", "issue_reporting_time": "2011-02-17T22:08:26Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1682": {"issue_url": "https://github.com/pallets/flask/issues/177", "issue_id": "#177", "issue_summary": "Tutorial should mention deployment with mod_wsgi or something else", "issue_description": "Member\nmitsuhiko commented on 18 Feb 2011\nMany people struggle with deploying a simple Flask application. The tutorial should show that and provide some helpful pointers to other parts of the documentation that handle deployment.\nRelated feedback issues:\nhttp://feedback.flask.pocoo.org/message/105", "issue_status": "Closed", "issue_reporting_time": "2011-02-17T22:07:21Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1683": {"issue_url": "https://github.com/pallets/flask/issues/176", "issue_id": "#176", "issue_summary": "Example Application too Basic", "issue_description": "Member\nmitsuhiko commented on 18 Feb 2011\nThere should be a larger tutorial that not only shows how to use Flask but also some extensions (maybe Flask-Script, Flask-SQLAlchemy and Flask-WTF) and modules (or what we will call them then)\nRelated feedback issues:\nhttp://feedback.flask.pocoo.org/message/115", "issue_status": "Closed", "issue_reporting_time": "2011-02-17T22:06:26Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1684": {"issue_url": "https://github.com/pallets/flask/issues/175", "issue_id": "#175", "issue_summary": "Error Handlers versus Werkzeug Exceptions", "issue_description": "Member\nmitsuhiko commented on 18 Feb 2011\nCurrently you can only declare error handler for Werkzeug exceptions. That's pretty much the case because what is not raised as a Werkzeug HTTP exception can't be catched. However since Python 2.4 is currently in the process of being phased out we could now finally make exceptions actual response objects if we prefer so it would make sense to keep that in mind and provide catching not only by code but also by any kind of instance check.\nThis also affects Werkzeug.\nRelated feedback issues:\nhttp://feedback.flask.pocoo.org/message/112", "issue_status": "Closed", "issue_reporting_time": "2011-02-17T21:51:42Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1685": {"issue_url": "https://github.com/pallets/flask/issues/174", "issue_id": "#174", "issue_summary": "after_request behavior regarding exceptions", "issue_description": "Member\nmitsuhiko commented on 18 Feb 2011\nafter_request is not executed if an exception happens in debug mode. This is annoying for databases because it requires that you restart the server to tear down the connection. Sometimes that's what you want, otherwise not. The original intention was that you want to continue having the transaction in the interactive debugger.\nGenerally however we need a separate decorator that always executes after request, even if an exception happened. Signals are one option, if that is what we want we should document it better. I would prefer a separate decorator however.\nRelated feedback issues:\nhttp://feedback.flask.pocoo.org/message/108\nhttp://feedback.flask.pocoo.org/message/76", "issue_status": "Closed", "issue_reporting_time": "2011-02-17T21:49:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1686": {"issue_url": "https://github.com/pallets/flask/issues/173", "issue_id": "#173", "issue_summary": "Documentation needs to explain Circular Dependencies Better", "issue_description": "Member\nmitsuhiko commented on 18 Feb 2011\nCurrently the documentation does not explain well enough how to deal with circular imports.\nRelated feedback issues:\nhttp://feedback.flask.pocoo.org/message/99\nhttp://feedback.flask.pocoo.org/message/18", "issue_status": "Closed", "issue_reporting_time": "2011-02-17T21:46:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1687": {"issue_url": "https://github.com/pallets/flask/issues/172", "issue_id": "#172", "issue_summary": "Module is a bad name / Bad behavior", "issue_description": "Member\nmitsuhiko commented on 18 Feb 2011\nCurrently Flask calls the blueprint for reusable thingies \"Module\" which is a terrible name because it already has a lot of meaning in Python. Because Modules also need to be pimped we should consider introducing a new concept altogether with a new name and phase out modules.\nFor all changes that are backwards incompatible we should consider that people hate updating their code so at the very least provide a script like the werkzeug import rewriter.\nRelated feedback issues:\nhttp://feedback.flask.pocoo.org/message/10\nhttp://feedback.flask.pocoo.org/message/21\nhttp://feedback.flask.pocoo.org/message/99\nhttp://feedback.flask.pocoo.org/message/117", "issue_status": "Closed", "issue_reporting_time": "2011-02-17T21:45:56Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1688": {"issue_url": "https://github.com/pallets/flask/issues/171", "issue_id": "#171", "issue_summary": "Reverse Relative/Absolute Linking for url_for", "issue_description": "Member\nmitsuhiko commented on 18 Feb 2011\nurl_for is currently the wrong way round compared to absolute imports. This also makes converting into larger applications hard when you suddenly introduce modules and a few views on the application itself remain (eg: static exports). The problem with \"reversing\" is that it breaks current code, so at the very least it should be an option.\nWe also have to investigate how many extensions this would affect.\nRelated feedback issues:\nhttp://feedback.flask.pocoo.org/message/7", "issue_status": "Closed", "issue_reporting_time": "2011-02-17T21:42:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1689": {"issue_url": "https://github.com/pallets/flask/issues/170", "issue_id": "#170", "issue_summary": "jsonify doesn't accept a list", "issue_description": "kwellman commented on 17 Feb 2011\nI was suprised to find that jsonify(['hello', 'world']) will raise a TypeError even though\n[\n\"hello\",\n\"world\"\n]\nis valid json.\nI think there should be a check to see if the first argument is a list instance and just do a json dump of the first argument if it is or something like that.", "issue_status": "Closed", "issue_reporting_time": "2011-02-16T20:30:58Z", "fixed_by": "#1671", "pull_request_summary": "Add support for serializing top-level arrays to JSON", "pull_request_description": "Member\njeffwidman commented on 30 Dec 2015\nMajor discussion of the issue is in #248.\nI'm tired of working around it, so just like to get it fixed.\nThis solution is similar to #1402 & #1209 with a few changes:\nI found it unexpected that in #1402 to convert a python list to a top level array you had to pass jsonify(*l). I changed it so that both jsonify(1,2,3) and jsonify([1,2,3]) serialize to [1,2,3] as I think that's the more intuitive behavior.\nPer the discussion in #1209 & #248, I didn't create a separate config variable to modify this behavior.\nI know it'd be nice to incorporate a fix for #1443 in here as well, but I don't fully understand the issue there. So let's get this merged, and then tackle that issue in a followup PR.\nFix #170, #248, #510, #673, #1177 and check one of the boxes on #1182", "pull_request_status": "Merged", "issue_fixed_time": "2016-01-25T15:16:51Z", "files_changed": [["3", "AUTHORS"], ["3", "CHANGES"], ["87", "docs/security.rst"], ["40", "flask/json.py"], ["98", "tests/test_helpers.py"]]}, "1690": {"issue_url": "https://github.com/pallets/flask/issues/169", "issue_id": "#169", "issue_summary": "trailing slash redirect doesn't work for route('/')", "issue_description": "foresto commented on 15 Feb 2011\nFlask's automatic redirects to add a trailing slash don't appear to work for the root view. This isn't noticeable when the application is mounted at the root of a domain, but mine is mounted in a subdirectory using mod-wsgi:\nWSGIScriptAlias /myapp /path/to/myapp/modwsgi/stub.py\nThe result is that when someone visits http://mysite/myapp, none of the application's relative urls work. (This is expected if the trailing slash is missing, because a relative url like static/image.png means something different depending on whether the current page is http://foo/bar or http://foo/bar/)", "issue_status": "Closed", "issue_reporting_time": "2011-02-14T21:32:16Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1691": {"issue_url": "https://github.com/pallets/flask/issues/168", "issue_id": "#168", "issue_summary": "jsonify and return a list", "issue_description": "tzulberti commented on 13 Feb 2011\nI tryed to do the following:\nterm = request.args.get('term')\nquery = db.session.query(Class)\nquery = query.filter(Class.name.like('%s%%' % term))\nreturn jsonify ([{'label' : klass.name } for klass in query.all()])\nand it returned the following excpetion:\nFile \"C:\\Users\\tzulberti\\envs\\uml\\lib\\site-packages\\flask-0.6.1-py2.7.egg\\flask\\app.py\", line 889, in call\nreturn self.wsgi_app(environ, start_response)\nFile \"C:\\Users\\tzulberti\\envs\\uml\\lib\\site-packages\\flask-0.6.1-py2.7.egg\\flask\\app.py\", line 879, in wsgi_app\nresponse = self.make_response(self.handle_exception(e))\nFile \"C:\\Users\\tzulberti\\envs\\uml\\lib\\site-packages\\flask-0.6.1-py2.7.egg\\flask\\app.py\", line 876, in wsgi_app\nrv = self.dispatch_request()\nFile \"C:\\Users\\tzulberti\\envs\\uml\\lib\\site-packages\\flask-0.6.1-py2.7.egg\\flask\\app.py\", line 695, in dispatch_request\nreturn self.view_functionsrule.endpoint\nFile \"E:\\Proyectos\\pywebuml\\src\\pywebuml\\web.py\", line 50, in autocomplete_search\nreturn jsonify([{'label' : klass.name } for klass in query.all()])\nFile \"C:\\Users\\tzulberti\\envs\\uml\\lib\\site-packages\\flask-0.6.1-py2.7.egg\\flask\\helpers.py\", line 106, in jsonify\nreturn current_app.response_class(json.dumps(dict(_args, *_kwargs),\nValueError: dictionary update sequence element #0 has length 1; 2 is required\nBut when using from json import dump the result of the query is returned without any problem.\nValueError: dictionary update sequence element #0 has length 1; 2 is required", "issue_status": "Closed", "issue_reporting_time": "2011-02-12T20:00:14Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1692": {"issue_url": "https://github.com/pallets/flask/issues/166", "issue_id": "#166", "issue_summary": "Update Extension List", "issue_description": "Member\nmitsuhiko commented on 6 Feb 2011\nThere are tons of new extensions that need to be reviewed :)\nhttp://pypi.python.org/pypi?%3Aaction=search&term=flask&submit=search", "issue_status": "Closed", "issue_reporting_time": "2011-02-06T05:06:20Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1693": {"issue_url": "https://github.com/pallets/flask/issues/164", "issue_id": "#164", "issue_summary": "Wrong \"Date\" http header, breaks clientside caching for static files, lots of 304 responses", "issue_description": "Contributor\nThomasWaldmann commented on 4 Feb 2011\nquoting from flask.helpers.send_file:\n# if we know the file modification date, we can store it as the\n# current time to better support conditional requests. Werkzeug\n# as of 0.6.1 will override this value however in the conditional\n# response with the current time. This will be fixed in Werkzeug\n# with a new release, however many WSGI servers will still emit\n# a separate date header.\nif mtime is not None:\nrv.date = int(mtime)\nThese 2 lines break clientside caching because they emit a wrong Date header.\nAs by rfc 2616, the Date header should tell when the Response originated from\nthe server (== current server time), but this code sets it to the mtime of\nthe static file (== some time in the past).\nThis obviously at least breaks Firefox 3.6, because it'll always consider its\ncache entry as stale then (even when the Expires date and max-age would\nnormally not lead to staleness).\nWrong behaviour:\n1st request -> 200, all further requests (directly afterwards) -> 304\nCorrect behaviour (wrong code removed):\n1st request -> 200,\n(NO further requests happening until Expires is reached),\nnext request (after expiry) -> 304\nWrong behaviour was introduced after 0.6.2 due to unknown reasons by:\n85ff63c\nI don't see how this shall \"better support conditional requests\", it rather\nlooks like breaking caching and doing lots of unneeded requests.", "issue_status": "Closed", "issue_reporting_time": "2011-02-04T03:00:55Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1694": {"issue_url": "https://github.com/pallets/flask/issues/163", "issue_id": "#163", "issue_summary": "control of Session hash_method, serialization_method, expiration behavior", "issue_description": "foresto commented on 30 Jan 2011\n[Revised after reading the code more carefully.]\nI'd like to use Flask sessions with a few tweaks:\njson instead of pickle\nsha256 or sha512 instead of sha1\nexpiration when the browser closes or after an idle time limit, whichever comes first: save_cookie(session_expires=something, expires=None)\nautomatically updated last-request time, to support the idle time limit\nIn the absence of direct support of these features, I think I can accomplish them with a SecureCookie/Session subclass. It looks like I can make Flask use my subclass by overriding Flask.open_session(), but since the existing method contains slightly more logic than simply instantiating a Session, I'm concerned that overriding it might introduce strange behavior with future versions of Flask\nWould you consider exposing an official means of using a custom Session/SecureCookie class? Maybe even turning some of the above tweaks into Flask configuration options?", "issue_status": "Closed", "issue_reporting_time": "2011-01-30T02:13:08Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1695": {"issue_url": "https://github.com/pallets/flask/issues/157", "issue_id": "#157", "issue_summary": "One-Click-Getting-Started Script", "issue_description": "Member\nmitsuhiko commented on 7 Jan 2011\nMany people don't like to deal with virtualenv and other things to get started. Maybe it would be interesting to play around with various concepts of reducing the installation time to executing a single script that creates a tarball with flask and all deps in there so that you can just drop it into a folder and are done.", "issue_status": "Closed", "issue_reporting_time": "2011-01-07T15:15:47Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1696": {"issue_url": "https://github.com/pallets/flask/issues/155", "issue_id": "#155", "issue_summary": "OpenID login for AOL broken in Flask website.", "issue_description": "godDLL commented on 5 Jan 2011\nLogging in to flask.pocoo.org with http://openid.aol.com/username fails consistently for me. After being asked to share my nickname by AOL I just never get redirected back to Flask site.\nSafari Version 5.0.3 (6533.19.4)\nMacOS X 10.6.5", "issue_status": "Closed", "issue_reporting_time": "2011-01-04T23:33:18Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1697": {"issue_url": "https://github.com/pallets/flask/issues/153", "issue_id": "#153", "issue_summary": "Context processor use is problematic.", "issue_description": "skorokithakis commented on 3 Jan 2011\nImplementing Facebook authentication, I need a context processor that will insert a current_user variable to the template context by performing some operations on the cookies/request. Since context processors need the app object for the decorator, they are rather hard to put in another file, and this feels unclean.\nCould something be done to enable putting context processors in a context_processors.py file by themselves, short of importing and decorating them one by one?", "issue_status": "Closed", "issue_reporting_time": "2011-01-03T02:39:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1698": {"issue_url": "https://github.com/pallets/flask/issues/152", "issue_id": "#152", "issue_summary": "Trailing slash URL redirect does not include the query string.", "issue_description": "skorokithakis commented on 1 Jan 2011\nWhen redirecting, for example, \"/home\" to \"/home/\", the query string is discarded. For example, \"/home?foo=bar\" is redirected to \"/home/\" instead of \"/home/?foo=bar\", as expected.", "issue_status": "Closed", "issue_reporting_time": "2011-01-01T14:56:37Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1699": {"issue_url": "https://github.com/pallets/flask/issues/150", "issue_id": "#150", "issue_summary": "Global \"messages\" when using flash()", "issue_description": "eddiehl commented on 12 Dec 2010\nWhen using the flash() function I use get_flashed_messages() in the template for display. Today when attempting to use the variable \"messages\" in my template I found the flashed messages are exposed there as a global in the templates. That's probably ok but unless I missed it, this is not documented in the flash() documentation: http://flask.pocoo.org/docs/api/#message-flashing or the jinja context here: http://flask.pocoo.org/docs/templating/\nMy \"messages\" were hidden completely by the (empty) flash messages until I realized what might be happening.\nAnyhow, thanks for the great tools!", "issue_status": "Closed", "issue_reporting_time": "2010-12-12T00:16:10Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1700": {"issue_url": "https://github.com/pallets/flask/issues/149", "issue_id": "#149", "issue_summary": "UnicodeEncodeError when script is in a folder with non-ascii characters in the name", "issue_description": "jjunho commented on 9 Dec 2010\nVery very nice work done in Flask! Really liked it!\nHowever, I was trying to run my Flask script under a subfolder of my Desktop folder in Ubuntu. Since my system is set up for Portuguese (I'm Brazilian), the default name for the folder is \"\u00c1rea de Trabalho\". I was getting UnicodeEncodeError every time I tried to run the example in \"11.7 Uploading Files\". (At least it was really good to teach me how to use the Flask debugger!) I went around, examining where the error was coming from, and, finally, got to \"File \"/usr/local/lib/python2.6/dist-packages/Flask-0.6-py2.6.egg/flask/helpers.py\", line 350, in send_file\", when the function adler32 uses the unicode string. Then, I just tried a quick \"from zlib import adler32; adler32(u'\u00c1')\" to realize that zlib doesn't allow unicode strings, returning a \"UnicodeEncodeError: 'ascii' codec can't encode character u'\\xc1' in position 0: ordinal not in range(128)\".\nOf course I can move my script to another folder, but it would be nice not having to think about that in the future, especially when it is said that \"Flask like Jinja2 and Werkzeug is totally Unicode based when it comes to text\".\nSorry if I don't make much sense... it's almost 3:00am around here...\nCongrats for the great job on Flask!\njjunho", "issue_status": "Closed", "issue_reporting_time": "2010-12-09T17:51:54Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1701": {"issue_url": "https://github.com/pallets/flask/issues/148", "issue_id": "#148", "issue_summary": "Allow custom TestClient", "issue_description": "danjac commented on 4 Dec 2010\nIt would be useful to make the test client class an overridable property (as is currently the case with response_class).\nIt would then be possible to insert a custom TestClient class with additional methods (for example, a \"login\" method) in unit tests.\nFor example:\napp.test_client_class = MyCustomClient\nclient = app.test_client() ", "issue_status": "Closed", "issue_reporting_time": "2010-12-03T18:42:28Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1702": {"issue_url": "https://github.com/pallets/flask/issues/147", "issue_id": "#147", "issue_summary": "pypy 1.4 and Flask Sessions", "issue_description": "Contributor\nsebest commented on 27 Nov 2010\nHello,\njust tried pypy 1.4 and go a strange bug when using Flask's sessions:\nhere is the traceback:\nhttp://paste.pocoo.org/show/296447/\na simple app that trigger the bug:\nhttp://paste.pocoo.org/show/296464/", "issue_status": "Closed", "issue_reporting_time": "2010-11-26T23:48:37Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1703": {"issue_url": "https://github.com/pallets/flask/issues/143", "issue_id": "#143", "issue_summary": "Pointless example for Signal.connected_to", "issue_description": "Contributor\ndag commented on 10 Nov 2010\nThe example last in this section is pointless because the recorded list is never yielded and it is not reachable from anywhere. connected_to yields None.\ndef captured_templates(app):\n    recorded = []\n    def record(template, context):\n        recorded.append((template, context))\n    return template_rendered.connected_to(record, app)\nIt's still a meaningful pattern for like what Flask-Testing does, appending to self.templates which in deed is reachable from tests. What would be a sensible rewrite?", "issue_status": "Closed", "issue_reporting_time": "2010-11-09T21:30:12Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1704": {"issue_url": "https://github.com/pallets/flask/issues/141", "issue_id": "#141", "issue_summary": "Module-local errorhandler", "issue_description": "Contributor\ndag commented on 5 Nov 2010\nThere's probably a reason this isn't currently supported, but in any case it would be neat if we could have errorhandlers local to a flask.Module, that don't affect the application globally.", "issue_status": "Closed", "issue_reporting_time": "2010-11-04T20:58:11Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1705": {"issue_url": "https://github.com/pallets/flask/issues/140", "issue_id": "#140", "issue_summary": "Make tuple to make_response handle response objects", "issue_description": "Contributor\ndag commented on 5 Nov 2010\nMainly so that this works:\nreturn jsonify(error=\"I pity the foo'!\"), 400\nThis would result in what now requires:\nreturn Response(jsonify(error=\"I pity the foo'!.\").data,\n                mimetype='application/json', status=400)", "issue_status": "Closed", "issue_reporting_time": "2010-11-04T20:55:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1706": {"issue_url": "https://github.com/pallets/flask/issues/134", "issue_id": "#134", "issue_summary": "test_request_context should trigger before_request and after_request", "issue_description": "Contributor\ndag commented on 27 Oct 2010\nAm I missing a reason why this isn't the case or is it simply a bug?", "issue_status": "Closed", "issue_reporting_time": "2010-10-27T16:19:47Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1707": {"issue_url": "https://github.com/pallets/flask/issues/133", "issue_id": "#133", "issue_summary": "signals.rst", "issue_description": "batok commented on 25 Oct 2010\nThis ...\nExample subscriber::\n    def log_template_renders(sender, template, context):\n        sender.logger.debug('Rendering template \"%s\" with context %s',\n                            template.name or 'string template',\n                            context)\n\n    from flask import request_started\n    request_started.connect(log_template_renders, app)\n... the two last lines must be...\nfrom flask import template_rendered\ntemplate_rendered.connect( log_template:renders, app)", "issue_status": "Closed", "issue_reporting_time": "2010-10-25T15:19:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1708": {"issue_url": "https://github.com/pallets/flask/issues/131", "issue_id": "#131", "issue_summary": "Modules and Lazy Loading", "issue_description": "Member\nmitsuhiko commented on 25 Oct 2010\nThe new module system should support lazy loading and still provide early access to templates and static files.", "issue_status": "Closed", "issue_reporting_time": "2010-10-25T08:29:08Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1709": {"issue_url": "https://github.com/pallets/flask/issues/129", "issue_id": "#129", "issue_summary": "Thoughts about the fabric docs", "issue_description": "Contributor\ndag commented on 22 Oct 2010\nMaybe use of one of these should be suggested:\nsetup.py egg_info ...\n--tag-svn-revision (-r)  Add subversion revision ID to version number\n--tag-date (-d)          Add date stamp (e.g. 20050528) to version number\n--tag-build (-b)         Specify explicit tag to add to version number\nA problem with this is that setup.py --fullname does not include the tag. Not really an issue with -b, a useful value might be git log -1 --format=%h for example.\nAnother thought: why go through all that trouble to extract the tarball?\neasy_install myapp.tar.gz\nAlso: why not call pack() in deploy?", "issue_status": "Closed", "issue_reporting_time": "2010-10-22T17:47:32Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1710": {"issue_url": "https://github.com/pallets/flask/issues/126", "issue_id": "#126", "issue_summary": "Provide a correct initial environment based on app's config", "issue_description": "Contributor\ns0undt3ch commented on 21 Oct 2010\nRecently I provided a fix for flask-script https://bitbucket.org/s0undt3ch/flask-script/changeset/6e7141f2d142 which provides a correct environment for test apps based on their configuration.\nI think this fix should be implemented instead on Flask itself.", "issue_status": "Closed", "issue_reporting_time": "2010-10-21T06:58:29Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1711": {"issue_url": "https://github.com/pallets/flask/issues/123", "issue_id": "#123", "issue_summary": "issue in test_request_context method of Flask class", "issue_description": "jqxl0205 commented on 12 Oct 2010\nWhen SERVER_NAME in conf is not None and different to \"localhost\", app.test_request_context() will be failure.\nInstead, we can do like this\n  environ_overrides=dict(HTTP_HOST=app.conf['SERVER_NAME'],\n                        SERVER_NAME=app.conf['SERVER_NAME'])\n\n  app.text_request_context(environ_overrides=environ_overrides)\nThat's OK. Just look at above there is no issue in test_request_context, but what can extensions which use test_request_context do ? It is not a good idea if it handled by themselves.\nFor example, in Flask-Script's shell command, it will make a text_request_context and run shell in this context. If Flask-Script don't deal with SERVER_NAME environ, shell command will fail.\nI believe that Flask should do something for that because SERVER_NAME is imported by Flask and using in create_url_adapter method and others.", "issue_status": "Closed", "issue_reporting_time": "2010-10-11T19:24:53Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1712": {"issue_url": "https://github.com/pallets/flask/issues/116", "issue_id": "#116", "issue_summary": "Add domain to module", "issue_description": "thadeusb commented on 10 Sep 2010\nIt should be possible to assign a module to a domain. Currently you can only set subdomain.", "issue_status": "Closed", "issue_reporting_time": "2010-09-10T05:36:56Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1713": {"issue_url": "https://github.com/pallets/flask/issues/114", "issue_id": "#114", "issue_summary": "A default response body", "issue_description": "sublee commented on 7 Sep 2010\nFirst, I used this code in a private page:\nheaders = {\"WWW-Authenticate\": 'Basic realm=\"Login Required\"'}\nreturn Response(status=401, headers=headers)\nIt works well with werkzeug default container, but it has a problem with meinheld container.\nWhen I request the page on meinheld, I got an \"Internal Server Error\" and error message:\n[error] pid ..., File \"meinheld/server/response.c\", line 605 :TypeError: response item must be a string\nI tried to find the cause and I found it.\nFlask's Response class has a response parameter, it has the default value of None.\nI think that a response body in the WSGI interface must be a basestring. So I suggest\nto change response parameter's default value to \"\"(a blank string).", "issue_status": "Closed", "issue_reporting_time": "2010-09-07T01:50:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1714": {"issue_url": "https://github.com/pallets/flask/issues/111", "issue_id": "#111", "issue_summary": "`static` path has a problem in the module which doesn't have a subdomain.", "issue_description": "sublee commented on 25 Aug 2010\nVersion: 0.7dev\nFirst, I supposed that the domain is \"mydomain.org\".\nsource tree:\nmywebsite\n__init__.py\nmywww\n__init__.py\nstatic\ntest.txt\nstatic\ntest.txt\nmywebsite/init.py:\nfrom flask import Flask\nimport mywww\napp = Flask(__name__)\napp.config[\"SERVER_NAME\"] = \"mydomain.org\"\napp.register_module(mywww.app)\nmywebsite/static/test.txt:\nFailure...\nmywebsite/mywww/init.py:\nfrom flask import Module\napp = Module(__name__) # This module hasn't a subdomain.\n                       # It should route \"http://mydomain.org/\" not \"http://sub.mydomain.org/\"\n@app.route(\"/\")\ndef index():\n    return \"ok\", 200\nmywebsite/mywww/static/test.txt:\nSuccess!\nWhile running this application, a result of http://mydomain.org/ is ok. Yes, it's expected. But a result of http://mydomain.org/static/test.txt is Failure.... It is routed mywebsite/static/test.txt, not mywebsite/mywww/static/test.txt. It is not expected.\nIf mywww has a subdomain, there is no problem.\napp = Module(__name__, subdomain=\"sub\")\nhttp://sub.mydomain.org/static/test.txt puts Success!.", "issue_status": "Closed", "issue_reporting_time": "2010-08-25T04:44:15Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1715": {"issue_url": "https://github.com/pallets/flask/issues/110", "issue_id": "#110", "issue_summary": "getting raw POST data for whatever mimetype", "issue_description": "Contributor\nsebest commented on 25 Aug 2010\nHello,\nit seems that request.data only has content if the mime type is unknown\nI think it would be handy to be able to access the raw POST data even if the mime type is know:\nfor example i m POSTing a JSON string, but i don t want flask to unserialize it because i'll do it later.\nThe same with curl -d that add a mime type of application/x-www-form-urlencoded so, request.data is empty", "issue_status": "Closed", "issue_reporting_time": "2010-08-25T01:08:42Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1716": {"issue_url": "https://github.com/pallets/flask/issues/109", "issue_id": "#109", "issue_summary": "[doc] uploaded file validation example", "issue_description": "n1k0 commented on 22 Aug 2010\nThe file uploading section of the documentation implicitly assumes in the provided example that you can safely validate an uploaded file by simply validating its filename extension. I think it's somewhat dangerous, and an example with mimetype validation should be used instead (or maybe just by adding a warning notice).", "issue_status": "Closed", "issue_reporting_time": "2010-08-22T10:00:56Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1717": {"issue_url": "https://github.com/pallets/flask/issues/108", "issue_id": "#108", "issue_summary": "`url_for(\"static\", ...)` with `subdomain` problem", "issue_description": "sublee commented on 20 Aug 2010\nThe version is 0.6.\nI made a flask.Module with subdomain option.\nfrom flask import Module\napp = Module(__name__, subdomain=\"sub\")\nAnd when I use url_for(\"static\", ...) in a template, it returns \"http://example.net/static\" instead of \"/static\"(\"http://sub.example.net/static\"). So I added some code for debugging to flask/app.py(line 512).\nprint options\nResult is:\n{'endpoint': 'static'}\n{'subdomain': 'sub', 'endpoint': 'sub.favicon'}\n{'subdomain': 'sub', 'endpoint': 'sub.index'}\n...\nThe url rule for static, which is added automatically doesn't have a subdomain option.", "issue_status": "Closed", "issue_reporting_time": "2010-08-20T07:22:53Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1718": {"issue_url": "https://github.com/pallets/flask/issues/107", "issue_id": "#107", "issue_summary": "Fabric deploy script `docs/patterns/fabric.rst` does not work (for me)", "issue_description": "eugenkiss commented on 19 Aug 2010\nI was trying to get deployment with fabric and distribute done like explained in the docs. However the deployment script always aborted with this error message\nwarning: manifest_maker: standard file 'setup.py' not found\nSo I tried for hours to find the problem and it seems that I have found it (although it is possible that the documented script works fine on other installations - I can only talk about my).\nThis is how the source code looks in the deploy function right now:\n#...\nwith cd('/tmp/yourapplication'):\n    run('tar xzf /tmp/yourapplication.tar.gz')\n# now setup the package with our virtual environment's\n# python interpreter\nrun('/var/www/yourapplication/env/bin/python setup.py install')\n#...\nI had to change it like this to make the script work:\n#...\nwith cd('/tmp/yourapplication'):\n    run('tar xzf /tmp/yourapplication.tar.gz')\n# You have to be inside the folder where 'setup.py' resides\n# in order to make it work\nwith cd('/tmp/yourapplication/%s' % dist):\n    # now setup the package with our virtual environment's\n    # python interpreter\n    run('/var/www/yourapplication/env/bin/python setup.py install')\n#...\nPlus I changed run('mkdir /tmp/yourapplication') to run('mkdir -p /tmp/yourapplication') because after a failed deployment the dir has not been removed and the next deployment attempt prematurely ended \"because the directory already existed\"", "issue_status": "Closed", "issue_reporting_time": "2010-08-19T13:58:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1719": {"issue_url": "https://github.com/pallets/flask/issues/106", "issue_id": "#106", "issue_summary": "Typing error in docs/patterns/fabric.rst", "issue_description": "eugenkiss commented on 19 Aug 2010\nInside the deploy method\n# upload the source tarball to the temporary folder on the server\nput('sdist/%s.tar.gz' % dist, '/tmp/yourapplication.tar.gz')\nshould be\n# upload the source tarball to the temporary folder on the server\nput('dist/%s.tar.gz' % dist, '/tmp/yourapplication.tar.gz')\n(there is an s before dist)", "issue_status": "Closed", "issue_reporting_time": "2010-08-18T19:55:31Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1720": {"issue_url": "https://github.com/pallets/flask/issues/105", "issue_id": "#105", "issue_summary": "`pydoc flask` [or vars(flask)] fails", "issue_description": "zarf commented on 6 Aug 2010\nSteps to reproduce:\n(werk)mini:~ fz$ python\nPython 2.6.1 (r261:67515, Dec 17 2009, 00:59:15) \n[GCC 4.2.1 (Apple Inc. build 5646)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import pydoc, flask\n>>> pydoc.pager = lambda text: pydoc.pipepager(text, 'cat')\n>>> help(flask)\nHelp on package flask:\n\nflask = <module 'flask' from '/Volumes/Home/FZ/.local/repo/flask/flask/__init__.pyc'>\n>>> \nNo top-level documentation! Same problem with help(flask.app), help(flask.globals), help(flask.helpers), also via the pydoc -p web server. I found that it hinges on this:\n>>> pydoc.text.docmodule(flask)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/Volumes/Home/FZ/.local/lib/python2.6/site-packages/pydoc.py\", line 1100, in docmodule\n    contents.append(self.docother(value, key, name, maxlen=70))\n  File \"/Volumes/Home/FZ/.local/lib/python2.6/site-packages/pydoc.py\", line 1299, in docother\n    repr = self.repr(object)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/repr.py\", line 24, in repr\n    return self.repr1(x, self.maxlevel)\n  File \"/Volumes/Home/FZ/.local/lib/python2.6/site-packages/pydoc.py\", line 955, in repr1\n    return cram(stripid(repr(x)), self.maxother)\n  File \"/Volumes/Home/FZ/.local/env/werk/lib/python2.6/site-packages/werkzeug/local.py\", line 321, in __repr__\n    obj = self._get_current_object()\n  File \"/Volumes/Home/FZ/.local/env/werk/lib/python2.6/site-packages/werkzeug/local.py\", line 306, in _get_current_object\n    return self.__local()\n  File \"/Volumes/Home/FZ/.local/repo/flask/flask/globals.py\", line 17, in <lambda>\n    current_app = LocalProxy(lambda: _request_ctx_stack.top.app)\nAttributeError: 'NoneType' object has no attribute 'app'\n>>> \nand can be fixed by the following change (which I hope won't cause breakage elsewhere):\ndiff --git a/flask/globals.py b/flask/globals.py\nindex aac4655..0a17f56 100644\n--- a/flask/globals.py\n+++ b/flask/globals.py\n@@ -14,7 +14,8 @@ from werkzeug import LocalStack, LocalProxy\n\n # context locals\n _request_ctx_stack = LocalStack()\n-current_app = LocalProxy(lambda: _request_ctx_stack.top.app)\n-request = LocalProxy(lambda: _request_ctx_stack.top.request)\n-session = LocalProxy(lambda: _request_ctx_stack.top.session)\n-g = LocalProxy(lambda: _request_ctx_stack.top.g)\n+_top = _request_ctx_stack.top\n+current_app = LocalProxy(lambda: _top.app if _top else None)\n+request = LocalProxy(lambda: _top.request if _top else None)\n+session = LocalProxy(lambda: _top.session if _top else None)\n+g = LocalProxy(lambda: _top.g if _top else None)\nThen one gets as expected, e.g.\n>>> help(flask.globals)\nHelp on module flask.globals in flask:\n\nNAME\n    flask.globals\n\nFILE\n    /Volumes/Home/FZ/.local/repo/flask/flask/globals.py\n\nDESCRIPTION\n    flask.globals\n    ~~~~~~~~~~~~~\n\n    Defines all the global objects that are proxies to the current\n    active context.\n\n    :copyright: (c) 2010 by Armin Ronacher.\n    :license: BSD, see LICENSE for more details.\n\nDATA\n    current_app = None\n    g = None\n    request = None\n    session = None", "issue_status": "Closed", "issue_reporting_time": "2010-08-06T12:25:47Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1721": {"issue_url": "https://github.com/pallets/flask/issues/104", "issue_id": "#104", "issue_summary": "send_file in flask 0.6 issues", "issue_description": "Contributor\nThomasWaldmann commented on 6 Aug 2010\nSee there:\nhttp://hg.moinmo.in/moin/2.0-dev/rev/58eb8f978188\nhttp://hg.moinmo.in/moin/2.0-dev/rev/25de9bb78a9f\nPlease apply upstream, having to have patched files is obviously a pain for packaging.", "issue_status": "Closed", "issue_reporting_time": "2010-08-06T10:09:11Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1722": {"issue_url": "https://github.com/pallets/flask/issues/103", "issue_id": "#103", "issue_summary": "Change the static folder", "issue_description": "Member\nmitsuhiko commented on 4 Aug 2010\nIt should be possible to change the location/name of the static folder. A new keyword parameter to the package bound object should be added for that.\n# just change the URL rule\nmodule = Module(__name__, static_path='/_static')\n\n# change the static folder's name and URL rule\nmodule = Module(__name__, static_folder='media')\n--> module = Module(__name__, static_path='/media', static_folder='media')\n\n# a nested folder and it's URL rule:\nmodule = Module(__name__, static_folder='assets/shared')\n--> module = Module(__name__, static_path='/shared', static_folder='assets/shared')\nPaths obviously relative to the root_path of the object.", "issue_status": "Closed", "issue_reporting_time": "2010-08-04T14:47:18Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1723": {"issue_url": "https://github.com/pallets/flask/issues/102", "issue_id": "#102", "issue_summary": "Wrong import in Errorhandling", "issue_description": "aop commented on 4 Aug 2010\nThe example at \"Logging to file\" has\n'from logging.handlers import TheHandlerYouWant'\nthough it should be\n'from logging import TheHandlerYouWant'", "issue_status": "Closed", "issue_reporting_time": "2010-08-03T21:53:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1724": {"issue_url": "https://github.com/pallets/flask/issues/101", "issue_id": "#101", "issue_summary": "Implement jinja's ModuleLoader", "issue_description": "ghost commented on 3 Aug 2010\nIt would be interesting to implement ModuleLoader in flask. It would make a huge difference in GAE response times for flask applications.", "issue_status": "Closed", "issue_reporting_time": "2010-08-03T17:49:05Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1725": {"issue_url": "https://github.com/pallets/flask/issues/100", "issue_id": "#100", "issue_summary": "Inconsistency in docs/testing.rst", "issue_description": "eugenkiss commented on 1 Aug 2010\nThe first time the FlaskrTestCase source code is shown the setUp method looks like this:\ndef setUp(self):\n    self.db_fd, flaskr.DATABASE = tempfile.mkstemp()\n    self.app = flaskr.app.test_client()\n    flaskr.init_db()\nNote self.db_fd, flaskr.DATABASE = tempfile.mkstemp()\nThe second time it looks like this:\ndef setUp(self):\n    self.db_fd, flaskr.app.config['DATABASE'] = tempfile.mkstemp()\n    self.app = flaskr.app.test_client()\n    flaskr.init_db()\nNote self.db_fd, flaskr.app.config['DATABASE'] = tempfile.mkstemp()\nNow I think the first version is not that good because it relies on the settings to be declared inside flaskr.py. I tried to put the settings in another file and load them with app.config.from_object(settings) only to find out that my real database is used because obviously blog.DATABASE is not read at all in flaskr.py.\nNote that there is the same problem with the tearDown method.", "issue_status": "Closed", "issue_reporting_time": "2010-07-31T21:05:44Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1726": {"issue_url": "https://github.com/pallets/flask/issues/99", "issue_id": "#99", "issue_summary": "Section 3.8 Sessions - bug in example of escaping session value", "issue_description": "truedat101 commented on 31 Jul 2010\nDescription\nNeed to qualify the call to escape() with Markup class.\nReference\nhttp://flask.pocoo.org/docs/quickstart/#sessions\n3.8 Sessions\nBesides the request object there is also a second object called session that allows you to store information specific to a user from one request to the next. This is implemented on top of cookies for you and signs the cookies cryptographically. What this means is that the user could look at the contents of your cookie but not modify it, unless he knows the secret key used for signing.\nIn order to use sessions you have to set a secret key. Here is how sessions work:\nThe here mentioned escape() does escaping for you if you are not using the template engine (like in this example).\nHow to generate good Secret Keys\nfrom flask import session, redirect, url_for, escape\n@app.route(\u2019/\u2019) def index():\nif \u2019username\u2019 in session: return \u2019Logged in as %s\u2019 % escape(session[\u2019username\u2019])\nreturn \u2019You are not logged in\u2019\nBug Fix\n---- replace line: if \u2019username\u2019 in session: return \u2019Logged in as %s\u2019 % escape(session[\u2019username\u2019])\n---- with: if \u2019username\u2019 in session: return \u2019Logged in as %s\u2019 % Markup.escape(session[\u2019username\u2019])", "issue_status": "Closed", "issue_reporting_time": "2010-07-30T19:13:47Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1727": {"issue_url": "https://github.com/pallets/flask/issues/98", "issue_id": "#98", "issue_summary": "Response object mismatch", "issue_description": "pelletier commented on 28 Jul 2010\nIn Response object documentation page, the parameter 'status_code' is mentioned. It looks like its real name is 'status'.", "issue_status": "Closed", "issue_reporting_time": "2010-07-28T08:10:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1728": {"issue_url": "https://github.com/pallets/flask/issues/97", "issue_id": "#97", "issue_summary": "Automagic OPTIONS: incorrect Allow results for routes with multiple handlers", "issue_description": "joh commented on 28 Jul 2010\nIf an URL rule has more than one handlers for different HTTP methods (typical for RESTful apps), OPTIONS will incorrectly report only the methods of the first handler.\nConsider the following example:\n@app.route('/things/<thing>')\ndef one_thing(thing):\n    return \"it's a \" + thing + \"!\"\n\n@app.route('/things/<thing>', methods=['PUT'])\ndef put_thing(thing):\n    return \"Thanks for the thing.\"\nPerforming an OPTIONS request on /things/foo incorrectly reports only the methods of the first handler:\n$ curl -IXOPTIONS http://localhost:8080/things/foo\nHTTP/1.0 200 OK\nContent-Type: text/html; charset=utf-8\nAllow: HEAD, OPTIONS, GET\n...\nWerkzeug gets it right though, if an invalid method is attempted:\n$ curl -IXFOO http://localhost:8080/things/foo\nHTTP/1.0 405 METHOD NOT ALLOWED\nContent-Type: text/html\nAllow: PUT, HEAD, OPTIONS, GET\n...\nI figure something along the lines of MapAdapter.match() in werkzeug/routing.py is required (loop through all matching handlers and add up the supported methods)\nThanks :-)", "issue_status": "Closed", "issue_reporting_time": "2010-07-27T21:44:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1729": {"issue_url": "https://github.com/pallets/flask/issues/96", "issue_id": "#96", "issue_summary": "Application directory", "issue_description": "maelp commented on 20 Jul 2010\nNot really a bug, but something worth mentioning in the documentation\nthe structure of the application is usually\napplication/init.py : creation of the app, registration of the modules\nbut then the modules don't have access to the \"app\" (cannot do 'from application import app')\nhow can we structure the app to have access to some global variables in all modules, etc?\nif the app is only one module, it's okay because we already have the app, but if we're registering modules, they don't necessarily have access to the app", "issue_status": "Closed", "issue_reporting_time": "2010-07-20T18:22:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1730": {"issue_url": "https://github.com/pallets/flask/issues/95", "issue_id": "#95", "issue_summary": "Bug when server handles registered urls?", "issue_description": "maelp commented on 19 Jul 2010\nI register a module using app.register_module(my_module)\nmy module has a url_prefix '/module '\nwhen running on localhost, everything is fine, but when installing on\na host, trying to fetch http://distant.host/module redirects me\nto http:// localhost /module", "issue_status": "Closed", "issue_reporting_time": "2010-07-19T14:47:37Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1731": {"issue_url": "https://github.com/pallets/flask/issues/94", "issue_id": "#94", "issue_summary": "Flask.signalhandler decorator", "issue_description": "Contributor\ndag commented on 19 Jul 2010\n@app.signalhandler(template_rendered)\ndef handler\u2026\ndef handler\u2026\ntemplate_rendered.connect(handler, app)", "issue_status": "Closed", "issue_reporting_time": "2010-07-19T00:57:12Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1732": {"issue_url": "https://github.com/pallets/flask/issues/93", "issue_id": "#93", "issue_summary": "typo in HTML history docs", "issue_description": "shday commented on 18 Jul 2010\nminor typo on the HTML/XHTML FAQ page (http://flask.pocoo.org/docs/htmlfaq/)\nIt says that\nclosure is optional in HTML5, I believe you meant\nNice summary btw.", "issue_status": "Closed", "issue_reporting_time": "2010-07-18T15:34:10Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1733": {"issue_url": "https://github.com/pallets/flask/issues/92", "issue_id": "#92", "issue_summary": "Improve template documentation", "issue_description": "Member\nmitsuhiko commented on 17 Jul 2010\nThe template documentation is currently spread out between quickstart and various functions in the api docs. There should be a template chapter for:\nhow autoescaping works and how it can be controlled (autoescape / safe, filenames)\nbasic jinja introduction and links to jinja docs\nwhat global functions and objects are available", "issue_status": "Closed", "issue_reporting_time": "2010-07-17T15:13:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1734": {"issue_url": "https://github.com/pallets/flask/issues/91", "issue_id": "#91", "issue_summary": "Automatic URL variable insertion", "issue_description": "Member\nmitsuhiko commented on 17 Jul 2010\nThere should be a way to automatically prefix all URLs with a language code for example and inject that value for all url_for calls that expect it.", "issue_status": "Closed", "issue_reporting_time": "2010-07-17T14:57:40Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1735": {"issue_url": "https://github.com/pallets/flask/issues/90", "issue_id": "#90", "issue_summary": "Disabling code execution", "issue_description": "maelp commented on 16 Jul 2010\nWhen we want to show an error on a webserver to someone, we'd like the webserver to display the error as in debug mode, but not permit arbitrary code execution.\nThere should be an option to either disable completely the code execution but show the debug info on the page, or only allow code execution when it comes from localhost", "issue_status": "Closed", "issue_reporting_time": "2010-07-16T16:55:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1736": {"issue_url": "https://github.com/pallets/flask/issues/89", "issue_id": "#89", "issue_summary": "Metaprogramming", "issue_description": "maelp commented on 16 Jul 2010\nOften one has to create a generic code for a website part that will be instantiated with different parameters to obtain efficient sub-applications for a website, Flask should include some metaprogramming capabilities (see http://pastebin.com/wAR7e8qh)", "issue_status": "Closed", "issue_reporting_time": "2010-07-16T10:04:59Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1737": {"issue_url": "https://github.com/pallets/flask/issues/88", "issue_id": "#88", "issue_summary": "Documentation of server configuration and middleware inclusion", "issue_description": "maelp commented on 16 Jul 2010\nIt would be nice that the (already fairly complete) documentation also hints at how to configure servers for production use (multiple backend servers, apache, nginx, python servers, etc) and how to setup werkzeug and wsgi middlewares in a regular flask application", "issue_status": "Closed", "issue_reporting_time": "2010-07-16T10:03:16Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1738": {"issue_url": "https://github.com/pallets/flask/issues/87", "issue_id": "#87", "issue_summary": "2 little bugs in jqueryexample.py", "issue_description": "martinjanda commented on 16 Jul 2010\nI found 2 little bugs in jqueryexample.py:\nIn import from flask missing jsonify\nin template layout.html is\n<script type=text/javascript src=\"{{ url_for('static', filename='app.js') }}\"></script>\n, but app.js file is missing.", "issue_status": "Closed", "issue_reporting_time": "2010-07-16T07:42:21Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1739": {"issue_url": "https://github.com/pallets/flask/issues/86", "issue_id": "#86", "issue_summary": "Module.add_url_route and App.add_url_route not consistent", "issue_description": "maelp commented on 15 Jul 2010\nApp.add_url_route allows the name of the route to be None, but Module.add_url_route requires all three arguments, but it should not really be necessary", "issue_status": "Closed", "issue_reporting_time": "2010-07-15T09:29:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1740": {"issue_url": "https://github.com/pallets/flask/issues/85", "issue_id": "#85", "issue_summary": "Update Docs to mention MAX_CONTENT_LENGTH", "issue_description": "Member\nmitsuhiko commented on 14 Jul 2010\nCurrently the upload docs mention subclassing request objects I think for uploads.", "issue_status": "Closed", "issue_reporting_time": "2010-07-14T15:05:43Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1741": {"issue_url": "https://github.com/pallets/flask/issues/84", "issue_id": "#84", "issue_summary": "Webapp installed into lib of virtualenv cannot find templates", "issue_description": "dcolish commented on 14 Jul 2010\nI'm using virtualenv to install my application, but when I do it cannot find any of the templates. I suspect the jinja_loader environment. The call looks something like this:\nreturn render_template(\"admin/login.html\",\n                       form=form,\n                       html=gen,\n                       **request.args)\nHere's a trace:\nTraceback (most recent call last):\nFile \"/private/tmp/fooba/lib/python2.7/site-packages/Flask-0.5.1-py2.7.egg/flask/app.py\", line 816, in call\nreturn self.wsgi_app(environ, start_response)\nFile \"/private/tmp/fooba/lib/python2.7/site-packages/Flask-0.5.1-py2.7.egg/flask/app.py\", line 760, in wsgi_app\nresponse = self.make_response(self.handle_exception(e))\nFile \"/private/tmp/fooba/lib/python2.7/site-packages/Flask-0.5.1-py2.7.egg/flask/app.py\", line 757, in wsgi_app\nrv = self.dispatch_request()\nFile \"/private/tmp/fooba/lib/python2.7/site-packages/Flask-0.5.1-py2.7.egg/flask/app.py\", line 654, in dispatch_request\nreturn self.view_functionsreq.endpoint\nFile \"/private/tmp/fooba/lib/python2.7/site-packages/cockerel-dev-py2.7.egg/cockerel/webapp/views/frontend.py\", line 12, in index\nreturn render_template(\"frontend/index.html\")\nFile \"/private/tmp/fooba/lib/python2.7/site-packages/Flask-0.5.1-py2.7.egg/flask/templating.py\", line 74, in render_template\nreturn ctx.app.jinja_env.get_template(template_name).render(context)\nFile \"/private/tmp/fooba/lib/python2.7/site-packages/Jinja2-2.5-py2.7.egg/jinja2/environment.py\", line 716, in get_template\nreturn self._load_template(name, self.make_globals(globals))\nFile \"/private/tmp/fooba/lib/python2.7/site-packages/Jinja2-2.5-py2.7.egg/jinja2/environment.py\", line 690, in _load_template\ntemplate = self.loader.load(self, name, globals)\nFile \"/private/tmp/fooba/lib/python2.7/site-packages/Jinja2-2.5-py2.7.egg/jinja2/loaders.py\", line 115, in load\nsource, filename, uptodate = self.get_source(environment, name)\nFile \"/private/tmp/fooba/lib/python2.7/site-packages/Flask-0.5.1-py2.7.egg/flask/templating.py\", line 45, in get_source\nreturn loader.get_source(environment, template)\nFile \"/private/tmp/fooba/lib/python2.7/site-packages/Jinja2-2.5-py2.7.egg/jinja2/loaders.py\", line 180, in get_source\nraise TemplateNotFound(template)\nTemplateNotFound: frontend/index.html", "issue_status": "Closed", "issue_reporting_time": "2010-07-13T23:44:41Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1742": {"issue_url": "https://github.com/pallets/flask/issues/83", "issue_id": "#83", "issue_summary": "Support conditional GET for static files", "issue_description": "joh commented on 14 Jul 2010\nIt seems Flask doesn't support the conditional GET for static files. It always returns 200 OK, even though the file is older than the If-Modified-Since request header.\nConsider the following example:\n/static$ ls -l browser.css\n-rw-r--r-- 1 joh joh 600 2010-07-13 22:25 browser.css\nNow perform a conditional GET with curl:\n$ curl -I -z \"Tue, 13 Jul 2010 20:37:52 GMT\" http://localhost:8080/static/browser.css\nHTTP/1.0 200 OK\nContent-Type: text/css; charset=utf-8\nCache-Control: public, max-age=43200\nExpires: Wed, 14 Jul 2010 08:42:44 GMT\nETag: \"flask-1279052703.2-600-2392659594\"\nDate: Tue, 13 Jul 2010 20:42:44 GMT\nConnection: close\nServer: Werkzeug/0.6.2 Python/2.6.5\nJust as a comparison, here's the correct response from Apache:\n$ curl -I -z \"Tue, 13 Jul 2010 20:37:52 GMT\" http://localhost/jq.html\nHTTP/1.1 304 Not Modified\nDate: Tue, 13 Jul 2010 20:43:47 GMT\nServer: Apache/2.2.14 (Ubuntu)\nETag: \"1540072-3f-48b36b51d6983\"\nVary: Accept-Encoding", "issue_status": "Closed", "issue_reporting_time": "2010-07-13T20:44:10Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1743": {"issue_url": "https://github.com/pallets/flask/issues/82", "issue_id": "#82", "issue_summary": "The after_request handlers should be called in reverse order", "issue_description": "cristatus commented on 12 Jul 2010\nThis after_request handlers should be called in reverse order to ensure the very first registered handler should be called at last.\nFor example, I register after_request callback to close database session. As my code grows, I register few more after_request callbacks expecting that the very first callback registered will be called at last, but it doesn't.", "issue_status": "Closed", "issue_reporting_time": "2010-07-12T14:08:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1744": {"issue_url": "https://github.com/pallets/flask/issues/81", "issue_id": "#81", "issue_summary": "Static URL rule not being added on GAE with static_dir handler", "issue_description": "sirn commented on 7 Jul 2010\nWhen app.yaml has static_dir point to Flask application's static/ directory, os.path.exists will always return False and thus causing _PackageBoundObject.has_static_dir to return False making static URL rule not being added at initialization.\nExample:\napp.yaml\napplication: demo\nversion: 1\nruntime: python\napi_version: 1\n\nhandlers:\n- url: /static\n  static_dir: static\n\n- url: /.*\n  script: app.py\napp.py\nfrom google.appengine.ext.webapp.util import run_wsgi_app\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef demo():\n    return str(app.has_static_folder)\n\ndef main():\n    run_wsgi_app(app)\n\nif __name__ == '__main__':\n    main()\nThis will return False but will return True once I comment out the static handler. Current workaround is to add static rule myself, using app.add_url_rule(app.static_path + '/<path:filename>', endpoint='static') of sort. It would be nice of Flask detects GAE and add the static path anyway.", "issue_status": "Closed", "issue_reporting_time": "2010-07-07T08:37:24Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1745": {"issue_url": "https://github.com/pallets/flask/issues/80", "issue_id": "#80", "issue_summary": "Sessions and SERVER_NAME", "issue_description": "Member\nmitsuhiko commented on 7 Jul 2010\nCookies are not set correctly when SERVER_NAME is set. Investigate.", "issue_status": "Closed", "issue_reporting_time": "2010-07-07T05:29:55Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1746": {"issue_url": "https://github.com/pallets/flask/issues/79", "issue_id": "#79", "issue_summary": "If SERVER_NAME is set the cookie does not set itself correctly", "issue_description": "Member\nmitsuhiko commented on 6 Jul 2010\nThe domain information is not used to set the domain for the cookie of the session. The cookie is only set for path=/ for the current domain. If DOMAIN_NAME is set this should be used for setting session cookies for \".\" + DOMAIN_NAME.", "issue_status": "Closed", "issue_reporting_time": "2010-07-05T23:25:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1747": {"issue_url": "https://github.com/pallets/flask/issues/78", "issue_id": "#78", "issue_summary": "remove circular dependency between flask.wrappers and flask.helpers", "issue_description": "Contributor\nflorentx commented on 5 Jul 2010\nI don't understand why flask.helpers.jsonify uses current_app.response_class, while flask.helpers.send_file uses Response.\nFixing this, you get rid of the circular dependency between wrappers and helpers.", "issue_status": "Closed", "issue_reporting_time": "2010-07-04T20:26:41Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1748": {"issue_url": "https://github.com/pallets/flask/issues/77", "issue_id": "#77", "issue_summary": "Flask broken on 2.5 without simplejson", "issue_description": "Contributor\nflorentx commented on 4 Jul 2010\nIt is a regression in the module branch : if json is not available, the framework is broken.\n(make test fails with ImportError)", "issue_status": "Closed", "issue_reporting_time": "2010-07-04T13:56:03Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1749": {"issue_url": "https://github.com/pallets/flask/issues/76", "issue_id": "#76", "issue_summary": "Better autoescaping default configuration", "issue_description": "Member\nmitsuhiko commented on 3 Jul 2010\nFlask should by default not apply autoescaping for templates from string as well as templates with a .txt extension and similar things.", "issue_status": "Closed", "issue_reporting_time": "2010-07-03T08:59:00Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1750": {"issue_url": "https://github.com/pallets/flask/issues/75", "issue_id": "#75", "issue_summary": "Document that exceptions are swallowed in non-debug Mode", "issue_description": "Member\nmitsuhiko commented on 2 Jul 2010\nThis also means that use_reloader=True, debug=True works but debug=False, use_debugger=True does not.", "issue_status": "Closed", "issue_reporting_time": "2010-07-02T11:24:25Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1751": {"issue_url": "https://github.com/pallets/flask/issues/74", "issue_id": "#74", "issue_summary": "Explain UTF-8 Encoding", "issue_description": "Member\nmitsuhiko commented on 1 Jul 2010\nThe documentation should explain that Flask assumes utf-8 for templates.", "issue_status": "Closed", "issue_reporting_time": "2010-06-30T23:09:25Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1752": {"issue_url": "https://github.com/pallets/flask/issues/73", "issue_id": "#73", "issue_summary": "Link to Flask-SQLAlchemy and Flask-WTF in the docs", "issue_description": "Member\nmitsuhiko commented on 29 Jun 2010\nThe docs should link to the Flask-SQLAlchemy and Flask-WTF extensions in the sqlalchemy and wtforms patterns.", "issue_status": "Closed", "issue_reporting_time": "2010-06-29T14:03:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1753": {"issue_url": "https://github.com/pallets/flask/issues/72", "issue_id": "#72", "issue_summary": "Add support for Nginx \"X-Accel-Redirect\" header to send_file", "issue_description": "stevvooe commented on 29 Jun 2010\nThe information for nginx's send_file support is here:\nhttp://wiki.nginx.org/NginxXSendfile\nThis might be the job of middleware (have the middleware hijack the X-Sendfile header and modify it for nginx), but it would be nice to support this natively.", "issue_status": "Closed", "issue_reporting_time": "2010-06-28T19:56:08Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1754": {"issue_url": "https://github.com/pallets/flask/issues/71", "issue_id": "#71", "issue_summary": "Document request.endpoint and request.view_args", "issue_description": "Member\nmitsuhiko commented on 28 Jun 2010\nThey are missing currently but are a stable interface that one can rely on.", "issue_status": "Closed", "issue_reporting_time": "2010-06-28T17:37:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1755": {"issue_url": "https://github.com/pallets/flask/issues/70", "issue_id": "#70", "issue_summary": "Documentation has to explain Flask constructor better", "issue_description": "Member\nmitsuhiko commented on 23 Jun 2010\nPeople often do Flask(__name__) when the app is not in the __init__ which is a bad idea. Flask-SQLAlchemy also debugs based on that name so this should definitively be explained.\nFurthermore the fact that __name__ becomes '__main__' in modules started from within should be explained.", "issue_status": "Closed", "issue_reporting_time": "2010-06-22T22:32:41Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1756": {"issue_url": "https://github.com/pallets/flask/issues/69", "issue_id": "#69", "issue_summary": "Add Twill to the docs", "issue_description": "Member\nmitsuhiko commented on 22 Jun 2010\nIt's probably a good idea to explain how Twill can be used for testing Flask applications.\nExample: http://dpaste.de/JYhp/", "issue_status": "Closed", "issue_reporting_time": "2010-06-21T22:06:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1757": {"issue_url": "https://github.com/pallets/flask/issues/68", "issue_id": "#68", "issue_summary": "Example App based on Flask + Extensions", "issue_description": "Member\nmitsuhiko commented on 21 Jun 2010\nIt would be nice to see an example application for 0.5 that is based on Flask plus a few Flask extensions that represents a semi-realworld example of how to do applications.\nExample proposals:\nA Wiki\nshowcase how config management works\nhow to unittest more complex apps\nmaybe even use modules\nFlask-Fungiform for the form handling\nFlask-SQLAlchemy for database\nflask-mail for sending mail notifications\nFlask-OpenID for user authentication\nFlask-Babel for i18n\njQuery for client side JavaScript\na creoleparser for the wiki Syntax\nThanks to all the extensions that application could still be reasonable small (~1000 lines of code I guess without the templates)", "issue_status": "Closed", "issue_reporting_time": "2010-06-21T12:46:03Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1758": {"issue_url": "https://github.com/pallets/flask/issues/67", "issue_id": "#67", "issue_summary": "Explain Unicode in Flask", "issue_description": "Member\nmitsuhiko commented on 12 Jun 2010\nTo avoid confusion the unicode behavior of Python and Flask should be documented.", "issue_status": "Closed", "issue_reporting_time": "2010-06-12T16:41:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1759": {"issue_url": "https://github.com/pallets/flask/issues/66", "issue_id": "#66", "issue_summary": "flask.pocoo.org HTML 5 compliant", "issue_description": "Contributor\nflorentx commented on 7 Jun 2010\nFWIW, I checked the flask website for HTML 5 compliance (I know, it is only a draft).\nNot compliant:\nhttp://html5.validator.nu/?doc=http://flask.pocoo.org/\nhttp://html5.validator.nu/?doc=http://flask.pocoo.org/docs/\nCompliant:\nhttp://html5.validator.nu/?doc=http://flask.pocoo.org/community/\nhttp://html5.validator.nu/?doc=http://flask.pocoo.org/snippets/", "issue_status": "Closed", "issue_reporting_time": "2010-06-07T12:33:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1760": {"issue_url": "https://github.com/pallets/flask/issues/65", "issue_id": "#65", "issue_summary": "Logger Decorator for Additional Information Injection", "issue_description": "Member\nmitsuhiko commented on 7 Jun 2010\nOnce the module is split into a package (#62) it should be possible to lazily import the logger system and with that wrap the Flask logger with a class that injects additional information to the logging system for each log.\nThis should make it possible to log the request URI, remote address and some other things.", "issue_status": "Closed", "issue_reporting_time": "2010-06-06T23:00:09Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1761": {"issue_url": "https://github.com/pallets/flask/issues/64", "issue_id": "#64", "issue_summary": "unable to configure static_dir or templates_dir", "issue_description": "Contributor\nflorentx commented on 6 Jun 2010\nCurrently it's not possible to configure the static_dir or the templates_dir of an application instance, because the Jinja environment and the static directory are configured on instantiation.\nI would suggest to split the jinja_env and static middleware configuration in a separate method \"def setup_env(self):\" and call this method from init (depending on a boolean flag).\nThen it could be used like this:\napp = Flask(__name__, setup_env=False)\napp.templates_dir = 'funny_templates'\napp.setup_env()\nBut if it makes no sense, just close the request: finally I did it differently.", "issue_status": "Closed", "issue_reporting_time": "2010-06-05T18:38:37Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1762": {"issue_url": "https://github.com/pallets/flask/issues/63", "issue_id": "#63", "issue_summary": "Update Design Decisions based on recent changes", "issue_description": "Member\nmitsuhiko commented on 3 Jun 2010\nThe design decisions document is slightly outdated. Things that should be covered:\nmultiple apps\nregister_module()\nlogging maybe\nwhat should go into flask and what not", "issue_status": "Closed", "issue_reporting_time": "2010-06-03T15:23:58Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1763": {"issue_url": "https://github.com/pallets/flask/issues/62", "issue_id": "#62", "issue_summary": "Split up flask.py into multiple files", "issue_description": "Member\nmitsuhiko commented on 3 Jun 2010\nFlask gets more and more docstrings and inline documentation comments so that it becomes a quite large file. I would love to split this up for the next release into the following modules:\nflask - imports the public api\nflask.ctx - _RequestContext and all kinds of locals\nflask.app - Config/App\nflask.module - Module\nflask.helpers - the helper functions such as url_for, jsonify etc.\nflask.wrappers - Request/Response/_RequestContext\nflask.session - Session", "issue_status": "Closed", "issue_reporting_time": "2010-06-03T13:25:06Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1764": {"issue_url": "https://github.com/pallets/flask/issues/61", "issue_id": "#61", "issue_summary": "test_request_context doesn't act like the documentation says", "issue_description": "sethtrain commented on 2 Jun 2010\nSorry, closed on accident.\nTo get this to work I had to do other things, you can see from my gist: http://gist.github.com/422460\nIt would be nice if this was done automatically so I could just use test_request_context the way the documentation states.", "issue_status": "Closed", "issue_reporting_time": "2010-06-02T15:37:30Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1765": {"issue_url": "https://github.com/pallets/flask/issues/60", "issue_id": "#60", "issue_summary": "test_request_context doesn't act like the documentation says", "issue_description": "sethtrain commented on 2 Jun 2010\nTo get this to work I had to do other things, you can see from my gist: http://gist.github.com/422460\nIt would be nice if this was done automatically so I could just use test_request_context the way the documentation states.", "issue_status": "Closed", "issue_reporting_time": "2010-06-02T14:51:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1766": {"issue_url": "https://github.com/pallets/flask/issues/59", "issue_id": "#59", "issue_summary": "Response should always be processed.", "issue_description": "cristatus commented on 2 Jun 2010\nIf an exception is handled by exception handlers and a valid response is generated then the response should also be processed using process_response.", "issue_status": "Closed", "issue_reporting_time": "2010-06-02T14:46:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1767": {"issue_url": "https://github.com/pallets/flask/issues/58", "issue_id": "#58", "issue_summary": "Consider adding a TESTING switch", "issue_description": "Member\nmitsuhiko commented on 2 Jun 2010\nMany extensions (like flask-mail) might want to switch to mock-mode for testing. It would be nice to have a central switch like DEBUG to enable that.", "issue_status": "Closed", "issue_reporting_time": "2010-06-01T22:34:31Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1768": {"issue_url": "https://github.com/pallets/flask/issues/57", "issue_id": "#57", "issue_summary": "Document flask._request_ctx_stack", "issue_description": "Member\nmitsuhiko commented on 30 May 2010\nFlask extensions are allowed to access this object, also user code might if it wants to do really magic stuff. The leading underscore however means: try avoid using it, similar to sys._getframe.", "issue_status": "Closed", "issue_reporting_time": "2010-05-29T18:56:55Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1769": {"issue_url": "https://github.com/pallets/flask/issues/56", "issue_id": "#56", "issue_summary": "`make test` should use flask module in current directory not system-wide module", "issue_description": "Contributor\nplaes commented on 29 May 2010\nCurrently tests are run against system-wide flask, which basically loses point of testing during package upgrades on Gentoo.", "issue_status": "Closed", "issue_reporting_time": "2010-05-29T14:40:41Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1770": {"issue_url": "https://github.com/pallets/flask/issues/55", "issue_id": "#55", "issue_summary": "Document Extension Development", "issue_description": "Member\nmitsuhiko commented on 29 May 2010\nThere has to be a best practice document for extension development covering these things:\nnaming your extension\nusing the flaskext namespace\nproperly specifying dependencies\nmaking ==dev versioning work\nwhat belongs into a config and what not (deployment stuff into config, rest in the init call)\nwhen to use init_extension(app) versus extension = Extension(app)", "issue_status": "Closed", "issue_reporting_time": "2010-05-29T12:05:08Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1771": {"issue_url": "https://github.com/pallets/flask/issues/54", "issue_id": "#54", "issue_summary": "Add i18n support using Jinja2/Babel", "issue_description": "mfa commented on 28 May 2010\nIs there an option to use the jinja2.ext.i18n in Flask?\nAnd if yes, an example would be nice. :)", "issue_status": "Closed", "issue_reporting_time": "2010-05-28T14:50:08Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1772": {"issue_url": "https://github.com/pallets/flask/issues/53", "issue_id": "#53", "issue_summary": "0.3 release ships with .git and missing examples", "issue_description": "Member\nmitsuhiko commented on 28 May 2010\nThat should be fixed ASAP.", "issue_status": "Closed", "issue_reporting_time": "2010-05-28T13:50:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1773": {"issue_url": "https://github.com/pallets/flask/issues/52", "issue_id": "#52", "issue_summary": "HTML4/HTML5/XHTML FAQ", "issue_description": "Member\nmitsuhiko commented on 28 May 2010\nThe docs need some very basic FAQ on HTML5. All the documentation samples are using HTML5 and I constantly get reports that closing tags are missing.", "issue_status": "Closed", "issue_reporting_time": "2010-05-28T10:25:54Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1774": {"issue_url": "https://github.com/pallets/flask/issues/51", "issue_id": "#51", "issue_summary": "Replace foo in placeholders", "issue_description": "Member\nmitsuhiko commented on 28 May 2010\nAlternative could be all kinds of liquids you put into flasks.\nContext: http://twitter.com/mschrag/statuses/14853065391", "issue_status": "Closed", "issue_reporting_time": "2010-05-27T22:07:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1775": {"issue_url": "https://github.com/pallets/flask/issues/50", "issue_id": "#50", "issue_summary": "Inconsistent license language and attribution for snippets", "issue_description": "jek commented on 26 May 2010\nSnippets are placed in the public domain when posted, but this is not reflected when snippets are viewed. Additionally, the whole display (code, comments, style and all) is currently reported as copyright Armin, with all rights implicitly reserved.", "issue_status": "Closed", "issue_reporting_time": "2010-05-26T15:14:43Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1776": {"issue_url": "https://github.com/pallets/flask/issues/49", "issue_id": "#49", "issue_summary": "Document lazy loading of view functions", "issue_description": "Member\nmitsuhiko commented on 26 May 2010\nFor GAE and some other envs it makes sense not to use decorators but lazily load functions based on name instead. This should be documented as pattern.", "issue_status": "Closed", "issue_reporting_time": "2010-05-26T09:14:24Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1777": {"issue_url": "https://github.com/pallets/flask/issues/48", "issue_id": "#48", "issue_summary": "Distribute single modules", "issue_description": "Member\nmitsuhiko commented on 25 May 2010\nThe documentation should do a better job at explaining how single modules could be deployed.", "issue_status": "Closed", "issue_reporting_time": "2010-05-25T15:08:30Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1778": {"issue_url": "https://github.com/pallets/flask/issues/47", "issue_id": "#47", "issue_summary": "Document how to generate Secret Keys", "issue_description": "Member\nmitsuhiko commented on 25 May 2010\nDocumentation should contain some infos about how to generate secret keys.", "issue_status": "Closed", "issue_reporting_time": "2010-05-25T15:08:11Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1779": {"issue_url": "https://github.com/pallets/flask/issues/46", "issue_id": "#46", "issue_summary": "Provide a way to access a resource filename", "issue_description": "Contributor\ndingens commented on 25 May 2010\nThere is open_resource, but sometimes one does not need an open file but the filename.\nI've thought of something like this: http://paste.pocoo.org/show/217837/", "issue_status": "Closed", "issue_reporting_time": "2010-05-24T23:13:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1780": {"issue_url": "https://github.com/pallets/flask/issues/45", "issue_id": "#45", "issue_summary": "Mistake in docstring of app.errorhandler", "issue_description": "thomasbilk commented on 25 May 2010\nThere is a variable missing in the docstring (and thus in the documentation) in app.errorhandler.\nhttp://github.com/mitsuhiko/flask/blob/master/flask.py#L998", "issue_status": "Closed", "issue_reporting_time": "2010-05-24T19:40:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1781": {"issue_url": "https://github.com/pallets/flask/issues/44", "issue_id": "#44", "issue_summary": "Document app.run() should be in __name__ == '__main__'", "issue_description": "Member\nmitsuhiko commented on 24 May 2010\nCommon problem that breaks on mod_wsgi and other deployments.", "issue_status": "Closed", "issue_reporting_time": "2010-05-24T07:45:08Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1782": {"issue_url": "https://github.com/pallets/flask/issues/43", "issue_id": "#43", "issue_summary": "Bind test_request_context for interactive Python shell", "issue_description": "Member\nmitsuhiko commented on 22 May 2010\nFor the interactive Python shell, the test_request_function should be invokable to bind the context to the end of the session for easier testing. Something like this:\n>>> from yourapplication import app\n>>> app.test_request_context().bind()\n>>> from flask import request\n>>> request.path\nu'/'\nOr something similar.", "issue_status": "Closed", "issue_reporting_time": "2010-05-21T20:17:56Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1783": {"issue_url": "https://github.com/pallets/flask/issues/42", "issue_id": "#42", "issue_summary": "Document URL Redirection Behaviour and how to use it", "issue_description": "Member\nmitsuhiko commented on 20 May 2010\nThere was a length discussion on #pocoo about the redirection behaviour of Werkzeug today. As a result of that discussion I think it should be explained in detail in the documentation.", "issue_status": "Closed", "issue_reporting_time": "2010-05-19T19:42:36Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1784": {"issue_url": "https://github.com/pallets/flask/issues/41", "issue_id": "#41", "issue_summary": "broken link in doc", "issue_description": "Contributor\nsebest commented on 18 May 2010\non this page:\nhttp://flask.pocoo.org/docs/patterns/distribute/\nthe \"package\" link of this sentence is 404:\nIn this case we assume your application is called yourapplication.py and you are not using a module, but a package.", "issue_status": "Closed", "issue_reporting_time": "2010-05-18T10:47:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1785": {"issue_url": "https://github.com/pallets/flask/issues/40", "issue_id": "#40", "issue_summary": "Python 3K", "issue_description": "Contributor\njustquick commented on 16 May 2010\nWhat would it take to get Flask up and running with Python 3? I heard you got Jinja2 up and running on py3k but I am less sure about Werkzeug and the WSGI spec in general for Python 3. Have you put any thought into it or had any luck trying to accomplish it?", "issue_status": "Closed", "issue_reporting_time": "2010-05-16T14:31:50Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1786": {"issue_url": "https://github.com/pallets/flask/issues/39", "issue_id": "#39", "issue_summary": "Docs/Tests missing in Tarball", "issue_description": "Member\nmitsuhiko commented on 16 May 2010\nShould be added :)", "issue_status": "Closed", "issue_reporting_time": "2010-05-16T00:04:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1787": {"issue_url": "https://github.com/pallets/flask/issues/38", "issue_id": "#38", "issue_summary": "Set server_name in bind_to_environ()", "issue_description": "moraes commented on 14 May 2010\n_RequestContext binds the url_map without setting server_name, so it is impossible to make apps that serve dynamic subdomains. server_name should be an optional configuration.\nenviron = create_environ(path='/', base_url='http://www.test.com')\nurl_adapter = url_map.bind_to_environ(environ, server_name='test.com')\nendpoint, kwargs = url_adapter.match('/')\nassert endpoint == 'test'\nassert 'subdomain' in kwargs\nassert kwargs['subdomain'] == 'www'\nenviron = create_environ(path='/', base_url='http://foo.test.com')\nurl_adapter = url_map.bind_to_environ(environ, server_name='test.com')\nendpoint, kwargs = url_adapter.match('/')\nassert endpoint == 'test'\nassert 'subdomain' in kwargs\nassert kwargs['subdomain'] == 'foo'", "issue_status": "Closed", "issue_reporting_time": "2010-05-14T17:00:20Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1788": {"issue_url": "https://github.com/pallets/flask/issues/37", "issue_id": "#37", "issue_summary": "some minor typos throughout docs", "issue_description": "Contributor\nrduplain commented on 12 May 2010\nI found some minor typos throughout docs, which I fixed in rduplain@78ade243bf6448e5afa2d6aa7ad54654406635db", "issue_status": "Closed", "issue_reporting_time": "2010-05-12T01:35:13Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1789": {"issue_url": "https://github.com/pallets/flask/issues/36", "issue_id": "#36", "issue_summary": "Long lived sessions staying long-lived after session.permanent set False", "issue_description": "gbyoung commented on 12 May 2010\nFixed it by adding the session_expires=None to the end of this method call:\ndef save_session(self, session, response):\nexpires = None\nif session.permanent:\nexpires = datetime.utcnow() + self.permanent_session_lifetime\nsession.save_cookie(response, self.session_cookie_name,\nexpires=expires, httponly=True, session_expires=None) <== only change", "issue_status": "Closed", "issue_reporting_time": "2010-05-11T23:46:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1790": {"issue_url": "https://github.com/pallets/flask/issues/35", "issue_id": "#35", "issue_summary": "Support for Flashing Categories", "issue_description": "Member\nmitsuhiko commented on 12 May 2010\nThe new signature for flash() should look like this in 0.5:\ndef flash(message, category='message'):\n    ...\nThe method to fetch messages then will also accept a parameter that allows pulling as tuples with the category as well:\ndef get_flashed_messages(with_categories=False):\n    ...\nIf invoked with that parameter set to False (which is the default) just the strings are returned, otherwise tuples in the form (category, message).", "issue_status": "Closed", "issue_reporting_time": "2010-05-11T23:34:48Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1791": {"issue_url": "https://github.com/pallets/flask/issues/34", "issue_id": "#34", "issue_summary": "Can't do POST to view method which doesn't invoke flask.request.form", "issue_description": "gdrius commented on 9 May 2010\nDoing POST to view method which doesn't invoke flask.request.form results to \u201eUnable to Connect\u201c on WebKit based browsers (Epiphany, Midori). Firefox is working.", "issue_status": "Closed", "issue_reporting_time": "2010-05-09T12:22:42Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1792": {"issue_url": "https://github.com/pallets/flask/issues/33", "issue_id": "#33", "issue_summary": "Variable Module Prefix", "issue_description": "Member\nmitsuhiko commented on 6 May 2010\nThe module branch support variable modules. Something like this:\nwiki = Module(__name__, url_prefix='/<user>')\nThen each function registered is passed 'user' as first parameter. This already works as far as I can see, however it would be better if that value can be attached to g instead. What should work (not tested) is this:\n@wiki.before_request\ndef attach_user():\n    g.wiki_user = request.view_args.pop('user', None)\nThe problem with this is that URLs generated still need that user attached, so url_for needs some kind of support for that. However I am not entirely sure how that should look like.", "issue_status": "Closed", "issue_reporting_time": "2010-05-06T10:24:27Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1793": {"issue_url": "https://github.com/pallets/flask/issues/32", "issue_id": "#32", "issue_summary": "add a way to add extra data for modus before dispatching to them", "issue_description": "Contributor\nRonnyPfannschmidt commented on 6 May 2010\nit would be nice if there was a way to generate extra data before dispatching to a module\nsomething like this (bad example to get the idea across)\n@app.route('//wiki', module=vcswiki)\ndef user_wiki(username):\n    g.wiki = get_wiki_for_user(username)\n\n@app.route('/help', module=vcswiki)\ndef help_wiki():\n    g.wiki = get_help_wiki()", "issue_status": "Closed", "issue_reporting_time": "2010-05-06T09:45:41Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1794": {"issue_url": "https://github.com/pallets/flask/issues/31", "issue_id": "#31", "issue_summary": "Wrap emails on malformed mails", "issue_description": "Member\nmitsuhiko commented on 5 May 2010\nRight now the mailinglist does not wrap mails if the client did not wrap them in advance. Looks bad: http://flask.pocoo.org/mailinglist/archive/2010/5/5/ann-garter-a-library-of-useful-flask-related-functions/", "issue_status": "Closed", "issue_reporting_time": "2010-05-05T13:15:25Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1795": {"issue_url": "https://github.com/pallets/flask/issues/30", "issue_id": "#30", "issue_summary": "base_url / url docs mixed up", "issue_description": "Member\nmitsuhiko commented on 4 May 2010\nThese two have to be reversed in the API docs.", "issue_status": "Closed", "issue_reporting_time": "2010-05-04T08:18:13Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1796": {"issue_url": "https://github.com/pallets/flask/issues/29", "issue_id": "#29", "issue_summary": "register_module fails when url_prefix not previously set", "issue_description": "flowblok commented on 4 May 2010\nThe following example (taken from the documentation, simplified) fails to work correctly.\nThe index() function is registered at / instead of /admin.\nmyapp/init.py:\nfrom flask import Flask\nfrom myapp.admin import admin\napp = Flask(name)\napp.register_module(admin, url_prefix='/admin')\nmyapp/admin.py\nfrom flask import Module\nadmin = Module(name)\n@admin.route('/')\ndef index():\nreturn 'This should be at /admin'", "issue_status": "Closed", "issue_reporting_time": "2010-05-04T07:33:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1797": {"issue_url": "https://github.com/pallets/flask/issues/28", "issue_id": "#28", "issue_summary": "Minor typo in fileuploads doc.", "issue_description": "ghost commented on 4 May 2010\nflask / docs / patterns / fileuploads.rst\nIn the HTML snipets, the\nis not closed (there should be a\nsomewhere no ?", "issue_status": "Closed", "issue_reporting_time": "2010-05-04T07:30:13Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1798": {"issue_url": "https://github.com/pallets/flask/issues/27", "issue_id": "#27", "issue_summary": "Document setup.py", "issue_description": "Member\nmitsuhiko commented on 4 May 2010\nDocumentation should show how a typical setup.py with distribute looks like and how it can be used to deploy code.", "issue_status": "Closed", "issue_reporting_time": "2010-05-04T07:28:56Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1799": {"issue_url": "https://github.com/pallets/flask/issues/26", "issue_id": "#26", "issue_summary": "layout.html (in website branch) is missing closing tags", "issue_description": "Contributor\nrdegges commented on 4 May 2010\nJust wanted to let you know that layout.html is missing some closing tags\netc. May want to fix for validation if you care.", "issue_status": "Closed", "issue_reporting_time": "2010-05-04T05:09:52Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1800": {"issue_url": "https://github.com/pallets/flask/issues/25", "issue_id": "#25", "issue_summary": "Per-module processors", "issue_description": "Member\nmitsuhiko commented on 4 May 2010\nThere should be a @context_processor decorator for modules, so that a processor can be added on a per-module basis, in the same way as @before_request. A processor function defined this way would only be executed in the module space.\n[from the mailinglist]", "issue_status": "Closed", "issue_reporting_time": "2010-05-03T22:09:47Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1801": {"issue_url": "https://github.com/pallets/flask/issues/24", "issue_id": "#24", "issue_summary": "None return values from functions fail with wrong error", "issue_description": "Member\nmitsuhiko commented on 3 May 2010\nThey should fail with an explicit error instead especially because the current behavior is just plain wrong.", "issue_status": "Closed", "issue_reporting_time": "2010-05-02T19:26:43Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1802": {"issue_url": "https://github.com/pallets/flask/issues/23", "issue_id": "#23", "issue_summary": "CSRF protection", "issue_description": "danjac commented on 3 May 2010\nFilters/session CSRF checking could be added to Flask, or otherwise common patterns added to documentation (see Django CSRF protection for example - http://docs.djangoproject.com/en/dev/ref/contrib/csrf/)", "issue_status": "Closed", "issue_reporting_time": "2010-05-02T18:37:04Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1803": {"issue_url": "https://github.com/pallets/flask/issues/22", "issue_id": "#22", "issue_summary": "Add werkzeug.script examples to documentation", "issue_description": "danjac commented on 2 May 2010\nIt might be useful to have examples in the docs on how to integrate werkzeug.script with Flask, in particular shell and runserver:\nhttp://werkzeug.pocoo.org/documentation/dev/script.html", "issue_status": "Closed", "issue_reporting_time": "2010-05-02T12:33:26Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1804": {"issue_url": "https://github.com/pallets/flask/issues/21", "issue_id": "#21", "issue_summary": "Typo in flask quickstart docs", "issue_description": "specnazzz commented on 1 May 2010\nIn section 'The Request Object' is a typo when doing route definition.\n...\n@app.route('/login', method=['POST', 'GET'])\ndef login():\n...\nthe keyword argument should be 'methods' not 'method'.", "issue_status": "Closed", "issue_reporting_time": "2010-05-01T12:41:07Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1805": {"issue_url": "https://github.com/pallets/flask/issues/20", "issue_id": "#20", "issue_summary": "Docs should mention Query Args for url_for", "issue_description": "Member\nmitsuhiko commented on 30 Apr 2010\nRight now the docs to not mention that url_for can generate query arguments as well. That should be fixed.", "issue_status": "Closed", "issue_reporting_time": "2010-04-30T08:59:39Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1806": {"issue_url": "https://github.com/pallets/flask/issues/19", "issue_id": "#19", "issue_summary": "Typo in flaskr tutorial -> testing", "issue_description": "thadeusb commented on 28 Apr 2010\nThe sentence that reads\nNow that you have finished the application and everything works as expected, it\u2019s probably not the best idea to add automated tests to simplify modifications in the future.\nShould probably read\nNow that you have finished the application and everything works as expected, it\u2019s probably a good idea to add automated tests to simplify modifications in the future.", "issue_status": "Closed", "issue_reporting_time": "2010-04-27T21:07:59Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1807": {"issue_url": "https://github.com/pallets/flask/issues/18", "issue_id": "#18", "issue_summary": "Access session object during unittest", "issue_description": "thadeusb commented on 28 Apr 2010\nCan we get the docs updated to include an example to access session object while unit testing.\nHere is a potential solution, using unittest for flaskr\ndef test_session(self):\n    with flaskr.app.test_request_context('/login', method='POST', data=dict(\n                    username=flaskr.USERNAME, password=flaskr.PASSWORD,)):\n        rv = flaskr.app.dispatch_request()\n        assert flaskr.session['logged_in'] == True\n\n    with flaskr.app.test_request_context('/login', method='POST', data=dict(\n                    username=flaskr.USERNAME+'x', password=flaskr.PASSWORD+'x',)):\n        rv = flaskr.app.dispatch_request()\n        assert not flaskr.session.get('logged_in')", "issue_status": "Closed", "issue_reporting_time": "2010-04-27T21:01:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1808": {"issue_url": "https://github.com/pallets/flask/issues/17", "issue_id": "#17", "issue_summary": "Configuration Support", "issue_description": "Member\nmitsuhiko commented on 27 Apr 2010\nApps should have some kind of config dict attached. That would make it a lot cleaner to deal with configuration values.", "issue_status": "Closed", "issue_reporting_time": "2010-04-27T10:29:20Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1809": {"issue_url": "https://github.com/pallets/flask/issues/16", "issue_id": "#16", "issue_summary": "Add easy way to set session expiry", "issue_description": "danjac commented on 26 Apr 2010\nIt's quite difficult at the moment to set the expiry date for the session. Ideally something like this could work (although it might require subclassing SecureCookie):\nif request.form.get('remember_me', False):\n    session.expires = timedelta(days=30)", "issue_status": "Closed", "issue_reporting_time": "2010-04-26T09:00:49Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1810": {"issue_url": "https://github.com/pallets/flask/issues/15", "issue_id": "#15", "issue_summary": "Typo in docs: redirect instead of return redirect", "issue_description": "Contributor\ncgrinds commented on 26 Apr 2010\nThanks to for reporting on irc.\nI searched through the rest of the docs and don't see any other occurrences.\nI made the change in my fork...", "issue_status": "Closed", "issue_reporting_time": "2010-04-26T02:27:35Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1811": {"issue_url": "https://github.com/pallets/flask/issues/14", "issue_id": "#14", "issue_summary": "Documentation Modification (app.run)", "issue_description": "Contributor\nrdegges commented on 24 Apr 2010\nHi there,\nI was reading through the documentation in the tutorial, and I think it may be beneficial to a lot of users (like myself) who develop on remote servers to include information about the optional host parameter in app.run():\napp.run(host='your public ip')\nIt is listed on Application Setup Code at the bottom, but since the first page, 'Quickstart' demos an application, I think it should be included there (or at least linked).", "issue_status": "Closed", "issue_reporting_time": "2010-04-24T00:06:27Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1812": {"issue_url": "https://github.com/pallets/flask/issues/13", "issue_id": "#13", "issue_summary": "decorators to add custom jinja filters/globals", "issue_description": "Contributor\nsebest commented on 23 Apr 2010\nHello,\nit would be nice to have a decorator to define a function as a jinja filter instead of adding the function to\napp.jinja_env.filters\nthanx", "issue_status": "Closed", "issue_reporting_time": "2010-04-23T15:01:01Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1813": {"issue_url": "https://github.com/pallets/flask/issues/12", "issue_id": "#12", "issue_summary": "Make endpoint optional in @route", "issue_description": "danjac commented on 22 Apr 2010\nMake endpoint an option in the @route decorator. By default it would still use the function name. This would allow more flexibility in larger applications:\ndef route(self, rule, **options):\n    def decorator(f):\n        endpoint = options.pop('endpoint', f.__name__)\n        self.add_url_rule(rule, endpoint, **options)\n        return f\n    return decorator", "issue_status": "Closed", "issue_reporting_time": "2010-04-22T11:37:45Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1814": {"issue_url": "https://github.com/pallets/flask/issues/11", "issue_id": "#11", "issue_summary": "Make it easier to add routes via add_url_rule", "issue_description": "Contributor\ncgrinds commented on 19 Apr 2010\nadd_url_rule should accept an optional view function. Currently you need to do two steps to associate a rule, endpoint and view_function.\nThis issue is suggesting that it should only take one step. Replace add_url_rule(self, rule, endpoint, *_options) with add_url_rule(self, rule, endpoint, view_func=None, *_options)", "issue_status": "Closed", "issue_reporting_time": "2010-04-19T16:35:17Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1815": {"issue_url": "https://github.com/pallets/flask/issues/10", "issue_id": "#10", "issue_summary": "Flash fails in nonobvious way when secret isn't set", "issue_description": "Contributor\ncgrinds commented on 17 Apr 2010\nHere's what fails http://paste.pocoo.org/show/202792/\nThe Flash section of the docs should at least mention that app.secret is required but I'm not sure that's enough.\nOne idea would be to require secret_key to be explicitly set and fail to run if it isn't.\nFor folks that don't need sessions they could pass a message to that effect to run().\nMy guess is session/flash will be used by more apps than not.", "issue_status": "Closed", "issue_reporting_time": "2010-04-17T03:43:47Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1816": {"issue_url": "https://github.com/pallets/flask/issues/9", "issue_id": "#9", "issue_summary": "Rename @app.request_init and @app.request_shutdown", "issue_description": "Contributor\ncgrinds commented on 16 Apr 2010\nNot a big deal but I think pre_request and post_request have better symmetry than init and shutdown.", "issue_status": "Closed", "issue_reporting_time": "2010-04-16T02:57:40Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1817": {"issue_url": "https://github.com/pallets/flask/issues/8", "issue_id": "#8", "issue_summary": "Preserve request context on exception in debug mode", "issue_description": "Member\nmitsuhiko commented on 16 Apr 2010\nIn debug mode the request context should stick around on an exception so that the request object is still valid in the debugger.", "issue_status": "Closed", "issue_reporting_time": "2010-04-16T00:10:33Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1818": {"issue_url": "https://github.com/pallets/flask/issues/7", "issue_id": "#7", "issue_summary": "Visibility on pocoo.org", "issue_description": "Contributor\nflorentx commented on 14 Apr 2010\nSome day, it should be added to the list of Werkzeug-based frameworks :\nhttp://dev.pocoo.org/projects/werkzeug/wiki/WerkzeugBasedFrameworks\n(and Denied, too?)\nAnd maybe on the http://dev.pocoo.org/ page too.\nAfter the first release, probably.", "issue_status": "Closed", "issue_reporting_time": "2010-04-14T17:29:24Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1819": {"issue_url": "https://github.com/pallets/flask/issues/6", "issue_id": "#6", "issue_summary": "GAE Support", "issue_description": "Member\nmitsuhiko commented on 14 Apr 2010\nRight now Flask does not support GAE, that should be fixed. Switch to FileSystemLoader and CWD usage if GAE is detected, stick to pkg_resources otherwise for better portability.", "issue_status": "Closed", "issue_reporting_time": "2010-04-14T01:08:30Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1820": {"issue_url": "https://github.com/pallets/flask/issues/5", "issue_id": "#5", "issue_summary": "Implement SQLAlchemy", "issue_description": "Contributor\njustquick commented on 13 Apr 2010\nUse SQLAlchemy in the core framework as an ORM", "issue_status": "Closed", "issue_reporting_time": "2010-04-13T03:36:19Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1821": {"issue_url": "https://github.com/pallets/flask/issues/4", "issue_id": "#4", "issue_summary": "Integrate Babel for i18n", "issue_description": "Contributor\njustquick commented on 13 Apr 2010\nhttp://babel.edgewall.org", "issue_status": "Closed", "issue_reporting_time": "2010-04-13T03:35:29Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1822": {"issue_url": "https://github.com/pallets/flask/issues/3", "issue_id": "#3", "issue_summary": "Switch to explicit request object passing", "issue_description": "Contributor\njustquick commented on 13 Apr 2010\nThis makes it more to type (because you now have something to pass around) but it makes it a whole lot easier to debug hairy situations and to test the code.", "issue_status": "Closed", "issue_reporting_time": "2010-04-13T03:31:57Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1823": {"issue_url": "https://github.com/pallets/flask/issues/2", "issue_id": "#2", "issue_summary": "Get rid of the decorator function registering", "issue_description": "Contributor\njustquick commented on 13 Apr 2010\nCauses a lot of troubles for applications that have circular dependencies. It also requires that the whole application is imported when the system initializes or certain URLs will not be available right away.", "issue_status": "Closed", "issue_reporting_time": "2010-04-13T03:31:38Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}, "1824": {"issue_url": "https://github.com/pallets/flask/issues/1", "issue_id": "#1", "issue_summary": "Implement dotted names for URL endpoints", "issue_description": "Contributor\njustquick commented on 13 Apr 2010\nIt makes a lot of sense to change the way endpoints (the names of the functions / URL rules) are handled to also take the module name into account. Right now the function name is the URL name, but imagine you have a large applications consisting of multiple components. In that case, it makes a lot of sense to use dotted names for the URL endpoints.", "issue_status": "Closed", "issue_reporting_time": "2010-04-13T03:31:11Z", "fixed_by": "", "pull_request_summary": "", "pull_request_description": "", "pull_request_status": "", "issue_fixed_time": "", "files_changed": []}}}