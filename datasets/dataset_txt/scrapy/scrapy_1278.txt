Member
kmike commented on Mar 18, 2015
I think it makes more sense to send unicode to serializer libraries - encoding shouldn't be handled per-field.
JsonLinesItemExporter and JsonItemExporter shouldn't encode values to bytes because JSON is a text format. The encoding is always utf8. In Python 3.x stdlib json module doesn't even support byte keys/values, and docs say that the result of json.dump is always str (aka unicode in 2.x). By the way, it makes no sense to inherit JsonItemExporter from JsonLinesItemExporter. JsonItemExporter even overrides all JsonLinesItemExporter methods.
XmlItemExporter shouldn't encode values to bytes because since Python 2.7.6 xml.sax.saxutils wants unicode, and in Python 3.x it requires unicode. Currently this is worked around by decoding the encoded value. The problem is that before Python 2.7.6 xml.sax.saxutils required bytes; IMHO it is better to workaround this instead of encoding/decoding data multiple times.
For CsvItemExporter it makes sense to encode values because in Python 2.x csv module doesn't support unicode. In Python 3.x csv supports unicode, so encoding can be seen as a temporary workaround of stdlib issues.
For PickleItemExporter and MarshalItemExporter encoding unicode values is bad because instead of original values users will get bytes when the result is unpickled/unmarshalled. It is not convenient, and it is an information loss (it is not clear what encoding to use to decode the value).
I'm not sure about PprintItemExporter. Its behaviour should depend on 'file' argument - if it can handle unicode the output should be unicode, if it can't - the output should be bytes.
PythonItemExporter assumes that serialization library can't handle unicode and mentions json, msgpack and binc. JSON can't handle bytes; msgpack can handle both bytes and unicode; I'm not sure binc is of any use currently. I think leaving unicode values as-is is a better behaviour for PythonItemExporter.