rafaelcapucho commented on May 14, 2016
Hello,
I was trying to implement the scrapy-redis, the problem was discussed over there but after some debugging I see that the problem could be in scrapy.
The redis_scheduler is simple: https://github.com/rolando/scrapy-redis/blob/master/scrapy_redis/scheduler.py
They use a simple queue.push(request):
    def enqueue_request(self, request):
        if not request.dont_filter and self.df.request_seen(request):
            return
        if self.stats:
            self.stats.inc_value('scheduler/enqueued/redis', spider=self.spider)
        self.queue.push(request)
After that, the request pass through 2 method:
    def push(self, request):
        """Push a request"""
        self.server.lpush(self.key, self._encode_request(request))

    def _encode_request(self, request):
        """Encode a request object"""
        return pickle.dumps(request_to_dict(request, self.spider), protocol=-1)
I have added 3 prints into scrapy request_to_dict to understand the inputs:
def request_to_dict(request, spider=None):
    """Convert Request object to a dict.

    If a spider is given, it will try to find out the name of the spider method
    used in the callback and store that as the callback.
    """
    cb = request.callback
    print('callback: ', cb)
    print('request: ', request)
    print('spider: ', spider)

    if callable(cb):
        cb = _find_method(spider, cb)
    eb = request.errback
    if callable(eb):
        eb = _find_method(spider, eb)
    d = {
        'url': to_unicode(request.url),  # urls should be safe (safe_string_url)
        'callback': cb,
        'errback': eb,
        'method': request.method,
        'headers': dict(request.headers),
        'body': request.body,
        'cookies': request.cookies,
        'meta': request.meta,
        '_encoding': request._encoding,
        'priority': request.priority,
        'dont_filter': request.dont_filter,
    }
    return d
Running the shell command It return:
callback: <bound method Deferred.callback of <Deferred at 0x7f3e13b69358>> 
request: <GET http://www.epocacosmeticos.com.br/any-url-goes-here>
spider: <EpocaCosmeticosSpider 'epocacosmeticos.com.br' at 0x7f3e13032d30>
This is the error that I found when running the shell command with the scrapy-redis scheduler:
ValueError: Function <bound method Deferred.callback of <Deferred at 0x7f3e13b69358>> is not a method of: <EpocaCosmeticosSpider 'epocacosmeticos.com.br' at 0x7f3e13032d30>
The error is generated by _find_method
def _find_method(obj, func):
    if obj:
        try:
            func_self = six.get_method_self(func)
        except AttributeError:  # func has no __self__
            pass
        else:
            if func_self is obj:
                return six.get_method_function(func).__name__
    raise ValueError("Function %s is not a method of: %s" % (func, obj))
The request is created by the shell command, why it can't be used into request_to_dict?
Using python 3.5.1 - scrapy 1.1.0,
Thank you