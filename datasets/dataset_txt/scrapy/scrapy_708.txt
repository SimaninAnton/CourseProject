Contributor
starrify commented on Feb 2, 2017 â€¢
edited
Below are sample results from scrapy shell:
>>> import scrapy
>>> scrapy.__version__
u'1.3.0'
>>> fetch(scrapy.Request('http://httpbin.org/status/302', method='POST'))
2017-02-02 22:03:31 [scrapy.downloadermiddlewares.redirect] DEBUG: Redirecting (302) to <GET http://httpbin.org/redirect/1> from <POST http://httpbin.org/status/302>
2017-02-02 22:03:31 [scrapy.downloadermiddlewares.redirect] DEBUG: Redirecting (302) to <GET http://httpbin.org/get> from <GET http://httpbin.org/redirect/1>
2017-02-02 22:03:31 [scrapy.core.engine] DEBUG: Crawled (200) <GET http://httpbin.org/get> (referer: None)
from which you could see that Scrapy sent a new GET request after having received 302 from a POST request.
RFC 2616 says:
Note: RFC 1945 and RFC 2068 specify that the client is not allowed to change the method on the redirected request. However, most existing user agent implementations treat 302 as if it were a 303 response, performing a GET on the Location field-value regardless of the original request method. The status codes 303 and 307 have been added for servers that wish to make unambiguously clear which kind of reaction is expected of the client.
Thus I guess we may need to have the redirect middleware updated if we are to stick strictly to the RFC.