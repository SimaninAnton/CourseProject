idella commented on Aug 29, 2015
Under python2.7 (only) in versions 1.0.2 & 1.0.3, test file test_proxy_connect.py yields 4 failures persistently, with the stipulated deps including mitmproxy-0.10.1 and netlib-0.10.1. I installed the plugin pytest-twisted specially for this test since it is not in portage.
Whichever way I ran them I get, under py2.7,
scrapy/downloadermiddlewares/ajaxcrawl.py .
scrapy/extensions/httpcache.py .
scrapy/http/cookies.py .
scrapy/utils/datatypes.py .
scrapy/utils/misc.py .
scrapy/utils/python.py ..
scrapy/utils/response.py .
scrapy/utils/template.py .
scrapy/utils/url.py .
tests/test_proxy_connect.py FF..FF

=================== FAILURES ===================
____________ ProxyConnectTestCase.test_https_connect_tunnel ____________

result = None, g = <generator object test_https_connect_tunnel at 0x7f37208f1a00>
deferred = <Deferred at 0x7f37208ec5a8 current result: None>

    def _inlineCallbacks(result, g, deferred):
        """
        See L{inlineCallbacks}.
        """
        # This function is complicated by the need to prevent unbounded recursion
        # arising from repeatedly yielding immediately ready deferreds.  This while
        # loop and the waiting variable solve that by manually unfolding the
        # recursion.

        waiting = [True, # waiting for result?
                   None] # result

        while 1:
            try:
                # Send the last result back as the result of the yield expression.
                isFailure = isinstance(result, failure.Failure)
                if isFailure:
                    result = result.throwExceptionIntoGenerator(g)
                else:
>                   result = g.send(result)

/usr/lib64/python2.7/site-packages/twisted/internet/defer.py:1128: 
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../work/scrapy-1.0.3/tests/test_proxy_connect.py:56: in test_https_connect_tunnel
    self._assert_got_response_code(200, l)
../../../work/scrapy-1.0.3/tests/test_proxy_connect.py:104: in _assert_got_response_code
    self.assertEqual(str(log).count('Crawled (%d)' % code), 1)
/usr/lib64/python2.7/site-packages/twisted/trial/_synctest.py:437: in assertEqual
    super(_Assertions, self).assertEqual(first, second, msg)
E   FailTest: 0 != 1
------------------- Captured stderr call ---------------
Traceback (most recent call last):
  File "/usr/lib64/python2.7/runpy.py", line 162, in _run_module_as_main
    "__main__", fname, loader, pkg_name)
  File "/usr/lib64/python2.7/runpy.py", line 72, in _run_code
    exec code in run_globals
  File "/mnt/gen2/TmpDir/portage/dev-python/scrapy-1.0.3/work/scrapy-1.0.3/tests/mockserver.py", line 205, in <module>
    httpPort = reactor.listenTCP(8998, factory)
  File "/usr/lib64/python2.7/site-packages/twisted/internet/posixbase.py", line 492, in listenTCP
    p.startListening()
  File "/usr/lib64/python2.7/site-packages/twisted/internet/tcp.py", line 984, in startListening
    raise CannotListenError(self.interface, self.port, le)
twisted.internet.error.CannotListenError: Couldn't listen on any:8998: [Errno 98] Address already in use.
__________ ProxyConnectTestCase.test_https_connect_tunnel_error __________
result = None, g = <generator object test_https_connect_tunnel_error at 0x7f371ef53f00>
deferred = <Deferred at 0x7f371ef825a8 current result: None>

    def _inlineCallbacks(result, g, deferred):
        """
        See L{inlineCallbacks}.
        """
        # This function is complicated by the need to prevent unbounded recursion
        # arising from repeatedly yielding immediately ready deferreds.  This while
        # loop and the waiting variable solve that by manually unfolding the
        # recursion.

        waiting = [True, # waiting for result?
                   None] # result

        while 1:
            try:
                # Send the last result back as the result of the yield expression.
                isFailure = isinstance(result, failure.Failure)
                if isFailure:
                    result = result.throwExceptionIntoGenerator(g)
                else:
>                   result = g.send(result)

/usr/lib64/python2.7/site-packages/twisted/internet/defer.py:1128: 
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../work/scrapy-1.0.3/tests/test_proxy_connect.py:72: in test_https_connect_tunnel_error
    self._assert_got_tunnel_error(l)
../../../work/scrapy-1.0.3/tests/test_proxy_connect.py:107: in _assert_got_tunnel_error
    self.assertEqual(str(log).count('TunnelError'), 1)
/usr/lib64/python2.7/site-packages/twisted/trial/_synctest.py:437: in assertEqual
    super(_Assertions, self).assertEqual(first, second, msg)
E   FailTest: 0 != 1
----------------------------------------------------- Captured stderr call -----------------------------------------------------
Traceback (most recent call last):
  File "/usr/lib64/python2.7/runpy.py", line 162, in _run_module_as_main
    "__main__", fname, loader, pkg_name)
  File "/usr/lib64/python2.7/runpy.py", line 72, in _run_code
    exec code in run_globals
  File "/mnt/gen2/TmpDir/portage/dev-python/scrapy-1.0.3/work/scrapy-1.0.3/tests/mockserver.py", line 205, in <module>
    httpPort = reactor.listenTCP(8998, factory)
  File "/usr/lib64/python2.7/site-packages/twisted/internet/posixbase.py", line 492, in listenTCP
    p.startListening()
  File "/usr/lib64/python2.7/site-packages/twisted/internet/tcp.py", line 984, in startListening
    raise CannotListenError(self.interface, self.port, le)
twisted.internet.error.CannotListenError: Couldn't listen on any:8998: [Errno 98] Address already in use.
_____ ProxyConnectTestCase.test_https_tunnel_auth_error _____
result = None, g = <generator object test_https_tunnel_auth_error at 0x7f3720c32280>
deferred = <Deferred at 0x7f37259842d8 current result: None>

    def _inlineCallbacks(result, g, deferred):
        """
        See L{inlineCallbacks}.
        """
        # This function is complicated by the need to prevent unbounded recursion
        # arising from repeatedly yielding immediately ready deferreds.  This while
        # loop and the waiting variable solve that by manually unfolding the
        # recursion.

        waiting = [True, # waiting for result?
                   None] # result

        while 1:
            try:
                # Send the last result back as the result of the yield expression.
                isFailure = isinstance(result, failure.Failure)
                if isFailure:
                    result = result.throwExceptionIntoGenerator(g)
                else:
>                   result = g.send(result)

/usr/lib64/python2.7/site-packages/twisted/internet/defer.py:1128: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../work/scrapy-1.0.3/tests/test_proxy_connect.py:82: in test_https_tunnel_auth_error
    self._assert_got_tunnel_error(l)
../../../work/scrapy-1.0.3/tests/test_proxy_connect.py:107: in _assert_got_tunnel_error
    self.assertEqual(str(log).count('TunnelError'), 1)
/usr/lib64/python2.7/site-packages/twisted/trial/_synctest.py:437: in assertEqual
    super(_Assertions, self).assertEqual(first, second, msg)
E   FailTest: 0 != 1
--------- Captured stderr call ------------
Traceback (most recent call last):
  File "/usr/lib64/python2.7/runpy.py", line 162, in _run_module_as_main
    "__main__", fname, loader, pkg_name)
  File "/usr/lib64/python2.7/runpy.py", line 72, in _run_code
    exec code in run_globals
  File "/mnt/gen2/TmpDir/portage/dev-python/scrapy-1.0.3/work/scrapy-1.0.3/tests/mockserver.py", line 205, in <module>
    httpPort = reactor.listenTCP(8998, factory)
  File "/usr/lib64/python2.7/site-packages/twisted/internet/posixbase.py", line 492, in listenTCP
    p.startListening()
  File "/usr/lib64/python2.7/site-packages/twisted/internet/tcp.py", line 984, in startListening
    raise CannotListenError(self.interface, self.port, le)
twisted.internet.error.CannotListenError: Couldn't listen on any:8998: [Errno 98] Address already in use.
________________________ ProxyConnectTestCase.test_https_tunnel_without_leak_proxy_authorization_header ________________________

result = None, g = <generator object test_https_tunnel_without_leak_proxy_authorization_header at 0x7f371eea9410>
deferred = <Deferred at 0x7f372570b758 current result: None>

    def _inlineCallbacks(result, g, deferred):
        """
        See L{inlineCallbacks}.
        """
        # This function is complicated by the need to prevent unbounded recursion
        # arising from repeatedly yielding immediately ready deferreds.  This while
        # loop and the waiting variable solve that by manually unfolding the
        # recursion.

        waiting = [True, # waiting for result?
                   None] # result

        while 1:
            try:
                # Send the last result back as the result of the yield expression.
                isFailure = isinstance(result, failure.Failure)
                if isFailure:
                    result = result.throwExceptionIntoGenerator(g)
                else:
>                   result = g.send(result)

/usr/lib64/python2.7/site-packages/twisted/internet/defer.py:1128: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../work/scrapy-1.0.3/tests/test_proxy_connect.py:91: in test_https_tunnel_without_leak_proxy_authorization_header
    self._assert_got_response_code(200, l)
../../../work/scrapy-1.0.3/tests/test_proxy_connect.py:104: in _assert_got_response_code
    self.assertEqual(str(log).count('Crawled (%d)' % code), 1)
/usr/lib64/python2.7/site-packages/twisted/trial/_synctest.py:437: in assertEqual
    super(_Assertions, self).assertEqual(first, second, msg)
E   FailTest: 0 != 1
----------------------------------------------------- Captured stderr call -----------------------------------------------------
Traceback (most recent call last):
  File "/usr/lib64/python2.7/runpy.py", line 162, in _run_module_as_main
    "__main__", fname, loader, pkg_name)
  File "/usr/lib64/python2.7/runpy.py", line 72, in _run_code
    exec code in run_globals
  File "/mnt/gen2/TmpDir/portage/dev-python/scrapy-1.0.3/work/scrapy-1.0.3/tests/mockserver.py", line 205, in <module>
    httpPort = reactor.listenTCP(8998, factory)
  File "/usr/lib64/python2.7/site-packages/twisted/internet/posixbase.py", line 492, in listenTCP
    p.startListening()
  File "/usr/lib64/python2.7/site-packages/twisted/internet/tcp.py", line 984, in startListening
    raise CannotListenError(self.interface, self.port, le)
twisted.internet.error.CannotListenError: Couldn't listen on any:8998: [Errno 98] Address already in use.
====== 4 failed, most passed in 21.65 seconds ======
I was expecting the installing of the plugin of pytest-twisted to make it pass but no impact.
It appears that once the first fails it cascades onto the tests that follow making them fail. Note the
[Errno 98] Address already. I suspect this is still occupied by a prior test and need be liberated for the following test(s). Or alternatively are they expected failures that are registered as failures and cause the suite to exit with ====== 4 failed, ???
Do you require any further information?
👍 1