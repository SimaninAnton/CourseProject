Contributor
IAlwaysBeCoding commented on Nov 23, 2016 â€¢
edited
Here is an example of what I'm talking about:
import json
from scrapy import Item
from scrapy.loader import ItemLoader
from scrapy.loader.processors import SelectJmes
string = r'''{
  "type": [
    "http://schema.org/Physician"
  ], 
  "properties": {
    "url": [
      "http://www.vitals.com/doctors/Dr_Patrick_B_Wright.html"
    ], 
    "aggregateRating": [
      {
        "type": [
          "http://schema.org/AggregateRating"
        ], 
        "properties": {
          "worstRating": [
            "0"
          ], 
          "reviewCount": [
            "1"
          ], 
          "bestRating": [
            "5"
          ], 
          "ratingValue": [
            "4.3"
          ], 
          "ratingCount": [
            "6"
          ]
        }
      }
    ], 
    "medicalspecialty": [
      {
        "type": [
          "http://schema.org/MedicalSpecialty"
        ], 
        "properties": {
          "name": [
            "Pediatric Surgery"
          ]
        }
      }
    ], 
    "name": [
      "Dr. Patrick Wright MD"
    ], 
    "address": [
      {
        "type": [
          "http://schema.org/PostalAddress"
        ], 
        "properties": {
          "addressLocality": [
            "Jackson"
          ], 
          "addressRegion": [
            "MS"
          ], 
          "streetAddress": [
            "2500 N State St"
          ], 
          "postalCode": [
            "39216"
          ], 
          "telephone": [
            "(601) 984-2150"
          ]
        }
      }
    ]
  }
}'''

data = json.loads(string)

#This will work fine
proc = SelectJmes('properties.address[0].properties.postalCode[0]')


#However, if its used in an input processor it will fail and will need to add `[0]` before the query in order to work.

class SomeItem(Item):
     postal_code = Field(
          input_processor = SelectJmes('properties.address[0].properties.postalCode[0]')
     )

loader = ItemLoader(SomeItem())
loader.add_value('postal_code', data)
item = loader.load_item()
The only way to make it work will be to always add [0] to the JmesQuery when done inside an input or output field processor.
#This will work
[0].properties.address[0].properties.postalCode[0]
Should we document this odd behaviour due to arg_to_iter doing this?