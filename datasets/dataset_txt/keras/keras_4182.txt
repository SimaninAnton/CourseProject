jrosebr1 commented on 13 Oct 2016
I am trying to fine-tune the pre-trained VGG16 network from keras.applications.VGG16. I'm doing the standard approach that @fchollet detailed in his blog post.
My code is as follows:
# load the VGG16 network, ensuring the head FC layer sets are
# left off
print("[INFO] loading VGG16...")
model = VGG16(weights="imagenet", include_top=False)

# loop over the layers in VGG (until the final CONV block) and
# freeze the layers -- we will only be fine-tuning the final CONV
# block along with our dense FC layers
for layer in model.layers[:15]:
    layer.trainable = False

# load the FCHeadNet and add it to the convolutional base
print("[INFO] loading head...")
head = FCHeadNet.build((512 * 7 * 7,), 17, dropout=True)
head.load_weights(args["head"])
model.add(head)
The FCHeadNet class simply defines a Sequential model. However, when I try to add head to the model I receive the following error message:
File "finetune.py", line 30, in 
    model.add(head)
AttributeError: 'Model' object has no attribute 'add'
Inspecting the vgg16.py source I see that VGG16 is defined as a Model versus a Sequential, thus there is no .add method. My question is therefore:
How do I fine-tune the pre-trained VGG16 class? Or is this simply not possible and I need to define VGG16 by hand and load the weights manually?
2