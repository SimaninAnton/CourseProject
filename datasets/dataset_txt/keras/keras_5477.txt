Contributor
carlthome commented on 14 Apr 2016
Assuming the generator for model.predict_generator() should behave just like model.fit_generator(), how come returned predictions are only for the first frame for every sequence? Shouldn't entire sequences be predicted over all their minibatches?
For example (pseudocode):
def batches(x, y, timesteps, run_once=False):
    total_timesteps = x.shape[1]
    while True:
        for i in range(0, total_timesteps, timesteps):
            yield x[:, i:i+timesteps, :], y[:, i:i+timesteps, :]
        if run_once:
            return


# Load some arbitrary sequential dataset.
x_train, y_train, x_test, y_test = load_data() 

# Assume total data's sequence length is larger and evenly divisible by this number.
timesteps = 10 

# Count batches in dataset.
train_samples = sum([b[0].shape[0] for b in batches(x_train, y_train, timesteps, run_once=True])
test_samples = sum([b[0].shape[0] for b in batches(x_test, y_test, timesteps, run_once=True])

# Fit a stateful RNN model and do predictions.
model.fit_generator(batches(x_train, y_train, timesteps), train_samples)
y = model.predict_generator(batches(x_test, y_test, timesteps), test_samples)
print(y.shape)