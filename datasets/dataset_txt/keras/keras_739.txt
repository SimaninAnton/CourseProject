BoPengGit commented on 3 Oct 2018 â€¢
edited
   ...
    model = Sequential()
    model.add(Embedding(max_features, embed_dim, input_length = X.shape[1], embeddings_initializer=Constant(embedding_matrix)))
    model.add(LSTM(embed_dim,  return_sequences=True))
    model.add(LSTM(embed_dim))
    model.add(Dense(Y.shape[1], activation='softmax'))

    model.compile(loss='categorical_crossentropy', optimizer=Adam(lr=learning_rate, decay=learning_rate_decay)
                  , metrics=['accuracy'])
    callbacks = EarlyStopping(monitor="val_loss", mode="min", patience=1)
    model.fit(X_train, Y_train, epochs=epochs_size, batch_size=batch_size, validation_split=validation_size)

    model.save('my_model.h5')  # creates a HDF5 file 'my_model.h5'
    self.model = load_model('my_model.h5')
    ...  

model = ModelUtils()
model.test_train('all')

TypeError                                 Traceback (most recent call last)
<ipython-input-2-befde50870bc> in <module>()
      1 model = ModelUtils()
----> 2 model.test_train('all')

<ipython-input-1-ffd6c48cfe45> in test_train(self, model_name)
     55             model.config.train_data_path = model.config.model_path = self.save_path
     56             model.config.train_split, model.config.validation_size = 0.9, 0.1
---> 57             [model.train(use_saved=x) for x in [False, True]]
     58 
     59         print('model.train() ran without errors.')

<ipython-input-1-ffd6c48cfe45> in <listcomp>(.0)
     55             model.config.train_data_path = model.config.model_path = self.save_path
     56             model.config.train_split, model.config.validation_size = 0.9, 0.1
---> 57             [model.train(use_saved=x) for x in [False, True]]
     58 
     59         print('model.train() ran without errors.')

~/Desktop/app/api-master/redflag-api/redflag/ai/models/abstract_text_categorical_model.py in train(self, use_saved)
     88             # load weights into new model
     89             self.model.load_weights(mu.data_path(c.model_path, c.weights_filename))
---> 90             self.model = load_model('my_model.h5')
     91 
     92         else:

~/anaconda3/lib/python3.6/site-packages/keras/engine/saving.py in load_model(filepath, custom_objects, compile)
    259             raise ValueError('No model found in config file.')
    260         model_config = json.loads(model_config.decode('utf-8'))
--> 261         model = model_from_config(model_config, custom_objects=custom_objects)
    262 
    263         # set weights

~/anaconda3/lib/python3.6/site-packages/keras/engine/saving.py in model_from_config(config, custom_objects)
    333                         '`Sequential.from_config(config)`?')
    334     from ..layers import deserialize
--> 335     return deserialize(config, custom_objects=custom_objects)
    336 
    337 

~/anaconda3/lib/python3.6/site-packages/keras/layers/__init__.py in deserialize(config, custom_objects)
     53                                     module_objects=globs,
     54                                     custom_objects=custom_objects,
---> 55                                     printable_module_name='layer')

~/anaconda3/lib/python3.6/site-packages/keras/utils/generic_utils.py in deserialize_keras_object(identifier, module_objects, custom_objects, printable_module_name)
    143                     config['config'],
    144                     custom_objects=dict(list(_GLOBAL_CUSTOM_OBJECTS.items()) +
--> 145                                         list(custom_objects.items())))
    146             with CustomObjectScope(custom_objects):
    147                 return cls.from_config(config['config'])

~/anaconda3/lib/python3.6/site-packages/keras/engine/sequential.py in from_config(cls, config, custom_objects)
    291             layer = layer_module.deserialize(conf,
    292                                              custom_objects=custom_objects)
--> 293             model.add(layer)
    294         return model

~/anaconda3/lib/python3.6/site-packages/keras/engine/sequential.py in add(self, layer)
    164                     # and create the node connecting the current layer
    165                     # to the input layer we just created.
--> 166                     layer(x)
    167                     set_inputs = True
    168                 else:

~/anaconda3/lib/python3.6/site-packages/keras/engine/base_layer.py in __call__(self, inputs, **kwargs)
    430                                          '`layer.build(batch_input_shape)`')
    431                 if len(input_shapes) == 1:
--> 432                     self.build(input_shapes[0])
    433                 else:
    434                     self.build(input_shapes)

~/anaconda3/lib/python3.6/site-packages/keras/layers/embeddings.py in build(self, input_shape)
    104             regularizer=self.embeddings_regularizer,
    105             constraint=self.embeddings_constraint,
--> 106             dtype=self.dtype)
    107         self.built = True
    108 

~/anaconda3/lib/python3.6/site-packages/keras/legacy/interfaces.py in wrapper(*args, **kwargs)
     89                 warnings.warn('Update your `' + object_name +
     90                               '` call to the Keras 2 API: ' + signature, stacklevel=2)
---> 91             return func(*args, **kwargs)
     92         wrapper._original_function = func
     93         return wrapper

~/anaconda3/lib/python3.6/site-packages/keras/engine/base_layer.py in add_weight(self, name, shape, dtype, initializer, regularizer, trainable, constraint)
    247         if dtype is None:
    248             dtype = K.floatx()
--> 249         weight = K.variable(initializer(shape),
    250                             dtype=dtype,
    251                             name=name,

~/anaconda3/lib/python3.6/site-packages/keras/initializers.py in __call__(self, shape, dtype)
     58 
     59     def __call__(self, shape, dtype=None):
---> 60         return K.constant(self.value, shape=shape, dtype=dtype)
     61 
     62     def get_config(self):

~/anaconda3/lib/python3.6/site-packages/keras/backend/tensorflow_backend.py in constant(value, dtype, shape, name)
    425     if dtype is None:
    426         dtype = floatx()
--> 427     return tf.constant(value, dtype=dtype, shape=shape, name=name)
    428 
    429 

~/anaconda3/lib/python3.6/site-packages/tensorflow/python/framework/constant_op.py in constant(value, dtype, shape, name, verify_shape)
    194   tensor_value.tensor.CopyFrom(
    195       tensor_util.make_tensor_proto(
--> 196           value, dtype=dtype, shape=shape, verify_shape=verify_shape))
    197   dtype_value = attr_value_pb2.AttrValue(type=tensor_value.tensor.dtype)
    198   const_tensor = g.create_op(

~/anaconda3/lib/python3.6/site-packages/tensorflow/python/framework/tensor_util.py in make_tensor_proto(values, dtype, shape, verify_shape)
    434       nparray = np.empty(shape, dtype=np_dt)
    435     else:
--> 436       _AssertCompatible(values, dtype)
    437       nparray = np.array(values, dtype=np_dt)
    438       # check to them.

~/anaconda3/lib/python3.6/site-packages/tensorflow/python/framework/tensor_util.py in _AssertCompatible(values, dtype)
    345     else:
    346       raise TypeError("Expected %s, got %s of type '%s' instead." %
--> 347                       (dtype.name, repr(mismatch), type(mismatch).__name__))
    348 
    349 

  TypeError: Expected float32, got {'type': 'ndarray', 'value': [[0.340459815213927, ..., -0.370059996843338]]} of type 'dict' instead.
Above is a code snippet of the file. Does anyone maybe know what is the problem? Thanks!