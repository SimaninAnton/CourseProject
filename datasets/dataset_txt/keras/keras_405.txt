smivv commented on 1 Feb 2019 â€¢
edited
Hi all!
I have an error when I am trying to use ImageDataGenerator with flow_from_directory function for transfer learning of NasNet model from keras.applications.
OS: ArchLinux
Tensorflow version: 1.12.0
Keras version: 2.2.4 (updated from master)
GPUs: GeForce GTX 1080 Ti
CUDA version: 9.0.176-4
CUDNN version: 7.0.5-2
My code:
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Model
from keras.layers import Dense, GlobalAveragePooling2D
from keras import backend as K
from keras.optimizers import SGD, Adam
from keras.callbacks import ModelCheckpoint

TRAIN_SAMPLES = 2081
TEST_SAMPLES = 904
BATCH_SIZE = 32

TRAIN_DATA_DIR = './train'
TEST_DATA_DIR = './test'

# create the base pre-trained model
base_model = NASNetMobile(weights='imagenet', include_top=False)

# add a global spatial average pooling layer
x = base_model.output
x = GlobalAveragePooling2D()(x)
# let's add a fully-connected layer
x = Dense(1024, activation='relu')(x)
# and a logistic layer -- let's say we have 200 classes
predictions = Dense(200, activation='softmax')(x)

# this is the model we will train
model = Model(inputs=base_model.input, outputs=predictions)

# first: train only the top layers (which were randomly initialized)
# i.e. freeze all convolutional InceptionV3 layers
for layer in base_model.layers:
    layer.trainable = False

# prepare train dataset
train_gen = ImageDataGenerator(rescale=1. / 255,
                               shear_range=0.2,
                               zoom_range=0.2,
                               horizontal_flip=True)

train_gen.flow_from_directory(directory=TRAIN_DATA_DIR,
                              target_size=base_model.input.shape[1:3],
                              class_mode='categorical',
                              batch_size=BATCH_SIZE,
                              shuffle=True)

# prepare test dataset
val_gen = ImageDataGenerator(rescale=1. / 255)

val_gen.flow_from_directory(directory=TEST_DATA_DIR,
                            target_size=base_model.input.shape[1:3],
                            class_mode='categorical',
                            batch_size=BATCH_SIZE)

# compile the model (should be done *after* setting layers to non-trainable)
model.compile(optimizer=Adam(lr=0.00001), loss='categorical_crossentropy')

checkpoint = ModelCheckpoint(filepath="./NasNet_mobile_model_weights.h5",
                             monitor=["acc"],
                             verbose=1,
                             mode='max')

# train the model on the new data for a few epochs
model.fit_generator(train_gen,
                    steps_per_epoch=TRAIN_SAMPLES//BATCH_SIZE,
                    epochs=50,
                    validation_data=val_gen,
                    validation_steps=TEST_SAMPLES//BATCH_SIZE,
                    callbacks=[checkpoint],
                    verbose=2, 
                    workers=4
                    )
Output I get:
Using TensorFlow backend.
2019-02-01 10:07:40.704532: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1432] Found device 0 with properties: 
name: GeForce GTX 1080 Ti major: 6 minor: 1 memoryClockRate(GHz): 1.582
pciBusID: 0000:02:00.0
totalMemory: 10.91GiB freeMemory: 10.76GiB
2019-02-01 10:07:40.856400: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1432] Found device 1 with properties: 
name: GeForce GTX 1080 Ti major: 6 minor: 1 memoryClockRate(GHz): 1.582
pciBusID: 0000:03:00.0
totalMemory: 10.92GiB freeMemory: 10.76GiB
2019-02-01 10:07:41.022663: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1432] Found device 2 with properties: 
name: GeForce GTX 1080 Ti major: 6 minor: 1 memoryClockRate(GHz): 1.582
pciBusID: 0000:82:00.0
totalMemory: 10.92GiB freeMemory: 10.76GiB
2019-02-01 10:07:41.204602: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1432] Found device 3 with properties: 
name: GeForce GTX 1080 Ti major: 6 minor: 1 memoryClockRate(GHz): 1.582
pciBusID: 0000:83:00.0
totalMemory: 10.92GiB freeMemory: 10.76GiB
2019-02-01 10:07:41.206764: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1511] Adding visible gpu devices: 0, 1, 2, 3
2019-02-01 10:07:42.265616: I tensorflow/core/common_runtime/gpu/gpu_device.cc:982] Device interconnect StreamExecutor with strength 1 edge matrix:
2019-02-01 10:07:42.265657: I tensorflow/core/common_runtime/gpu/gpu_device.cc:988]      0 1 2 3 
2019-02-01 10:07:42.265663: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1001] 0:   N Y N N 
2019-02-01 10:07:42.265667: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1001] 1:   Y N N N 
2019-02-01 10:07:42.265670: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1001] 2:   N N N Y 
2019-02-01 10:07:42.265674: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1001] 3:   N N Y N 
2019-02-01 10:07:42.266421: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1115] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 10401 MB memory) -> physical GPU (device: 0, name: GeForce GTX 1080 Ti, pci bus id: 0000:02:00.0, compute capability: 6.1)
2019-02-01 10:07:42.266867: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1115] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:1 with 10403 MB memory) -> physical GPU (device: 1, name: GeForce GTX 1080 Ti, pci bus id: 0000:03:00.0, compute capability: 6.1)
2019-02-01 10:07:42.267168: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1115] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:2 with 10403 MB memory) -> physical GPU (device: 2, name: GeForce GTX 1080 Ti, pci bus id: 0000:82:00.0, compute capability: 6.1)
2019-02-01 10:07:42.267448: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1115] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:3 with 10403 MB memory) -> physical GPU (device: 3, name: GeForce GTX 1080 Ti, pci bus id: 0000:83:00.0, compute capability: 6.1)
Found 2081 images belonging to 15 classes.
Found 904 images belonging to 15 classes.
Traceback (most recent call last):
  File "/home/smirnvla/PycharmProjects/keras-nasnet/train.py", line 118, in <module>
    verbose=2
  File "/usr/lib/python3.6/site-packages/keras/legacy/interfaces.py", line 91, in wrapper
    return func(*args, **kwargs)
  File "/usr/lib/python3.6/site-packages/keras/engine/training.py", line 1418, in fit_generator
    initial_epoch=initial_epoch)
  File "/usr/lib/python3.6/site-packages/keras/engine/training_generator.py", line 133, in fit_generator
    if len(validation_data) == 2:
TypeError: object of type 'ImageDataGenerator' has no len()

Process finished with exit code 1
I tried to debug the code and seems like in this line
keras/keras/engine/training_generator.py
Line 110 in e59570a
 if val_gen and workers > 0: 
if statement is false due val_gen == False. In the code above variable val_gen could be initialized as False because generator has no __next__ or next functions.
Is it normal behavior?