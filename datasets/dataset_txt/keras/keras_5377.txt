unography commented on 22 Apr 2016
I am trying to use the VGG16 model arhcitecture and train on my own images. I currently have 4GB of GPU memory, but still it is giving me the error,
ResourceExhaustedError: OOM when allocating tensor with shape[16,64,226,226]
This is my code currently:
from keras.models import Sequential
from keras.layers.core import Flatten, Dense, Dropout
from keras.layers.convolutional import Convolution2D, MaxPooling2D, ZeroPadding2D
from keras.optimizers import SGD
import cv2, numpy as np
from PIL import Image, ImageFile
import traceback

ImageFile.LOAD_TRUNCATED_IMAGES = True
import glob
def VGG_16(weights_path=None):
    model = Sequential()
    model.add(ZeroPadding2D((1, 1), input_shape=(3, 224, 224)))
    model.add(Convolution2D(64, 3, 3, activation='relu'))
    model.add(ZeroPadding2D((1, 1)))
    model.add(Convolution2D(64, 3, 3, activation='relu'))
    model.add(MaxPooling2D((2, 2), strides=(2, 2)))

    model.add(ZeroPadding2D((1, 1)))
    model.add(Convolution2D(128, 3, 3, activation='relu'))
    model.add(ZeroPadding2D((1, 1)))
    model.add(Convolution2D(128, 3, 3, activation='relu'))
    model.add(MaxPooling2D((2, 2), strides=(2, 2)))

    model.add(ZeroPadding2D((1, 1)))
    model.add(Convolution2D(256, 3, 3, activation='relu'))
    model.add(ZeroPadding2D((1, 1)))
    model.add(Convolution2D(256, 3, 3, activation='relu'))
    model.add(ZeroPadding2D((1, 1)))
    model.add(Convolution2D(256, 3, 3, activation='relu'))
    model.add(MaxPooling2D((2, 2), strides=(2, 2)))

    model.add(ZeroPadding2D((1, 1)))
    model.add(Convolution2D(512, 3, 3, activation='relu'))
    model.add(ZeroPadding2D((1, 1)))
    model.add(Convolution2D(512, 3, 3, activation='relu'))
    model.add(ZeroPadding2D((1, 1)))
    model.add(Convolution2D(512, 3, 3, activation='relu'))
    model.add(MaxPooling2D((2, 2), strides=(2, 2)))

    model.add(ZeroPadding2D((1, 1)))
    model.add(Convolution2D(512, 3, 3, activation='relu'))
    model.add(ZeroPadding2D((1, 1)))
    model.add(Convolution2D(512, 3, 3, activation='relu'))
    model.add(ZeroPadding2D((1, 1)))
    model.add(Convolution2D(512, 3, 3, activation='relu'))
    model.add(MaxPooling2D((2, 2), strides=(2, 2)))

    model.add(Flatten())
    model.add(Dense(4096, activation='relu'))
    model.add(Dropout(0.5))
    model.add(Dense(4096, activation='relu'))
    model.add(Dropout(0.5))
    model.add(Dense(1000, activation='softmax'))

    if weights_path:
        model.load_weights(weights_path)
    return model
if __name__ == "__main__":
    imageData = []
    labelData = []
    print 'loading front'
    for file in glob.glob('*'):
        try:
            imOpen = Image.open(file)
            imOpen = imOpen.resize((224, 224), Image.ANTIALIAS)
            array = np.array(imOpen).astype(np.float32)
            im = array
            im = im.transpose((2,0,1))
            imageData.append(im)
            labelData.append([1])
        except:
            pass
    for file in glob.glob('*'):
        try:
            imOpen = Image.open(file)
            imOpen = imOpen.resize((224, 224), Image.ANTIALIAS)
            array = np.array(imOpen).astype(np.float32)
            im = array
            im = im.transpose((2,0,1))
            imageData.append(im)
            labelData.append([2])
        except:
            pass
    print len(imageData), len(labelData)
    imageData = np.array(imageData)
    labelData = np.array(labelData)
    print 'creating model'
    model = VGG_16(None)
    sgd = SGD(lr=0.1, decay=1e-6, momentum=0.9, nesterov=True)
    model.compile(optimizer=sgd, loss='sparse_categorical_crossentropy')
    print 'fitting model'
    hist = model.fit(imageData, labelData, nb_epoch=1, batch_size=16, validation_split=.15, show_accuracy=True)
    print hist.history