ayaz-amin commented on 1 May 2019 â€¢
edited
Please make sure that the boxes below are checked before you submit your issue. If your issue is an implementation question, please ask your question on StackOverflow or join the Keras Slack channel and ask there instead of filing a GitHub issue.
Thank you!
Check that you are up-to-date with the master branch of Keras. You can update with:
pip install git+git://github.com/keras-team/keras.git --upgrade --no-deps
If running on TensorFlow, check that you are up-to-date with the latest version. The installation instructions can be found here.
If running on Theano, check that you are up-to-date with the master branch of Theano. You can update with:
pip install git+git://github.com/Theano/Theano.git --upgrade --no-deps
Provide a link to a GitHub Gist of a Python script that can reproduce your issue (or just copy the script here if it is short).
###################################
###################################
So I am building a Siamese Network using VGG19 as my base network. Everything went fine throughout training and testing. However, I noticed that during training, my accuracy is quite high (only took 2 epochs to reach 100% accuracy, which was amazing), but when testing, the accuracy is around 0% (sometimes even lower, as shown below). The code is in train.py and test.py located in my repo here.
When I run train.py, this is the output:
Epoch 1/2
1/1 [==============================] - 20s 20s/sample - loss: 0.6932 - accuracy: 0.3265
Epoch 2/2
1/1 [==============================] - 19s 19s/sample - loss: 0.6659 - accuracy: 1.0000
When I run test.py, this is the output:
Prediction:  [[[[6.8002939e-04]
   [3.8743019e-07]
   [0.0000000e+00]
   [0.0000000e+00]
   [4.1723251e-07]
   [2.6953220e-04]
   [8.9406967e-08]]

  [[9.2387199e-07]
   [1.4901161e-07]
   [0.0000000e+00]
   [0.0000000e+00]
   [0.0000000e+00]
   [0.0000000e+00]
   [0.0000000e+00]]

  [[1.1920929e-07]
   [0.0000000e+00]
   [1.3113022e-06]
   [0.0000000e+00]
   [0.0000000e+00]
   [0.0000000e+00]
   [1.9937754e-05]]

  [[0.0000000e+00]
   [0.0000000e+00]
   [0.0000000e+00]
   [0.0000000e+00]
   [0.0000000e+00]
   [1.0132790e-06]
   [0.0000000e+00]]

  [[0.0000000e+00]
   [0.0000000e+00]
   [0.0000000e+00]
   [0.0000000e+00]
   [0.0000000e+00]
   [0.0000000e+00]
   [0.0000000e+00]]

  [[0.0000000e+00]
   [0.0000000e+00]
   [0.0000000e+00]
   [0.0000000e+00]
   [0.0000000e+00]
   [0.0000000e+00]
   [0.0000000e+00]]

  [[0.0000000e+00]
   [0.0000000e+00]
   [0.0000000e+00]
   [0.0000000e+00]
   [0.0000000e+00]
   [0.0000000e+00]
   [9.3051212e-36]]]]
I was expecting the output to be showing ones (0 means no similarity, 1 meaning full similarity). I am pretty sure their is nothing wrong with this code. Am I doing anything wrong? Or is it a bug? Also, I am using tf.keras from Tensorflow 2.0.