AntreasAntoniou commented on 13 Aug 2016
Please make sure that the boxes below are checked before you submit your issue. Thank you!
Check that you are up-to-date with the master branch of Keras. You can update with:
pip install git+git://github.com/fchollet/keras.git --upgrade --no-deps
If running on Theano, check that you are up-to-date with the master branch of Theano. You can update with:
pip install git+git://github.com/Theano/Theano.git --upgrade --no-deps
Provide a link to a GitHub Gist of a Python script that can reproduce your issue (or just copy the script here if it is short).
I was wondering how one can load a pretrained model and then add new layers to it. With the pre-functional keras, you could do that by using the model class, building the architecture, loading the weights and then treating the result as another component of the new more complex network.
With the after-functional keras you can no longer do that.
E.g.
The below script builds and loads the model and pops the last 2 layers:
resnet_model = get_resnet50()
weights_file = "th_dim_ordering_resnet50.h5"
resnet_model.load_weights(weights_file)
resnet_model.layers.pop()
resnet_model.layers.pop()
The resnet model uses the provided keras example methods, and is of type Model:
model = Model(inp, out)
Now when I try to use this as just another component with the following code:
dense_output = Dense(output_dim=10000, activation='relu')(resnet_model)
model = Model(input=inputs, output=dense_output)
model.compile(optimizer=Adam(lr=1e-5),
 loss='categorical_crossentropy')
I get:
Traceback (most recent call last):
File "train.py", line 253, in <module>
train_and_predict()
File "train.py", line 211, in train_and_predict
model = get_unet_multitask()
File "train.py", line 114, in get_unet_multitask
up6 = UpSampling2D(size=(2, 2))(resnet_model)
File "/usr/local/lib/python2.7/dist-packages/Keras-1.0.7-py2.7.egg/keras/engine/topology.py", line    467, in __call__
self.assert_input_compatibility(x)
File "/usr/local/lib/python2.7/dist-packages/Keras-1.0.7-py2.7.egg/keras/engine/topology.py", line  403, in assert_input_compatibility
if K.ndim(x) != spec.ndim:
File "/usr/local/lib/python2.7/dist-packages/Keras-1.0.7-py2.7.egg/keras/backend/theano_backend.py", line 70, in ndim
return x.ndim
AttributeError: 'Model' object has no attribute 'ndim'
Any ways to go around this without having to rewrite the architecture building method to using the old keras?
8