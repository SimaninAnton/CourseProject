maxbry commented on 21 Jun 2016
I roughly have this network structure:
input_a = Input(shape=(input_dim, 1))
input_b = Input(shape=(input_dim, 1))

vec_a = embedding_a(input_a)
vec_b = embedding_b(input_b)

cos_distance = merge([vec_a, vec_b], mode='cos', dot_axes=1)
cos_distance = Reshape((1,))(cos_distance)

model = Model(input=[input_a, input_b], output=[cos_similarity])
model.compile(optimizer='sgd', loss='cosine_proximity')
When training this network, loss gets nan. Do I use cosine_proximity correctly? Also, cosine proximity/distance is ranged between -1 and 1. Do I have to use this as targets or 1 and 0 as usually?
By the way: The name does not seem intuitive because we usually want to minimize what we define as loss. Shouldn't it be cosine_distance?
9