nryant commented on 15 Apr 2016
Currently, when applying dropout to an input x, the _keras_history attribute of x is modified in place from keras.engine.topology.InputLayer to keras.layers.core.Dropout:
from keras.layers import Dropout, Input
x = Input((800,), dtype='float32', name='input')
print('Before: %r' % x._keras_history[0])
x_drop = Dropout(0.5, name='input_drop')(x)
print('After: %r' % x._keras_history[0])
which yields:
Before: <keras.engine.topology.InputLayer object at 0x7ffb137dd310>
After: <keras.engine.topology.InputLayer object at 0x7ffb137dd310>
When we then specify x as input to a new Model instance as in the following:
from keras.layers import Activation
from keras.models import Model
y = Activation('linear')(x)
model = Model(x, y)
there are two unintended consequences:
a warning is generated to the effect that x is not an input tensor
the input_names attribute of model is set incorrectly to ['input_drop'] rather than ['input'], so any call to train_on_batch, fit_generator, etc that specifies x as a dictionary will fail
This issue is specific to Dropout and does not arise when GaussianNoise or GaussianDropout is applied to an input.
Check that you are up-to-date with the master branch of Keras. You can update with:
pip install git+git://github.com/fchollet/keras.git --upgrade --no-deps
If running on Theano, check that you are up-to-date with the master branch of Theano. You can update with:
pip install git+git://github.com/Theano/Theano.git --upgrade --no-deps