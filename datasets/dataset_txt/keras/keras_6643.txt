colincsl commented on 20 Sep 2015
I am wondering if there if there is a simple way to get the class conditional activations at each layer. I know you can get all activations using the following:
get_feature = []
for i in range(len(model.layers)):
    get_feature +=[theano.function([model.layers[0].input],model.layers[i].get_output(train=False),allow_input_downcast=False)]

features = get_feature[layer_idx](X_test[:batch_size])
In my case I only want to look at the activations for each layer that contribute to class X. I know that with the output score for class X then you can backprogate this through each layer. I would have no problem doing it by hand if it was simply a bunch of matrix multiplications. However, it gets a little messy with the convolutional and pooling layers and I don't want to manually update this every time I make a change to my network.
I'm hoping you can do this with a set of Theano functions, like the ones above, to get these class conditional activations.