walleva commented on 30 May 2016 â€¢
edited
After reading the shared model in the Guide to the Functional API.
I have a question. If I trained a merged model, could I reuse its component model to predict partial results? Has the weights of the partial model for predicting been trained after using fit on the merged model?
Take "Shared vision model" as an example.
from keras.layers import merge, Convolution2D, MaxPooling2D, Input, Dense, Flatten
from keras.models import Model

# first, define the vision modules
digit_input = Input(shape=(1, 27, 27))
x = Convolution2D(64, 3, 3)(digit_input)
x = Convolution2D(64, 3, 3)(x)
x = MaxPooling2D((2, 2))(x)
out = Flatten()(x)

vision_model = Model(digit_input, out)

# then define the tell-digits-apart model
digit_a = Input(shape=(1, 27, 27))
digit_b = Input(shape=(1, 27, 27))

# the vision model will be shared, weights and all
out_a = vision_model(digit_a)
out_b = vision_model(digit_b)

concatenated = merge([out_a, out_b], mode='concat')
out = Dense(1, activation='sigmoid')(concatenated)

classification_model = Model([digit_a, digit_b], out)
classification_model is the merged model. vision_model is one of its components.
After training by classification_model.fit , I used vision_model.predict to get the intermedia features on the corresponding input. This idea could run without errors via keras after testing by myself. I just added the classification_model.fit and vision_model.predict after constructing the model in the same .py file.
My question is whether the partial results I got from vision_model.predict after classification_model.fit actually use the trained weights or not? I want to ensure this point.
@fchollet Look forward to your help. Thank you!