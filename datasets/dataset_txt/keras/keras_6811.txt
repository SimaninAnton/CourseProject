Contributor
pjadzinsky commented on 2 Aug 2015
Hi,
I have three time serie and I'm trying to predict one from the other two. I want to implement a graph with two inputs and one output and some RNN architecture. Each time series has shape (nb_samples, time_steps, 1). I'd like to concatenate the two inputs into a 3D tensor of shape (nb_samples, time_steps, 2) before calling the SimpleRNN layer. The 1st version of the code below fails. However, the 2nd version (changing merge_mode to 'sum' and adjusting for the expected tensor size in the next recurrent layer) works just fine.
Any idea what the problem might be?
thanks
Pablo
Version 1 (crashes)
    graph = Graph()
    graph.add_input(name='input1', ndim=3)
    graph.add_input(name='input2', ndim=3)

    graph.add_node(Activation(linear), 
            name='concat', inputs=['input1', 'input2'], merge_mode='concat')

    graph.add_node(SimpleRNN(2, 1, return_sequences=True),
            name='SimpleRNN', input='concat')

    graph.add_output(name='output', input='SimpleRNN')

    graph.compile('rmsprop', {'output':'mse'})
Version 2 (works fine)
    graph = Graph()
    graph.add_input(name='input1', ndim=3)
    graph.add_input(name='input2', ndim=3)

    graph.add_node(Activation(linear), 
            name='concat', inputs=['input1', 'input2'], merge_mode='sum')

    graph.add_node(SimpleRNN(1, 1, return_sequences=True),
            name='SimpleRNN', input='concat')

    graph.add_output(name='output', input='SimpleRNN')

    graph.compile('rmsprop', {'output':'mse'})