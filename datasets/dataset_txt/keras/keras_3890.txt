fdabek1 commented on 19 Nov 2016 â€¢
edited
I am trying to test out an RNN that takes two inputs (x and z) where z will tell the layer which nodes should be updated in that specific timestep. To accomplish this I have started by using some ClockworkRNN code (from here: https://github.com/braingineer/ikelos/blob/master/ikelos/layers/cwrnn.py) and have tried to adapt it to my problem.
The issue that I am having is that the ClockworkRNN decides which nodes to update based on the timestep number, where my approach is trying to not depend on the timestep but rather be an extra variable that is passed for each sequence. Thus, I cannot have the information precomputed for which nodes to activate.
Ideally, changing the step function in the Clockwork from:
def step(self, x, states):
    # [Regular code placeholder] #

    output = self.activation(h + K.dot(prev_output * B_U, self.U))
    output = K.switch(K.equal(time_step % period, 0.), output, prev_output)
    return output, [output, time_step+1]
to be:
def step(self, x, z, states):
    # [Regular code placeholder] #

    output = self.activation(h + K.dot(prev_output * B_U, self.U))
    output = K.switch(K.equal(z % period, 0.), output, prev_output)
    return output, [output, time_step+1]
However, this has proved very difficult to do as I would need to alter a lot of the keras backend code for this. I have tried multiple solutions and so far am thinking that the last one will work, but I am wondering if there is any good method or support to accomplish my task?
Modify the step function.
This requires changing a lot of the keras backend code which will not make this an elegant solution. I wonder if this is the only way to do this efficiently.
Add an integer to the end of each one-hot vector in the input x, and then reshape the x variable to get this integer out.
This doesn't seem to work as the layers are computed for the larger size and then there is a mismatch problem.
Use a merge layer where one input is x and another is z.
I don't believe that this will work as the merge layer won't have access to the hidden state from the previous timestep to be able to decide which to keep.
In the "get_constants" function, calculate z using a sci-kit learn model and then append it to the constants that are returned. Then in the step function pick the correct value of z for the current timestep and sequence.
I know that I can get the current timestep number, but I don't know where I can figure out which sequence to index into the array of z's. And this seems very inefficient as the entire array will be passed as it will be in the "non_sequences" part of the Theano scan function.
Does anybody have any insight into how its best to solve this problem?
Thanks!
Please make sure that the boxes below are checked before you submit your issue. Thank you!
Check that you are up-to-date with the master branch of Keras. You can update with:
pip install git+git://github.com/fchollet/keras.git --upgrade --no-deps
If running on Theano, check that you are up-to-date with the master branch of Theano. You can update with:
pip install git+git://github.com/Theano/Theano.git --upgrade --no-deps
Provide a link to a GitHub Gist of a Python script that can reproduce your issue (or just copy the script here if it is short).