happycube commented on 27 Mar 2017 â€¢
edited
I'm getting started with CNN's on character-level strings and I ran into a problem with Reshape(). It's quite likely the code's wrong, but the error message is a bit funny and not helpful. code:
# input shape is 

model = Sequential()

model.add(Embedding(97, 16, name='emb'))
print(model.get_output_shape_at(0))
model.add(Reshape((None, 4, 4, 1), name='reshape'))
appears to pass a nameless reshape() layer into Tensorflow, causing failure.
I'm running Python 3.5 with TF 1.0.1 and Keras 2.0.2 from pip.
(None, None, 16)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-216-c68c4a4c27b5> in <module>()
      3 model.add(Embedding(97, 16, name='emb'))
      4 print(model.get_output_shape_at(0))
----> 5 model.add(Reshape((None, 4, 4, 1), name='reshape'))
      6 #model.add(Reshape((1000, 256)))
      7 

/usr/local/lib/python3.5/dist-packages/keras/models.py in add(self, layer)
    453                           output_shapes=[self.outputs[0]._keras_shape])
    454         else:
--> 455             output_tensor = layer(self.outputs[0])
    456             if isinstance(output_tensor, list):
    457                 raise TypeError('All layers in a Sequential model '

/usr/local/lib/python3.5/dist-packages/keras/engine/topology.py in __call__(self, inputs, **kwargs)
    552 
    553             # Actually call the layer, collecting output(s), mask(s), and shape(s).
--> 554             output = self.call(inputs, **kwargs)
    555             output_mask = self.compute_mask(inputs, previous_mask)
    556 

/usr/local/lib/python3.5/dist-packages/keras/layers/core.py in call(self, inputs)
    401             if input_shape is not None:
    402                 target_shape = self.compute_output_shape(input_shape)[1:]
--> 403         return K.reshape(inputs, (-1,) + target_shape)
    404 
    405     def get_config(self):

/usr/local/lib/python3.5/dist-packages/keras/backend/tensorflow_backend.py in reshape(x, shape)
   1536         A tensor.
   1537     """
-> 1538     return tf.reshape(x, shape)
   1539 
   1540 

/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/gen_array_ops.py in reshape(tensor, shape, name)
   2628   """
   2629   result = _op_def_lib.apply_op("Reshape", tensor=tensor, shape=shape,
-> 2630                                 name=name)
   2631   return result
   2632 

/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/op_def_library.py in apply_op(self, op_type_name, name, **keywords)
    492           except TypeError as err:
    493             if dtype is None:
--> 494               raise err
    495             else:
    496               raise TypeError(

/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/op_def_library.py in apply_op(self, op_type_name, name, **keywords)
    489                 dtype=dtype,
    490                 as_ref=input_arg.is_ref,
--> 491                 preferred_dtype=default_dtype)
    492           except TypeError as err:
    493             if dtype is None:

/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py in internal_convert_to_tensor(value, dtype, name, as_ref, preferred_dtype)
    700 
    701         if ret is None:
--> 702           ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)
    703 
    704         if ret is NotImplemented:

/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/constant_op.py in _constant_tensor_conversion_function(v, dtype, name, as_ref)
    108                                          as_ref=False):
    109   _ = as_ref
--> 110   return constant(v, dtype=dtype, name=name)
    111 
    112 

/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/constant_op.py in constant(value, dtype, shape, name, verify_shape)
     97   tensor_value = attr_value_pb2.AttrValue()
     98   tensor_value.tensor.CopyFrom(
---> 99       tensor_util.make_tensor_proto(value, dtype=dtype, shape=shape, verify_shape=verify_shape))
    100   dtype_value = attr_value_pb2.AttrValue(type=tensor_value.tensor.dtype)
    101   const_tensor = g.create_op(

/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/tensor_util.py in make_tensor_proto(values, dtype, shape, verify_shape)
    439   if numpy_dtype == dtypes.string and not isinstance(values, np.ndarray):
    440     proto_values = _FlattenToStrings(values)
--> 441     tensor_proto.string_val.extend([compat.as_bytes(x) for x in proto_values])
    442     return tensor_proto
    443 

/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/tensor_util.py in <listcomp>(.0)
    439   if numpy_dtype == dtypes.string and not isinstance(values, np.ndarray):
    440     proto_values = _FlattenToStrings(values)
--> 441     tensor_proto.string_val.extend([compat.as_bytes(x) for x in proto_values])
    442     return tensor_proto
    443 

/usr/local/lib/python3.5/dist-packages/tensorflow/python/util/compat.py in as_bytes(bytes_or_text, encoding)
     63   else:
     64     raise TypeError('Expected binary or unicode string, got %r' %
---> 65                     (bytes_or_text,))
     66 
     67 

TypeError: Expected binary or unicode string, got -1
also, this code:
model.add(Embedding(97, 16, name='emb'))
print(model.get_output_shape_at(0))
model.add(Reshape((-1, 4, 4), name='reshape'))
produces this error:
(None, None, 16)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-224-6b23cf680570> in <module>()
      3 model.add(Embedding(97, 16, name='emb'))
      4 print(model.get_output_shape_at(0))
----> 5 model.add(Reshape((-1, 4, 4), name='reshape'))
      6 #model.add(Reshape((1000, 256)))
      7 

/usr/local/lib/python3.5/dist-packages/keras/models.py in add(self, layer)
    453                           output_shapes=[self.outputs[0]._keras_shape])
    454         else:
--> 455             output_tensor = layer(self.outputs[0])
    456             if isinstance(output_tensor, list):
    457                 raise TypeError('All layers in a Sequential model '

/usr/local/lib/python3.5/dist-packages/keras/engine/topology.py in __call__(self, inputs, **kwargs)
    552 
    553             # Actually call the layer, collecting output(s), mask(s), and shape(s).
--> 554             output = self.call(inputs, **kwargs)
    555             output_mask = self.compute_mask(inputs, previous_mask)
    556 

/usr/local/lib/python3.5/dist-packages/keras/layers/core.py in call(self, inputs)
    400                 pass
    401             if input_shape is not None:
--> 402                 target_shape = self.compute_output_shape(input_shape)[1:]
    403         return K.reshape(inputs, (-1,) + target_shape)
    404 

/usr/local/lib/python3.5/dist-packages/keras/layers/core.py in compute_output_shape(self, input_shape)
    383     def compute_output_shape(self, input_shape):
    384         return (input_shape[0],) + self._fix_unknown_dimension(
--> 385             input_shape[1:], self.target_shape)
    386 
    387     def call(self, inputs):

/usr/local/lib/python3.5/dist-packages/keras/layers/core.py in _fix_unknown_dimension(self, input_shape, output_shape)
    371                 known *= dim
    372 
--> 373         original = np.prod(input_shape, dtype=int)
    374         if unknown is not None:
    375             if known == 0 or original % known != 0:

/usr/local/lib/python3.5/dist-packages/numpy/core/fromnumeric.py in prod(a, axis, dtype, out, keepdims)
   2496 
   2497     return _methods._prod(a, axis=axis, dtype=dtype,
-> 2498                           out=out, **kwargs)
   2499 
   2500 

/usr/local/lib/python3.5/dist-packages/numpy/core/_methods.py in _prod(a, axis, dtype, out, keepdims)
     33 
     34 def _prod(a, axis=None, dtype=None, out=None, keepdims=False):
---> 35     return umr_prod(a, axis, dtype, out, keepdims)
     36 
     37 def _any(a, axis=None, dtype=None, out=None, keepdims=False):

TypeError: int() argument must be a string, a bytes-like object or a number, not 'NoneType'