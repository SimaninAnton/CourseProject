heaven00 commented on 6 Jul 2017
I want to maximize R^2 for my problem statement. I wrote a custom loss function for this based on https://en.wikipedia.org/wiki/Coefficient_of_determination
def nn_r2_score(y, prediction):
    total_error = tf.reduce_sum(tf.square(tf.subtract(y, tf.reduce_mean(y))))
    residual_error = tf.reduce_sum(tf.square(tf.subtract(y, prediction)))
    R_squared = tf.subtract(1.0, tf.div(total_error, residual_error))
    return R_squared
So far I haven't been able to find an option for this in the documentation or stackoverflow. Is there a workaround for it ?