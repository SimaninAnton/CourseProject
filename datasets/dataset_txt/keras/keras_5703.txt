fluency03 commented on 23 Mar 2016
I modified this lstm_text_generation.py example of Keras and just for testing a sequence of integer data set. I generate the sequence using the following code:
with open( "sequence", 'w') as f:
for i in range(10):
    for j in range(1, 1656):
        f.write(str(j) + '\n')
which actually just generates the integer sequence from 1 to 1655 for 10 times.
The model is built as:
model.add(LSTM(hidden_len, return_sequences=True, input_shape=(sentence_length, input_len)))
model.add(Dropout(dropout))
model.add(LSTM(hidden_len, return_sequences=False))
model.add(Dropout(dropout))
model.add(Dense(output_len))
model.add(Activation('softmax'))
model.compile(loss='categorical_crossentropy', optimizer='rmsprop')
where hidden_len=512, sentence_length=20, input_len=1656, dropout=0.2, and sentence step is 3.
This is the training code:
model.fit(x, y, batch_size=128, nb_epoch=1)
Other settings and information are just as same as this lstm_text_generation.py example.
I got some interesting results:
------------------------ Start Training ------------------------
Iteration:  39
Epoch 1/1
5510/5510 [==============================] - 166s - loss: 0.0125
------------Temperature: 0.20
Generating with seed: 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284

Generated:265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 305 306 306 307 307 308 308 309 309 310 310 311 311 312 312 313 313 314 314 315 315 316 316 317 317 318 318 319 319 320 320 321 321 322 322 323 323 324 324 393 325 325 325 398 291 326 326 326 326 327 327 328 328 328 328 329 329 329 329 330 330 330 330 331 331 331 331 332 332 332 332 333 333 333 333 334 334 334 334
In the above result example, the seed is 20 integers from 265 to 284. And as you can see in the generated sequence, after the original seed, the generated results are good at from 285 to 304 as:
285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304
where there are 20, which is exactly the length of the seed and the length of the sentence. I do not know whether this is some coincidence, or there are some reasons behind it.
However, after the 305, each number doubled their appearance as:
305 305 306 306 307 307 308 308 309 309 310 310 311 311 312 312 313 313 314 314 315 315 316 316 317 317 318 318 319 319 320 320 321 321 322 322 323 323 324 324
And, interestingly, there are 40 integers, where 20 integers are doubled respectively.
I am wondering anyone could offer some explanations about this. And how to make the results better.