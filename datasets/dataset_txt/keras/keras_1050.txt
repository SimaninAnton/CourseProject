moothes commented on 4 May 2018 â€¢
edited
I want to load weights from a strange hdf5 file. Since my code gets errors when using load_model function, I have to load weights manually. The network is original VGG16. My function is:
def load_weights(model, weight_file_path):   
    fs = h5py.File(weight_file_path)
    f = fs["model_weights"]
    try:
        layers = model.layers
        for layer in layers:
          layer_name = layer.get_config()['name']
          tuples = []
          for l, g in f.items():
            if l == layer_name:
              num_param = len(layer.weights)
              layer_weights = g.values()[:num_param]
              if l.startswith('conv') :
                layer_weights[0] = np.array(layer_weights[0]).T
              elif l.startswith('dense') :
                layer_weights[0] = np.array(layer_weights[0])
              for sw, w in zip(layer.weights, layer_weights):
                  tuples.append((sw, w))
          K.batch_set_value(tuples)
 
    finally:
        fs.close()
When I test it on some images, I find its weights in dense layer always change, however, the weights in conv layers is loaded successfully. I don't know what's the difference between conv layer and dense layer ? How should I load the weights in dense layer?
My network definition is:
def VGG16_convolutions():
    model = Sequential()
    model.add(ZeroPadding2D((1, 1), input_shape=(None, None, 3)))

    model.add(Convolution2D(64, 3, 3, activation='relu', name='conv1_1'))
    model.add(ZeroPadding2D((1, 1)))
    model.add(Convolution2D(64, 3, 3, activation='relu', name='conv1_2'))
    model.add(MaxPooling2D((2, 2), strides=(2, 2)))
    
    model.add(ZeroPadding2D((1, 1)))
    model.add(Convolution2D(128, 3, 3, activation='relu', name='conv2_1'))
    model.add(ZeroPadding2D((1, 1)))
    model.add(Convolution2D(128, 3, 3, activation='relu', name='conv2_2'))
    model.add(MaxPooling2D((2, 2), strides=(2, 2)))
    
    model.add(ZeroPadding2D((1, 1)))
    model.add(Convolution2D(256, 3, 3, activation='relu', name='conv3_1'))
    model.add(ZeroPadding2D((1, 1)))
    model.add(Convolution2D(256, 3, 3, activation='relu', name='conv3_2'))
    model.add(ZeroPadding2D((1, 1)))
    model.add(Convolution2D(256, 3, 3, activation='relu', name='conv3_3'))
    model.add(MaxPooling2D((2, 2), strides=(2, 2)))
    
    model.add(ZeroPadding2D((1, 1)))
    model.add(Convolution2D(512, 3, 3, activation='relu', name='conv4_1'))
    model.add(ZeroPadding2D((1, 1)))
    model.add(Convolution2D(512, 3, 3, activation='relu', name='conv4_2'))
    model.add(ZeroPadding2D((1, 1)))
    model.add(Convolution2D(512, 3, 3, activation='relu', name='conv4_3'))
    model.add(MaxPooling2D((2, 2), strides=(2, 2)))

    model.add(ZeroPadding2D((1, 1)))
    model.add(Convolution2D(512, 3, 3, activation='relu', name='conv5_1'))
    model.add(ZeroPadding2D((1, 1)))
    model.add(Convolution2D(512, 3, 3, activation='relu', name='conv5_2'))
    model.add(ZeroPadding2D((1, 1)))
    model.add(Convolution2D(512, 3, 3, activation='relu', name='conv5_3'))
    model.add(MaxPooling2D((2, 2), strides=(2, 2)))
    model.add(GlobalAveragePooling2D())
    model.add(Dense(2, activation = 'softmax'))
    return model
Thanks for your help!