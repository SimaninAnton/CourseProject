hadim commented on 28 Aug 2016
I am using the following score function :
def dice_coef(y_true, y_pred, smooth=1):
    y_true_f = K.flatten(y_true)
    y_pred_f = K.flatten(y_pred)
    intersection = K.sum(y_true_f * y_pred_f)
    return (2. * intersection + smooth) / (K.sum(y_true_f) + K.sum(y_pred_f) + smooth)

def dice_coef_loss(y_true, y_pred):
    return -dice_coef(y_true, y_pred)

# ...
model.compile(optimizer=optimizer, loss=dice_coef_loss, metrics=[dice_coef])
# ...
It works pretty well for me training a fully DCNN to segment images.
Would you be interested in a PR in order to implement this in Keras ?
Note that the original implementation comes from the Kaggle post https://www.kaggle.com/c/ultrasound-nerve-segmentation/forums/t/21358/0-57-deep-learning-keras-tutorial