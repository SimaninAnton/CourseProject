Contributor
dbonadiman commented on 9 Nov 2015
From my opinion there is an issue in the current implementation of graph model.
Actually if you want to add a layer with multiple input you need to merge and use the standard sequential layers. But graph model are much more powerful from my point of view. Moreover having two kinds of input arguments makes all very clutter.
At the moment we are making the Merge function really messy only to avoid this problem.
Here is an example that worth more then a 1000 words.
Let's assume that we want to create a model accepting two sentence or two images, creates a representation of the two and computes a similarity function between the two representation
model = Graph()
model.add_input(... , name='input1')
model.add_input(... , name='input2')

#i will skip some of the nodes to create the representation
model.add_node(some hidden nodes, name='inp1repr', input='input1')
model.add_node(some hidden nodes, name='inp2repr', input='input2')

#then it is possible to build a similarity function between the two representation in this way. 
#Assume x = inp1repr and z= inp2repr so the similarity function can be computed as follows y =  xWz where W is similarity matrix and y is the similarity score.

model.add_node(Dense(inp1repr_size), name='intermediate_node', input='inp2repr')
model.add_node(Activation('linear'), name='similarity', inputs=['inp1repr', 'intermediate_node'], merge_mode='dot')
This implementation is confusing and redundant.
What i'm proposing is to make the Graph model more transparent giving the possibility to add Layers that accepts multiple inputs.
So it is possible to implement a Similarity layer computing y = xWz with a trainable matrix W. By doing so the implementation of the previous code would be.
model = Graph()
model.add_input(... , name='input1')
model.add_input(... , name='input2')

#i will skip some of the nodes to create the representation
model.add_node(some hidden nodes, name='inp1repr', input='input1')
model.add_node(some hidden nodes, name='inp2repr', input='input2')

model.add_node(Similarity(), name='similarity',  input=['inp1repr', 'inp2repr'])
That will remove most of the problems in the Merge Layer by simply implementing all the layers accepting multiple inputs as autonomous layers.
This change can break previous models but it can be implemented in a way that if we have a standard layer with multiple inputs and a merge mode, we can simply add two layers: a merge layer, and the chosen layer on top; in this way it should work exactly as before.
What do you think?
Since it is a big change i ask for the @fchollet opinion in particular before starting on anything.
Thanks to all of you.