bottler commented on 2 Sep 2015
I saw the mention on issue number 60 about automatic tensor size calculation, where it's suggested that it would necessitate a change in the API. I've been thinking about this recently.
I've been having a go at a solution which doesn't change the API. Basically the user supplies the sequential container itself in place of the parameter in the layer's constructor.
So you can write this:
model = Sequential()
model.add(Dense(20, 64, init='uniform'))
model.add(Activation('tanh'))
model.add(Dropout(0.5))
model.add(Dense(model, 64, init='uniform'))
model.add(Activation('tanh'))
model.add(Dropout(0.5))
model.add(Dense(model, 2, init='uniform'))
model.add(Activation('softmax'))
My implementation is in https://github.com/bottler/keras/ .
In addition, the user can add a layer to specify the size, so the above example could begin
model = Sequential()
model.add(SpecifyShape([20]))
model.add(Dense(model, 64, init='uniform'))
The overhead when creating a layer is that a layer should either define get_output_dims(self) or calc_output_dims(self,lastdims). I have added these to some built-in layers.
It currently assumes that "prev=" has not been used - it assumes all layers are sequential.
I would like some feedback on whether this is a good idea, and how it might be improved. I have not yet added any tests, it's probably buggy.