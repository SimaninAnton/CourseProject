Contributor
ipod825 commented on 24 Jan 2016
The following code works. (output (2,3,6))
from keras.models import Sequential, Graph
from keras.layers.embeddings import Embedding
from keras.layers.convolutional import Convolution1D, MaxPooling1D
from keras.layers import containers
import numpy as np

X=np.array([[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8]], dtype=int)
vocab_size = 20
embedding_dims=5
maxlen=X.shape[1]
nb_filter = 6

model = Sequential()                                                                                                                  
model.add(Embedding(vocab_size, embedding_dims, input_length=maxlen))
model.add(Convolution1D(nb_filter=nb_filter,filter_length=3))
model.add(MaxPooling1D(pool_length=2))
model.compile(loss='binary_crossentropy',optimizer='rmsprop')
res=model.predict(X)

print res.shape
Using containers to encapsulate Convolutions1D and MaxPooling1D fails
#model.add(Convolution1D(nb_filter=nb_filter,filter_length=3))
#model.add(MaxPooling1D(pool_length=2))
c=containers.Sequential()
c.add(Convolution1D(nb_filter=nb_filter,filter_length=3))
c.add(MaxPooling1D(pool_length=2))
model.add(c)
Error message:
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-5-0a98e2c8d425> in <module>()
     19 # model.add(Convolution1D(nb_filter=nb_filter,filter_length=3))
     20 # model.add(MaxPooling1D(pool_length=2))
---> 21 model.compile(loss='binary_crossentropy',optimizer='rmsprop')
     22 res=model.predict(X)
     23 

/usr/local/lib/python2.7/dist-packages/keras/models.pyc in compile(self, optimizer, loss, class_mode)
    406         self.X_test = self.get_input(train=False)
    407 
--> 408         self.y_train = self.get_output(train=True)
    409         self.y_test = self.get_output(train=False)
    410 

/usr/local/lib/python2.7/dist-packages/keras/layers/containers.pyc in get_output(self, train)
    126 
    127     def get_output(self, train=False):
--> 128         return self.layers[-1].get_output(train)
    129 
    130     def set_input(self):

/usr/local/lib/python2.7/dist-packages/keras/layers/containers.pyc in get_output(self, train)
    126 
    127     def get_output(self, train=False):
--> 128         return self.layers[-1].get_output(train)
    129 
    130     def set_input(self):

/usr/local/lib/python2.7/dist-packages/keras/layers/convolutional.pyc in get_output(self, train)
    373 
    374     def get_output(self, train=False):
--> 375         X = self.get_input(train)
    376         X = K.expand_dims(X, -1)   # add dummy last dimension
    377         X = K.permute_dimensions(X, (0, 2, 1, 3))

/usr/local/lib/python2.7/dist-packages/keras/layers/core.pyc in get_input(self, train)
    157                 if previous_layer_id in self.layer_cache:
    158                     return self.layer_cache[previous_layer_id]
--> 159             previous_output = self.previous.get_output(train=train)
    160             if hasattr(self, 'layer_cache') and self.cache_enabled:
    161                 previous_layer_id = '%s_%s' % (id(self.previous), train)

/usr/local/lib/python2.7/dist-packages/keras/layers/convolutional.pyc in get_output(self, train)
    141         X = K.expand_dims(X, -1)  # add a dimension of the right
    142         X = K.permute_dimensions(X, (0, 2, 1, 3))
--> 143         conv_out = K.conv2d(X, self.W, strides=self.subsample,
    144                             border_mode=self.border_mode,
    145                             dim_ordering='th')

AttributeError: 'Convolution1D' object has no attribute 'W'
Both Theano and tensorflow fails. Using containers to encapsulate other layers work just fine.