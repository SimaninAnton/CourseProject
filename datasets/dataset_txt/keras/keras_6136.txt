HristoBuyukliev commented on 12 Jan 2016
The following model fails:
ae = Sequential()
encoder = containers.Sequential([Dense(input_dim=n_in, output_dim=n_out, activation='sigmoid')])
decoder = containers.Sequential([Dense(input_dim=n_out, output_dim=n_in, activation='sigmoid')])
ae.add(AutoEncoder(encoder=encoder, decoder=decoder,
                   output_reconstruction=False))
ae.compile(loss='mean_squared_error', optimizer='rmsprop')
ae.fit(X_train_tmp, X_train_tmp, batch_size=batch_size, nb_epoch=nb_epoch, validation_split=0.1)
The first epoch goes fine, and then it gives error message
File "/usr/local/lib/python2.7/dist-packages/keras/models.py", line 581, in fit shuffle=shuffle, metrics=metrics) File "/usr/local/lib/python2.7/dist-packages/keras/models.py", line 254, in _fit verbose=0) File "/usr/local/lib/python2.7/dist-packages/keras/models.py", line 308, in _test_loop batch_outs = f(ins_batch)
ValueError: Input dimension mis-match. (input[0].shape[1] = 400, input[2].shape[1] = 626)
Apply node that caused the error: Elemwise{Composite{sqr((scalar_sigmoid((i0 + i1)) - i2))}}[(0, 0)](Dot22.0, InplaceDimShuffle{x,0}.0, <TensorType(float32, matrix)>)
Toposort index: 5
Inputs types: [TensorType(float32, matrix), TensorType(float32, row), TensorType(float32, matrix)]
Inputs shapes: [(100, 400), (1, 400), (100, 626)]
Inputs strides: [(1600, 4), (1600, 4), (2504, 4)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[Sum{axis=[1], acc_dtype=float64}(Elemwise{Composite{sqr((scalar_sigmoid((i0 + i1)) - i2))}}[(0, 0)].0)]]
I don't see why that wouldn't work, as it is 1:1 with the FAQs. Any ideas?