daikazoku commented on 21 Jun 2015
I need to start by saying that I'm just toying with machine learning, so this could just be me doing stupid mistakes.
I wrote a very small and useless model just to check that my script works, since I'm on a cpu. I keep giving it the same batch just to see some quick change in weights, but they don't change anyway.
This seem to happen with any architecture. I started with a smaller version of the VGG example.
I've tried with every optimizer, this version of the script uses RMSprop because it shouldn't matter if I'm choosing bad hyperparameters.
The model has the exact same loss at every step of training.
2.1586735246819186 0.9375
32/32 [==============================] - 1s - loss: 11.8727 - acc.: 0.6562
2.1586735246819186 0.9375
32/32 [==============================] - 1s - loss: 11.8727 - acc.: 0.6562
...
2.1586735246819186 0.9375
32/32 [==============================] - 1s - loss: 11.8727 - acc.: 0.6562
2.1586735246819186 0.9375
32/32 [==============================] - 1s - loss: 11.8727 - acc.: 0.6562
I save at each "epoch" (in this case single batch) the filters.
This is the first filter before the first epoch, just initialized.
First filter after ~10 epochs.
This is the script I'm using:
fsize = 15

model = Sequential()
model.add(Convolution2D(4, 3, fsize, fsize)) 
model.add(Activation('relu'))
model.add(MaxPooling2D(poolsize=(imsize - fsize + 1, imsize - fsize + 1)))
model.add(Flatten())

model.add(Dense(4, 2))
model.add(Activation('softmax'))

optimizer = RMSprop()
model.compile(loss='categorical_crossentropy', optimizer=optimizer)


# ! save filters
w = model.get_weights()[0]
j = 0
for f in w:
    j += 1
    f = np.swapaxes(f, 0, 2)
    f = np.swapaxes(f, 0, 1)
    misc.imsave("filter" + str(j) + ".png", f)
# / save filters

for epoch in range(200):
    for batch in range(1):
        #loadTrain(a, b) loads b examples starting from a
        X_train, Y_train = loadTrain(32 * batch + 200, 32)

        # this has the same result:
        # model.fit(X_train, Y_train, nb_epoch=1)

        loss, accuracy = model.train(X_train, Y_train, accuracy=True)
        print(loss, accuracy)


    X_test, Y_test = loadTrain(1100, 32)
    model.evaluate(X_test, Y_test, show_accuracy=True)

    # ! save filters
    w = model.get_weights()[0]
    for f in w:
        j += 1
        f = np.swapaxes(f, 0, 2)
        f = np.swapaxes(f, 0, 1)
        misc.imsave("filter" + str(j) + ".png", f)

    # / save weights