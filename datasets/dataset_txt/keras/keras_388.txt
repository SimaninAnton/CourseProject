SoumiaMenasria commented on 10 Feb 2019
i want to understand the following outputs:
train_on_batch(noise, [real_synthetic_labels, class_labels, actual_features])
** noise is the input of generator. real_synthetic_label : real and synthetic labels concatenated . class_label: only real labels . actual_features : real data with statistical computations.
the model is :
GCD = Model(inputs=G.input, outputs=[D_to_freeze(G.output), C(G.output), feature_net(G.output)])
GCD.compile(loss={"D":"binary_crossentropy","C":"categorical_crossentropy","SFN": train.euc_dist_loss},
optimizer="adam", metrics={"D":"accuracy",'C':"accuracy"},
loss_weights = {"D": D_loss_weight, "C": C_loss_weight,"SFN": SFD_loss_weight})
== output is (just an example ) ==>[4.2631083, 0.6892812, 1.24051, 2.333317, 0.76, 0.8]
what the first, second, third , fourth , fifth and sixth values of the output array represent ?
same question for the next model:
model.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=['accuracy'])
train_on_batch(full_input, real_synthetic_label)
**full_input : concatenation between real and synthetic data . real_synthetic_label : concatenation between real and synthetic labels
== output is (just an example) ==> [0.69301736, 0.52]
what the first and second values means ?