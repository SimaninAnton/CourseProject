Contributor
berleon commented on 5 Apr 2016
Keras-1 cannot handle a Model with only one layer that does nothing.
See this small example:
from keras.engine.topology import Input, merge, Layer
from keras.models import Model

def test_one_layer():
    x = Input(shape=(20,))
    out = Layer()(x)
    model = Model([x], [out])
    model.compile('adam', 'mse')
    model.predict(np.random.sample((64, 20)))
The output
============================= test session starts ==============================
platform linux -- Python 3.5.1, pytest-2.8.7, py-1.4.31, pluggy-0.3.1
rootdir: /home/leon/repos/beras, inifile: 
plugins: cov-2.2.1, pep8-1.0.6, xdist-1.14
collected 6 items

tests/test_util.py F

=================================== FAILURES ===================================
________________________________ test_one_layer ________________________________

    def test_one_layer():
        x = Input(shape=(20,))
        out = Layer()(x)
>       model = Model([x], [out])

tests/test_util.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <keras.engine.training.Model object at 0x7fd494201ef0>, input = [input_1]
output = [input_1], name = 'model_1'

    def __init__(self, input, output, name=None):
        # handle name argument
        if not name:
            prefix = self.__class__.__name__.lower()
            name = prefix + '_' + str(K.get_uid(prefix))
        self.name = name

        # Container-specific properties
        if type(input) in {list, tuple}:
            self.inputs = list(input)  # tensor or list of tensors
        else:
            self.inputs = [input]
        if type(output) in {list, tuple}:
            self.outputs = list(output)
        else:
            self.outputs = [output]

        # check for redundancy in inputs:
        inputs_set = set(self.inputs)
        if len(inputs_set) != len(self.inputs):
            raise Exception('The list of inputs passed to the model '
                            'is redundant. All inputs should only appear once.'
                            ' Found: ' + str(self.inputs))

        # list of initial layers (1 to 1 mapping with self.inputs,
        # hence the same layer might appear twice)
        self.input_layers = []
        # TODO: probably useless because input layers must be Input layers (node_indices = [0], tensor_indices = [0])
        self.input_layers_node_indices = []
        self.input_layers_tensor_indices = []
        # list of layers (1 to 1 mapping with self.inputs,
        # hence the same layer might appear twice)
        self.output_layers = []
        # TODO: probably useless
        self.output_layers_node_indices = []
        self.output_layers_tensor_indices = []
        # all layers in order of horizontal graph traversal.
        # Entries are unique. Includes input and output layers.
        self.layers = []

        # this is for performance optimization
        # when calling the Container on new inputs.
        # every time the Container is called on a set on input tensors,
        # we compute the output tensors,
        # output masks and output shapes in one pass,
        # then cache them here. When of of these output is queried later,
        # we retrieve it from there instead of recomputing it.
        self._output_mask_cache = {}
        self._output_tensor_cache = {}
        self._output_shape_cache = {}

        # arguments validation
        for x in self.inputs:
            # check that x is a Keras tensor
            if not hasattr(x, '_keras_history'):
                cls_name = self.__class__.__name__
                raise Exception('Input tensors to a ' + cls_name + ' ' +
                                'must be Keras tensors. Found: ' + str(x) +
                                ' (missing Keras metadata).')
            # check that x is an input tensor
            layer, node_index, tensor_index = x._keras_history
            if len(layer.inbound_nodes) > 1 or (layer.inbound_nodes and layer.inbound_nodes[0].inbound_layers):
                cls_name = self.__class__.__name__
                raise Exception(cls_name + ' inputs must come from '
                                'a Keras Input layer, '
                                'they cannot be the output of '
                                'a previous non-Input layer. '
                                'Here, a tensor specified as '
                                'input to "' + self.name +
                                '" was not an Input tensor, '
                                'it was generated by layer ' +
                                layer.name + '.\n'
                                'Note that input tensors are '
                                'instantiated via `tensor = Input(shape)`.\n'
                                'The tensor that caused the issue was: ' +
>                               str(x.name))
E               Exception: Model inputs must come from a Keras Input layer, they cannot be the output of a previous non-Input layer. Here, a tensor specified as input to "model_1" was not an Input tensor, it was generated by layer layer_1.
E               Note that input tensors are instantiated via `tensor = Input(shape)`.
E               The tensor that caused the issue was: input_1

../keras/keras/engine/topology.py:1531: Exception
======================== 5 tests deselected by '-kone' =========================
==================== 1 failed, 5 deselected in 0.63 seconds ====================