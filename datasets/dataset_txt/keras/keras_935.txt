peoky commented on 25 Jun 2018 â€¢
edited
Hi
I'm trying to build an auto-encoder in keras with a custom loss function, for example, consider the following auto-encoder:
x = Input(shape=(50,))
encoded = Dense(32, activation='relu')(x)
decoded = Dense(50, activation='sigmoid')(encoded)

encoder = Model(x, encoded)
autoencoder = Model(x, decoded)

m1 = encoder.predict(c1) #c1, c2, c3: some inputs
m2 = encoder.predict(c2)
m3 = encoder.predict(c3)

autoencoder.compile(optimizer='adam', loss=custom_loss(encoded, m1, m2, m3))

from keras import backend as K
def custom_loss(x, m1, m2, m3):`
    def loss(y_true, y_pred):
        a = k.mean(k.square(y_true - y_pred))
        b = 0
        # assume our data belongs to 3 classes
        if x belongs to class1:
            b = k.mean(k.square(x - m1))
        elif x belongs to class2:
            b = k.mean(k.square(x - m2))
        elif x belongs to class3:
            b = k.mean(k.square(x - m3))
        return a + b
    return loss
I don't know how to implement custom loss to calculate 'b', also I need to update m1, m2, and m3 after every batch, can anyone plz help me?