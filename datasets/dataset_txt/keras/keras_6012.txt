Contributor
kylemcdonald commented on 2 Feb 2016
I've been using this callback for stopping training after a fixed period of time, useful when testing different architectures consecutively. Is it worth contributing?
One thing I noticed was self.model.stop_training only stops the model after an epoch, but with some training where the epochs are very long you might want to stop after a batch.
import time
from keras.callbacks import Callback
class TimedStopping(Callback):
    '''Stop training when enough time has passed.
    # Arguments
        seconds: maximum time before stopping.
        verbose: verbosity mode.
    '''
    def __init__(self, seconds=None, verbose=0):
        super(Callback, self).__init__()

        self.start_time = 0
        self.seconds = seconds
        self.verbose = verbose

    def on_train_begin(self, logs={}):
        self.start_time = time.time()

    def on_epoch_end(self, epoch, logs={}):
        if time.time() - self.start_time > self.seconds:
            self.model.stop_training = True
            if self.verbose:
                print('Stopping after %s seconds.' % self.seconds)
4