Contributor
zo7 commented on 15 Apr 2016 â€¢
edited
It seems that trying to load weights from a Sequential model into an equivalent Model created with the functional API doesn't work, since the input layers are counted as an additional layer that the Sequential model doesn't have.
For example, trying to load a pre-trained VGG-16 model like the one provided here results in the following exception being thrown:
Traceback (most recent call last):
  File "ssl_temp.py", line 240, in <module>
    compile(args.model, overwrite=args.overwrite)
  File "ssl_temp.py", line 209, in compile
    model = build_model((3,224,224), (2,200,200), (128,))
  File "ssl_temp.py", line 157, in build_model
    semantic_stream = build_stream()
  File "ssl_temp.py", line 124, in build_stream
    model.load_weights(vgg_path)
  File "/usr/local/lib/python3.5/site-packages/keras/engine/topology.py", line 2273, in load_weights
    str(len(flattened_layers)) + '.')
Exception: You are trying to load a weight file containing 37 layers into a model with 38.
Gist to model used.
Would it make sense to disregard input layers when loading weights since they don't have any parameters? (or perhaps have Sequential models start with an implicit InputLayer?)
One could just use the original Sequential model instead, but I've been running into trouble mixing the two. Edit: Ignore this comment, it was from my own error.