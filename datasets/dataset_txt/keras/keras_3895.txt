Contributor
carlthome commented on 18 Nov 2016
nb_samples = 1
nb_timesteps = 1
nb_features = 1
nb_hidden = 1

i = Input(batch_shape=(nb_samples, nb_timesteps, nb_features))
o = Bidirectional(LSTM(nb_hidden, stateful=True))(i)
o = Dense(nb_classes, activation='softmax')(o)
model = Model(i, o)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-14-f240ae219281> in <module>()
      5 
      6 i = Input(batch_shape=(nb_samples, nb_timesteps, nb_features))
----> 7 o = Bidirectional(LSTM(nb_hidden, stateful=True))(i)
      8 o = Dense(nb_classes, activation='softmax')(o)
      9 model = Model(i, o)

/home/carl/anaconda3/lib/python3.5/site-packages/keras/layers/wrappers.py in __init__(self, layer, merge_mode, weights, **kwargs)
    164         config = layer.get_config()
    165         config['go_backwards'] = not config['go_backwards']
--> 166         self.backward_layer = layer.__class__.from_config(config)
    167         self.forward_layer.name = 'forward_' + self.forward_layer.name
    168         self.backward_layer.name = 'backward_' + self.backward_layer.name

/home/carl/anaconda3/lib/python3.5/site-packages/keras/engine/topology.py in from_config(cls, config)
    869                 output of get_config.
    870         '''
--> 871         return cls(**config)
    872 
    873     def count_params(self):

/home/carl/anaconda3/lib/python3.5/site-packages/keras/layers/recurrent.py in __init__(self, output_dim, init, inner_init, forget_bias_init, activation, inner_activation, W_regularizer, U_regularizer, b_regularizer, dropout_W, dropout_U, **kwargs)
    675         if self.dropout_W or self.dropout_U:
    676             self.uses_learning_phase = True
--> 677         super(LSTM, self).__init__(**kwargs)
    678 
    679     def build(self, input_shape):

/home/carl/anaconda3/lib/python3.5/site-packages/keras/layers/recurrent.py in __init__(self, weights, return_sequences, go_backwards, stateful, unroll, consume_less, input_dim, input_length, **kwargs)
    163         if self.input_dim:
    164             kwargs['input_shape'] = (self.input_length, self.input_dim)
--> 165         super(Recurrent, self).__init__(**kwargs)
    166 
    167     def get_output_shape_for(self, input_shape):

/home/carl/anaconda3/lib/python3.5/site-packages/keras/engine/topology.py in __init__(self, **kwargs)
    323             # to insert before the current layer
    324             if 'batch_input_shape' in kwargs:
--> 325                 batch_input_shape = tuple(kwargs['batch_input_shape'])
    326             elif 'input_shape' in kwargs:
    327                 batch_input_shape = (None,) + tuple(kwargs['input_shape'])

TypeError: 'NoneType' object is not iterable