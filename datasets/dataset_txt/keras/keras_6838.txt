MichaelXin commented on 21 Jul 2015
Hi, I want to test a LSTM net for binary classification, but my program doesnâ€™t work. Could you tell me what's wrong with my program? Thank you very much!
from __future__ import absolute_import
from __future__ import print_function
from keras.models import Sequential
from keras.layers.core import Dense, Dropout, Activation, Flatten, TimeDistributedDense
from keras.layers.embeddings import Embedding
from keras.layers.recurrent import LSTM
from keras.optimizers import SGD
from keras.utils import np_utils, generic_utils
from six.moves import range
import random,cPickle
import numpy as np
import random, sys

## create data for test
data = np.random.randn(100, 6, 256) # nb_samples=100, timesteps=6, input_dim=256)
label = np.zeros([100, 6, 256])
label[0:50, :, :] = 0 
label[50:100, :, :] = 1

## model
model = Sequential()
model.add(LSTM(256, 512, activation='sigmoid', inner_activation='hard_sigmoid', return_sequences=True))
model.add(Dropout(0.2))
model.add(TimeDistributedDense(512, 1))
model.add(Activation('sigmoid'))
model.compile(loss='binary_crossentropy', optimizer='rmsprop')

## splite data
(X_train,X_val) = (data[0:80], data[80:])   # training data
(Y_train,Y_val) = (label[0:80], label[80:]) # val data
best_accuracy = 0.0

## train and val
nb_epoch = 8
batch_size = 20
nb_class = 2
for e in range(nb_epoch):
    batch_num = len(Y_train)/batch_size
    progbar = generic_utils.Progbar(X_train.shape[0])
    for i in range(batch_num):
        x = X_train[i*batch_size:(i+1)*batch_size]
        y = Y_train[i*batch_size:(i+1)*batch_size]
        loss,accuracy = model.train(x, y, accuracy=True) # train
        progbar.add(batch_size, values=[("train loss", loss),("train accuracy:", accuracy)] )
The error is: