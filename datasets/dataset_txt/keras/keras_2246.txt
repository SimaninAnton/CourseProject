jinfengr commented on 2 Jun 2017 â€¢
edited
First, let's compare the dot product and cosine similarity in a toy data:
Dot Product:
import numpy as np
tensor_a = Input(shape=(4,6,))
tensor_b = Input(shape=(4,6,))
merged_tensor = merge([tensor_a, tensor_b], mode='dot',dot_axes=-1)
m = Model([tensor_a, tensor_b], [merged_tensor])
input_a=np.ones((2,4,6))
input_b=np.ones((2,4,6))
input_a[0][0][0]=0
m.predict([input_a, input_b])
The output is as following, which is correct:
     array([[[ 5.,  5.,  5.,  5.],
     [ 6.,  6.,  6.,  6.],
     [ 6.,  6.,  6.,  6.],
     [ 6.,  6.,  6.,  6.]],

   [[ 6.,  6.,  6.,  6.],
    [ 6.,  6.,  6.,  6.],
    [ 6.,  6.,  6.,  6.],
    [ 6.,  6.,  6.,  6.]]], dtype=float32)`
Then simple change the dot similarity to cosine similarity:
merged_tensor = merge([tensor_a, tensor_b], mode='cos',dot_axes=-1)
m = Model([tensor_a, tensor_b], [merged_tensor])
m.predict([input_a, input_b])
The output is as follows, which is incorrect. (how can a cosine similarity greater than 1?!):
   array([[[[ 0.91287088,  0.91287088,  0.91287088,  0.91287088],
     [ 1.09544504,  1.        ,  1.        ,  1.        ],
     [ 1.09544504,  1.        ,  1.        ,  1.        ],
     [ 1.09544504,  1.        ,  1.        ,  1.        ]]],


   [[[ 1.        ,  1.        ,  1.        ,  1.        ],
     [ 1.        ,  1.        ,  1.        ,  1.        ],
     [ 1.        ,  1.        ,  1.        ,  1.        ],
     [ 1.        ,  1.        ,  1.        ,  1.        ]]]], dtype=float32)
1