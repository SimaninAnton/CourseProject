Contributor
lgautier commented on 18 Oct 2016
Type checking is looking at class names rather than inheritance (for example obj.__class__.__name__ = "Model" - it is also somewhat old Python style).
This is preventing the use of inheritance-based customization patterns. For example:
import keras.models

# Customize the class Sequential with, say, a custom representation and a custom add method
class MySequentialModel(keras.models.Sequential):
    def __repr__(self):
        print('Fancy representation')
    def add(self, layer):
        super(MySequentialModel, self).add(layer)
        # do extra things like sanity checks
        pass

model = MySequentialModel()

# now use it

import keras.engine.training

# the following will not work since `model` should have a class name equal to Sequential
# for the right thing to happen
keras.engine.trainig.collect_trainable_weights(model)
With the pull request #4069 , the code above would be working.