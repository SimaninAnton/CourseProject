lazysquid commented on 6 Nov 2017 â€¢
edited
Hello. Currently I'm building autoencoder. (RGB->RGB)
However my data is not actually color image. Other type of data is encoded in each channel.
Domain of each channels are different and the loss function of each channel should be different.
For example I can imagine the loss function looks like this.
def CustomLoss(y_true, y_pred):
    y_true_R = y_true[:,:,:,0]
    y_true_G = y_true[:,:,:,1] * 2.0 - 1.0 
    y_true_B = log(y_true[:,:,:,2])
    
    y_pred_R = y_pred[:,:,:,0]
    y_pred_G = y_pred[:,:,:,1] * 2.0 - 1.0
    y_pred_B = log(y_pred[:,:,:,2])

    Loss_R = l2(y_trueR, y_predR)
    Loss_G = mean_absolute_percentage(y_trueR, y_predR)
    Loss_B = l1(y_trueR, y_predR)
    return Loss_R * 0.3 + Loss_G * 0.5 + Loss_B * 0.2
I can simply build multi output model. However format of my prediction should be RGB and I need to prep per channel images for each losses. That is cumbersome. Also the above approach feels more simple.
So my question is that is it possible to use that kind of loss function?
And would it shows difference compare to multi output model?