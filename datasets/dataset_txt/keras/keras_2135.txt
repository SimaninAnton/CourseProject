tejareddy-b commented on 14 Jun 2017 â€¢
edited
This model does binary classification(2 classes)
import cv2
import keras
from keras.preprocessing import image
from keras.models import Sequential
from keras.models import load_model
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense
from keras.layers.normalization import BatchNormalization
from keras import backend as K
import numpy
def preprocess_input(x, dim_ordering='default'):
    if dim_ordering == 'default':
        dim_ordering = K.image_dim_ordering()
    assert dim_ordering in {'tf', 'th'}

    if dim_ordering == 'th':
        x[:, 0, :, :] -= 103.939
        x[:, 1, :, :] -= 116.779
        x[:, 2, :, :] -= 123.68
        # 'RGB'->'BGR'
        x = x[:, ::-1, :, :]
    else:
        x[:, :, :, 0] -= 103.939
        x[:, :, :, 1] -= 116.779
        x[:, :, :, 2] -= 123.68
        # 'RGB'->'BGR'
        x = x[:, :, :, ::-1]
    return x

K.set_image_dim_ordering('th')

camera_port = 0
ramp_frames = 30
pic_num = 1

if K.image_data_format() == 'channels_first':
    print "A"
    input_shape = (3, 150, 150)
else:
    print "B"
    input_shape = (150, 150, 3)

model = Sequential()
model.add(Conv2D(32, (3, 3), input_shape=input_shape))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(64))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(Dropout(0.25))
model.add(Dense(1))
model.add(BatchNormalization())
model.add(Activation('sigmoid'))
model.load_weights("weights.h5py")
model.compile(loss='binary_crossentropy',
              optimizer='rmsprop',
              metrics=['accuracy'])

img_path = '1.jpg'
img = image.load_img(img_path, target_size=(150, 150))
x = image.img_to_array(img)
x = numpy.expand_dims(x, axis=0)
x = preprocess_input(x)
preds = model.predict(x)
print preds
output:
[[ 0.38616672]]

I am always getting the same output.
I got 84% last epoch accuracy while training with the same model.

I think there is some problem with .predict function.
Any thoughts?