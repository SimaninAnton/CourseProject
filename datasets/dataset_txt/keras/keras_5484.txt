mininaNik commented on 14 Apr 2016
I want to predict a sequence of number vectors based on the previous ones. n_nxt future values should be predicted based on n_prev previous values. I have one sequence and I considered the n_prev = 100 and n_nxt = 5. I transformed the data to following format:
As input X, I have a n x 100 matrix and the target Y is a matrix n x 5 .
I used LSTM because I have sequential data. My code is ok and works well. But there is a problem: in each step when I want to predict 5 values (y1,y2,y3,y4,y5), there exists a fixed pattern in predicted values y1>y2>y3>y4>y5 which is wrong. I increased number of epoches and changed other parameters but they didn't help. Can anybody help me to find the reason of this problem?
batch_size = 100
n_prev = 100
n_nxt  = 5
model = Sequential()
model.add(LSTM(n_prev,
           batch_input_shape=(batch_size, n_prev, 1),
           forget_bias_init='one',
           return_sequences=True,
           stateful=True))
model.add(Dropout(0.2))
model.add(LSTM(n_nxt,
           batch_input_shape=(batch_size, n_prev, 1),
           forget_bias_init='one',
           return_sequences=False,
           stateful=True))
model.add(Dropout(0.2))
model.add(Dense(n_nxt))
model.compile(loss='mse', optimizer='rmsprop')


print('Training')
numIteration = len(X_train)/batch_size
for i in range(epochs):
    loss_list = []
    print('Epoch', i, '/', epochs)
    for j in range(numIteration):
        print('Batch', j, '/',numIteration,'Epoch', i)
        model.train_on_batch(X_train[j*batch_size:j*batch_size+batch_size,], y_train[j*batch_size:j*batch_size+batch_size,])
        objective_score = model.evaluate(X_train[j*batch_size:j*batch_size+batch_size,], y_train[j*batch_size:j*batch_size+batch_size,], show_accuracy=True)
        loss_list.append(objective_score[0])       
     model.reset_states()
     if sum(loss_list)/len(loss_list) < 0.01:
             break

print('Predicting')
predicted_output = model.predict(X_test, batch_size=batch_size)