jackalack commented on 9 Mar 2017
My X and y shape are both (2688, 96, 1). I have a time series data with one feature and my goal is given 96 points, predict the next 96 points. I define my model as follows:
model = Sequential()
model.add(LSTM(960, batch_input_shape=(2688, in_out_neurons, 1), return_sequences=True))
model.add(LSTM(480, return_sequences=True))
model.add(LSTM(180, return_sequences=True))
model.add(TimeDistributed(Dense(96, activation='relu')))
model.add(Activation("linear"))
model.compile(loss="mean_squared_error", optimizer="adam")
model.fit(X, y, batch_size=10, nb_epoch=1,verbose=2)
predicted = scaler.inverse_transform(model.predict(X)[:,:,0])
When I run this I get " Error when checking model target: expected activation_1 to have shape (2688, 96, 96) but got array with shape (2688, 96, 1)".
If I replace:
 model.add(TimeDistributed(Dense(96, activation='relu'))) 
with
model.add(Dense(1, activation='relu'))
my code runs fine; however, there is not much variation in my predictions and my r2_score is very negative. How should I appropriately structure this to make TimeDistributed work?