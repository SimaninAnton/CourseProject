ewan1983 commented on 6 Aug 2015
I made a toy sequence model, to check if current input number is equal to the input number 2 time steps before: when X(t) == X(t-2), output should be 1, otherwise output should be 0.
So I generate 1 training sample with 10000 time steps using following code
seq_len = 10000
data = (np.random.rand(1,seq_len,1) * 10000).astype('int')
one_pos = np.unique((np.random.rand(seq_len//2) * seq_len).astype('int'))[2:]
label = np.zeros((1,seq_len,1),dtype=np.bool)
label[0,one_pos,0] = True
for pos in one_pos:
    data[0,pos,0] = data[0,pos-2,0]
Then I build a LSTM try to learn this simple rule
model = Sequential()
model.add(LSTM(1, 16,return_sequences=True))
model.add(Dense(16, 1))
model.add(Activation('sigmoid'))

model.compile(loss='binary_crossentropy', optimizer='Adadelta', class_mode="binary")

model.fit(data, label, batch_size=32, nb_epoch=100, show_accuracy=True)
model.predict(data)
However, from the output, it seems the LSTM couldn't learn this rule, accuracy stuck at 0.6
Epoch 0
1/1 [==============================] - 5s - loss: 0.6941 - acc: 0.4312
Epoch 1
1/1 [==============================] - 5s - loss: 0.6927 - acc: 0.5590
Epoch 2
1/1 [==============================] - 6s - loss: 0.6913 - acc: 0.5790
Epoch 3
1/1 [==============================] - 5s - loss: 0.6900 - acc: 0.6041
........
Epoch 92
1/1 [==============================] - 4s - loss: 0.6713 - acc: 0.6041
Epoch 93
1/1 [==============================] - 5s - loss: 0.6713 - acc: 0.6041
Epoch 94
How should I construct and train a NN that can learn this simple rule?
BTW, I sense that here might not be the place to get help for these kind of questions, but I don't know where to ask, could anyone point out which website/forum should I be looking into instead?