pierluigiferrari commented on 6 Nov 2017 â€¢
edited
I saved a model with a custom layer, AnchorBoxes. In the implementation of the custom layer, I implemented the get_config() method like so:
def get_config(self):
        config = {
            'img_height': self.img_height,
            'img_width': self.img_width,
            'this_scale': self.this_scale,
            'next_scale': self.next_scale,
            'aspect_ratios': self.aspect_ratios,
            'two_boxes_for_ar1': self.two_boxes_for_ar1,
            'limit_boxes': self.limit_boxes,
            'variances': self.variances,
            'n_boxes': self.n_boxes
        }
        print(config) # Print out this dict to see what it looks like.
        base_config = super(AnchorBoxes, self).get_config()
        return dict(list(base_config.items()) + list(config.items()))
I now create a model and save it. When saving the model, thanks to the print statement in the code above, I can see that the config dictionary looks like this:
{'two_boxes_for_ar1': True, 'limit_boxes': False, 'variances': array([ 0.1, 0.1, 0.2, 0.2]), 'this_scale': 0.1, 'n_boxes': 4, 'img_height': 300, 'next_scale': 0.2, 'aspect_ratios': array([ 0.5, 1. , 2. ]), 'img_width': 300}
All good so far.
Now, when I try to load the model using keras.models.load_model('model.h5', custom_objects={'AnchorBoxes': AnchorBoxes}) and print the values that the constructor is receiving from the config dictionary, they look like this:
Just to give two examples, this is what is being passed as the value for the variances argument:
{'type': 'ndarray', 'value': [0.1, 0.1, 0.2, 0.2]}
and this is what is being passed as the value for the aspect_ratios argument:
{'type': 'ndarray', 'value': [0.5, 1.0, 2.0]}
I.e. the values passed to the AnchorBoxes constructor by keras.models.load_model are not simply the values for the respective variables, but dictionaries containing two items each.
Naturaly, loading the model fails.
Why is this happening?
The dictionary that get_config() produces looks correct. Yet, keras.models.load_model can't seem to use this config correctly to load the custom layers.