joaocaldeira commented on 22 Aug 2018 â€¢
edited
I am using keras with tensorflow backend, and the current implementation of Conv2D layers seems incompatible with trying to use a larger floating point precision. Here is a short script that will reproduce the problem:
from keras.layers import Input, Conv2D
from keras import backend as K
K.set_floatx('float64')

x = Input(shape=(128,128,1))
x = Conv2D(1,3)(x)
Leads to TypeError: Input 'filter' of 'Conv2D' Op has type float64 that does not match type float32 of argument 'input'
Going to https://github.com/keras-team/keras/blob/master/keras/backend/tensorflow_backend.py#L3424 reveals the cause, the following snippet of code applied to inputs of convolutional layers:
if dtype(x) == 'float64':
    x = tf.cast(x, 'float32')
I suppose I could just remove this from keras and try again, but before going that way it seems I should ask why this is here. Is there a way to switch keras to use higher precision in conv layers, or should I drop keras and deal with tensorflow directly?