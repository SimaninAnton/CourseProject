shinjirei commented on 5 Apr 2017 â€¢
edited
My purpose is to create a custom layer in keras with a weight matrix which has a dimension greater than input (output dimension the same), whereas the extra parameters are used for a function to process (weights %*% inputs). The function is NOT written in tensorflow and it would be quite tedious to do that, so I've tried to use the tensorflow's py_func. However, the NN breaks with "ValueError: None values not supported."
The master code for my own layer is that of Dense with some changes. W is the matrix of weights with dimension [input_dim+n,output_dim]. Assume, there is a general function "func" with n parameters and it should be evaluated on (W %*% Input).
def func(self,output):  
      do something
      return something
Now we wrap this function in call:
def call(self, x, mask=None):
      output = K.dot(inputs, self.W[self.n:,:])
      if self.use_bias:
            output = K.bias_add(output, self.bias)
      if self.activation is not None:
            output = self.activation(tf.py_func(self.func,[output],tf.float32))
      return output
[ x] Check that you are up-to-date with the master branch of Keras. You can update with:
pip install git+git://github.com/fchollet/keras.git --upgrade --no-deps
[ x] If running on TensorFlow, check that you are up-to-date with the latest version. The installation instructions can be found here.
If running on Theano, check that you are up-to-date with the master branch of Theano. You can update with:
pip install git+git://github.com/Theano/Theano.git --upgrade --no-deps
Provide a link to a GitHub Gist of a Python script that can reproduce your issue (or just copy the script here if it is short).