a-vikulin commented on 13 Nov 2015
I am trying to build a VGG-like model for EEG-like data analysis and I receive a ValueError: negative dimensions are not allowed when adding Dense layer after a Flatten layer.
In general need a recipe to have any number of channels and also to have more than 1 row per channel i.e. input_shape=(7, 4, 100) 7 channels of 4x100 data, but at the same time use 1D convolutions in direction of the longest axis.
What am I doing wrong or blatantly misunderstand here? Thank you.
7 channels of single row data
model = Sequential()
model.add(Convolution1D(32, 5, border_mode='full', input_shape=(7, 100)))
model.add(Activation('relu'))
model.add(MaxPooling1D(pool_length=2))
model.add(Convolution1D(32, 5))
model.add(Activation('relu'))
model.add(MaxPooling1D(pool_length=2))

model.add(Convolution1D(64, 5, border_mode='valid'))
model.add(Activation('relu'))
model.add(MaxPooling1D(pool_length=2))
model.add(Convolution1D(64, 5))
model.add(Activation('relu'))
model.add(MaxPooling1D(pool_length=2))

model.add(Flatten())
model.add(Dense(256))
Traceback (most recent call last):

  File "<ipython-input-74-4ce0e07812ff>", line 17, in <module>
    model.add(Dense(256))

  File "C:\SciSoft\WinPython-64bit-3.3.5.9\python-3.3.5.amd64\lib\site-packages\keras-0.2.0-py3.3.egg\keras\layers\containers.py", line 37, in add
    self.layers[-1].set_previous(self.layers[-2])

  File "C:\SciSoft\WinPython-64bit-3.3.5.9\python-3.3.5.amd64\lib\site-packages\keras-0.2.0-py3.3.egg\keras\layers\core.py", line 37, in set_previous
    self.build()

  File "C:\SciSoft\WinPython-64bit-3.3.5.9\python-3.3.5.amd64\lib\site-packages\keras-0.2.0-py3.3.egg\keras\layers\core.py", line 557, in build
    self.W = self.init((input_dim, self.output_dim))

  File "C:\SciSoft\WinPython-64bit-3.3.5.9\python-3.3.5.amd64\lib\site-packages\keras-0.2.0-py3.3.egg\keras\initializations.py", line 43, in glorot_uniform
    return uniform(shape, s)

  File "C:\SciSoft\WinPython-64bit-3.3.5.9\python-3.3.5.amd64\lib\site-packages\keras-0.2.0-py3.3.egg\keras\initializations.py", line 16, in uniform
    return sharedX(np.random.uniform(low=-scale, high=scale, size=shape))

  File "mtrand.pyx", line 1254, in mtrand.RandomState.uniform (numpy\random\mtrand\mtrand.c:13573)

  File "mtrand.pyx", line 219, in mtrand.cont2_array_sc (numpy\random\mtrand\mtrand.c:2900)

ValueError: negative dimensions are not allowed
7 channels of 4x100 data
model = Sequential()
model.add(Convolution1D(32, 5, border_mode='full', input_shape=(7, 4, 100)))
Traceback (most recent call last):

  File "<ipython-input-75-8c97d50c85a9>", line 2, in <module>
    model.add(Convolution1D(32, 5, border_mode='full', input_shape=(7, 4, 100)))

  File "C:\SciSoft\WinPython-64bit-3.3.5.9\python-3.3.5.amd64\lib\site-packages\keras-0.2.0-py3.3.egg\keras\layers\convolutional.py", line 85, in __init__
    super(Convolution1D, self).__init__(**kwargs)

  File "C:\SciSoft\WinPython-64bit-3.3.5.9\python-3.3.5.amd64\lib\site-packages\keras-0.2.0-py3.3.egg\keras\layers\core.py", line 25, in __init__
    self.set_input_shape(kwargs['input_shape'])

  File "C:\SciSoft\WinPython-64bit-3.3.5.9\python-3.3.5.amd64\lib\site-packages\keras-0.2.0-py3.3.egg\keras\layers\core.py", line 74, in set_input_shape
    str(self.input_ndim) + ', was provided with input shape ' + str(input_shape))

Exception: Invalid input shape - Layer expects input ndim=3, was provided with input shape (None, 7, 4, 100)