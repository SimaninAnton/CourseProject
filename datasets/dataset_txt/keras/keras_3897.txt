aplavin commented on 18 Nov 2016
Hi!
I've installed and keras and it works correctly - but I noticed that CPU usage is relatively low, about ~400% on a 12 (6 + HT) -core machine, and comparing to a similar machine where keras was installed about a month ago it performs a couple of times slower. An example script is attached below, but the network configuration doesn't matter - it's just a fully reproducible example.
Some technical details:
the machine runs gentoo linux, python 3.5 is installed using anaconda 4.2.0
backend is theano, CPU-only
I tried a couple of options: both with and without mkl (conda install nomkl), installing keras and theano from conda repo, from pip install keras theano, and from git repositories in different combinations - still nothing works
setting theano blas.ldflags to empty (as suggested somewhere on the internet) also doesn't help
Also I tried the same things to try keras at my 4 (2 + HT) -core laptop, and it also uses about half of CPU.
For comparison, this script runs at about 7-8 seconds per iteration:
from keras.models import Sequential
from keras import layers as L
import numpy as np

model = Sequential([
    L.Convolution1D(32, 3, activation='relu', input_shape=(70, 31)),
    L.Convolution1D(32, 3, activation='relu'),
    L.Convolution1D(32, 3, activation='relu'),
    L.Convolution1D(32, 3, activation='relu'),
    L.MaxPooling1D(2),
        
    L.Flatten(),
    L.Dense(100, activation='relu'),
    L.Dropout(0.5),
    L.Dense(100, activation='relu'),
    L.Dropout(0.5),
    L.Dense(100, activation='relu'),
    L.Dense(100, activation='relu'),
    L.Dense(2),
])
model.compile(optimizer='rmsprop', loss='mse', metrics=['mae'])

X = np.random.rand(1000, 70, 31)
Y = np.random.rand(1000, 2)

model.fit(X, Y)
Any ideas how to fix?..