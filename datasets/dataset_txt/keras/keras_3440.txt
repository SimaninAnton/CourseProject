Contributor
yhenon commented on 18 Jan 2017 â€¢
edited
Theano uses round away from zero, while tensorflow uses round to nearest even number.
Example:
class Rounder(Layer):

    def __init__(self, **kwargs):
        super(Rounder, self).__init__(**kwargs)

    def get_output_shape_for(self, input_shape):
        return (input_shape[0], input_shape[1])

    def call(self, x, mask=None):
        x1 = K.round(x)
        return x1

model = Sequential()
model.add(Rounder(input_shape=(4,)))
model.compile(loss='mse', optimizer='sgd')
A = model.predict(np.array([-0.5,0.5,1.5,2.5]).reshape(1,-1))
print(A)
Output with tensorflow:
[[ 0.  0.  2.  2.]]
Output with theano:
[[-1.  1.  2.  3.]]
This is quite undesirable, and one mode should be chosen and imposed. At the very least the documentation should mention this. As theano implements both half_away_from_zero and half_to_even in its round function, it could be a pretty easy fix.