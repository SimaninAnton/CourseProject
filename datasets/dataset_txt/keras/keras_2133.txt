kaushiksk commented on 14 Jun 2017 â€¢
edited
I'm using Keras on a CPU with 8GB RAM in anaconda.
Here's what I was trying to do.
I have simple script that reads an image, runs it through VGG16 and extracts features from the 'fc1' layer. I decided to time this wrt Tensorflow and Theano backend.
Tensorflow Backend on running $ python extractvgg.py
{
  "image_data_format": "channels_last",
  "predict time": 1.0201201179997952,
  "preprocessing time": 0.012538709999716957,
  "load time": 2.1383959619997768,
  "image_dim_ordering": "tf"
}
Theano Backend on running $ KERAS_BACKEND="theano" python extractvgg.py
{
  "image_data_format": "channels_last",
  "predict time": 3.185495815000195,
  "preprocessing time": 0.016582568000103493,
  "load time": 8.029607248000048,
  "image_dim_ordering": "tf"
}
Theano was slower, but this was contrary to what I read on other issues. I figured this could be because the image_dim_ordering was still set to 'tf' so I explicitly set these values.
from keras import backend as K
K.set_image_data_format("channels_first")
K.set_image_dim_ordering("th")
Now on running
$ KERAS_BACKEND="theano" python extractvgg.py
Which gives me the error (The model loads fine, the error occurs upon prediction).
/home/kaushiksk/miniconda2/envs/tf/lib/python3.5/site-packages/keras/legacy/interfaces.py:86: UserWarning: Update your `Model` call to the Keras 2 API: `Model(inputs=/input_1, outputs=Elemwise{m...)`
  '` call to the Keras 2 API: ' + signature)
Load time:  22.938760344000002
Preprocess time:  0.016467333000036888
Traceback (most recent call last):
  File "/home/kaushiksk/miniconda2/envs/tf/lib/python3.5/site-packages/theano/compile/function_module.py", line 884, in __call__
    self.fn() if output_subset is None else\
ValueError: Input dimension mis-match. (input[1].shape[1] = 3, input[2].shape[1] = 64)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "extractvgg.py", line 32, in <module>
    features = model.predict(x)
  File "/home/kaushiksk/miniconda2/envs/tf/lib/python3.5/site-packages/keras/engine/training.py", line 1572, in predict
    batch_size=batch_size, verbose=verbose)
  File "/home/kaushiksk/miniconda2/envs/tf/lib/python3.5/site-packages/keras/engine/training.py", line 1202, in _predict_loop
    batch_outs = f(ins_batch)
  File "/home/kaushiksk/miniconda2/envs/tf/lib/python3.5/site-packages/keras/backend/theano_backend.py", line 1071, in __call__
    return self.function(*inputs)
  File "/home/kaushiksk/miniconda2/envs/tf/lib/python3.5/site-packages/theano/compile/function_module.py", line 898, in __call__
    storage_map=getattr(self.fn, 'storage_map', None))
  File "/home/kaushiksk/miniconda2/envs/tf/lib/python3.5/site-packages/theano/gof/link.py", line 325, in raise_with_op
    reraise(exc_type, exc_value, exc_trace)
  File "/home/kaushiksk/miniconda2/envs/tf/lib/python3.5/site-packages/six.py", line 685, in reraise
    raise value.with_traceback(tb)
  File "/home/kaushiksk/miniconda2/envs/tf/lib/python3.5/site-packages/theano/compile/function_module.py", line 884, in __call__
    self.fn() if output_subset is None else\
ValueError: Input dimension mis-match. (input[1].shape[1] = 3, input[2].shape[1] = 64)
Apply node that caused the error: Elemwise{Composite{(i0 * ((i1 + i2) + Abs((i1 + i2))))}}[(0, 1)](TensorConstant{(1, 1, 1, 1) of 0.5}, CorrMM{half, (1, 1), (1, 1)}.0, InplaceDimShuffle{x,0,x,x}.0)
Toposort index: 43
Inputs types: [TensorType(float32, (True, True, True, True)), TensorType(float32, 4D), TensorType(float32, (True, False, True, True))]
Inputs shapes: [(1, 1, 1, 1), (1, 3, 224, 225), (1, 64, 1, 1)]
Inputs strides: [(4, 4, 4, 4), (604800, 201600, 900, 4), (256, 4, 4, 4)]
Inputs values: [array([[[[ 0.5]]]], dtype=float32), 'not shown', 'not shown']
Outputs clients: [[CorrMM{half, (1, 1), (1, 1)}(Elemwise{Composite{(i0 * ((i1 + i2) + Abs((i1 + i2))))}}[(0, 1)].0, Subtensor{::, ::, ::int64, ::int64}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Here is the link to the Github Gist containing both scripts
Check that you are up-to-date with the master branch of Keras. You can update with:
pip install git+git://github.com/fchollet/keras.git --upgrade --no-deps
If running on Theano, check that you are up-to-date with the master branch of Theano. You can update with:
pip install git+git://github.com/Theano/Theano.git --upgrade --no-deps
Provide a link to a GitHub Gist of a Python script that can reproduce your issue (or just copy the script here if it is short).