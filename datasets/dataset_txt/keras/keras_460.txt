marcolagi commented on 15 Jan 2019
Following this example of an autoencoder, .predict() shows an unexpected behavior. The same input vector is encoded in slightly different ways depending on whether the input has exactly one row or more than one.
Code:
import numpy as np
from keras.layers import Input, Dense
from keras.models import Model
from keras.datasets import mnist

encoding_dim = 32
input_img = Input(shape=(784,))
encoded = Dense(encoding_dim, activation='relu')(input_img)
decoded = Dense(784, activation='sigmoid')(encoded)
autoencoder = Model(input_img, decoded)
encoder = Model(input_img, encoded)
autoencoder.compile(optimizer='adadelta', loss='binary_crossentropy')

(x_train, _), (x_test, _) = mnist.load_data()
x_train = x_train.astype('float32') / 255.
x_test = x_test.astype('float32') / 255.
x_train = x_train.reshape((len(x_train), np.prod(x_train.shape[1:])))
x_test = x_test.reshape((len(x_test), np.prod(x_test.shape[1:])))

autoencoder.fit(x_train, x_train,
                epochs=5,
                batch_size=256,
                validation_data=(x_test, x_test),
                verbose=0)

pred1 = encoder.predict(x_test[0:1])[0]
pred2 = encoder.predict(x_test[0:2])[0]

print 'Prediction of row 0 on one sample', pred1
print 'Prediction of row 0 on two samples', pred2
print 'Predictions are equal:', np.array_equal(pred1, pred2)
print 'Maximum difference:', np.max(pred1 - pred2)
Output:
Using TensorFlow backend.
Prediction of row 0 on one sample [2.76965594e+00 1.68126094e+00 8.42961311e-01 5.48994601e-01
 0.00000000e+00 3.70012021e+00 3.42059398e+00 7.24270105e+00
 5.25430739e-01 1.08950405e+01 6.82098436e+00 2.97752094e+00
 0.00000000e+00 2.67998934e+00 5.14734125e+00 2.22423840e+00
 8.53625000e-01 4.04000044e+00 9.02115405e-01 1.62442014e-01
 0.00000000e+00 1.48562109e+00 1.52160430e+00 0.00000000e+00
 6.51492310e+00 6.99255323e+00 0.00000000e+00 2.89665669e-01
 1.04156408e+01 3.26335430e-05 0.00000000e+00 4.85842645e-01]
Prediction of row 0 on two samples [2.7696559e+00 1.6812606e+00 8.4296155e-01 5.4899454e-01 0.0000000e+00
 3.7001197e+00 3.4205940e+00 7.2427006e+00 5.2543080e-01 1.0895040e+01
 6.8209858e+00 2.9775207e+00 0.0000000e+00 2.6799898e+00 5.1473403e+00
 2.2242384e+00 8.5362488e-01 4.0400009e+00 9.0211511e-01 1.6244198e-01
 0.0000000e+00 1.4856209e+00 1.5216043e+00 0.0000000e+00 6.5149217e+00
 6.9925547e+00 0.0000000e+00 2.8966567e-01 1.0415640e+01 3.2991171e-05
 0.0000000e+00 4.8584259e-01]
Predictions are equal: False
Maximum difference: 1.4305115e-06
Environment:
Keras==2.2.4
tensorflow==1.12.0
numpy==1.16.0
Python 2.7.15 on macOS Mojave
This result does not seem to depend on the particular Keras / Tensorflow / Python combination. Also, this implementation in pure tensorflow does not seem to display the same behavior.