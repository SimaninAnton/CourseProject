khamkarajinkya commented on 7 Aug 2017 â€¢
edited
Please make sure that the boxes below are checked before you submit your issue. If your issue is an implementation question, please ask your question on StackOverflow or join the Keras Slack channel and ask there instead of filing a GitHub issue.
Thank you!
Check that you are up-to-date with the master branch of Keras. You can update with:
pip install git+git://github.com/fchollet/keras.git --upgrade --no-deps
If running on TensorFlow, check that you are up-to-date with the latest version. The installation instructions can be found here.
If running on Theano, check that you are up-to-date with the master branch of Theano. You can update with:
pip install git+git://github.com/Theano/Theano.git --upgrade --no-deps
Provide a link to a GitHub Gist of a Python script that can reproduce your issue (or just copy the script here if it is short).
I have asked this question on stackoverflow, buy I haven't received any answers to it.
When I try to fit a model with the theano backend I run into the following error
return codecs.ascii_decode(input, self.errors)[0] UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 6923: ordinal not in range(128)
Here's the full error stack
Python programming language version 3.3.2 loaded.

Using Theano backend.

Using gpu device 0: Tesla K20 (CNMeM is enabled with initial size: 98.0% of 
memory, CuDNN not available)

Traceback (most recent call last):
File "cifar10/train.py", line 62, in <module>

model.fit(X_train,y_train,epochs=10,batch_size=32,validation_split =0.3,shuffle= True)

File "/N/u/<User>/<University-cluster>/.local/lib/python3.3/site-
packages/keras/engine/training.py", line 1379, in fit 
self._make_test_function()

File "/N/u/<User>/<University-cluster>/.local/lib/python3.3/site-
packages/keras/engine/training.py", line 959, in _make_test_function
**self._function_kwargs)

File "/N/u/<User>/<University-cluster>/.local/lib/python3.3/site-
packages/keras/backend/theano_backend.py", line 1206, in function
return Function(inputs, outputs, updates=updates, **kwargs)

File "/N/u/<User>/<University-cluster>/.local/lib/python3.3/site-
packages/keras/backend/theano_backend.py", line 1192, in __init__
**kwargs)

File "/N/u/<User>/<University-cluster>/.local/lib/python3.3/site-
packages/theano/compile/function.py", line 320, in function
output_keys=output_keys)

File "/N/u/<User>/<University-cluster>/.local/lib/python3.3/site-
packages/theano/compile/pfunc.py", line 479, in pfunc
output_keys=output_keys)

File "/N/u/<User>/<University-cluster>/.local/lib/python3.3/site-
packages/theano/compile/function_module.py", line 1777, in orig_function
defaults)

File "/N/u/<User>/<University-cluster>/.local/lib/python3.3/site-
packages/theano/compile/function_module.py", line 1641, in create
input_storage=input_storage_lists, storage_map=storage_map)

File "/N/u/<User>/<University-cluster>/.local/lib/python3.3/site-
packages/theano/gof/link.py", line 690, in make_thunk
storage_map=storage_map)[:3]

File "/N/u/<User>/<University-cluster>/.local/lib/python3.3/site-
packages/theano/gof/vm.py", line 1003, in make_all
no_recycling))

File "/N/u/<User>/<University-cluster>/.local/lib/python3.3/site-
packages/theano/sandbox/cuda/__init__.py", line 256, in make_thunk
compute_map, no_recycling)

File "/N/u/<User>/<University-cluster>/.local/lib/python3.3/site-
packages/theano/gof/op.py", line 970, in make_thunk
no_recycling)

File "/N/u/<User>/<University-cluster>/.local/lib/python3.3/site-
packages/theano/gof/op.py", line 879, in make_c_thunk
output_storage=node_output_storage)

File "/N/u/<User>/<University-cluster>/.local/lib/python3.3/site-
packages/theano/gof/cc.py", line 1200, in make_thunk
keep_lock=keep_lock)

File "/N/u/<User>/<University-cluster>/.local/lib/python3.3/site-
packages/theano/gof/cc.py", line 1143, in __compile__
keep_lock=keep_lock)

File "/N/u/<User>/<University-cluster>/.local/lib/python3.3/site-
packages/theano/gof/cc.py", line 1595, in cthunk_factory
key=key, lnk=self, keep_lock=keep_lock)

File "/N/u/<User>/<University-cluster>/.local/lib/python3.3/site-
packages/theano/gof/cmodule.py", line 1105, in module_from_key
src_code = lnk.get_src_code()

File "/N/u/<User>/<University-cluster>/.local/lib/python3.3/site-
packages/theano/gof/cc.py", line 1479, in get_src_code
mod = self.get_dynamic_module()

File "/N/u/<User>/<University-cluster>/.local/lib/python3.3/site-
packages/theano/gof/cc.py", line 1523, in get_dynamic_module
self.code_gen()

File "/N/u/<User>/<University-cluster>/.local/lib/python3.3/site-
packages/theano/gof/cc.py", line 779, in code_gen
name))

File "/N/u/<User>/<University-cluster>/.local/lib/python3.3/site-
packages/theano/sandbox/cuda/blas.py", line 937, in c_support_code_apply
for f in files]

File "/N/u/<User>/<University-cluster>/.local/lib/python3.3/site-
packages/theano/sandbox/cuda/blas.py", line 937, in <listcomp>
for f in files]

File "/N/soft/cle4/python/3.3.2a/lib/python3.3/encodings/ascii.py", line 26, 
in decode return codecs.ascii_decode(input, self.errors)[0]

UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 6923: 
ordinal not in range(128)
I am required to use the theano backend due to compatibility issues of the tensorflow backend with my university cluster. I have tested this code on CPU's on my personal device with the tensorflow backend and it runs error free.
Load Script
import numpy as np
from keras.utils import to_categorical

class Load_():
    
    def load_data():
        def unpickle(file):
            import pickle
            with open(file, 'rb') as fo:
                dict = pickle.load(fo, encoding='latin1')
            return dict

        images = []
        labels = []

        folder = ['cifar10/data_batch_1','cifar10/data_batch_2','cifar10/data_batch_3','cifar10/data_batch_4','cifar10/data_batch_5']
        for file in folder:
            f = unpickle(file)
            images.append(f['data'])
            labels.append(f['labels'])

        images = np.vstack(images)
        labels = np.vstack(labels)

        images = images.reshape([-1,3,32,32]).transpose([0, 2, 3, 1]).astype(np.float32)

        labels = labels.reshape(50000,1)
        images /= 255.0


        #convert labels to one hot encoded labels
        labels = to_categorical(labels)
        
        return(images,labels)
Train script
import os
os.environ['THEANO_FLAGS'] = 'floatX=float32,device=gpu,lib.cnmem=1'
import sys
sys.path.insert(0,'/N/u/<User>/<University-cluster>/.local/lib/python3.3/site-packages')
import numpy as np

#Keras Model

from Load import Load_
from keras.layers import Input,GlobalAveragePooling2D, Convolution2D, Dense, Dropout,BatchNormalization
from keras import optimizers
from keras.models import Model

inp = Input(shape=[32,32,3])
        
#Block 1
C = Convolution2D(32,(3,3),strides=(1, 1),activation = 'relu',padding = 'same',kernel_initializer='glorot_normal')(inp)
C = BatchNormalization()(C)
C = Convolution2D(64,(3,3),strides=(1, 1),activation = 'relu',padding = 'same')(C)
C = BatchNormalization()(C)
C = Convolution2D(64,(3,3),strides=(1, 1),activation = 'relu',padding = 'same')(C)
C = BatchNormalization()(C)
        
#Block 2
C = Convolution2D(96,(3,3),strides=(2, 2),activation = 'relu',padding = 'same',kernel_initializer='glorot_normal')(C)
C = BatchNormalization()(C)
C = Convolution2D(128,(3,3),strides=(1, 1),activation = 'relu',padding = 'same')(C)
C = BatchNormalization()(C)
C = Convolution2D(128,(3,3),strides=(1, 1),activation = 'relu',padding = 'same')(C)
C = BatchNormalization()(C)

#Block 3
C = Convolution2D(128,(3,3),strides=(2, 2),activation = 'relu',padding = 'same',kernel_initializer='glorot_normal')(C)
C = BatchNormalization()(C)
C = Convolution2D(256,(3,3),strides=(1, 1),activation = 'relu',padding = 'same')(C)
C = BatchNormalization()(C)
C = Convolution2D(256,(3,3),strides=(1, 1),activation = 'relu',padding = 'same')(C)
C = BatchNormalization()(C)

GL =  GlobalAveragePooling2D()(C)
D2 =  Dense(128)(GL)
DR2 = Dropout(0.3)(D2)
D3 =  Dense(10,activation="softmax")(DR2)

model = Model(inputs = inp, outputs = D3)

X_train,y_train = Load_.load_data()


sgd = optimizers.SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)

model.compile(loss='categorical_crossentropy',
      optimizer=sgd,
      metrics=['accuracy'])

model.fit(X_train,y_train,epochs=10, 
  batch_size=32,
  validation_split = 0.3,
 shuffle = True
Packages
keras-version: 2.0.6
theano-version: 0.8.0
Numpy-version: 1.9.2
Cudatoolkit-version: 7.0