bzhong2 commented on 2 Jun 2017
As known, ImageDataGenerator can generate more data for training. I used the following code to generate training data and validation data generator and compute the bottleneck features for them.
However, how can I guarantee that the validation data generated by ImageDataGenerator will not contain any repeated data? In the code, I generated the train data 5 times more than the original data set and validation data the same number of the original test data. Can the ImageDataGenerator guarantee that the the generated test data do not any repeat data? Does that be controlled by the parameter shuffle? Should "shuffle=True " be changed to False for validation ImageDataGenerator.flow? Thanks!
train_datagen = ImageDataGenerator(preprocessing_function=preprocess_input_inception3,
rotation_range=90,
width_shift_range=0.2,
height_shift_range=0.2,
shear_range=0.4,
zoom_range=0.4,
horizontal_flip=True,
vertical_flip=True,
fill_mode='nearest',
channel_shift_range=0.5)
train_generator = train_datagen.flow(images_train, cls_train, batch_size=batch_size,shuffle=True)
validation_datagen = ImageDataGenerator(preprocessing_function=preprocess_input_inception3)
validation_generator = validation_datagen.flow(images_test, cls_test, batch_size=batch_size, shuffle=True)
images_train, cls_train, images_test, cls_test are the split images data and labels data I loaded by other codes.
Compute the bottleneck feature for train data from pretrained inception3 model (5 times more data then the orginal data length)
batches = 0
for x_batch_train, y_batch_train in train_generator:
bottlenck_fea = model.predict_on_batch(x_batch_train)
if batches==0:
bottleneck_features_train = bottlenck_fea
labels_train = y_batch_train
else:
bottleneck_features_train = np.concatenate((bottleneck_features_train, bottlenck_fea), axis=0)
labels_train = np.concatenate((labels_train, y_batch_train), axis=0)
batches += 1
if batches >= 5*len(cls_train) / batch_size:
break
batches = 0
for x_batch_validation, y_batch_validation in train_generator:
bottlenck_fea = model.predict_on_batch(x_batch_validation)
if batches==0:
bottleneck_features_validation = bottlenck_fea
labels_validation = y_batch_validation
else:
bottleneck_features_validation = np.concatenate((bottleneck_features_validation, bottlenck_fea),
axis=0)
labels_validation = np.concatenate((labels_validation, y_batch_validation), axis=0)
batches += 1
if batches >= len(cls_test) / batch_size:
break
1