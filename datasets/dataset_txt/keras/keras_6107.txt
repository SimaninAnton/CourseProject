Imorton-zd commented on 17 Jan 2016
I am afraid that I haven't update keras from last October (the old type is 0.1.2). Therefore, after updating the newest edition (0.3.1) of keras, yield an error as following:
4800 train sequences
1200 test sequences
X_train shape: (4800L, 100L, 100L)
X_test shape: (1200L, 100L, 100L)
Build model...
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "C:\Anaconda2\lib\site-packages\spyderlib\widgets\externalshell\sitecustomize.py", line 699, in runfile
    execfile(filename, namespace)
  File "C:\Anaconda2\lib\site-packages\spyderlib\widgets\externalshell\sitecustomize.py", line 74, in execfile
    exec(compile(scripttext, filename, 'exec'), glob, loc)
  File "D:/zhangdong/ACL/single2.py", line 195, in <module>
    model.add(Dense(hidden_dims))
  File "C:\Anaconda2\lib\site-packages\keras\layers\containers.py", line 68, in add
    self.layers[-1].set_previous(self.layers[-2])
  File "C:\Anaconda2\lib\site-packages\keras\layers\core.py", line 82, in set_previous
    assert self.input_ndim == len(layer.output_shape), ('Incompatible shapes: layer expected input with ndim=' +
  File "C:\Anaconda2\lib\site-packages\keras\layers\core.py", line 814, in output_shape
    '(got ' + str(input_shape[1:]) + '. '
Exception: The shape of the input to "Flatten" is not fully defined (got (None, 200). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.
However, I have modified the form of keras such as the input and output of every layer according to the newest documentation. The main part of my codes as following:
    print(len(X_train), 'train sequences')
    print(len(X_test), 'test sequences')

    print('X_train shape:', X_train.shape)
    print('X_test shape:', X_test.shape)

    print('Build model...')
    model = Sequential()

# we add a Convolution1D, which will learn nb_filters
# word group filters of size filter_length:
    model.add(Convolution1D(
                            nb_filter=nb_filters,
                            filter_length=filter_length,
                            activation="relu",
                            border_mode="valid",
                            input_dim = embedding_dims,
                            subsample_length=1))


# we use standard max pooling (halving the output of the previous layer):
    model.add(MaxPooling1D(pool_length=2))

# We flatten the output of the conv layer, so that we can add a vanilla dense layer:
    model.add(Flatten())


#    output_size = nb_filters * (((maxlen - filter_length) / 1) + 1) / 2 #previous

# We add a vanilla hidden layer:
    model.add(Dense(hidden_dims))
# model.add(Dropout(0.25))
    model.add(Activation('relu'))

# We project onto a single unit output layer, and squash it with a sigmoid:
    model.add(Dense(1))
    model.add(Activation('sigmoid'))

    model.compile(loss='binary_crossentropy', optimizer='rmsprop',class_mode="binary")
#    model.compile(loss='categorical_crossentropy', optimizer='adam')

    best_accuracy = 0.0
    for e in range(nb_epoch):
    #shuffle the data each epoch
        np.random.seed(seed)
        np.random.shuffle(X_train)
        np.random.seed(seed)
        np.random.shuffle(Y_train)

        model.fit(X_train, Y_train, batch_size=batch_size, nb_epoch=1, validation_data=(X_test, Y_test), show_accuracy=True)
        score, acc = model.evaluate(X_test, Y_test, batch_size=1,
                                show_accuracy=True)
        if best_accuracy<acc:
            best_accuracy = acc
Would somebody give me some suggestions? Thanks a lot.