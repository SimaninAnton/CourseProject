hadi-ds commented on 19 May 2016
I have trained a regression Graph model that takes two inputs vectors and return a score. It has three hidden dense layers that are shared among inputs (using .add_shared_node), and eventually the output vectors of the third layer are merged via inner product ('dot') to produce the score.
model.get_weights() is a list of length 6, including three pairs of 'weight matrix, bias vector' one for each layer, with proper shapes (dimensions). This is what I expect.
What I am trying to do is to construct a sequential model using the same weights. This will be a network that takes in ONE input vector and return an encoded version of that (with length equal to output_dim of third layer).
I tried the following:
construct that sequential model with three hidden layers
save weights of graph model:
graph_model.save_weights(...)
load those weights into sequential:
seq_model.load_weights('graph_weight.h5')
but this didn't work:
Exception: You are trying to load a weight file containing 10 layers into a model with 3 layers.
Basically, since graph model has different architecture, it is as if graph model has 10 layers while the sequential has only three (graph_model.layers is list of length 10).
Like I said, graph_model.get_weights() actually gives the 3 weights and 3 biases. Is there a way to load those into my three-layer sequential model?
I appreciate any answers,
Hadi