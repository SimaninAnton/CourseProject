TrucCodyHo commented on 12 Mar 2019 â€¢
edited
I am using tensorflow-gpu 1.13.1 and Keras 2.2.4, both of which are up to date. I am trying to make a binary classifier to classify files as benign or malicious, however I keep getting an error.
Error causing code recreated in a much smaller file:
import numpy as np
import tensorflow as tf

def createModel():
    model = tf.keras.models.Sequential()
    model.add(tf.keras.layers.Dense(5, activation=tf.nn.relu))
    model.add(tf.keras.layers.Dense(5, activation=tf.nn.relu))
    model.add(tf.keras.layers.Dense(1, activation=tf.nn.sigmoid))
    model.compile(optimizer='adam',
                  loss='sparse_categorical_crossentropy',
                  metrics=['accuracy'])
    return model

def array_generator():
    yield np.array([0.1,0.2,0.3,0.4,0.5]), np.array([1])

model=createModel()
model.fit_generator(array_generator(), epochs=5, steps_per_epoch=5)
Error:
WARNING:tensorflow:From C:\Users\Cody\AppData\Local\conda\conda\envs\emberenv\lib\site-packages\tensorflow\python\ops\resource_variable_ops.py:435: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.
Instructions for updating:
Colocations handled automatically by placer.
Traceback (most recent call last):
  File "C:/Users/Cody/Desktop/synopsys/venv/test.py", line 18, in <module>
    model.fit_generator(array_generator(), epochs=5, steps_per_epoch=5)
  File "C:\Users\Cody\AppData\Local\conda\conda\envs\emberenv\lib\site-packages\tensorflow\python\keras\engine\training.py", line 1426, in fit_generator
    initial_epoch=initial_epoch)
  File "C:\Users\Cody\AppData\Local\conda\conda\envs\emberenv\lib\site-packages\tensorflow\python\keras\engine\training_generator.py", line 125, in model_iteration
    model, mode, class_weight=class_weight)
  File "C:\Users\Cody\AppData\Local\conda\conda\envs\emberenv\lib\site-packages\tensorflow\python\keras\engine\training_generator.py", line 427, in _make_execution_function
    model._make_fit_function()
  File "C:\Users\Cody\AppData\Local\conda\conda\envs\emberenv\lib\site-packages\tensorflow\python\keras\engine\training.py", line 1926, in _make_fit_function
    '_fit_function', [self.total_loss] + metrics_tensors)
AttributeError: 'Sequential' object has no attribute 'total_loss'
Source code (no one should need this, but it's here if you care)
import tensorflow as tf
import numpy as np
import ember
import random

X_train, y_train, X_test, y_test = ember.read_vectorized_features("C:\\Users\Cody\Desktop\synopsys\data\ember")
metadata_dataframe = ember.read_metadata("C:\\Users\Cody\Desktop\synopsys\data\ember")

#load training set
def loadTrainSet(X_train, y_train, number):
    x = np.split(X_train, 100)
    y = np.split(y_train, 100)
    features = tf.convert_to_tensor(x[number], dtype=tf.float32)
    labels = tf.convert_to_tensor(y[number], dtype=tf.float32)
    return features, labels

#load testing set
def loadTestSet():
    X_test_tf = tf.convert_to_tensor(X_test, np.float32)
    y_test_tf = tf.convert_to_tensor(y_test, np.float32)
    return X_test_tf, y_test_tf

#create compiled keras model
def createModel():
    model = tf.keras.models.Sequential()
    #ADD L2 REGULARIZATION LATER
    model.add(tf.keras.layers.Dense(7351, activation=tf.nn.relu))
    model.add(tf.keras.layers.Dropout(0.2))
    model.add(tf.keras.layers.Dense(4096, activation=tf.nn.relu))
    model.add(tf.keras.layers.Dropout(0.2))
    model.add(tf.keras.layers.Dense(4096, activation=tf.nn.relu))
    model.add(tf.keras.layers.Dropout(0.2))
    model.add(tf.keras.layers.Dense(4096, activation=tf.nn.relu))
    model.add(tf.keras.layers.Dropout(0.2))
    model.add(tf.keras.layers.Dense(2048, activation=tf.nn.relu))
    model.add(tf.keras.layers.Dropout(0.2))
    model.add(tf.keras.layers.Dense(2048, activation=tf.nn.relu))
    model.add(tf.keras.layers.Dropout(0.2))
    model.add(tf.keras.layers.Dense(2048, activation=tf.nn.relu))
    model.add(tf.keras.layers.Dropout(0.2))
    model.add(tf.keras.layers.Dense(1024, activation=tf.nn.relu))
    model.add(tf.keras.layers.Dropout(0.2))
    model.add(tf.keras.layers.Dense(1024, activation=tf.nn.relu))
    model.add(tf.keras.layers.Dropout(0.2))
    model.add(tf.keras.layers.Dense(1024, activation=tf.nn.relu))
    model.add(tf.keras.layers.Dropout(0.2))
    model.add(tf.keras.layers.Dense(1024, activation=tf.nn.relu))
    model.add(tf.keras.layers.Dropout(0.2))
    model.add(tf.keras.layers.Dense(1, activation=tf.nn.sigmoid))
    #adam metrhod for stochastic gradient descent
    model.compile(optimizer='adam',
                  loss='mean_squared_error',
                  metrics=['accuracy'])
    return model

def generate_arrays(features, labels, batch_size):
    print('generate worked')
    batch_features=np.zeros((batch_size, 7351), dtype=np.float32)
    batch_labels=np.zeros((batch_size, 1), dtype=np.float32)
    while True:
        for i in range(batch_size):
            print('starting to work')
            index=random.choice(900000,1)
            print('random worked', index)
            batch_features=X_train[index]
            print('features worked')
            batch_labels=y_train[index]
            print('labels worked')
        print('it all worked until here')
        yield batch_features, batch_labels

print('creating model')
model=createModel()
print('training model')
model.fit_generator(generate_arrays(X_train, y_train, 500), epochs=10, steps_per_epoch=1800, initial_epoch=0)
print('testing model')
X_test_tf, y_test_tf = loadTestSet()
model.evaluate(X_test_tf, y_test_tf)
I have been tearing my hair out for hours trying to figure this out. Any help is greatly appreciated.