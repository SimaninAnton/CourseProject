NikhilShaw commented on 4 Jul 2017
Using TensorFlow backend.
Epoch 1/10
Exception in thread Thread-1:
Traceback (most recent call last):
  File "/usr/lib/python2.7/threading.py", line 801, in __bootstrap_inner
    self.run()
  File "/usr/lib/python2.7/threading.py", line 754, in run
    self.__target(*self.__args, **self.__kwargs)
  File "/usr/local/lib/python2.7/dist-packages/keras/engine/training.py", line 606, in data_generator_task
    generator_output = next(self._generator)
TypeError: ImageDataGenerator object is not an iterator

Traceback (most recent call last):
  File "/home/nikhil/workspace/data learning/test.py", line 52, in <module>
    new_model.fit_generator(datagen, steps_per_epoch= len(x_train), epochs=10)    
  File "/usr/local/lib/python2.7/dist-packages/keras/legacy/interfaces.py", line 88, in wrapper
    return func(*args, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/keras/models.py", line 1097, in fit_generator
    initial_epoch=initial_epoch)
  File "/usr/local/lib/python2.7/dist-packages/keras/legacy/interfaces.py", line 88, in wrapper
    return func(*args, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/keras/engine/training.py", line 1851, in fit_generator
    str(generator_output))
ValueError: output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: None
Following is the code for the error. I am unable to debug this.
from keras.datasets import mnist
from keras.preprocessing.image import ImageDataGenerator
from keras.layers import Dropout
from keras.layers import Flatten
from keras.layers import Dense
from keras.layers.convolutional import Conv2D
from keras.layers.pooling import MaxPooling2D
from keras.utils import np_utils
from keras.models import Sequential

########## DATA PREPERATION ###########

# load data
(x_train, y_train), (x_test, y_test) = mnist.load_data()
# reshape to be [samples][width][height]
x_train = x_train.reshape(x_train.shape[0], 28, 28, 1)
x_test = x_test.reshape(x_test.shape[0], 28, 28, 1)
# convert from int to float
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train/=255
x_test/=255
# data preprocessing
datagen = ImageDataGenerator(horizontal_flip=True)
test_datagen = ImageDataGenerator()
# fit parameters from data
datagen.fit(x_train)
test_datagen.fit(x_test)
# one hot encoding the output
y_train = np_utils.to_categorical(y_train)
y_test = np_utils.to_categorical(y_test)
no_of_class = y_test.shape[1]
############# model ###########

def create_model():
    model = Sequential()
    model.add(Conv2D(32, kernel_size=(5, 5),activation='relu',input_shape=(28,28,1)))
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Conv2D(15, (3, 3), activation='relu'))
    model.add(MaxPooling2D(pool_size=(2,2)))
    model.add(Dropout(0.2))
    model.add(Flatten())
    model.add(Dense(128, activation='relu'))
    model.add(Dense(50, activation='relu'))
    model.add(Dense(no_of_class, activation='softmax'))
    # compiling the model
    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
    return model

new_model=create_model()
new_model.fit_generator(datagen, steps_per_epoch= len(x_train), epochs=10)