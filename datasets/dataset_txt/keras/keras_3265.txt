siddheshk commented on 9 Feb 2017
I am trying to implement a model that has class specific attention (different attention for each class label). So if there are k classes, there will be k such attention layers. Also, only the attention layer is different. All other layers are common.
I have been able to do this by defining k different models, each having a separate attention layer. But the problem with this is that I am restricted to training this by passing one training instance at a time (As I need to select the model depending on the value of the training label).
Is it possible to do so in a batch fashion? Like having one single model that selects the correct attention layer and updates the weights of only that corresponding layer?
I tried out something like this
class AttentionLayer(Layer):
    def build(self, input_shape):
        input_dim = input_shape[0][-1]
        self.W_w = self.add_weight(shape=(self.num_classes, input_dim, input_dim), initializer='glorot_uniform', trainable=True, name='{}_W_w'.format(self.name))
        self.b_w = self.add_weight(shape=(self.num_classes, input_dim,), initializer='zero', trainable=True, name='{}_b_w'.format(self.name))
        self.u_w = self.add_weight(shape=(self.num_classes, input_dim,), initializer='glorot_uniform', trainable=True, name='{}_u_w'.format(self.name))
        super(AttentionLayer, self).build(input_shape)

    def call(self, inputs, mask=None):
        x = inputs[0]
        label = inputs[1][0][0]
        u_it = K.tanh(K.dot(x, self.W_w[label]) + self.b_w[label])
        return u_it
But in this case, when I pass only a single training instance through the model, the entire self.W_w matrix is updated (Even the slices which weren't used in computation).
Is there a way to achieve this?
Please make sure that the boxes below are checked before you submit your issue. If your issue is an implementation question, please ask your question on StackOverflow or join the Keras Slack channel and ask there instead of filing a GitHub issue.
Thank you!
Check that you are up-to-date with the master branch of Keras. You can update with:
pip install git+git://github.com/fchollet/keras.git --upgrade --no-deps
If running on TensorFlow, check that you are up-to-date with the latest version. The installation instructions can be found here.
If running on Theano, check that you are up-to-date with the master branch of Theano. You can update with:
pip install git+git://github.com/Theano/Theano.git --upgrade --no-deps
Provide a link to a GitHub Gist of a Python script that can reproduce your issue (or just copy the script here if it is short).