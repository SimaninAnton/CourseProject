superhans commented on 25 Aug 2015
Hi Guys
I'm building this slightly wierd looking neural network with Keras, of course. I was wondering if I could get some help in it's construction.
The input is of size n_samples x n_channels x dim_1 (for example : 1000 samples of 2 channel audio signals, each channel is of dimension 128).
Now, I'll describe how each sample is processed : I multiply each channel of a sample with a common set of weights (which we need to learn). In our specific case, we get, 2 channels, each of dimension dim_2 (say 256)
Then, I take the max of this 2x256 signal per column (each column has two rows, right, so I pick the max amongst the two), to get a 1x256 vector. I send this through a softmax, which is used to compute the error for backprop.
Can I implement this with Keras ? Does something like the code below do what I want ?
model = Sequential()                                                 
model.add(Convolution1D(dim_1,dim_2,1,init='uniform'))           
model.add(Activation('relu'))                                        
model.add(Convolution1D(dim_2,n_classes,1,init='uniform'))     
model.add(MaxPooling2D(poolsize=(n_channels,1),ignore_border=False)) 
model.add(Flatten())                                                 
model.add(Activation('softmax'))                                     