Neltherion commented on 8 Dec 2016 â€¢
edited
Hi
I have a GAN model made up of a Generator (produces images) and a Discriminator (discriminates between real and fake generator outputs). here's the code for joining the models:
def generator_to_discriminator(generator, discriminator):
    model = Sequential()
    model.add(generator)
    model.add(discriminator)

    return model

generator_to_discriminator.compile(loss='bce', optimizer='adam')
I want to change the loss function of generator_to_discriminator model to also account for the L1 loss of generator (which is a part of it) but a loss function only gets y_true and y_pred which are like this:
y_true => an input image to the Generator
y_pred => 0 or 1 to account for the output being real or fake
I tried writing a loss function like below but it didn't work:
def generator_to_discriminator_loss(y_true, y_pred):
    return binary_crossentropy(y_true, y_pred) + mae(y_true, generator.predict(y_true))
it gives me this error: object of type 'TensorVariable' has no len().
I saw issues like #2121 but something tells me this should be easier than what has been proposed in those issues. How should I write the loss function to account for the L1 loss of the generator in the generator_to_discriminator model?
Thanks...