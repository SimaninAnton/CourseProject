owang commented on 17 Oct 2016
If I have a network with multiple output layers:
input = Input(shape=(c,imh,imw)) 
ouput0 = Convolution2D()(input)
ouput1 = Convolution2D()(output0)
I can specify the model as follows:
model = Model(input=input, output=[output0, output1])
And train like this:
model.train_on_batch(X, [Y1,Y2])
My question is, how would I weight the importance of output1 to be twice that of output0 pm training (e.g., the gradients that are back propagated should be derived more from output1)?