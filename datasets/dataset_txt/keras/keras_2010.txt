anselmoferreira commented on 3 Jul 2017 â€¢
edited
Please make sure that the boxes below are checked before you submit your issue. If your issue is an implementation question, please ask your question on StackOverflow or join the Keras Slack channel and ask there instead of filing a GitHub issue.
Thank you!
Check that you are up-to-date with the master branch of Keras. You can update with:
pip install git+git://github.com/fchollet/keras.git --upgrade --no-deps
If running on TensorFlow, check that you are up-to-date with the latest version. The installation instructions can be found here.
If running on Theano, check that you are up-to-date with the master branch of Theano. You can update with:
pip install git+git://github.com/Theano/Theano.git --upgrade --no-deps
Provide a link to a GitHub Gist of a Python script that can reproduce your issue (or just copy the script here if it is short).
I have a pre-trained network in augmented data, but I want to extract feature vectors from the last but one layer and train another classifier (e.g., svm). To do that I need to extract the output on the augmented training data and from the test data.
However, I am quite noob in Keras/tensorflow and I just need to have the augmented training data in a numpy array to use it in my feature extractor code. I can do this if I dont use augmented training data with no problem.
Here is what I tried so far:
#train on augmented data
datagen = ImageDataGenerator(horizontal_flip=True, vertical_flip=True)  # randomly flip images
datagen.fit(x_train)

model.fit_generator(datagen.flow(x_train, y_train,
                                     batch_size=batch_size),
                                     steps_per_epoch=x_train.shape[0] // batch_size,
                                     epochs=epochs,
                                     validation_data=(x_test, y_test))

#extract augmented data. Is this correct?
x_train_augmented, y_train_augmented=datagen.flow(x_train, y_train, batch_size=batch_size)
According to Keras Documentation function flow(X, y): Takes numpy data & label arrays, and generates batches of augmented/normalized data. Yields batches indefinitely, in an infinite loop.
So, how can I loop and return the augmented data in a matrix of shape (num_images, width, height, channels)? I need the same augmented data used to train the network in the command (datagen.flow(x_train, y_train,
batch_size=batch_size)). Is it possible to return these data?