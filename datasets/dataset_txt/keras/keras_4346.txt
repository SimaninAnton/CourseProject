yxchng commented on 20 Sep 2016
def create_heatmaps(joints, variance):
    joints_x = joints[::2]/256*64
    joints_y = joints[1::2]/256*64
    sigma = np.identity(2) * variance
    heatmaps = []
    for i in xrange(len(joints_x)):
        heatmap = np.zeros((64, 64), dtype='float32')
        for x in xrange(0, 64):
            for y in xrange(0, 64):
                vector = np.array([y - joints_y[i], x - joints_x[i]])
                heatmap[y, x] = (1 / math.sqrt(4 * math.pi * math.pi * np.linalg.det(sigma))) * np.exp(-(np.dot(np.dot(vector,np.linalg.inv(sigma)),vector.T))/2)

        heatmaps.append(heatmap)
    return np.array(heatmaps*2)


def heatmap_iterator(path_data, path_labels):
    while 1:
        data = np.load(path_data)
        data_labels = np.load(path_labels)
        for (x, y) in zip(data, data_labels):
            y = create_heatmaps(y, 1)
            yield (x, y)
Above is my code for my custom batch generator. However, when i try to use it to train, it complains about the lack of memory when I have sufficient.
On top of that, can i know if this is the correct way to make a custom generator? Thanks