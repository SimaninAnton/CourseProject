jasonzliang commented on 2 Dec 2015
#!/usr/bin/python

from __future__ import absolute_import
from __future__ import print_function
import numpy as np
np.random.seed(1337)  # for reproducibility

from keras.datasets import mnist
from keras.models import Sequential
from keras.layers.core import Dense, Dropout, Activation, Flatten
from keras.layers.convolutional import Convolution2D, MaxPooling2D
from keras.utils import np_utils

'''
    Train a simple convnet on the MNIST dataset.

    Run on GPU: THEANO_FLAGS=mode=FAST_RUN,device=gpu,floatX=float32 python mnist_cnn.py

    Get to 99.25% test accuracy after 12 epochs (there is still a lot of margin for parameter tuning).
    16 seconds per epoch on a GRID K520 GPU.
'''

batch_size = 128
nb_classes = 10
nb_epoch = 12

# input image dimensions
img_rows, img_cols = 28, 28
# number of convolutional filters to use
nb_filters = 32
# size of pooling area for max pooling
nb_pool = 2
# convolution kernel size
nb_conv = 3

# the data, shuffled and split between tran and test sets
(X_train, y_train), (X_test, y_test) = mnist.load_data()

X_train = X_train.reshape(X_train.shape[0], 1, img_rows, img_cols)
X_test = X_test.reshape(X_test.shape[0], 1, img_rows, img_cols)
X_train = X_train.astype("float32")
X_test = X_test.astype("float32")
X_train /= 255
X_test /= 255
print('X_train shape:', X_train.shape)
print(X_train.shape[0], 'train samples')
print(X_test.shape[0], 'test samples')

# convert class vectors to binary class matrices
Y_train = np_utils.to_categorical(y_train, nb_classes)
Y_test = np_utils.to_categorical(y_test, nb_classes)

model = Sequential()

model.add(Convolution2D(nb_filters, nb_conv, nb_conv,
                        border_mode='same',
                        input_shape=(1, img_rows, img_cols)))
model.add(Activation('relu'))
model.add(Convolution2D(nb_filters, nb_conv, nb_conv))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(nb_pool, nb_pool)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(128))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(nb_classes))
model.add(Activation('softmax'))

model.compile(loss='categorical_crossentropy', optimizer='adadelta')

model.fit(X_train, Y_train, batch_size=batch_size, nb_epoch=nb_epoch, show_accuracy=True, verbose=1, validation_data=(X_test, Y_test))
score = model.evaluate(X_test, Y_test, show_accuracy=True, verbose=0)
print('Test score:', score[0])
print('Test accuracy:', score[1])
If you run the mnist example script with border_mode changed from "valid" to "same", the following error occurs:
  File "./keras_mnist_cnn.py", line 71, in <module>
    model.compile(loss='categorical_crossentropy', optimizer='adadelta')
  File "/usr/local/lib/python2.7/dist-packages/keras/models.py", line 372, in compile
    self.y_train = self.get_output(train=True)
  File "/usr/local/lib/python2.7/dist-packages/keras/layers/containers.py", line 73, in get_output
    return self.layers[-1].get_output(train)
  File "/usr/local/lib/python2.7/dist-packages/keras/layers/core.py", line 512, in get_output
    X = self.get_input(train)
  File "/usr/local/lib/python2.7/dist-packages/keras/layers/core.py", line 102, in get_input
    return self.previous.get_output(train=train)
  File "/usr/local/lib/python2.7/dist-packages/keras/layers/core.py", line 681, in get_output
    X = self.get_input(train)
  File "/usr/local/lib/python2.7/dist-packages/keras/layers/core.py", line 102, in get_input
    return self.previous.get_output(train=train)
  File "/usr/local/lib/python2.7/dist-packages/keras/layers/core.py", line 488, in get_output
    X = self.get_input(train)
  File "/usr/local/lib/python2.7/dist-packages/keras/layers/core.py", line 102, in get_input
    return self.previous.get_output(train=train)
  File "/usr/local/lib/python2.7/dist-packages/keras/layers/core.py", line 512, in get_output
    X = self.get_input(train)
  File "/usr/local/lib/python2.7/dist-packages/keras/layers/core.py", line 102, in get_input
    return self.previous.get_output(train=train)
  File "/usr/local/lib/python2.7/dist-packages/keras/layers/core.py", line 681, in get_output
    X = self.get_input(train)
  File "/usr/local/lib/python2.7/dist-packages/keras/layers/core.py", line 102, in get_input
    return self.previous.get_output(train=train)
  File "/usr/local/lib/python2.7/dist-packages/keras/layers/core.py", line 591, in get_output
    X = self.get_input(train)
  File "/usr/local/lib/python2.7/dist-packages/keras/layers/core.py", line 102, in get_input
    return self.previous.get_output(train=train)
  File "/usr/local/lib/python2.7/dist-packages/keras/layers/core.py", line 488, in get_output
    X = self.get_input(train)
  File "/usr/local/lib/python2.7/dist-packages/keras/layers/core.py", line 102, in get_input
    return self.previous.get_output(train=train)
  File "/usr/local/lib/python2.7/dist-packages/keras/layers/convolutional.py", line 323, in get_output
    X = self.get_input(train)
  File "/usr/local/lib/python2.7/dist-packages/keras/layers/core.py", line 102, in get_input
    return self.previous.get_output(train=train)
  File "/usr/local/lib/python2.7/dist-packages/keras/layers/core.py", line 512, in get_output
    X = self.get_input(train)
  File "/usr/local/lib/python2.7/dist-packages/keras/layers/core.py", line 102, in get_input
    return self.previous.get_output(train=train)
  File "/usr/local/lib/python2.7/dist-packages/keras/layers/convolutional.py", line 212, in get_output
    X = self.get_input(train)
  File "/usr/local/lib/python2.7/dist-packages/keras/layers/core.py", line 102, in get_input
    return self.previous.get_output(train=train)
  File "/usr/local/lib/python2.7/dist-packages/keras/layers/core.py", line 512, in get_output
    X = self.get_input(train)
  File "/usr/local/lib/python2.7/dist-packages/keras/layers/core.py", line 102, in get_input
    return self.previous.get_output(train=train)
  File "/usr/local/lib/python2.7/dist-packages/keras/layers/convolutional.py", line 215, in get_output
    dim_ordering=self.dim_ordering)
  File "/usr/local/lib/python2.7/dist-packages/keras/backend/theano_backend.py", line 543, in conv2d
    border_mode=(pad_x, pad_y))
  File "/usr/local/lib/python2.7/dist-packages/theano/sandbox/cuda/dnn.py", line 1149, in dnn_conv
    conv_mode=conv_mode)(img.shape, kerns.shape)
  File "/usr/local/lib/python2.7/dist-packages/theano/sandbox/cuda/dnn.py", line 271, in __init__
    border_mode = tuple(map(int, border_mode))
TypeError: int() argument must be a string or a number, not 'TensorVariable'