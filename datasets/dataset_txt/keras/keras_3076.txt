mmelodea commented on 4 Mar 2017
Hi all again,
I'm tryin to use the theano multicore functionality through keras using the openmp, but it isn't working on a script a made. When I test the theano or tensorflow as backend and I run that example on theano path "elemwise_openmp_speedup.py" I see the the cores being used and the message from the script shows the time speed up. I run that example as indicated:
OMP_NUM_THREADS=2 python theano/misc/elemwise_openmp_speedup.py
When I do the same on my script... it doesn't use more than 1 core with theano. If I use tensorflow, I see that more that core are being used, but in the end, the time processing is the same that not using just one core. Somebody knows what can be the issue?
My script is the following one:
import numpy, csv, math
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation
from keras.layers.advanced_activations import LeakyReLU, PReLU, ELU, SReLU
from keras.optimizers import SGD, Adam, RMSprop, Adagrad, Adadelta, Adamax, Nadam
from keras.models import model_from_json
from keras.callbacks import EarlyStopping, ModelCheckpoint, LearningRateScheduler
fix random seed for reproducibility
seed = 7
numpy.random.seed(seed)
print("******* Starting ********")
reader = numpy.loadtxt("training_data2.csv", delimiter=",")
X_train = reader[:,0:18].astype(float)
Y_train = reader[:,18]
nevents = len(Y_train)
create model
model = Sequential()
model.add( Dense(60, init='uniform', input_shape=(18,), activation='relu') )
model.add( Dense(60, init='uniform', activation='relu') )
model.add( Dense(60, init='uniform', activation='relu') )
model.add( Dense(60, init='uniform', activation='relu') )
model.add( Dense(60, init='uniform', activation='relu') )
model.add( Dense(1, init='uniform', activation='sigmoid') )
#saves the model
model_json = model.to_json()
smodel = "keras_model.json"
with open(smodel,"w") as json_file:
json_file.write(model_json)
nepochs = 10
opt = Adam()
#compiles the model
model.compile(loss='binary_crossentropy', optimizer=opt, metrics=['acc'])
#adjusts model to data
model.fit(X_train, Y_train, nb_epoch=nepochs, batch_size=37, verbose=2)
#saving weights
sweight = "keras_weights.h5"
model.save_weights(sweight)