recluze commented on 19 Jan 2017 â€¢
edited
I created a sequential model for a 1D CNN with embeddings. The code is:
    input = Input(shape=(max_sequence_size, num_uniq_words))
    x = Embedding(num_uniq_words, embedding_dims, dropout=0.2)(input)
    x = Convolution1D(200, 3, activation='relu', subsample_length=1)(x)
    m = Model([input], x)
    m.summary()
However, I get the following error for the conv layer:
Traceback (most recent call last):
  File "train.py", line 224, in <module>
    model = train(X_train, y_train, X_test, y_test)
  File "train.py", line 121, in train
    model_cnn = get_cnn_model(num_uniq_words, max_sequence_size, max_num_functions)
  File "/Users/nam/ml-exps/bi-gans/src/models.py", line 21, in get_cnn_model
    x = Convolution1D(200, 3, activation='relu', subsample_length=1)(x)
  File "/Users/nam/anaconda/lib/python2.7/site-packages/keras/engine/topology.py", line 526, in __call__
    self.assert_input_compatibility(x)
  File "/Users/nam/anaconda/lib/python2.7/site-packages/keras/engine/topology.py", line 466, in assert_input_compatibility
    str(K.ndim(x)))
ValueError: Input 0 is incompatible with layer convolution1d_1: expected ndim=3, found ndim=4
If I remove the num_uniq_words from the Input layer, the dimensions match but then my input layer only outputs (None, max_sequence_size). However, I need the num_uniq_words dimension because this is not one-hot but can have several words activated.
I was able to get this to work properly using the sequential API using the following:
    model = Sequential()
    model.add(Embedding(num_uniq_words,
                        embedding_dims,
                        input_length=max_sequence_size,
                        dropout=0.2
                        ))
    model.add(Convolution1D(nb_filter=200,
                            filter_length=3,
                            border_mode='valid',
                            activation='relu',
                            subsample_length=1))
    ...