guy4261 commented on 2 Aug 2015
Hello,
Looking at the CIFAR10 example:
https://github.com/fchollet/keras/blob/master/examples/cifar10_cnn.py
(3-layered 32x32 images)
I tried to run the model on the LFW (Faces in the Wild) dataset
http://vis-www.cs.umass.edu/lfw/
(3-layered 250x250 images)
I have reshaped the data to the same shape as the CIFAR10 data, but I get other errors:
ValueError: matrices are not aligned
Apply node that caused the error: dot(Reshape{2}.0, HostFromGpu.0)
Inputs types: [TensorType(float32, matrix), TensorType(float32, matrix)]
Inputs shapes: [(3, 246016), (4096, 512)]
Inputs strides: [(984064, 4), (2048, 4)]
Inputs values: ['not shown', 'not shown']
If I understand correctly, this happens because I use the CIFAR10 model as-is, but its parameters - magic numbers such as 32 (which is also the image dimensions of the CIFAR10 dataset are all around the model definition:
model = Sequential()

model.add(Convolution2D(32, 3, 3, 3, border_mode='full'))
model.add(Activation('relu'))
model.add(Convolution2D(32, 32, 3, 3))
model.add(Activation('relu'))
model.add(MaxPooling2D(poolsize=(2, 2)))
model.add(Dropout(0.25))

model.add(Convolution2D(64, 32, 3, 3, border_mode='full'))
model.add(Activation('relu'))
model.add(Convolution2D(64, 64, 3, 3))
model.add(Activation('relu'))
model.add(MaxPooling2D(poolsize=(2, 2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(64*8*8, 512))
model.add(Activation('relu'))
model.add(Dropout(0.5))

model.add(Dense(512, nb_classes))
model.add(Activation('softmax'))
It would be great for newbies such as myself is instead of magic numbers, the way to calculate them would be stored in an variable and then those variable would be used in building the model. Even for those variables which are selected arbitrarily and on which no other variables are dependent would be better marked. Take for instance batch sizes - of course they affect the training, but on the other hand we can toy around with them and the code would still run (which is my main goal right now).
I know that this is partially because I'm not well-versed in ANNs and in ConvNets, but believe me that understanding things first via code, then by reading is the best method for me. Let's be Pythonic about it and make keras friendly to newbies.
Thanks!