dancivitarese commented on 4 Apr 2016
Hi all,
I am trying to implement Jaccard's similarity score, as described here, but I am not sure how to use the special functions from Theano or Tensorflow.
def jaccard_similarity(y_true, y_pred, normalize=True):
    if normalize:
        return K.mean(K.mean(K.equal(y_true, y_pred), axis=1), axis=-1)
    else:
        return K.mean(K.equal(y_true, y_pred), axis=-1)
I'm having a hard time trying to understand how those 'K' functions calculate things.
The implementation from scikit-learn is this:
def jaccard_similarity_score(y_true, y_pred, normalize=True, sample_weight=None):
    y_type, y_true, y_pred = _check_targets(y_true, y_pred)
    if y_type.startswith('multilabel'):
        with np.errstate(divide='ignore', invalid='ignore'):
            pred_or_true = count_nonzero(y_true + y_pred, axis=1)
            pred_and_true = count_nonzero(y_true.multiply(y_pred), axis=1)
            score = pred_and_true / pred_or_true
            score[pred_or_true == 0.0] = 1.0
    else:
        score = y_true == y_pred
    return _weighted_sum(score, sample_weight, normalize)
Please make sure that the boxes below are checked before you submit your issue. Thank you!
Check that you are up-to-date with the master branch of Keras. You can update with:
pip install git+git://github.com/fchollet/keras.git --upgrade --no-deps
If running on Theano, check that you are up-to-date with the master branch of Theano. You can update with:
pip install git+git://github.com/Theano/Theano.git --upgrade --no-deps
Provide a link to a GitHub Gist of a Python script that can reproduce your issue (or just copy the script here if it is short).