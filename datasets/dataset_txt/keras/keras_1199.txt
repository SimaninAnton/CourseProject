RohitSaha commented on 3 Mar 2018
The idea is to have a shared model that accepts labeled and unlabeled inputs. If inputs are labeled, we calculate the crossentropy loss. An extra domain loss is calculated which is essentially the mmd between features of the labeled input and unlabeled input computed by the adapt layer (as mentioned in the image). This domain loss is then added to the crossentropy loss.
I looked into Keras's Sequential API guide and have managed to implement some portion of the code. I am not sure how to proceed with getting outputs from specific layers of the model based on the input tensor and then calculating the domain loss. Code I've implemented so far:
model = load_model(weight_path)

inp = model.input
out = model.layers[-2].output
adapt_layer = Dense(512, activation='sigmoid', name='adapt_layer')(out) //adapt layer
preds = Dense(19, activation='softmax', name='predictions', activity_regularizer=regularizers.l2(0.01))(adapt_layer)
vision_model = Model(inputs=inp, outputs=preds)

labeled_input = Input(shape=(None, 1024, 1024, 3))
unlabeled_input= Input(shape=(None, 1024, 1024, 3))

preds_labeled = vision_model(labeled_input) //output for calculating crossentropy loss

labeled_features = vision_model(labeled_input).layers[-2].output //not sure if this is the way to go
unlabeled_features = vision_model(unlabeled_input).layers[-2].output
Any help would be appreciated!