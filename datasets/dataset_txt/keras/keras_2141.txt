dustinvtran commented on 14 Jun 2017 â€¢
edited
In version <=2.0.4, Keras layers implicitly cast an input to a TensorFlow tensor as it goes through computation (it does this because the layer calls TensorFlow primitives which do the implicit casting).
A key application is the Edward probabilistic programming language. Consider a generative decoder:
from edward.models import Normal, Bernoulli
from keras.layers import Dense

batch_size = 128
latent_dim = 100

z = Normal(0.0, 1.0, sample_shape=[batch_size, latent_dim])
h = Dense(256)(z)
x = Bernoulli(logits=h)
This works in Keras <=2.0.4 because the layer calls tf.convert_to_tensor() on the input before doing computation. However, the line h = Dense(256)(z) fails in 2.0.5 due to #6593: is_keras_tensor(z) raises a value error.
Is the restriction to symbolic tensors (and not including implicitly castable tensors) on purpose?
1