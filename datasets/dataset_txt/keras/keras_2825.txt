jagiella commented on 28 Mar 2017
Using the new gpuarray backend, the following error occured:
Traceback (most recent call last):
  File "CNN_approach.py", line 56, in <module>
    model.fit( X_train.astype('float32'), y_train.astype('float32'), epochs=1, batch_size=256, validation_data=(X_test,y_test))
  File "/usr/local/lib/python2.7/dist-packages/keras/models.py", line 845, in fit
    initial_epoch=initial_epoch)
  File "/usr/local/lib/python2.7/dist-packages/keras/engine/training.py", line 1485, in fit
    initial_epoch=initial_epoch)
  File "/usr/local/lib/python2.7/dist-packages/keras/engine/training.py", line 1140, in _fit_loop
    outs = f(ins_batch)
  File "/usr/local/lib/python2.7/dist-packages/keras/backend/theano_backend.py", line 1094, in __call__
    return self.function(*inputs)
  File "/usr/local/lib/python2.7/dist-packages/theano/compile/function_module.py", line 898, in __call__
    storage_map=getattr(self.fn, 'storage_map', None))
  File "/usr/local/lib/python2.7/dist-packages/theano/gof/link.py", line 325, in raise_with_op
    reraise(exc_type, exc_value, exc_trace)
  File "/usr/local/lib/python2.7/dist-packages/theano/compile/function_module.py", line 884, in __call__
    self.fn() if output_subset is None else\
  File "pygpu/gpuarray.pyx", line 683, in pygpu.gpuarray.pygpu_copy (pygpu/gpuarray.c:9990)
  File "pygpu/gpuarray.pyx", line 396, in pygpu.gpuarray.array_copy (pygpu/gpuarray.c:7083)
pygpu.gpuarray.GpuArrayException: Unaligned array
Apply node that caused the error: GpuContiguous(InplaceGpuDimShuffle{3,2,0,1}.0)
Toposort index: 70
Inputs types: [GpuArrayType<None>(float32, (False, False, False, False))]
Inputs shapes: [(4, 1, 11, 11)]
Inputs strides: [(4, 9223372036854775807, 176, 16)]
Inputs values: ['not shown']
Outputs clients: [[Shape(GpuContiguous.0), Shape_i{3}(GpuContiguous.0), Shape_i{2}(GpuContiguous.0), Shape_i{0}(GpuContiguous.0), GpuDnnConv{algo='small', inplace=True}(GpuContiguous.0, GpuContiguous.0, GpuAllocEmpty{dtype='float32', context_name=None}.0, GpuDnnConvDesc{border_mode='half', subsample=(1, 1), conv_mode='conv', precision='float32'}.0, Constant{1.0}, Constant{0.0})]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Code:
model = Sequential([
 Conv2D( 4, (11,11), activation='relu', padding='same', input_shape=X_train.shape[1:]),
 MaxPooling2D( (2,2)),
 Conv2D( 8, (7,7), activation='relu', padding='same'),
 MaxPooling2D( (2,2)),
 Conv2D( 16, (5,5), activation='relu', padding='same'),
 MaxPooling2D( (2,2)),
 Conv2D( 32, (3,3), activation='relu', padding='same'),
 MaxPooling2D( (2,2)),
 Conv2D( 64, (3,3), activation='relu', padding='same'),
 MaxPooling2D( (2,2)),
 Conv2D( 128, (3,3), activation='relu', padding='same'),
 MaxPooling2D( (2,2)),
 Conv2D( 256, (3,3), activation='relu', padding='same'),
 MaxPooling2D( (2,2)),
 Flatten(),
 Dropout(0.05),
 Dense(128, activation='relu'),
 Dropout(0.05),
 Dense(11, activation='softmax')
])
print(model.summary())
model.compile( loss='categorical_crossentropy', optimizer='adadelta', metrics=['accuracy'])

print('fit model')
model.fit( X_train.astype('float32'), y_train.astype('float32'), epochs=1, batch_size=256, validation_data=(X_test.astype('float32'),y_test.astype('float32')))