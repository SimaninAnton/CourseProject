ozanyurtsever commented on 19 Apr 2019 â€¢
edited
I want to train a model to predict one's emotion from the physical signals. I have three physical signals and using it as input features;
ecg(Electrocardiography), gsr(galvanic skin response), temp(temparature)
In my dataset, there are 312 total records belonging to the participants and there are 18000 rows of data in each record. So when I combine them into a single data frame, there are 5616000 rows in total.
Here is my x_train dataframe;
           ecg     gsr   temp
0        0.1912  0.0000  40.10
1        0.3597  0.0000  40.26
2        0.3597  0.0000  40.20
3        0.3597  0.0000  40.20
4        0.3597  0.0000  40.33
5        0.3597  0.0000  40.03
6        0.2739  0.0039  40.13
7        0.1641  0.0031  40.20
8        0.0776  0.0025  40.20
9        0.0005  0.0020  40.26
10      -0.0375  0.0016  40.03
11      -0.0676  0.0013  40.16
12      -0.1071  0.0010  40.20
13      -0.1197  0.0047  40.20
..      .......  ......  .....
..      .......  ......  .....
..      .......  ......  .....
5616000 0.0226  0.1803  38.43
And I have 6 classes which are corresponding to emotions. I have encoded these labels with numbers;
anger = 0, calmness = 1, disgust = 2, fear = 3, happiness = 4, sadness = 5
Here is my y_train;
         emotion
0              0
1              0
2              0
3              0
4              0
.              .
.              .
.              .
18001          1
18002          1
18003          1
.              .
.              .
.              .
360001         2
360002         2
360003         2
.              .
.              .
.              .
.              .
5616000        5
To feed my CNN, I am reshaping the train_x and one hot encoding the train_y data.
train_x = train_x.values.reshape(312,18000,3) #because I have 18000 rows in each record and 3 input features
train_y = train_y.values.reshape(312,18000)
After reshaping, I have created my CNN model;
model = Sequential()
model.add(Conv1D(2,700,activation='relu',input_shape=(18000,3)))
model.add(Conv1D(2,700,activation='relu'))
model.add(MaxPooling1D(4))
model.add(Conv1D(2,700,activation='relu'))
model.add(Conv1D(2,700,activation='relu'))
model.add(GlobalAveragePooling1D())
model.add(Dropout(0.5))
model.add(Dense(6,activation='softmax'))

model.compile(optimizer = sgd, loss = 'categorical_crossentropy', metrics = ['acc'])
model.fit(train_x,train_y,epochs = 300, batch_size = 32, validation_split=0.33, shuffle=False)
The problem is, accuracy is not going more than 0.2 and when I check the predictions, it is always predicting the same class. I have tried to increase layers, play with the learning rate, changing the loss function, changing the optimizer but nothing helped me to solve this problem.
Here is the confusion matrix;
How Can I solve this problem? Thanks in advance.