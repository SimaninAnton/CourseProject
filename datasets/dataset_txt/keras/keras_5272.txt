Contributor
jpeg729 commented on 4 May 2016
I have been trying time-series prediction using LSTMs without a great deal of success. Now, given the data, I'm not surprised if the predictions can't always be very good, but I would like to have an idea of how good each prediction is. With a categorisation problem and one output per class, a value close to 1 for a class suggests a degree of certainty, but there is no such mechanism for regression problems.
I would like my model to predict the next value and its degree of certainty.
My current approach involves adding the absolute error of each output value produced by a recent version of the model to the vector of values to predict. That way the model learns to predict the output values and their absolute errors. But that requires me to interrupt the training regularly in order to run model.predict() on the entire dataset in order to update the absolute errors - obviously this is pretty inefficient.
If I could get the actual predictions after running model.train_on_batch() I could update the absolute errors output on each training pass, but I can't see how to do it. Maybe my approach is all wrong.
Any ideas?
1