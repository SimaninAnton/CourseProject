vinayakumarr commented on 9 Apr 2017
my network is given below
1. define the network
model = Sequential()
model.add(LSTM(4,input_dim=42)) # try using a GRU instead, for fun
model.add(Dropout(0.1))
model.add(Dense(5))
model.add(Activation('softmax'))
#Taylor expansion and compute first partial derivative of the classification results
from keras import backend as K
import theano
def compile_saliency_function(model):
"""
Compiles a function to compute the saliency maps and predicted classes
for a given minibatch of input images.
"""
inp = model.layers[0].input
print("-----------------------input-----------------------------")
print(inp)
outp = model.layers[-1].output
print("-----------------------output----------------------------")
print(outp)
max_outp = K.T.max(outp, axis=1)
print(max_outp)
saliency = K.gradients(K.sum(max_outp), inp)
print(saliency)
max_class = K.T.argmax(outp, axis=1)
print(max_class)
v1 = K.function([inp, K.learning_phase()], [saliency, max_class])
return v1
print(([X_train[:20], 0])[0])
v = compile_saliency_function(model)([X_train[:5], 0])[0]
print(v)
Sailnce map gives
[[[ -8.015e-29 6.428e-28 -1.365e-29 3.198e-30 -1.229e-29 -2.009e-30
-1.273e-30 -2.512e-29 -6.153e-28 3.688e-29 2.205e-28 4.094e-28
5.667e-28 -1.401e-27 1.892e-28 5.810e-30 1.736e-29 7.379e-29
-2.122e-28 8.063e-29 3.660e-31 1.458e-31 9.196e-28 -1.335e-30
1.608e-30 -8.264e-29 -1.094e-28 1.099e-29 6.411e-30 1.134e-28
3.281e-29 3.869e-29 -1.276e-30 -9.509e-31 8.313e-29 4.073e-29
-8.345e-30 3.455e-29 -1.100e-28 -8.354e-29 -5.175e-29 1.583e-29]]
[[ -8.015e-29 6.428e-28 -1.365e-29 3.198e-30 -1.229e-29 -2.009e-30
-1.273e-30 -2.512e-29 -6.153e-28 3.688e-29 2.205e-28 4.094e-28
5.667e-28 -1.401e-27 1.892e-28 5.810e-30 1.736e-29 7.379e-29
-2.122e-28 8.063e-29 3.660e-31 1.458e-31 9.196e-28 -1.335e-30
1.608e-30 -8.264e-29 -1.094e-28 1.099e-29 6.411e-30 1.134e-28
3.281e-29 3.869e-29 -1.276e-30 -9.509e-31 8.313e-29 4.073e-29
-8.345e-30 3.455e-29 -1.100e-28 -8.354e-29 -5.175e-29 1.583e-29]]
[[ -8.015e-29 6.428e-28 -1.365e-29 3.198e-30 -1.229e-29 -2.009e-30
-1.273e-30 -2.512e-29 -6.153e-28 3.688e-29 2.205e-28 4.094e-28
5.667e-28 -1.401e-27 1.892e-28 5.810e-30 1.736e-29 7.379e-29
-2.122e-28 8.063e-29 3.660e-31 1.458e-31 9.196e-28 -1.335e-30
1.608e-30 -8.264e-29 -1.094e-28 1.099e-29 6.411e-30 1.134e-28
3.281e-29 3.869e-29 -1.276e-30 -9.509e-31 8.313e-29 4.073e-29
-8.345e-30 3.455e-29 -1.100e-28 -8.354e-29 -5.175e-29 1.583e-29]]
[[ -1.190e-28 7.039e-28 -3.475e-30 3.815e-30 -1.410e-29 -2.210e-30
-1.390e-30 -3.224e-29 -7.007e-28 3.122e-29 2.429e-28 4.564e-28
6.228e-28 -1.537e-27 1.703e-28 1.865e-29 1.983e-29 7.343e-29
-2.412e-28 7.795e-29 3.947e-31 1.972e-31 9.979e-28 -1.683e-30
1.429e-30 -1.043e-28 -1.336e-28 1.509e-29 6.298e-30 1.371e-28
4.295e-29 7.593e-29 -1.360e-30 -5.704e-31 9.312e-29 8.257e-29
-3.896e-30 4.088e-29 -1.375e-28 -1.039e-28 -6.191e-29 1.965e-29]]
[[ -1.188e-28 7.032e-28 -3.503e-30 3.810e-30 -1.408e-29 -2.208e-30
-1.388e-30 -3.220e-29 -6.999e-28 3.121e-29 2.427e-28 4.559e-28
6.221e-28 -1.535e-27 1.702e-28 1.860e-29 1.980e-29 7.337e-29
-2.409e-28 7.790e-29 3.943e-31 1.969e-31 9.969e-28 -1.681e-30
1.429e-30 -1.042e-28 -1.334e-28 1.507e-29 6.294e-30 1.369e-28
4.289e-29 7.576e-29 -1.359e-30 -5.711e-31 9.302e-29 8.237e-29
-3.906e-30 4.083e-29 -1.373e-28 -1.038e-28 -6.183e-29 1.962e-29]]]
#Visualizing the average activation values of the input features for 5 samples of class 0
def get_activations(model, layer, X_batch):
get_activations = K.function([model.layers[0].input, K.learning_phase()], model.layers[layer].output)
activations = get_activations([X_batch,0])
return activations
my_featuremaps = get_activations(model, 0, ([X_train[:5], 0])[0])
print(my_featuremaps)
np.savetxt('featuremap', my_featuremaps)
activation values
[[ 0.762 -0.122 0.044 -0.758]
[ 0.762 -0.122 0.044 -0.758]
[ 0.762 -0.122 0.044 -0.758]
[ 0.762 -0.038 0.043 -0.752]
[ 0.762 -0.038 0.043 -0.752]
[ 0.762 -0.038 0.043 -0.752]
[ 0.125 -0. 0.038 -0.083]
[ 0.762 -0.121 0.044 -0.758]
[ 0.762 -0.038 0.043 -0.752]
[ 0.762 -0.433 0.091 -0.755]]
Could you please tell that the followed methid is correct if So could you please tell how to generate the plots fig 3 fig 6 of the paper titled "Empowering Convolutional Networks for Malware
Classification and Analysis"