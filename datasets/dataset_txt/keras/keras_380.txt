nHeidelberg commented on 14 Feb 2019 â€¢
edited
Edit: The problem was just that Keras is printing a moving average of whatever the metric returns. I checked the true labels in the right way. You can notice that the formula:
is applied to each value returned. x_n is the current value and A_n is the average of n values.
While working on a semantic segmentation task, I needed to implement a custom metric instead of using accuracy. I noticed that the values are weird, so I decided to just print the maximum of my y_true tensor. My assumption is that y_true only contains the labels values.
Information:
Keras version 2.2.4 with Tensorflow backend ( v 1.12.0)
I have a mask (which is my target/y_true) of shape (batchSize, imgHeight, imgWidth, imgRegions) = (1,512,512,2) which only contains values 0 or 1 (I already check that my mask doesn't have wrong values)
Softmax is used, currently I have two classes (background and object of interest).
For debugging:
No Data Augmentation was Used
I used batch size of 1
No class weighting
I use as my metric:
def TP(y_true, y_pred):
return K.max(y_true[:,:,:,1]) + K.max(y_true[:,:,:,0])
In the training_generator.py file in Keras, line 154. I print the max value of the mask when it is fetched from the generator:
if len(generator_output) == 2:
x, y = generator_output
import numpy as np
print(' Deb ', np.max(y[:,:,:,0]) + np.max(y[:,:,:,1]))
sample_weight = None
The value is always correct (i.e the value is a whole number).
I also tried summing the y_pred tensor. It gives me a sum that equals 512*512 + eps (very small error) as expected.
I use a simple model:
My training function:
Here are the results of my training:
Did I miss something on the way I use keras for this task?