josejimenezluna commented on 1 Mar 2016
Hello, I am currently trying to build a convolutional autoencoder with Keras for 3d volumetric images with one channel only. My images are of size 10x10x10 and stored in a numpy array of shape (n_samples, 1,10, 10, 10).
The plan was to use the new 3D Convolutional layers to try to reconstruct the images. My (little) knowledge on convolutional autoencoders is that there is a convolutional encoding step (convolution and pooling layers), followed by dense layers, and then another convolutional encoding step (convolution + upsampling). However, I can not find a working example of something like this in Keras.
My network is currently defined as:
def convolutional_autoenc(boxsize = 10):
    print("Compiling convnet. Checking shape consistency.")
    model = Sequential()
    # Convolutional encoding step
    model.add(Convolution3D(32, 3, 3, 3, input_shape = (1, boxsize, boxsize, boxsize)))
    model.add(Activation(relu))
    model.add(MaxPooling3D(pool_size=(2, 2, 2)))
    model.add(Dropout(0.25))
    model.add(Convolution3D(64, 3, 3, 3))
    model.add(Activation(relu))
    model.add(MaxPooling3D(pool_size = (2, 2, 2)))
    model.add(Dropout(0.4))
    # Dense layers
    model.add(Flatten())
    model.add(Dense(256))
    model.add(Activation(relu))
    model.add(Dropout(0.5))
    model.add(Dense(256))
    model.add(Activation(relu))
    model.add(Dropout(0.4))
    model.add(Reshape((10, 10, 10)))
    # Deconvolutional decoding step
    model.add(Convolution3D(64, 3, 3, 3))
    model.add(Activation(relu))
    model.add(Dropout(0.25))
    model.add(UpSampling3D(size = (2, 2, 2)))
    model.add(Convolution3D(32, 3, 3, 3))
    model.add(Activation(linear))
    # Reshape to original shape
    model.add(Reshape((boxsize, boxsize, boxsize)))
    adam = Adam()
    model.compile(loss = 'mean_absolute_error', optimizer = adam)
    return(model)
However, this returns ValueError: total size of new array must be unchanged. I believe there is something wrong with shapes in the network definition. Can someone point out the mistakes or provide a working example of a conv autoencoder working in keras? Any help is greatly appreciated.