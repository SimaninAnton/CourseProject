HusainZafar commented on 24 Jun 2017 â€¢
edited
I am following the tutorial https://keras.io/applications for training on my dataset using the inception weights.
from keras.applications.inception_v3 import InceptionV3
from keras.preprocessing import image
from keras.models import Model
from keras.layers import Dense, GlobalAveragePooling2D
from keras import backend as K

# create the base pre-trained model
base_model = InceptionV3(weights='imagenet', include_top=False)

# add a global spatial average pooling layer
x = base_model.output
x = GlobalAveragePooling2D()(x)
# let's add a fully-connected layer
x = Dense(1024, activation='relu')(x)
# and a logistic layer -- let's say we have 200 classes
predictions = Dense(200, activation='softmax')(x)

# this is the model we will train
model = Model(inputs=base_model.input, outputs=predictions)

# first: train only the top layers (which were randomly initialized)
# i.e. freeze all convolutional InceptionV3 layers
for layer in base_model.layers:
    layer.trainable = False

# compile the model (should be done *after* setting layers to non-trainable)
model.compile(optimizer='rmsprop', loss='categorical_crossentropy')

# train the model on the new data for a few epochs
No issue till now.
After this to fit the data, I used:
from keras.preprocessing.image import ImageDataGenerator
train_data_dir = '../data/train'
validation_data_dir = '../data/validation'
nb_train_samples = 20
nb_validation_samples = 20
epochs = 20
batch_size = 10
img_width, img_height = 150, 150

train_datagen = ImageDataGenerator()
test_datagen = ImageDataGenerator()
train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='binary')

validation_generator = test_datagen.flow_from_directory(
    validation_data_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='binary')

model.fit_generator(
    train_generator,
    steps_per_epoch=nb_train_samples // batch_size,
    epochs=epochs,
    validation_data=validation_generator,
    validation_steps=nb_validation_samples // batch_size)
It gives error
ValueError: Error when checking target: expected dense_4 to have shape (None, 2) but got array with shape (10, 1)
I have also tried this, with 2 images
model.fit(X, Y, batch_size=1, epochs=2, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0)
X.shape = (2,150,150,3)
Y.shape = (2,1)
I can't understand where I am going wrong. Thank you.