yshean commented on 3 May 2017 â€¢
edited
In search of maxout layer in Keras, I could not find any which I could apply as an activation to a single layer (not a merged layer). I modified from https://github.com/philipperemy/tensorflow-maxout/blob/master/maxout.py and https://github.com/ppwwyyxx/tensorpack/blob/master/tensorpack/models/nonlin.py, then written a custom layer which can be passed to Keras model using Lambda wrapper.
def Maxout(x, num_unit=None):
    """
    Maxout as in the paper `Maxout Networks <http://arxiv.org/abs/1302.4389>`_.

    Args:
        x (tf.Tensor): a NHWC or NC tensor. Channel has to be known.
        num_unit (int): a int. Must be divisible by C.

    Returns:
        tf.Tensor: of shape NHW(C/num_unit) named ``output``.
    """
    input_shape = x.get_shape().as_list()
    ndim = len(input_shape)
    assert ndim == 4 or ndim == 2

    data_format = K.image_data_format()

    if data_format == 'channels_first':
        ch = input_shape[1]
    else:
        ch = input_shape[-1]

    if num_unit == None:
        num_unit = ch / 2
    assert ch is not None and ch % num_unit == 0

    if ndim == 4:
        if data_format == 'channels_first':
            x = K.permute_dimensions(x, (0, 2, 3, 1))
        x = K.reshape(x, (-1, input_shape[2], input_shape[3], ch / num_unit, num_unit))
        x = K.max(x, axis=3)
        if data_format == 'channels_first':
            x = K.permute_dimensions(x, (0, 3, 1, 2))
    else:
        x = K.reshape(x, (-1, ch / num_unit, num_unit))
        x = K.max(x, axis=1)

    return x
Example usage in Keras model:
conv1 = Conv2D(64, (3, 3), padding='same', name='conv1')(input_data)
conv1 = BatchNormalization(name='bn1')(conv1)
conv1 = Lambda(Maxout, name='act1')(conv1)
The model compiles and can be trained without error. (only tested with 'channel_first' so far)
Is this the right way to apply maxout to convolution layer?
3