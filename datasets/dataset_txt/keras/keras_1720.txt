Dobiasd commented on 18 Aug 2017
I accidentally managed to create a model that can be saved but not loaded.
Here is a minimal example to reproduce the problem:
from keras.models import Model, load_model
from keras.layers import Input, Dense, concatenate

input_shape = (16, 9, 3)
input_layer = Input(shape=input_shape)

dense_A = Dense(3, name='dense_A')
dense_B = Dense(3, name='dense_B')
dense_C = Dense(3, name='dense_C')

x1 = dense_B(dense_A(input_layer))
x2 = dense_A(dense_C(input_layer))
x = concatenate([x1, x2])

model = Model(inputs=input_layer, outputs=x)

model.save('model.h5')
model = load_model('model.h5')
Output:
Traceback (most recent call last):
  File "test.py", line 21, in <module>
    model = load_model('model.h5')
  File "/usr/local/lib/python3.5/dist-packages/keras/models.py", line 233, in load_model
    model = model_from_config(model_config, custom_objects=custom_objects)
  File "/usr/local/lib/python3.5/dist-packages/keras/models.py", line 307, in model_from_config
    return layer_module.deserialize(config, custom_objects=custom_objects)
  File "/usr/local/lib/python3.5/dist-packages/keras/layers/__init__.py", line 54, in deserialize
    printable_module_name='layer')
  File "/usr/local/lib/python3.5/dist-packages/keras/utils/generic_utils.py", line 139, in deserialize_keras_object
    list(custom_objects.items())))
  File "/usr/local/lib/python3.5/dist-packages/keras/engine/topology.py", line 2450, in from_config
    process_layer(layer_data)
  File "/usr/local/lib/python3.5/dist-packages/keras/engine/topology.py", line 2437, in process_layer
    raise ValueError('Missing layer: ' + inbound_layer_name)
ValueError: Missing layer: dense_C
The model itself does not make a lot of sence of course, but as far as I understand, everything that can be serialized should also be deserializable. Is this a bug?
Keras version: 2.0.6
Python version: 3.5.2
Tensorflow version: 1.2.1