hlin117 commented on 11 Mar 2016
The following code fails for pretty obvious reasons:
>>> import numpy as np
>>> from keras.models import Sequential
>>> from keras.layers.core import Dense
>>>
>>> # Very simple architecture
>>> model = Sequential()
>>> model.add(Dense(400, input_dim=400))
>>> model.compile(loss='categorical_crossentropy', optimizer='adam')
>>> 
>>> X = np.random.rand(5, 400)
>>> y = [1, -1, -1, 1, 1]
>>> model.fit(X, y)
It leaves the not-so-helpful error message (below). I'm not sure what variety of architectures Keras is expected to support, but it would be nice if a warning was thrown if the problem is a multiclass classification problem, and there is no softmax output layer (or some similar output layer).
Output message:
ValueError: Input dimension mis-match. (input[0].shape[1] = 400, input[3].shape[1] = 1)
Apply node that caused the error: Elemwise{Composite{((i0 * i1 * i2 * i3 * i4) / (i5 * i6 * i7 * i8 * i8))}}[(0, 4)](Elemwise{Composite{AND(GE(i0, i1), LE(i0, i2))}}.0, InplaceDimShuffle{x,x}.0, InplaceDimShuffle{0,x}.0, <TensorType(float32, matrix)>, Elemwise{Add}[(0, 0)].0, InplaceDimShuffle{x,x}.0, InplaceDimShuffle{x,x}.0, Elemwise{Clip}[(0, 0)].0, InplaceDimShuffle{0,x}.0)
Toposort index: 32
Inputs types: [TensorType(int8, matrix), TensorType(float32, (True, True)), TensorType(float32, col), TensorType(float32, matrix), TensorType(float32, matrix), TensorType(float32, (True, True)), TensorType(float32, (True, True)), TensorType(float32, matrix), TensorType(float32, col)]
Inputs shapes: [(5, 400), (1, 1), (5, 1), (5, 1), (5, 400), (1, 1), (1, 1), (5, 400), (5, 1)]
Inputs strides: [(400, 1), (4, 4), (4, 4), (4, 4), (1600, 4), (4, 4), (4, 4), (1600, 4), (4, 4)]
Inputs values: ['not shown', array([[ 5.]], dtype=float32), array([[ 1.],
       [ 1.],
       [ 1.],
       [ 1.],
       [ 1.]], dtype=float32), array([[-1.],
       [ 1.],
       [ 1.],
       [-1.],
       [ 1.]], dtype=float32), 'not shown', array([[ 5.]], dtype=float32), array([[ 5.]], dtype=float32), 'not shown', array([[ 15.79184151],
       [ 11.54109573],
       [  4.8348279 ],
       [ 12.4104147 ],
       [  9.79920959]], dtype=float32)]
Outputs clients: [[Sum{axis=[1], acc_dtype=float64}(Elemwise{Composite{((i0 * i1 * i2 * i3 * i4) / (i5 * i6 * i7 * i8 * i8))}}[(0, 4)].0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.