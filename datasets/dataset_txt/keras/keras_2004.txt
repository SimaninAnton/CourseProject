silentsnooc commented on 4 Jul 2017 â€¢
edited
I do not get this:
If I run the code below
def get_sample(data):
    
    while True:
        choice = np.random.choice(range(len(data)))
        x = data[choice, :2].reshape(1, -1)
        y = data[choice, 2:].reshape(1, -1)

        yield x, y

        
D = np.asarray([[0, 0, 0],
                [0, 1, 1],
                [1, 0, 1],
                [1, 1, 0]])

# D = np.vstack([D*scale for scale in [-100, -5, -1, 1, 2, 50, 100]])

in_x = Input(shape=(2,), name='input')
h = Dense(4, name='hidden', activation='tanh')(in_x)
out = Dense(1, name='output', activation='sigmoid')(h)

model = Model(input=in_x, output=out)
model.compile(optimizer='adam', loss='mse')

model.fit_generator(generator=get_sample(D), samples_per_epoch=1, nb_epoch=5000, verbose=0)

print('Training done.')

for sample in [[0, 0], [0, 1], [1, 0], [1, 1]]:
    sample = np.asarray(sample).reshape(1, -1)
    print(model.predict(sample))
I almost surely get results like this:
Training done.
[[ 0.30881071]]
[[ 0.59195447]]
[[ 0.64719379]]
[[ 0.51738912]]
However, if I run this:
in_x = Input(shape=(2,), name='input')
h = Dense(8, name='hidden', activation='tanh')(in_x)
out = Dense(1, name='output', activation='sigmoid')(h)

model = Model(input=in_x, output=out)
model.compile(optimizer='adam', loss='mse')
model.fit(D[:,:2], D[:, 2:], batch_size=1, nb_epoch=5000, verbose=0)
print('Training done.')

for sample in [[0, 0], [0, 1], [1, 0], [1, 1]]:
    sample = np.asarray(sample).reshape(1, -1)
    print(model.predict(sample))
Things look "much better", assuming we want to learn XOR:
Training done.
[[ 0.05998931]]
[[ 0.90797085]]
[[ 0.91271895]]
[[ 0.10119713]]
For some reason fit_generator() performs much weaker than fit() - but why?!