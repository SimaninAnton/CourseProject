Contributor
MartinThoma commented on 9 Feb 2017
Simple Non-working example
The following needs hasy_tools.py
#!/usr/bin/env python

from __future__ import print_function
import numpy as np
np.random.seed(1337)  # for reproducibility
import os

from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Convolution2D, MaxPooling2D
from keras.utils import np_utils
from keras.layers.advanced_activations import PReLU
from keras.optimizers import Adam
from keras import backend as K
import hasy_tools as ht

batch_size = 128
nb_epoch = 1

# input image dimensions
img_rows, img_cols = 32, 32

# the data, shuffled and split between train and test sets
dataset_path = os.path.join(os.path.expanduser("~"), 'hasy')
hasy_data = ht.load_data(normalize=True, dataset_path=dataset_path)
train_x = hasy_data['train']['X'][:10000]
train_y = hasy_data['train']['y'][:10000]
test_x = hasy_data['test']['X']
test_y = hasy_data['test']['y']

if K.image_dim_ordering() == 'th':
    train_x = train_x.reshape(train_x.shape[0], 1, img_rows, img_cols)
    test_x = test_x.reshape(test_x.shape[0], 1, img_rows, img_cols)
    input_shape = (1, img_rows, img_cols)
else:
    train_x = train_x.reshape(train_x.shape[0], img_rows, img_cols, 1)
    test_x = test_x.reshape(test_x.shape[0], img_rows, img_cols, 1)
    input_shape = (img_rows, img_cols, 1)

print('train_x shape:', train_x.shape)
print(train_x.shape[0], 'train samples')
print(test_x.shape[0], 'test samples')

# convert class vectors to binary class matrices
train_y = np_utils.to_categorical(train_y, hasy_data['n_classes'])
test_y = np_utils.to_categorical(test_y, hasy_data['n_classes'])

model = Sequential()
model.add(Convolution2D(32, 3, 3,
                        border_mode='same',
                        input_shape=input_shape),
                        activation=PReLU())  # This leads to the serialization error
model.add(Convolution2D(64, 3, 3, border_mode='same'))
model.add(PReLU())  # This works
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(1024, activation='tanh'))
model.add(Dropout(0.5))
model.add(Dense(hasy_data['n_classes'], activation='softmax'))

adam = Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-08, decay=0.0)
model.compile(loss='categorical_crossentropy',
              optimizer=adam,
              metrics=['accuracy'])

model.fit(train_x, train_y, batch_size=batch_size, nb_epoch=nb_epoch,
          verbose=1, validation_data=(test_x, test_y))
score = model.evaluate(test_x, test_y, verbose=0)
print('Test score:', score[0])
print('Test accuracy:', score[1])
model.save('my_keras_model.h5')
Error message
Traceback (most recent call last):
  File "keras_hasy.py", line 79, in <module>
    model.save('my_keras_model.h5')
  File "/home/moose/.local/lib/python2.7/site-packages/keras/engine/topology.py", line 2630, in save
    save_model(self, filepath, overwrite)
  File "/home/moose/.local/lib/python2.7/site-packages/keras/models.py", line 52, in save_model
    'config': model.get_config()
  File "/home/moose/.local/lib/python2.7/site-packages/keras/models.py", line 1031, in get_config
    'config': self.layers[0].get_config()})
  File "/home/moose/.local/lib/python2.7/site-packages/keras/layers/convolutional.py", line 491, in get_config
    'activation': self.activation.__name__,
AttributeError: 'PReLU' object has no attribute '__name__'
Version
$ python -c "import keras;print(keras.__version__)"
1.2.1
$ python -c "import tensorflow as tf;print(tf.__version__)"
0.12.1