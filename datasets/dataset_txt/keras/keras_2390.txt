XiaotaoChen commented on 14 May 2017 â€¢
edited
Hi,
I want to get the categorical_crossentropy of input array. and return its' loss in array format.
So i use K.categorical_crossentropy. its' inputs and outpus both are tensor, so i have to convert input array to tensor, and convert output tensor to array. To convert output tensor to array, I use K.eval() to get it. However,it's efficiency is getting slower and slower. i don't know why.
The code as follows:
# translate numpy.array to tensor
temp_time = time.time()
# value = temp_output_predict_on_batch  , the var is a array
temp_output_predict_on_batch = K.variable(value = temp_output_predict_on_batch)
emp1_time = time.time()
loss_predict_on_batch = K.categorical_crossentropy(temp_output_predict_on_batch, train_label_batch)
temp2_time = time.time()
# translate tensor to numpy.array
loss_array = K.eval(loss_predict_on_batch)
#del loss_predict_on_batch
temp3_time = time.time()
# get the index of desc loss
reverse_index = np.argsort(loss_array)[::-1]
temp4_time = time.time()
print('to tensor:%.4f ,get loss:%.4f ,to array:%.4f ,sort:%.4f ,total:%.4f' % (
                        temp1_time - temp_time, temp2_time - temp1_time, temp3_time - temp2_time
                        , temp4_time - temp3_time, temp4_time - temp_time))
the print info as follows
to tensor:0.0082 ,get loss:0.0131 ,to array:0.0248 ,sort:0.0001 ,total:0.0462
to tensor:0.0084 ,get loss:0.0111 ,to array:0.0664 ,sort:0.0000 ,total:0.0860
to tensor:0.0081 ,get loss:0.0152 ,to array:0.0630 ,sort:0.0000 ,total:0.0864
to tensor:0.0076 ,get loss:0.0112 ,to array:0.0772 ,sort:0.0000 ,total:0.0960
to tensor:0.0081 ,get loss:0.0127 ,to array:0.0672 ,sort:0.0000 ,total:0.0880
to tensor:0.0071 ,get loss:0.0147 ,to array:0.0667 ,sort:0.0000 ,total:0.0886
to tensor:0.0085 ,get loss:0.0151 ,to array:0.0658 ,sort:0.0000 ,total:0.0894
to tensor:0.0085 ,get loss:0.0174 ,to array:0.0743 ,sort:0.0001 ,total:0.1002
to tensor:0.0093 ,get loss:0.0161 ,to array:0.0678 ,sort:0.0000 ,total:0.0931
to tensor:0.0069 ,get loss:0.0141 ,to array:0.0614 ,sort:0.0000 ,total:0.0824
to tensor:0.0063 ,get loss:0.0123 ,to array:0.0602 ,sort:0.0000 ,total:0.0789
to tensor:0.0084 ,get loss:0.0115 ,to array:0.0602 ,sort:0.0000 ,total:0.0801
to tensor:0.0080 ,get loss:0.0117 ,to array:0.0605 ,sort:0.0000 ,total:0.0801
to tensor:0.0075 ,get loss:0.0123 ,to array:0.0614 ,sort:0.0000 ,total:0.0812

......
......
to tensor:0.0080 ,get loss:0.0142 ,to array:0.5156 ,sort:0.0000 ,total:0.5379
to tensor:0.0080 ,get loss:0.0122 ,to array:0.5122 ,sort:0.0000 ,total:0.5325
to tensor:0.0076 ,get loss:0.0112 ,to array:0.5308 ,sort:0.0000 ,total:0.5496
to tensor:0.0080 ,get loss:0.0134 ,to array:0.5232 ,sort:0.0000 ,total:0.5446
to tensor:0.0081 ,get loss:0.0124 ,to array:0.5471 ,sort:0.0000 ,total:0.5677
to tensor:0.0071 ,get loss:0.0187 ,to array:0.5533 ,sort:0.0000 ,total:0.5791
to tensor:0.0082 ,get loss:0.0133 ,to array:0.6719 ,sort:0.0000 ,total:0.6935
to tensor:0.0090 ,get loss:0.0189 ,to array:0.6521 ,sort:0.0000 ,total:0.6801
to tensor:0.0083 ,get loss:0.0121 ,to array:0.6251 ,sort:0.0000 ,total:0.6456
to tensor:0.0084 ,get loss:0.0153 ,to array:0.6579 ,sort:0.0001 ,total:0.6817
to tensor:0.0083 ,get loss:0.0102 ,to array:0.6375 ,sort:0.0000 ,total:0.6560
to tensor:0.0063 ,get loss:0.0105 ,to array:0.5913 ,sort:0.0000 ,total:0.6081
to tensor:0.0063 ,get loss:0.0146 ,to array:0.5131 ,sort:0.0000 ,total:0.5340
to tensor:0.0052 ,get loss:0.0151 ,to array:0.5550 ,sort:0.0000 ,total:0.5754
to tensor:0.0087 ,get loss:0.0147 ,to array:0.6065 ,sort:0.0000 ,total:0.6299