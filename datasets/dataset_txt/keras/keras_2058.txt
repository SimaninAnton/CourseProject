Contributor
keunwoochoi commented on 27 Jun 2017
Related to #3921 and maybe more, I think we need a template for merge layer (this page)[https://keras.io/layers/merge/} (probably @fchollet should put some input on it?) and few examples that I can work in after understanding things clear.
Why documentation?
Because we need to inform how to import merge layers. Otherwise,
>>> import keras.layers.merge
>>> merge.Add
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'merge' is not defined

>>> import keras.layers.merge.Add
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: No module named Add

# It should be like this
>>> from keras.layers.merge import Add
# and are we supposed to know this? maybe I'm lack of something on Python conventions in general? Anyway it would help. 
Also I think we need to make it clear that it's about dealing with Tensors and not layers which is already done in the docstrings but not really in the documentation -- it's outdated though.
>>> print keras.layers.merge.__doc__
Functional merge, to apply to Keras tensors (NOT layers).
    Returns a Keras tensor.
    # Example
    ```python
    tensor_a = Input(shape=(32,))
    tensor_b = Input(shape=(32,))
    merged_tensor = merge([tensor_a, tensor_b], mode='concat', concat_axis=1)
    ```
    # Arguments
        mode: String or lambda/function. If string, must be one
            of: 'sum', 'mul', 'concat', 'ave', 'cos', 'dot', 'max'.
            If lambda/function, it should take as input a list of tensors
            and return a single tensor.
        concat_axis: Integer, axis to use in mode `concat`.
        dot_axes: Integer or tuple of integers,
            axes to use in mode `dot` or `cos`.
        output_shape: Shape tuple (tuple of integers), or lambda/function
            to compute output_shape (only if merge mode is a lambda/function).
            If the latter case, it should take as input a list of shape tuples
            (1:1 mapping to input tensors) and return a single shape tuple,
            including the batch size
            (same convention as the `compute_output_shape` method of layers).
        node_indices: Optional list of integers containing
            the output node index for each input layer
            (in case some input layers have multiple output nodes).
            will default to an array of 0s if not provided.
        tensor_indices: Optional list of indices of output tensors
            to consider for merging
            (in case some input layer node returns multiple tensors).
Examples
Just to show clearly that how to do it with
tensors within a simple functional model
maybe how to use them with Sequential models?
2