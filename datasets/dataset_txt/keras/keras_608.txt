jimmy15923 commented on 22 Nov 2018 â€¢
edited
I was trying to get the images/sec from training Keras model.
import numpy as np
import tensorflow as tf

x = np.random.randint(0, 1, size=(512, 224, 224, 3))
y = np.random.randint(0, 1000, size=512)
y = tf.keras.utils.to_categorical(y, 1000)

model = tf.keras.applications.resnet50.ResNet50(input_shape=(224, 224, 3), weights=None)
model.compile(loss='categorical_crossentropy', optimizer=tf.keras.optimizers.Adam())

res = model.fit(x, y, batch_size=128, epochs=10)
As code above, I used 128 batch size to fit into model. So there should be 4 steps to complete one epochs. To the best of my knowledge, one step means update weights by one batch of data. But figure below shows that one step only cost 5ms, which means the training speed of my model is (128 / 0.005) images/sec = 25,600 images/sec (unreasonable number).
The model takes about 3 sec to finish an epoch, so the time/step should be 3/4 = 0.75s?
It looks like 5ms / step represent that an image took 5ms to train. Is that correct?