Panache1 commented on 12 Feb 2017 â€¢
edited
Please make sure that the boxes below are checked before you submit your issue. If your issue is an implementation question, please ask your question on StackOverflow or join the Keras Slack channel and ask there instead of filing a GitHub issue.
Thank you!
Check that you are up-to-date with the master branch of Keras. You can update with:
pip install git+git://github.com/fchollet/keras.git --upgrade --no-deps
If running on TensorFlow, check that you are up-to-date with the latest version. The installation instructions can be found here.
If running on Theano, check that you are up-to-date with the master branch of Theano. You can update with:
pip install git+git://github.com/Theano/Theano.git --upgrade --no-deps
Provide a link to a GitHub Gist of a Python script that can reproduce your issue (or just copy the script here if it is short).
When I norm my data in the range of -0.25 to 0.25, the accuracy, both during fitting and using model.evaluate, is 0. When I use the results from model.predict, the accuracy is approximately 1. If I norm my data in the range of -1 to 1, accuracy returns the expected value of 1.
I initially thought this might be a problem with mean_squared_error, but I get the same result using mean_absolute_error.
import numpy as np
from numpy.random import choice
from keras.layers import Dense
from keras.layers import LSTM
from keras.models import Sequential

batch_size = 2 
N_train = 100
N_test = 10

# CREATE SOME RANDOM DATA
X_train = np.ones((N_train, 2))
X_test = np.ones((N_test, 2))
y_train = np.ones((N_train, 1))
y_test = np.ones((N_test, 1))
one_indexes = choice(a=N_train, size=int(N_train / 2), replace=False)
X_train[one_indexes, 0] = -1
y_train[one_indexes] = -1
one_indexes = choice(a=N_test, size=int(N_test / 2), replace=False)
X_test[one_indexes, 0] = -1
y_test[one_indexes] = -1

# NORM THE DATA IN THE RANGE OF  -0.25 to 0.25      
### THIS IS WHAT CAUSES THE PROBLEM ###      
X_train *= 0.25
y_train *= 0.25
X_test *= 0.25
y_test *= 0.25      

X_train = np.expand_dims(X_train, axis=2)
X_test = np.expand_dims(X_test, axis=2)

# CREATE THE MODEL
model = Sequential()
model.add(LSTM(8, input_shape=(2, 1), return_sequences=False))
model.add(Dense(1, activation='tanh'))

model.compile(loss='mean_absolute_error', optimizer='adam', metrics=['accuracy'])

model.fit(X_train, y_train, batch_size=batch_size, nb_epoch=100)

# EVALUATE THE MODEL ON THE TEST DATA
score, acc = model.evaluate(X_test, y_test, batch_size=batch_size, verbose=0)
print()
print('Evaluate accuracy:', acc)
print()

# PREDICT THE MODEL ON THE TEST DATA
yFit = model.predict(X_test, batch_size=batch_size)

error = 0    
print('Prediction/Actual')
for c in range(X_test.shape[0]):
    error += yFit[c, 0] - y_test[c, 0]
    print(str(yFit[c]) + '  ' + str(y_test[c]))

error = abs(error)
print()
print('Predict error: ', error)
print('Predict accuracy: ', (1 - error))
``