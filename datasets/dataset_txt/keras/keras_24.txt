bckpkol commented on 13 Nov 2019 â€¢
edited
OS: Ubuntu Server 18.04, with xanmod kernel
Python: Anaconda 3.7
Tensorflow: 2.0.0 MKL
Keras: TF built-in
CPU: Intel(R) Core(TM)2 Quad CPU Q9300
No GPU
model.fit works as expected
import numpy as np
import tensorflow.keras as keras
from tensorflow.keras.layers import *
from tensorflow.keras.models import Model
from tensorflow.keras.regularizers import l2
from tensorflow.keras import optimizers
from tensorflow.keras import backend as K
import time, itertools, random

def makeModel(arch, constructor, name):
    inputs = Input(arch)
    model = Model(inputs, constructor(inputs), name=name)
    try:
        model.load_weights("%s.h5"%name)
    except:
        print("new %s"%name)
    return model

def saveModel(model):
    model.save_weights("%s.h5"%model.name)

def g():
    return l2(.00001)

def sr2x(obj):
    for i in range(4):
        obj = Conv1D(96, 1, activation='tanh', kernel_initializer='he_uniform', kernel_regularizer=g(), bias_regularizer=g())(obj)
        obj = GaussianNoise(.001)(obj)
    obj = Conv1D(96, 1, kernel_initializer='he_uniform', kernel_regularizer=g(), bias_regularizer=g())(obj)
    obj = Lambda(lambda x: K.sum(x, axis=1))(obj)
    obj = Reshape((3, 32))(obj)
    obj = Activation("softmax")(obj)
    return obj

sr = makeModel((None, 5,), sr2x, "sr2x")
sr.summary()
sr.compile(optimizer=optimizers.Adam(.00001), loss='categorical_crossentropy', metrics=['categorical_accuracy'])
i = 0

data = np.mgrid[0:32, 0:32, 0:32].T.reshape(-1, 3)
inp = np.dstack(((np.exp(np.float32(data[:, None])*.1789)-1.0)/255.0, np.zeros((len(data), 1, 2), dtype=np.float32)))
out = keras.utils.to_categorical(data, 32)

print(inp.shape, out.shape)

class MyCallback(keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs=None):
        saveModel(sr)

try:
    sr.fit(inp, out, 32, epochs=100, callbacks=[MyCallback()])
except KeyboardInterrupt:
    print("one second...")
    time.sleep(1)
    print("saving...")
saveModel(sr)
print("saved...")
model.fit_generator is 16x slower. No I/O is performed. My tests show 60000hz minimum performance outside keras.
import numpy as np
import tensorflow.keras as keras
from tensorflow.keras.layers import *
from tensorflow.keras.models import Model
from tensorflow.keras.regularizers import l2
from tensorflow.keras import optimizers
from tensorflow.keras import backend as K
import time, itertools, random

def makeModel(arch, constructor, name):
    inputs = Input(arch)
    model = Model(inputs, constructor(inputs), name=name)
    try:
        model.load_weights("%s.h5"%name)
    except:
        print("new %s"%name)
    return model

def saveModel(model):
    model.save_weights("%s.h5"%model.name)

def g():
    return l2(.00001)

def sr2x(obj):
    for i in range(4):
        obj = Conv1D(96, 1, activation='tanh', kernel_initializer='he_uniform', kernel_regularizer=g(), bias_regularizer=g())(obj)
        obj = GaussianNoise(.001)(obj)
    obj = Conv1D(96, 1, kernel_initializer='he_uniform', kernel_regularizer=g(), bias_regularizer=g())(obj)
    obj = Lambda(lambda x: K.sum(x, axis=1))(obj)
    obj = Reshape((3, 32))(obj)
    obj = Activation("softmax")(obj)
    return obj

sr = makeModel((None, 5,), sr2x, "sr2x")
sr.summary()
sr.compile(optimizer=optimizers.Adam(.00001), loss='categorical_crossentropy', metrics=['categorical_accuracy'])
i = 0



def sampler():
    data = np.mgrid[0:32, 0:32, 0:32].T.reshape(-1, 3)
    inp = np.dstack(((np.exp(np.float32(data[:, None])*.1789)-1.0)/255.0, np.zeros((len(data), 1, 2), dtype=np.float32)))
    out = keras.utils.to_categorical(data, 32)
    rg = np.arange(len(inp), dtype=np.uint32)
    while True:
        np.random.shuffle(rg)
        inpc = inp[rg]
        outc = out[rg]
        for i in range(0, len(rg), 32):
            yield inpc[i:i+32], outc[i:i+32]

class MyCallback(keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs=None):
        saveModel(sr)

try:
    sr.fit_generator(sampler(), steps_per_epoch=1024, epochs=100, callbacks=[MyCallback()])
except KeyboardInterrupt:
    print("one second...")
    time.sleep(1)
    print("saving...")
saveModel(sr)
print("saved...")
Edit: fixed the bug. Data was not shuffled properly.