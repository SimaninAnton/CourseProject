lhl881210 commented on 13 Jul 2017 â€¢
edited
Hi, guys and @fchollet
I have a problem of K.gradients() when I made a model by functional API.
I want to get the gradient "grads =K.gradients(loss, conv_output)[0]".
However, when I printed "grads ", it showed me "None".
img_shape = (114, 180, 3)
input=(Input(shape=img_shape, name='image_input'))
CNN=VGG16(include_top=False, input_shape=img_shape)(input)
CNN=((Flatten()))(CNN)
CNN=(Activation('relu'))(CNN)
CNN= ((Dense(1000)))(CNN)
CNN=((Activation('relu')))(CNN)
CNN=((Dense(10)))(CNN)
output=((Activation('sigmoid')))(CNN)
model=Model(input,output)
model.summary()
loss =model.layers[-1].output
conv_output = [l for l in model.layers[1].layers if l.name is 'block5_conv3'][0].output
print("loss")
print(loss)
print("conv_output")
print(conv_output)
grads =K.gradients(loss, conv_output)[0]
print("grads")
print(grads)
I still tried the sequential model.
model=Sequential()
model.add(VGG16(include_top=False, input_shape=img_shape))
model.add((Flatten()))
model.add(Activation('relu'))
model.add ((Dense(1000)))
model.add((Activation('relu')))
model.add((Dense(10)))
model.add((Activation('sigmoid')))
loss =model.layers[-1].output
conv_output = [l for l in model.layers[0].layers[0].layers if l.name is 'block5_conv3'][0].output
print("loss")
print(loss)
print("conv_output")
print(conv_output)
grads =K.gradients(loss, conv_output)[0]
print("grads")
print(grads)
It showed me the "grads" was "Tensor("gradients/block5_pool/MaxPool_grad/MaxPoolGrad:0", shape=(?, 7, 11, 512), dtype=float32)".
So, why does the functional model cannot get the gradient but sequential model can?