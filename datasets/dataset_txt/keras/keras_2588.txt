se210 commented on 21 Apr 2017 â€¢
edited
The code below throws error for unknown dimension. Since UpSampling1D is repeating each element 'size' times along axis 1, I thought it should be able to handle unknown length sequences.
I have a time sequence of 2D vector with an unknown length. I wanted to perform a time convolution on the sequence to extract some features over the 2D vector's time trajectory, and classify based on these features. Since the classification needs to be done on a per-sample basis, I upsample back to the original length via UpSampling1D.
Is there something wrong with the way I am using this or is there a bug? Thank you for an amazing platform.
I am using the latest version of Keras from GitHub, and Tensorflow-GPU 1.0.1.
x = Input(shape=(None, 2,))

y = x
y = Conv1D(32, 3, activation='relu', padding='causal')(y)
y = Conv1D(32, 3, activation='relu', padding='causal')(y)
y = MaxPooling1D(pool_size=2, strides=2)(y)

# Upsample back so output length matches input length
y = UpSampling1D(size=8)(y)

# Classification
y = TimeDistributed(Dense(128, activation='relu'))(y)
y = TimeDistributed(Dense(6, activation='softmax', name='predictions'))(y)

model = Model(inputs=x, outputs=y)
ValueError: Axis 1 of input tensor should have a defined dimension, but is None. Full tensor shape: (None, None, 32). Typically you need to pass a fully-defined input_shape argument to your first layer."