cottrell commented on 11 Mar 2019
In the docs section: https://keras.io/getting-started/functional-api-guide/#multi-input-and-multi-output-models
The example is either incomplete or wrong. The following complete example that generates data fails. Examples, should be complete with random data.
import numpy as np
from tensorflow import keras 
from tensorflow.keras.layers import Input, Embedding, LSTM, Dense
from tensorflow.keras.models import Model

# Headline input: meant to receive sequences of 100 integers, between 1 and 10000.
# Note that we can name any layer by passing it a "name" argument.
main_input = Input(shape=(100,), dtype='float32', name='main_input')

# This embedding layer will encode the input sequence
# into a sequence of dense 512-dimensional vectors.
x = Embedding(output_dim=512, input_dim=10000, input_length=100)(main_input)

# A LSTM will transform the vector sequence into a single vector,
# containing information about the entire sequence
lstm_out = LSTM(32)(x)
auxiliary_output = Dense(1, activation='sigmoid', name='aux_output')(lstm_out)

auxiliary_input = Input(shape=(5,), name='aux_input')
x = keras.layers.concatenate([lstm_out, auxiliary_input])

# We stack a deep densely-connected network on top
x = Dense(64, activation='relu')(x)
x = Dense(64, activation='relu')(x)
x = Dense(64, activation='relu')(x)

# And finally we add the main logistic regression layer
main_output = Dense(1, activation='sigmoid', name='main_output')(x)

model = Model(inputs=[main_input, auxiliary_input], outputs=[main_output, auxiliary_output])

X = np.random.randn(12, 100)
Z = np.random.randn(1, 5, 1)

model.predict({'main_input': X, 'aux_input': Z})
ValueError: Error when checking input: expected aux_input to have 2 dimensions, but got array with shape (1, 5, 1)
I can update the docs if someone knows the correction.