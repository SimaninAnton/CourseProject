cjmcmurtrie commented on 22 Aug 2015
I am researching a sequence-to-sequence SL/NLP task, and for now I am attempting a regression (i.e. I'm not predicting labels, but trying to map sequences of vectors of continuous real values from between -1,1, to vectors with continuous values between 0,1).
I should probably explore the source code and answer my own question, but is the accuracy measure outputted by .fit relevant to this task? I know that accuracy is usually used to evaluate classification,
accuracy = correct predictions / total predictions
But in my case, since the values are continuous, I don't see how this applies? My model is now outputting very low accuracy values for mapping sequences of 50-dimensional vectors to sequences of 20-dimensional vectors, even with a hidden size of 1028:
model = Sequential()
model.add(LSTM(embedding_size, hidden_size, init=initi))
model.add(Dense(hidden_size, hidden_size, init=initi))
model.add(Activation('relu'))
model.add(Dense(hidden_size, hidden_size, init=initi))
model.add(Activation('relu'))
model.add(RepeatVector(maxlen))
model.add(LSTM(hidden_size, hidden_size, return_sequences=True, init=initi))
model.add(TimeDistributedDense(hidden_size, output_size, activation='softmax', init=initi))

model.compile(loss=loss, optimizer = optim)
So my question is, is my approach to the task wrong, or is the model working correctly and the accuracy measure just not relevant to the task? The model is in fact predicting vectors of 20 dimensions, with values between 0,1, and which add to 1, just like my training labels.
Thank you (in particular, thanks to fchollet for being so diligent with this forum!).