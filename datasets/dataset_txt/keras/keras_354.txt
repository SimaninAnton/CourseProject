pachpandepriti commented on 7 Mar 2019 â€¢
edited
input_signal = Input(shape=(M,))
print("input_signal",input_signal.shape)
encoded = Dense(M, activation='relu')(input_signal)
print("encoded",encoded.shape)
encoded1 = Dense(n_channel, activation='linear')(encoded)
print("encoded1",encoded1.shape)
encoded2 =Lambda(lambda x: np.sqrt(n_channel)*K.l2_normalize(x,axis=1))(encoded1)
print("normalize",encoded2.shape)
encode_complex=Lambda(complex_symbols)(encoded2)
print("complex_symbols",encode_complex.shape)
encode_reshape = Reshape((-1,16))(encode_complex)
ValueError Traceback (most recent call last)
in ()
21
22
---> 23 encode_reshape = Reshape((-1,16))(encode_complex)
24
25 # print("encoded_reshape",encoded_reshape)
~\AppData\Local\Continuum\anaconda3\lib\site-packages\keras\engine\base_layer.py in call(self, inputs, **kwargs)
472 if all([s is not None
473 for s in to_list(input_shape)]):
--> 474 output_shape = self.compute_output_shape(input_shape)
475 else:
476 if isinstance(input_shape, list):
~\AppData\Local\Continuum\anaconda3\lib\site-packages\keras\layers\core.py in compute_output_shape(self, input_shape)
396 # input shape known? then we can compute the output shape
397 return (input_shape[0],) + self._fix_unknown_dimension(
--> 398 input_shape[1:], self.target_shape)
399
400 def call(self, inputs):
~\AppData\Local\Continuum\anaconda3\lib\site-packages\keras\layers\core.py in _fix_unknown_dimension(self, input_shape, output_shape)
381 if unknown is not None:
382 if known == 0 or original % known != 0:
--> 383 raise ValueError(msg)
384 output_shape[unknown] = original // known
385 elif original != known:
ValueError: total size of new array must be unchanged