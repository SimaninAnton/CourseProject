makai281 commented on 30 Nov 2016 â€¢
edited
I want to write my own keras layer with taking as input a tensor with shape (nb_batch, input_dim) and producing a tensor with shape (nb_batch, length_of_senquence, output_dim) . I have write a demo below:
`class MyLayer(Layer):
def init(self, output_dim, context_size, init="uniform", **kwargs):
self.output_dim = output_dim
self.context_size = context_size
self.init = initializations.get(init)
super(MyLayer, self).init(**kwargs)
def build(self, input_shape):
    input_dim = input_shape[1]
    self.W_vec = self.init(
        (self.context_size, input_dim, self.output_dim),
        name="W_vec")

    self.trainable_weights = [self.W_vec]
    super(MyLayer, self).build()  # be sure you call this somewhere!

def call(self, x, mask=None):
    return K.dot(x, self.W_vec)
    # return K.dot(x, self.W)

def get_output_shape_for(self, input_shape):
    return (input_shape[0], self.context_size, self.output_dim)`
when I ran it , got a error "TypeError: build() takes exactly 2 arguments (1 given)"
Please make sure that the boxes below are checked before you submit your issue. Thank you!
Check that you are up-to-date with the master branch of Keras. You can update with:
pip install git+git://github.com/fchollet/keras.git --upgrade --no-deps
If running on Theano, check that you are up-to-date with the master branch of Theano. You can update with:
pip install git+git://github.com/Theano/Theano.git --upgrade --no-deps
Provide a link to a GitHub Gist of a Python script that can reproduce your issue (or just copy the script here if it is short).