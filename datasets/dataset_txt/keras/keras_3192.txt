wenouyang commented on 16 Feb 2017
Hi, I have been experimenting the u-net code . It works fine. In order to let the trained network to be able to predict the images with different size, I changed the input layer from inputs = Input((1, img_rows, img_cols)) to inputs = Input((1, None, None)) . However, it gives the following error message
Traceback (most recent call last):
  File "train-unet-v3b.py", line 113, in <module>
    train_and_predict()
  File "train-unet-v3b.py", line 96, in train_and_predict
    model = get_unet()
  File "train-unet-v3b.py", line 54, in get_unet
    up6 = merge([UpSampling2D(size=(2, 2))(conv5), conv4], mode='concat', concat_axis=1)
  File "/development/gtfw/lib/python3.4/site-packages/Keras-1.0.3-py3.4.egg/keras/engine/topology.py", line 485, in __call__
    self.add_inbound_node(inbound_layers, node_indices, tensor_indices)
  File "/development/gtfw/lib/python3.4/site-packages/Keras-1.0.3-py3.4.egg/keras/engine/topology.py", line 543, in add_inbound_node
    Node.create_node(self, inbound_layers, node_indices, tensor_indices)
  File "/development/gtfw/lib/python3.4/site-packages/Keras-1.0.3-py3.4.egg/keras/engine/topology.py", line 148, in create_node
    output_tensors = to_list(outbound_layer.call(input_tensors[0], mask=input_masks[0]))
  File "/development/gtfw/lib/python3.4/site-packages/Keras-1.0.3-py3.4.egg/keras/layers/convolutional.py", line 1043, in call
    self.dim_ordering)
  File "/development/gtfw/lib/python3.4/site-packages/Keras-1.0.3-py3.4.egg/keras/backend/tensorflow_backend.py", line 508, in resize_images
    X.set_shape((None, None, original_shape[2] * height_factor, original_shape[3] * width_factor))
TypeError: unsupported operand type(s) for *: 'NoneType' and 'int'
What's the right way to let the u-net or FCN type of training to be able to handle images with diffferent sizes.
1