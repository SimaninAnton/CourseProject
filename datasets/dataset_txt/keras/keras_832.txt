Contributor
arquolo commented on 6 Aug 2018 â€¢
edited
When model.fit_generator is used with workers=0 and subclasses of keras.utils.data_utils.Sequence for both training and validation data, API of Sequence is not recognized inside evaluate_generator, it raises:
  File ".../keras/legacy/interfaces.py", line 91, in wrapper
    return func(*args, **kwargs)
  File ".../keras/engine/training.py", line 1415, in fit_generator
    initial_epoch=initial_epoch)
  File ".../keras/engine/training_generator.py", line 230, in fit_generator
    validation_steps,
  File ".../keras/legacy/interfaces.py", line 91, in wrapper
    return func(*args, **kwargs)
  File ".../keras/engine/training.py", line 1469, in evaluate_generator
    verbose=verbose)
  File ".../keras/engine/training_generator.py", line 298, in evaluate_generator
    else:
ValueError: `steps=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `steps` or use the `keras.utils.Sequence` class.
Example code:
from keras import Sequential
from keras.layers import Dense
from keras.utils.data_utils import Sequence
import numpy as np

class Dataset(Sequence):
    def __getitem__(self, index):
        return np.random.uniform(size=(16, 8)), np.random.uniform(size=(16, 1))
    def __len__(self):
        return 128

model = Sequential([Dense(4, activation='relu', input_shape=(8,)),
                    Dense(1, activation='sigmoid')])
model.compile(loss='mse', optimizer='adam')
model.fit_generator(generator=Dataset(), validation_data=Dataset(),
                    workers=0)
Issue can be fixed here by replacing:
if isinstance(val_data, Sequence):
    val_enqueuer_gen = iter(val_data)
with
if isinstance(val_data, Sequence):
    val_enqueuer_gen = iter(val_data)
    validation_steps = len(val_data)
3