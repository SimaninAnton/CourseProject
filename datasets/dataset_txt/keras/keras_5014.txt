Contributor
matthewmok commented on 7 Jun 2016 â€¢
edited
Hi,
I am trying to implement the local contrast normalization with a lambda layer in Keras.
I am trying to create a custom "pooling" function and then create a lambda layer on top of it but having a hard time implementing it. The pseudo-code of the function is like this:
def lcn(x):
    current_pixel = (some pooling function that will return the center element of the window)
    mu = sum pooling (x)
    sigma = sqrt (sum pooling (x - mu))
    big_c = 1
    return (current_pixel - mu)/(sigma + big_c)
But I am not sure how to create a custom function that will return the center value of the window (for finding the current pixel) and creating a sum pooling (thought of using average pooling built in Keras but since it excludes padding and it is more complicated by simply multiplying the output of an average pooling by the size of the window). I tried to implemented a sum pooling using theano but I am not sure if it is correct or not.
def sum_pool2d(x, strides = (7,7)):
    stride_win_size = strides[0] * strides[1]
    sum_x = T.pool.pool_2d(x, (1,1), st = strides, mode = 'average_inc_pad')
    sum_x *= stride_win_size
    return sum_x
Any help will be appreciated.
Thanks!