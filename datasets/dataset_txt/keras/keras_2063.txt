Contributor
jorgecarleitao commented on 26 Jun 2017
Consider the following piece of code, with Tensorflow or Theano backend:
import json
from keras.layers import Conv2D
from keras.models import Sequential


def define_and_serialize(input_shape):
    model = Sequential()
    model.add(Conv2D(16, (3, 3), activation='relu', input_shape=input_shape))
    model.add(Conv2D(32, (3, 3)))

    return json.dumps(model.get_config(), sort_keys=True) # sort_keys since it is an unsorted dict

assert (define_and_serialize((28, 28, 128)) == define_and_serialize((28, 28, 128))) # RAISES
I.e. the models are not serializable (e.g. hash()) does not work. This contradicts the documentation of get_config
A layer config is a Python dictionary (serializable) containing the configuration of a layer.
The reason is that we are using a global counter to construct the layer's names (through keras.backend.get_uid(prefix)) that is added for every layer that is initialized (bad!).
For the user, a solution is to always name all layers (and thus not call get_uid to construct names).
For Keras, IMO this is an issue because it is unexpected, and an anti-pattern. This can be solved by putting the counter on the model, instead of a global.