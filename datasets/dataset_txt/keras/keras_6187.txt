Contributor
stevenxxiu commented on 30 Dec 2015
I often find that I need a graph model due to moving the input to 2 separate layers and merging them back down the track, despite most of the model being sequential in nature.
I think this leads to a lot of unnecessary naming of layers, and the syntax is more convoluted coming from lasagne. Would it be possible to just use the previously added node if the name is not given? Say the following model:
graph = Graph()
graph.add_input(name='input', input_shape=(32,))

graph.add_node(Dense(16), name='dense1', input='input')
graph.add_node(Dense(4), name='dense2', input='dense1')

graph.add_node(Dense(16), name='dense3', input='input')
graph.add_node(Dense(4), name='dense4', input='dense3')

graph.add_node(Dense(4), name='dense5', inputs=['dense2', 'dense4'])
graph.add_node(Dense(4), name='dense6', input='dense5')
graph.add_node(Dense(4), name='dense7', input='dense6')
graph.add_output(name='output', input='dense5')
Could be written instead as:
graph = Graph()
graph.add_input(name='input', input_shape=(32,))

graph.add_node(Dense(16), input='input')
graph.add_node(Dense(4), name='dense2')

graph.add_node(Dense(16), input='input')
graph.add_node(Dense(4), name='dense4')

graph.add_node(Dense(4), inputs=['dense2', 'dense4'])
graph.add_node(Dense(4))
graph.add_node(Dense(4))
graph.add_output(name='output')
This is more like the lasagne style where a layers which don't need to be referneced later on can just use a generic layer name l, but in keras perhaps some unique internal name could be used.