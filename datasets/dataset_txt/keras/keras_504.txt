mha-py commented on 27 Dec 2018 â€¢
edited
Hi!
I would like to adapt the adam routine (to effectively compute larger batches than fit into the vram), but theres something in the get_updates routine that i really do not get....
The code in sgd for example is is:
        shapes = [K.int_shape(p) for p in params]
        moments = [K.zeros(shape) for shape in shapes]      ### moments are set zero
        self.weights = [self.iterations] + moments
        for p, g, m in zip(params, grads, moments):         ### m loops over all moments
            v = self.momentum * m - lr * g  # velocity      ### m is read out? why when its zero?
            self.updates.append(K.update(m, v))             ### m will be updated but never read out?
            if self.nesterov:
                new_p = p + self.momentum * v - lr * g
            else:
                new_p = p + v
            # Apply constraints.
            if getattr(p, 'constraint', None) is not None:
                new_p = p.constraint(new_p)
        self.updates.append(K.update(p, new_p))
It looks like the variables in "momentum" (in the for loop "m") are initiated as zero each time the function is called. Then the new momentum "v" is put into "m", but in the value is thrown away next time. I dont get it, really.... Could someone enlight me? I feel like a newbie...