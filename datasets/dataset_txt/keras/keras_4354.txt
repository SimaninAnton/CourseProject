AntreasAntoniou commented on 19 Sep 2016 â€¢
edited
Please make sure that the boxes below are checked before you submit your issue. Thank you!
Check that you are up-to-date with the master branch of Keras. You can update with:
pip install git+git://github.com/fchollet/keras.git --upgrade --no-deps
If running on Theano, check that you are up-to-date with the master branch of Theano. You can update with:
pip install git+git://github.com/Theano/Theano.git --upgrade --no-deps
Provide a link to a GitHub Gist of a Python script that can reproduce your issue (or just copy the script here if it is short).
So I have this model, upon compilation I get
Using Theano backend. /usr/local/lib/python2.7/dist-packages/Keras-1.0.7-py2.7.egg/keras/engine/topology.py:1655: UserWarning: Model inputs must come from a Keras Input layer, they cannot be the output of a previous non-Input layer. Here, a tensor specified as input to "model_1" was not an Input tensor, it was generated by layer timedistributed_1. Note that input tensors are instantiated viatensor = Input(shape). The tensor that caused the issue was: None str(x.name)) Traceback (most recent call last): File "/home/ubuntumax/keras_egg_code/train.py", line 89, in <module> training_function() File "/home/ubuntumax/keras_egg_code/train.py", line 54, in training_function lstm_model = build_model() File "/home/ubuntumax/keras_egg_code/train.py", line 32, in build_model model = Model(input=main_input, output=main_loss) File "/usr/local/lib/python2.7/dist-packages/Keras-1.0.7-py2.7.egg/keras/engine/topology.py", line 1837, in __init__ str(layers_with_complete_input)) Exception: Graph disconnected: cannot obtain value for tensor main_input at layer "main_input". The following previous layers were accessed without issue: []
Any suggestions on what is going wrong?
Thanks
    main_input = Input(shape=(240000, 16, 1), name='main_input')
    vision_model = Sequential()
    vision_model.add(Convolution1D(16, 1, activation='relu', border_mode='same', input_shape=(16, 1)))
    vision_model.add(MaxPooling1D(2, 2))
    vision_model.add(Convolution1D(16, 16, activation='relu', border_mode='same'))
    vision_model.add(MaxPooling1D(2, 2))
    vision_model.add(Convolution1D(8, 32, activation='relu', border_mode='same'))
    vision_model.add(MaxPooling1D(2, 2))
    vision_model.add(Convolution1D(4, 64, activation='relu', border_mode='same'))
    vision_model.add(MaxPooling1D(2, 2))
    vision_model.add(Flatten())

    main_input = TimeDistributed(vision_model)(main_input)
    x = LSTM(output_dim=512, return_sequences=True)(main_input)
    x = LSTM(output_dim=64)(x)
    main_loss = Dense(1, activation='sigmoid', name='main_output')(x)
    model = Model(input=main_input, output=main_loss)
    model.compile(optimizer='rmsprop', loss='mse')
    print(model.summary())