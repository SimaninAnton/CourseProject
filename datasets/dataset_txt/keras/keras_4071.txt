JimBiardCics commented on 26 Oct 2016
The KerasClassifier class implements a get_params method that is required for use as a scikit-learn estimator. The method has an argument named deep, which is intended to indicate whether or not the parameters for contained sub-objects should be returned along with the parameters for the top-level object. The KerasClassifier get_params method is, instead, calling copy.deepcopy() on the member params dictionary and returning the result. It does this no matter what the value of the 'deep' argument.
The deep copy does not extract any sub-object parameters to include in the parameter dictionary that is returned. It does, however, cause the scikit-learn clone function to issue a warning and/or throw an exception. The warning is issued if (for example) one of the parameters is a simple numeric list. The exception is issued if (for example) one of the parameters is a callback object. The problem arises because sanity checks in the clone function fail when complex elements such as lists or objects have been deep copied.
So the problem has two parts:
The get_params method does not perform as intended when the deep argument is set to True.
The deep copy action taken by the get_params method produces potentially fatal problems within the scikit-learn clone function.
It is likely that a KerasClassifier object has no need for the 'deep' behavior, as all parameters should already be in the top-level sk_params dictionary. And as the scikit-learn clone function creates new instances of all lists and objects, the copy.deepcopy call is not needed. A shallow copy should be sufficient.
2