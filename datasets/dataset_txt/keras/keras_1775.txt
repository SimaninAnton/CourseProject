Contributor
hgaiser commented on 9 Aug 2017
I am trying to do something like this:
import keras

inputs         = keras.layers.Input((1,))
outputs        = keras.layers.Lambda(lambda x: x*x)(inputs)
model_a        = keras.models.Model(inputs=inputs, outputs=outputs)
model_a_output = model_a(inputs)

outputs_b = keras.layers.Lambda(lambda x: x*x, input_shape=(1,))(inputs)
model_b   = keras.models.Model(inputs=model_a_output, outputs=outputs_b)
This would allow me to abstract my entire model into smaller submodels. Executing the above code gives me the following error:
Using TensorFlow backend.
/home/hgaiser/.local/lib/python3.6/site-packages/keras/engine/topology.py:1562: UserWarning: Model inputs must come from a Keras Input layer, they cannot be the output of a previous non-Input layer. Here, a tensor specified as input to "model_2" was not an Input tensor, it was generated by layer model_1.
Note that input tensors are instantiated via `tensor = Input(shape)`.
The tensor that caused the issue was: model_1/lambda_1/mul:0
  str(x.name))
Traceback (most recent call last):
  File "/tmp/test.py", line 9, in <module>
    model_b   = keras.models.Model(inputs=model_a_output, outputs=outputs_b)
  File "/home/hgaiser/.local/lib/python3.6/site-packages/keras/legacy/interfaces.py", line 87, in wrapper
    return func(*args, **kwargs)
  File "/home/hgaiser/.local/lib/python3.6/site-packages/keras/engine/topology.py", line 1601, in __init__
    assert node_index == 0
AssertionError
In other words it seems like a Model can only have Input as input and not the output of another Model. Is this by design? I can see the value in allowing Models to be concatenated like this.