yuzeh commented on 14 Jun 2018
Hi,
I'm training a model for a regression problem, using mean_absolute_error as the loss function.
In addition, I'm reporting a metric that I've created called m70, which is exactly the MAE, but multiplied by 70. Here is the implementation:
from keras.losses import mean_absolute_error

def m70(y_true, y_pred):
  return 70 * mean_absolute_error(y_true, y_pred)
As the model is training, both numbers are being reported. However, they don't match, i.e. the value for m70 is not exactly 70x the value for mean_absolute_error:
4833/4833 [==============================] - 154s - loss: 0.9524 - m70: 14.2387 - val_loss: 0.3981 - val_m70: 2.3467
Epoch 2/50
4833/4833 [==============================] - 150s - loss: 0.3722 - m70: 11.4197 - val_loss: 0.1585 - val_m70: 3.5608
Epoch 3/50
4833/4833 [==============================] - 150s - loss: 0.2093 - m70: 9.8485 - val_loss: 0.1041 - val_m70: 4.7139
Epoch 4/50
4833/4833 [==============================] - 150s - loss: 0.1407 - m70: 8.1068 - val_loss: 0.1429 - val_m70: 8.9124
Epoch 5/50
4833/4833 [==============================] - 150s - loss: 0.1154 - m70: 7.1234 - val_loss: 0.0673 - val_m70: 3.7899
Epoch 6/50
4833/4833 [==============================] - 149s - loss: 0.0944 - m70: 5.6597 - val_loss: 0.1121 - val_m70: 7.2456
notice:
14.2387 / 0.9524 = 14.950336
11.4197 / 0.3722 = 30.6816228
9.8485 / 0.2093 = 47.0544673
8.1068 / 0.1407 = 57.6176262
7.1234 / 0.1154 = 61.7279029
5.6597 / 0.0944 = 59.9544492
I'd expect all of the values above to be 70. Why is this not the case? The only reason I can imagine is that loss and m70 are not evaluated at the same time on the same exact minibatch of data.
FWIW, I'm using:
In [1]: import keras
Using TensorFlow backend.
keras.__vers
In [2]: keras.__version__
Out[2]: '2.0.6'

In [3]: import tensorflow

In [4]: tensorflow.__version__
Out[4]: '1.2.1'