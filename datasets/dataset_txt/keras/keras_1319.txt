RA19 commented on 18 Jan 2018
I am trying a simple model, which consists of two separate inputs (each with two different embedded inputs). The problem is a toy scenario which forms the framework of a more complex system i need to create with multiple inputs and multple embeddings, however i need to get this basic system working. I have no problem using multiple embeddings in the one input case, it is only when i try using multiple inputs that i get the follow error:
main:1: UserWarning: The merge function is deprecated and will be removed after 08/2017. Use instead layers from keras.layers.merge, e.g. add, concatenate, etc.
/services/tools/anaconda3/4.0.0/lib/python3.5/site-packages/keras/legacy/layers.py:460: UserWarning: The Merge layer is deprecated and will be removed after 08/2017. Use instead layers from keras.layers.merge, e.g. add, concatenate, etc.
name=name)
Traceback (most recent call last):
File "", line 3, in
model = Model(inputs=[[q1 ,q2],[q3 , q4]], outputs=MC_MergeOut)
File "/services/tools/anaconda3/4.0.0/lib/python3.5/site-packages/keras/legacy/interfaces.py", line 88, in wrapper
return func(*args, **kwargs)
File "/services/tools/anaconda3/4.0.0/lib/python3.5/site-packages/keras/engine/topology.py", line 1485, in init
inputs_set = set(self.inputs)
TypeError: unhashable type: 'list'
Has anyone tried multi-input and multiple embeddings for each input? Any help would be greatly appreciated as i'm on a time deadline. Thanks in advance
# Embedding Input1
name='ques1'
q1 = Input(shape=(1,), dtype='int32',name=name+'_in')
q1_out = Embedding(input_dim=32, output_dim=10, input_length=1)(q1)
# Embedding Input2
name='ques2'
q2  = Input(shape=(1,), dtype='int32',name=name+'_in')
q2_out  = Embedding(input_dim=64, output_dim=10, input_length=1)(q2)
# MODEL A
A = merge([q1_out ,q2_out ], mode='concat',concat_axis=1)
A = Dropout(0.05)(A)
A = Dense(32,activation='relu', init='uniform')(A)

# Embedding Input2
name='ques3'
q3 = Input(shape=(1,), dtype='int32',name=name+'_in')
q3_out = Embedding(input_dim=48, output_dim=10, input_length=1)(q3)
# Embedding Input3
name='ques4'
q4  = Input(shape=(1,), dtype='int32',name=name+'_in')
q4_out  = Embedding(input_dim=12, output_dim=10, input_length=1)(q4)
# MODEL B
B  = merge([q3_out ,q4_out ], mode='concat',concat_axis=1)
B  = Dropout(0.05)(B)
B  = Dense(32,activation='relu', init='uniform')(B )


MC_MergeOut = merge([A, B], mode='cos', dot_axes=1) # dot_axes

model = Model(inputs=[[q1 ,q2],[q3 , q4]], outputs=MC_MergeOut)
model.compile(optimizer='rmsprop', loss='binary_crossentropy')