pkmital commented on 17 Dec 2015
Hi, I may be doing something very stupid, but it doesn't seem like I can add a BatchNormalization layer after adding a Convolution2D layer, whenever subsampling is > 1 and border_mode is same.
In [35]: model = Sequential()

In [36]: model.add(Convolution2D(64, 7, 7, input_shape=(1, 64, 64)))

In [37]: model.add(BatchNormalization())

In [38]: model = Sequential()

In [39]: model.add(Convolution2D(64, 7, 7, input_shape=(1, 64, 64), border_mode='same'))

In [40]: model.add(BatchNormalization())

In [41]: model = Sequential()

In [42]: model.add(Convolution2D(64, 7, 7, input_shape=(1, 64, 64), border_mode='same', subsample=(2, 2)))

In [43]: model.add(BatchNormalization())
---------------------------------------------------------------------------
AssertionError                            Traceback (most recent call last)
<ipython-input-43-2fa34d952967> in <module>()
----> 1 model.add(BatchNormalization())

/usr/local/lib/python3.5/site-packages/keras/layers/containers.py in add(self, layer)
     66         self.layers.append(layer)
     67         if len(self.layers) > 1:
---> 68             self.layers[-1].set_previous(self.layers[-2])
     69             if not hasattr(self.layers[0], 'input'):
     70                 self.set_input()

/usr/local/lib/python3.5/site-packages/keras/layers/core.py in set_previous(self, layer, connection_map)
     85             assert self.supports_masked_input(), "Cannot connect non-masking layer to layer with masked output"
     86         self.previous = layer
---> 87         self.build()
     88
     89     def build(self):

/usr/local/lib/python3.5/site-packages/keras/layers/normalization.py in build(self)
     51
     52         # initialize self.updates: batch mean/std computation
---> 53         X = self.get_input(train=True)
     54         m = K.mean(X, axis=0)
     55         std = K.mean(K.square(X - m) + self.epsilon, axis=0)

/usr/local/lib/python3.5/site-packages/keras/layers/core.py in get_input(self, train)
    155                 if previous_layer_id in self.layer_cache:
    156                     return self.layer_cache[previous_layer_id]
--> 157             previous_output = self.previous.get_output(train=train)
    158             if hasattr(self, 'layer_cache') and self.cache_enabled:
    159                 previous_layer_id = '%s_%s' % (id(self.previous), train)

/usr/local/lib/python3.5/site-packages/keras/layers/convolutional.py in get_output(self, train)
    314                             dim_ordering=self.dim_ordering,
    315                             image_shape=self.input_shape,
--> 316                             filter_shape=self.W_shape)
    317         if self.dim_ordering == 'th':
    318             output = conv_out + K.reshape(self.b, (1, self.nb_filter, 1, 1))

/usr/local/lib/python3.5/site-packages/keras/backend/theano_backend.py in conv2d(x, kernel, strides, border_mode, dim_ordering, image_shape, filter_shape)
    540     if _on_gpu() and dnn.dnn_available():
    541         if border_mode == 'same':
--> 542             assert(strides == (1, 1))
    543             np_kernel = kernel.eval()
    544             pad_x = (np_kernel.shape[2] - strides[0]) // 2

AssertionError:

In [44]: model = Sequential()

In [45]: model.add(Convolution2D(64, 7, 7, input_shape=(1, 64, 64), border_mode='valid', subsample=(2, 2)))

In [46]: model.add(BatchNormalization())
Any ideas? Thanks!