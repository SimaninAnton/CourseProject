bruceweir commented on 2 Aug 2017
When generating a pydot representation of a compiled Keras model using
model_to_dot(model, show_shapes=False, show_layer_names=True, rankdir='TB')
in vis_utils.py, it would be useful to be able to also see the name of the activation function that is being applied to each output.
This is the sort of change that I have in mind (I havent tested it, but it just checks for the presence of an 'activation' attribute and appends that to the output label if it finds one):
def model_to_dot(model,
             show_shapes=False,
             show_layer_names=True,
             rankdir='TB'):
"""Convert a Keras model to dot format.

# Arguments
    model: A Keras model instance.
    show_shapes: whether to display shape information.
    show_layer_names: whether to display layer names.
    rankdir: `rankdir` argument passed to PyDot,
        a string specifying the format of the plot:
        'TB' creates a vertical plot;
        'LR' creates a horizontal plot.

# Returns
    A `pydot.Dot` instance representing the Keras model.
"""
from ..layers.wrappers import Wrapper
from ..models import Sequential

_check_pydot()
dot = pydot.Dot()
dot.set('rankdir', rankdir)
dot.set('concentrate', True)
dot.set_node_defaults(shape='record')

if isinstance(model, Sequential):
    if not model.built:
        model.build()
    model = model.model
layers = model.layers

# Create graph nodes.
for layer in layers:
    layer_id = str(id(layer))

    # Append a wrapped layer's label to node's label, if it exists.
    layer_name = layer.name
    class_name = layer.__class__.__name__
    if isinstance(layer, Wrapper):
        layer_name = '{}({})'.format(layer_name, layer.layer.name)
        child_class_name = layer.layer.__class__.__name__
        class_name = '{}({})'.format(class_name, child_class_name)

    # Create node's label.
    if show_layer_names:
        label = '{}: {}'.format(layer_name, class_name)
    else:
        label = class_name

    # Rebuild the label as a table including input/output shapes.
    if show_shapes:
        try:
            outputlabels = str(layer.output_shape)
        except AttributeError:
            outputlabels = 'multiple'
        #******************CHANGE HERE******************
        if hasattr(layer, 'activation'):
            outputlabels = outputlabels + ' (' + layer.activation.__name__ + ')'
        #******************TO HERE************************
        if hasattr(layer, 'input_shape'):
            inputlabels = str(layer.input_shape)
        elif hasattr(layer, 'input_shapes'):
            inputlabels = ', '.join(
                [str(ishape) for ishape in layer.input_shapes])
        else:
            inputlabels = 'multiple'
        label = '%s\n|{input:|output:}|{{%s}|{%s}}' % (label,
                                                       inputlabels,
                                                       outputlabels)
    node = pydot.Node(layer_id, label=label)
    dot.add_node(node)

# Connect nodes with edges.
for layer in layers:
    layer_id = str(id(layer))
    for i, node in enumerate(layer.inbound_nodes):
        node_key = layer.name + '_ib-' + str(i)
        if node_key in model.container_nodes:
            for inbound_layer in node.inbound_layers:
                inbound_layer_id = str(id(inbound_layer))
                layer_id = str(id(layer))
                dot.add_edge(pydot.Edge(inbound_layer_id, layer_id))
return dot