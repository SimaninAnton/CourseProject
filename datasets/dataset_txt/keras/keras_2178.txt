zeka0 commented on 10 Jun 2017
I attempt to build a 'ThresholdLayer' that changes input data to 0 and 1 depending on the threshold.
The threshold is a trainable Tensorflow Variable.
However I'm getting weird results, please help!
import pickle
import tensorflow as tf
import numpy as np
import keras
from keras.layers import Lambda
from keras import losses, activations, optimizers, initializers
from keras.models import *
from keras.engine.topology import Layer

sess = tf.Session()

with open(r'E:\VirtualDesktop\pandas\planet\pkl\predict.pkl', 'rb') as f:
    data = pickle.load(f)
with open(r'E:\VirtualDesktop\pandas\planet\pkl\geological_tags.pkl', 'rb') as f:
    target = pickle.load(f)
target = target[:data.shape[0]]
input_shape = data.shape[1:]
input_layer = Input(shape=input_shape)

threshold = tf.Variable(initial_value=0.2, trainable=True)
class ThresholdLayer(Layer):
    def __init__(self, **kwargs):
        super(ThresholdLayer, self).__init__(**kwargs)

    def build(self, input_shape):
        # Create a trainable weight variable for this layer.
        self.kernel = self.add_weight(name='threshold', shape=(1,), initializer=initializers.constant(0.2))
        super(ThresholdLayer, self).build(input_shape)  # Be sure to call this somewhere!

    def call(self, x):
        ge = tf.greater_equal(x, self.kernel)
        return tf.where(ge, x=tf.ones_like(x), y=tf.zeros_like(x))

    def compute_output_shape(self, input_shape):
        return input_shape

x = ThresholdLayer()(input_layer)

model = Model(inputs=input_layer, outputs=x)
model.compile(optimizer=optimizers.SGD(), loss=losses.MSE)

model.fit(data, target, batch_size=10, nb_epoch=1, verbose=True, shuffle=True)

print(sess.run(threshold))
1