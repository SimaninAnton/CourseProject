MRLoghmani commented on 5 May 2016
Hi,
I wanted to know if some of you knows about some keras functionality which allows a real-time time series classification with RNNs. I will try to explain what I mean.
Let's say I trained my model and I saved both the architecture and the weights so that I'm ready to use it for classification in my application. Since I have a Softmax activation in the last layer I basically get a confidence rate for the classification and I want to stop when it goes above a certain value (let's say 0.7). In practice I have a banch of data that are arriving at (more or less) regular intervals and each of those data can be considered as a time step of my time series. I want simply to load my model and pass to it, as input, each time step as soon as it arrives and I want the net "to be aware" that are part of the same time series. I could overcome the problem by stacking the time steps and give them all to the net as soon as a new time step is available, but this solution is not really elegant and it's also computationally inefficient. Do you undertand my problem? Do you have any solution for that?
I post here the architecture of my network just for sake of clearness:
model = Sequential()

model.add(GRU(hidden_neurons_1, input_dim=in_neurons, return_sequences=True))
model.add(Dropout(0.2))
model.add(GRU(hidden_neurons_2, return_sequences=True))
model.add(Dropout(0.2))
model.add(TimeDistributed(Dense(out_neurons, activation = 'softmax')))

model.compile( loss = 'mse', optimizer = 'rmsprop',  metrics=["accuracy"])