maxbry commented on 30 Apr 2016 â€¢
edited
It is common to use a structure like this when working with encoder-decoder networks:
output = GRU(hidden_size, dropout_W=dropout, dropout_U=dropout, return_sequences=False)(input)
output = RepeatVector(10)(output)
What this does is returning the last state of the GRU (X[:, -1, :]). What I want is to not get the last state for every batch entry but to get the state at different timesteps for each batch entry. I tried this:
indexes = Input((None,) dtype='int32')
output = GRU(hidden_size, dropout_W=dropout, dropout_U=dropout, return_sequences=True)(input)
output = output[:, indexes, :]
output = RepeatVector(10)(output)
This is what I get:
Exception: Input 0 is incompatible with layer repeatvector_1: expected ndim=2, found ndim=3
What do I have to change to create a two-dimensional object?