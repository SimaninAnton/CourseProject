leebecker commented on 19 Apr 2017 â€¢
edited
Expected behaviors for keras.preprocessing.text.Tokenizer when char_level is set to True are not clear from the documentation nor the organization of the APIs. For example the following yields an index with uppercase letters even though the flags suggest it should be only lowercase.
tokenizer = keras.preprocessing.text.Tokenizer(char_level=True, lower=True)
tokenizer.fit_on_texts(['ABCD', 'abcd'])
# tokenizer.word_count will be: {'A': 1, 'B': 1, 'C': 1, 'D': 1, 'a': 1, 'b': 1, 'c': 1, 'd': 1}
Looking at the source code, it appears that none of the other Tokenizer flags have influence when char_level is True. This pushes the extra preprocessing back onto the caller.
This issue can be resolved by either:
Better documenting these limitations
Adding the functionality to Tokenizer
Splitting char_level functionality into a separate class called CharacterTokenizer.
I consider option 3 to be the cleanest for making clear the APIs behavior.