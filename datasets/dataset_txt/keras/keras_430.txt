penseeartificielle commented on 21 Jan 2019
I was trying to write a simple CNN in keras during a course, and I wrote one that does not learn at all, but I don't understand why.
Don't bother about the coding, first I load two images of a dog and one of a cat :
img1 = np.array(Image.open('dog1.jpg').convert('L'))
img2 = np.array(Image.open('dog2.jpg').convert('L'))
img3 = np.array(Image.open('dog3.jpg').convert('L'))
img4 = np.array(Image.open('cat1.png').convert('L').resize((225,225)))

X = np.array([img1.reshape(1,225,225),img2.reshape(1,225,225),img4.reshape(1,225,225)])
y = np.array([np.array([1,0]),np.array([1,0]),np.array([0,1])])
then I define the CNN model :
model = Sequential()
model.add(Conv2D(96, (11, 11), input_shape=(1, 225, 225), activation='relu'))
model.add(MaxPooling2D(pool_size=(3, 3),strides=2))
model.add(Flatten())
model.add(Dense(2,activation='relu'))
and then I train the CNN model :
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(X,y,epochs=5)

model.predict(img3.reshape(1,1,225,225))
I always get the following for the training (even for epochs=100) :
Epoch 1/5
3/3 [==============================] - 2s 778ms/step - loss: 5.3727 - acc: 0.6667
Epoch 2/5
3/3 [==============================] - 2s 645ms/step - loss: 5.3727 - acc: 0.6667
Epoch 3/5
3/3 [==============================] - 2s 649ms/step - loss: 5.3727 - acc: 0.6667
Epoch 4/5
3/3 [==============================] - 2s 640ms/step - loss: 5.3727 - acc: 0.6667
Epoch 5/5
3/3 [==============================] - 2s 777ms/step - loss: 5.3727 - acc: 0.6667
and for the predict, sometimes I have values (always before the training) but often I have (always after the training) :
array([[nan, nan]], dtype=float32)
So my questions are : why does my CNN not learn at all ? And why do I end up with "nan" after learning but have none before (probably due to "no normalization", but it does not seem to learn so...) ?