CreativePao commented on 25 May 2017 â€¢
edited
I try to train a multi-labels classifier, I used sigmoid units in the output layer and then use "binary_crossentrpy" loss. Current problem is the results of the training and testing were ideal, values of loss and accuracy were great.But when I used model.predict() predicted label, the output don't match the real label value. How to change code to solve it? The shape of the training set and testing set is (-1, 1, 300, 300), the shape of the target label is (-1, 478), I have 478 in total.
My complete code:
import numpy as np
from keras.models import Sequential
from keras.layers import Dense, Activation, Conv2D, MaxPooling2D,Dropout, Flatten
from keras.optimizers import Adam

X = np.load('./data/X_train.npy')
y = np.load('./data/Y_train.npy')
X_train, y_train = X[:8000], y[:8000]
X_test, y_test = X[8000:], y[8000:]

model = Sequential()

model.add(Conv2D(input_shape=(1, 300, 300), padding='same', filters=32, kernel_size=(300, 5)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(1, 2), padding='same'))

model.add(Flatten())
model.add(Dense(2048))
model.add(Activation('relu'))
model.add(Dense(100))
model.add(Activation('sigmoid'))
model.compile(optimizer=Adam(lr=1e-4), loss='binary_crossentropy', metrics=['accuracy'])

print('\nTraining ------------')
model.fit(X_train, y_train, epochs=2, batch_size=100, verbose=1)
model.save('model.h5')
Could you help me to find a solution? Thanks!