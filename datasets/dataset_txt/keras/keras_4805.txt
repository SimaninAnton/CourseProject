mhubrich commented on 9 Jul 2016 â€¢
edited
Hello,
At the moment, I deal with a strange problem. I've trained a model for several epochs and saved its weights. Now, I want to load/restore this model and make some predictions, i.e. feed the network with some images. But every time I load my model and use its predict() function, the result is different. Here is an example:
# Load model 1
model1 = load_model('/path/to/weights')
model1.compile(loss='categorical_crossentropy', optimizer='sgd', metrics=['accuracy'])
# Load model 2
model2 = load_model('/path/to/weights')
model2.compile(loss='categorical_crossentropy', optimizer='sgd', metrics=['accuracy'])
# Note: both models are exactly the same, having the same weights (since they are restored from the same file)
img = Image.open('/path/to/image')
img = img.convert('RGB')
x = np.asarray(img, dtype='float32')
x = x.transpose(2, 0, 1)
x = np.expand_dims(x, axis=0)
out1 = model1.predict(x)
print(np.argmax(out1))
0
out2 = model2.predict(x)
print(np.argmax(out2))
9
Where load_model() builds the model and loads the weights, as you can see here.
I have checked that model1 and model2 have exactly the same weights. Also, I have run this on GPU but CPU as well (using Theano as backend).
So, how is it possible that the same model generates two different predictions for the same image? By the way, I get the same results if I use the function evaluate().