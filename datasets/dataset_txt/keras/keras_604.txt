ParikhKadam commented on 22 Nov 2018
I am currently stuck at a problem. I need to create a temporary variable (of tensor type) for holding values when my custom layer is processing the input. The problem is, the layer gets its inputs in a batch. Batch size is variable. Also, one other dimension of the input is variable which will be provided at the time of running the model.
So, how can I create a tensor of variable dimension every time for a new input. Surely there is a way to do this because built-in layers also take input as a batch whose size is variable and also the shape of output tensor varies as it outputs the whole processed batch. But I don't know how to do it.
Here's the piece of my code:
similarity_matrix = K.zeros(shape=(int_shape(context_vectors)[0], int_shape(context_vectors)[1], int_shape(query_vectors)[1]), dtype='float32')
for i, context_vector in enumerate(modified_context_vectors):
    for j, query_vector in enumerate(modified_query_vectors):
        concatenated_vector = concatenate_and_multiply(context_vector, query_vector)
        result = dot(concatenated_vector, self.kernel)
        similarity_matrix[:, i, j] = result
return similarity_matrix
Here, context_vectors and query_vectors are of shape (None, None, 600). The first dimension is batch_size which is same for both. The second dimension is the number of words in context and query and hence will differ for both.
The problem in the code is, K.zeros() throws an error which says that it cannot work with 'None' in the shape.