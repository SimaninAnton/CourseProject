ameliusg commented on 31 Oct 2016 â€¢
edited
Hi,
I'm trying to use an image classifier to detect the angle of a single object. The object looks like a "C", i.e., a circle with a gap, but its orientation and size is unknown.
The way I'm approaching this is by training with 8 different classes, one class for each range of angles. So, class0:0-45 degrees, class1:45-90 degrees, etcetera.
For angles in the middle of the range, everything is working. For example, for 22.5 degrees (which is in the middle of the 0-45 degrees range), the output is very close to [1,0,0,0,0,0,0,0,0], which is perfect.
I was hoping that after training I could get a good approximation of the in-between angles. For example, I was hoping that 45 degrees would map to [0.5, 0.5,0, 0,0,0,0,0] output, but this is not the case.
So now I'm wondering what could be wrong. One thing is that I'm training with 0/1 vectors (this is how the Keras framework presents input to the network), whereas I should be training with floating point vectors. Is there some way to do this easily?
Also, is there a methodological flaw in my approach? I've searched around and I couldn't find any examples of what I'm trying to do.
By the way, I'm using the code/classifier described here: https://blog.keras.io/building-powerful-image-classification-models-using-very-little-data.html, but I've changed it to use 8 classes, and softmax output, and I've removed the shearing and resizing. Also I have plenty of training and validation data, since I'm generating the images from code (currently using 1000 images per class, so 8000 in total for training).
Thanks alot in advance,
Am.