codeheadshopon commented on 4 Apr 2017 â€¢
edited
I want to calculate gradient for two images euclidian distance. This is the code I wrote.
``def calculateDistance(i1, i2):
return np.sum((i1-i2)**2)
input_dim=784
img_1=cv2.imread('Good.jpg')
img_2=cv2.imread('Bad.png')
img_1=cv2.cvtColor(img_1,cv2.COLOR_BGR2GRAY)
img_2=cv2.cvtColor(img_2,cv2.COLOR_BGR2GRAY)
i1=np.asarray(img_1)
i2=np.asarray(img_2)
GoodImage=i1
BadImage=i2
i1=i1.reshape(1,784)
i2=i2.reshape(1,784)
print('Previous Euclidian Distance-',calculateDistance(i1,i2))
''' Gradient Descent '''
input_a = Input(shape=(input_dim,))
input_b = Input(shape=(input_dim,))
Output=K.sum(K.sqrt(K.pow((input_a-input_b),2))) # K.sum for converting to scalar
grad = K.gradients( Output, [input_a])
iterate = K.function([input_a, input_b], grad)
grad_value = iterate( [i2,i1])
i2=i2
print('New Euclidian Distance -', calculateDistance(i1,i2))
i2=i2.reshape(28,28)
grad_value=np.asarray(grad_value)
grad_value=grad_value.reshape(28,28)'
`
Now, after the gradient descent the gradient values contain 'NaN' values. Both my image vectors are in float32 format. So there shouldn't be any data type mismatch.