javiercorrea commented on 3 May 2017
I created a model with some shared layers (a Dense in the example) and use an add layer, it fails to load_model. This is an example:
from keras.models import Model, load_model
from keras.layers import Dense, Input, add 
x = Input(shape=(100,))
y = x 
weights = Dense(100)
for _ in range(5):
    yp = weights(y)
    y = add([yp, y]) 
model = Model(x, y)
model.save('test.h5')
model2 = load_model('test.h5')
that fails with:
Using TensorFlow backend.
Traceback (most recent call last):
  File "test.py", line 16, in <module>
    model2 = load_model('test.h5')
  File "/home/javier/.local/lib/python3.5/site-packages/keras/models.py", line 240, in load_model
    model = model_from_config(model_config, custom_objects=custom_objects)
  File "/home/javier/.local/lib/python3.5/site-packages/keras/models.py", line 304, in model_from_config
    return layer_module.deserialize(config, custom_objects=custom_objects)
  File "/home/javier/.local/lib/python3.5/site-packages/keras/layers/__init__.py", line 54, in deserialize
    printable_module_name='layer')
  File "/home/javier/.local/lib/python3.5/site-packages/keras/utils/generic_utils.py", line 140, in deserialize_keras_object
    list(custom_objects.items())))
  File "/home/javier/.local/lib/python3.5/site-packages/keras/engine/topology.py", line 2416, in from_config
    process_layer(layer_data)
  File "/home/javier/.local/lib/python3.5/site-packages/keras/engine/topology.py", line 2403, in process_layer
    raise ValueError('Missing layer: ' + inbound_layer_name)}
 ValueError: Missing layer: add_1
2