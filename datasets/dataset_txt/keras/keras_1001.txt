ivan-marroquin commented on 1 Jun 2018 â€¢
edited
Hi everybody,
I have a windows laptop with the following configuration:
windows 7
Quadro M3000M video card
cuda 9.0 and its respective cuDNN library
conda 5 with Theano 0.9.0, Tensorflow-gpu 1.8.0, Keras 2.1.6
I have a simple MLP network to trian, here is snip of the code:
n_step= np.round(parameters['step'],3)
n_hidden= np.int(parameters['number_neurons'])
n_bias= np.round(parameters['bias'],3)
n_batch= np.int(parameters['batch'])
network_1= Sequential()

network_1.add(Dense(4, input_dim= 4, activation= 'linear', kernel_initializer= 'glorot_normal',
                    bias_initializer= 'zeros'))
network_1.add(Dense(n_hidden, activation= 'tanh', kernel_initializer= 'he_normal',
                    bias_initializer= Constant(n_bias)))
network_1.add(Dense(3, activation= 'softmax', kernel_initializer= 'he_normal',
                    bias_initializer= 'zeros'))

sgd= SGD(lr= n_step, decay= 0., momentum= 0., nesterov= False)

network_1.compile(loss= 'binary_crossentropy', optimizer= sgd)

network_1.fit(xtrain_data_1_T60, enc_ytrain_data_1_T60, epochs= 100, batch_size= n_batch, verbose= 0,
              validation_data= (xvalidation_data_1_V40, enc_yvalidation_data_1_V40), shuffle= True)

prediction_1= network_1.predict(xvalidation_data_1_V40).argmax(axis= 1) + 1

# Only check for prediction results with 3 lithofacies. Otherwise, I assign a dummy error and accuracy
if len(np.unique(prediction_1)) == 3:
    error= 1. - metrics.recall_score(yvalidation_data_1_V40, prediction_1, average= 'micro')
    accuracy= metrics.accuracy_score(yvalidation_data_1_V40, prediction_1)
else:
    error= 3
    accuracy= 0.00
as part of training\validation MLP network, I also used Hyperopt library to find the best hyperparameters configuration.
The input data are just ASCII files with limited number of samples. The only modifications that I do when running the script are the following:
a) Tensorflow backend --> comment out the lines: import theano & theano.config.floatX= 'float32'. Then, I configured the keras.json file to use "tensorflow"
b) Theano backend --> comment out the lines: from tensorflow import set_random_seed & set_random_seed(1969). Then, I configured the keras.json file to use "theano"
The running time comparison on GPU:
a) if I use Theano backend, the script takes ~ 20 minutes
b) if I use Tensorflow backend, the script takes ~ 115 minutes
Browsing on internet, I found that Tensorflow may be a bit slower than Theano. But, I did not expect Tensorflow backend to be so slow.
Any suggestions to improve running time?
ps: I attached the script and input data for further reference.
Many thanks,
Ivan
Please make sure that the boxes below are checked before you submit your issue. If your issue is an implementation question, please ask your question on StackOverflow or join the Keras Slack channel and ask there instead of filing a GitHub issue.
Thank you!
Check that you are up-to-date with the master branch of Keras. You can update with:
pip install git+git://github.com/keras-team/keras.git --upgrade --no-deps
If running on TensorFlow, check that you are up-to-date with the latest version. The installation instructions can be found here.
If running on Theano, check that you are up-to-date with the master branch of Theano. You can update with:
pip install git+git://github.com/Theano/Theano.git --upgrade --no-deps
Provide a link to a GitHub Gist of a Python script that can reproduce your issue (or just copy the script here if it is short).