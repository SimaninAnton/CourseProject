Vatshank commented on 14 Apr 2016
After upgrading to 1.0.0, model.save_weights is failing with the following trace (worked with the last version) -
ValueError                                Traceback (most recent call last)
<ipython-input-65-16f4937d2aed> in <module>()
----> 1 model_binary.save_weights("test_weights.h5")

/usr/local/lib/python2.7/site-packages/keras/engine/topology.pyc in save_weights(self, filepath, overwrite)
   2244                     name = 'param_' + str(i)
   2245                 weight_names.append(name.encode('utf8'))
-> 2246             g.attrs['weight_names'] = weight_names
   2247             for name, val in zip(weight_names, weight_values):
   2248                 param_dset = g.create_dataset(name, val.shape,

h5py/_objects.pyx in h5py._objects.with_phil.wrapper (/tmp/pip-build-bnlpcl/h5py/h5py/_objects.c:2574)()

h5py/_objects.pyx in h5py._objects.with_phil.wrapper (/tmp/pip-build-bnlpcl/h5py/h5py/_objects.c:2533)()

/usr/local/lib/python2.7/site-packages/h5py/_hl/attrs.pyc in __setitem__(self, name, value)
     85         use the methods create() and modify().
     86         """
---> 87         self.create(name, data=value, dtype=base.guess_dtype(value))
     88 
     89     @with_phil

/usr/local/lib/python2.7/site-packages/h5py/_hl/attrs.pyc in create(self, name, data, shape, dtype)
    167                 htype2 = None
    168 
--> 169             space = h5s.create_simple(shape)
    170 
    171             # This mess exists because you can't overwrite attributes in HDF5.

h5py/_objects.pyx in h5py._objects.with_phil.wrapper (/tmp/pip-build-bnlpcl/h5py/h5py/_objects.c:2574)()

h5py/_objects.pyx in h5py._objects.with_phil.wrapper (/tmp/pip-build-bnlpcl/h5py/h5py/_objects.c:2533)()

h5py/h5s.pyx in h5py.h5s.create_simple (/tmp/pip-build-bnlpcl/h5py/h5py/h5s.c:1432)()

ValueError: Zero sized dimension for non-unlimited dimension (Zero sized dimension for non-unlimited dimension)
I create a pyramidal architecture using the following snippet -
def deep_net(max_features, num_classes, num_layers=2, layer_shrinkage=0.1, dropout=0.5):
    """
    Returns a compiled deep net model based on hyperparameters passed to the function.
    """

    model = Sequential()
    prev_layer_size = max_features
    for i in range(num_layers):
        curr_layer_size = int(layer_shrinkage*prev_layer_size)
        model.add(Dense(curr_layer_size, input_shape=(prev_layer_size,), init='glorot_normal'))
        model.add(Activation('relu'))
        model.add(Dropout(dropout))
        prev_layer_size = curr_layer_size

    model.add(Dense(num_classes))
    model.add(Activation('softmax'))

    print("Compiling model")
    # model.compile(loss='categorical_crossentropy', optimizer='adam')
    # Version 1.0 compatible
    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

    return model
and fit is called as history_binary = model_binary.fit(X_train_binary_pca, y_train_binary_one_hot, nb_epoch=nb_epoch, batch_size=batch_size, verbose=1)
Thanks!