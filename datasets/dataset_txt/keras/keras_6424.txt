deepim commented on 17 Nov 2015
Hi All
I'm new to Keras. but this is indeed an amazing framework. Thanks to you all!
Due to hardware(RAM) limitation, I cannot load all training data to RAM. so I have to do batch training.
After initial investigation of tickets here. seems I can do batch trainings in following two ways. but I'm not sure whether one of them is preferred. so any comment is welcome if you guys have similar situation. thanks !
1, using train_on_batch
    model = self.createLSTM()   #define my own model
    nb_epoch = 50
    batch_size = 128

    for e in range(nb_epoch):
        self.logger.info("Epoch:%d" % (e+1))
        for idx, f in enumerate(vlist):               
            samples, labels = self.loadData(f)  #large training data 3-4G each 
            nb_batch = len(samples)/batch_size
            for idy in xrange(nb_batch):
                start = idy * batch_size
                if idy == nb_batch - 1:
                    end = len(samples)
                else:
                    end = start + batch_size

                batch_samples = samples[start:end,:]
                batch_labels = labels[start:end] 
                loss, acc = model.train_on_batch(batch_samples, batch_labels, accuracy=True)
2, using fit directly, and set nb_epoch as 1
    model = self.createLSTM()   #define my own model
    nb_epoch = 50
    batch_size = 128

    for e in range(nb_epoch):
        self.logger.info("Epoch:%d" % (e+1))
        for idx, f in enumerate(vlist):     
            samples, labels = self.loadData(f)  #large training data 3-4G each 
            model.fit(samples, labels, nb_epoch=1, validation_split=0.2, show_accuracy=True)
I'm not sure which one is better. To me, "fit" interface provides validation and batch functionality, so it's better. any comment?
Kenneth