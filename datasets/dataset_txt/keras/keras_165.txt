wtorousa commented on 20 Jun 2019 â€¢
edited
I am trying to build a network with an LSTM layer. I use the following code to construct my network:
def build_model():
    '''
    Function to build a LSTM RNN model that takes in quantitiy, converted week; outputs predicted price
    '''
    # define model
    model = tf.keras.Sequential()
    model.add(tf.keras.layers.LSTM(128, activation='relu', input_shape=(num_steps,num_features*input_size)))
    model.add(tf.keras.layers.Dense(128*input_size, input_shape=(num_steps,num_features*input_size)))
    model.add(tf.keras.layers.Dense(input_size))
    model.compile(optimizer='adam', loss='mse')
    print(train_data[0].shape, train_data[1].shape)
    # fit model
    es = tf.keras.callbacks.EarlyStopping(monitor='val_loss', min_delta=1)
    model.fit(x = train_data[0], y = train_data[1], epochs=500,verbose=1, validation_split = 0.15)
    # validation_data = (val_data[0], val_data[1])
    print(model.summary())
    return model
However, this error is being raised:
---------------------------------------------------------------------------
InvalidArgumentError                      Traceback (most recent call last)
<ipython-input-11-46cc4af40199> in <module>
     17     return model
     18 
---> 19 trained_model = build_model()

<ipython-input-11-46cc4af40199> in build_model()
     12     # fit model
     13     es = tf.keras.callbacks.EarlyStopping(monitor='val_loss', min_delta=1)
---> 14     model.fit(x = train_data[0], y = train_data[1], epochs=500,verbose=1, validation_split = 0.15)
     15     # validation_data = (val_data[0], val_data[1])
     16     print(model.summary())

~/.local/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py in fit(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, max_queue_size, workers, use_multiprocessing, **kwargs)
    878           initial_epoch=initial_epoch,
    879           steps_per_epoch=steps_per_epoch,
--> 880           validation_steps=validation_steps)
    881 
    882   def evaluate(self,

~/.local/lib/python3.6/site-packages/tensorflow/python/keras/engine/training_arrays.py in model_iteration(model, inputs, targets, sample_weights, batch_size, epochs, verbose, callbacks, val_inputs, val_targets, val_sample_weights, shuffle, initial_epoch, steps_per_epoch, validation_steps, mode, validation_in_fit, **kwargs)
    327 
    328         # Get outputs.
--> 329         batch_outs = f(ins_batch)
    330         if not isinstance(batch_outs, list):
    331           batch_outs = [batch_outs]

~/.local/lib/python3.6/site-packages/tensorflow/python/keras/backend.py in __call__(self, inputs)
   3074 
   3075     fetched = self._callable_fn(*array_vals,
-> 3076                                 run_metadata=self.run_metadata)
   3077     self._call_fetch_callbacks(fetched[-len(self._fetches):])
   3078     return nest.pack_sequence_as(self._outputs_structure,

~/.local/lib/python3.6/site-packages/tensorflow/python/client/session.py in __call__(self, *args, **kwargs)
   1437           ret = tf_session.TF_SessionRunCallable(
   1438               self._session._session, self._handle, args, status,
-> 1439               run_metadata_ptr)
   1440         if run_metadata:
   1441           proto_data = tf_session.TF_GetBuffer(run_metadata_ptr)

~/.local/lib/python3.6/site-packages/tensorflow/python/framework/errors_impl.py in __exit__(self, type_arg, value_arg, traceback_arg)
    526             None, None,
    527             compat.as_text(c_api.TF_Message(self.status.status)),
--> 528             c_api.TF_GetCode(self.status.status))
    529     # Delete the underlying status object from memory otherwise it stays alive
    530     # as there is a reference to status from this from the traceback due to

InvalidArgumentError: data[0].shape = [3] does not start with indices[0].shape = [2]
  [[{{node training_2/Adam/gradients/loss_1/dense_3_loss/MeanSquaredError/Mean_grad/DynamicStitch}}]]
I am having trouble tracing the error. My x is a np.array of shape (151,1,3) and my y is a np.array of shape (151,1,1). num_steps = 1, input_size = 1, and num_features = 3. When I remove the LSTM layer, the network builds without error. Also of note, if I call model.fit(train_data, epochs=500, verbose=1) the network builds without error, but if I call model.fit(train_data, epochs=500, verbose=1, validation_split = 0.15) raises a different error.