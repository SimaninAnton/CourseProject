Ahbsin commented on 1 Jul 2017 â€¢
edited
Please make sure that the boxes below are checked before you submit your issue. If your issue is an implementation question, please ask your question on StackOverflow or join the Keras Slack channel and ask there instead of filing a GitHub issue.
Thank you!
Check that you are up-to-date with the master branch of Keras. You can update with:
pip install git+git://github.com/fchollet/keras.git --upgrade --no-deps
If running on TensorFlow, check that you are up-to-date with the latest version. The installation instructions can be found here.
If running on Theano, check that you are up-to-date with the master branch of Theano. You can update with:
pip install git+git://github.com/Theano/Theano.git --upgrade --no-deps
Provide a link to a GitHub Gist of a Python script that can reproduce your issue (or just copy the script here if it is short).
I am working with help from this example https://github.com/fchollet/keras/blob/master/examples/image_ocr.py
I am returning the trained model after training and implemented model.predict() to get predictions for the input. I am unable to understand what exactly this model is predicting about the image. And if there is a way to decode, please explain. Here is end part of the code,
def train(run_name, start_epoch, stop_epoch, img_w):
    # Input Parameters
    img_h = 64
    words_per_epoch = 1000
    val_split = 0.2
    val_words = int(words_per_epoch * (val_split))

    # Network parameters
    conv_filters = 16
    kernel_size = (3, 3)
    pool_size = 2
    time_dense_size = 32
    rnn_size = 512

    if K.image_data_format() == 'channels_first':
        input_shape = (1, img_w, img_h)
    else:
        input_shape = (img_w, img_h, 1)

    fdir = os.path.dirname(get_file('wordlists.tgz',
                                    origin='http://www.mythic-ai.com/datasets/wordlists.tgz', untar=True))
    #minibatch_size was 32

.
.
.
.
.

    model = Model(inputs=[input_data, labels, input_length, label_length], outputs=loss_out)

    # the loss calc occurs elsewhere, so use a dummy lambda func for the loss
    model.compile(loss={'ctc': lambda y_true, y_pred: y_pred},metrics=['accuracy'], optimizer=sgd)
    if start_epoch > 0:
        weight_file = os.path.join(OUTPUT_DIR, os.path.join(run_name, 'weights%02d.h5' % (start_epoch - 1)))
        model.load_weights(weight_file)


    # captures output of softmax so we can decode the output during visualization
    test_func = K.function([input_data], [y_pred])

    viz_cb = VizCallback(run_name, test_func, img_gen.next_val())

    model.fit_generator(generator=img_gen.next_train(), steps_per_epoch=(words_per_epoch - val_words),
                        epochs=stop_epoch, validation_data=img_gen.next_val(), validation_steps=val_words,
                        callbacks=[viz_cb, img_gen], initial_epoch=start_epoch)
    return model

if __name__ == '__main__':
    run_name = datetime.datetime.now().strftime('%Y:%m:%d:%H:%M:%S')
    model = train(run_name, 0, 5, 128)
    #After getting the model, I am feeding input data to the predict function.
    a = np.load('numpydata/1/X_data.npy')
    b = np.load('numpydata/1/labels.npy')
    c = np.load('numpydata/1/input_length.npy')
    d = np.load('numpydata/1/label_length.npy')
    print(model.predict([a,b,c,d], batch_size = 32, verbose=0 ))
The output comes out to be an array of decimal values.
[[ 14.59035492]
 [ 15.46845436]
 [  9.55725193]
 [ 19.38563347]
 [ 13.73395443]
 [ 21.07408333]
 [  8.06727886]
 [ 13.42582989]
 [  4.02513456]
 [ 20.28575706]
 [  8.77123833]
 [ 13.9582119 ]
 [ 14.74723148]
 [ 19.74582672]
 [  9.06725311]
 [ 20.33335114]
 [  8.33902454]
 [ 20.70859909]
 [ 19.34511566]
 [ 15.36414433]
 [ 11.41501808]
 [ 16.08496857]
 [ 19.46848297]
 [ 14.60270977]
 [ 21.54194641]
 [ 20.92100906]
 [  4.06134892]
 [ 14.14681911]
 [ 16.94049454]
 [ -0.409695  ]
 [ -0.41031939]
 [ -0.41318247]]
@mbhenry @fchollet please help on this. what to do with these predictions, I am stuck.