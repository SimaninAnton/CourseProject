Contributor
PiranjaF commented on 11 Apr 2016
Pretrained models are often finetuned on small datasets. For these use cases it can be relevant to add dropout to prevent overfitting. However, adding recurrent dropout to a loaded model (and recompiling the model) has no effect at all.
I've modified the imdb_lstm to demonstrate this. With recurrent dropout of 0.999, the model should not be able to learn anything, but it actually starts overfitting dramatically (it gets an accuracy of ~99% after 3 epochs). See the code below.
'''Train a LSTM on the IMDB sentiment classification task.

The dataset is actually too small for LSTM to be of any advantage
compared to simpler, much faster methods such as TF-IDF+LogReg.

Notes:

- RNNs are tricky. Choice of batch size is important,
choice of loss and optimizer is critical, etc.
Some configurations won't converge.

- LSTM loss decrease patterns during training can be quite different
from what you see with CNNs/MLPs/etc.

GPU command:
    THEANO_FLAGS=mode=FAST_RUN,device=gpu,floatX=float32 python imdb_lstm.py
'''

from __future__ import print_function
import numpy as np
np.random.seed(1337)  # for reproducibility

from keras.preprocessing import sequence
from keras.utils import np_utils
from keras.models import Sequential, model_from_yaml
from keras.layers.core import Dense, Dropout, Activation
from keras.layers.embeddings import Embedding
from keras.layers.recurrent import LSTM
from keras.datasets import imdb

max_features = 20000
maxlen = 100  # cut texts after this number of words (among top max_features most common words)
batch_size = 32

print('Loading data...')
(X_train, y_train), (X_test, y_test) = imdb.load_data(nb_words=max_features,
                                                      test_split=0.2)
print(len(X_train), 'train sequences')
print(len(X_test), 'test sequences')

print("Pad sequences (samples x time)")
X_train = sequence.pad_sequences(X_train, maxlen=maxlen)
X_test = sequence.pad_sequences(X_test, maxlen=maxlen)
print('X_train shape:', X_train.shape)
print('X_test shape:', X_test.shape)

print('Build model...')
model = Sequential()
model.add(Embedding(max_features, 128, input_length=maxlen))
model.add(LSTM(128))  # try using a GRU instead, for fun
model.add(Dropout(0.5))
model.add(Dense(1))
model.add(Activation('sigmoid'))

# try using different optimizers and different optimizer configs
model.compile(loss='binary_crossentropy',
              optimizer='adam',
              class_mode="binary")

print("Train...")
model.fit(X_train, y_train, batch_size=batch_size, nb_epoch=3,
          validation_data=(X_test, y_test), show_accuracy=True)
score, acc = model.evaluate(X_test, y_test,
                            batch_size=batch_size,
                            show_accuracy=True)
print('Test score:', score)
print('Test accuracy:', acc)


print("")
print('Saving weights.')

yaml_string = model.to_yaml()
open('imdb_lstm_config.yaml', 'w+').write(yaml_string)
model.save_weights('imdb_lstm_weights.h5', overwrite=True)

print('Reloading weights in new model with recurrent dropout.')
print("")

loaded_model = model_from_yaml(open('imdb_lstm_config.yaml').read())
loaded_model.load_weights('imdb_lstm_weights.h5')
loaded_model.layers[0].dropout = 0.99
loaded_model.layers[1].dropout_U = 0.99
loaded_model.layers[1].dropout_W = 0.99

loaded_model.compile(loss='binary_crossentropy',
              optimizer='adam',
              class_mode="binary")

print("Train...")
loaded_model.fit(X_train, y_train, batch_size=batch_size, nb_epoch=3,
                 validation_data=(X_test, y_test), show_accuracy=True)
score, acc = loaded_model.evaluate(X_test, y_test,
                                   batch_size=batch_size,
                                   show_accuracy=True)
print('Test score:', score)
print('Test accuracy:', acc)