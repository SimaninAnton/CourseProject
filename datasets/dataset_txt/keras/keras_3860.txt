Fuerril commented on 22 Nov 2016
Dear Keras users,
I'm new to both recurrent neural networks and python, so apologies if my problem is a stupid mistake of mine.
I'm facing an issue while implementing a bidirectional network with masking.
I have varying-length sequences and I need to classify each timestep (with 5 features and 2 classes). I use a masking layer to deal with the varying-lengths but I cannot make it compile with the bidirectional wrapper (both seem to work without the other).
I didn't use an embedding layer as my features are not all categorical, some are continuous values.
Here is my model:
model = Sequential() model.add(Masking(mask_value=0., input_shape=(maxlen, in_neurons))) model.add(Bidirectional(LSTM(hidden_neurons, return_sequences=True))) model.add(TimeDistributed(Dense(out_neurons))) model.add(Activation('sigmoid')) model.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['accuracy'])
And the following error is returned:
`Traceback (most recent call last):
File "", line 3, in
model.add(Bidirectional(LSTM(hidden_neurons)))
File "/Users/Matthieu/anaconda/lib/python3.5/site-packages/keras/models.py", line 325, in add
output_tensor = layer(self.outputs[0])
File "/Users/Matthieu/anaconda/lib/python3.5/site-packages/keras/engine/topology.py", line 516, in call
self.add_inbound_node(inbound_layers, node_indices, tensor_indices)
File "/Users/Matthieu/anaconda/lib/python3.5/site-packages/keras/engine/topology.py", line 570, in add_inbound_node
Node.create_node(self, inbound_layers, node_indices, tensor_indices)
File "/Users/Matthieu/anaconda/lib/python3.5/site-packages/keras/engine/topology.py", line 154, in create_node
output_tensors = to_list(outbound_layer.call(input_tensors[0], mask=input_masks[0]))
File "/Users/Matthieu/anaconda/lib/python3.5/site-packages/keras/layers/wrappers.py", line 199, in call
Y_rev = self.backward_layer.call(X, mask)
File "/Users/Matthieu/anaconda/lib/python3.5/site-packages/keras/layers/recurrent.py", line 227, in call
input_length=input_shape[1])
File "/Users/Matthieu/anaconda/lib/python3.5/site-packages/keras/backend/tensorflow_backend.py", line 1267, in rnn
mask = tf.reverse(mask, [True] + [False] * (ndim - 2))
File "/Users/Matthieu/anaconda/lib/python3.5/site-packages/tensorflow/python/ops/gen_array_ops.py", line 2042, in reverse
name=name)
File "/Users/Matthieu/anaconda/lib/python3.5/site-packages/tensorflow/python/framework/op_def_library.py", line 749, in apply_op
op_def=op_def)
File "/Users/Matthieu/anaconda/lib/python3.5/site-packages/tensorflow/python/framework/ops.py", line 2382, in create_op
set_shapes_for_outputs(ret)
File "/Users/Matthieu/anaconda/lib/python3.5/site-packages/tensorflow/python/framework/ops.py", line 1783, in set_shapes_for_outputs
shapes = shape_func(op)
File "/Users/Matthieu/anaconda/lib/python3.5/site-packages/tensorflow/python/framework/common_shapes.py", line 596, in call_cpp_shape_fn
raise ValueError(err.message)
ValueError: Shape must be rank 2 but is rank 3`
I have read many posts about bidirectional and masking (usually with an embedding layer though) but still cannot figure out what is wrong here.
1