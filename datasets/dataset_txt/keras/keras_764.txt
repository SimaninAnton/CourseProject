Contributor
adocherty commented on 17 Sep 2018
There is a bug in the from_config method of the Keras Network class. This bug occurs when loading a model from a config when the model uses a layer that is shared at multiple depths and the input tensors to the shared layer are not in the order of the layers in the model config file.
For example, the following model creates a single dense layer then applies it to the reshaped input x2. It is then applied to the non-reshaped input x1, and again at the reshaped output.
sl = Dense(12)

x2 = Input((1, 12))
r2 = Reshape((12,))(x2)
r21 = sl(r2)

x1 = Input((1, 12))
r1 = Reshape((12,))(sl(x1))

r11 = sl(r1)
c1 = Concatenate()([r11, r21])
o1 = Dense(2)(c1)
The layers of the model are as follows:
__________________________________________________________________________________________________
Layer (type)                    Output Shape         Param #     Connected to
==================================================================================================
input_2 (InputLayer)            (None, 1, 12)        0
__________________________________________________________________________________________________
dense_1 (Dense)                 multiple             156         reshape_1[0][0]
                                                                 input_2[0][0]
                                                                 reshape_2[0][0]
__________________________________________________________________________________________________
input_1 (InputLayer)            (None, 1, 12)        0
__________________________________________________________________________________________________
reshape_2 (Reshape)             (None, 12)           0           dense_1[1][0]
__________________________________________________________________________________________________
reshape_1 (Reshape)             (None, 12)           0           input_1[0][0]
__________________________________________________________________________________________________
concatenate_1 (Concatenate)     (None, 24)           0           dense_1[2][0]
                                                                 dense_1[0][0]
__________________________________________________________________________________________________
dense_2 (Dense)                 (None, 2)            50          concatenate_1[0][0]
==================================================================================================
Note that the dense_2 layer has reshape_1 and reshape_2 as inputs but those layers come after dense_2 in the list of layers.
The code in keras/engine/network.py contains the from_config method that loads the model. Then loading, the layer order of above is followed when recreating the model. At each layer Keras attempts to deserialize the layer using the inputs. When trying to deserialize the dense_2 layer Keras tries to create the first output but cannot because the input layers reshape_1 aren't available, Keras next tries to create the second output using input_2 which works because these layers are available. Keras will re-queue the first node (and third node) and will creates it at the next attempt when the input layers are available, unfortunately in doing this it swaps the output order of the output nodes of the dense_2 layer. The model loading then fails at the concatenate_1 layer as it uses the output nodes [0] and [2] of dense_2 but the output node [0] is now from input_2 which has the incorrect shape.
Note that if we change the order that we apply the shared layer so that model layer order changes this bug can be avoided. The code to reproduce the bug including code to create the layers in an order that doesn't trigger the bug is on this gist:
https://gist.github.com/adocherty/5f5c9983310ef2cf28e3ccb63ad39740
The error triggered by this script is as follows:
  File "example_load_bug.py", line 57, in <module>
    models.load_model("test.h5")
  File ".../lib/python3.6/site-packages/keras/engine/saving.py", line 260, in load_model
    model = model_from_config(model_config, custom_objects=custom_objects)
  File ".../lib/python3.6/site-packages/keras/engine/saving.py", line 334, in model_from_config
    return deserialize(config, custom_objects=custom_objects)
  File ".../lib/python3.6/site-packages/keras/layers/__init__.py", line 55, in deserialize
    printable_module_name='layer')
  File ".../lib/python3.6/site-packages/keras/utils/generic_utils.py", line 145, in deserialize_keras_object
    list(custom_objects.items())))
  File ".../lib/python3.6/site-packages/keras/engine/network.py", line 1027, in from_config
    process_node(layer, node_data)
  File ".../lib/python3.6/site-packages/keras/engine/network.py", line 986, in process_node
    layer(unpack_singleton(input_tensors), **kwargs)
  File ".../lib/python3.6/site-packages/keras/engine/base_layer.py", line 431, in __call__
    self.build(unpack_singleton(input_shapes))
  File ".../lib/python3.6/site-packages/keras/layers/merge.py", line 354, in build
    'Got inputs shapes: %s' % (input_shape))
ValueError: A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got inputs shapes: [(None, 12), (None, 1, 12)]