moinudeen commented on 19 Mar 2017 â€¢
edited
I am trying to use a stateful lstm for time series prediction. Input layer is a stateful LSTM that has 5 dimensional input [(757,50,5) where 757 is number of samples and 50 is time_step].
`batch_size=25
model = Sequential()
model.add(LSTM(
    100,
    batch_input_shape= (bsize, 1 ,5),
    stateful=True,
    return_sequences=True))
model.add(Dropout(0.1))

model.add(LSTM(
    200,
    stateful = True,
    return_sequences=False))
model.add(Dropout(0.2))

model.add(Dense(4))`
when i build this model i get an error traceback like this:
`---------------------------------------------------------------------------
TypeError Traceback (most recent call last)
in ()
----> 1 model = build_model()
in build_model()
6 batch_input_shape=(bsize, 1, 5),
7 return_sequences=True,
----> 8 stateful = True))
9 model.add(Dropout(0.1))
10
/usr/local/lib/python3.5/dist-packages/keras/models.py in add(self, layer)
297 else:
298 input_dtype = None
--> 299 layer.create_input_layer(batch_input_shape, input_dtype)
300
301 if len(layer.inbound_nodes) != 1:
/usr/local/lib/python3.5/dist-packages/keras/engine/topology.py in create_input_layer(self, batch_input_shape, input_dtype, name)
395 # Instantiate the input layer.
396 x = Input(batch_shape=batch_input_shape,
--> 397 dtype=input_dtype, name=name)
398 # This will build the current layer
399 # and create the node connecting the current layer
/usr/local/lib/python3.5/dist-packages/keras/engine/topology.py in Input(shape, batch_shape, name, dtype, sparse, tensor)
1196 name=name, input_dtype=dtype,
1197 sparse=sparse,
-> 1198 input_tensor=tensor)
1199 # Return tensor including _keras_shape and _keras_history.
1200 # Note that in this case train_output and test_output are the same pointer.
/usr/local/lib/python3.5/dist-packages/keras/engine/topology.py in init(self, input_shape, batch_input_shape, input_dtype, input_tensor, sparse, name)
1114 dtype=input_dtype,
1115 sparse=self.sparse,
-> 1116 name=self.name)
1117 else:
1118 input_tensor._keras_shape = batch_input_shape
/usr/local/lib/python3.5/dist-packages/keras/backend/tensorflow_backend.py in placeholder(shape, ndim, dtype, sparse, name)
319 x._dims = len(shape)
320 else:
--> 321 x = tf.placeholder(dtype, shape=shape, name=name)
322 x._keras_shape = shape
323 x._uses_learning_phase = False
/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/array_ops.py in placeholder(dtype, shape, name)
1492 evaluated directly.
1493 """
-> 1494 shape = tensor_shape.as_shape(shape)
1495 if shape.is_fully_defined():
1496 dim_list = shape.as_list()
/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/tensor_shape.py in as_shape(shape)
798 return shape
799 else:
--> 800 return TensorShape(shape)
801
802
/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/tensor_shape.py in init(self, dims)
434 else:
435 # Got a list of dimensions
--> 436 self._dims = [as_dimension(d) for d in dims_iter]
437
438 def repr(self):
/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/tensor_shape.py in (.0)
434 else:
435 # Got a list of dimensions
--> 436 self._dims = [as_dimension(d) for d in dims_iter]
437
438 def repr(self):
/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/tensor_shape.py in as_dimension(value)
376 return value
377 else:
--> 378 return Dimension(value)
379
380
/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/tensor_shape.py in init(self, value)
31 self._value = None
32 else:
---> 33 self._value = int(value)
34 if (not isinstance(value, compat.bytes_or_text_types)
35 and self._value != value):
TypeError: only length-1 arrays can be converted to Python scalars`
My Apologies if this seems like a silly question. I am a newbie :)