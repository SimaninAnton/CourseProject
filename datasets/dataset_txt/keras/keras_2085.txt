rex-yue-wu commented on 23 Jun 2017
My problem is to apply convolution to a tensor X of shape ( nb_samples, nb_channels, height, width) in such a way that a true 2D Convolutional filter F of shape (nb_rows, nb_cols) is applied to each each channel, If my task is implemented in bumpy, then my output Y should look like this
Y = []
for sample_idx in range( nb_samples ) :
   ys = []
   for channel_idx in range( nb_channels ) :
        x = X[ sample_idx, channel_idx ] # shape of ( height, width )
        y = conv2D( x, F, mode = 'same' ) # y's shape is the same as x's shape
        ys.append( np.expand_dims( y, axis = 0 ) )
   ys = np.concatenate( ys, axis = 0 ) # shape of ( nb_channels, height, width )
   Y.append( np.expand_dims( ys, axis = 0 ) )
Y = np.concatenate( Y, axis = 0 )  # shape of ( nb_samples, nb_channels, height, width )
I have no problem to implement this operation through TimeDistributed , i.e. considering the channel axis as the time axis and applying each channel a keras Conv1D. However, the efficiency of this implementation is clearly low. Does anyone have a better solution?