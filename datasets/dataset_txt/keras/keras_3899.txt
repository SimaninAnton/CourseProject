kirk86 commented on 17 Nov 2016
Loading MNIST data...
train_x shape: (60000, 1, 28, 28) train_y shape: (60000, 10)
validation_x shape: (10000, 1, 28, 28) validation_y shape (10000, 10)

Experiment of Net2WiderNet ...

building teacher model ...
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
/home/user/projects/python/keras/examples/mnist_net2net.py in <module>()
    381
    382 # run the experiments
--> 383 net2wider_experiment()
    384 net2deeper_experiment()

/home/user/projects/python/keras/examples/mnist_net2net.py in net2wider_experiment()
    345     teacher_model, _ = make_teacher_model(train_data,
    346                                           validation_data,
--> 347                                           nb_epoch=3)
    348
    349     print('\nbuilding wider student model by random padding ...')

/home/user/projects/python/keras/examples/mnist_net2net.py in make_teacher_model(train_data, validation_data, nb_epoch)
    218     model = Sequential()
    219     model.add(Conv2D(64, 3, 3, input_shape=input_shape,
--> 220                      border_mode='same', name='conv1'))
    221     model.add(MaxPooling2D(name='pool1'))
    222     model.add(Conv2D(64, 3, 3, border_mode='same', name='conv2'))

/home/user/miniconda2/lib/python2.7/site-packages/keras/models.pyc in add(self, layer)
    278                 else:
    279                     input_dtype = None
--> 280                 layer.create_input_layer(batch_input_shape, input_dtype)
    281
    282             if len(layer.inbound_nodes) != 1:

/home/user/miniconda2/lib/python2.7/site-packages/keras/engine/topology.pyc in create_input_layer(self, batch_input_shape, input_dtype, name)
    368         # and create the node connecting the current layer
    369         # to the input layer we just created.
--> 370         self(x)
    371
    372     def assert_input_compatibility(self, input):

/home/user/miniconda2/lib/python2.7/site-packages/keras/engine/topology.pyc in __call__(self, x, mask)
    512         if inbound_layers:
    513             # this will call layer.build() if necessary
--> 514             self.add_inbound_node(inbound_layers, node_indices, tensor_indices)
    515             input_added = True
    516

/home/user/miniconda2/lib/python2.7/site-packages/keras/engine/topology.pyc in add_inbound_node(self, inbound_layers, node_indices, tensor_indices)
    570         # creating the node automatically updates self.inbound_nodes
    571         # as well as outbound_nodes on inbound layers.
--> 572         Node.create_node(self, inbound_layers, node_indices, tensor_indices)
    573
    574     def get_output_shape_for(self, input_shape):

/home/user/miniconda2/lib/python2.7/site-packages/keras/engine/topology.pyc in create_node(cls, outbound_layer, inbound_layers, node_indices, tensor_indices)
    147
    148         if len(input_tensors) == 1:
--> 149             output_tensors = to_list(outbound_layer.call(input_tensors[0], mask=input_masks[0]))
    150             output_masks = to_list(outbound_layer.compute_mask(input_tensors[0], input_masks[0]))
    151             # TODO: try to auto-infer shape if exception is raised by get_output_shape_for

/home/user/miniconda2/lib/python2.7/site-packages/keras/layers/convolutional.pyc in call(self, x, mask)
    464                           border_mode=self.border_mode,
    465                           dim_ordering=self.dim_ordering,
--> 466                           filter_shape=self.W_shape)
    467         if self.bias:
    468             if self.dim_ordering == 'th':

/home/user/miniconda2/lib/python2.7/site-packages/keras/backend/tensorflow_backend.pyc in conv2d(x, kernel, strides, border_mode, dim_ordering, image_shape, filter_shape, filter_dilation)
   1637     if filter_dilation == (1, 1):
   1638         strides = (1,) + strides + (1,)
-> 1639         x = tf.nn.conv2d(x, kernel, strides, padding=padding)
   1640     else:
   1641         assert filter_dilation[0] == filter_dilation[1]

/home/user/miniconda2/lib/python2.7/site-packages/tensorflow/python/ops/gen_nn_ops.pyc in conv2d(input, filter, strides, padding, use_cudnn_on_gpu, data_format, name)
    392                                 strides=strides, padding=padding,
    393                                 use_cudnn_on_gpu=use_cudnn_on_gpu,
--> 394                                 data_format=data_format, name=name)
    395   return result
    396

/home/user/miniconda2/lib/python2.7/site-packages/tensorflow/python/framework/op_def_library.pyc in apply_op(self, op_type_name, name, **keywords)
    701           op = g.create_op(op_type_name, inputs, output_types, name=scope,
    702                            input_types=input_types, attrs=attr_protos,
--> 703                            op_def=op_def)
    704           outputs = op.outputs
    705           return _Restructure(ops.convert_n_to_tensor(outputs),

/home/user/miniconda2/lib/python2.7/site-packages/tensorflow/python/framework/ops.pyc in create_op(self, op_type, inputs, dtypes, input_types, name, attrs, op_def, compute_shapes, compute_device)
   2310                     original_op=self._default_original_op, op_def=op_def)
   2311     if compute_shapes:
-> 2312       set_shapes_for_outputs(ret)
   2313     self._add_op(ret)
   2314     self._record_op_seen_by_control_dependencies(ret)

/home/user/miniconda2/lib/python2.7/site-packages/tensorflow/python/framework/ops.pyc in set_shapes_for_outputs(op)
   1702       raise RuntimeError("No shape function registered for standard op: %s"
   1703                          % op.type)
-> 1704   shapes = shape_func(op)
   1705   if shapes is None:
   1706     raise RuntimeError(

/home/user/miniconda2/lib/python2.7/site-packages/tensorflow/python/framework/common_shapes.pyc in conv2d_shape(op)
    244   out_rows, out_cols = get2d_conv_output_size(in_rows, in_cols, filter_rows,
    245                                               filter_cols, stride_r, stride_c,
--> 246                                               padding)
    247
    248   output_shape = [batch_size, out_rows, out_cols, depth_out]

/home/user/miniconda2/lib/python2.7/site-packages/tensorflow/python/framework/common_shapes.pyc in get2d_conv_output_size(input_height, input_width, filter_height, filter_width, row_stride, col_stride, padding_type)
    182   return get_conv_output_size((input_height, input_width),
    183                               (filter_height, filter_width),
--> 184                               (row_stride, col_stride), padding_type)
    185
    186

/home/user/miniconda2/lib/python2.7/site-packages/tensorflow/python/framework/common_shapes.pyc in get_conv_output_size(input_size, filter_size, strides, padding_type)
    147          zip(filter_size, input_size)):
    148     raise ValueError("Filter must not be larger than the input: "
--> 149                      "Filter: %r Input: %r" % (filter_size, input_size))
    150
    151   if padding_type == b"VALID":

ValueError: Filter must not be larger than the input: Filter: (3, 3) Input: (1, 28)