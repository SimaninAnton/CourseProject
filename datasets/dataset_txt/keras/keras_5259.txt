Contributor
braingineer commented on 5 May 2016 â€¢
edited
Basically, the situation is that I want to pre-load some shared variables that don't change as I feed in data.
However, they aren't weights or anything that I can just set to a network. They need to be computed on by the other layers, just as the data would. and you can't just arbitrarily put things in. because the computational gets re-ran, if something isn't linked in, it won't get used..
I've tried creating my faux input layer (found here) which creates a Node and gets inserted into the computational graph that way, but then keras expects it to be input at run time.
every variation on that idea (altering parts of Node, altering the variable in various places during runtime) always fails because there's some other part that assumes data can only be passed in at every iteration.
some things I've tried and their errors:
the full gist above where input and output tensors are set.
File "/home/cogniton/research/code/keras/keras/engine/topology.py", line 1773, in __init__
    str(layers_with_complete_input))
Exception: Graph disconnected: cannot obtain value for tensor sometensorname at layer layername. The following previous layers were accessed without issue: []
.2. Edited the thing that makes that trigger.
  File "/home/cogniton/research/code/keras/keras/engine/topology.py", line 2131, in run_internal_graph
    assert str(id(x)) in tensor_map, 'Could not compute output ' + str(x)
AssertionError: Could not compute output Reshape{3}.0
.3. maybe if i don't input the input tensor, it won't think it's input
  File "/home/cogniton/research/code/keras/keras/engine/topology.py", line 543, in add_inbound_node
    Node.create_node(self, inbound_layers, node_indices, tensor_indices)
  File "/home/cogniton/research/code/keras/keras/engine/topology.py", line 141, in create_node
    input_tensors.append(inbound_node.output_tensors[tensor_index])
IndexError: list index out of range
.4. hmm. what if i just skip this whole node thing
  File "/home/cogniton/research/code/keras/keras/engine/topology.py", line 452, in __call__
    '". This layer has no information'
Exception: You tried to call layer "summarize_context". This layer has no information about its expected input shape, and thus cannot be built. You can build it manually via: `layer.build(batch_input_shape)`