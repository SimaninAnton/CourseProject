mo-zahran commented on 18 Sep 2016 â€¢
edited
All my code is working probably, until it reach the dense layer
This error pop up
OverflowError: Range exceeds valid bounds
I am using Keras on top of Theano and anaconda with python 2.70 on windows 10_64X
same problem in #2681 and #3781
My code :
# import dataset 
from keras.datasets import mnist
# import the type of the modal 
from keras.models import Sequential
# import layers 
from keras.layers.core import Dense, Activation, Dropout,Flatten 
#import convolution layers 
from keras.layers.convolutional import Convolution2D, MaxPooling2D
from keras.utils import np_utils
#to plot matplotlib 
import matplotlib
import matplotlib .pyplot as plt 
#%% 
#define prameters 
#batch size to train 
batch_size=128
#number of output classes 
nb_classes =10
#number of epocs to train 
nb_epoch=12

#input image dimension 
img_rows,img_cols=28,28
#number of Convolution filters to use 
nb_filters=32
#size of pooling area for max pooling 
nb_pool=2
#Convolution kernel size 
nb_conv=3
#%%
#the data shuffled and split between tran and test 

#y_train & y_test labels from 0 to 9
#x_train & x_test features : pixles 
(X_train, y_train), (X_test, y_test) = mnist.load_data()


#reshape the data 
X_train=X_train.reshape(X_train.shape[0],1,img_rows,img_cols)# reshape for one channel 
X_test=X_test.reshape(X_test.shape[0],1,img_rows,img_cols)

X_train=X_train.astype('float32')
X_test=X_test.astype('float32')

#normalization 
X_train /=255
X_test/=255

print('X_train shape:',X_train.shape)
print(X_train.shape[0],'train samples')
print(X_test.shape[0],'test samples')

#convert class vectors to binary class matrices
Y_train=np_utils.to_categorical(y_train,nb_classes)# convert labels to binary format 
Y_test=np_utils.to_categorical(y_test,nb_classes)

i=4600
plt.imshow(X_train[i,0],interpolation='nearest')
print("label:",Y_train[i,:])

#%%
#define model 

model=Sequential()

#add layers 
#first conv
model.add(Convolution2D(nb_filters,nb_conv,nb_conv,border_mode='valid',input_shape=(1,img_rows,img_cols)))
convout1=Activation('relu')
model.add(convout1)
#second conv 
model.add(Convolution2D(nb_filters,nb_conv,nb_conv))
convout2=Activation('relu')
model.add(convout2)

model.add(MaxPooling2D(pool_size=(nb_pool,nb_pool)))
model.add(Dropout(0.25))#regulizatin layer 
#full connected layer 
model.add(Flatten())
model.add(Dense(128))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(nb_classes))
model.add(Activation('softmax'))
model.compile(loss='categorical_crossentropy',  optimizer='adadelta')#optmizer# 

#%%

model.fit(X_train,Y_train,batch_size=batch_size,nb_epoch=nb_epoch,show_accuracy=True,verbose=1,validation_data=(X_test,Y_test))
model.fit(X_train,Y_train,batch_size=batch_size,nb_epoch=nb_epoch,show_accuracy=True,verbose=1,validation_split=0.2)