scollet1 commented on 19 Mar 2018
Hey guys, I am having an issue with an output dimension mismatch and I'm not sure I follow the solutions I've found so far.
Error
ValueError: Error when checking target: expected time_distributed_1 to have shape (3, 1) but got array with shape (1, 1)
My input dimension is a 3D vector and fits properly with the network, but my Y vector, the one I'm training against only works when it's the same size as my input.
I am trying to predict 1 value per day, from a (4, N, 1) input
Model Summary
Layer (type)                 Output Shape              Param #   
=================================================================
lstm_1 (LSTM)                (None, 3, 128)            66560     
_________________________________________________________________
dropout_1 (Dropout)          (None, 3, 128)            0         
_________________________________________________________________
dense_1 (Dense)              (None, 3, 32)             4128      
_________________________________________________________________
dense_2 (Dense)              (None, 3, 32)             1056      
_________________________________________________________________
dense_3 (Dense)              (None, 3, 32)             1056      
_________________________________________________________________
time_distributed_1 (TimeDist (None, 3, 1)              33        
=================================================================
Total params: 72,833
Trainable params: 72,833
Non-trainable params: 0
_________________________________________________________________
Code
network = Network({
  'name':'test',
  'inputs':3,
  'outputs':1,
  'layers':3,
  'activation':'relu',
  'loss':'mean_squared_error',
  'optimizer':'RMSprop',
  'metrics':['accuracy']
 })
 network.train({
    'consecutiveDays' : 4,
    'train':{'X':[[
     [1, 1, 1],
     [0, 1, 1],
     [1, 1, 1],
     [0, 1, 1]],
     [[1, 1, 1],
     [0, 1, 1],
     [1, 1, 1],
     [0, 1, 1]]],
    'Y':[[
     [2],
     [0],
     [2],
     [0]],
     [[2],
     [0],
     [2],
     [0]]
    ]}})
def build(self, hP): # HYPER PARAMETERS
  if hP is not None:
   if hP['name'] is not None:
    self.name = hP['name']
   else:
    hP['name'] = 'testNet'
   model = Sequential()
   model.add(LSTM(128,
     return_sequences=True,
     input_shape=(hP['inputs'], 1),
     activation=hP['activation']))
   model.add(Dropout(0.3))
   for i in range(hP['layers']):
    model.add(Dense(32, activation=hP['activation']))
   model.add(TimeDistributed(Dense(output_dim=hP['outputs'], activation=hP['activation'])))
   model.compile(
     loss=hP['loss'],
     optimizer=hP['optimizer'],
     metrics=hP['metrics']
   )
   model.summary()
   return model
  else:
   failed('Network construction')
   return None