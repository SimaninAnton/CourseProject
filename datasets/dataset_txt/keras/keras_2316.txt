abdulqayyum commented on 23 May 2017 •
edited
I am working on a problem of image conversion where I input L space image and predict two output images of channel a* and b* I tried with following network but its loss is very high and val_loss is inf so results are always like:
Train on 100 samples, validate on 30 samples
Epoch 1/20
100/100 [==============================] - 246s - loss: 3221804243200946728861696.0000 - acc: 0.6518 - val_loss: inf - val_acc: 0.7124
Epoch 2/20
100/100 [==============================] - 221s - loss: 680008175144896313604177920.0000 - acc: 0.6956 - val_loss: inf - val_acc: 0.7124
30/30 [==============================] - 18s    ���
My current model looks like following code,
batch_size = 16
nb_epoch = 20

#here I load data set
#model starts here
#First
model = Sequential()

#Conv Layer 1
model.add(Convolution2D(112,3,kernel_initializer='uniform',input_shape=(136, 136,1), padding="same",data_format="channels_last",name='conv_1.1'))
model.add(Activation('relu'))
model.add(ZeroPadding2D(padding=(1, 1),data_format="channels_last"))
model.add(Convolution2D(64,2, strides=(2,2),padding='valid',data_format="channels_last",name='conv_1.2'))
model.add(Activation('relu'))
model.add(BatchNormalization(epsilon=1e-05,axis=1,momentum=0.99))

#Conv Layer 2
model.add(ZeroPadding2D(padding=(1, 1), data_format="channels_last"))
model.add(Conv2D(64,3, padding="valid",data_format="channels_last",name='conv_2.1'))
model.add(Activation('relu'))
model.add(ZeroPadding2D(padding=(1, 1), data_format="channels_last"))
model.add(Conv2D(128,3,padding="valid",strides=(2,2),data_format="channels_last",name='conv_2.3'))
model.add(Activation('relu'))
model.add(BatchNormalization(beta_regularizer=None, epsilon=1e-05, beta_initializer="zero", gamma_initializer="one", weights=None, gamma_regularizer=None, momentum=0.99))

#Conv Layer 3
model.add(ZeroPadding2D(padding=(1, 1), data_format="channels_last"))
model.add(Conv2D(256,3, padding="valid",data_format="channels_last",name='conv_3.1'))
model.add(Activation('relu'))
model.add(ZeroPadding2D(padding=(1, 1), data_format="channels_last"))
model.add(Conv2D(256,3,padding="valid",data_format="channels_last",name='conv_3.2'))
model.add(Activation('relu'))
model.add(ZeroPadding2D(padding=(1, 1), data_format="channels_last"))
model.add(Conv2D(256,3,padding="valid",strides=(2,2),data_format="channels_last",name='conv_3.3'))
model.add(Activation('relu'))
model.add(BatchNormalization(beta_regularizer=None, epsilon=1e-05, beta_initializer="zero", gamma_initializer="one", weights=None, gamma_regularizer=None, momentum=0.99))

#Conv Layer 4
model.add(ZeroPadding2D(padding=(1, 1), data_format="channels_last"))
model.add(Conv2D(512,3,dilation_rate=(1,1),padding="valid",strides=(1,1),data_format="channels_last",name='dil_4.1'))
model.add(Activation('relu'))
model.add(ZeroPadding2D(padding=(1, 1), data_format="channels_last"))
model.add(Conv2D(512,3,dilation_rate=(1,1),padding="valid",strides=(1,1),data_format="channels_last",name='dil_4.2'))
model.add(Activation('relu'))
model.add(ZeroPadding2D(padding=(1, 1), data_format="channels_last"))
model.add(Conv2D(512,3,dilation_rate=(1,1),padding="valid",strides=(1,1),data_format="channels_last",name='dil_4.3'))
model.add(Activation('relu'))
model.add(BatchNormalization(beta_regularizer=None, epsilon=1e-05, beta_initializer="zero", gamma_initializer="one", weights=None, gamma_regularizer=None, momentum=0.99))

#Conv Layer 5
model.add(ZeroPadding2D(padding=(2, 2), data_format="channels_last"))
model.add(Conv2D(512,3,dilation_rate=(2,2),padding="valid",strides=(1,1),data_format="channels_last",name='dil_5.1'))
model.add(Activation('relu'))
model.add(ZeroPadding2D(padding=(2, 2), data_format="channels_last"))
model.add(Conv2D(512,3,dilation_rate=(2,2),padding="valid",strides=(1,1),data_format="channels_last",name='dil_5.2'))
model.add(Activation('relu'))
model.add(ZeroPadding2D(padding=(2, 2), data_format="channels_last"))
model.add(Conv2D(512,3,dilation_rate=(2,2),padding="valid",strides=(1,1),data_format="channels_last",name='dil_5.3'))
model.add(Activation('relu'))
model.add(BatchNormalization(beta_regularizer=None, epsilon=1e-05, beta_initializer="zero", gamma_initializer="one", weights=None, gamma_regularizer=None, momentum=0.99))

#Conv Layer 6
model.add(ZeroPadding2D(padding=(2, 2), data_format="channels_last"))
model.add(Conv2D(512,3,dilation_rate=(2,2),padding="valid",data_format="channels_last",name='dil_6.1'))
model.add(Activation('relu'))
model.add(ZeroPadding2D(padding=(2, 2), data_format="channels_last"))
model.add(Conv2D(512,3,dilation_rate=(2,2),padding="valid",data_format="channels_last",name='dil_6.2'))
model.add(Activation('relu'))
model.add(ZeroPadding2D(padding=(2, 2), data_format="channels_last"))
model.add(Conv2D(512,3,dilation_rate=(2,2),padding="valid",data_format="channels_last",name='dil_6.3'))
model.add(Activation('relu'))
model.add(BatchNormalization(beta_regularizer=None, epsilon=1e-05, beta_initializer="zero", gamma_initializer="one", weights=None, gamma_regularizer=None, momentum=0.99))

#Conv Layer 7
model.add(ZeroPadding2D(padding=(1, 1), data_format="channels_last"))
model.add(Conv2D(512,3,dilation_rate=(1,1),padding="valid",data_format="channels_last",name='dil_7.1'))
model.add(Activation('relu'))
model.add(ZeroPadding2D(padding=(1, 1), data_format="channels_last"))
model.add(Conv2D(512,3,dilation_rate=(1,1),padding="valid",data_format="channels_last",name='dil_7.2'))
model.add(Activation('relu'))
model.add(ZeroPadding2D(padding=(1, 1), data_format="channels_last"))
model.add(Conv2D(512,3,dilation_rate=(1,1),padding="valid",data_format="channels_last",name='dil_7.3'))
model.add(Activation('relu'))
model.add(BatchNormalization(beta_regularizer=None, epsilon=1e-05, beta_initializer="zero", gamma_initializer="one", weights=None, gamma_regularizer=None, momentum=0.99))

#Conv Layer 8
model.add(ZeroPadding2D(padding=(1, 1),data_format="channels_last"))
model.add(Conv2D(256,3,dilation_rate=(1,1),padding="valid",data_format="channels_last",name='dil_8.2'))
model.add(Activation('relu'))
model.add(ZeroPadding2D(padding=(1, 1), data_format="channels_last"))
model.add(Conv2D(256,3,dilation_rate=(1,1),padding="valid",data_format="channels_last",activation='relu',name='dil_8.3'))
model.add(Activation('relu'))

model.add(UpSampling2D(size=(2,2), name="upsampling2d"))
model.add(Conv2D(256,3,dilation_rate=(1,1),padding="valid",data_format="channels_last",activation='relu',name='dil_9.1'))
model.add(Activation('relu'))
model.add(UpSampling2D(size=(2,2), name="upsampling2d2"))
model.add(Conv2D(128,3,dilation_rate=(1,1),padding="valid",data_format="channels_last",activation='relu',name='dil_9.2'))
model.add(Activation('relu'))
model.add(UpSampling2D(size=(2,2), name="upsampling2d3"))
model.add(ZeroPadding2D(padding=(2, 2), data_format="channels_last"))
model.add(Conv2D(128,1,dilation_rate=(1,1),padding="valid",data_format="channels_last",activation='relu',name='dil_9.3'))
model.add(Activation('relu'))
# Final conv
model.add(Conv2D(2, 1, name="conv2d_final", padding="same"))

plot_model(model, to_file='NewApi25.png',show_shapes='true')

#Call Backs
early_stop = cb.EarlyStopping(monitor='val_loss', min_delta=0, patience=1, verbose=0, mode='auto')
model_ckpt = cb.ModelCheckpoint(filepath='./weights.{epoch:02d}-{val_loss:.2f}.hd5', 
                              monitor='val_loss', verbose=0, save_best_only=True, 
                              save_weights_only=False, mode='auto', period=1)
tboard = cb.TensorBoard(log_dir='./logs2', histogram_freq=0, write_graph=True, write_images=False)

#Compile
learning_rate=0.1 
decay_rate=learning_rate/nb_epoch #
Op = opt.adam(lr=learning_rate, beta_1=0.9, beta_2=0.999, epsilon=1e-08, decay=decay_rate,clipnorm=1)
model.compile(loss='mean_squared_error',
              optimizer=Op,
              metrics=['accuracy'])
his = model.fit(X_train, Y_train,
              batch_size=batch_size,
              epochs=nb_epoch,
              validation_data=(X_test, Y_test),
              shuffle=False,
              callbacks=[early_stop,model_ckpt,tboard])
res = model.evaluate(X_test, Y_test,batch_size=batch_size, verbose=1)

model.save('model_API25.h5') 
Any help?