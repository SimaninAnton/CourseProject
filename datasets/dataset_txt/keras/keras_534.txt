kleysonr commented on 16 Dec 2018
On the Keras documentation we find the following information for steps_per_epoch and validation_steps when using the fit_generator() function:
It should typically be equal to the number of samples of your validation dataset divided by the batch size.
I'm writing a new generator and while debugging my code I didn't get the full dataset that was expected for one epoch.
Below my fit_generator:
kbg = KerasBatchGenerator('/home/kleysonr/Downloads/keras-generator/dataset', batch_size=6, imagesize=(100, 100), test_ratio=0.3)

model.fit_generator(kbg.generate(set='train'), 
                    steps_per_epoch=training_steps,
                    epochs=1,
                    verbose=1,
                    validation_data=kbg.generate(set='test'),
                    validation_steps=validation_steps,
                    use_multiprocessing=False,
                    workers=0)
Setting steps_per_epoch and validation_steps, as:
training_steps = kbg.getTrainingSize() // kbg.getBatchSize()
validation_steps = kbg.getTestingSize() // kbg.getBatchSize()
The batch process was (missing 3 images for the full training dataset):
Epoch 1/1
Batch: 0-0 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class3/c3-10.jpg
Batch: 0-1 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class1/c1-2.jpg
Batch: 0-2 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class2/c2-1.jpg
Batch: 0-3 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class3/c3-2.jpg
Batch: 0-4 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class2/c2-2.jpg
Batch: 0-5 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class1/c1-9.jpg
1/3 [=========>....................] - ETA: 1s - loss: 1.1116 - acc: 0.1667
Batch: 1-0 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class2/c2-8.jpg
Batch: 1-1 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class1/c1-7.jpg
Batch: 1-2 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class1/c1-8.jpg
Batch: 1-3 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class2/c2-9.jpg
Batch: 1-4 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class1/c1-1.jpg
Batch: 1-5 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class3/c3-6.jpg
2/3 [===================>..........] - ETA: 0s - loss: 1.1519 - acc: 0.1667
Batch: 2-0 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class3/c3-9.jpg
Batch: 2-1 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class1/c1-4.jpg
Batch: 2-2 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class2/c2-5.jpg
Batch: 2-3 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class2/c2-6.jpg
Batch: 2-4 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class1/c1-10.jpg
Batch: 2-5 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class3/c3-1.jpg
3/3 [==============================] - 1s 392ms/step - loss: 1.1632 - acc: 0.2222 - val_loss: 1.0733 - val_acc: 0.3333
Setting steps_per_epoch and validation_steps, as:
training_steps = math.ceil(kbg.getTrainingSize() / kbg.getBatchSize())
validation_steps = math.ceil(kbg.getTestingSize() / kbg.getBatchSize())
The batch process was (got the full training dataset):
Epoch 1/1
Batch: 0-0 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class2/c2-6.jpg
Batch: 0-1 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class2/c2-1.jpg
Batch: 0-2 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class1/c1-2.jpg
Batch: 0-3 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class3/c3-5.jpg
Batch: 0-4 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class1/c1-5.jpg
Batch: 0-5 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class3/c3-9.jpg
1/4 [======>.......................] - ETA: 3s - loss: 1.1336 - acc: 0.1667
Batch: 1-0 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class1/c1-9.jpg
Batch: 1-1 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class2/c2-9.jpg
Batch: 1-2 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class1/c1-6.jpg
Batch: 1-3 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class2/c2-4.jpg
Batch: 1-4 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class1/c1-10.jpg
Batch: 1-5 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class2/c2-7.jpg
2/4 [==============>...............] - ETA: 1s - loss: 1.1540 - acc: 0.1667
Batch: 2-0 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class1/c1-3.jpg
Batch: 2-1 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class2/c2-3.jpg
Batch: 2-2 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class3/c3-3.jpg
Batch: 2-3 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class3/c3-10.jpg
Batch: 2-4 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class3/c3-6.jpg
Batch: 2-5 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class3/c3-8.jpg
3/4 [=====================>........] - ETA: 0s - loss: 1.3066 - acc: 0.2222
Batch: 3-0 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class3/c3-1.jpg
Batch: 3-1 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class1/c1-7.jpg
Batch: 3-2 <<train>> /home/kleysonr/Downloads/keras-generator/dataset/class2/c2-10.jpg
1544964579 --train-- New epoch
4/4 [==============================] - 2s 391ms/step - loss: 1.2351 - acc: 0.3238 - val_loss: 1.1089 - val_acc: 0.2222
Is the second approach - using math.ceil() - the correct way to set the parameters ?
If yes, I'm wondering if the documentation could be more clear about setting those parameters.
Below more useful information:
Information about dataset:
  Dataset size: 30
  Training size: 21
  Test size: 9
  Classes: 3
  Batch Size: 6
$ pip3 freeze | egrep "Keras|tensorflow"
Keras==2.2.4
Keras-Applications==1.0.6
Keras-Preprocessing==1.0.5
tensorflow-gpu==1.12.0
$ python3 --version
Python 3.5.2
Best Regards.
Kleyson Rios.
1