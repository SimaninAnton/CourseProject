hamzamerzic commented on 20 Apr 2017
I am trying to pass a loss function defined in Keras and I get the above error (with the goal of customizing it later on). The example code snippet I am trying to execute is the following:
import tensorflow as tf
import numpy as np
import keras.backend as K
from keras.layers import Input, Dense, Activation
from keras.models import Model
from keras import optimizers, losses

# Model.
x = Input(shape=(2,), name='x')
y_pred = Dense(1, activation='linear')(x)
model = Model(inputs=x, outputs=y_pred)

# Optimizer.
opt = optimizers.Adam(0.1)

# Loss.
y = K.placeholder(shape=(None, 1)) 
mse_loss = losses.mean_squared_error(y, y_pred)

model.compile(optimizer=opt, loss=mse_loss)
I receive the following error:
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-1-26bdb7a97103> in <module>()
     18 mse_loss = losses.mean_squared_error(y, y_pred)
     19 
---> 20 model.compile(optimizer=opt, loss=mse_loss)

/usr/local/lib/python2.7/dist-packages/keras/engine/training.pyc in compile(self, optimizer, loss, metrics, loss_weights, sample_weight_mode, **kwargs)
    705                 `optimizer`, `loss`, `metrics` or `sample_weight_mode`.
    706         """
--> 707         loss = loss or {}
    708         self.optimizer = optimizers.get(optimizer)
    709         self.sample_weight_mode = sample_weight_mode

/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.pyc in __nonzero__(self)
    539       `TypeError`.
    540     """
--> 541     raise TypeError("Using a `tf.Tensor` as a Python `bool` is not allowed. "
    542                     "Use `if t is not None:` instead of `if t:` to test if a "
    543                     "tensor is defined, and use TensorFlow ops such as "

TypeError: Using a `tf.Tensor` as a Python `bool` is not allowed. Use `if t is not None:` instead of `if t:` to test if a tensor is defined, and use TensorFlow ops such as tf.cond to execute subgraphs conditioned on the value of a tensor.
I tried specifying the loss function using tensorflow, but with no success. I am using the latest version of tensorflow compiled from source.