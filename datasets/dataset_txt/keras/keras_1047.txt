gzanitti commented on 5 May 2018
Apologies if this is the wrong place to raise my issue (please help me out with where best to raise it if that's the case). I'm trying to train a model that takes one hot encoding vectors as input. It's a fairly large dataset, so I created a data generator to work with fit_generator(). It's not clear to me how to make this method trains on batches, so I assumed that the generator has to return batches to fit_generator(). The generator looks like this:
`class DataGenerator(keras.utils.Sequence):
def __ init __(self, X, y, batch_size=32, shuffle=True):
self.batch_size = batch_size
self.y = y
self.X = X
self.shuffle = shuffle
self.on_epoch_end()
def __len__(self):
    return int(np.floor(len(self.X) / self.batch_size))

def __getitem__(self, index):        
    sample_index = np.arange(self.X.shape[0])
    batch_index = sample_index[self.batch_size*index:self.batch_size*(index+1)]
    X, y = self.__data_generation(batch_index)

    return X, y

def on_epoch_end(self):
    self.indexes = np.arange(len(self.X))
    if self.shuffle == True:
        np.random.shuffle(self.indexes)

def converter(self, x):
    l = []
    for e in x:
        l.append(e.toarray().flatten())
    return np.array(l)

def __data_generation(self, batch_index):
    X_temp = self.converter(self.X[batch_index]).reshape(1, self.batch_size, -1)
    y_temp = self.converter(self.y[batch_index]).reshape(1, self.batch_size, -1)
                 
    return X_temp, y_temp`
It takes one vector containing scipy's sparse matrix and convert it in numpy's arrays
The call to fit_generator() looks like this:
`params = {'batch_size': 256,
'shuffle': True}
batch_size= 256
training_generator = DataGenerator(np.array(train_X), np.array(train_Y), **params)
batch_size=batch_size, shuffle=False), epochs=5, steps_per_epoch=int(np.array(train_X).shape[0]/batch_size))
autoencoder.fit_generator(generator=training_generator, epochs=2)`
and the model looks like:
`from keras.layers import Input, Dense
from keras.models import Model
input_hotelname = Input(shape=(1,ohe.n_values_[0]))
encoded = Dense(int((ohe.n_values_[0])/2), activation='relu')(input_hotelname)
encoded = Dense(int((ohe.n_values_[0])/3), activation='relu')(encoded)
decoded = Dense(int((ohe.n_values_[0])/3), activation='relu')(encoded)
decoded = Dense(int((ohe.n_values_[0])/2), activation='relu')(decoded)
decoded = Dense((ohe.n_values_[0]), activation='sigmoid')(decoded)
autoencoder = Model(input_hotelname, decoded)
autoencoder.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])`
but, after the batch generation, my code is returning one array with other shape:
Error when checking input: expected input_6 to have shape (1, 7135) but got array with shape (256, 7135)
is it not expected that my generator returns an array of the size of the batch (1, 256, len(oheVector))?