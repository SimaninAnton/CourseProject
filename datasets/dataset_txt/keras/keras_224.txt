RubensZimbres commented on 20 May 2019
I'm running a time series model using Keras Pruning to a first neural net layer plus Tensorflow Probability to a second layer, using the following code:
from tensorflow_model_optimization.sparsity import keras as sparsity
from tensorflow.python import keras
import tensorflow_probability as tfp
from tensorflow_model_optimization.sparsity import keras as sparsity
import tensorflow.compat.v1 as tf

tf.disable_v2_behavior()

pruning_params = {
      'pruning_schedule': sparsity.PolynomialDecay(initial_sparsity=0.50,
                                                   final_sparsity=0.90,
                                                   begin_step=20,
                                                   end_step=end_step,
                                                   frequency=100)
}
tfd = tfp.distributions

input_shape=x_train.shape

init = tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(init)
    pruned_model = tf.keras.Sequential([
        sparsity.prune_low_magnitude(
            tf.keras.layers.Dense(10, activation='relu',kernel_initializer='glorot_uniform'),
            **pruning_params),
      tfp.layers.DistributionLambda(lambda t: tfd.Normal(loc=t, scale=1))
    ])
    
    negloglik = lambda x, rv_x: -rv_x.log_prob(x)
        
    callbacks = [
    sparsity.UpdatePruningStep(),
    sparsity.PruningSummaries(log_dir='D:\Python\logs2', profile_batch=0)]
    pruned_model.compile(optimizer=tf.keras.optimizers.Adam(lr=0.0001), loss=negloglik)

    # ERROR HERE
    pruned_model.fit(x_train,y_train, epochs=50, verbose=True, batch_size=16,callbacks=callbacks)
    
    yhat2 = pruned_model(np.array(dataframe.iloc[:,1]).T.astype(np.float32).reshape(-1,1))
    mean02 = tf.convert_to_tensor(yhat2)
    mean2 = sess.run(mean02)    
    stddev2 = yhat2.stddev()
    mean_plus_2_std2 = sess.run(mean2 - 3. * stddev2)
    mean_minus_2_std2 = sess.run(mean2 + 3. * stddev2)
The model compiles (as long as I don't insert input_shape in Dense layer, before **params) but the model.fit brings the following issue, related to weights:
  File "<ipython-input-188-e8bce740e7ac>", line 20, in <module>
    pruned_model.fit(x_train,y_train, epochs=50, verbose=True, batch_size=16,callbacks=callbacks)

  File "C:\Users\Rubens\Anaconda3\lib\site-packages\tensorflow\python\keras\engine\training.py", line 806, in fit
    shuffle=shuffle)

  File "C:\Users\Rubens\Anaconda3\lib\site-packages\tensorflow\python\keras\engine\training.py", line 2503, in _standardize_user_data
    self._set_inputs(cast_inputs)

  File "C:\Users\Rubens\Anaconda3\lib\site-packages\tensorflow\python\training\tracking\base.py", line 456, in _method_wrapper
    result = method(self, *args, **kwargs)

  File "C:\Users\Rubens\Anaconda3\lib\site-packages\tensorflow\python\keras\engine\training.py", line 2773, in _set_inputs
    outputs = self.call(inputs, training=training)

  File "C:\Users\Rubens\Anaconda3\lib\site-packages\tensorflow\python\keras\engine\sequential.py", line 256, in call
    outputs = layer(inputs, **kwargs)

  File "C:\Users\Rubens\Anaconda3\lib\site-packages\tensorflow\python\keras\engine\base_layer.py", line 594, in __call__
    self._maybe_build(inputs)

  File "C:\Users\Rubens\Anaconda3\lib\site-packages\tensorflow\python\keras\engine\base_layer.py", line 1713, in _maybe_build
    self.build(input_shapes)

  File "C:\Users\Rubens\Anaconda3\lib\site-packages\tensorflow_model_optimization\python\core\sparsity\keras\pruning_wrapper.py", line 175, in build
    self.prunable_weights = self.layer.get_prunable_weights()

  File "C:\Users\Rubens\Anaconda3\lib\site-packages\tensorflow_model_optimization\python\core\sparsity\keras\prune_registry.py", line 169, in get_prunable_weights
    return [getattr(layer, weight) for weight in cls._weight_names(layer)]

  File "C:\Users\Rubens\Anaconda3\lib\site-packages\tensorflow_model_optimization\python\core\sparsity\keras\prune_registry.py", line 169, in <listcomp>
    return [getattr(layer, weight) for weight in cls._weight_names(layer)]

AttributeError: 'Dense' object has no attribute 'kernel'
The error relates to prune_registry.py;
    def get_prunable_weights():
      return [getattr(layer, weight) for weight in cls._weight_names(layer)]
How can I overcome this issue? Tensorflow version is 2.0.0a0 and Keras==2.2.4.
Thanks in advance