ngopee commented on 1 Feb 2016
Hi,
I am solving an NLP task and I am trying to model it directly as a sequence using LSTM. I am trying to use my own word vectors and from previous post I saw people passing it as weight to the Embedding layer. However, I am having a hard time structuring the Input and output to different layers.
Here is a sample of my input:
X_train =
[
 [ 8496  1828  …5447]
 [ 9096  8895  …13890]
 [ 5775   115 … 15037]
 [ 6782  9918  …  5048]
]


Y_train=
[
array([[ 0.,  0.,  0.,  1.], [ 0.,  0.,  1.,  0.], …[ 0.,  0.,  0.,  1.]]), 
array([[ 0.,  0.,  1.,  0.], [ 0.,  0.,  0.,  1.],…[ 0.,  0.,  1.,  0.]]), 
array([[ 0.,  0.,  1.,  0.], [ 0.,  0.,  0.,  1.], …[ 0.,  0.,  1.,  0.]]), 
array([[ 0.,  1.,  0.,  0.], [ 0.,  1.,  0.,  0.], …[ 0.,  1.,  0.,  0.]])
]
I am getting this error:
AssertionError: Theano Assert failed!
Apply node that caused the error: Assert(Elemwise{Composite{(i0 - EQ(i1, i2))}}.0, Elemwise{eq,no_inplace}.0)
Inputs types: [TensorType(int8, matrix), TensorType(int8, scalar)]
Inputs shapes: [(1, 100), ()]
Inputs strides: [(100, 1), ()]
Inputs values: ['not shown', array(0, dtype=int8)]
Here is my code:
vocab_dim = 300
maxlen = 100
batch_size = 1
n_epoch = 2
print('Keras Model...')
model = Sequential()  # or Graph or whatever
model.add(Embedding(output_dim=vocab_dim,
                    input_dim=n_symbols + 1,
                    mask_zero=True,
                    weights=[embedding_weights])) 
model.add(LSTM(vocab_dim, return_sequences=True))
model.add(Dropout(0.3))
model.add(TimeDistributedDense(input_dim=vocab_dim, output_dim=1))

print('Compiling the Model...')
model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              class_mode='categorical')

print("Train...")
model.fit(X_train, y_train, batch_size=batch_size, nb_epoch=n_epoch,
          validation_data=(X_test, y_test), show_accuracy=True)

print("Evaluate...")
score, acc = model.evaluate(X_test, y_test,
                            batch_size=batch_size,
                            show_accuracy=True)
print('Test score:', score)
print('Test accuracy:', acc)
Thank you very much!