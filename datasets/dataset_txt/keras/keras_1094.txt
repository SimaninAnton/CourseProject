krish240574 commented on 15 Apr 2018
Hello,
I've created a layer as follows :
from keras import backend as K
from keras.engine.topology import Layer
import numpy as np
import cv2
class MedianLayer(Layer):
def __init__(self, output_dim, input_shape, **kwargs):
    self.output_dim = output_dim
    super(MedianLayer, self).__init__(**kwargs)
def build(self, input_shape):
    # Create a trainable weight variable for this layer.
    self.kernel = self.add_weight(name='kernel', 
                                  shape=(input_shape[1], self.output_dim),
                                  initializer='uniform',
                                  trainable=True)
    super(MedianLayer, self).build(input_shape)  # Be sure to call this somewhere!
def call(self, x):
    return cv2.medianBlur(x,5) - x

def compute_output_shape(self, input_shape):
    return (input_shape[0], self.output_dim)
===================================================================
After this, I do the following:
k = Sequential()
layer = MedianLayer(output_dim=(100,100), input_shape=(100,100))
lc = layer.get_config()
x = np.random.randn(100, 100)
lc["input_shape"] = x.shape
lc["output_dim"] = x.shape
print(lc)
This prints :
{'name': 'median_layer_3', 'trainable': True, 'input_shape': (100, 100), 'output_dim': (100, 100)}
AS expected.
Now, when I do :
Instantiate a new layer object from old config
layer1 = layer.from_config(lc)
print(layer1.get_config())
print(lc)
I get the following :
{'name': 'median_layer_3', 'trainable': True} # New layer config
{'name': 'median_layer_3', 'trainable': True, 'input_shape': (100, 100), 'output_dim': (100, 100)} # old layer config, used as input for re-instantiation.
The re-instantiation of another layer object using an existing layer config is failing - any clues highly appreciated.
Thank you.
Kumar