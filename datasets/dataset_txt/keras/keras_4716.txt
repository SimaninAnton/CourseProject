m1sk commented on 25 Jul 2016 â€¢
edited
Currently I'm trying to use multiple vgg16 models from the keras model zoo to classify videos.
At this stage I'm taking only a few frames from each video to classify the whole video.
What I do is I take a VGG model, popout the last two layers and merge a few of these models togethers.
But this method isn't working right now, when I try to train the network. I get an error from Theano about disconnected inputs, These inputs are apparently the inputs that I popped off the vgg model. So I think that might be the problem. Also I don't get this error if I don't load the weights for the vgg model.
Here is a gist that reproduces this error
https://gist.github.com/m1sk/b8ed6d43a5ea86ae51f193d5fc2c01b3
Also any advice with a better way to build this network will be appreciated.
Specs:
Latest Keras and Theano (from git) - updated today
Running on Windows 8.1 with Anaconda
The full text of the error:
DisconnectedInputError Traceback (most recent call last)
in ()
79 y_train = np.random.randint(2, size=examples)
80
---> 81 merged_model.fit(x_train,y_train)
N:\Programs\Anaconda\lib\site-packages\keras-1.0.6-py2.7.egg\keras\models.pyc in fit(self, x, y, batch_size, nb_epoch, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, **kwargs)
430 shuffle=shuffle,
431 class_weight=class_weight,
--> 432 sample_weight=sample_weight)
433
434 def evaluate(self, x, y, batch_size=32, verbose=1,
N:\Programs\Anaconda\lib\site-packages\keras-1.0.6-py2.7.egg\keras\engine\training.pyc in fit(self, x, y, batch_size, nb_epoch, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight)
1077 else:
1078 ins = x + y + sample_weights
-> 1079 self._make_train_function()
1080 f = self.train_function
1081
N:\Programs\Anaconda\lib\site-packages\keras-1.0.6-py2.7.egg\keras\engine\training.pyc in _make_train_function(self)
694 # get trainable weights
695 trainable_weights = collect_trainable_weights(self)
--> 696 training_updates = self.optimizer.get_updates(trainable_weights, self.constraints, self.total_loss)
697 updates = self.updates + training_updates
698
N:\Programs\Anaconda\lib\site-packages\keras-1.0.6-py2.7.egg\keras\optimizers.pyc in get_updates(self, params, constraints, loss)
119
120 def get_updates(self, params, constraints, loss):
--> 121 grads = self.get_gradients(loss, params)
122 lr = self.lr * (1. / (1. + self.decay * self.iterations))
123 self.updates = [K.update_add(self.iterations, 1)]
N:\Programs\Anaconda\lib\site-packages\keras-1.0.6-py2.7.egg\keras\optimizers.pyc in get_gradients(self, loss, params)
51
52 def get_gradients(self, loss, params):
---> 53 grads = K.gradients(loss, params)
54 if hasattr(self, 'clipnorm') and self.clipnorm > 0:
55 norm = K.sqrt(sum([K.sum(K.square(g)) for g in grads]))
N:\Programs\Anaconda\lib\site-packages\keras-1.0.6-py2.7.egg\keras\backend\theano_backend.pyc in gradients(loss, variables)
655
656 def gradients(loss, variables):
--> 657 return T.grad(loss, variables)
658
659
N:\Programs\Anaconda\lib\site-packages\theano-0.9.0.dev2-py2.7.egg\theano\gradient.pyc in grad(cost, wrt, consider_constant, disconnected_inputs, add_names, known_grads, return_disconnected, null_gradients)
531 if elem not in var_to_app_to_idx and elem is not cost
532 and elem not in grad_dict:
--> 533 handle_disconnected(elem)
534 grad_dict[elem] = disconnected_type()
535
N:\Programs\Anaconda\lib\site-packages\theano-0.9.0.dev2-py2.7.egg\theano\gradient.pyc in handle_disconnected(var)
518 elif disconnected_inputs == 'raise':
519 message = utils.get_variable_trace_string(var)
--> 520 raise DisconnectedInputError(message)
521 else:
522 raise ValueError("Invalid value for keyword "
DisconnectedInputError:
Backtrace when that variable is created:
File "kerasmodelzoo\vgg16.py", line 53, in model
vgg16_model.add(Dense(1000, activation='softmax'))
File "N:\Programs\Anaconda\lib\site-packages\keras-1.0.6-py2.7.egg\keras\models.py", line 146, in add
output_tensor = layer(self.outputs[0])
File "N:\Programs\Anaconda\lib\site-packages\keras-1.0.6-py2.7.egg\keras\engine\topology.py", line 458, in call
self.build(input_shapes[0])
File "N:\Programs\Anaconda\lib\site-packages\keras-1.0.6-py2.7.egg\keras\layers\core.py", line 604, in build
name='{}_W'.format(self.name))
File "N:\Programs\Anaconda\lib\site-packages\keras-1.0.6-py2.7.egg\keras\initializations.py", line 59, in glorot_uniform
return uniform(shape, s, name=name)
File "N:\Programs\Anaconda\lib\site-packages\keras-1.0.6-py2.7.egg\keras\initializations.py", line 32, in uniform
return K.random_uniform_variable(shape, -scale, scale, name=name)
File "N:\Programs\Anaconda\lib\site-packages\keras-1.0.6-py2.7.egg\keras\backend\theano_backend.py", line 111, in random_uniform_variable
dtype=dtype, name=name)
File "N:\Programs\Anaconda\lib\site-packages\keras-1.0.6-py2.7.egg\keras\backend\theano_backend.py", line 40, in variable
return theano.shared(value=value, name=name, strict=False)