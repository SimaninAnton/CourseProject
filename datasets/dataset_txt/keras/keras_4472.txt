idioluck commented on 31 Aug 2016
Error Message is below (Full Code is attached)
Using Theano backend.
Using gpu device 0: GeForce GTX 1060 3GB (CNMeM is enabled with initial size: 81.0% of memory, cuDNN 5005)
(6L, 3L, 150L, 150L) <- this is data for predict
Traceback (most recent call last):
File "C:\Program Files (x86)\JetBrains\PyCharm Edu 2.0.4\helpers\pydev\pydevd.py", line 2411, in
globals = debugger.run(setup['file'], None, None, is_module)
File "C:\Program Files (x86)\JetBrains\PyCharm Edu 2.0.4\helpers\pydev\pydevd.py", line 1802, in run
launch(file, globals, locals) # execute the script
File "C:/Users/byoru/PycharmProjects/MailLession/FirstNN/Canvas.py", line 50, in
output = model.predict(testarrnp, batch_size=2,verbose=1)
File "c:\program files (x86)\microsoft visual studio 12.0\vc\theano\keras\keras\models.py", line 664, in predict
return self.model.predict(x, batch_size=batch_size, verbose=verbose)
File "c:\program files (x86)\microsoft visual studio 12.0\vc\theano\keras\keras\engine\training.py", line 1180, in predict
batch_size=batch_size, verbose=verbose)
File "c:\program files (x86)\microsoft visual studio 12.0\vc\theano\keras\keras\engine\training.py", line 879, in _predict_loop
batch_outs = f(ins_batch)
File "c:\program files (x86)\microsoft visual studio 12.0\vc\theano\keras\keras\backend\theano_backend.py", line 655, in call
return self.function(*inputs)
File "c:\program files (x86)\microsoft visual studio 12.0\vc\theano\theano\compile\function_module.py", line 879, in call
storage_map=getattr(self.fn, 'storage_map', None))
File "c:\program files (x86)\microsoft visual studio 12.0\vc\theano\theano\gof\link.py", line 325, in raise_with_op
reraise(exc_type, exc_value, exc_trace)
File "c:\program files (x86)\microsoft visual studio 12.0\vc\theano\theano\compile\function_module.py", line 866, in call
self.fn() if output_subset is None else
File "c:\program files (x86)\microsoft visual studio 12.0\vc\theano\theano\gof\op.py", line 908, in rval
r = p(n, [x[0] for x in i], o)
File "c:\program files (x86)\microsoft visual studio 12.0\vc\theano\theano\tensor\nnet\abstract_conv.py", line 848, in perform
conv_out = self.conv2d(img, kern, mode="valid", dilation=self.filter_dilation)
File "c:\program files (x86)\microsoft visual studio 12.0\vc\theano\theano\tensor\nnet\abstract_conv.py", line 775, in conv2d
dilated_kern[n, im0, ...],
IndexError: index 1 is out of bounds for axis 1 with size 1
Apply node that caused the error: AbstractConv2d{border_mode='valid', subsample=(1, 1), filter_flip=True, imshp=(None, None, None, None), kshp=(32, 3, 3, 3), filter_dilation=(1, 1)}(convolution2d_input_1, HostFromGpu.0)
Toposort index: 33
Inputs types: [TensorType(float32, 4D), TensorType(float32, 4D)]
Inputs shapes: [(2L, 3L, 150L, 150L), (32L, 1L, 3L, 3L)]
Inputs strides: [(270000L, 90000L, 600L, 4L), (36L, 36L, 12L, 4L)]
Inputs values: ['not shown', 'not shown']
Inputs type_num: [11, 11]
Outputs clients: [[Elemwise{add,no_inplace}(AbstractConv2d{border_mode='valid', subsample=(1, 1), filter_flip=True, imshp=(None, None, None, None), kshp=(32, 3, 3, 3), filter_dilation=(1, 1)}.0, Reshape{4}.0)]]
Backtrace when the node is created(use Theano flag traceback.limit=N to make it longer):
File "C:/Users/byoru/PycharmProjects/MailLession/FirstNN/Canvas.py", line 11, in
model.add(Convolution2D(32, 3, 3, input_shape=(3, 150, 150)))
File "c:\program files (x86)\microsoft visual studio 12.0\vc\theano\keras\keras\models.py", line 275, in add
layer.create_input_layer(batch_input_shape, input_dtype)
File "c:\program files (x86)\microsoft visual studio 12.0\vc\theano\keras\keras\engine\topology.py", line 367, in create_input_layer
self(x)
File "c:\program files (x86)\microsoft visual studio 12.0\vc\theano\keras\keras\engine\topology.py", line 511, in call
self.add_inbound_node(inbound_layers, node_indices, tensor_indices)
File "c:\program files (x86)\microsoft visual studio 12.0\vc\theano\keras\keras\engine\topology.py", line 569, in add_inbound_node
Node.create_node(self, inbound_layers, node_indices, tensor_indices)
File "c:\program files (x86)\microsoft visual studio 12.0\vc\theano\keras\keras\engine\topology.py", line 150, in create_node
output_tensors = to_list(outbound_layer.call(input_tensors[0], mask=input_masks[0]))
File "c:\program files (x86)\microsoft visual studio 12.0\vc\theano\keras\keras\layers\convolutional.py", line 353, in call
filter_shape=self.W_shape)
File "c:\program files (x86)\microsoft visual studio 12.0\vc\theano\keras\keras\backend\theano_backend.py", line 1073, in conv2d
filter_shape=filter_shape)
Debugprint of the apply node:
AbstractConv2d{border_mode='valid', subsample=(1, 1), filter_flip=True, imshp=(None, None, None, None), kshp=(32, 3, 3, 3), filter_dilation=(1, 1)} [id A] <TensorType(float32, 4D)> ''
|convolution2d_input_1 [id B] <TensorType(float32, 4D)>
|HostFromGpu [id C] <TensorType(float32, 4D)> ''
|convolution2d_1_W [id D] <CudaNdarrayType(float32, 4D)>
Storage map footprint:
dense_1_W, Shared Input, Shape: (18496, 64), ElemSize: 4 Byte(s), TotalSize: 4734976 Byte(s)
convolution2d_input_1, Input, Shape: (2L, 3L, 150L, 150L), ElemSize: 4 Byte(s), TotalSize: 540000 Byte(s)
<CudaNdarrayType(float32, vector)>, Shared Input, Shape: (92160,), ElemSize: 4 Byte(s), TotalSize: 368640 Byte(s)
<CudaNdarrayType(float32, vector)>, Shared Input, Shape: (92160,), ElemSize: 4 Byte(s), TotalSize: 368640 Byte(s)
<CudaNdarrayType(float32, vector)>, Shared Input, Shape: (92160,), ElemSize: 4 Byte(s), TotalSize: 368640 Byte(s)
convolution2d_3_W, Shared Input, Shape: (64, 32, 3, 3), ElemSize: 4 Byte(s), TotalSize: 73728 Byte(s)
convolution2d_2_W, Shared Input, Shape: (32, 32, 3, 3), ElemSize: 4 Byte(s), TotalSize: 36864 Byte(s)
HostFromGpu.0, Shape: (32L, 1L, 3L, 3L), ElemSize: 4 Byte(s), TotalSize: 1152 Byte(s)
convolution2d_1_W, Shared Input, Shape: (32, 1, 3, 3), ElemSize: 4 Byte(s), TotalSize: 1152 Byte(s)
convolution2d_3_b, Shared Input, Shape: (64,), ElemSize: 4 Byte(s), TotalSize: 256 Byte(s)
dense_1_b, Shared Input, Shape: (64,), ElemSize: 4 Byte(s), TotalSize: 256 Byte(s)
dense_2_W, Shared Input, Shape: (64, 1), ElemSize: 4 Byte(s), TotalSize: 256 Byte(s)
convolution2d_1_b, Shared Input, Shape: (32,), ElemSize: 4 Byte(s), TotalSize: 128 Byte(s)
convolution2d_2_b, Shared Input, Shape: (32,), ElemSize: 4 Byte(s), TotalSize: 128 Byte(s)
TensorConstant{[ 1 32 1 1]}, Shape: (4L,), ElemSize: 4 Byte(s), TotalSize: 16 Byte(s)
TensorConstant{[ 1 64 1 1]}, Shape: (4L,), ElemSize: 4 Byte(s), TotalSize: 16 Byte(s)
TensorConstant{[ 1 32 1 1]}, Shape: (4L,), ElemSize: 4 Byte(s), TotalSize: 16 Byte(s)
Constant{0}, Shape: (), ElemSize: 8 Byte(s), TotalSize: 8.0 Byte(s)
Constant{0}, Shape: (), ElemSize: 8 Byte(s), TotalSize: 8.0 Byte(s)
TensorConstant{0.5}, Shape: (), ElemSize: 4 Byte(s), TotalSize: 4.0 Byte(s)
dense_2_b, Shared Input, Shape: (1,), ElemSize: 4 Byte(s), TotalSize: 4 Byte(s)
TensorConstant{0.5}, Shape: (), ElemSize: 4 Byte(s), TotalSize: 4.0 Byte(s)
DimShuffle{x,x,x,x}.0, Shape: (1L, 1L, 1L, 1L), ElemSize: 4 Byte(s), TotalSize: 4 Byte(s)
TensorConstant{0.800000011921}, Shape: (), ElemSize: 4 Byte(s), TotalSize: 4.0 Byte(s)
TensorConstant{0.800000011921}, Shape: (), ElemSize: 4 Byte(s), TotalSize: 4.0 Byte(s)
TensorConstant{0.5}, Shape: (), ElemSize: 4 Byte(s), TotalSize: 4.0 Byte(s)
DimShuffle{x,x}.0, Shape: (1L, 1L), ElemSize: 4 Byte(s), TotalSize: 4 Byte(s)
TensorConstant{0.5}, Shape: (), ElemSize: 4 Byte(s), TotalSize: 4.0 Byte(s)
TensorConstant{0.5}, Shape: (), ElemSize: 4 Byte(s), TotalSize: 4.0 Byte(s)
TensorConstant{1.0}, Shape: (), ElemSize: 4 Byte(s), TotalSize: 4.0 Byte(s)
TensorConstant{0.5}, Shape: (), ElemSize: 4 Byte(s), TotalSize: 4.0 Byte(s)
DimShuffle{x,x,x,x}.0, Shape: (1L, 1L, 1L, 1L), ElemSize: 4 Byte(s), TotalSize: 4 Byte(s)
DimShuffle{x,x,x,x}.0, Shape: (1L, 1L, 1L, 1L), ElemSize: 4 Byte(s), TotalSize: 4 Byte(s)
TensorConstant{0.800000011921}, Shape: (), ElemSize: 4 Byte(s), TotalSize: 4.0 Byte(s)
TensorConstant{0.800000011921}, Shape: (), ElemSize: 4 Byte(s), TotalSize: 4.0 Byte(s)
TensorConstant{0.0}, Shape: (), ElemSize: 4 Byte(s), TotalSize: 4.0 Byte(s)
DimShuffle{x,x,x,x}.0, Shape: (1L, 1L, 1L, 1L), ElemSize: 1 Byte(s), TotalSize: 1 Byte(s)
DimShuffle{x,x,x,x}.0, Shape: (1L, 1L, 1L, 1L), ElemSize: 1 Byte(s), TotalSize: 1 Byte(s)
DimShuffle{x,x}.0, Shape: (1L, 1L), ElemSize: 1 Byte(s), TotalSize: 1 Byte(s)
keras_learning_phase, Input, Shape: (), ElemSize: 1 Byte(s), TotalSize: 1.0 Byte(s)
TotalSize: 6494952.0 Byte(s) 0.006 GB
TotalSize inputs: 6493781.0 Byte(s) 0.006 GB
---------- Full Code ----------------------------
import numpy as np
import os
from PIL import Image
from keras.models import Sequential
from keras.layers import Convolution2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense
from keras.preprocessing.image import ImageDataGenerator
model = Sequential()
model.add(Convolution2D(32, 3, 3, input_shape=(3, 150, 150)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Convolution2D(32, 3, 3))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.2))
model.add(Convolution2D(64, 3, 3))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.2))
model.add(Flatten()) # this converts our 3D feature maps to 1D feature vectors
model.add(Dense(64))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(1))
model.add(Activation('sigmoid'))
model.load_weights('weight1.h5')
model.compile(loss='binary_crossentropy',
optimizer='rmsprop',
metrics=['accuracy'])
path = 'test'
testarr = []
for item in os.listdir(path):
imgpath = path + '' + item
img = Image.open(imgpath)
resizedimg = img.resize((150,150),Image.ANTIALIAS)
data = np.array( resizedimg )
data2 = data.transpose(2,0,1)
testarr.append(data2)
testarrnp = np.asarray(testarr)
print testarrnp.shape
output = model.predict(testarrnp, batch_size=2,verbose=1)
print output