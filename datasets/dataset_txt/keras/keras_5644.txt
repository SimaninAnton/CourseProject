Contributor
llcao commented on 29 Mar 2016
I modified the example (MNIST-MLP) to a binary classification model, and got 1.0 validation accuracy using model.evaluate().
However, if I use model.predict() and calculate the accuracy by myself, the accuracy is 0.997. I think this is more than rounding error but could not figure out how to fix.
I am attaching my code below.
from __future__ import print_function
import numpy as np
np.random.seed(1337)  # for reproducibility

from keras.datasets import mnist
from keras.models import Sequential
from keras.layers.core import Dense, Dropout, Activation
from keras.optimizers import SGD, Adam, RMSprop
from keras.utils import np_utils


batch_size = 128
nb_classes = 10
nb_epoch = 2

# the data, shuffled and split between train and test sets
(X_train, y_train), (X_test, y_test) = mnist.load_data()

X_train = X_train.reshape(60000, 784)
X_test = X_test.reshape(10000, 784)
X_train = X_train.astype('float32')
X_test = X_test.astype('float32')
X_train /= 255
X_test /= 255
print(X_train.shape[0], 'train samples')
print(X_test.shape[0], 'test samples')


binary=True
if not binary: # convert class vectors to binary class matrices
    Y_train = np_utils.to_categorical(y_train, nb_classes)
    Y_test = np_utils.to_categorical(y_test, nb_classes)
else: # my modification as binary classification
    c = 1
    Y_train = (y_train==c).astype(np.int32)
    Y_test = (y_test==c).astype(np.int32)

model = Sequential()
model.add(Dense(512, input_shape=(784,)))
model.add(Activation('relu'))
model.add(Dropout(0.2))
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dropout(0.2))

if not binary: 
    model.add(Dense(10))
    model.add(Activation('softmax'))
    rms = RMSprop()
    model.compile(loss='categorical_crossentropy', optimizer=rms)

else:
    model.add(Dense(1))
    model.add(Activation('sigmoid'))
    rms = RMSprop()
    model.compile(loss='binary_crossentropy', optimizer=rms)


model.fit(X_train, Y_train,
          batch_size=batch_size, nb_epoch=nb_epoch,
          show_accuracy=True, verbose=2,
          validation_data=(X_test, Y_test))
score = model.evaluate(X_test, Y_test,
                       show_accuracy=True, verbose=0)
print('Test score:', score[0])
print('Test accuracy:', score[1])

if binary:
    esti = model.predict(X_test)
    estiy = (esti>0.5)
    acc = np.mean(estiy[:,0] == Y_test)
    print ('my acc:', acc)