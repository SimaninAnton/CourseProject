monktastic commented on 19 Jan 2018 â€¢
edited
I'm adding a couple of simple layers after VGG16. The tf.py_func layer causes a strange error.
Note that if I replace VGG16 with a much simpler model (e.g., one that just flattens the image), it works fine. But ResNet50 causes the same error.
(Also note that this is an unrealistic model, simplified for repro purposes.)
import numpy as np

import tensorflow as tf

import keras
from keras.layers import Input, Lambda, Flatten
from keras.models import Model
from keras.applications.vgg16 import VGG16

# Load VGG16
net = VGG16(include_top=True, weights='imagenet', input_shape=(224, 224, 3))
x_train = np.zeros((1, 224, 224, 3), dtype=np.float32)
y_train = np.zeros((1, 1), dtype=np.float32)

# (?, 1000) => (?, 1)
out1 = Lambda(lambda x: tf.reduce_sum(x, axis=-1, keep_dims=True), name='sums')(net.outputs[0])

# This is the (identity) py_func that causes the error for some reason.
def py_func(x):
    tensor = tf.py_func(lambda y: y, [x], tf.float32)
    # (Or else "TypeError: object of type 'NoneType' has no len())
    tensor.set_shape(x.shape)
    return tensor

out2 = Lambda(py_func, name='py_func')(out1)

# compile fails. Note that using out1 instead of out2 succeeds.
facenet = Model(net.inputs, out2)
facenet.compile(
    loss=keras.losses.mae,
    optimizer=keras.optimizers.Adam(lr=1e-5))
facenet.fit(x_train, y_train)
Error:
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-21-4c5e910353fd> in <module>()
      5     optimizer=keras.optimizers.Adam(lr=1e-5))
      6 
----> 7 facenet.fit(x_train, y_train)

/home/ml/.local/lib/python2.7/site-packages/keras/engine/training.pyc in fit(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, **kwargs)
   1575         else:
   1576             ins = x + y + sample_weights
-> 1577         self._make_train_function()
   1578         f = self.train_function
   1579 

/home/ml/.local/lib/python2.7/site-packages/keras/engine/training.pyc in _make_train_function(self)
    958                     training_updates = self.optimizer.get_updates(
    959                         params=self._collected_trainable_weights,
--> 960                         loss=self.total_loss)
    961                 updates = self.updates + training_updates
    962                 # Gets loss and metrics. Updates weights at each call.

/home/ml/.local/lib/python2.7/site-packages/keras/legacy/interfaces.pyc in wrapper(*args, **kwargs)
     85                 warnings.warn('Update your `' + object_name +
     86                               '` call to the Keras 2 API: ' + signature, stacklevel=2)
---> 87             return func(*args, **kwargs)
     88         wrapper._original_function = func
     89         return wrapper

/home/ml/.local/lib/python2.7/site-packages/keras/optimizers.pyc in get_updates(self, loss, params)
    430 
    431         for p, g, m, v in zip(params, grads, ms, vs):
--> 432             m_t = (self.beta_1 * m) + (1. - self.beta_1) * g
    433             v_t = (self.beta_2 * v) + (1. - self.beta_2) * K.square(g)
    434             p_t = p - lr_t * m_t / (K.sqrt(v_t) + self.epsilon)

/home/ml/.local/lib/python2.7/site-packages/tensorflow/python/ops/math_ops.pyc in binary_op_wrapper(x, y)
    883       if not isinstance(y, sparse_tensor.SparseTensor):
    884         try:
--> 885           y = ops.convert_to_tensor(y, dtype=x.dtype.base_dtype, name="y")
    886         except TypeError:
    887           # If the RHS is not a tensor, it might be a tensor aware object

/home/ml/.local/lib/python2.7/site-packages/tensorflow/python/framework/ops.pyc in convert_to_tensor(value, dtype, name, preferred_dtype)
    834       name=name,
    835       preferred_dtype=preferred_dtype,
--> 836       as_ref=False)
    837 
    838 

/home/ml/.local/lib/python2.7/site-packages/tensorflow/python/framework/ops.pyc in internal_convert_to_tensor(value, dtype, name, as_ref, preferred_dtype, ctx)
    924 
    925     if ret is None:
--> 926       ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)
    927 
    928     if ret is NotImplemented:

/home/ml/.local/lib/python2.7/site-packages/tensorflow/python/framework/constant_op.pyc in _constant_tensor_conversion_function(v, dtype, name, as_ref)
    227                                          as_ref=False):
    228   _ = as_ref
--> 229   return constant(v, dtype=dtype, name=name)
    230 
    231 

/home/ml/.local/lib/python2.7/site-packages/tensorflow/python/framework/constant_op.pyc in constant(value, dtype, shape, name, verify_shape)
    206   tensor_value.tensor.CopyFrom(
    207       tensor_util.make_tensor_proto(
--> 208           value, dtype=dtype, shape=shape, verify_shape=verify_shape))
    209   dtype_value = attr_value_pb2.AttrValue(type=tensor_value.tensor.dtype)
    210   const_tensor = g.create_op(

/home/ml/.local/lib/python2.7/site-packages/tensorflow/python/framework/tensor_util.pyc in make_tensor_proto(values, dtype, shape, verify_shape)
    369   else:
    370     if values is None:
--> 371       raise ValueError("None values not supported.")
    372     # if dtype is provided, forces numpy array to be the type
    373     # provided if possible.

ValueError: None values not supported.