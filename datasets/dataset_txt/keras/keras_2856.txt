aquastar commented on 25 Mar 2017 â€¢
edited
I want to implement a customized loss function in which I want to manually modify the current weights and see how the middle representations change given current input batch.
[My question] Is it possible to get input batch during each batch training in loss function?
my current draft is:
def new_loss(model):
    def loss(y_true, y_pred): 
        # get layers' weights
        weights = [layer.get_weigths() for layer in model.layers]
        # an fake weights modification
        new_weights = modification(weights) 

        # get middle representation before weights modification
        activation_before = K.function([model.layers[0].input], [model.layers[2].output])

        model.load(new_weights)
        # get middle representation after weights modification
        activation_after = K.function([model.layers[0].input], [model.layers[2].output])
        
        # fake return for test purpose only
        return 1.0
    return loss

model = Model(inputs=[a, b, c, d], outputs=[main_output])
model.compile(optimizer='sgd', loss=new_loss(model))
A possible solution is pass the whole input [a,b,c,d] to the new loss and slice it by batch size, but I think it might not be a good way