Contributor
kudkudak commented on 23 Oct 2016 â€¢
edited
If model has shared weights and 2 layers calling each other with shared weights, it introduces a cyclic dependency.
z = keras.layers.Input(shape=(2,))
A = keras.layers.Dense(2)
B = keras.layers.Dense(2)
output = A(B(A(B(z))))
M = keras.models.Model(input=z, output=output)
M.save("test.hd5")
keras.models.load_model("test.hd5")
Then keras/engine/topology.py:2362 assert inbound_layer_name in created_layers, 'Missing layer: %s' % inbound_layer_name throws
AssertionError: Missing layer: dense_1
Is there a simple fix? Worth noting that M.load_weights("test.hd5") does work, but unfortunately I need load_model to work