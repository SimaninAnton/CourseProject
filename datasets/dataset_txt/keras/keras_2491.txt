Contributor
marczellm commented on 2 May 2017
This function:
def sample(preds, temperature=1.0):
    # helper function to sample an index from a probability array
    preds = np.asarray(preds).astype('float64')
    preds = np.log(preds) / temperature
    exp_preds = np.exp(preds)
    preds = exp_preds / np.sum(exp_preds)
    probas = np.random.multinomial(1, preds, 1)
return np.argmax(probas)
transforms the distribution like this:
f(p, T) = exp(ln(p)/T) = exp(ln(p)) ^ (1/T) = p ^ (1/T)
so it seems like an oversight to do the logarithm and then exponentiate back again.
Now p^(1/T) and exp(p/T) are both valid transforms for this task, see Softmax sampling at Wikipedia and Stanford, but which one was intended here?