hqabcxyxz commented on 22 Nov 2018 â€¢
edited
I am just a Keras beginner and I try to implement a OCR project by Keras.So I try to learn from Keras OCR example.Here's a link!
I do not understand why "get_output_size" in "class TextImageGenerator" is "len(alphabet) + 1" but not len(alphabet)? I will appreciate it if someone can tell me why.
My another question is in
`
def build_word_list(self, num_words, max_string_len=None, mono_fraction=0.5):
assert max_string_len <= self.absolute_max_string_len
assert num_words % self.minibatch_size == 0
assert (self.val_split * num_words) % self.minibatch_size == 0
self.num_words = num_words
self.string_list = [''] * self.num_words
tmp_string_list = []
self.max_string_len = max_string_len
self.Y_data = np.ones([self.num_words, self.absolute_max_string_len]) * -1
self.X_text = []
self.Y_len = [0] * self.num_words
    def _is_length_of_word_valid(word):
        return (max_string_len == -1 or
                max_string_len is None or
                len(word) <= max_string_len)

    # monogram file is sorted by frequency in english speech
    with codecs.open(self.monogram_file, mode='r', encoding='utf-8') as f:
        for line in f:
            if len(tmp_string_list) == int(self.num_words * mono_fraction):
                break
            word = line.rstrip()
            if _is_length_of_word_valid(word):
                tmp_string_list.append(word)

    # bigram file contains common word pairings in english speech
    with codecs.open(self.bigram_file, mode='r', encoding='utf-8') as f:
        lines = f.readlines()
        for line in lines:
            if len(tmp_string_list) == self.num_words:
                break
            columns = line.lower().split()
            word = columns[0] + ' ' + columns[1]
            if is_valid_str(word) and _is_length_of_word_valid(word):
                tmp_string_list.append(word)
    if len(tmp_string_list) != self.num_words:
        raise IOError('Could not pull enough words'
                      'from supplied monogram and bigram files.')
    # interlace to mix up the easy and hard words
    self.string_list[::2] = tmp_string_list[:self.num_words // 2]
    self.string_list[1::2] = tmp_string_list[self.num_words // 2:]

    for i, word in enumerate(self.string_list):
        self.Y_len[i] = len(word)
        self.Y_data[i, 0:len(word)] = text_to_labels(word)
        self.X_text.append(word)
    self.Y_len = np.expand_dims(np.array(self.Y_len), 1)

    self.cur_val_index = self.val_split
    self.cur_train_index = 0 
`
why "self.Y_data" need MUL -1?