sanaullah-ashfat commented on 24 May 2019 â€¢
edited by ymodak
Please make sure that this is a Bug or a Feature Request and provide all applicable information asked by the template.
If your issue is an implementation question, please ask your question on StackOverflow or on the Keras Slack channel instead of opening a GitHub issue.
System information
Have I written custom code (as opposed to using example directory):
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
TensorFlow backend (yes / no): yes
TensorFlow version: 1.9.0'
Keras version: 2.2.1
Python version: 3.5
You can obtain the TensorFlow version with:
python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
You can obtain the Keras version with:
python -c 'import keras as k; print(k.version)'
Describe the current behavior
when i extract the the feature of the dense layer i got the features and labels but i did not get the all labels i expect 10 labels but i got 9 labels 1 label is missing why this is happening
Describe the expected behavior
Code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate the problem.
input_1 = Input(shape=(img_width,img_height,1))
#input_2 = Input(shape=(img_width,img_height,1))
input_3 = Input(shape=(img_width,img_height,1)) 
#input_4 = Input(shape=(img_width,img_height,1))

FF=10

output_1 = Conv2D(FF,(3,3), activation='sigmoid')(input_1)
output_1 = Conv2D(FF,(3,3), activation='sigmoid')(output_1 )
#output_1 = Conv2D(FF,(2,2), activation='relu')(output_1 )
#output_1 = Conv2D(FF,(2,2), activation='relu')(output_1 )
#output_1 = BatchNormalization()(output_1)
#output_1 = MaxPooling2D(pool_size=(2,2))(output_1)
output_1 = Dropout(0.2)(output_1)
output_1 = Flatten()(output_1)

#output_2 = Conv2D(FF,(2,2), activation='relu')(input_2)
#output_2 = Conv2D(FF,(2,2), activation='relu')(output_2 )
#output_2 = BatchNormalization()(output_2)
#output_2 = MaxPooling2D(pool_size=(2,2))(output_2)
#output_2 = Dropout(0.25)(output_2)
#output_2 = Flatten()(output_2)

output_3 = Conv2D(FF,(3,3), activation='sigmoid')(input_3)
output_3 = Conv2D(FF,(3,3), activation='sigmoid')(output_3 )
#output_3 = Conv2D(FF,(2,2), activation='relu')(output_3 )
#output_3 = Conv2D(FF,(2,2), activation='relu')(output_3 )
#output_3 = BatchNormalization()(output_3)
#output_3 = MaxPooling2D(pool_size=(2,2))(output_3)
output_3 = Dropout(0.2)(output_3)
output_3 = Flatten()(output_3)

#output_4 = Conv2D(FF,(2,2), activation='relu')(input_4)
#output_4 = Conv2D(FF,(2,2), activation='relu')(output_4 )
#output_4 = BatchNormalization()(output_4)
#output_4 = MaxPooling2D(pool_size=(2,2))(output_4)
#output_4 = Dropout(0.25)(output_4)
#output_4 = Flatten()(output_4)

inputs =[input_1,input_3]
outputs =[output_1,output_3]
combine = concatenate(outputs)

output = Dense(400,activation='sigmoid',name ='dense_1')(combine)
output = Dense(num_classes,activation='softmax')(output)

model = Model(inputs,[output])
model.compile(optimizer='adadelta', loss='categorical_crossentropy',
                        metrics=['accuracy', categorical_accuracy,mean_pred,recall,precision, fmeasure, matthews_correlation,kullback_leibler_divergence,binary_crossentropy])


hist=model.fit([X_train_g,X_train_b],Y_train,epochs=num_epoch, batch_size=batch_size,validation_data=([X_test_g,X_test_b],Y_test))  

extract =Model(model.input,[model.get_layer("dense_1").output,model.output])

extract.summary() 
test_feature,test_labels = extract.predict(XT)
Other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.