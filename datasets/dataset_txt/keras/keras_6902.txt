Contributor
vzhong commented on 2 Jul 2015
Hi,
I'm attempting to build a sequence model where at each time step, the input is the concatenation of representations from two lookup tables. The single lookup table case can be done with something like this:
net = Sequential()
net.add(Embedding(10, 2))
net.GRU(2, 1)
net.compile(loss='binary_crossentropy', optimizer='sgd')

X = np.arange(5).reshape((-1, 1))
Y = np.array([1, 0, 1, 0, 0]).reshape((-1, 1))
net.train(X, Y)
However, I'm having trouble getting the two lookup table case to work. This is my attempt:
e1 = Sequential()
e1.add(Embedding(5, 2))
e2 = Sequential()
e2.add(Embedding(10, 3))
net = Sequential()
net.add(Merge([e1, e2], mode='concat'))
net.add(GRU(5, 1))
net.compile(loss='binary_crossentropy', optimizer='sgd')

X = [
    np.array([1, 3, 3]).reshape((-1, 1)), # the first sequence of indices for lookup table 1
    np.array([2, 2, 0]).reshape((-1, 1)), # the second sequence of indices for lookup table 2
]
Y = np.array([1., 0., 1.]).reshape((-1, 1))
net.train(X, Y)
The error I'm getting is
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-14-772f824ecbef> in <module>()
      4 ]
      5 Y = np.array([1., 0., 1.]).reshape((-1, 1))
----> 6 net.train(X, Y)

/Users/victor/Developer/keras/keras/models.pyc in train(self, X, y, accuracy)
    170             return self._train_with_acc(*ins)
    171         else:
--> 172             return self._train(*ins)
    173 
    174 

/usr/local/lib/python2.7/site-packages/theano/compile/function_module.pyc in __call__(self, *args, **kwargs)
    604                         self.fn.nodes[self.fn.position_of_error],
    605                         self.fn.thunks[self.fn.position_of_error],
--> 606                         storage_map=self.fn.storage_map)
    607                 else:
    608                     # For the c linker We don't have access from

/usr/local/lib/python2.7/site-packages/theano/compile/function_module.pyc in __call__(self, *args, **kwargs)
    593         t0_fn = time.time()
    594         try:
--> 595             outputs = self.fn()
    596         except Exception:
    597             if hasattr(self.fn, 'position_of_error'):

ValueError: total size of new array must be unchanged
Apply node that caused the error: Reshape{2}(InplaceDimShuffle{1,0,2}.0, MakeVector.0)
Inputs types: [TensorType(float32, 3D), TensorType(int64, vector)]
Inputs shapes: [(1, 3, 5), (2,)]
Inputs strides: [(60, 20, 4), (8,)]
Inputs values: ['not shown', array([3, 2])]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Has anyone seen this before? Any ideas on how to proceed? Is the concatentation of Embeddings supported?