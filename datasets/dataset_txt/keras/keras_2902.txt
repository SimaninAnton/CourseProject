haoyangz commented on 22 Mar 2017 â€¢
edited
I wish to use Siamese network to distinguish a (text, image) pair from another similar pair.
I was following the official Siamese network example in which the basenetwork takes only one input. To take multiple input, I made the following change to create_basemodel() using "Functional API in Keras" following instructions here:
def create_basemodel():
    image_input = Input(shape=(4, 1, 101))
    text_input = Input(shape=(2,))

    conv1 = Conv2D(64, 1, 5, border_mode='same', input_shape=(4,1,101), \
                               activation='relu')(image_input)
    max1 = MaxPooling2D(pool_size=(1, 5),strides=(1,3),border_mode='same')(conv1)
    image_output = Flatten()(max1)

    concat = concatenate([image_output, text_input])
   
    f1 = Dense(32, activation='relu')(concat)
    f1_drop = Dropout(0.5)(f1)
    f2 = Dense(2, activation='softmax')(f1_drop)
    
    model = Model(inputs=[image_input, text_input],outputs=[f2])
    return model
And in the main function I did:
image_input_a = Input(shape=(4, 1, 101))
text_input_a = Input(shape=(2, ))
image_input_b = Input(shape=(4, 1, 101))
text_input_b = Input(shape=(2, ))
basemodel = create_basemodel()
processed_a = basemodel(image_input_a,text_input_a)
processed_b = basemodel(image_input_b,text_input_b)
The last two lines gave me the error __call__() takes exactly 2 arguments .
If I instead do:
processed_a = basemodel((image_input_a,text_input_a))
This gave me ValueError: Layer model_1 expects 2 inputs, but it received 1 input tensors. Input received: <built-in function input>.
It seems either way, I can't neither provide one input tensor or two tensors. I am wondering what would be the correct way to implement Siamese network with multi-input shared base-network as is in my case?