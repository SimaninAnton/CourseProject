kairosdojo commented on 25 Sep 2017
Hi @fchollet . First of all let me thank you for your amazing work on Keras.
I'm using keras=2.0.8 on the tensorflow-gpu=1.3.0 backend.
I'm trying to implement the use of class_weight on model.fit for a multi-label classification task with metrics categorical accuracy and weighted categorical accuracy.
I noticed that the output of val_categorical_accuracy is always equal to val_weighted_categorical_accuracy, which I guess is an incorrect behaviour.
My code looks roughly like this:
#This model has five classes which have an unbalanced representation of samples. I took the most represented and I rapported the others to it, having value 1
class_weight {0 : 1, 1 : 1.566, 2 : 22.34, 3 : 12.356, 4 : 29.981}


X_full, Y_full = full_set.as_matrix(columns=listColumnsInputs), full_set.as_matrix(columns=listColumnsOutputs)
X_train, Y_train = train_set.as_matrix(columns=listColumnsInputs), train_set.as_matrix(columns=listColumnsOutputs)
X_test, Y_test = test_set.as_matrix(columns=listColumnsInputs), test_set.as_matrix(columns=listColumnsOutputs)

X_full = X_full.reshape(len(X_full), len(listColumnsInputs))
X_train = X_train.reshape(len(X_train), len(listColumnsInputs))
X_test = X_test.reshape(len(X_test), len(listColumnsInputs))

batch_size = 128
nb_classes = len(listColumnsOutputs)

model = Sequential()
num_h = 100
numerolayers = 3
loss_function =  'mean_squared_logarithmic_error'
optimizer_function = 'SGD'

num_epoch = 1000
regularizerl2 = .0
regularizerl1 = .0

model.add(Dense(num_h, input_dim=len(listColumnsInputs), kernel_initializer='uniform', activation='relu', kernel_regularizer=regularizers.l2(regularizerl2), activity_regularizer=regularizers.l1(regularizerl1)))
for x in range(1, numerolayers): model.add(Dense(num_h, kernel_initializer='uniform', activation='relu', kernel_regularizer=regularizers.l2(regularizerl2), activity_regularizer=regularizers.l1(regularizerl1)))

model.add(Dense(len(listColumnsOutputs), kernel_initializer='uniform', activation='softmax'))

model.summary()

model.compile(loss=loss_function,  optimizer=optimizer_function, weighted_metrics=['categorical_accuracy'],  metrics=['categorical_accuracy'])

history = model.fit(X_train, Y_train, class_weight=class_weight, batch_size=batch_size, epochs=num_epoch, verbose=1, validation_data=(X_test, Y_test), callbacks=[TensorBoard(log_dir='./logs', histogram_freq=25, write_graph=True, write_images=False)])

score = model.evaluate(X_test, Y_test, verbose=0)
Is this a small bug? Am I wrong?
Thanks a lot for your time.
1