Contributor
danielegrattarola commented on 26 Nov 2018 â€¢
edited
Hi,
I'm trying to create a custom Layer where I want to use a Dense layer as part of the definition.
However, if I create the Dense layer inside the call() method of the custom Layer, the Dense layer does not get trained.
To fix it, a possibility is to re-implement the Dense layer as a method of the custom Layer, and manually call self.add_weight(...), but this is a bit weird and leads to code reuse. Plus, I'm almost sure that this was doable in the past.
I'm attaching a minimal script to reproduce the issue: the Dense layer is not trained when wrapped inside CustomLayer, but works as expected on its own.
https://gist.github.com/danielegrattarola/ee4c7b28e2644d5171dbea4727a2f042
Tl;dr of the code above:
class CustomLayer(Layer):    
    # ...
    def call(self, inputs):
        output = Dense(self.units)(inputs)  # Weights are not updated
        return output
A final note: calling tf.trainable_variables() returns all the correct weights as expected (in both cases), but they don't change during training (i.e., TF can see the weights, but Keras ignores them?).
Is there anything I can do to use the Dense layer like a normal backend function?
Thanks,
Daniele
Info:
Keras 2.2.4
TensorFlow 1.12.0
Maybe related to #9786