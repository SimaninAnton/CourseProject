chintak commented on 17 May 2016
I implemented an alexnet-like network using Keras to train on 50 ImageNet classes.
Model definition:
model = Sequential()
model.add(Convolution2D(96, 11, 11, subsample=(4, 4), activation='relu',
                        border_mode='valid', name='conv_1', input_shape=(3, 256, 256)))
model.add(MaxPooling2D((3, 3), strides=(2, 2)))
model.add(ZeroPadding2D(padding=(2, 2)))
model.add(Convolution2D(256, 5, 5, activation='relu',
                        border_mode='valid', name='conv_2'))
model.add(MaxPooling2D((3, 3), strides=(2, 2)))
model.add(ZeroPadding2D(padding=(1, 1)))
model.add(Convolution2D(384, 3, 3, activation='relu',
                        border_mode='valid', name='conv_3'))
model.add(ZeroPadding2D(padding=(1, 1)))
model.add(Convolution2D(384, 3, 3, activation='relu',
                        border_mode='valid', name='conv_4'))
model.add(ZeroPadding2D(padding=(1, 1)))
model.add(Convolution2D(256, 3, 3, activation='relu',
                        border_mode='valid', name='conv_5'))
model.add(MaxPooling2D((3, 3), strides=(2, 2)))
model.add(Flatten(name='flatten'))
model.add(Dense(4096, activation='relu', name='dense_1'))
model.add(Dropout(0.5))
model.add(Dense(4096, activation='relu', name='dense_2'))
model.add(Dropout(0.5))
model.add(Dense(50, activation='softmax', name='output'))
model.compile(optimizer='sgd', loss='categorical_crossentropy',
              metrics=['accuracy'])
I am training it using model.train_on_batch method. Reading batches of data from LMDB dataset and feeding it into train_on_batch method. Batch size is 64.
Observations:
The loss is of the order ~15-16
Seeing the network outputs after each batch using predict_on_batch (on training batches), shows that initially the predicted classes are random but after 2-3 batches all predictions are of the same class with a probability of 1.0.
There is no change in the predicted class after this.
The predicted class is random and varies from 1 trial to another.
I also implemented the network using plain tensorflow; model definition here - tf.txt.
Observations:
The loss starts with ~2-3.
Trains as expected.
Any idea what am I doing incorrectly in Keras? Any tests I could run to ensure Keras is installed as expected? I'm unable to figure out why there is such a huge difference in the starting loss values. Is there a possible vanishing or exploding gradients problem here?
System details:
Keras v1.0.3
Tensorflow v0.8.0rc0
GTX 960 4GB