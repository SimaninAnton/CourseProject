luciasalar commented on 26 May 2019
I followed the keras blog https://blog.keras.io/using-pre-trained-word-embeddings-in-a-keras-model.html on word embeddings. When reaching this point of the tutorial:
from keras.layers import Input
embedding_layer = Embedding(len(word_index) + 1,EMBEDDING_DIM,weights=[embedding_matrix],input_length=MAX_SEQUENCE_LENGTH,
                            trainable=False)
sequence_input = Input(shape=(MAX_SEQUENCE_LENGTH,), dtype='int32')
embedded_sequences = embedding_layer(sequence_input)
I experience a crash:
'AttributeError: 'InputLayer' object has no attribute 'outbound_nodes''
System information
Code taken from: https://blog.keras.io/using-pre-trained-word-embeddings-in-a-keras-model.html
OS Platform and Distribution: Outdated version of scientific linux, used anaconda to fetch packages
TensorFlow backend (yes / no): yes
TensorFlow version: 1.13.1
Keras version: 2.2.4
Python version: 3.7.3
CUDA/cuDNN version: not available
GPU model and memory: no GPU
Describe the current behavior
AttributeError: 'InputLayer' object has no attribute 'outbound_nodes'
Describe the expected behavior
it doesn't crash
Code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate the problem.
Other info / logs
Traceback:
AttributeError                            Traceback (most recent call last)
<ipython-input-16-fd4b0bbd5a48> in <module>
      3                             trainable=False)
      4 sequence_input = Input(shape=(MAX_SEQUENCE_LENGTH,), dtype='int32')
----> 5 embedded_sequences = embedding_layer(sequence_input)
      6 x = Conv1D(128, 5, activation='relu')(embedded_sequences)
      7 x = MaxPooling1D(5)(x)

~/share/new_conda_for_me/lib/python3.7/site-packages/tensorflow/python/keras/engine/base_layer.py in __call__(self, inputs, *args, **kwargs)
    582           if base_layer_utils.have_all_keras_metadata(inputs):
    583             inputs, outputs = self._set_connectivity_metadata_(
--> 584                 inputs, outputs, args, kwargs)
    585           if hasattr(self, '_set_inputs') and not self.inputs:
    586             # Subclassed network: explicitly set metadata normally set by

~/share/new_conda_for_me/lib/python3.7/site-packages/tensorflow/python/keras/engine/base_layer.py in _set_connectivity_metadata_(self, inputs, outputs, args, kwargs)
   1414     kwargs.pop('mask', None)  # `mask` should not be serialized.
   1415     self._add_inbound_node(
-> 1416         input_tensors=inputs, output_tensors=outputs, arguments=kwargs)
   1417     return inputs, outputs
   1418 

~/share/new_conda_for_me/lib/python3.7/site-packages/tensorflow/python/keras/engine/base_layer.py in _add_inbound_node(self, input_tensors, output_tensors, arguments)
   1522         input_tensors=input_tensors,
   1523         output_tensors=output_tensors,
-> 1524         arguments=arguments)
   1525 
   1526     # Update tensor history metadata.

~/share/new_conda_for_me/lib/python3.7/site-packages/tensorflow/python/keras/engine/base_layer.py in __init__(self, outbound_layer, inbound_layers, node_indices, tensor_indices, input_tensors, output_tensors, arguments)
   1740         # For compatibility with external Keras, we use the deprecated
   1741         # accessor here.
-> 1742         layer.outbound_nodes.append(self)
   1743     # For compatibility with external Keras, we use the deprecated
   1744     # accessor here.

AttributeError: 'InputLayer' object has no attribute 'outbound_nodes'```
1