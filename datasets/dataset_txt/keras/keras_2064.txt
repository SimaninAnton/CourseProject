Contributor
GPhilo commented on 26 Jun 2017
Keras version: 2.0.5
Tensorflow Version: 1.2
Python: 3.5
OS: Windows 10
Trying to use a pretrained InceptionV3 model using tensors as inputs, I'm getting two different results when using model.predict() on the raw numpy array and when using sess.run([model.output], ...).
An example of the problem:
import tensorflow as tf
from keras.preprocessing.image import load_img, img_to_array
from keras.applications.inception_v3 import InceptionV3, decode_predictions, preprocess_input
import numpy as np

img_sample_filename = 'my_image.jpg' #e.g.: https://upload.wikimedia.org/wikipedia/commons/thumb/d/d4/CH_cow_2_cropped.jpg/1024px-CH_cow_2_cropped.jpg
img = img_to_array(load_img(img_sample_filename, target_size=(299,299)))
img = preprocess_input(img)
img_tensor = tf.constant(img[None,:])

# WITH KERAS:
model = InceptionV3()
pred = model.predict(img[None,:])
pred = decode_predictions(np.asarray(pred)) #<------ correct prediction!
print(pred)

# WITH TF:
model = InceptionV3(input_tensor=img_tensor)
init = tf.global_variables_initializer()

with tf.Session() as sess:
  from keras import backend as K
  K.set_session(sess)

  sess.run(init)
  pred = sess.run([model.output], feed_dict={K.learning_phase(): 0})

pred = decode_predictions(np.asarray(pred)[0])
print(pred)                               #<------ wrong prediction!
(I also opened a stackoverflow question just in case this was an implementation issue but from what little information about this use-case I could find this is supposed to work...)
Is there something I'm missing about incompatibilities of pretrained models and tensor-based input? Or am I doing something wrong?