mundher commented on 22 Apr 2016
I got this error
(28709L, 48L, 48L) (3589L, 48L, 48L) Train on 28709 samples, validate on 3589 samples Epoch 1/50 Traceback (most recent call last): File "train.py", line 171, in <module> history = model.fit(trainX, trainY, batch_size=batch_size, nb_epoch=nb_epoch, verbose=1,validation_data=(validX,vali dY), callbacks=[checkpointer]) File "c:\keras\keras\models.py", line 402, in fit sample_weight=sample_weight) File "c:\keras\keras\engine\training.py", line 1036, in fit callback_metrics=callback_metrics) File "c:\keras\keras\engine\training.py", line 774, in _fit_loop outs = f(ins_batch) File "c:\keras\keras\backend\theano_backend.py", line 499, in __call__ return self.function(*inputs) File "c:\theano\theano\compile\function_module.py", line 815, in __call__ allow_downcast=s.allow_downcast) File "c:\theano\theano\tensor\type.py", line 178, in filter data.shape)) TypeError: ('Bad input argument to theano function with name "c:\\keras\\keras\\backend\\theano_backend.py:495" at inde x 0(0-based)', 'Wrong number of dimensions: expected 4, got 3 with shape (128L, 48L, 48L).')
here is my code
`img_rows = img_cols = 48
conv_input_shape=(1, img_rows, img_cols)
conv_nb_row = 3
conv_nb_col = 3
conv_nb_pool = 2
dense_out = 7
decay = l2(0.01)
model = Sequential()
model.add(Convolution2D(32,conv_nb_row,conv_nb_col,border_mode='same',input_shape=conv_input_shape,W_regularizer=decay))
model.add(Activation('relu'))
model.add(Convolution2D(32, conv_nb_row, conv_nb_row,W_regularizer=decay))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(conv_nb_pool, conv_nb_pool)))
model.add(Dropout(0.1))
model.add(Convolution2D(64, conv_nb_row, conv_nb_row,W_regularizer=decay))
model.add(Activation('relu'))
model.add(Convolution2D(64, conv_nb_row, conv_nb_row,W_regularizer=decay))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(conv_nb_pool, conv_nb_pool)))
model.add(Dropout(0.2))
model.add(Convolution2D(128, conv_nb_row, conv_nb_row,W_regularizer=decay))
model.add(Activation('relu'))
model.add(Convolution2D(128, conv_nb_row, conv_nb_row,W_regularizer=decay))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(conv_nb_pool, conv_nb_pool)))
model.add(Dropout(0.3))
model.add(Convolution2D(256, conv_nb_row, conv_nb_row,W_regularizer=decay))
model.add(Activation('relu'))
model.add(Convolution2D(256, conv_nb_row, conv_nb_row,W_regularizer=decay))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(conv_nb_pool, conv_nb_pool)))
model.add(Dropout(0.4))
model.add(Flatten())
model.add(Dense(dense_out,W_regularizer=decay))
model.add(Activation('softmax'))
model.compile(loss='categorical_crossentropy', optimizer='Adam',metrics=['accuracy'])
batch_size = 128
nb_epoch = 50
checkpointer = ModelCheckpoint(filepath="best.hdf5",monitor='val_acc')
trainX = np.load('fer2013\xtrain.npy')
trainY = np.load('fer2013\ytrain.npy')
trainX, trainY = normaliaze(trainX,trainY)
print trainX.shape
validX = np.load('fer2013\xvalid.npy')
validY = np.load('fer2013\yvalid.npy')
validX, validY = normaliaze(validX, validY)
print validX.shape
history = model.fit(trainX, trainY, batch_size=batch_size, nb_epoch=nb_epoch, verbose=1,validation_data=(validX,validY), callbacks=[checkpointer])`
as you can see when I printed trainX shape I got (28709L, 48L, 48L) so my data dim is correct