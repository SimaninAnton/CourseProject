XzwHan commented on 26 Dec 2019 â€¢
edited
I plan to use the sum of the negative log-likelihood from two distinct networks with two distinct dataset as my loss function, i.e. it would look something like
custom_loss = - (network1_output.log_prob(Y_1)+network2_output.log_prob(Y_2))
but as I ran
model.compile(loss=custom_loss...)
I came across the following error:
OperatorNotAllowedInGraphError: using a `tf.Tensor` as a Python `bool` is not allowed in Graph execution. Use Eager execution or decorate this function with @tf.function.
I'm able to see that the output of custom_loss is a tf.Tensor object with shape=(None,), however the loss argument in Model.compile() function expects a function; but how do I customize a loss function that computes the log_prob from a distribution? The posts I found online pointed me to use Keras.backend.function() to construct custom loss function, and I tried something like
custom_loss_func = tfk.backend.function((network1_output, Y_1, network2_output, Y_2), custom_loss)
model.compile(loss=custom_loss_func...)
but received
AttributeError: 'Independent' object has no attribute 'op'
from the first line of code above.
So this is what I've tried so far; any suggestions on how to make custom loss function with above mentioned pattern?