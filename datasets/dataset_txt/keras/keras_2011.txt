einareinarsson commented on 3 Jul 2017
I'm playing with the MNIST classification and I can make prediction from single digit images. I wonder how could I enhance my solution to predict images with multiple digit long numbers (like "19978"). I tried to segment the image to single digits and predict these, but somehow I guess that more advanced solutions exist. I have figured out the following approaches but I cannot implement them via lack of structural knowledge.
My original simple model looks like this:
model = Sequential()
model.add(Conv2D(30, (5, 5), input_shape=(1, 28, 28), activation='relu', border_mode='same', kernel_initializer='normal'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(15, (3, 3), activation='relu', border_mode='same', kernel_initializer='normal'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.2))
model.add(Flatten())model.add(Dense(128, activation='relu', kernel_initializer='normal'))
model.add(Dense(50, activation='relu', kernel_initializer='normal'))
model.add(Dense(10, activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
First I'd feed only fixed length (six digit long) numeric strings and construct a net where the output layer could predict multiple (in this case six) labels according the six digits. I know for sure that neural nets and TensorFlow can work like this, but I cannot reproduce this in Keras, because I cannot combine the required number of nodes (six) with the possible output classes (10) in the output layer. Is it possible somehow?
Moreover, with this solution I have a further problem that in case of a multilabel solution how could I reconstruct the order of the single digit predictions? I assume that I get a sequence of separate, independent label predictions from the model (like "2", "2", "3", "1", "1", "0") without any further hint what is the sequential order of these for my whole input number.
For a somewhat more advanced idea is that I'd train a model for an unsegmented image with the whole number and expect this to give the labels like above (the problem of order still expected to exist, though). The advantage of this approach would be that non segmentable images (where the digits are written "in flow") are also intepretable (albeit it has the extra challenge that inputs have different proportions, surely not square which CNNs usually prefer).
Finally, the best possible solution would be the one that could give predictions for different digit long numbers but I cannot imagine such a flexible architecture; maybe only the one with variable length sequence prediction like machine translation, but this seems a bit far fetched...
Has anyone solved similar solution in Keras?