hjptriplebee commented on 26 Jul 2018 â€¢
edited
I build a model, train it, save it with "model.save()"
Here is the core code:
model = build_stacked_biderectional_lstm(class_num)

early_stopping = EarlyStopping(monitor = "val_loss", patience = 2)
model_checkpoint = ModelCheckpoint(filepath = "Model/checkpoint-{epoch:02d}e-val_acc_{val_acc:.2f}.h5", save_best_only = True, monitor = "val_loss", mode = "min")
tensorboard = TensorBoard(log_dir = "Log")
hist = model.fit(x_train, y_train, batch_size = batch_size, epochs = epoch_num, validation_data = (x_test, y_test), callbacks = [early_stopping, model_checkpoint, tensorboard], verbose = 1)
print(hist.history["val_loss"])
print(hist.history["val_acc"])
model.save("text_classification_LU_stacked_biLSTM.h5")
Also, I use "load_model()" to load the model after I save it. But I can only observe an low accuracy of 0.0005%(a random number).
However, if I feed test data as validation_data in model.fit(), I can observe an accuracy of 90%.
So, I think "load_model()" doesn't work
Here is the load code:
model = load_model("text_classification_LU_stacked_biLSTM.h5")
metrics_value = model.evaluate(x_test, y_test, batch_size=batch_size)
print(model.metrics_names)
print(metrics_value)
What makes me surprised is that when I connect these two parts together, it works.
Just join them together directly, like this:
model = build_stacked_biderectional_lstm(class_num)

early_stopping = EarlyStopping(monitor = "val_loss", patience = 2)
model_checkpoint = ModelCheckpoint(filepath = "Model/checkpoint-{epoch:02d}e-val_acc_{val_acc:.2f}.h5", save_best_only = True, monitor = "val_loss", mode = "min")
tensorboard = TensorBoard(log_dir = "Log")
hist = model.fit(x_train, y_train, batch_size = batch_size, epochs = epoch_num, validation_data = (x_test, y_test), callbacks = [early_stopping, model_checkpoint, tensorboard], verbose = 1)
print(hist.history["val_loss"])
print(hist.history["val_acc"])
model.save("text_classification_LU_stacked_biLSTM.h5")

model = load_model("text_classification_LU_stacked_biLSTM.h5")
metrics_value = model.evaluate(x_test, y_test, batch_size=batch_size)
print(model.metrics_names)
print(metrics_value)
if I remove model.save() or change the save path, I will meet the same situation "a low accuracy of 0.0005%(a random number)".
Could anyone help me?