Contributor
EderSantana commented on 27 Jan 2016
It seems that K.rnn thinks that mask has 3 dimensions. How to get the error:
from keras.models import  Sequential
from keras.layers.recurrent import LSTM
from keras.layers.core import Masking

model = Sequential()
model.add(Masking(input_shape=(None, 8)))
model.add(LSTM(output_dim=256, return_sequences=True))

model.compile(loss='binary_crossentropy', optimizer='adam')
And the error is:
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-7-23d1674d2143> in <module>()
----> 1 model.compile(loss='binary_crossentropy', optimizer='adam')

/home/eders/python/keras/keras/models.pyc in compile(self, optimizer, loss, class_mode)
    433         self.X_test = self.get_input(train=False)
    434 
--> 435         self.y_train = self.get_output(train=True)
    436         self.y_test = self.get_output(train=False)
    437 

/home/eders/python/keras/keras/layers/containers.pyc in get_output(self, train)
    126 
    127     def get_output(self, train=False):
--> 128         return self.layers[-1].get_output(train)
    129 
    130     def set_input(self):

/home/eders/python/keras/keras/layers/recurrent.pyc in get_output(self, train)
    148                                              initial_states,
    149                                              go_backwards=self.go_backwards,
--> 150                                              mask=mask)
    151         if self.stateful:
    152             self.updates = []

/home/eders/python/keras/keras/backend/theano_backend.pyc in rnn(step_function, inputs, initial_states, go_backwards, mask)
    448         mask = expand_dims(ones_like(T.sum(inputs, axis=-1)))
    449     else:
--> 450         mask = mask.dimshuffle(axes)
    451 
    452     def _step(input, mask, output_tm1, *states):

/home/eders/python/Theano/theano/tensor/var.pyc in dimshuffle(self, *pattern)
    358             pattern = pattern[0]
    359         op = theano.tensor.basic.DimShuffle(list(self.type.broadcastable),
--> 360                                             pattern)
    361         return op(self)
    362 

/home/eders/python/Theano/theano/tensor/elemwise.pyc in __init__(self, input_broadcastable, new_order, inplace)
    144                     raise ValueError(("new_order[%d] is %d, but the input "
    145                                       "only has %d axes.") %
--> 146                                      (i, j, len(input_broadcastable)))
    147                 if j in new_order[(i + 1):]:
    148                     raise ValueError("The same input dimension may not appear "

ValueError: new_order[2] is 2, but the input only has 2 axes.