gbezerra commented on 18 Apr 2016
Hi,
I would like to input sequences of different length into an LSTM network without having to pad them (thus reducing the huge waste of memory). Is this possible?
I'm getting the following error when I try to input a list of lists or an array of arrays:
ValueError: ('Bad input argument to theano function with name "/opt/anaconda2/lib/python2.7/site-packages/keras/backend/theano_backend.py:484" at index 0(0-based)', 'setting an array element with a sequence.')
I have no problems however when I use pad_sequences before I pass the input. Below is my code:
from keras.layers import Dense, Dropout, Activation
from keras.layers import LSTM
from keras.layers import Embedding
from keras.preprocessing.sequence import pad_sequences
import pandas as pd
import config
from numpy import array, random
import pdb

def load_data(test_split = 0.2):
    print 'Loading data...'
    df = pd.read_csv(config.Data.feature_matrix)
    df['encoded_msg'] = df['encoded_msg'].apply(lambda x: \
        [int(e) for e in x.split()])
    df = df.reindex(random.permutation(df.index))

    X_train = df['encoded_msg'].values[:int(len(df) * (1 - test_split))]
    y_train = array(df['was_blocked'].values[:int(len(df) * (1 - test_split))])

    X_test = array(df['encoded_msg'].values[int(len(df) * (1 - test_split))])
    y_test = array(df['was_blocked'].values[int(len(df) * (1 - test_split))])

    #return pad_sequences(X_train) ,y_train, X_test, y_test
    return X_train ,y_train, X_test, y_test


def create_model(input_length):
    print 'Creating model...'
    model = Sequential()
    model.add(Embedding(input_dim = 188, output_dim = 50, input_length = input_length))
    model.add(LSTM(output_dim=256, activation='sigmoid', inner_activation='hard_sigmoid',
        return_sequences = True))
    model.add(Dropout(0.5))
    model.add(LSTM(output_dim=256, activation='sigmoid', inner_activation='hard_sigmoid'))
    model.add(Dropout(0.5))
    model.add(Dense(1, activation = 'sigmoid'))

    print 'Compiling...'
    model.compile(loss='binary_crossentropy',
                  optimizer='rmsprop',
                  metrics=['accuracy'])
    return model


X_train, y_train, X_test, y_test = load_data()
model = create_model(len(X_train[0]))

print 'Fitting model...'
hist = model.fit(X_train, y_train, batch_size=64, nb_epoch=10, validation_split = 0.1,
    verbose = 1)
Any help is highly appreciated.
Thanks!
Please make sure that the boxes below are checked before you submit your issue. Thank you!
[ x] Check that you are up-to-date with the master branch of Keras. You can update with:
pip install git+git://github.com/fchollet/keras.git --upgrade --no-deps
[ x] If running on Theano, check that you are up-to-date with the master branch of Theano. You can update with:
pip install git+git://github.com/Theano/Theano.git --upgrade --no-deps
[ x] Provide a link to a GitHub Gist of a Python script that can reproduce your issue (or just copy the script here if it is short).
1