KonstV commented on 6 Jun 2017
I tried to use VGG16 model from applications. My script
from keras.applications.vgg16 import VGG16
from keras.preprocessing import image
from keras.applications.vgg16 import preprocess_input
import numpy as np

model = VGG16(weights='imagenet', include_top=False)

img_path = 'cat.324.jpg'

img = image.load_img(img_path, target_size=(224, 224))
x = image.img_to_array(img)
x = np.expand_dims(x, axis=0)
x = preprocess_input(x)

features = model.predict(x) 
As input image I used image from CatsAndDogs dataset. On line features = model.predict(x) I got following error:
ValueError Traceback (most recent call last)
/home/konstantin/frameworks/anaconda3/lib/python3.6/site-packages/theano/compile/function_module.py in call(self, *args, **kwargs)
883 outputs =
--> 884 self.fn() if output_subset is None else
885 self.fn(output_subset=output_subset)
ValueError: GpuElemwise. Input dimension mis-match. Input 2 (indices start at 0) has shape[1] == 64, but the output's size on that axis is 3.
During handling of the above exception, another exception occurred:
ValueError Traceback (most recent call last)
in ()
4 x = preprocess_input(x)
5
----> 6 features = model.predict(x)
/home/konstantin/frameworks/anaconda3/lib/python3.6/site-packages/keras/engine/training.py in predict(self, x, batch_size, verbose)
1570 f = self.predict_function
1571 return self._predict_loop(f, ins,
-> 1572 batch_size=batch_size, verbose=verbose)
1573
1574 def train_on_batch(self, x, y,
/home/konstantin/frameworks/anaconda3/lib/python3.6/site-packages/keras/engine/training.py in _predict_loop(self, f, ins, batch_size, verbose)
1200 ins_batch = _slice_arrays(ins, batch_ids)
1201
-> 1202 batch_outs = f(ins_batch)
1203 if not isinstance(batch_outs, list):
1204 batch_outs = [batch_outs]
/home/konstantin/frameworks/anaconda3/lib/python3.6/site-packages/keras/backend/theano_backend.py in call(self, inputs)
1092 def call(self, inputs):
1093 assert isinstance(inputs, (list, tuple))
-> 1094 return self.function(*inputs)
1095
1096
/home/konstantin/frameworks/anaconda3/lib/python3.6/site-packages/theano/compile/function_module.py in call(self, *args, **kwargs)
896 node=self.fn.nodes[self.fn.position_of_error],
897 thunk=thunk,
--> 898 storage_map=getattr(self.fn, 'storage_map', None))
899 else:
900 # old-style linkers raise their own exceptions
/home/konstantin/frameworks/anaconda3/lib/python3.6/site-packages/theano/gof/link.py in raise_with_op(node, thunk, exc_info, storage_map)
323 # extra long error message in that case.
324 pass
--> 325 reraise(exc_type, exc_value, exc_trace)
326
327
/home/konstantin/frameworks/anaconda3/lib/python3.6/site-packages/six.py in reraise(tp, value, tb)
683 value = tp()
684 if value.traceback is not tb:
--> 685 raise value.with_traceback(tb)
686 raise value
687
/home/konstantin/frameworks/anaconda3/lib/python3.6/site-packages/theano/compile/function_module.py in call(self, *args, **kwargs)
882 try:
883 outputs =
--> 884 self.fn() if output_subset is None else
885 self.fn(output_subset=output_subset)
886 except Exception:
ValueError: GpuElemwise. Input dimension mis-match. Input 2 (indices start at 0) has shape[1] == 64, but the output's size on that axis is 3.
Apply node that caused the error: GpuElemwise{Composite{(i0 * ((i1 + i2) + Abs((i1 + i2))))}}[(0, 1)](CudaNdarrayConstant{[[[[ 0.5]]]]}, GpuDnnConv{algo='small', inplace=True}.0, GpuDimShuffle{x,0,x,x}.0)
Toposort index: 176
Inputs types: [CudaNdarrayType(float32, (True, True, True, True)), CudaNdarrayType(float32, 4D), CudaNdarrayType(float32, (True, False, True, True))]
Inputs shapes: [(1, 1, 1, 1), (1, 3, 224, 225), (1, 64, 1, 1)]
Inputs strides: [(0, 0, 0, 0), (0, 50400, 225, 1), (0, 1, 0, 0)]
Inputs values: [b'CudaNdarray([[[[ 0.5]]]])', 'not shown', 'not shown']
Outputs clients: [[GpuContiguous(GpuElemwise{Composite{(i0 * ((i1 + i2) + Abs((i1 + i2))))}}[(0, 1)].0)]]
HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
OS Ubuntu 14.04
CUDA 8.0
CuDNN 5.105
Python 3.6.1
Keras 2.0.4
Theano 0.9.0