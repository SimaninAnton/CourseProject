achainan commented on 24 Jun 2017 â€¢
edited
Hi,
I am trying to categorize images into 4 groups. Its is currently doing a good job of differentiating between the categories.
['Baking_Soda', 'Diet_Coca_Cola', 'Frosted_Flakes', 'Honey_Nut_Cheerios']
Relevant Code:
https://gist.github.com/achainan/9241f695b9e72d3667cccec07b7f4faa
https://gist.github.com/achainan/cb92f8018337b679d315d28ff5ee685f
I am doing this by fine-tuning the VGG16 model using Keras 1.2.2
All my probabilities are coming out extremely high even when I test it on images that are not of the kind that I desire. Aka this is the result of testing against an image of a black table:
Diet_Coca_Cola 1.0
Frosted_Flakes 1.0
Honey_Nut_Cheerios 0.0
None 0.0
Baking_Soda 0.0
Things I have tried:
softmax vs sigmoid: As I thought that sigmoid would not dampen the probabilities of the others. This covered it: #741 Currently trying again with sigmoid.
binary_crossentropy vs categorical_crossentropy: since nothing else was working.
fewer and more enums: 5, 10, 50 (perhaps I was overfitting)
Without and with transfer learning: After reading this: http://cs231n.github.io/transfer-learning/
Tried implementing EarlyStopping: Since I thought make it could be because of overfitting.
callbacks=[
  callbacks.EarlyStopping(monitor='val_loss', min_delta=0, patience=0, verbose=1),
])
Adding and removing a 'None' class with zero images: since I wanted none to be an option and images of a black desk was triggering other classes at near 100% probabilities. (This was a guess and I haven't seen much documentation on how to implement a background category. Any advice on the proper implementation would be appreciated.)
As you might notice I am using a very small number of images:
nb_train_samples = 188
nb_val_samples = 137
Ps. I am pretty new to ML and am using coremltools to convert the models.
Any advice or help would be much appreciated.
Something similar I found: #1878