wudapeng268 commented on 17 Feb 2017 •
edited
from keras.layers import Input, Dense, Activation
from keras.layers.convolutional import Convolution1D
from keras.layers.pooling import MaxPooling1D
from keras.models import Sequential
from keras.layers import Dropout
from keras.utils import np_utils
import numpy as np

##read data:
MAX_LEN = 100
h = 3
# output_len = MAX_LEN - h + 1
output_feature = 100
VECTOR_LEN = 300
label_num = 5
model = Sequential()
# input_dim=MAX_LEN*VECTOR_LEN,
model.add(Convolution1D(output_feature, h, input_shape=(MAX_LEN - h + 1, h * VECTOR_LEN),
                        border_mode="same"))
model.add(MaxPooling1D(MAX_LEN - h + 1))
model.add(Dropout(0.5))
print label_num
model.add(Dense(output_dim=label_num,activation="softmax"))
# model.add(Activation('sigmoid'))
model.compile(optimizer="Adadelta", loss="sparse_categorical_crossentropy", metrics=['accuracy'])

print("load dataset....")
# test_feature = [[] for i in range(test_num)]
word2vec = {}
# with open("../data/vectors_stanford.bin") as fin:
with open("../data/stsa.glove.840B.d300.txt") as fin:
    for line in fin:
        data = line.strip().split(" ", 1)  # 分成两份
        word2vec[data[0]] = np.array(data[1].split(" "), dtype=np.float)

train = list(open("../data/stsa.fine.train").readlines())
train_sentence = [l.strip().split(" ")[1:] for l in train]
train_label = [int(l.strip().split(" ")[0]) for l in train]
train_num = len(train_sentence)
train_label = np_utils.to_categorical(train_label, 5)

train_embedding = np.zeros((train_num, MAX_LEN - h + 1, h * VECTOR_LEN))
for i, s in enumerate(train_sentence):
    for j, w in enumerate(s):
        if j - h + 1 < 0:
            continue
        if j >= MAX_LEN:
            break
        for t in range(j - h + 1, j + 1):
            if s[t] in word2vec:
                train_embedding[i, j - h + 1, (t - (j - h + 1)) * VECTOR_LEN:(t - j + h) * VECTOR_LEN] = word2vec[s[t]]
            else:
                train_embedding[i, j - h + 1, (t - (j - h + 1)) * VECTOR_LEN:(t - j + h) * VECTOR_LEN] = np.random.rand(
                    VECTOR_LEN)

print "train_embedding.shape:\t", train_embedding.shape
print "train_label.shape:\t",train_label.shape
model.fit(train_embedding, train_label, batch_size=50, shuffle=True)
I print the shape of train_embedding and train_label
train_embedding.shape: (8544, 98, 900) train_label.shape: (8544, 5)
but always have error message ValueError: Error when checking model target: expected dense_1 to have 3 dimensions, but got array with shape (8544, 5) , actually I expect the target shape is (None,5) as other question in website.
Anyone can help me will be thanks.
Please make sure that the boxes below are checked before you submit your issue. If your issue is an implementation question, please ask your question on StackOverflow or join the Keras Slack channel and ask there instead of filing a GitHub issue.
Thank you!
Check that you are up-to-date with the master branch of Keras. You can update with:
pip install git+git://github.com/fchollet/keras.git --upgrade --no-deps
Provide a link to a GitHub Gist of a Python script that can reproduce your issue (or just copy the script here if it is short).
If running on TensorFlow, check that you are up-to-date with the latest version. The installation instructions can be found here.
If running on Theano, check that you are up-to-date with the master branch of Theano. You can update with:
pip install git+git://github.com/Theano/Theano.git --upgrade --no-deps