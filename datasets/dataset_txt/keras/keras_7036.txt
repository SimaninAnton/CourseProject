fyears commented on 9 May 2015
For example, if we are using verbose and validation:
'''
Demonstration of validation_split
'''
model.fit(X_train, y_train, nb_epoch=3, batch_size=16, validation_split=0.1, show_accuracy=True, verbose=1)
# outputs
'''
Train on 37800 samples, validate on 4200 samples
Epoch 0
37800/37800 [==============================] - 7s - loss: 0.0385 - acc.: 0.7258 - val. loss: 0.0160 - val. acc.: 0.9136
Epoch 1
37800/37800 [==============================] - 8s - loss: 0.0140 - acc.: 0.9265 - val. loss: 0.0109 - val. acc.: 0.9383
Epoch 2
10960/37800 [=======>......................] - ETA: 4s - loss: 0.0109 - acc.: 0.9420
'''
But after the fitting is finished, we could only get the final model performance. So, my suggestion is that, save the performances inside a new variable (inside the class), for example:
model.fit(X_train, y_train, nb_epoch=3, batch_size=16, validation_split=0.1, show_accuracy=True, verbose=1)

model.train_history_
# outputs
'''
{
  'epoch': [0, 1, 2],
  'loss': [0.0385, 0.0140, 0.0109],
  'acc': [0.7258, 0.9256, 0.9420],
  'val_loss': [0.0160, 0.0169, 0.0170],
  'val_acc': [0.9136, 0.9383, 0.9400]
}
'''
So that we can analyze the history, like drawing the lines of the changes of loss and val_loss, to try to select the best epochs to prevent the overfit.