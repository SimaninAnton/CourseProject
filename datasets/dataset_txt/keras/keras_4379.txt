izikgo commented on 15 Sep 2016 â€¢
edited
Hi all,
I'm following an example from [http://machinelearningmastery.com/sequence-classification-lstm-recurrent-neural-networks-python-keras/], and it crashes:
# LSTM for sequence classification in the IMDB dataset
import numpy
from keras.datasets import imdb
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers.embeddings import Embedding
from keras.preprocessing import sequence
# fix random seed for reproducibility
numpy.random.seed(7)
# load the dataset but only keep the top n words, zero the rest
top_words = 5000
(X_train, y_train), (X_test, y_test) = imdb.load_data(nb_words=top_words)
# truncate and pad input sequences
max_review_length = 500
X_train = sequence.pad_sequences(X_train, maxlen=max_review_length)
X_test = sequence.pad_sequences(X_test, maxlen=max_review_length)
# create the model
embedding_vecor_length = 32
model = Sequential()
model.add(Embedding(top_words, embedding_vecor_length, input_length=max_review_length))
model.add(LSTM(100))
model.add(Dense(1, activation='sigmoid'))
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
print(model.summary())
model.fit(X_train, y_train, nb_epoch=3, batch_size=64)
# Final evaluation of the model
scores = model.evaluate(X_test, y_test, verbose=0)
print("Accuracy: %.2f%%" % (scores[1]*100))
the error I get:
Traceback (most recent call last):
  File "C:\Anaconda2\lib\site-packages\IPython\core\interactiveshell.py", line 2885, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "<ipython-input-4-90314367626e>", line 27, in <module>
    model.fit(X_train, y_train, nb_epoch=3, batch_size=64)
  File "C:\Anaconda2\lib\site-packages\keras\models.py", line 620, in fit
    sample_weight=sample_weight)
  File "C:\Anaconda2\lib\site-packages\keras\engine\training.py", line 1104, in fit
    callback_metrics=callback_metrics)
  File "C:\Anaconda2\lib\site-packages\keras\engine\training.py", line 822, in _fit_loop
    outs = f(ins_batch)
  File "C:\Anaconda2\lib\site-packages\keras\backend\theano_backend.py", line 672, in __call__
    return self.function(*inputs)
  File "C:\Anaconda2\lib\site-packages\theano\compile\function_module.py", line 875, in __call__
    storage_map=getattr(self.fn, 'storage_map', None))
  File "C:\Anaconda2\lib\site-packages\theano\gof\link.py", line 325, in raise_with_op
    reraise(exc_type, exc_value, exc_trace)
  File "C:\Anaconda2\lib\site-packages\theano\compile\function_module.py", line 862, in __call__
    self.fn() if output_subset is None else\
AssertionError: Can't store in size_t for the bytes requested 400 * 4
Apply node that caused the error: GpuAlloc{memset_0=True}(CudaNdarrayConstant{[[[ 0.]]]}, TensorConstant{500}, Elemwise{Composite{((i0 * i1) // i2)}}[(0, 0)].0, TensorConstant{400})
Toposort index: 114
Inputs types: [CudaNdarrayType(float32, (True, True, True)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar)]
Inputs shapes: [(1, 1, 1), (), (), ()]
Inputs strides: [(0, 0, 0), (), (), ()]
Inputs values: [CudaNdarray([[[ 0.]]]), array(500L, dtype=int64), array(-206L, dtype=int64), array(400L, dtype=int64)]
Outputs clients: [[GpuIncSubtensor{Inc;:int64:}(GpuAlloc{memset_0=True}.0, GpuSubtensor{::int64}.0, Constant{500}), GpuIncSubtensor{InplaceInc;int64::}(GpuAlloc{memset_0=True}.0, GpuIncSubtensor{Inc;:int64:}.0, Constant{0}), forall_inplace,gpu,grad_of_scan_fn}(TensorConstant{500}, GpuElemwise{tanh,no_inplace}.0, GpuSubtensor{int64:int64:int64}.0, GpuAlloc{memset_0=True}.0, GpuElemwise{Composite{(i0 - sqr(i1))},no_inplace}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuAlloc{memset_0=True}.0, GpuAlloc{memset_0=True}.0, TensorConstant{500}, TensorConstant{500}, TensorConstant{500}, TensorConstant{500}, TensorConstant{500}, lstm_3_U_o, lstm_3_U_f, lstm_3_U_i, lstm_3_U_c, GpuDimShuffle{1,0}.0, GpuDimShuffle{1,0}.0, GpuDimShuffle{1,0}.0, GpuDimShuffle{1,0}.0)]]
my setup:
theano - 0.9.0dev2.dev-e4e08782d3a10d010d3a99bc87fd0fc3b0465405
keras - 1.0.8
gpu - Quadro K1000M (CNMeM is enabled with initial size: 80.0% of memory, cuDNN 5005)
Anyone knows what this might be? (it runs fine on cpu)