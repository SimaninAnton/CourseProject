fedebecat commented on 11 Mar 2017
Hi,
I'm training an LSTM to tackle a many to many (one output for every input) problem using Keras with the Tensorflow backend.
My model is something like this:
model = Sequential() model.add(LSTM(seq_length, input_shape=(seq_length, feat_dim), input_dim=feat_dim)) model.compile(optimizer='rmsprop',loss='mse')
The length of my input sequences is variable and has a quite high variance (from very short sequences to nearly 1000 long sequences). At training time I can just divide the sequences in batches of fixed sizes but at test time it would be useful to feed the whole sequence and possibly get prediction at every time step.
Is it possible to train the model in stateless mode feeding fixed length sequences and then make predictions in a stateful fashion? Does this even make sense or am I missing something?
Thanks
1