nathanmori commented on 10 Oct 2017 â€¢
edited
Layer's _initial_weights are only used if the layer is built by Layer.__call__(). Why not do the following in the build() methods, so the weights passed to the constructor are actually used regardless of when it is built?
if self._initial_weights is not None:
    self.set_weights(self._initial_weights)
This arises, because for example if I use a TimeDistributed Embedding with pretrained weights, the weights aren't actually used:
time_distributed = TimeDistributed(
    Embedding(
        VOCAB_SIZE,
        EMBEDDING_DIM,
        weights=[WEIGHTS]),
    input_shape=SHAPE))
It only works if the weights are passed to TimeDistributed instead of Embedding, which doesn't seem ideal:
time_distributed = TimeDistributed(
    Embedding(
        VOCAB_SIZE,
        EMBEDDING_DIM),
    input_shape=SHAPE,,
    weights=[WEIGHTS]))