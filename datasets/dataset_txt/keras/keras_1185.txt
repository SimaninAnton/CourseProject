Contributor
Dapid commented on 8 Mar 2018
... at least if it includes a Lambda layer.
Minimal example:
Run save_model.py on Python3.5:
from keras.layers import Input, Lambda
from keras.models import Model

def noop(x):
    return x

inp = Input(shape=(None, 1))
output = Lambda(noop)(inp)

model = Model(inputs=inp, outputs=output)
model.save('result.h5')
Loading the model from Python3.5 also works:
from keras.models import load_model
load_model('result.h5')
But Python3.6 raises a SystemError:
XXX lineno: 7, opcode: 0
Traceback (most recent call last):
  File "load_model.py", line 3, in <module>
    load_model('result.h5')
  File "/home/david/.virtualenvs/py36/lib/python3.6/site-packages/keras/models.py", line 243, in load_model
    model = model_from_config(model_config, custom_objects=custom_objects)
  File "/home/david/.virtualenvs/py36/lib/python3.6/site-packages/keras/models.py", line 317, in model_from_config
    return layer_module.deserialize(config, custom_objects=custom_objects)
  File "/home/david/.virtualenvs/py36/lib/python3.6/site-packages/keras/layers/__init__.py", line 55, in deserialize
    printable_module_name='layer')
  File "/home/david/.virtualenvs/py36/lib/python3.6/site-packages/keras/utils/generic_utils.py", line 144, in deserialize_keras_object
    list(custom_objects.items())))
  File "/home/david/.virtualenvs/py36/lib/python3.6/site-packages/keras/engine/topology.py", line 2524, in from_config
    process_node(layer, node_data)
  File "/home/david/.virtualenvs/py36/lib/python3.6/site-packages/keras/engine/topology.py", line 2481, in process_node
    layer(input_tensors[0], **kwargs)
  File "/home/david/.virtualenvs/py36/lib/python3.6/site-packages/keras/engine/topology.py", line 619, in __call__
    output = self.call(inputs, **kwargs)
  File "/home/david/.virtualenvs/py36/lib/python3.6/site-packages/keras/layers/core.py", line 663, in call
    return self.function(inputs, **arguments)
  File "save_model.py", line 7, in self_outer
    return x
SystemError: unknown opcode
Contrary to what was stated in bug #7297, the problem is indeed in Keras, since the error is triggered before any call to the backend. The problem appears in both Tensorflow and Theano. Also, both in Keras 2.1.5 and master.
10