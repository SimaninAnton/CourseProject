paradox56 commented on 9 Feb 2017
Hello!
I want to create a Neural Network with LSTM to predict opponent's next move in a Rock-Paper-Scissor game.
So the idea is following, I have encode the inputs as Rock: [1 0 0], Paper: [0 1 0], Scissor: [0 0 1], therefore the dimension is 3 for each input. The network should take 4 input vectors and produce a output vector as prediction.
I am still quiet new with Keras and I am not sure if my code for NN generation is correct. Could anyone check it for me? I really appreciate any help that you can provide!
#usr/bin/python
from __future__ import print_function

from keras.models import Sequential
from keras.layers import Dense, Activation, Flatten, Dropout
from keras.layers.recurrent import LSTM
from keras.optimizers import Adam

output_dim = 3
input_dim = 3
input_length = 4
batch_size = 20   #use all the data to train in one iteration


#each input has such strcture
#Rock: [1 0 0], Paper: [0 1 0], Scissor: [0 0 1]
#4 inputs (vectors) are sent to the LSTM net and output 1 vector as the prediction

def createNet(summary=False):
    print("Start Initialzing Neural Network!")
    model = Sequential()
    model.add(LSTM(4,input_dim=input_dim,input_length=input_length,
            return_sequences=True,activation='softmax'))
    model.add(Dropout(0.1))
    model.add(LSTM(4,input_dim=input_dim,input_length=input_length,
            return_sequences=True,activation='softmax'))
    model.add(Dropout(0.1))
    model.add(Flatten())
    model.add(Dense(3,activation='softmax'))

    model.compile(loss='categorical_crossentropy',optimizer='Adam',metrics=['accuracy'])
    if summary:
        print(model.summary())
    return model

if __name__=='__main__':
    createNet(True)