munichong commented on 7 Jul 2017 â€¢
edited
I just upgrade Keras from 1.1.0 to 2.0.5:
pip install git+git://github.com/fchollet/keras.git --upgrade --no-deps
My program is running on Theano backend and GPU.
Theano: 0.9.0.dev2
numpy: 1.13.1
scipy: 0.18.1
Python: 3.4.4
Anaconda 2.4.1
Run on Windows
The program runs fine before upgrading Keras.
But after upgrading, it throws an error when train_on_batch is called:
****** Iterating over each batch of the training data ******
1 #include <Python.h>
2 #include <iostream>
3 #include "theano_mod_helper.h"
4 #include "cuda_ndarray.cuh"
5 //////////////////////
6 ////  Support Code
7 //////////////////////
8 
9 
10     namespace {
11     struct __struct_compiled_op_m9ba06c94983f27c76a27385a5df5c6b1 {
12         PyObject* __ERROR;
13 
14         PyObject* storage_V3;
15 PyObject* storage_V1;
16         
17 
18         __struct_compiled_op_m9ba06c94983f27c76a27385a5df5c6b1() {
19             // This is only somewhat safe because we:
20             //  1) Are not a virtual class
21             //  2) Do not use any virtual classes in the members
22             //  3) Deal with mostly POD and pointers
23 
24             // If this changes, we would have to revise this, but for
25             // now I am tired of chasing segfaults because
26             // initialization code had an error and some pointer has
27             // a junk value.
28             memset(this, 0, sizeof(*this));
29         }
30         ~__struct_compiled_op_m9ba06c94983f27c76a27385a5df5c6b1(void) {
31             cleanup();
32         }
33 
34         int init(PyObject* __ERROR, PyObject* storage_V3, PyObject* storage_V1) {
35             Py_XINCREF(storage_V3);
36 Py_XINCREF(storage_V1);
37             this->storage_V3 = storage_V3;
38 this->storage_V1 = storage_V1;
39             
40 
41 
42 
43             this->__ERROR = __ERROR;
44             return 0;
45         }
46         void cleanup(void) {
47             __label_1:
48 
49 double __DUMMY_1;
50 __label_3:
51 
52 double __DUMMY_3;
53 __label_6:
54 
55 double __DUMMY_6;
56 
57             Py_XDECREF(this->storage_V3);
58 Py_XDECREF(this->storage_V1);
59         }
60         int run(void) {
61             int __failure = 0;
62             
63     PyObject* py_V1;
64      CudaNdarray * V1;
65     PyObject* py_V3;
66      CudaNdarray * V3;
67 {
68 
69     py_V1 = PyList_GET_ITEM(storage_V1, 0);
70     {Py_XINCREF(py_V1);}
71     
72         if (py_V1 == Py_None)
73         {
74             V1 = NULL;
75         }
76         else
77         {
78             
79         assert(py_V1->ob_refcnt >= 2); // There should be at least one ref from the container object,
80         // and one ref from the local scope.
81 
82         if (CudaNdarray_Check(py_V1))
83         {
84             //fprintf(stderr, "c_extract CNDA object w refcnt %p %i\n", py_V1, (py_V1->ob_refcnt));
85             V1 = (CudaNdarray*)py_V1;
86             //std::cerr << "c_extract " << V1 << '\n';
87         
88 
89                 if (V1->nd != 3)
90                 {
91                     PyErr_Format(PyExc_RuntimeError,
92                                  "c_extract: Some CudaNdarray has rank %i, it was supposed to have rank 3",
93                                  V1->nd);
94                     V1 = NULL;
95                     {
96         __failure = 2;
97         if (!PyErr_Occurred()) {
98             PyErr_SetString(PyExc_RuntimeError,
99                 "Unexpected error in an Op's C code. "
100                 "No Python exception was set.");
101             }
102         goto __label_2;};
103                 }
104                 //std::cerr << "c_extract " << V1 << " nd check passed\n";
105             
106 
107                 if (CudaNdarray_HOST_DIMS(V1)[2] != 1)
108                 {
109                     PyErr_Format(PyExc_RuntimeError,
110                                  "c_extract: Some CudaNdarray has dim %i on broadcastable dimension %i",
111                                  CudaNdarray_HOST_DIMS(V1)[2], 2);
112                     V1 = NULL;
113                     {
114         __failure = 2;
115         if (!PyErr_Occurred()) {
116             PyErr_SetString(PyExc_RuntimeError,
117                 "Unexpected error in an Op's C code. "
118                 "No Python exception was set.");
119             }
120         goto __label_2;};
121                 }
122                 //std::cerr << "c_extract " << V1 << "dim check 2 passed\n";
123                 //std::cerr << "c_extract " << V1 << "checking bcast 2 <" << V1->str<< ">\n";
124                 //std::cerr << "c_extract " << V1->str[2] << "\n";
125                 if (CudaNdarray_HOST_STRIDES(V1)[2])
126                 {
127                     //std::cerr << "c_extract bad stride detected...\n";
128                     PyErr_Format(PyExc_RuntimeError,
129                                  "c_extract: Some CudaNdarray has a nonzero stride %i on a broadcastable dimension %i",
130                                  CudaNdarray_HOST_STRIDES(V1)[2], 2);
131                     V1 = NULL;
132                     {
133         __failure = 2;
134         if (!PyErr_Occurred()) {
135             PyErr_SetString(PyExc_RuntimeError,
136                 "Unexpected error in an Op's C code. "
137                 "No Python exception was set.");
138             }
139         goto __label_2;};
140                 }
141                 //std::cerr << "c_extract " << V1 << "bcast check 2 passed\n";
142                     
143 
144                 assert(V1);
145                 Py_INCREF(py_V1);
146             }
147             else if (py_V1 == Py_None)
148             {
149                 PyErr_SetString(PyExc_TypeError,
150                                 "expected a CudaNdarray, not None");
151                 V1 = NULL;
152                 {
153         __failure = 2;
154         if (!PyErr_Occurred()) {
155             PyErr_SetString(PyExc_RuntimeError,
156                 "Unexpected error in an Op's C code. "
157                 "No Python exception was set.");
158             }
159         goto __label_2;};
160             }
161             else
162             {
163                 //fprintf(stderr, "FAILING c_extract CNDA object w refcnt %p %i\n", py_V1, (py_V1->ob_refcnt));
164                 PyErr_SetString(PyExc_TypeError, "Argument not a CudaNdarray");
165                 V1 = NULL;
166                 {
167         __failure = 2;
168         if (!PyErr_Occurred()) {
169             PyErr_SetString(PyExc_RuntimeError,
170                 "Unexpected error in an Op's C code. "
171                 "No Python exception was set.");
172             }
173         goto __label_2;};
174             }
175             //std::cerr << "c_extract done " << V1 << '\n';
176             
177 
178         }
179         
180 {
181 
182     py_V3 = PyList_GET_ITEM(storage_V3, 0);
183     {Py_XINCREF(py_V3);}
184     
185         assert(py_V3->ob_refcnt >= 2); // There should be at least one ref from the container object,
186         // and one ref from the local scope.
187 
188         if (CudaNdarray_Check(py_V3))
189         {
190             //fprintf(stderr, "c_extract CNDA object w refcnt %p %i\n", py_V3, (py_V3->ob_refcnt));
191             V3 = (CudaNdarray*)py_V3;
192             //std::cerr << "c_extract " << V3 << '\n';
193         
194 
195                 if (V3->nd != 3)
196                 {
197                     PyErr_Format(PyExc_RuntimeError,
198                                  "c_extract: Some CudaNdarray has rank %i, it was supposed to have rank 3",
199                                  V3->nd);
200                     V3 = NULL;
201                     {
202         __failure = 4;
203         if (!PyErr_Occurred()) {
204             PyErr_SetString(PyExc_RuntimeError,
205                 "Unexpected error in an Op's C code. "
206                 "No Python exception was set.");
207             }
208         goto __label_4;};
209                 }
210                 //std::cerr << "c_extract " << V3 << " nd check passed\n";
211             
212 
213                 if (CudaNdarray_HOST_DIMS(V3)[2] != 1)
214                 {
215                     PyErr_Format(PyExc_RuntimeError,
216                                  "c_extract: Some CudaNdarray has dim %i on broadcastable dimension %i",
217                                  CudaNdarray_HOST_DIMS(V3)[2], 2);
218                     V3 = NULL;
219                     {
220         __failure = 4;
221         if (!PyErr_Occurred()) {
222             PyErr_SetString(PyExc_RuntimeError,
223                 "Unexpected error in an Op's C code. "
224                 "No Python exception was set.");
225             }
226         goto __label_4;};
227                 }
228                 //std::cerr << "c_extract " << V3 << "dim check 2 passed\n";
229                 //std::cerr << "c_extract " << V3 << "checking bcast 2 <" << V3->str<< ">\n";
230                 //std::cerr << "c_extract " << V3->str[2] << "\n";
231                 if (CudaNdarray_HOST_STRIDES(V3)[2])
232                 {
233                     //std::cerr << "c_extract bad stride detected...\n";
234                     PyErr_Format(PyExc_RuntimeError,
235                                  "c_extract: Some CudaNdarray has a nonzero stride %i on a broadcastable dimension %i",
236                                  CudaNdarray_HOST_STRIDES(V3)[2], 2);
237                     V3 = NULL;
238                     {
239         __failure = 4;
240         if (!PyErr_Occurred()) {
241             PyErr_SetString(PyExc_RuntimeError,
242                 "Unexpected error in an Op's C code. "
243                 "No Python exception was set.");
244             }
245         goto __label_4;};
246                 }
247                 //std::cerr << "c_extract " << V3 << "bcast check 2 passed\n";
248                     
249 
250                 assert(V3);
251                 Py_INCREF(py_V3);
252             }
253             else if (py_V3 == Py_None)
254             {
255                 PyErr_SetString(PyExc_TypeError,
256                                 "expected a CudaNdarray, not None");
257                 V3 = NULL;
258                 {
259         __failure = 4;
260         if (!PyErr_Occurred()) {
261             PyErr_SetString(PyExc_RuntimeError,
262                 "Unexpected error in an Op's C code. "
263                 "No Python exception was set.");
264             }
265         goto __label_4;};
266             }
267             else
268             {
269                 //fprintf(stderr, "FAILING c_extract CNDA object w refcnt %p %i\n", py_V3, (py_V3->ob_refcnt));
270                 PyErr_SetString(PyExc_TypeError, "Argument not a CudaNdarray");
271                 V3 = NULL;
272                 {
273         __failure = 4;
274         if (!PyErr_Occurred()) {
275             PyErr_SetString(PyExc_RuntimeError,
276                 "Unexpected error in an Op's C code. "
277                 "No Python exception was set.");
278             }
279         goto __label_4;};
280             }
281             //std::cerr << "c_extract done " << V3 << '\n';
282             
283 
284 {
285 // Op class GpuElemwise
286 
287         //std::cerr << "C_CODE RoundHalfToEven START\n";
288         //standard elemwise size checks
289             
290 
291             int dims[3] = {1,1,1};
292             
293 
294                 int broadcasts_V3[3] = {0, 0, 1};
295                 
296 
297         //std::cerr << "C_CODE RoundHalfToEven checking input V3\n";
298         if (3 != V3->nd)
299         {
300             PyErr_Format(PyExc_TypeError,
301                          "need 3 dims, not %i", V3->nd);
302             {
303         __failure = 5;
304         if (!PyErr_Occurred()) {
305             PyErr_SetString(PyExc_RuntimeError,
306                 "Unexpected error in an Op's C code. "
307                 "No Python exception was set.");
308             }
309         goto __label_5;};
310         }
311         for (int i = 0; i< 3; ++i)
312         {
313             dims[i] = (dims[i] == 1) ? CudaNdarray_HOST_DIMS(V3)[i] : dims[i];
314             if ((!(broadcasts_V3[i] &&
315                  CudaNdarray_HOST_DIMS(V3)[i] == 1)) &&
316                 (dims[i] != CudaNdarray_HOST_DIMS(V3)[i]))
317             {
318                 //std::cerr << "C_CODE RoundHalfToEven checking input V3 failed\n";
319                 PyErr_Format(PyExc_ValueError,
320                              "GpuElemwise. Input dimension mis-match. Input"
321                              " 0 (indices start at 0) has shape[%i] == %i"
322                              ", but the output's size on that axis is %i.",
323                              i,
324                              CudaNdarray_HOST_DIMS(V3)[i],
325                              dims[i]
326                             );
327                 {
328         __failure = 5;
329         if (!PyErr_Occurred()) {
330             PyErr_SetString(PyExc_RuntimeError,
331                 "Unexpected error in an Op's C code. "
332                 "No Python exception was set.");
333             }
334         goto __label_5;};
335             }
336         }
337             
338 
339         for (int i = 0; (i< 3) && (V1); ++i) {
340             if (dims[i] != CudaNdarray_HOST_DIMS(V1)[i])
341             {
342                 Py_DECREF(V1);
343                 V1 = NULL;
344             }
345         }
346         if (V1 && !CudaNdarray_is_c_contiguous(V1))
347         {
348             Py_XDECREF(V1);
349             V1 = NULL;
350         }
351         if (NULL == V1)
352         {
353             V1 = (CudaNdarray*)CudaNdarray_New();
354             if (!V1)
355             {
356                 //error string already set
357                 {
358         __failure = 5;
359         if (!PyErr_Occurred()) {
360             PyErr_SetString(PyExc_RuntimeError,
361                 "Unexpected error in an Op's C code. "
362                 "No Python exception was set.");
363             }
364         goto __label_5;};
365             }
366             if (CudaNdarray_alloc_contiguous(V1, 3, dims))
367             {
368                 //error string already set
369                 Py_DECREF(V1);
370                 V1 = NULL;
371                 {
372         __failure = 5;
373         if (!PyErr_Occurred()) {
374             PyErr_SetString(PyExc_RuntimeError,
375                 "Unexpected error in an Op's C code. "
376                 "No Python exception was set.");
377             }
378         goto __label_5;};
379             }
380         }
381         //std::cerr << "ELEMWISE NEW V1 nd" << V1->nd << "\n";
382         //std::cerr << "ELEMWISE NEW V1 data" << V1->devdata << "\n";
383         
384 
385         {
386             //new block so that failure gotos don't skip over variable initialization
387             //std::cerr << "calling callkernel\n";
388             if (callkernel_node_m9ba06c94983f27c76a27385a5df5c6b1_0(1, 0, dims
389             
390 
391                         , CudaNdarray_DEV_DATA(V3), CudaNdarray_HOST_STRIDES(V3)
392             
393 
394                         , CudaNdarray_DEV_DATA(V1), CudaNdarray_HOST_STRIDES(V1)
395             
396 
397                         ))
398             {
399                  // error
400             
401 
402                 Py_DECREF(V1);
403                 V1 = NULL;
404                 
405 
406                 {
407         __failure = 5;
408         if (!PyErr_Occurred()) {
409             PyErr_SetString(PyExc_RuntimeError,
410                 "Unexpected error in an Op's C code. "
411                 "No Python exception was set.");
412             }
413         goto __label_5;};
414             }
415             else // no error
416             {
417             }
418         }
419         //std::cerr << "C_CODE RoundHalfToEven END\n";
420         
421 __label_5:
422 
423 double __DUMMY_5;
424 
425 }
426 __label_4:
427 
428         //std::cerr << "cleanup " << py_V3 << " " << V3 << "\n";
429         //fprintf(stderr, "c_cleanup CNDA py_object w refcnt %p %i\n", py_V3, (py_V3->ob_refcnt));
430         if (V3)
431         {
432             //fprintf(stderr, "c_cleanup CNDA cn_object w refcnt %p %i\n", V3, (V3->ob_refcnt));
433             Py_XDECREF(V3);
434         }
435         //std::cerr << "cleanup done" << py_V3 << "\n";
436         
437     {Py_XDECREF(py_V3);}
438     
439 double __DUMMY_4;
440 
441 }
442 __label_2:
443 
444     if (!__failure) {
445       
446         //std::cerr << "sync\n";
447         if (NULL == V1) {
448             // failure: sync None to storage
449             Py_XDECREF(py_V1);
450             py_V1 = Py_None;
451             Py_INCREF(py_V1);
452         }
453         else
454         {
455             if (py_V1 != (PyObject*)V1)
456             {
457                 Py_XDECREF(py_V1);
458                 py_V1 = (PyObject*)V1;
459                 Py_INCREF(py_V1);
460             }
461             assert(py_V1->ob_refcnt);
462         }
463         
464       PyObject* old = PyList_GET_ITEM(storage_V1, 0);
465       {Py_XINCREF(py_V1);}
466       PyList_SET_ITEM(storage_V1, 0, py_V1);
467       {Py_XDECREF(old);}
468     }
469     
470         //std::cerr << "cleanup " << py_V1 << " " << V1 << "\n";
471         //fprintf(stderr, "c_cleanup CNDA py_object w refcnt %p %i\n", py_V1, (py_V1->ob_refcnt));
472         if (V1)
473         {
474             //fprintf(stderr, "c_cleanup CNDA cn_object w refcnt %p %i\n", V1, (V1->ob_refcnt));
475             Py_XDECREF(V1);
476         }
477         //std::cerr << "cleanup done" << py_V1 << "\n";
478         
479     {Py_XDECREF(py_V1);}
480     
481 double __DUMMY_2;
482 
483 }
484 
485             
486         if (__failure) {
487             // When there is a failure, this code puts the exception
488             // in __ERROR.
489             PyObject* err_type = NULL;
490             PyObject* err_msg = NULL;
491             PyObject* err_traceback = NULL;
492             PyErr_Fetch(&err_type, &err_msg, &err_traceback);
493             if (!err_type) {err_type = Py_None;Py_INCREF(Py_None);}
494             if (!err_msg) {err_msg = Py_None; Py_INCREF(Py_None);}
495             if (!err_traceback) {err_traceback = Py_None; Py_INCREF(Py_None);}
496             PyObject* old_err_type = PyList_GET_ITEM(__ERROR, 0);
497             PyObject* old_err_msg = PyList_GET_ITEM(__ERROR, 1);
498             PyObject* old_err_traceback = PyList_GET_ITEM(__ERROR, 2);
499             PyList_SET_ITEM(__ERROR, 0, err_type);
500             PyList_SET_ITEM(__ERROR, 1, err_msg);
501             PyList_SET_ITEM(__ERROR, 2, err_traceback);
502             {Py_XDECREF(old_err_type);}
503             {Py_XDECREF(old_err_msg);}
504             {Py_XDECREF(old_err_traceback);}
505         }
506         // The failure code is returned to index what code block failed.
507         return __failure;
508         
509         }
510     };
511     }
512     
513 
514         static int __struct_compiled_op_m9ba06c94983f27c76a27385a5df5c6b1_executor(__struct_compiled_op_m9ba06c94983f27c76a27385a5df5c6b1 *self) {
515             return self->run();
516         }
517 
518         static void __struct_compiled_op_m9ba06c94983f27c76a27385a5df5c6b1_destructor(PyObject *capsule) {
519             __struct_compiled_op_m9ba06c94983f27c76a27385a5df5c6b1 *self = (__struct_compiled_op_m9ba06c94983f27c76a27385a5df5c6b1 *)PyCapsule_GetContext(capsule);
520             delete self;
521         }
522         
523 //////////////////////
524 ////  Functions
525 //////////////////////
526 static PyObject * instantiate(PyObject * self, PyObject *argtuple) {
527   assert(PyTuple_Check(argtuple));
528   if (3 != PyTuple_Size(argtuple)){ 
529      PyErr_Format(PyExc_TypeError, "Wrong number of arguments, expected 3, got %i", (int)PyTuple_Size(argtuple));
530      return NULL;
531   }
532   __struct_compiled_op_m9ba06c94983f27c76a27385a5df5c6b1* struct_ptr = new __struct_compiled_op_m9ba06c94983f27c76a27385a5df5c6b1();
533   if (struct_ptr->init( PyTuple_GET_ITEM(argtuple, 0),PyTuple_GET_ITEM(argtuple, 1),PyTuple_GET_ITEM(argtuple, 2) ) != 0) {
534     delete struct_ptr;
535     return NULL;
536   }
537     PyObject* thunk = PyCapsule_New((void*)(&__struct_compiled_op_m9ba06c94983f27c76a27385a5df5c6b1_executor), NULL, __struct_compiled_op_m9ba06c94983f27c76a27385a5df5c6b1_destructor);
538     if (thunk != NULL && PyCapsule_SetContext(thunk, struct_ptr) != 0) {
539         PyErr_Clear();
540         Py_DECREF(thunk);
541         thunk = NULL;
542     }
543 
544   return thunk; }
545 
546 //////////////////////
547 ////  Module init
548 //////////////////////
549 static PyMethodDef MyMethods[] = {
550  {"instantiate", instantiate, METH_VARARGS, "undocumented"} ,
551  {NULL, NULL, 0, NULL}
552 };
553 static struct PyModuleDef moduledef = {
554       PyModuleDef_HEAD_INIT,
555       "m9ba06c94983f27c76a27385a5df5c6b1",
556       NULL,
557       -1,
558       MyMethods,
559 };
560 
561 PyMODINIT_FUNC PyInit_m9ba06c94983f27c76a27385a5df5c6b1(void) {
562     PyObject *m = PyModule_Create(&moduledef);
563     return m;
564 }
565 
===============================
I:\Anaconda3\lib\site-packages\theano\sandbox\cuda\cuda_ndarray.cuh(17) : warning C4005: 'PyString_Check' : macro redefinition

       I:\Anaconda3\lib\site-packages\numpy\core\include\numpy/npy_3kcompat.h(63) : see previous definition of 'PyString_Check'

I:\Anaconda3\lib\site-packages\theano\sandbox\cuda\cuda_ndarray.cuh(18) : warning C4005: 'PyString_FromString' : macro redefinition

       I:\Anaconda3\lib\site-packages\numpy\core\include\numpy/npy_3kcompat.h(65) : see previous definition of 'PyString_FromString'

I:\Anaconda3\lib\site-packages\theano\sandbox\cuda\cuda_ndarray.cuh(19) : warning C4005: 'PyString_AsString' : macro redefinition

       I:\Anaconda3\lib\site-packages\numpy\core\include\numpy/npy_3kcompat.h(72) : see previous definition of 'PyString_AsString'

I:\Anaconda3\lib\site-packages\theano\sandbox\cuda\cuda_ndarray.cuh(20) : warning C4005: 'PyString_FromStringAndSize' : macro redefinition

       I:\Anaconda3\lib\site-packages\numpy\core\include\numpy/npy_3kcompat.h(66) : see previous definition of 'PyString_FromStringAndSize'

I:\Anaconda3\lib\site-packages\theano\sandbox\cuda\cuda_ndarray.cuh(21) : warning C4005: 'PyString_Size' : macro redefinition

       I:\Anaconda3\lib\site-packages\numpy\core\include\numpy/npy_3kcompat.h(74) : see previous definition of 'PyString_Size'













mod.cu(388): error: identifier "callkernel_node_m9ba06c94983f27c76a27385a5df5c6b1_0" is undefined









1 error detected in the compilation of "C:/Users/Wang/AppData/Local/Temp/tmpxft_00000f40_00000000-10_mod.cpp1.ii".

mod.cu


['nvcc', '-shared', '-O3', '--maxrregcount=32', '-LI:\\Anaconda3\\libs', '-arch=sm_61', '--compiler-bindir', 'C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\bin', '-Xlinker', '/DEBUG', '-D HAVE_ROUND', '-m64', '-Xcompiler', '-DCUDA_NDARRAY_CUH=m18715462c72ed6afcd7ca5d52813ce90,-DNPY_NO_DEPRECATED_API=NPY_1_7_API_VERSION,/Zi,/MD', '-I"C:\\Users\\Wang\\AppData\\Local\\Theano\\compiledir_Windows-8.1-6.3.9600-Intel64_Family_6_Model_60_Stepping_3_GenuineIntel-3.4.4-64\\cuda_ndarray"', '-I"I:\\Anaconda3\\lib\\site-packages\\numpy\\core\\include"', '-I"I:\\Anaconda3\\include"', '-I"I:\\Anaconda3\\lib\\site-packages\\theano\\gof"', '-I"I:\\Anaconda3\\lib\\site-packages\\theano\\sandbox\\cuda"', '-L"C:\\Users\\Wang\\AppData\\Local\\Theano\\compiledir_Windows-8.1-6.3.9600-Intel64_Family_6_Model_60_Stepping_3_GenuineIntel-3.4.4-64\\cuda_ndarray"', '-L"I:\\Anaconda3\\libs"', '-L"I:\\Anaconda3"', '-o', 'C:\\Users\\Wang\\AppData\\Local\\Theano\\compiledir_Windows-8.1-6.3.9600-Intel64_Family_6_Model_60_Stepping_3_GenuineIntel-3.4.4-64\\tmp28292v2v\\m9ba06c94983f27c76a27385a5df5c6b1.pyd', 'mod.cu', '-lcudart', '-lcublas', '-lcuda_ndarray', '-lpython34']
Traceback (most recent call last):
 File "J:\git\DwellTimePrediction\DwellTimePrediction\Scenario3\models_training.py", line 243, in <module>
   loss_lr = lr.train_on_batch(merge_Xs(X_batch_ctx, X_batch_dep), y_batch)
 File "I:\Anaconda3\lib\site-packages\keras\models.py", line 951, in train_on_batch
   class_weight=class_weight)
 File "I:\Anaconda3\lib\site-packages\keras\engine\training.py", line 1564, in train_on_batch
   self._make_train_function()
 File "I:\Anaconda3\lib\site-packages\keras\engine\training.py", line 944, in _make_train_function
   **self._function_kwargs)
 File "I:\Anaconda3\lib\site-packages\keras\backend\theano_backend.py", line 1206, in function
   return Function(inputs, outputs, updates=updates, **kwargs)
 File "I:\Anaconda3\lib\site-packages\keras\backend\theano_backend.py", line 1192, in __init__
   **kwargs)
 File "I:\Anaconda3\lib\site-packages\theano\compile\function.py", line 326, in function
   output_keys=output_keys)
 File "I:\Anaconda3\lib\site-packages\theano\compile\pfunc.py", line 484, in pfunc
   output_keys=output_keys)
 File "I:\Anaconda3\lib\site-packages\theano\compile\function_module.py", line 1789, in orig_function
   defaults)
 File "I:\Anaconda3\lib\site-packages\theano\compile\function_module.py", line 1653, in create
   input_storage=input_storage_lists, storage_map=storage_map)
 File "I:\Anaconda3\lib\site-packages\theano\gof\link.py", line 699, in make_thunk
   storage_map=storage_map)[:3]
 File "I:\Anaconda3\lib\site-packages\theano\gof\vm.py", line 1051, in make_all
   no_recycling))
 File "I:\Anaconda3\lib\site-packages\theano\sandbox\cuda\__init__.py", line 257, in make_thunk
   compute_map, no_recycling)
 File "I:\Anaconda3\lib\site-packages\theano\gof\op.py", line 932, in make_thunk
   no_recycling)
 File "I:\Anaconda3\lib\site-packages\theano\gof\op.py", line 833, in make_c_thunk
   output_storage=node_output_storage)
 File "I:\Anaconda3\lib\site-packages\theano\gof\cc.py", line 1190, in make_thunk
   keep_lock=keep_lock)
 File "I:\Anaconda3\lib\site-packages\theano\gof\cc.py", line 1131, in __compile__
   keep_lock=keep_lock)
 File "I:\Anaconda3\lib\site-packages\theano\gof\cc.py", line 1589, in cthunk_factory
   key=key, lnk=self, keep_lock=keep_lock)
 File "I:\Anaconda3\lib\site-packages\theano\gof\cmodule.py", line 1145, in module_from_key
   module = lnk.compile_cmodule(location)
 File "I:\Anaconda3\lib\site-packages\theano\gof\cc.py", line 1492, in compile_cmodule
   preargs=preargs)
 File "I:\Anaconda3\lib\site-packages\theano\sandbox\cuda\nvcc_compiler.py", line 405, in compile_str
   'for cmd', ' '.join(cmd))
Exception: ('The following error happened while compiling the node', GpuElemwise{RoundHalfToEven,no_inplace}(GpuElemwise{scalar_sigmoid,no_inplace}.0), '\n', 'nvcc return status', 2, 'for cmd', 'nvcc -shared -O3 --maxrregcount=32 -LI:\\Anaconda3\\libs -arch=sm_61 --compiler-bindir C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\bin -Xlinker /DEBUG -D HAVE_ROUND -m64 -Xcompiler -DCUDA_NDARRAY_CUH=m18715462c72ed6afcd7ca5d52813ce90,-DNPY_NO_DEPRECATED_API=NPY_1_7_API_VERSION,/Zi,/MD -I"C:\\Users\\Wang\\AppData\\Local\\Theano\\compiledir_Windows-8.1-6.3.9600-Intel64_Family_6_Model_60_Stepping_3_GenuineIntel-3.4.4-64\\cuda_ndarray" -I"I:\\Anaconda3\\lib\\site-packages\\numpy\\core\\include" -I"I:\\Anaconda3\\include" -I"I:\\Anaconda3\\lib\\site-packages\\theano\\gof" -I"I:\\Anaconda3\\lib\\site-packages\\theano\\sandbox\\cuda" -L"C:\\Users\\Wang\\AppData\\Local\\Theano\\compiledir_Windows-8.1-6.3.9600-Intel64_Family_6_Model_60_Stepping_3_GenuineIntel-3.4.4-64\\cuda_ndarray" -L"I:\\Anaconda3\\libs" -L"I:\\Anaconda3" -o C:\\Users\\Wang\\AppData\\Local\\Theano\\compiledir_Windows-8.1-6.3.9600-Intel64_Family_6_Model_60_Stepping_3_GenuineIntel-3.4.4-64\\tmp28292v2v\\m9ba06c94983f27c76a27385a5df5c6b1.pyd mod.cu -lcudart -lcublas -lcuda_ndarray -lpython34', '[GpuElemwise{RoundHalfToEven,no_inplace}(<CudaNdarrayType(float32, (False, False, True))>)]')