tzczsq commented on 1 Oct 2015
Hi, I have a problem.
I want to use LSTM to classify multi-class video sequences with different segments with fixed dimension.
For example, I have two video sequenc samples A, and B with 7 classes,
Video sequence A has 4 segments ,each of which has 600-dimension features,
i.e. A=[600_dim,600_dim,600_dim,600_dim]
Sequence B with 3 segments, i.e., B=[600_dim,600_dim,600_dim]
The number of segment denotes the time axis.
How to organize the video sequences as the input shape of LSTM?
I have modified the Example of IMDB LSTM , as described below.
But the implement is failed.
nb_classes=7
y_train = np_utils.to_categorical(y_train, nb_classes)
y_test = np_utils.to_categorical(y_test, nb_classes)
max_features = 600
maxlen = 10 # cut texts after this number of words (among top max_features most common words)
batch_size = 6
print("Pad sequences (samples x time)")
X_train = sequence.pad_sequences(X_train, maxlen=maxlen)
X_test = sequence.pad_sequences(X_test, maxlen=maxlen)
print('X_train shape:', X_train.shape)
print('X_test shape:', X_test.shape)
print('Build model...')
model = Sequential()
model.add(Embedding(max_features, 128)) ## samples*128
model.add(LSTM(128, 128)) # try using a GRU instead, for fun
model.add(Dropout(0.5))
model.add(Dense(128, 7))
model.add(Activation('softmax'))
learning_rate=0.001
rmsprop = RMSprop(lr=learning_rate)
model.compile(loss='categorical_crossentropy', optimizer=rmsprop)
model.fit(X_train, y_train, batch_size=batch_size, nb_epoch=4,
show_accuracy=True, verbose=1, validation_data=(X_test, y_test))
scores = model.evaluate(X_test, y_test, show_accuracy=True, verbose=0)
print('LSTM test score:', scores[0])
print('LSTM test accuracy:', scores[1])
The error information:
IndexError: index 7 is out of bounds for axis 1 with size 7 ### np_utils.to_categorical