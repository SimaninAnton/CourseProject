Contributor
linxihui commented on 3 May 2017 â€¢
edited
@fchollet
K.int_shape is used in many places in the code where InputSpec was used. It should usually work since most of the time, the input is a keras tensor, but it is not guaranteed, e.g., calling Layer.call directly on a non-keras tensor, like in a Wrapper.
Here are a few examples.
https://github.com/fchollet/keras/blob/master/keras/layers/normalization.py#L127
https://github.com/fchollet/keras/blob/master/keras/layers/recurrent.py#L317
Since sometimes the input_shape is needed for .call and .compute_mask, I would suggest to define property self.input_spec in the build method in the Layer class, or to always have input_shape passed into .call and .compute_mask method. The former approach seems easier.
Also, since sometimes K.int_shape is needed for tensorflow, I suggest to define K.int_shape in the some spirit of dict.get, i.e.,
def int_shape(tensor, alter_shape=None):
   # return `alter_shape` if theano and tensor is not a keras tensor
   # or maybe better to combine the two results to better remove `None` values.
so that one can use
input_shape = K.int_shape(tensor, input_spec.shape)
regardless of the backend and whether it is a keras tensor or not.