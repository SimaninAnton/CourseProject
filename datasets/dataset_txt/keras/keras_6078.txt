KeironO commented on 21 Jan 2016
Hey there,
I have a binary cross-entropy problem that I would like to solve using one-class classification.
So to do this, I have the following model...
    model = Sequential()
    model.add(Dense(256, input_shape=(1022, )))
    model.add(Activation("relu"))
    model.add(Dropout(0.5))
    model.add(Dense(128))
    model.add(Activation("relu"))
    model.add(Dropout(0.5))
    model.add(Dense(1))
    model.add(Activation("sigmoid"))

    adam = Adam()
    model.compile(loss='binary_crossentropy', optimizer=adam, class_mode="binary")
However, this is returning the following error.
ValueError: Input dimension mis-match. (input[0].shape[1] = 2, input[1].shape[1] = 1)
Apply node that caused the error: Elemwise{Composite{EQ(i0, RoundHalfAwayFromZero(i1))}}(<TensorType(float32, matrix)>, Elemwise{Composite{scalar_sigmoid((i0 + i1))}}[(0, 0)].0)
Toposort index: 54
Inputs types: [TensorType(float32, matrix), TensorType(float32, matrix)]
Inputs shapes: [(8, 2), (8, 1)]
Inputs strides: [(8, 4), (4, 4)]
Inputs values: ['not shown', 'not shown']
Outputs clients: [[Sum{acc_dtype=int64}(Elemwise{Composite{EQ(i0, RoundHalfAwayFromZero(i1))}}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Can anyone help?