kelvinwop commented on 22 Oct 2019 â€¢
edited
System information
custom code
win 10
TensorFlow backend: yes
TensorFlow version: (__version__) 2.0.0
Keras version: (__version__) 2.3.1
Python version: 3.7.1
CUDA/cuDNN version: n/a
GPU model and memory: n/a
Describe the current behavior
Describe the expected behavior
not that
Code to reproduce the issue
def cnn_gru_model(data):
    #input layer
    input_x = keras.Input(shape=(np.shape(data['x_train'])[1], 1), name="x_input")
    print(input_x)
    
    conv = (Conv1D(64, 1, activation='relu'))(input_x)
    conv = BatchNormalization()(conv)
    conv = (Conv1D(64, 2, activation='relu'))(conv)
    conv = BatchNormalization()(conv)
    
    gru = (CuDNNGRU(64, return_sequences=True))(conv)
    gru = (CuDNNGRU(32, return_sequences=True))(gru)
    gru = (CuDNNGRU(16, return_sequences=False))(gru)
    
    gru = layers.Dense(64, activation='sigmoid')(gru)
    gru = layers.Dense(32, activation='sigmoid')(gru)
    y = layers.Dense(1, activation='sigmoid')(gru)
    
    #model
    #classifier = Model([input_x, input_xd], y)

    classifier = Model([input_x], y)
    classifier.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    return classifier

def train_model(model, t_in, v_in, t_out, v_out, MODEL_NAME, class_weight=None):
    callbacks = [EarlyStopping(monitor='val_loss', patience=PATIENCE),
             ModelCheckpoint(filepath=MODEL_PATH+"/"+MODEL_NAME+".h5", monitor='val_loss', verbose=2, save_best_only=True)]
    model.summary()
    model.fit(x={"x_input": t_in}, y=t_out, shuffle=True, epochs=EPOCHS, callbacks=callbacks, batch_size=BATCH_SIZE,
              verbose=1, validation_data=([v_in], v_out), class_weight=class_weight)
    return model

network = cnn_gru_model({'x_train': t_in})
model = train_model(network)
Other info / logs
more code at
https://github.com/kelvinwop/classifiers/blob/master/circles.ipynb