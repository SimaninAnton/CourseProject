lorenzori commented on 15 Feb 2017 â€¢
edited
newbie to GPUs so bare with me!
importing keras modules, everything looks good:
Using Theano backend.
Using gpu device 0: Tesla M60 (CNMeM is disabled, cuDNN not available)
however when I call .fit I get the following (very long) error which I struggle to understand (there is an exception towards the end). nvcc version 8
['nvcc', '-shared', '-O3', '-arch=sm_52', '--compiler-bindir', 'C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin', '-Xlinker', '/DEBUG', '-D HAVE_ROUND', '-m64', '-Xcompiler', '-DCUDA_NDARRAY_CUH=c72d035fdf91890f3b36710688069b2e,-DNPY_NO_DEPRECATED_API=NPY_1_7_API_VERSION,/Zi,/MD', '-IC:\Users\...\AppData\Local\Theano\compiledir_Windows-10-10.0.14393-Intel64_Family_6_Model_63_Stepping_2_GenuineIntel-2.7.13-64\cuda_ndarray', '-IC:\ProgramData\Anaconda2\lib\site-packages\numpy\core\include', '-IC:\ProgramData\Anaconda2\include', '-IC:\ProgramData\Anaconda2\lib\site-packages\theano\gof', '-IC:\ProgramData\Anaconda2\lib\site-packages\theano\sandbox\cuda', '-o', 'C:\Users\...\AppData\Local\Theano\compiledir_Windows-10-10.0.14393-Intel64_Family_6_Model_63_Stepping_2_GenuineIntel-2.7.13-64\tmp9gptot\fc0a77fd0d7a0a0c610947f403047873.pyd', 'mod.cu', '-LC:\Users\...\AppData\Local\Theano\compiledir_Windows-10-10.0.14393-Intel64_Family_6_Model_63_Stepping_2_GenuineIntel-2.7.13-64\cuda_ndarray', '-LC:\ProgramData\Anaconda2\libs', '-LC:\ProgramData\Anaconda2', '-lcudart', '-lcublas', '-lcuda_ndarray', '-lpython27']
1 #include <Python.h>
2 #include
3 #include "theano_mod_helper.h"
4 #include "cuda_ndarray.cuh"
5 //////////////////////
6 //// Support Code
7 //////////////////////
8
9
10 namespace {
11 struct __struct_compiled_op_fc0a77fd0d7a0a0c610947f403047873 {
12 PyObject* __ERROR;
13
14 PyObject* storage_V3;
15 PyObject* storage_V1;
16
17
18 __struct_compiled_op_fc0a77fd0d7a0a0c610947f403047873() {
19 // This is only somewhat safe because we:
20 // 1) Are not a virtual class
21 // 2) Do not use any virtual classes in the members
22 // 3) Deal with mostly POD and pointers
23
24 // If this changes, we would have to revise this, but for
25 // now I am tired of chasing segfaults because
26 // initialization code had an error and some pointer has
27 // a junk value.
28 memset(this, 0, sizeof(this));
29 }
30 ~__struct_compiled_op_fc0a77fd0d7a0a0c610947f403047873(void) {
31 cleanup();
32 }
33
34 int init(PyObject __ERROR, PyObject* storage_V3, PyObject* storage_V1) {
35 Py_XINCREF(storage_V3);
36 Py_XINCREF(storage_V1);
37 this->storage_V3 = storage_V3;
38 this->storage_V1 = storage_V1;
39
40
41
42
43 this->__ERROR = __ERROR;
44 return 0;
45 }
46 void cleanup(void) {
47 __label_1:
48
49 double __DUMMY_1;
50 __label_3:
51
52 double __DUMMY_3;
53 __label_6:
54
55 double __DUMMY_6;
56
57 Py_XDECREF(this->storage_V3);
58 Py_XDECREF(this->storage_V1);
59 }
60 int run(void) {
61 int __failure = 0;
62
63 PyObject* py_V1;
64 CudaNdarray * V1;
65 PyObject* py_V3;
66 CudaNdarray * V3;
67 {
68
69 py_V1 = Py_None;
70 {Py_XINCREF(py_V1);}
71 V1 = NULL;
72 {
73
74 py_V3 = PyList_GET_ITEM(storage_V3, 0);
75 {Py_XINCREF(py_V3);}
76
77 assert(py_V3->ob_refcnt >= 2); // There should be at least one ref from the container object,
78 // and one ref from the local scope.
79
80 if (CudaNdarray_Check(py_V3))
81 {
82 //fprintf(stderr, "c_extract CNDA object w refcnt %p %i\n", py_V3, (py_V3->ob_refcnt));
83 V3 = (CudaNdarray*)py_V3;
84 //std::cerr << "c_extract " << V3 << '\n';
85
86
87 if (V3->nd != 1)
88 {
89 PyErr_Format(PyExc_RuntimeError,
90 "c_extract: Some CudaNdarray has rank %i, it was supposed to have rank 1",
91 V3->nd);
92 V3 = NULL;
93 {
94 __failure = 4;
95 if (!PyErr_Occurred()) {
96 PyErr_SetString(PyExc_RuntimeError,
97 "Unexpected error in an Op's C code. "
98 "No Python exception was set.");
99 }
100 goto __label_4;};
101 }
102 //std::cerr << "c_extract " << V3 << " nd check passed\n";
103
104
105 assert(V3);
106 Py_INCREF(py_V3);
107 }
108 else if (py_V3 == Py_None)
109 {
110 PyErr_SetString(PyExc_TypeError,
111 "expected a CudaNdarray, not None");
112 V3 = NULL;
113 {
114 __failure = 4;
115 if (!PyErr_Occurred()) {
116 PyErr_SetString(PyExc_RuntimeError,
117 "Unexpected error in an Op's C code. "
118 "No Python exception was set.");
119 }
120 goto __label_4;};
121 }
122 else
123 {
124 //fprintf(stderr, "FAILING c_extract CNDA object w refcnt %p %i\n", py_V3, (py_V3->ob_refcnt));
125 PyErr_SetString(PyExc_TypeError, "Argument not a CudaNdarray");
126 V3 = NULL;
127 {
128 __failure = 4;
129 if (!PyErr_Occurred()) {
130 PyErr_SetString(PyExc_RuntimeError,
131 "Unexpected error in an Op's C code. "
132 "No Python exception was set.");
133 }
134 goto __label_4;};
135 }
136 //std::cerr << "c_extract done " << V3 << '\n';
137
138
139 {
140 // Op class GpuDimShuffle
141
142 if (V3->nd != 1)
143 {
144 PyErr_Format(PyExc_TypeError,
145 "required nd=1, got nd=%i", V3->nd);
146 {
147 __failure = 5;
148 if (!PyErr_Occurred()) {
149 PyErr_SetString(PyExc_RuntimeError,
150 "Unexpected error in an Op's C code. "
151 "No Python exception was set.");
152 }
153 goto __label_5;};
154 }
155
156
157 if (V1 && (V1->nd == 2))
158 {
159 //re-use previously-allocated cnda
160 }
161 else
162 {
163 if (V1)
164 {
165 if (CudaNdarray_set_nd(V1, 2))
166 {
167 Py_DECREF(V1);
168 V1 = NULL;
169 {
170 __failure = 5;
171 if (!PyErr_Occurred()) {
172 PyErr_SetString(PyExc_RuntimeError,
173 "Unexpected error in an Op's C code. "
174 "No Python exception was set.");
175 }
176 goto __label_5;};
177 }
178 }
179 else
180 {
181 V1 = (CudaNdarray*) CudaNdarray_New(2);
182 if (NULL == V1)
183 {
184 {
185 __failure = 5;
186 if (!PyErr_Occurred()) {
187 PyErr_SetString(PyExc_RuntimeError,
188 "Unexpected error in an Op's C code. "
189 "No Python exception was set.");
190 }
191 goto __label_5;};
192 }
193 }
194 }
195
196
197 if (CudaNdarray_set_device_data(V1,
198 CudaNdarray_DEV_DATA(V3),
199 V3))
200 {
201 // err message set
202 Py_DECREF(V1);
203 V1 = NULL;
204 {
205 __failure = 5;
206 if (!PyErr_Occurred()) {
207 PyErr_SetString(PyExc_RuntimeError,
208 "Unexpected error in an Op's C code. "
209 "No Python exception was set.");
210 }
211 goto __label_5;};
212 }
213
214
215 CudaNdarray_set_dim(V1, 0, 1);
216 CudaNdarray_set_stride(V1, 0, 0);
217
218
219 CudaNdarray_set_dim(V1, 1,
220 CudaNdarray_HOST_DIMS(V3)[0]);
221 CudaNdarray_set_stride(V1, 1,
222 CudaNdarray_HOST_STRIDES(V3)[0]);
223
224
225 //std::cerr << "GpuDimShuffle " << V1 << " str[0] = " << V1->str[0] << "\n";
226
227
228 //std::cerr << "GpuDimShuffle " << V1 << " str[1] = " << V1->str[1] << "\n";
229
230 __label_5:
231
232 double __DUMMY_5;
233
234 }
235 __label_4:
236
237 //std::cerr << "cleanup " << py_V3 << " " << V3 << "\n";
238 //fprintf(stderr, "c_cleanup CNDA py_object w refcnt %p %i\n", py_V3, (py_V3->ob_refcnt));
239 if (V3)
240 {
241 //fprintf(stderr, "c_cleanup CNDA cn_object w refcnt %p %i\n", V3, (V3->ob_refcnt));
242 Py_XDECREF(V3);
243 }
244 //std::cerr << "cleanup done" << py_V3 << "\n";
245
246 {Py_XDECREF(py_V3);}
247
248 double __DUMMY_4;
249
250 }
251 __label_2:
252
253 if (!__failure) {
254
255 //std::cerr << "sync\n";
256 if (NULL == V1) {
257 // failure: sync None to storage
258 Py_XDECREF(py_V1);
259 py_V1 = Py_None;
260 Py_INCREF(py_V1);
261 }
262 else
263 {
264 if (py_V1 != (PyObject*)V1)
265 {
266 Py_XDECREF(py_V1);
267 py_V1 = (PyObject*)V1;
268 Py_INCREF(py_V1);
269 }
270 assert(py_V1->ob_refcnt);
271 }
272
273 PyObject* old = PyList_GET_ITEM(storage_V1, 0);
274 {Py_XINCREF(py_V1);}
275 PyList_SET_ITEM(storage_V1, 0, py_V1);
276 {Py_XDECREF(old);}
277 }
278
279 //std::cerr << "cleanup " << py_V1 << " " << V1 << "\n";
280 //fprintf(stderr, "c_cleanup CNDA py_object w refcnt %p %i\n", py_V1, (py_V1->ob_refcnt));
281 if (V1)
282 {
283 //fprintf(stderr, "c_cleanup CNDA cn_object w refcnt %p %i\n", V1, (V1->ob_refcnt));
284 Py_XDECREF(V1);
285 }
286 //std::cerr << "cleanup done" << py_V1 << "\n";
287
288 {Py_XDECREF(py_V1);}
289
290 double __DUMMY_2;
291
292 }
293
294
295 if (__failure) {
296 // When there is a failure, this code puts the exception
297 // in __ERROR.
298 PyObject* err_type = NULL;
299 PyObject* err_msg = NULL;
300 PyObject* err_traceback = NULL;
301 PyErr_Fetch(&err_type, &err_msg, &err_traceback);
302 if (!err_type) {err_type = Py_None;Py_INCREF(Py_None);}
303 if (!err_msg) {err_msg = Py_None; Py_INCREF(Py_None);}
304 if (!err_traceback) {err_traceback = Py_None; Py_INCREF(Py_None);}
305 PyObject* old_err_type = PyList_GET_ITEM(__ERROR, 0);
306 PyObject* old_err_msg = PyList_GET_ITEM(__ERROR, 1);
307 PyObject* old_err_traceback = PyList_GET_ITEM(__ERROR, 2);
308 PyList_SET_ITEM(__ERROR, 0, err_type);
309 PyList_SET_ITEM(__ERROR, 1, err_msg);
310 PyList_SET_ITEM(__ERROR, 2, err_traceback);
311 {Py_XDECREF(old_err_type);}
312 {Py_XDECREF(old_err_msg);}
313 {Py_XDECREF(old_err_traceback);}
314 }
315 // The failure code is returned to index what code block failed.
316 return __failure;
317
318 }
319 };
320 }
321
322
323 static int __struct_compiled_op_fc0a77fd0d7a0a0c610947f403047873_executor(__struct_compiled_op_fc0a77fd0d7a0a0c610947f403047873* self) {
324 return self->run();
325 }
326
327 static void __struct_compiled_op_fc0a77fd0d7a0a0c610947f403047873_destructor(void* executor, void* self) {
328 delete ((__struct_compiled_op_fc0a77fd0d7a0a0c610947f403047873*)self);
329 }
330
331 //////////////////////
332 //// Functions
333 //////////////////////
334 static PyObject * instantiate(PyObject * self, PyObject argtuple) {
335 assert(PyTuple_Check(argtuple));
336 if (3 != PyTuple_Size(argtuple)){
337 PyErr_Format(PyExc_TypeError, "Wrong number of arguments, expected 3, got %i", (int)PyTuple_Size(argtuple));
338 return NULL;
339 }
340 __struct_compiled_op_fc0a77fd0d7a0a0c610947f403047873 struct_ptr = new __struct_compiled_op_fc0a77fd0d7a0a0c610947f403047873();
341 if (struct_ptr->init( PyTuple_GET_ITEM(argtuple, 0),PyTuple_GET_ITEM(argtuple, 1),PyTuple_GET_ITEM(argtuple, 2) ) != 0) {
342 delete struct_ptr;
343 return NULL;
344 }
345 PyObject* thunk = PyCObject_FromVoidPtrAndDesc((void*)(&__struct_compiled_op_fc0a77fd0d7a0a0c610947f403047873_executor), struct_ptr, __struct_compiled_op_fc0a77fd0d7a0a0c610947f403047873_destructor);
346 return thunk; }
347
348 //////////////////////
349 //// Module init
350 //////////////////////
351 static PyMethodDef MyMethods[] = {
352 {"instantiate", instantiate, METH_VARARGS, "undocumented"} ,
353 {NULL, NULL, 0, NULL}
354 };
355 PyMODINIT_FUNC initfc0a77fd0d7a0a0c610947f403047873(void){
356 (void) Py_InitModule("fc0a77fd0d7a0a0c610947f403047873", MyMethods);
357 }
358
Traceback (most recent call last):
File "", line 19, in
model.fit(data, labels, nb_epoch=10, batch_size=32)
File "C:\ProgramData\Anaconda2\lib\site-packages\keras\models.py", line 672, in fit
initial_epoch=initial_epoch)
File "C:\ProgramData\Anaconda2\lib\site-packages\keras\engine\training.py", line 1168, in fit
self._make_train_function()
File "C:\ProgramData\Anaconda2\lib\site-packages\keras\engine\training.py", line 767, in _make_train_function
**self._function_kwargs)
File "C:\ProgramData\Anaconda2\lib\site-packages\keras\backend\theano_backend.py", line 969, in function
return Function(inputs, outputs, updates=updates, **kwargs)
File "C:\ProgramData\Anaconda2\lib\site-packages\keras\backend\theano_backend.py", line 955, in init
**kwargs)
File "C:\ProgramData\Anaconda2\lib\site-packages\theano\compile\function.py", line 320, in function
output_keys=output_keys)
File "C:\ProgramData\Anaconda2\lib\site-packages\theano\compile\pfunc.py", line 479, in pfunc
output_keys=output_keys)
File "C:\ProgramData\Anaconda2\lib\site-packages\theano\compile\function_module.py", line 1777, in orig_function
defaults)
File "C:\ProgramData\Anaconda2\lib\site-packages\theano\compile\function_module.py", line 1641, in create
input_storage=input_storage_lists, storage_map=storage_map)
File "C:\ProgramData\Anaconda2\lib\site-packages\theano\gof\link.py", line 690, in make_thunk
storage_map=storage_map)[:3]
File "C:\ProgramData\Anaconda2\lib\site-packages\theano\gof\vm.py", line 1003, in make_all
no_recycling))
File "C:\ProgramData\Anaconda2\lib\site-packages\theano\sandbox\cuda_init_.py", line 256, in make_thunk
compute_map, no_recycling)
File "C:\ProgramData\Anaconda2\lib\site-packages\theano\gof\op.py", line 970, in make_thunk
no_recycling)
File "C:\ProgramData\Anaconda2\lib\site-packages\theano\gof\op.py", line 879, in make_c_thunk
output_storage=node_output_storage)
File "C:\ProgramData\Anaconda2\lib\site-packages\theano\gof\cc.py", line 1200, in make_thunk
keep_lock=keep_lock)
File "C:\ProgramData\Anaconda2\lib\site-packages\theano\gof\cc.py", line 1143, in compile
keep_lock=keep_lock)
File "C:\ProgramData\Anaconda2\lib\site-packages\theano\gof\cc.py", line 1595, in cthunk_factory
key=key, lnk=self, keep_lock=keep_lock)
File "C:\ProgramData\Anaconda2\lib\site-packages\theano\gof\cmodule.py", line 1142, in module_from_key
module = lnk.compile_cmodule(location)
File "C:\ProgramData\Anaconda2\lib\site-packages\theano\gof\cc.py", line 1506, in compile_cmodule
preargs=preargs)
File "C:\ProgramData\Anaconda2\lib\site-packages\theano\sandbox\cuda\nvcc_compiler.py", line 399, in compile_str
'for cmd', ' '.join(cmd))
Exception: ('The following error happened while compiling the node', GpuDimShuffle{x,0}(dense_1_b), '\n', 'nvcc return status', 2, 'for cmd', 'nvcc -shared -O3 -arch=sm_52 --compiler-bindir C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin -Xlinker /DEBUG -D HAVE_ROUND -m64 -Xcompiler -DCUDA_NDARRAY_CUH=c72d035fdf91890f3b36710688069b2e,-DNPY_NO_DEPRECATED_API=NPY_1_7_API_VERSION,/Zi,/MD -IC:\Users\...\AppData\Local\Theano\compiledir_Windows-10-10.0.14393-Intel64_Family_6_Model_63_Stepping_2_GenuineIntel-2.7.13-64\cuda_ndarray -IC:\ProgramData\Anaconda2\lib\site-packages\numpy\core\include -IC:\ProgramData\Anaconda2\include -IC:\ProgramData\Anaconda2\lib\site-packages\theano\gof -IC:\ProgramData\Anaconda2\lib\site-packages\theano\sandbox\cuda -o C:\Users\...\AppData\Local\Theano\compiledir_Windows-10-10.0.14393-Intel64_Family_6_Model_63_Stepping_2_GenuineIntel-2.7.13-64\tmp9gptot\fc0a77fd0d7a0a0c610947f403047873.pyd mod.cu -LC:\Users\...\AppData\Local\Theano\compiledir_Windows-10-10.0.14393-Intel64_Family_6_Model_63_Stepping_2_GenuineIntel-2.7.13-64\cuda_ndarray -LC:\ProgramData\Anaconda2\libs -LC:\ProgramData\Anaconda2 -lcudart -lcublas -lcuda_ndarray -lpython27', '[GpuDimShuffle{x,0}(dense_1_b)]')