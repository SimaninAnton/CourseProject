AntonOsika commented on 19 Apr 2017 •
edited
I am having the following issue with the keras ´dot´layer:
When using ´model.predict()´ the dimension that the dot layer acts along does not have size == 1, but the same size as the temporal dimension.
I guess that this should be fixed by using the TimeDistributed wrapper (?) - however: model.fit() can be called with target data that has size == 1 for the same dimension.
What logic does keras use to allow the two shapes be different?
n_units = 128

input1 = keras.models.Input((None, n_units), name="i1")
input2 = keras.models.Input((None, n_units), name="i2")

y = keras.layers.dot( [input1, input2], 2)

m = keras.models.Model(inputs=[input1, input2], outputs=y)

m.compile('sgd', 'mse')

batch_size = 32
timesteps = 8

X1 = np.ones((batch_size, timesteps, n_units))
X2 = np.ones((batch_size, timesteps, n_units))*2

y_hat = m.predict([X1, X2])

Y = np.ones((batch_size, timesteps, 1))

m.fit([X1, X2], Y)

print y_hat.shape # -> (32, 8, 8)
print Y.shape     # -> (32, 8, 1)
Check that you are up-to-date with the master branch of Keras. You can update with:
pip install git+git://github.com/fchollet/keras.git --upgrade --no-deps
If running on TensorFlow, check that you are up-to-date with the latest version. The installation instructions can be found here.