jayavardhanr commented on 15 Jun 2018
Please make sure that the boxes below are checked before you submit your issue. If your issue is an implementation question, please ask your question on StackOverflow or join the Keras Slack channel and ask there instead of filing a GitHub issue.
Thank you!
[ x] Check that you are up-to-date with the master branch of Keras. You can update with:
pip install git+git://github.com/keras-team/keras.git --upgrade --no-deps
[x ] If running on TensorFlow, check that you are up-to-date with the latest version. The installation instructions can be found here.
[x ] If running on Theano, check that you are up-to-date with the master branch of Theano. You can update with:
pip install git+git://github.com/Theano/Theano.git --upgrade --no-deps
[ x] Provide a link to a GitHub Gist of a Python script that can reproduce your issue (or just copy the script here if it is short).
import tensorflow as tf
import keras
print(tf.__version__) #1.3.0
print(keras.__version__) #2.2.0
from keras.layers import Input, LSTM, RepeatVector

dropout=0.6
inputs = Input(shape=(60, 7,))
encoded = LSTM(200,name='encoder', recurrent_dropout=dropout, dropout=dropout)(inputs)
decoded = RepeatVector(60)(encoded)
decoded = LSTM(7, return_sequences=True, name='decoder', recurrent_dropout=dropout, dropout=dropout)(decoded)
autoencoder = Model(inputs, decoded)
autoencoder.compile(optimizer='adam', loss='mse')
Error:
TypeErrorTraceback (most recent call last)
<ipython-input-10-42ad0225d0f5> in <module>()
      7 dropout=0.6
      8 inputs = Input(shape=(60, 7,))
----> 9 encoded = LSTM(200,name='encoder',recurrent_dropout=dropout,dropout=dropout)(inputs)
     10 decoded = RepeatVector(60)(encoded)
     11 decoded = LSTM(7, return_sequences=True,name='decoder',recurrent_dropout=dropout,dropout=dropout)(decoded)

/opt/miniconda/envs/py2/lib/python2.7/site-packages/keras/layers/recurrent.pyc in __call__(self, inputs, initial_state, constants, **kwargs)
    498 
    499         if initial_state is None and constants is None:
--> 500             return super(RNN, self).__call__(inputs, **kwargs)
    501 
    502         # If any of `initial_state` or `constants` are specified and are Keras

/opt/miniconda/envs/py2/lib/python2.7/site-packages/keras/engine/base_layer.pyc in __call__(self, inputs, **kwargs)
    458             # Actually call the layer,
    459             # collecting output(s), mask(s), and shape(s).
--> 460             output = self.call(inputs, **kwargs)
    461             output_mask = self.compute_mask(inputs, previous_mask)
    462 

/opt/miniconda/envs/py2/lib/python2.7/site-packages/keras/layers/recurrent.pyc in call(self, inputs, mask, training, initial_state)
   2110                                       mask=mask,
   2111                                       training=training,
-> 2112                                       initial_state=initial_state)
   2113 
   2114     @property

/opt/miniconda/envs/py2/lib/python2.7/site-packages/keras/layers/recurrent.pyc in call(self, inputs, mask, training, initial_state, constants)
    607                                              mask=mask,
    608                                              unroll=self.unroll,
--> 609                                              input_length=timesteps)
    610         if self.stateful:
    611             updates = []

/opt/miniconda/envs/py2/lib/python2.7/site-packages/keras/backend/tensorflow_backend.pyc in rnn(step_function, inputs, initial_states, go_backwards, mask, constants, unroll, input_length)
   2955             parallel_iterations=32,
   2956             swap_memory=True,
-> 2957             maximum_iterations=input_length)
   2958         last_time = final_outputs[0]
   2959         output_ta = final_outputs[1]

TypeError: while_loop() got an unexpected keyword argument 'maximum_iterations'
The same code works fine with Tensor flow 1.3.0 and Keras 2.1.2.
2