herleeyandi commented on 6 Dec 2018 â€¢
edited
Hello I am beginner in keras, currently I am using Keras 2.2.4 and tensorflow 1.9. MY problem is binary classification. I have a problem with memory so I load my data from directory using directory flow.
train_data_dir = 'data/train'
validation_data_dir = 'data/test'
test_data_dir = 'data/validation'
nb_train_samples = 857
nb_validation_samples = 216
nb_test_samples = 270
epochs = 50
batch_size = 32

if K.image_data_format() == 'channels_first':
    input_shape = (3, img_width, img_height)
else:
    input_shape = (img_width, img_height, 3)

# this is the augmentation configuration we will use for training
train_datagen = ImageDataGenerator(
    rescale=1. / 255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True)

# this is the augmentation configuration we will use for testing:
# only rescaling
test_datagen = ImageDataGenerator(rescale=1. / 255)

train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='binary')

validation_generator = test_datagen.flow_from_directory(
    validation_data_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='binary')
Here is my model declaration, since I am using XCeption and want to do finetuning.
num_class = 2
# create the base pre-trained model
base_model = Xception(include_top=False, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000)

# add a global spatial average pooling layer
x = base_model.output
x = GlobalAveragePooling2D()(x)
# let's add a fully-connected layer
x = Dense(1024, activation='relu')(x)
# and a logistic layer -- let's say we have 2 classes
predictions = Dense(num_class, activation='softmax')(x)

# this is the model we will train
model = Model(inputs=base_model.input, outputs=predictions)
After I run, Keras successfully found the images. Which means no problem with the data loading
Found 857 images belonging to 2 classes.
Found 270 images belonging to 2 classes.
Found 216 images belonging to 2 classes.
model.compile(loss='binary_crossentropy',
              optimizer=Adam(lr=lr_schedule(0)),
              metrics=['accuracy'])
Here is the model summary.
However when I am doing fitting process it said the output of the model and the train generator is not same.
model.fit_generator(
    generator=train_generator,
    steps_per_epoch=nb_train_samples // batch_size,
    epochs=50,
    validation_data=validation_generator,
    validation_steps=nb_validation_samples // batch_size,
    verbose=1, workers=4,
    callbacks=callbacks)
How to fixed this?, is there any way to debug it by printing the data input and target shape?, so we can check which side is wrong.