ThomasAger commented on 26 Feb 2018 â€¢
edited
I am looking to train an LSTM such that it learns from its cell state as well as learning from a output layer. To be more specific, I want to use the final cell state of the LSTM layer as one output, and a traditional output layer as another output, and to train them simultaneously.
In this post: http://colah.github.io/posts/2015-08-Understanding-LSTMs/ the cell state is labelled c_t, and the output state is labelled h_t. The cell state that I want to use as one output is c_t, and the output state is the one that's used as input to the traditional output layer.
To clarify, this means that I'll have two outputs (y_1, y_2) to optimize towards, y_1 which is an array the size of the LSTM units, which is used to train the cell state, the other y_2 is a single binary output layer. Which trains the whole network as normal.
Here's an example of what I mean:
model = Sequential()

model.add(Embedding(input)) # The input layer

model.add(LSTM(units)) # The LSTM layer that has the cell state I want to use as an output 

model.add(Dense(1)) # The binary output layer
How can I achieve this in Keras?