Bjoux2 commented on 3 Jul 2017
@fchollet 's blog : Building Autoencoders in Keras.
In the Let's build the simplest possible autoencoder section, the author provided a demo:
from keras.layers import Input, Dense
from keras.models import Model

encoding_dim = 32 
input_img = Input(shape=(784,))
encoded = Dense(encoding_dim, activation='relu')(input_img)
decoded = Dense(784, activation='sigmoid')(encoded)
autoencoder = Model(input_img, decoded)
encoder = Model(input_img, encoded)

encoded_input = Input(shape=(encoding_dim,))
decoder_layer = autoencoder.layers[-1]
decoder = Model(encoded_input, decoder_layer(encoded_input))

autoencoder.compile(optimizer='adadelta', loss='binary_crossentropy')

from keras.datasets import mnist
import numpy as np
(x_train, _), (x_test, _) = mnist.load_data()

autoencoder.fit(x_train, x_train,
                epochs=50,
                batch_size=256,
                shuffle=True,
                validation_data=(x_test, x_test))

encoded_imgs = encoder.predict(x_test)
decoded_imgs = decoder.predict(encoded_imgs)
questions:
1, Why do we not use decode_imgs = autoencoder.predict(x_test) to obtain the reconstructed x_test?
2, The encoder and decoder model are not trained, why can we use them to map the data directly?
Thanks!