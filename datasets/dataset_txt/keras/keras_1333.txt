sumeet30 commented on 11 Jan 2018
Hi,
I am trying to build ANN model for this data. It is ANN for non linear regression problem. But somehow i am not getting good results. I tried many thing but nothing is helping me out. Minimum validation loss i obtained so far is 0.069. Its not decreasing further and results are also not good when plotting prediction vs y_test data.
Below are details about the same.
Code:
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler,StandardScaler
dataset = pd.read_csv(input_data.csv')
X = dataset.iloc[:, 0:7].values
y = dataset.iloc[:, 7].values
X_sc = MinMaxScaler().fit_transform(X)
maxnumber = max(y)
y=y/maxnumber
X_train, X_test, y_train, y_test = train_test_split(X_sc, y, test_size = 0.2, random_state = 0)
Model
=============
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import Activation
from keras import optimizers
from keras import regularizers
regressor = Sequential()
from keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint, TensorBoard
optimizer = optimizers.Adam(lr=0.0001)
regressor.add(Dense(units=64, input_dim=7,kernel_initializer='uniform', activation='relu'))
regressor.add(Dense(units=1,kernel_initializer='normal', activation='linear'))
regressor.compile(optimizer = optimizer, loss = 'mean_squared_error', metrics = ['mse'])
es = EarlyStopping(monitor='val_loss', min_delta=1e-10, patience=2, verbose=1)
rlr = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=2, verbose=1)
mcp = ModelCheckpoint(filepath='weights.h5', monitor='val_loss', verbose=1, save_best_only=True, save_weights_only=True)
regressor.fit(X_train, y_train, shuffle=True, epochs=1000, callbacks=[es,rlr, mcp],
        validation_split=0.2, verbose=1, batch_size=20)
y_pred = regressor.predict(X_test)
import matplotlib.pyplot as plt
plt.plot(y_test,"b")
plt.plot(y_pred,"r")
plt.show()
I also tried increasing many layers and neurons but nothing is helping me out.
Below result is with two hidden layers with 2000 neurons.