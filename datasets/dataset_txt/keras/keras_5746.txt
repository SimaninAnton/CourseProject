Contributor
lukovkin commented on 16 Mar 2016
Trying to implement 1D fully convolutional network in Keras (within the UFCNN implementation, inspired by arXiv:1508.00317v1 [stat.ML] ).
One of ideas was to use approach described here - http://cs231n.github.io/convolutional-networks/#convert (and probably used by Roni too) in order to improve computational efficiency (to avoid iterating through the input sequence with a step=1).
We found earlier discussion on FCN in Keras, but it seems to be designed for much earlier version - #356.
Model generation code is here: https://gist.github.com/lukovkin/8d8d9994ecc20914b884
It compiles OK, but when I try to pass to the 'fit' function input/output data shaped like:
X.shape (1, 53353, 4) y.shape (1, 53353, 3)
I get the following error:
on Theano 0.8.0.dev0 and Python 2.7
ValueError: Cannot feed value of shape (1, 53353, 4) for Tensor u'input_1:0', which has shape (Dimension(None), Dimension(500), Dimension(4))
on Theano 0.8.0.rc1 and Python 3.5
ValueError: Input dimension mis-match. (input[0].shape[1] = 500, input[1].shape[1] = 53353)
Apply node that caused the error: Elemwise{mul,no_inplace}(InplaceDimShuffle{x,0,1}.0, InplaceDimShuffle{0,2,1}.0)
Toposort index: 154
Inputs types: [TensorType(float32, (True, False, False)), TensorType(float32, 3D)]
Inputs shapes: [(1, 500, 150), (1, 53353, 150)]
Inputs strides: [(300000, 600, 4), (213412, 4, 213412)]
Inputs values: ['not shown', 'not shown']
Outputs clients: [[Elemwise{scalar_sigmoid}(Elemwise{mul,no_inplace}.0), Elemwise{ScalarSoftplus}(0, 0)]]
Are there any ideas how to make Keras apply convolution to the sequence larger than input of convolution layer? - Or, rephrasing, how to use input of arbitrary length?