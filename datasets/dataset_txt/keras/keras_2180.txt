lhk commented on 9 Jun 2017
I would like to hunt for nans in my custom loss function.
In tensorflow there is an operation to raise an error on the first encounter of nan:
https://www.tensorflow.org/api_docs/python/tf/add_check_numerics_ops
https://stackoverflow.com/questions/34046048/debugging-nans-in-the-backward-pass
According to SO, it is to be used like this:
train_op = ...
check_op = tf.add_check_numerics_ops()

sess = tf.Session()
sess.run([train_op, check_op])  # Runs training and checks for NaNs
How do I integrate this into a Keras loss function?
I checked the sourcecode. The update step is executed here: https://github.com/fchollet/keras/blob/master/keras/engine/training.py
There is a function called _make_train_function where an operation to compute the loss and apply updates is created. This is later called to train the network.
I could change the code like this (always assuming that we're running on a tf backend):
check_op = tf.add_check_numerics_ops()

self.train_function = K.function(inputs, 
    [self.total_loss] + self.metrics_tensors + [check_op],
    updates=updates, name='train_function', **self._function_kwargs)
I'm currently trying to set this up properly and not sure whether the code above actually works. Maybe there is an easier way ?