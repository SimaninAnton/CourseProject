yxchng commented on 2 Oct 2016 â€¢
edited
The following is my code. Apparently, I call gc.collect() after each epoch, however, my GPU runs out of memory at the 3rd epoch. I presume that the memory used for the first epoch should be released by the time it reaches the 3rd epoch, especially when this is a big architecture that runs for 1800s per epoch, but that is not the case. Can I know what am I doing wrong? I am using a pascal Titan X with 12gb memory. I tried with both tensorflow and theano.
    train_generator = train_generator()
    test_generator = test_generator()
    print "...training model"
    history = []
    for i in xrange(NB_EPOCHS):
        start_time = time.time()
        avg_train_loss = [0.0] * 5
        avg_test_loss = [0.0] * 5
        for j in xrange(NB_TRAIN_ITERATIONS):
            (batch_data, batch_heatmaps) = train_generator.next()
            loss = model.train_on_batch(batch_data, batch_heatmaps)
            avg_train_loss += np.array(loss)
        avg_train_loss = avg_train_loss / NB_TRAIN_ITERATIONS
        for j in xrange(NB_TEST_ITERATIONS):
            (batch_data, batch_heatmaps) = test_generator.next()
            loss = model.test_on_batch(batch_data, batch_heatmaps)
            avg_test_loss += np.array(loss)
        avg_test_loss = avg_test_loss / NB_TEST_ITERATIONS        
        end_time = time.time()
        print "[Epoch %d]" % (i+1)
        print "Time spent: %.2f seconds" % (end_time - start_time) 
        print "Total train loss : %.16f | Total validation loss : %.16f" % (avg_train_loss[0], avg_test_loss[0])
        print "  hg1 train loss : %.16f |   hg1 validation loss : %.16f" % (avg_train_loss[1], avg_test_loss[1])
        print "  hg2 train loss : %.16f |   hg2 validation loss : %.16f" % (avg_train_loss[2], avg_test_loss[2])
        print "  hg3 train loss : %.16f |   hg3 validation loss : %.16f" % (avg_train_loss[3], avg_test_loss[3])
        print "  hg4 train loss : %.16f |   hg4 validation loss : %.16f" % (avg_train_loss[4], avg_test_loss[4])
        history.append([avg_train_loss, avg_test_loss])
        gc.collect()
    np.save(PATH_HISTORY, history)
    model.save(PATH_MODEL)