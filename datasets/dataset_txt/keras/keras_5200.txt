asmith26 commented on 11 May 2016 â€¢
edited
For my training data (where I have both X and labels y), I'm creating an ImageDataGenerator with featurewise_center=True and featurewise_std_normalization=True:
train_datagen = ImageDataGenerator( featurewise_center=True,
                                    featurewise_std_normalization=True )
train_datagen.fit( X_train )
model.fit_generator( train_datagen.flow(X_train, y_train)
                     samples_per_epoch=X_train.shape[0],
                     nb_epoch=NB_EPOCHS)
I am hoping to apply this same image preprocessing to my unlabelled test data (this test set came from a Kaggle competition). Following advice from Stanford cs231n/Karpathy (you can find full details by searching for the term "Common pitfall" on the linked page):
An important point to make about the preprocessing is that any preprocessing statistics (e.g. the data mean) must only be computed on the training data, and then applied to the validation / test data.
Thus I hoped to use something like:
model.predict_generator(train_datagen.flow(X_test),
                        val_samples=X_test.shape[0])
however ImageDataGenerator.flow() requires a y argument. Does anyone know how I might achieve this (I'm using a model built using the functional API)? (Mentioning @chsasank as I see you've made some great changes to this recently ;) ) Many thanks for any help!