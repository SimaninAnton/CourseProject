jsalbert commented on 21 Nov 2016
Hi, I am loading a VGG-16 CAM model from json (I attach the json vgg_cam_mod_model.json.zip) with its corresponding weights and I want to edit intermediate layers of the model in order to deal with different image sizes.
I have seen that there is the .pop() function to remove the last layer, but in my case I want to edit the pool size and strides of the 'CAM_pool' layer which is an AveragePooling2D layer, or if it is also necessary the inputlayer, is it possible to do it?
Case of a fixed image
x = np.zeros((1, 3, 720, 1024))
model = model_from_json(open('models/vgg_cam_mod_model.json').read())
Then I have tried:
pool_layer = model.layers[-5] pool_layer.pool_size = [45, 64] pool_layer.strides = [45, 64]
model.summary()
Not doing anything.
model.layers[-5] = AveragePooling2D(name="CAM_pool", trainable=True, dim_ordering="th", pool_size=[45, 64], strides=[45, 64], border_mode="valid")(model.layers[-6])
Error: 'Activation' object has no attribute 'ndim'
I also tried to define the layer as a GlobalAveragePooling2D in the json:
{"class_name": "GlobalAveragePooling2D", "config": {"name": "CAM_pool", "trainable": true, "dim_ordering": "th"}
Error Input 0 is incompatible with layer CAM_fc_flatten: expected ndim >= 3, found ndim=2
Do I have to change also the shape of Input Data Layer?
model.layers[0] = Input(shape=(None, 3, 720, 1024))
Error: 'TensorVariable' object has no attribute 'inbound_nodes'
Thanks for the help!
1