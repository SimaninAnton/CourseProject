gdj0nes commented on 10 Mar 2017 â€¢
edited
The TimeDistributed wrapper does not appear to be able to be applied to a model because of a conflict with Tensorflow. I am trying to construct something similar to the video question answering model given in the function API guide. I think it may be related to using the latest release of Tensorflow.
I get the following error:
InvalidArgumentError (see above for traceback): You must feed a value for placeholder tensor 'convolution2d_input_1' with dtype float
[[Node: convolution2d_input_1 = Placeholderdtype=DT_FLOAT, shape=[], _device="/job:localhost/replica:0/task:0/gpu:0"]]
[[Node: moments_5/sufficient_statistics/Gather/_99 = _Recvclient_terminated=false, recv_device="/job:localhost/replica:0/task:0/cpu:0", send_device="/job:localhost/replica:0/task:0/gpu:0", send_device_incarnation=1, tensor_name="edge_3882_moments_5/sufficient_statistics/Gather", tensor_type=DT_FLOAT, _device="/job:localhost/replica:0/task:0/cpu:0"]]
when running the code bellow. The fullInputShape is (5000, 4, 256, 128, 1)
def funcMakesCNN(inputDim):

    model = Sequential()
    model.add(Convolution2D(4, 3, 3, activation='relu', init='he_uniform',
                            border_mode='same', W_regularizer=weightReg, input_shape=inputDim))
    model.add(BatchNormalization())
    model.add(AveragePooling2D(strides=(2, 2)))

    model.add(Convolution2D(6, 3, 3, activation='relu', init='he_uniform',
                            border_mode='same', W_regularizer=weightReg))
    model.add(BatchNormalization())
    model.add(AveragePooling2D(strides=(2, 2)))

    model.add(Flatten())
    return model

fullInput = Input(fullInputShape)
frameModel = funcMakesCNNt(frameInputShape)
lagModel = TimeDistributed(frameModel)(fullInput)
gruOut = GRU(256)(lagModel)
finalOut = Dense(lagOutputShape, activation='relu', name='regOut')(gruOut)
fullModel = Model(input=fullInput, output=finalOut)
fullModel.compile(loss='mse', optimizer=Adam(lr=0.005, decay=0.008))
Thanks!