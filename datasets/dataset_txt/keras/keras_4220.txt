longma307 commented on 7 Oct 2016 â€¢
edited
Hi, I want to achieve training based on the cosine similarity of the two pair inputs, but the predicted results were same. There should be something wrong on my model, could you give me some hints? For example, is that okay if my input data has different shape?
def merge_layer(data_1, data_2, label, data_3, data_4):

#the merge layer
left_branch = Sequential()
left_branch.add(Embedding(1000, 64, input_shape=(79, 42)))
left_branch.add(LSTM(32, input_dim=42, input_length=79,consume_less='gpu'))

right_branch = Sequential()

right_branch.add(Embedding(1000, 64, input_shape=(79, 500)))
right_branch.add(LSTM(32, input_dim=500, input_length=79, consume_less='gpu'))

merged = Merge([left_branch, right_branch], mode='concat')

final_model = Sequential()
final_model.add(merged)
final_model.add(Dense(1, activation='softmax'))

final_model.compile(optimizer='rmsprop', loss='cosine_proximity')
final_model.fit([data_1, data_2], label, nb_epoch=2, batch_size=5)


# for a multi-class classification problem
#model.compile(optimizer='rmsprop', loss='categorical_crossentropy',metrics=['accuracy'])

#loss_and_metrics = model.evaluate(x_test, y_test, batch_size=32)
#generate predictions on new data
classes = final_model.predict_classes([data_3,data_4], batch_size=10)
#proba = model.predict_proba(x_test, batch_size=32)

#print loss_and_metrics
print classes