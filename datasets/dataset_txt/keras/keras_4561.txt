weiHelloWorld commented on 19 Aug 2016
I am trying to construct a neural network with Keras Lambda layer.
from keras.models import Sequential
from keras.optimizers import SGD
from keras.layers import Dense, Activation, Lambda, Reshape
model_3 = Sequential()
model_3.add(Reshape((2,2), input_shape=(4,)))
model_3.add(Lambda(lambda x: (x / ((x**2).sum(axis=0).sqrt()))))

model_3.predict(circular_data)
The input here is a 4-element vector, first I need to reshape it to (2,2) array, and then I would like to normalize each column to unit vector using the Lambda layer.
Here is part of the input data (circular_data) :
array([[ 0.45051384,  0.37288171,  0.09335332, -0.25131994],
       [ 0.5050748 ,  0.41509137,  0.17565759, -0.22406566],
       [ 0.5275144 ,  0.41552052,  0.17043467, -0.2432026 ],
       [ 0.36133763,  0.30445549,  0.01252399, -0.28350455],
       [ 0.16380723,  0.21955967, -0.23508804, -0.29204607],
       [ 0.06094129,  0.15145549, -0.38253993, -0.32036814],
       [ 0.03913406,  0.15407249, -0.30384946, -0.36794421],
       [-0.02219017,  0.11556858, -0.34925568, -0.42189014],
       [-0.01746154,  0.04472642, -0.49445981, -0.61977983],
       [ 0.01439017,  0.08068967, -0.43265176, -0.51221937]], dtype=float32)
And the output for this network is
array([[[ 0.27375194,  0.25651583],
        [ 0.06027256, -0.12025494]],

       [[ 0.30690557,  0.28555304],
        [ 0.11341141, -0.10721394]],

       [[ 0.32054088,  0.28584829],
        [ 0.11003929, -0.11637084]],

       [[ 0.21956457,  0.20944351],
        [ 0.00808598, -0.13565506]],

       [[ 0.09953645,  0.15104128],
        [-0.15178204, -0.13974212]],

       [[ 0.0370306 ,  0.1041905 ],
        [-0.24698275, -0.15329406]],

       [[ 0.02377957,  0.10599081],
        [-0.19617711, -0.17605889]],

       [[-0.01348372,  0.07950288],
        [-0.22549313, -0.20187166]],

       [[-0.0106104 ,  0.03076857],
        [-0.3192426 , -0.29656059]],

       [[ 0.0087441 ,  0.0555087 ],
        [-0.2793369 , -0.2450936 ]]], dtype=float32)
The column vectors are not normalized.
But if I test this lambda x function independently:
import numpy
import theano.tensor as T
from theano import function

x = T.dmatrix('x')

f = function([x], (x / ((x**2).sum(axis=0).sqrt())))

f(np.array([[1,2],[3,4]]))
The output is
array([[ 0.31622777,  0.4472136 ],
       [ 0.9486833 ,  0.89442719]])
This is exactly what I expected.
Does anyone know why the function does not work when I put it in the Lambda layer?
Thanks!