geovedi commented on 24 May 2016 â€¢
edited
So I have this model that try to predict multiple outputs,
    ...
    decoded_outputs = []
    for i, size in enumerate(target_sizes):
        dense = TimeDistributed(Dense(size, activation='softmax'), name='out_{0}'.format(i))
        decoded_outputs.append(dense(decoded))

    autoencoder = Model(input=[encoded_input], output=decoded_outputs, name='autoencoder')
    autoencoder.compile(loss='sparse_categorical_crossentropy', optimizer='adam')
but standardize_input_data() keeps complaining about the mismatch shape.
As workaround, I have to use smaller batch_size (as my original idea was to reduce memory usage for train data) and categorical_crossentropy. But surely it would be great if sparse_categorical_crossentropy can handle multiple outputs.