Contributor
lgautier commented on 15 Oct 2016
The concept of "layers" appear to be a relatively strong/important one in keras; enough to have a dedicated page in the documentation (https://keras.io/layers/about-keras-layers/) with a description of an interface ("protocol" in Python lingo).
However, I have found myself going through trials and not-so-clear-errors (when beginning) to figure out what is a layer in keras.layers and what is not when trying to build my initial models. Now that I am becoming more comfortable with keras, I am seeing an opportunity to make the learning curve smoother by 1) providing utilities or design to help characterize "layer" objects and 2) use these utilities to better handle/report situations where objects are expected to be layers (or not).
import keras.models
model = keras.models.Sequential()
The docstring for model.add(obj) indicates that obj must be a layer, yet improper
use generates the following error message:
>>> import keras.layers
>>> myinput = keras.layers.Input(shape=(10, 5))
>>> model.add(myinput)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-15-36bdaee4ee01> in <module>()
----> 1 model.add(myinput)

/usr/local/lib/python3.5/dist-packages/keras/models.py in add(self, layer)
    263         if not self.outputs:
    264             # first layer in model: check that it is an input layer
--> 265             if len(layer.inbound_nodes) == 0:
    266                 # create an input layer
    267                 if not hasattr(layer, 'batch_input_shape'):

AttributeError: 'Tensor' object has no attribute 'inbound_nodes'
>>> # Same error is doing something that makes less sense, like `model.add(1)`
>>> # Tough luck here, what is wanted is `keras.layers.InputLayer()`
>>> model.add(keras.layers.InputLayer(input_shape=(10, 5)))
I am proposing to:
1- Add inbound_nodes to the interface/protocol for layer (and in the doc). If unspecified, its value will be 0 (or should it be None ?)
2- Add either a interface or an Abstract class Layer (or a function islayer() in keras.layers)
2- Optionally check early in the method .add() that the object implements the layer protocol (and fail early with an informative message), or check whether inbound_nodes is present with hasattr() befor accessing it and if not the present report in an error message that the object is not implementing the layer protocol.