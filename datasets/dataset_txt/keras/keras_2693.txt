ghost commented on 10 Apr 2017 â€¢
edited by ghost
I have following layout of numpy array:
arr1=[
[1,2,3,4,5,6,7,8,9,10],[2,3,4,5,6,7,8,9,10,11],[3,4,5,6,7,8,9,10,11,12],[4,5,6,7,8,9,10,11,12,13], .... more
[1,2,3,4,5,6,7,8,9,10],[2,3,4,5,6,7,8,9,10,11],[3,4,5,6,7,8,9,10,11,12],[4,5,6,7,8,9,10,11,12,13], .... more
[1,2,3,4,5,6,7,8,9,10],[2,3,4,5,6,7,8,9,10,11],[3,4,5,6,7,8,9,10,11,12],[4,5,6,7,8,9,10,11,12,13], .... more
..... more
]
I spend the whole sunday to achieve this using reshape ittering arround and so on but without success.
For mesuring the consistency of dataset during process it is filled with the timestamp of each datapoint. my target array schould look like:
arr2=[
[1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10... more(vertical len of arr1) ],
[2,3,4,5,6,7,8,9,10,11,2,3,4,5,6,7,8,9,10,11,2,3,4,5,6,7,8,9,10,11,..... more(vertical len of arr1)],
[3,4,5,6,7,8,9,10,11,12,3,4,5,6,7,8,9,10,11,12,3,4,5,6,7,8,9,10,11,12],
more( horrizontal len of arr1 )
My attempts are allway result in randomply shuffled values.
The idea is to learn 1,2,3,4,5,6,7,8,9,10 to predict 11
or 2,3,4,5,6,7,8,9,10,11 to predict 12
but i need that to do for 329*10 inputs wich leads to 329 outputs.
Is this the right approach=? Do i have a bigger missunderstanding? is there a way to do it more elegant, using Keras=?