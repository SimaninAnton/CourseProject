hnykda commented on 29 Jun 2015
Hello,
I am trying to use LSTM for predicting vectors of fixed length 12 based on input vectors of the same length 12. Unfortunately I can't get it work. The problem is that I'm not quite sure what input should be pasted into LSTM, since it is unclear in examples and also in docs. I think I use an embedding layer wrong.
Here is the minimal example:
from keras.models import Sequential
from keras.layers.core import Dense, Dropout, Activation
from keras.layers.embeddings import Embedding
from keras.layers.recurrent import LSTM

model = Sequential()
model.add(Embedding(12, 256)) # this might be the cause
model.regularizers = []
model.add(LSTM(256, 128, activation='sigmoid', 
               inner_activation='hard_sigmoid'))
model.add(Dropout(0.5))
model.add(Dense(128, 12))
model.add(Activation('sigmoid'))
model.compile(loss='mean_squared_error', optimizer='rmsprop')

## data preparation
import numpy as np
data = np.random.randint(1,100,(5000,12))

def pred_targ_split(datas):
    X = []
    y = []
    for sample, next_sample in zip(datas, datas[1:]):
        X.append(sample)
        y.append(next_sample)
    return(X,y)

# use 4000 for training, 1000 for testing
sp = 4000
X_train, y_train = pred_targ_split(data[:sp])
X_test, y_test = pred_targ_split(data[sp:sp+200])

model.fit(X_train, y_train, batch_size=16, nb_epoch=10)
error:
IndexError: index 2615 is out of bounds for axis 1 with size 12
What should I use instead? Thank you.