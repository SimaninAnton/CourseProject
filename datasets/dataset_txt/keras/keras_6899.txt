Contributor
vzhong commented on 2 Jul 2015
Before #244, I could make a lookup table that is not time distributed in the following manner:
net = Sequential()
net.add(Embedding(5, 2))
net.add(Flatten())
net.add(Dense(2, 3))
net.compile(loss='categorical_crossentropy', optimizer='sgd')
However, with the changes made to Embedding in #244, the above code now raises an Exception:
---------------------------------------------------------------------------
Exception                                 Traceback (most recent call last)
<ipython-input-4-3e29ac8f8e5c> in <module>()
      1 net = Sequential()
      2 net.add(Embedding(5, 2))
----> 3 net.add(Flatten())
      4 net.add(Dense(2, 3))
      5 net.compile(loss='categorical_crossentropy', optimizer='sgd')

/Users/victor/Developer/keras/keras/layers/containers.pyc in add(self, layer)
     31         self.layers.append(layer)
     32         if len(self.layers) > 1:
---> 33             self.layers[-1].connect(self.layers[-2])
     34 
     35         params, regularizers, constraints = layer.get_params()

/Users/victor/Developer/keras/keras/layers/core.py in connect(self, layer)
     22     def connect(self, layer):
     23         if not self.supports_masked_input() and layer.get_output_mask() is not None:
---> 24             raise Exception("Attached non-masking layer to layer with masked output")
     25         self.previous = layer
     26 

Exception: Attached non-masking layer to layer with masked output
Admittedly, the above code for making a non-time-distributed look up table is somewhat hacky. What's the appropriate way for doing this? From what I understand, #244 was to add masking support for recurrent layers. However this seemed to break functionality for some of the utility layers (eg. Flatten(), Reshape()) that don't implement the MaskedLayer interface.