parkerzf commented on 23 Jan 2017 â€¢
edited
I got different results between model.evaluate() and model.predict(). Could someone point out what is wrong in my calculation as follows? Note that the model, X_test_features, y_regression_test are identical in two approaches.
Thank you very much!
directly use model evaluate() to get loss and metrics:
model = define_top_model()
model.compile(loss='mse', optimizer='rmsprop', metrics=['mae', 'mape'])
model.load_weights(model_weights_file)
scores = model.evaluate(X_test_features, y_regression_test, batch_size=batch_size)
logger.info('mse=%f, mae=%f, mape=%f' % (scores[0],scores[1],scores[2]))
The output is:
mse=0.551147, mae=0.589529, mape=10.979756
get the preds numpy array using model.predict(), and use keras metrics to calculate metrics:
model = define_top_model()
model.compile(loss='mse', optimizer='rmsprop', metrics=['mae', 'mape'])
model.load_weights(model_weights_file)
preds = model.predict(X_test_features, batch_size=batch_size)
tf_session = K.get_session()
mse = metrics.mean_squared_error(y_regression_test, preds)
mae = metrics.mean_absolute_error(y_regression_test, preds)
mape = metrics.mean_absolute_percentage_error(y_regression_test, preds)
logger.info('mse=%f, mae=%f, mape=%f' % (mse.eval(session=tf_session),
                                                             mae.eval(session=tf_session),
                                                             mape.eval(session=tf_session)))
The output is:
mse=0.678286, mae=0.654362, mape=12.249291
12