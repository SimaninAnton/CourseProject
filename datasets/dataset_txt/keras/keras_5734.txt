vbalnt commented on 18 Mar 2016
I am trying to replace the g.fit part in the mnist_siamese_graph.py example
g.fit({'input_a': tr_pairs[:, 0], 'input_b': tr_pairs[:, 1], 'output': tr_y},
validation_data={'input_a': te_pairs[:, 0], 'input_b': te_pairs[:, 1], 'output': te_y},
batch_size=128,
nb_epoch=nb_epoch)
with a custom train on batch code as shown in the following custom mini-batch code
batch_size=128
epochs = 10
nsamples = 60000
x = np.zeros((batch_size,784))
y = np.zeros((batch_size,784))
l = np.zeros((batch_size,1))

for epoch in range(epochs):
    shuf = np.random.permutation(nsamples)
    nbatches = int(nsamples/batch_size)
    for k in range(nbatches):
        sh = shuf[k*batch_size:k*batch_size+batch_size]
        print(sh)
        for s in range(batch_size):
            x[s] = tr_pairs[sh[s],0]
            y[s] = tr_pairs[sh[s],1]
            l[s] = tr_y[sh[s]]
        #train here
        tt = g.train_on_batch({'input_a': x, 'input_b': y, 'output': l})
        print(tt[0])
But i keep getting nan as the loss result.
Any ideas what's going on?
The full example is in the gist below
https://gist.github.com/vbalnt/433508ef9d932711cb2f