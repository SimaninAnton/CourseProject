sheilacheng commented on Jan 6, 2018 â€¢
edited
Summary.
SSL certificate/key not working but same certificate/key works with curl
Expected Result
certificate/key verifies properly
Actual Result
SSLError: HTTPSConnectionPool(host='app.domain.com', port=443): Max retries exceeded with url: /p1/p2/p3 (Caused by SSLError(SSLError("bad handshake: Error([('SSL routines', 'ssl3_get_server_certificate', 'certificate verify failed')],)",),))
Reproduction Steps
This works:
    curl -X POST -v -s -k --key client.key --cert client.crt <blah blah ....>


This does not and gives the above error.
    cert_file_path = '/path-to-certfile/cert.pem'
    key_file_path = '/path-to-keyfile/key.pem'
    cert = (cert_file_path, key_file_path)
    requests.post(url, data=payload, cert=cert)


The client.key and client.crt are actually both in pem format (ascii readable). The server uses Nginx. I found some references about missing intermediate certificates but I'm not sure how to fix it on the server or add it to my client (just to see it work!).

import requests
System Information
$ python -m requests.help
{
  "chardet": {
    "version": "3.0.4"
  },
  "cryptography": {
    "version": "2.0.3"
  },
  "idna": {
    "version": "2.6"
  },
  "implementation": {
    "name": "CPython",
    "version": "3.6.3"
  },
  "platform": {
    "release": "16.7.0",
    "system": "Darwin"
  },
  "pyOpenSSL": {
    "openssl_version": "100020cf",
    "version": "17.2.0"
  },
  "requests": {
    "version": "2.18.4"
  },
  "system_ssl": {
    "version": "100020cf"
  },
  "urllib3": {
    "version": "1.22"
  },
  "using_pyopenssl": true
}
This command is only available on Requests v2.16.4 and greater. Otherwise,
please provide some basic information about your system (Python version,
operating system, &c).