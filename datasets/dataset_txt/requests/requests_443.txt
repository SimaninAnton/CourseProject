hsiunien commented on Nov 27, 2017
As you know, I use the requests post some data to the server, my JSON data is
{'name':'张三'} 
Expected Result
origin json data,like {'name':'张三'}
But I catch the package, it translated into
Actual Result
{'name':'\u5f20\u4e09'}
But the server couldn't recognize it.
Reproduction Steps
import requests
request.post('http://example.com/xxx',json={'name':'张三'})
System Information
$ python -m requests.help
{
  "chardet": {
    "version": "3.0.4"
  },
  "cryptography": {
    "version": ""
  },
  "idna": {
    "version": "2.6"
  },
  "implementation": {
    "name": "CPython",
    "version": "3.6.2"
  },
  "platform": {
    "release": "16.7.0",
    "system": "Darwin"
  },
  "pyOpenSSL": {
    "openssl_version": "",
    "version": null
  },
  "requests": {
    "version": "2.18.4"
  },
  "system_ssl": {
    "version": "100020df"
  },
  "urllib3": {
    "version": "1.22"
  },
  "using_pyopenssl": false
}
I trace the source code, I found requests call the json.dumps
in models.py at about line 454,
        if not data and json is not None:
            # urllib3 requires a bytes-like body. Python 2's json.dumps
            # provides this natively, but Python 3 gives a Unicode string.
            content_type = 'application/json'
            body = complexjson.dumps(json)
            if not isinstance(body, bytes):
                body = body.encode('utf-8')

        is_stream = all([
            hasattr(data, '__iter__'),
            not isinstance(data, (basestring, list, tuple, collections.Mapping))
        ])
the dumps haven't any parameter, so how could I set the parameter ensure_ascii?