staticglobal commented on Jul 3, 2015
On my systems I exclusively work with collections of CA certificates stored as individual files in a single directory (with appropriate c_rehash symlinks) rather than the large monolithic "CA BUNDLE" file with every cert concatenated inside. Most *nix distributions provide both. A directory of certs at /etc/ssl/certs (or similar) as well as the single-large-file.
Monolithic files are probably easiest for most turnkey users who are only going to be connecting to a public server that uses a popular CA. They can simply download a single file from the internet and point the API at it to get up and running. However, the directory-based approach is much more manageable for users who need or want to customize their CA selection. Remove some old untrusted CAs or include a personal or corporate CA.
The openssl and pyopenssl APIs provide for both. load_verify_locations() accepts both a cafile and capath argument. You may specify one or the other or both. However, requests always passes "verify" as the cafile argument, and correctly documents that the input must be a file. If you try to pass a directory anyway, openssl gives you "SSLError: [Errno 21] Is a directory".
Please expand the definition of the "verify" parameter to also accept directory arguments. If the argument is a directory, pass it as the capath argument to load_verify_locations(), else continue passing it as cafile.