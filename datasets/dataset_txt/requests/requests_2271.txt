Contributor
bboe commented on Dec 19, 2012
When making a request to a server, if the server response contains a Connection: close header the TCP connection should be closed when the request ends, thus resulting in a tcp:fin being sent from the client to the server. This behavior is not happening. I'll note that the connection is not available for additional HTTP requests because it has been closed on the server side.
After looking through the past issues I discovered issue #520 which lead me to believe this behavior would occur when adding prefetch=True for requests version < 1.0 and now stream=False for version >= 1.0. However, it seems that neither of these methods actually result in the closing of the TCP connection on the client side.
Also, one thing the #520 issue discussion neglected to consider (maybe the code does) is that many load balancers explicitly close the TCP connection and send the connection: close in spite of what headers the client sends. This is the issue I'm running into as the load balancer (haproxy) will not allow me to make additional requests until my previous connection is properly closed.
I realize this probably extends into urllib3, however since I'm using requests directly I'll initially file the issue here.
Is there something I am missing? Assuming not, and for the time being, how can I forcefully close the TCP connection from a response object?