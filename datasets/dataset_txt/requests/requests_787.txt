Crazy-Owl commented on Feb 1, 2017
Hello,
We have a python program with resident process running in separate thread. We make requests in said thread and when master thread spots a timeout, a custom exception is dispatched to child thread via OS signal. We use Requests 2.12.4.
However, that exception is caught not by our handler (in child thread main loop), but by except: directive in alabel function deep in packages/idna/core.py: https://github.com/kennethreitz/requests/blob/master/requests/packages/idna/core.py#L264 because that handler is an unconditional "catch-all" except: directive. That leads to very cryptic behaviour like child thread not stopping and trying to access urls with unnecessary IDNA-encoding (all our URLs are in plain ascii).
Expected behaviour for that handler is not to catch everything, but to expect a specific exception class(es) and work just with them.