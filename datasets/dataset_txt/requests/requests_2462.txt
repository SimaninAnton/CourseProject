Contributor
cdunklau commented on Jun 3, 2012
I think I figured out the cause of the issue described here: #59
It appears that if one isn't careful to use a common case convention when assigning a header after it has been assigned before, the header will fail to work. The request will use the old header value... I think I know why, too. Here's an example:
test.py
from requests.structures import CaseInsensitiveDict

print "Initializing CID = CaseInsensitiveDict()"
CID = CaseInsensitiveDict()

print "Setting 'spam': 'eggs'"
CID['spam'] = 'eggs'
print "Setting 'Spam': 'Eggs'"
CID['Spam'] = 'Eggs'
print "Setting 'sPAM': 'eGGS'"
CID['sPAM'] = 'eGGS'

print "Contents of CID:", CID
print "CID['spam']: '%s'" % CID['spam']
print "CID['Spam']: '%s'" % CID['Spam']
print "CID['sPAM']: '%s'" % CID['sPAM']

print "\n\n\n"

print "Initializing CID = CaseInsensitiveDict()"
CID = CaseInsensitiveDict()

print "Setting 'sPAM': 'eGGS'"
CID['sPAM'] = 'eGGS'
print "Setting 'Spam': 'Eggs'"
CID['Spam'] = 'Eggs'
print "Setting 'spam': 'eggs'"
CID['spam'] = 'eggs'

print "Contents of CID:", CID
print "CID['spam']: '%s'" % CID['spam']
print "CID['Spam']: '%s'" % CID['Spam']
print "CID['sPAM']: '%s'" % CID['sPAM']
The output:
Initializing CID = CaseInsensitiveDict()
Setting 'spam': 'eggs'
Setting 'Spam': 'Eggs'
Setting 'sPAM': 'eGGS'
Contents of CID: {'sPAM': 'eGGS', 'Spam': 'Eggs', 'spam': 'eggs'}
CID['spam']: 'eggs'
CID['Spam']: 'eggs'
CID['sPAM']: 'eggs'

Initializing CID = CaseInsensitiveDict()
Setting 'sPAM': 'eGGS'
Setting 'Spam': 'Eggs'
Setting 'spam': 'eggs'
Contents of CID: {'spam': 'eggs', 'Spam': 'Eggs', 'sPAM': 'eGGS'}
CID['spam']: 'eGGS'
CID['Spam']: 'eGGS'
CID['sPAM']: 'eGGS'
Notice how in both passes, only the first assignment actually "works". It stores the data for all three assignments, but will only return the value set by the initial key.
I believe the only change necessary would be to the setitem method on CaseInsensitiveDict:
Broken:
    def __setitem__(self, key, value):
        dict.__setitem__(self, key, value)
        self._clear_lower_keys()
Fixed:
    def __setitem__(self, key, value):
        dict.__setitem__(self, key.lower(), value)
        self._clear_lower_keys()
When I use the corrected module, the CaseInsensitiveDict behaves as I believe it should:
Initializing CID = CaseInsensitiveDict()
Setting 'spam': 'eggs'
Setting 'Spam': 'Eggs'
Setting 'sPAM': 'eGGS'
Contents of CID: {'spam': 'eGGS'}
CID['spam']: 'eGGS'
CID['Spam']: 'eGGS'
CID['sPAM']: 'eGGS'

Initializing CID = CaseInsensitiveDict()
Setting 'sPAM': 'eGGS'
Setting 'Spam': 'Eggs'
Setting 'spam': 'eggs'
Contents of CID: {'spam': 'eggs'}
CID['spam']: 'eggs'
CID['Spam']: 'eggs'
CID['sPAM']: 'eggs'
Note that the value for that key is the last one assigned, instead of the first.
If needed, I can put together a pull request for this, but it might take some time since I've never done it before :)