paparomeo commented on Mar 20, 2013
In Python 3.x PreparedRequest.headers keys end up being a mixture of byte strings and unicode strings, because in PreparedRequest.prepared_headers the headers received from the user are byte encoded but later code in the request preparation (e.g. PreparedRequest.prepare_body) will add or modify unicode string keys.
The problem is visible, for example, when the user tries to create a PreparedRequest with a given content type with the 'Content-Type' key as a unicode string, which then in PreparedRequest.prepare_body is ignored and a default Content-Type header added because the key already in headers is a byte string, but a unicode string literal is being used for the existence test.
I tried to use always unicode strings or always byte strings, for the header keys, but that caused unit tests to fail either on Python 2.x or Python 3.x, so clearly a better thought solution is required.