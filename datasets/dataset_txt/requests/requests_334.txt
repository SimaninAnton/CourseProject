wlerin commented on Mar 26, 2018 ‚Ä¢
edited
Summary.
Expected Result
{
  "args": {},
  "data": "",
  "files": {
    "logo": "data:image/jpeg;base64,<base64 image data>"
  },
  "form": {},
  "headers": {
    "Accept": "application/json",
    "Accept-Encoding": "gzip, deflate",
    "Connection": "close",
    "Content-Length": "154247",
    "Content-Type": "multipart/form-data; boundary=------------------------<some boundary>",
    "Host": "httpbin.org",
    "User-Agent": "python-requests/2.18.4"
  },
  "json": null,
  "url": "https://httpbin.org/post"
}
Actual Result
{
  "args": {},
  "data": "",
  "files": {},
  "form": {},
  "headers": {
    "Accept": "application/json",
    "Accept-Encoding": "gzip, deflate",
    "Connection": "close",
    "Content-Length": "154247",
    "Content-Type": "multipart/form-data",
    "Host": "httpbin.org",
    "User-Agent": "python-requests/2.18.4"
  },
  "json": null,
  "url": "https://httpbin.org/post"
}
Reproduction Steps
import requests

headers = {
  'Content-Type': 'multipart/form-data',
  'Accept': 'application/json'
}

file = open('path_to_file.jpg', 'rb')
files = {"logo": file}

endpoint = "https://httpbin.org/post"
r = requests.post(endpoint, files=files, headers=headers)
print(r.json())
System Information
$ python -m requests.help
{
  "chardet": {
    "version": "3.0.4"
  },
  "cryptography": {
    "version": ""
  },
  "idna": {
    "version": "2.6"
  },
  "implementation": {
    "name": "CPython",
    "version": "3.6.0"
  },
  "platform": {
    "release": "4.4.0-103-generic",
    "system": "Linux"
  },
  "pyOpenSSL": {
    "openssl_version": "",
    "version": null
  },
  "requests": {
    "version": "2.18.4"
  },
  "system_ssl": {
    "version": "1000207f"
  },
  "urllib3": {
    "version": "1.22"
  },
  "using_pyopenssl": false
}
Reading some previous issues regarding multi-part file upload, I see that the usual response is something along the lines of "don't specify that header, requests will add it just fine". That's true, and currently works just fine on the user end, if they realise that's the problem, if the docs they are using were tested even slightly instead of just copy-pasted from other clients (e.g. curl, which handles this fine).
But isn't this a case that requests can handle just fine on its own, 100% correctly? It doesn't seem to me that silently failing to upload any file at all is the correct response here. Even throwing an exception or a warning would be preferable.
Note also that the Content-Length header lists the length correctly in both cases (with or without the custom header), but with the custom header requests fails to upload anything (presumably because it can't or won't set a boundary).
üëç 2