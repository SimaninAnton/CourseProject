naftulikay commented on Mar 22, 2013
I have an interesting situation which doesn't seem to be covered by the requests API. For a project I'm working on, I have a server which receives a multipart upload from a user in chunks in a handler which looks and works something like this:
class MyUploadHandler(BaseUploadHandler):

    def on_file_started(self, file_name):
        pass

    def on_file_chunk(self, chunk):
        pass

    def on_file_finished(self, file_size):
        pass
What I'd like to do is something like this:
import requests

class MyUploadHandler(BaseUploadHandler):

    def on_file_started(self, file_name):
        self.request = requests.put("http://secondary.com/upload/url", stream=True)

    def on_file_chunk(self, chunk):
        self.request.raw.write(chunk)

    def on_file_finished(self, file_size):
        self.request.finish()
It seems that this is currently not possible in the API, though I could be wrong. If I have to rewrite my code to incorporate a file-like object or a generator, I'd probably have to get my hands dirty with threading and this would make everything 1,000,000 times harder in my application than they should be.
Is what I'm talking about currently possible in requests, and if not, can the feature be easily added?