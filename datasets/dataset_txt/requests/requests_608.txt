Contributor
edmorley commented on Jun 7, 2017 â€¢
edited
The first round of CI for #4137 failed in the readme Jenkins job:
http://jenkins.kennethreitz.org:8080/job/requests/job/requests-readme/67/
The console output for the failure was:
...
Installing collected packages: requests
  Found existing installation: requests 2.17.3
    Uninstalling requests-2.17.3:
      Successfully uninstalled requests-2.17.3
  Running setup.py develop for requests
Successfully installed requests
+ make test-readme
python setup.py check -r -s
running check
warning: Check: :128: (WARNING/2) Bullet list ends without a blank line; unexpected unindent.

warning: Check: Invalid markup which will not be rendered on PyPI.

error: Please correct your package.
Makefile:11: recipe for target 'test-readme' failed
make: *** [test-readme] Error 1
Build step 'Virtualenv Builder' marked build as failure
(http://jenkins.kennethreitz.org:8080/job/requests/job/requests-readme/67/console)
This confused me initially, since the log output doesn't mention a particular filename, so all I had to go on was the name of the test (test-readme) - but the PR only modified AUTHORS.rst, HISTORY.rst and docs/user/advanced.rst - and not README.rst.
Not being familiar with setup.py check, and the functionality docutils adds to it, it took me a while to figure out it was validating the value passed to long_description in setup.py's setup(), which is:
    long_description=readme + '\n\n' + history,
...and therefore in my case the bad syntax was actually from HISTORY.rst.
Things that might make this more clear:
The Makefile command being renamed to say test-readme-history or similar
Leaving the makefile command named as-is, but in case of failure make it output "Validation of setup.py metadata failed! Check markup in X and Y"
Using another way to validate the markup that scans individual files (rather than the concatenated text in setup.py) and can give specific filenames and line numbers
Many thanks :-)