thkang2 commented on Mar 1, 2014
there are some python 'freezers' like cx_Freeze are used to create executable that doesn't depend on system-wide python (and relevant packages) installs. However, when you freeze a script, many of them love to bundle every package on which script depends into a single zip file.
this doesn't play nice with requests - (on windows) when zipimported, it fails to load cacert.pem that is necessary for https connections. unless you disable ssl cert verification, you can't open any https connection.
since requests is a versatile and elegant http/s library for python, many other packages depend on it. which means that if you try to zipimport and use somepackage which depends on requests, and both modules are in a zip, then your somepackage will fail to use ssl.
I know there are many workarounds for this problem - one would be monkey patching requests.get (or other methods) like this:
import requests
import sys
import functools

_get = sys.modules['requests'].get
cert_path = <path-to-cacert.pem>
sys.modules['requests'].get = functools.partial(_get, verify=cert_path)
which works, but undeniably an ugly 'hack'. would you consider a module-level ssl certificates handling, that we can cope with failures to import system CA pem files? like:
import requests
requests.add_certs('certs.pem')