pceBuildMaster commented on Jul 11, 2016
tl:dr
How to get data avail at request time to the AuthBase __call__ method to make needed changes to the request HTTP Post data
Details:
For our product's HTTP API I needed to create a new authentication method and modify the Request Post data based on the new authentication and what was passed to the Request HTTP verb call; Post in this instance.
When Request.Session create was called I had the __init__ method of my AuthBase class make a Requests call to login with provide credentials. The returning auth token was stored in the session obj.
Then when the __call__ method of my AuthBase call was called it would change the Request Post data with the auth token.
The ugly part is the call to make the Request Post could also get a 'cmd' param which needs to be in the HTTP data sent to the server. JSON format of Post data:
{
  "token" : "access token"
  "cmd" : "get"/"set"/"special"
  "data" : { ... }
}
Since at time of __call__ running only the PreparedRequest is available I see three methods of making the needed data and cmd info available:
save in session and add session object to request obj before Post is called
save cmd in headers before Post is called
add info to HTTP Post data and in call method extract and format as needed.
I looked at the hook system but that seems to now only hook into the Response event so it is too late for my needs.
I choose method 1 because it was late and I could just add all the info into session. It was just a proof-of-concept at this time. Either of the other methods would work but all seem ugly.
In the morning I tore it out and added a type attribute to the Requests.Session obj at creation time. Then at Post time if session is this type I make the changes before Post.
I am integrating this into the RobotFramework Requests wrapper library. So creating my own session type and using a subclassed AuthBase seemed it would provide a way to not have to change the HTTP verb calls like post_request with my session specific logic. But in the end it seems it might be the cleanest solution for my product's auth/cmd API methods.
Am I missing something that would allow the AuthBase methods to have access to the Session obj besides the methods outlined above?