Contributor
jaraco commented on Jun 25, 2013
In urllib2, the semantic concept of password management is separate from the authentication mechanisms. This means that one can implement password management (resolution of a username and password in a realm) independent of authentication mechanisms (basic, digest, etc).
With requests, it's not clear how one could do this if it's even possible. In particular, I'm working on a library that allows resolving a password late and only after the server has prompted for it. From the documentation and reading the code, it appears that requests requires that the authentication be known before the initial request is made, or for digest auth, it can be resolved later.
For example, see this code where the password manager is set up independently of the auth mechanism, and where the keyring-based implementation is only invoked if authentication is required.
I'd like to port that code to requests, but it seems to do that, I'd have to write a custom AuthBase, borrow the handle_401 from DigestAuth, borrow the password encoding from the basic auth class as well, plus customize it to the library's specific needs.
What hooks/options does requests provide that might help facilitate this need? Should requests be extended here to support these sorts of use cases? Should requests follow the same separation of responsibilities as urllib2 does, or is there a better approach in the spirit of requests?