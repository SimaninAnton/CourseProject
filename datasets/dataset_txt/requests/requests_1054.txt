Contributor
mmedal commented on Jun 2, 2016 â€¢
edited
I know you guys have addressed a variety of concerns relating to configuring proxies and that proxying is functionally complex, but I'd like to raise one issue I was having today. We have a new proxy in our environment that requires auth with a yubikey rather than a password. We can simply set an environment variable to a token returned from a yubikey auth endpoint that expires every 12 hours and pass it along with the Proxy-Authorization header in tools like curl, wget, etc... However, it gets a little trickier with requests, as the default api seems to only support including the proxy-user:proxy-pass in the proxy-url.
In our case, we can't do this, as a yubikey token is only good once. As a temporary workaround, I've subclassed HTTPAdapter and modified the proxy_headers method:
class CustomHTTPAdapter(HTTPAdapter):
    def proxy_headers(self, proxy):
        return {
            'Proxy-Authorization': 'Basic ' + environ.get('proxy_token', str())
        }  
and then mount it on a Session:
import requests

from mypkgs.adapters import CustomHTTPAdapter


s = requests.Session()
s.mount('https://', CustomHTTPAdapter())
s.get('https://someurl')
It would be incredibly useful to simply be able to do something like requests.get(uri, proxy_headers=proxy_headers). Am I barking up the wrong tree here or do you have any ideas or feedback?