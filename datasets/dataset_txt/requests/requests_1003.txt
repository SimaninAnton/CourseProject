dhduvall commented on Jul 22, 2016
I'm getting a bunch of stack traces from an app (various OpenStack componentry) which end with the following message
ConnectionError: ('Connection aborted.', error(146, 'ECONNREFUSED'))
or something similar. In all cases, the underlying problem is bad administrative configuration -- that is, not strictly a bug in either the app or in requests -- but the message is so vague that it's a huge pain in the ass to try to track down what it was trying to connect to when it failed. Sometimes by looking at the stack trace I can figure out what it was trying to do, but not always.
I could go and patch the apps to catch exceptions from requests and have it print out the URL, but that's potentially a lot of places. I was wondering if it would make sense to have a __str__() method for RequestException that would spit out the URL in addition to the basic junk from IOError. I tried
def __str__(self):
    s = super(RequestException, self).__str__()
    return "%s: %s" % (self.request.url, s)
and it did what I expected, at least for the one test case of connecting to an unlistened-on port.
I'm not looking for end-user-appropriate strings like in issue #2876, but just something to help out a reasonably savvy administrator unscared of things like stack traces and other gobbledygook, but short on time and patience to go figure out what the software should be telling her anyway.
Obviously more information might be necessary to diagnose certain problems, since the problem might be related to the request data, or other possibly large data, which you almost certainly would never want to show by default, but usually the requested URL is a useful point of information.
Thoughts?