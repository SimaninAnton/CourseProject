KOLANICH commented on Dec 9, 2018
requests has some security problems.
Browsers have same-origin policies, csrf protection headers and security addons like uMatrix and NoScript, preventing CSRF and some XSS attacks. Requests doesn't. So if a user of a browser opens a web page with a malicious script, the page won't access the authenticated admin consoles of user's IoT or local CUPS server: the addons provide the protections against even dns rebinding. But a script crawling the web lacks these protections, so a malicious webpage can trick the script into accessing local rezources.
So we need introduce security contexts.
a user creates a session
a user spawns a security context
a user is not allowed to access the URIs non available from the context using that context object.
for accessing them a user can redefine the restrictions of a context.
user should access the links from the pages loaded from the context using only a contexts, and this should be checkable by taint analysers.
spawning a context should be a simple call, and requests should do the work automatically
requests should by default enable the checks preventing accessing addresses from intranet.