Carmageddon commented on Feb 13, 2019
Summary.
Expected Result
I expect that I can expand this code which works for ONE zip "files" file, and JSON message body, to be expandable to 2 or more ZIP files along with the JSON body:
    multipart_form_data_object_orig = {
        'files': (args.files[0], open(args.files[0], 'rb'), "application/json"),
        'message': (None, open(args.message, 'rb'), 'application/json')
    }
    response = requests.post(args.url + ':' + str(args.port) + '/' + args.endpoint, files=multipart_form_data_object_orig,
                             proxies=proxies)
Actual Result
When I add a second element 'files': (args.files[1], open(args.files[1], 'rb'), "application/json"),, one overwrites the other.
In Curl, we can do -F "files=@file.zip,file2.zip" and both are properly passed
What happened instead.
Reproduction Steps
import requests
##args handling stuff..

    multipart_form_data_object_orig = {
        'files': (args.files[0], open(args.files[0], 'rb'), "application/json"),
        'files': (args.files[1], open(args.files[1], 'rb'), "application/json"),
        'message': (None, open(args.message, 'rb'), 'application/json')
    }
    response = requests.post(args.url + ':' + str(args.port) + '/' + args.endpoint, files=multipart_form_data_object_orig)
The JAVA API is only seeing one file in the files array, while Curl's request shows 2 files.
System Information
$ python -m requests.help
{
  "chardet": {
    "version": "3.0.4"
  },
  "cryptography": {
    "version": ""
  },
  "idna": {
    "version": "2.8"
  },
  "implementation": {
    "name": "CPython",
    "version": "2.7.15"
  },
  "platform": {
    "release": "10",
    "system": "Windows"
  },
  "pyOpenSSL": {
    "openssl_version": "",
    "version": null
  },
  "requests": {
    "version": "2.21.0"
  },
  "system_ssl": {
    "version": "100020ff"
  },
  "urllib3": {
    "version": "1.24.1"
  },
  "using_pyopenssl": false
}
There is a comperhensive question on StackOverflow I posted with all the variations to requests I tried to do in order to reproduce the CURL request:
https://stackoverflow.com/questions/54656686/python-requests-emulate-a-curl-post-sending-multipart-request-with-1-or-more-fil
Including the comparison of what httpbin shows for CURL, and for Python - they are DIFFERENT, and I was unable to find a way to make them identical, hence I believe this must be a bug in Requests, since this is a rarely used capability in APIs...