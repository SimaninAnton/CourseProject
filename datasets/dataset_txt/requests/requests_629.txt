remcohaszing commented on May 29, 2017
The python json module supports a custom JSONEncoder and JSONDecoder. This enables to serialize / deserialize custom data formats. Since requests just passes JSON data directly to json.dumps and json.loads, it is not possible to customize JSON serialization at all. As a result one must configure configure the JSON request manually, meaning the content type needs to be set manually.
I suggest to add the ability to pass custom json_encoder and json_decoder properties to requests. This handles pretty much all other arguments that could be passed to json.dumps and json.loads as well.
This example:
response = requests.post(
    'https://www.example.com',
    content_type='application/json',
    data=json.dumps(data, cls=MyEncoder))
result = json.loads(response.text, cls=MyDecoder)
would become:
response = requests.post(
    'https://www.example.com',
    json=data,
    json_encoder=MyEncoder,
    json_decoder=MyDecoder)
result = response.json()
I could even imagine that it's useful to pass these arguments to the session constructor, because data from one session might often contain the same types of data serialization.
session = requests.Session(json_encoder=MyEncoder, json_decoder=MyDecoder)

response = session.post('https://www.example.com', json=data)
result = response.json()