stevvooe commented on Jan 24, 2013
With the old session api, one could set defaults with kwargs on session instantiation. For example, usage was similar to the following:
with requests.session(cookies=mycookiejar, timeout=0.5):
    ... do some work
This allowed one to rollup session parameters for subclasses quite nicely:
class MySession(object):
    def __init__(self, myparam, *args, **kwargs):
        kwargs.setdefault('auth', self)
        super(MySession, self).__init__(self, *args, **kwargs)
        self.myparam = myparam

    def __call__(self, request):
        ... perform some auth with myparam
However, the new api is rather awkward in that it requires these params to be painstakingly broken out:
with requests.session() as s:
    s.auth = myauth
    s.cookies = mycookiejar
    ...  do something with session
Now, I wouldn't say this new API type is a bug, but its definitely less flexible in a situation where one wants to consolidate functionality in the session object, which is common for use with APIs. It's also unclear as to why this particular change was made when moving version 1.