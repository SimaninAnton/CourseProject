Contributor
jaraco commented on Mar 5, 2014
I have an application that wants to do some content length validation based on the Content-Length reported by the server. Currently, if the response has more or fewer bytes than indicated by the Content-Length, there's no error and due to encoding, it's not possible to detect the length of the payload actually read. Consider:
#!/usr/bin/env python3
import requests
resp = requests.get('http://en.wikipedia.org/wiki/Snowman', stream=True)
lines = list(resp.iter_lines(decode_unicode=True))
# this will fail if the content contains multi-byte characters
assert sum(map(len, lines)) == int(resp.headers['Content-Length'])
Of course, it would be possible if decoding of content is disabled, but then the reader is responsible for decoding. It would be preferable if there were a hook or attribute to enable the user to do the byte checking without forgoing decoding support.
Two suggestions:
Have requests supply a 'bytes_read' on the Response object, which will be updated on any read operation.
Provide a hook in the request allowing the user to supply a custom Response subclass for customizing response handling behavior.