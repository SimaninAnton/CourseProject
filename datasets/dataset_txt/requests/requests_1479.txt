cryzed commented on Mar 14, 2015
I am currently developing a small tool to download and upload files. I am using the requests and progressbar libraries, among others. During downloading and uploading of files I want to display the progress and speed of the upload. This works very well with the download, I simply set stream=True in my request and then use iter_content on the Response object with some chunk_size and report the total loaded bytes back to the progressbar.
As far as I can tell this is impossible with files sent via POST requests. I am trying to upload a single file by passing a dict as "files" to the POST request and would like to somehow implement a monitor callback that would either report how many bytes of that specific file have so far been uploaded, or how many bytes of the entire request have been uploaded -- either way works.
I checked the requests internals, and the magic seems to happen in: request.models.RequestEncodingMixin._encode_files. The problem is that in the last few lines of that function, the data always seems to be read into memory all at once, making it impossible to decorate or implement the read method of the file-like object in such a way that would allow monitoring the current upload further down the line.
Is there some kind of way to do what I am trying to do, and if there isn't yet, would you consider adding it? Maybe this would fit neatly into the hooks-system which doesn't seem to have that many features as of yet...
EDIT: The requests-toolbelt seems to have the solution.