Matt3o12 commented on Jul 27, 2014
Hello,
I often expect the request to have status code 200 and if it doesn't there isn't much I can do about (seriously when the server returns with error 500, I won't be able to do something). So I need to write code like this:
    r = requests.get(self.url(False))
    if r.status_code != 200:
        raise requests.ConnectionError("Expected status code 200, but got {}".format(page.status_code))
I think a kwarg called allowed_status_codes would be very convenient. It could be implemented like this:
By default it is None. None, and an empty list or tuple means allow all status codes. It may be an integer, list, tuple, or enum. If it is an integer, only allow this specific status code. In case it is a list or tuple, only status codes that are inside of the list/tuple are allowed. The list may have integers and/or enums. Enums should be a little bit more flexible.
For instance, if I wanted to allow all "successful" (2xx) requests, I could write: allowed_status_codes=requests.ALLOW_SUCCESS, which will throw an exception unless the status code is 2xx. If I only wanted to disallow server errors (and thus handle not authenticated errors), I could simply write allowed_status_codes=requests.DISALLOW_SERVER_ERROR, which will raise an exception if the server code is 5xx.
Of course there should be lots of enums that cover specific cases. And one should also be able to use it combined within a list (e.g. (200, ALLOW_REDIRECTIONS)).
If the status code isn't allowed, a StatusCodeError(RequestException) will be raised.
Even though I mentioned enums, I'm not talking about Python 3.4's enumerated values. I was talking rather about constants. Enums (constants) could be implemented like this:
#request model.

ALLOW_SUCCESS = AllowSuccessEnum()
# other enums

class RequestEnum(object):
     def is_status_code_allowed(status_code):
         raise NotImplementedError

class AllowSuccessEnum(RequestEnum):
    def is_status_code_allowed(status_code):
        # return false unless status code is 2xx