jj-one commented on May 21, 2017
I am setting up a vps. Everything has worked well with python requests module until I had to run a script on the server that exceeded two minutes. As soon as any script executes through python requests on the remote server for more than 2 minutes, the request goes on infinitely. It never returns or terminates. If I call the script from any browser, it executes normally and returns the appropriate response IRRESPECTIVE OF THE DURATION. The only means of terminating any scripting lasting more than two minutes and executed through python requests is by including the timeout parameter in the requests call, which normally gives the following traceback:
Traceback (most recent call last):
File "C:\Python34\lib\site-packages\requests\packages\urllib3\connectionpool.py", line 376, in _make_request
httplib_response = conn.getresponse(buffering=True)
TypeError: getresponse() got an unexpected keyword argument 'buffering'
During handling of the above exception, another exception occurred:
Traceback (most recent call last):
File "C:\Python34\lib\site-packages\requests\packages\urllib3\connectionpool.py", line 378, in _make_request
httplib_response = conn.getresponse()
File "C:\Python34\lib\http\client.py", line 1148, in getresponse
response.begin()
File "C:\Python34\lib\http\client.py", line 352, in begin
version, status, reason = self._read_status()
File "C:\Python34\lib\http\client.py", line 314, in _read_status
line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
File "C:\Python34\lib\socket.py", line 371, in readinto
return self._sock.recv_into(b)
File "C:\Python34\lib\ssl.py", line 708, in recv_into
return self.read(nbytes, buffer)
File "C:\Python34\lib\ssl.py", line 580, in read
v = self._sslobj.read(len, buffer)
socket.timeout: The read operation timed out
During handling of the above exception, another exception occurred:
Traceback (most recent call last):
File "C:\Python34\lib\site-packages\requests\adapters.py", line 376, in send
timeout=timeout
File "C:\Python34\lib\site-packages\requests\packages\urllib3\connectionpool.py", line 609, in urlopen
_stacktrace=sys.exc_info()[2])
File "C:\Python34\lib\site-packages\requests\packages\urllib3\util\retry.py", line 247, in increment
raise six.reraise(type(error), error, _stacktrace)
File "C:\Python34\lib\site-packages\requests\packages\urllib3\packages\six.py", line 310, in reraise
raise value
File "C:\Python34\lib\site-packages\requests\packages\urllib3\connectionpool.py", line 559, in urlopen
body=body, headers=headers)
File "C:\Python34\lib\site-packages\requests\packages\urllib3\connectionpool.py", line 380, in _make_request
self._raise_timeout(err=e, url=url, timeout_value=read_timeout)
File "C:\Python34\lib\site-packages\requests\packages\urllib3\connectionpool.py", line 308, in _raise_timeout
raise ReadTimeoutError(self, url, "Read timed out. (read timeout=%s)" % timeout_value)
requests.packages.urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host='domain1.com', port=443): Read timed out. (read timeout=130)
During handling of the above exception, another exception occurred:
Traceback (most recent call last):
File "all-test.py", line 32, in
cool = requests.post("https://domain1.com/test3.php", stream=True, verify=False, timeout=130)
File "C:\Python34\lib\site-packages\requests\api.py", line 107, in post
return request('post', url, data=data, json=json, **kwargs)
File "C:\Python34\lib\site-packages\requests\api.py", line 53, in request
return session.request(method=method, url=url, **kwargs)
File "C:\Python34\lib\site-packages\requests\sessions.py", line 468, in request
resp = self.send(prep, **send_kwargs)
File "C:\Python34\lib\site-packages\requests\sessions.py", line 576, in send
r = adapter.send(request, **kwargs)
File "C:\Python34\lib\site-packages\requests\adapters.py", line 449, in send
raise ReadTimeout(e, request=request)
requests.exceptions.ReadTimeout: HTTPSConnectionPool(host='domain1.com', port=443): Read timed out. (read timeout=130)
Note, everything works perfectly with no issue if called from browser.
Also, checking the access.log file on the remove server shows that the script completed at the right time with no issue and responded with 200 status code even when called by python requests that ran infinitely.
To eliminate some probable causes, i have set up and run similar script on my local wamp, calling the same script via python's requests with no issue.
Please, I will highly appreciate any help anybody can give me to resolve the above issue. It has taken me 4 days with no success.