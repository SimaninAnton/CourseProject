Contributor
ofek commented on Feb 15, 2016
For devs who use this great library, it would be very beneficial to be able to set the timeout AFTER initial connection. There are a few scenarios where this is useful but one of the main patterns/use cases is this:
import requests
import socket

# May or may not subclass threading.Thread
class Getter(object):
    def __init__(self):
        self.request = requests.get(url, stream=True)

    def run(self):
        with open(path, 'r+b') as file:

            bytes_consumed = 0
            while True:
                try:

                    chunk = self.request.raw.read(size)
                    if not chunk:
                        break
                    chunk_length = len(chunk)

                    file.write(chunk)
                    bytes_consumed += chunk_length

                except socket.timeout:
                    # handle incomplete download by using range header next time, etc.
Handling incomplete downloads due to connection loss is common and especially important when downloading large or many files (or both). As you can see, this can be achieved in a fairly straightforward way. The issue is there is really no good way to write tests for this. Each method would involve OS specific code which would also be a no-go for CI services.
What would be an option is the ability to set the timeout after establishing a connection. This way in a test you could do "r.timeout = (None, 0.00001)" and during reading it would simulate a timeout.
To my knowledge this is no way currently to inject a new Timeout class retroactively. Is this correct?