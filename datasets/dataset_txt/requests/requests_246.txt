akaihola commented on Jun 21, 2018
For the params= request argument, the documentation explains how multivalued query parameters can be expressed as lists in the dictionary:
You can also pass a list of items as a value:
>>> payload = {'key1': 'value1', 'key2': ['value2', 'value3']}
>>> r = requests.get('http://httpbin.org/get', params=payload)
There's also a unit test for this:
   def test_urlencoded_get_query_multivalued_param(self, httpbin):
        r = requests.get(httpbin('get'), params=dict(test=['foo', 'baz']))
For the data= request argument, only the "list of tuples" method for multivalued form-encoded values is shown in the documentation:
You can also pass a list of tuples to the data argument. This is particularly useful when the form has multiple elements that use the same key:
>>> payload = (('key1', 'value1'), ('key1', 'value2'))
>>> r = requests.post('http://httpbin.org/post', data=payload)
However, both params= and data= use the same RequestEncodingMixin._encode_params() helper for encoding the query parameters or form-encoded values. Indeed, using a list also works for data=:
>>> requests.Request(url='http://foo', method='POST', data={'a': ['b', 'c']}).prepare().body
'a=b&a=c'
Expected Result
The "list of items" method for specifying multivalued POST parameters should be documented and tested in the unit test suite.
Actual Result
I couldn't find documentation or unit tests for the "list of items" method.