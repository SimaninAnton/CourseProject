campadrenalin commented on Oct 12, 2013
In the unit tests for a server project, I'm using requests to pull down data from the server and verify that it's correct. This data is in JSON format, so it seems only natural to use r.json() to decode the data.
Unfortunately, while this works for Python 2.X, it doesn't seem to work for Python 3, giving the following error:
Traceback (most recent call last):
  File "/home/philip/projects/python-djdns/djdns/tests/test_script.py", line 129, in test_get_user
    r.json(),
  File "/home/philip/projects/python-djdns/.tox/py32/lib/python3.2/site-packages/requests/models.py", line 690, in json
    return json.loads(self.text or self.content, **kwargs)
  File "/usr/lib/python3.2/json/__init__.py", line 309, in loads
    return _default_decoder.decode(s)
  File "/usr/lib/python3.2/json/decoder.py", line 353, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
TypeError: can't use a string pattern on a bytes-like object
This happens whenever you try to feed a bytestring into the JSON decoder. For a simple test case (and remember, this is only in Python 3):
>>> import json
>>> json.loads(b"{}")
It seems like as long as requests just dumps the loaded bytestrings directly into the decoder, without turning them into proper string first, this will be a problem. It is entirely possible that this error can (in this case) be patched server-side by specifying the encoding as an HTTP header - at present, the server is extremely basic, and doesn't have any encoding header at all. But this is still probably an edge case that you folks will want to patch for.