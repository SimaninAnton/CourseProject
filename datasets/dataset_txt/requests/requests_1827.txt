richmilne commented on Feb 4, 2014
Consider this snippet of code:
import requests
from requests.auth import HTTPProxyAuth

auth = HTTPProxyAuth('username', 'password')
proxy = {'https': 'https://192.168.0.1/'}
req = requests.get('http://www.google.com', proxies=proxy, auth=auth)
What I expect the code to do is to send an encrypted request (as implied by http_S_ to the proxy URL (192.168.0.1), the payload of which is the URL I want to retrieve (www.google.com).
What Requests does instead is send a query directly to the target (Google), with the proxy credentials, Base64 encoded, in the header! The request does not go near the proxy, which you can check by entering invalid credentials in the snippet above (which should result in some 40* error, but passes silently.)
If the proxy URL is changed to "HTTP", the transfer works as expected (credentials sent to proxy, proxy fetches target URL), only the conversation is not encrypted.
This was tested under Requests v1.2.0, and the latest version, 2.2.1
Am I just using the module incorrectly, or is this a bug in Requests?