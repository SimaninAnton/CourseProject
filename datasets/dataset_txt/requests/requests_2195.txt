maxbane commented on Feb 21, 2013
Proxy authentication information is specified by the proxies dictionary passed to requests.get() and other methods, like so:
requests.get(..., proxies = {'http': 'http://user:pass@myproxy.mydomain.com'})
Because the username and password are specified as part of a URL, they must be URL-encoded by the caller; otherwise consider what would happen if the user's password or username contained an @ or a :, etc.
So, for example, if my proxy password is p@ssword!!!, I need to write my call like this:
requests.get(..., proxies = {'http': 'http://user:p%40ssword%21%21%21@myproxy.mydomain.com'})
However, this functionality is currently broken, because utils.get_auth_from_url does not decode the URL-encoded username and password. The result is that the raw URL-encoded username and password are sent in the Proxy-Authorization header to the proxy, but of course the proxy expects the actual, decoded username and password, so authentication fails.
It is a one-line fix to perform URL decoding in utils.get_auth_from_url. It would also be a good idea to add this to the test_get_auth_from_url test case.
I would submit a pull request myself, but the fix I developed was written on company time, so I would need like 7 signatures to release it you. Argh.