Contributor
miikka commented on Jun 7, 2012
These work:
requests.post("http://httpbin.org/post", data={'a': 0})
requests.post("http://httpbin.org/post", data={'a': 0.0})
requests.post("http://httpbin.org/post", data={'a': 0}, files={'b': 'foo'})
However, this fails:
requests.post("http://httpbin.org/post", data={'a': 0.0}, files={'b': 'foo'})
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File ".../dev/lib/python2.7/site-packages/requests/api.py", line 87, in post
    return request('post', url, data=data, **kwargs)
  File ".../dev/lib/python2.7/site-packages/requests/safe_mode.py", line 37, in wrapped
    return function(method, url, **kwargs)
  File ".../dev/lib/python2.7/site-packages/requests/api.py", line 42, in request
    return s.request(method=method, url=url, **kwargs)
  File ".../dev/lib/python2.7/site-packages/requests/sessions.py", line 230, in request
    r.send(prefetch=prefetch)
  File ".../dev/lib/python2.7/site-packages/requests/models.py", line 505, in send
    (body, content_type) = self._encode_files(self.files)
  File ".../dev/lib/python2.7/site-packages/requests/models.py", line 364, in _encode_files
    (body, content_type) = encode_multipart_formdata(fields)
  File ".../dev/lib/python2.7/site-packages/requests/packages/urllib3/filepost.py", line 80, in encode_multipart_formdata
    body.write(data)
TypeError: 'float' does not have the buffer interface
encode_multipart_formdata expect the keys of the data dict to be buffer-like objects or ints (a special case), whereas urlencode puts things through str. In the hindsight I'm not sure if I should have expected this to work, but I was pretty surprised when I encountered this.