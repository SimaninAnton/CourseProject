maebert commented on May 8, 2012
Stumbled up this while trying to use the Freebase API.
Basically, their API looks like that:
https://www.googleapis.com/freebase/v1/mqlread?query=...
as a query, they expect a JSON object, here's one that will return a list of wines with their country and percentage of alcohol:
[{
  "country":       null,
  "name":          null,
  "percentage_alcohol": null,
  "percentage_alcohol>": 0,
  "type":          "/food/wine"
}]
Of course, we'll have to escape the hell out of this before passing it to an URL, so the actual query will look like this:
fullurl = 'https://www.googleapis.com/freebase/v1/mqlread?query=%5B%7B%22percentage_alcohol%3E%22%3A+0%2C+%22country%22%3A+null%2C+%22type%22%3A+%22%2Ffood%2Fwine%22%2C+%22name%22%3A+null%2C+%22percentage_alcohol%22%3A+null%7D%5D'
Now,
r = requests.get(fullurl)
print r.status_code
>>> 400
because the site claims it couldn't parse the query.
r2 = urllib2.urlopen(fullurl)
print r2.getcode()
>>> 200
No problem here, I get a proper return. Interestingly,
print urllib2.urlopen(r.url).getcode() 
>>> 200
Why? Am I doing something wrong?
On a related note, it would be nice if requests would parse dictionaries as JSON in params:
baseurl = "http://localhost/"
query =[{ 
    "name": "bill" ,
    "age": 42
}]
r = requests.get(baseurl, params={'query': query})
print r.url
>>> u'http://localhost/?query=age&query=name'
It seems as if it is just treating query as an iterable.
EDIT:
r3 = urllib.urlopen(fullurl)
print r3.getcode()
>>> 400
Seems urllib2 does something different than urllib there.