Contributor
alexanderad commented on Mar 13, 2016
When a request is made via proxy and a timeout happens you'll get a ConnectTimeout error, which is expected:
import requests

proxies = {
  'http': 'http://10.10.1.10:3128',
  'https': 'http://10.10.1.10:1080',
}

try:
    requests.get(
        'http://httpbin.org/ip', proxies=proxies, timeout=1
    ).json()
except requests.ConnectionError as e:
    print(isinstance(e, requests.exceptions.ConnectTimeout))  # true
I believe this is possible because of "special handling" here on these lines.
However, if the proxy cause a Network unreachable / No route to host error, you'll get a "generic" ConnectionError, not a specific ProxyError and there is actually no way to get to the ProxyError.
ConnectionError(MaxRetryError("HTTPConnectionPool(host='10.10.1.10', port=3128): Max retries exceeded with url: http://httpbin.org/ip (Caused by ProxyError('Cannot connect to proxy.', NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x10fe268d0>: Failed to establish a new connection: [Errno 51] Network is unreachable',)))",),)
The question is: is it possible to get somehow down to, at least, ProxyError in this case?