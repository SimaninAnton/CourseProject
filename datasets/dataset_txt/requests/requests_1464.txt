dxtodorovic commented on Mar 31, 2015
In models.py, chardet.detect(self.content)['encoding'] fails to work with IronPython with an exception: 'Expected a bytes object, not a unicode object'. It is due to a check in chardet's init ( isinstance(aBuf, unicode) ) and IronPython's way of handling strings as unicode type.
Excerpt from chardet's init:
def detect(aBuf):
        if ((version_info < (3, 0) and isinstance(aBuf, unicode)) or
                (version_info >= (3, 0) and not isinstance(aBuf, bytes))):
            raise ValueError('Expected a bytes object, not a unicode object')
I tried passing bytes(self.content) to chardet instead but that solution fails short because in compat.py, we are redefining bytes to str, which under IronPython is
unicode.
Can we perhaps add some way of handling IronPython properly or is it something that should be fixed in chardet instead?