StevenLOL commented on May 24, 2015
Following code shows that AdaBoostClassifier does not work better than base_estimator, with SAMME or SAMME.R
from sklearn.datasets import make_blobs
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, AdaBoostClassifier
from sklearn.metrics import accuracy_score
from sklearn.svm import SVC
from sklearn.cross_validation import train_test_split


datax,datay=make_blobs(n_samples=2000,random_state=1)
trainx, testx, trainy, testy = train_test_split(datax,datay,test_size=0.35, random_state=1)


###############SVC with probability=True
clf=SVC(probability=True,random_state=1)
clf.fit(trainx,trainy)
y_pred=clf.predict(testx)
print 'SVC ',accuracy_score(testy,y_pred)

###############AdaBoostClassifier with SAMME.R
clf=AdaBoostClassifier(algorithm='SAMME.R',base_estimator=SVC(probability=True,random_state=1),random_state=1,n_estimators=10)
clf.fit(trainx,trainy)
y_pred=clf.predict(testx)
print 'AdaBoostClassifier',accuracy_score(testy,y_pred)



###############SVC with probability=False
clf=SVC(random_state=1)
clf.fit(trainx,trainy)
y_pred=clf.predict(testx)
print 'SVC ',accuracy_score(testy,y_pred)
###############AdaBoostClassifier with SAMM
clf=AdaBoostClassifier(algorithm='SAMME',base_estimator=SVC(random_state=1),random_state=1,n_estimators=10)
clf.fit(trainx,trainy)
y_pred=clf.predict(testx)
print 'AdaBoostClassifier',accuracy_score(testy,y_pred)
Output:
SVC 0.997142857143
AdaBoostClassifier 0.994285714286
SVC 0.997142857143
AdaBoostClassifier 0.325714285714