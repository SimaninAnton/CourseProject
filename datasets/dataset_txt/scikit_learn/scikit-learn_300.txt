Contributor
raamana commented on Aug 27, 2019
Description
While trying to use an external estimator (part of kernelmethods) with cross_val_score, I ran into this error:
  File "sklearn/model_selection/_validation.py", line 505, in _fit_and_score
    X_train, y_train = _safe_split(estimator, X, y, train)
  File "sklearn/utils/metaestimators.py", line 195, in _safe_split
    raise ValueError("X should be a square kernel matrix")
ValueError: X should be a square kernel matrix
This is essentially a check for the shape of X to be square when kernel is precomputed. My estimator takes in a regular X (n x p) and then computes a kernel matrix inside .fit() (which is where I am supposed according to Estimator tests!), and this check happens before the estimator is fitted!
This disparity is a result of the definition of how an estimator is defined to be pairwise:
    @property
    def _pairwise(self):
        # Used by cross_val_score.
        return self.kernel == "precomputed"
Few solutions I have are:
Do not identify the kernel to be precomputed in __init__ , wait until fit().
Override _pairwise property definition
Do not use cross_val_score,
I'd rather not do any of the above if possible, as I don't think they are the best practices.
(1) seems plausible, but it leaves the estimator instances in a dangerous/invalid/inaccurate state between init and fit. Not a good state to offer it to users!
Any suggestions? Thanks.