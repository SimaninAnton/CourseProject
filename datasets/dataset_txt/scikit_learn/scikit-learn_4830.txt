pcsaraiva commented on May 29, 2013
Hi,
I have a set of 150 geographical points (latitude,longitude) and I want to use dbscan to cluster them. So I've implemented my own distance function to calculate the haversine distance between two points in Km kilometers (see the code at the end).
Latitude and longitude are in decimal degrees like:
lat,lng
45.538872,-122.884955
34.417982,-118.436737
34.417982,-118.436737
39.979635,-105.240848
51.580400,-0.252000
For five points above my distance matrix would be:
[[ 0. 1293.17792236 1293.17792236 1563.67638473 7904.41806675]
[ 1293.17792236 0. 0. 1320.73404451 8722.45928574]
[ 1293.17792236 0. 0. 1320.73404451 8722.45928574]
[ 1563.67638473 1320.73404451 1320.73404451 0. 7524.58251292]
[ 7904.41806675 8722.45928574 8722.45928574 7524.58251292 0. ]]
I set dbscan to run with a matrix distance calculated with haversine function:
distance_matrix = scipy.spatial.distance.squareform(scipy.spatial.distance.pdist(coords, (lambda u,v: haversine(u,v))))
db = DBSCAN(eps=10000.0).fit(distance_matrix)
My question is how to set the eps parameter? In kilometers?
For this small example, dbscan outputs following clusters:
Estimated number of clusters: 1
clusterId:0 [45.538872,-122.884955]
clusterId:0 [34.417982,-118.436737]
clusterId:0 [34.417982,-118.436737]
clusterId:0 [39.979635,-105.240848]
and
clusterId:-1 [51.5804,-0.252]
I'm confused. Why the last point was not clustered? My eps is 10000.0 and distance between first point and last point is 7904.42 Km.
Any help would be good.
def haversine(p1, p2):
# convert decimal degrees to radians
lat1=p1[0]
lon1=p1[1]
lat2=p2[0]
lon2=p2[1]
lon1, lat1, lon2, lat2 = map(math.radians, [lon1, lat1, lon2, lat2])
# haversine formula
dlon = lon2 - lon1
dlat = lat2 - lat1
a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2
c = 2 * math.asin(math.sqrt(a))
km = 6372.795 * c
return km