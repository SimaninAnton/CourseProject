VineethKanaparthi commented on Jun 20, 2018 â€¢
edited by jnothman
Description
Predicitons for individual estimators in gradient bossting classifier
Steps/Code to Reproduce
from sklearn.ensemble import GradientBoostingClassifier 
from sklearn.model_selection import StratifiedKFold

kf = StratifiedKFold(n_splits=5,random_state=42,shuffle=True)

def modelfit(alg, train, y, performCV=True, printFeatureImportance=True, cv_folds=kf):
    #Fit the algorithm on the data
    alg.fit(train, y)
        
    #Predict training set:
    train_predictions = alg.predict(train)
    train_predprob = alg.predict_proba(train)[:,1]
    
    #Perform cross-validation:
    if performCV:
        cv_score = model_selection.cross_val_score(alg, train,y, cv=cv_folds, scoring='roc_auc')
    
    #Print model report:
    print("\nModel Report")
    print("Accuracy : %.4g" % metrics.accuracy_score(y, train_predictions))
    print("AUC Score (Train): %f" % metrics.roc_auc_score(y, train_predprob))
    
    if performCV:
        print("CV Score : Mean - %.7g | Std - %.7g | Min - %.7g | Max - %.7g" % (np.mean(cv_score),np.std(cv_score),np.min(cv_score),np.max(cv_score)))
        
    #Print Feature Importance:
    if printFeatureImportance:
        feat_imp = pd.Series(alg.feature_importances_, [x for x in train.columns]).sort_values(ascending=False)
        feat_imp.plot(kind='bar', title='Feature Importances')
        plt.ylabel('Feature Importance Score')

gbm0 = GradientBoostingClassifier(n_estimators=500, random_state=42)
%time modelfit(gbm0, X_train, y_train) 
 #modelfit is a custom function which I wrote for creating a visual report

preds = np.stack([tree.predict(X_valid) for tree in gbm0.estimators_])
preds[:,0], np.mode(preds[:,0]), y_valid[0]
Expected Results
(array([ 1, 1 , 1 , 1 , 1, 0, 1, 0, 1, 1 ]),
1,
1)
.
Actual Results
AttributeError Traceback (most recent call last)
in ()
----> 1 preds = np.stack([t.predict(X_valid) for t in gbm0.estimators_])
2 preds[:,0], np.mean(preds[:,0]), y_valid[0]
in (.0)
---> 1 preds = np.stack([t.predict(X_valid) for t in gbm0.estimators_])
2 preds[:,0], np.mean(preds[:,0]), y_valid[0]
AttributeError: 'numpy.ndarray' object has no attribute 'predict'
.
Versions
Linux-4.13.0-1019-gcp-x86_64-with-debian-stretch-sid
Python 3.6.5 | packaged by conda-forge | (default, Apr 6 2018, 13:39:56)
[GCC 4.8.2 20140120 (Red Hat 4.8.2-15)]
NumPy 1.14.3
SciPy 1.1.0
Scikit-Learn 0.19.1