Contributor
bmcfee commented on Mar 19, 2015
(Note: I hit this on 0.16b1)
n_clusters=0 seems like invalid input to me, and I didn't see any particular documentation addressing the expected behavior for this setting.
However, it does run without error, and does what you might expect:
In [8]: import numpy as np
In [9]: import sklearn.cluster
In [10]: data = np.random.randn(200, 2)
In [11]: model = sklearn.cluster.AgglomerativeClustering(n_clusters=0)
In [12]: model.fit(data)
Out[12]: 
AgglomerativeClustering(affinity='euclidean', compute_full_tree='auto',
            connectivity=None, linkage='ward',
            memory=Memory(cachedir=None), n_clusters=0, n_components=None,
            pooling_func=<function mean at 0x7fe7a5653c08>)

In [13]: model.labels_
Out[13]: 
array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
This came up in one of my project's unit tests. The test would expect an exception here, and worked as expected in 0.15 but fails in 0.16b1.