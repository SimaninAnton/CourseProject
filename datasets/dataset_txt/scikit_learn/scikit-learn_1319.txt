Member
ogrisel commented on Jun 13, 2018 ‚Ä¢
edited
Prior to the release, we need to conduct an audit specifically on DeprecationWarning and FutureWarnings raised in the tests (including doctests from the doc). Then on a case by case basis we need to decide for each occurrence whether to:
change the test specifically to check that the deprecated feature actually raise the warning but still work the way it used to work in 0.19.1
change the test to stop using the deprecated feature if the ultimate goal of the test is not to test the backward compatibility of the deprecated feature.
ignore the warnings if we have a specific reason to do so: for instance in test_common.py it's ok to blindly ignore the warnings because the automated estimator introspection lookup will trigger them.
In any case, we should never blindly ignore the warning. In the very few cases where there is a legetimate reason to catch the warning (as in test_common), we need to at least write why it's safe to ignore this specific warning occurrence in an inline comment in the source code of the test.
üëç 1