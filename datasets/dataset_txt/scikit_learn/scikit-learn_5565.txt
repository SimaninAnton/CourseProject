Member
robertlayton commented on Sep 3, 2011
Following a discussion on the mailing list about the total build time, including testing, it was suggested that some of the unit tests are slow. The following functions take the most cumulative time in running the tests, and give insight into which tests should be addressed first. The hmm/gmm tests are currently the worst for taking time to run. Can someone please have a look at these tests and work out if its possible to make them faster?
I've taken some liberty with the following output, but its basically the result of running $ python profile_sklearn.py | grep "test"
         8564043 function calls (8511572 primitive calls) in 54.349 CPU seconds

   Ordered by: cumulative time
   List reduced from 4738 to 10 due to restriction <10>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000   54.389   54.389 __init__.py:27(test)
        1    0.001    0.001   54.389   54.389 nosetester.py:249(test)
       17    0.002    0.000   13.312    0.783 test_hmm.py:211(train_hmm_and_keep_track_of_log_likelihood)
        5    0.001    0.000    6.735    1.347 test_hmm.py:315(test_fit)
        6    0.001    0.000    3.641    0.607 test_hmm.py:610(test_fit)
       12    0.001    0.000    3.594    0.300 test_gmm.py:202(test_train)
     2475    0.007    0.000    3.343    0.001 test_hmm.py:216(<genexpr>)
        7    0.000    0.000    2.653    0.379 test_gaussian_process.py:35(test_2d)
        1    0.001    0.001    2.420    2.420 test_ridge.py:237(test_dense_sparse)
        4    0.001    0.000    2.369    0.592 test_hmm.py:353(test_fit_with_priors)
        1    0.004    0.004    1.893    1.893 test_image.py:57(test_connect_regions)
        1    0.000    0.000    1.782    1.782 test_gaussian_process.py:83(test_ordinary_kriging)
        2    0.046    0.023    1.622    0.811 test_ridge.py:115(_test_ridge_loo)
        1    0.004    0.004    1.610    1.610 test_image.py:65(test_connect_regions_with_grid)
        2    0.000    0.000    1.504    0.752 test_sgd.py:255(test_auto_weight)
        1    0.000    0.000    1.470    1.470 test_cross_val.py:63(test_permutation_score)
        4    0.000    0.000    1.466    0.367 cross_val.py:812(permutation_test_score)
      404    0.040    0.000    1.242    0.003 cross_val.py:754(_permutation_test_score)
        2    0.000    0.000    1.179    0.590 test_hmm.py:495(test_fit)
        1    0.000    0.000    1.142    1.142 test_hmm.py:396(test_fit_startprob_and_transmat)
        1    0.001    0.001    1.141    1.141 test_coordinate_descent.py:137(test_enet_path)
        1    0.000    0.000    1.126    1.126 test_image.py:167(test_reconstruct_patches_perfect_color)
      602    0.006    0.000    1.116    0.002 doctest.py:780(find)
       77    0.001    0.000    1.104    0.014 doctest.py:2144(runTest)
       77    0.001    0.000    1.102    0.014 doctest.py:1344(run)
        1    0.006    0.006    1.000    1.000 test_neighbors.py:70(test_neighbors_sparse_classification)
       77    0.009    0.000    0.982    0.013 doctest.py:1196(__run)
        1    0.000    0.000    0.914    0.914 test_parallel.py:82(test_error_capture)
4804/2383    0.046    0.000    0.888    0.000 doctest.py:893(_find)
     1874    0.007    0.000    0.836    0.000 suite.py:370(_get_wrapped_tests)
     1370    0.002    0.000    0.809    0.001 suite.py:92(_get_tests)
        1    0.000    0.000    0.804    0.804 test_nmf.py:108(test_projgrad_nmf_sparseness)
For reference, profile_sklearn.py is:
import cProfile
from sklearn import test

cProfile.run("test()", 'sklearn.prof')

import pstats
p = pstats.Stats('sklearn.prof')
p.strip_dirs().sort_stats('cumulative').print_stats(500)