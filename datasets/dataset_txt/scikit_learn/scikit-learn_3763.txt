wlattner commented on Jun 21, 2015
When LogisticRegressionCV is run with an l1 penalty and refit=True, the final model does not seem to be doing any variable selection, the final coefficients are all non-zero. Models fit separately (using LogisticRegression) on the same values of C in the grid passed to LogisticRegressionCV result in mostly zero coefficients.
import numpy as np
import sklearn

from sklearn.datasets import make_classification
from sklearn.linear_model import LogisticRegression, LogisticRegressionCV

print(sklearn.__version__)  # 0.16.1

x, y = make_classification(n_samples=10000, random_state=133)

lr_01 = LogisticRegression(penalty='l1', solver='liblinear', C=0.01)
lr_01 = lr_01.fit(x, y)
print(np.count_nonzero(lr_01.coef_))  # 2 non-zero coefficients

lr_001 = LogisticRegression(penalty='l1', solver='liblinear', C=0.001)
lr_001 = lr_001.fit(x, y)
print(np.count_nonzero(lr_001.coef_))  # 1 non-zero coefficients

# use LogisticRegressionCV on a grid of [0.01, 0.001] for C
lr_cv = LogisticRegressionCV(penalty='l1', solver='liblinear', Cs=[0.01, 0.001], refit=True)
lr_cv = lr_cv.fit(x, y)
print(np.count_nonzero(lr_cv.coef_))  # 20 non-zero coefficients

# check which value of C was selected
print(lr_cv.C_)  # [ 0.01]

# compare lr_cv.coef_ to lr_01.coef_
print(lr_cv.coef_)
# [[ 0.00378572 -0.0382404   0.03526494  0.04258872  0.01447892 -0.00853596
#    0.76508529 -0.99786672 -0.01364018 -0.02769111  0.00275433 -0.04077918
#    0.03579957 -0.01425979  0.00437261 -0.01483434  0.02060494 -0.01298574
#    2.32994756 -0.01440317]]
print(lr_01.coef_)
# [[ 0.                  0.          0.          0.          0.          0.          0.
#   -0.61909139  0.          0.          0.          0.          0.          0.
#    0.                  0.          0.          0.          3.12856295       0.        ]]

# re-run LogisticRegressionCV w/ refit=False
lr_cv_no_refit = LogisticRegressionCV(penalty='l1', solver='liblinear', Cs=[0.01, 0.001],
                                                              refit=False)
lr_cv_no_refit = lr_cv_no_refit.fit(x, y)
print(np.count_nonzero(lr_cv_no_refit.coef_))  # 2 non-zero coefficients