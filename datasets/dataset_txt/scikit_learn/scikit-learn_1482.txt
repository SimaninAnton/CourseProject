ghost commented on Mar 20, 2018 â€¢
edited by ghost
In my sklearn classification model, I built a custom transformer which process the input text before the TfidfVectorization process:
# variables --
co = dict() #<-- filled previously

class prepTxtStar(BaseEstimator, TransformerMixin):
    def __init__(self, kValue=0):
        self.kValue = kValue

    def fit(self, X, y=None):
        return self

    def transform(self, X):
        global co
        print('Size of co from inside:', len(co))
        if len(X[0]) > 3:
            for row in range(len(X)):
                c = str(X[row]).split()
                for i in range(len(c)):
                    if int(co[c[i]]) < int(self.kValue): #<---
                        c[i] = repAllTxt(c[i])
                X[row] = ' '.join(c)
        return X



if __name__ == "__main__":
    xOri, yOri = readFiles()
    xOri = [clean_str(i) for i in xOri]
    corpDict(xOri) #<--- co is filled
    print('Size of co before: ', len(co))

    model = Pipeline(   ('preparingtxt', prepTxtStar(kValue=0)),
                        ('tfidf', TfidfVectorizer(analyzer='char_wb' , lowercase=False)),
                        ('clf', SGDClassifier(tol = None))
                        ])
The problem is: when I fit my model without using GridSearch technique, like here:
model = model.fit(x, y)
it works perfectly, but once I used GS technique, the size of "co" dictionary that I called in the beginning of my transformer : global co, become 0! as it is empty !?
the output with error:
> Size of co before:  4361 
> Size of co from inside: 0 
>          ....
>      60         if len(X[0]) > 3:
>      61             for row in range(len(X)):
>      62                 c = str(X[row]).split()
>      63                 # print('2: ' , c)
>      64                 for i in range(len(c)):
> ---> 65                     print('HERE: ', int(co[c[i]]))
>         c = ['You', 'essentially', '.', '.', '.']
>         i = 0
>      66                     if int(co[c[i]]) < int(self.kValue):
>      67                         c[i] = repAllTxt(c[i])
>      68                 X[row] = ' '.join(c)
>      69                 # print(X[row])
> 
> KeyError: 'You'
Did I missed something?