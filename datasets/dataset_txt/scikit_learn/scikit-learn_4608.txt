Arrakis-10191 commented on Nov 7, 2013
Hello,
In 0.14.1 (and below) The GaussianHMM class fails to train any matrix that contains a feature column where all the elements have the same value. The code snippit at the bottom reproduces the problem.
The initial problem was a crash with "ValueError('startprob must sum to 1.0')" in "_set_startprob". I found this initial problem lies with the startprob and transmat arrays. In the second pass of both "_set_startprob" and "_set_transmat" in "hmm.py", the values of both these arrays are filled with numpy.nan values.
Changing the line
if transmat is None:
to
if transmat is None or all(np.isnan(item) for item in transmat.flatten()):
solves the initial bug. This allows some matrices containing a feature column with all equal values to produce a correct log probability on return of the "score" function. However in the code snippit below, the output of "score" is a nan probability. I cannot solve this problem. Please help!
import numpy
from sklearn import hmm

z = numpy.zeros((16, 1))
o = numpy.ones((16, 1))
a = numpy.hstack((z, o))
b = numpy.hstack((o, z))
items = [a, b]
hitems = [a * 0.5, b * 0.5]

h = hmm.GaussianHMM(5, n_iter = 10, thresh = 0.01)
h.fit(hitems)    #replacing hitems with items causes the same output
print h.score(hitems[0])
print h.score(hitems[1])