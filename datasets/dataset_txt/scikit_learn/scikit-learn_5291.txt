Contributor
briancheung commented on Aug 11, 2012
Code to reproduce the issue:
import numpy as np
def generate_blobs_3d():
    np.random.seed(27)
    x1 = np.random.randn(200,3) + np.array([1.4, 1.8, 22.2])
    x2 = np.random.randn(100,3) + np.array([4.7, 4.0, 9.6])
    x3 = np.random.randn(400,3) + np.array([100.7, 100.0, 100.8])
    blobs = np.vstack((x1,x2,x3))
    return blobs
blobs = generate_blobs_3d()
S = np.corrcoef(blobs)
S[S < 0] = 0
from sklearn import cluster
algorithm = cluster.SpectralClustering(k=3, mode='arpack')
algorithm.fit(S)
y_pred = algorithm.labels_.astype(np.int)
The one sample cluster consistently occurs for the first sample.