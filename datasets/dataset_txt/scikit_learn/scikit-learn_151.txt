Contributor
GregoryMorse commented on Nov 14, 2019 â€¢
edited
Description
If the underlying fit() function constantly throws an error, GridSeachCV will raise a FitFailedWarning which does not show a stack trace and thus has destroyed any hope of getting details of the error. Using code patterns such as with warnings.catch_warnings does not help as the error is already caught and the warning does not provide the stacktrace.
It will only print the same information already printed but does allow for early termination - at least this is possible.
Yet we see in line 715 of _search.py: self.best_estimator_.fit(X, y, **fit_params) has no error handler around it.
So it calls fit on the best estimator without error handling and finally the exception after all the CV for k=whatever value fits have failed. This is inconsistent behavior. However, best_estimator_.fit() could be better off without exception handling presumably, though since its a termination case anyway perhaps its better not having it.
Yet the resilience without information is annoying here for anyone debugging algorithms. After doing lengthy operations, one may very well want to turn that warning into an exception with a stacktrace and stop prematurely and go fix the bug, not continue on several times before the best_estimator_ fit finally yields the error.
The only workaround now is to put try/except into the actual fit function itself and print out a message in there. Propose to add stacktrace to the FitFailedWarning. At least early termination is possible, but its not enough.
Also instead of resilience, error_score='raise' would allow the original error to be preserved. But we cannot use error_score as a numeric value, so it continues running and gives useful error info.
Steps/Code to Reproduce
from sklearn.model_selection import GridSearchCV
class MyClassifier:
    def __init__(self, fake=1): pass
    def fit(self, X, y): return 3 / 0
    def score(self, X, y): return 0
    def get_params(self, deep=True): return {'fake':1}
    def set_params(self, **params): return self
mdl = MyClassifier()
params = [{'fake': [1]}]
clf = GridSearchCV(mdl, params, cv=2, iid=True, error_score=np.nan, verbose=100)
bestmdl = clf.fit([[True, True], [False, False]], [True, False])
with warnings.catch_warnings():
    warnings.simplefilter('error') #'error'
    try:
        bestmdl = clf.fit([[True, True], [False, False]], [True, False])
    except Exception as e:
        print(e)
Expected Results
The stack trace of any underlying errors is printed.
Actual Results
No stack trace is printed until best_estimator_.fit(), only useless warning messages that indicate an error occurred and also the specific Python error message but no indication of exactly where the error occurred from a stacktrace.
Fitting 2 folds for each of 1 candidates, totalling 2 fits
[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
[CV] fake=1 ..........................................................
[CV] ................................ fake=1, score=nan, total=   0.0s
[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.0s remaining:    0.0s
[CV] fake=1 ..........................................................
[CV] ................................ fake=1, score=nan, total=   0.0s
[Parallel(n_jobs=1)]: Done   2 out of   2 | elapsed:    0.0s remaining:    0.0s
[Parallel(n_jobs=1)]: Done   2 out of   2 | elapsed:    0.0s finished
C:\ProgramData\Anaconda3\lib\site-packages\sklearn\model_selection\_validation.py:547: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: 
ZeroDivisionError: division by zero

  FitFailedWarning)
Traceback (most recent call last):

  File "<ipython-input-295-a07cf0123f96>", line 1, in <module>
    bestmdl = clf.fit([[True, True], [False, False]], [True, False])

  File "C:\ProgramData\Anaconda3\lib\site-packages\sklearn\model_selection\_search.py", line 715, in fit
    self.best_estimator_.fit(X, y, **fit_params)

  File "<ipython-input-290-0021295a1749>", line 3, in fit
    def fit(self, X, y): return 3 / 0

ZeroDivisionError: division by zero
With the warnings.catch_warnings():
Fitting 2 folds for each of 1 candidates, totalling 2 fits
[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
[CV] fake=1 ..........................................................
Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: 
ZeroDivisionError: division by zero
Versions
System:
    python: 3.7.4 (default, Aug  9 2019, 18:34:13) [MSC v.1915 64 bit (AMD64)]
executable: C:\ProgramData\Anaconda3\pythonw.exe
   machine: Windows-10-10.0.18362-SP0

Python deps:
       pip: 19.2.3
setuptools: 41.4.0
   sklearn: 0.21.3
     numpy: 1.17.3
     scipy: 1.3.1
    Cython: 0.29.13
    pandas: 0.25.3