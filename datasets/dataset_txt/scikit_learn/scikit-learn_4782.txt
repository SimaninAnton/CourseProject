dashesy commented on Jun 29, 2013
The idea of organizing everything as a pipeline is great, to the point that it makes it ideal but I have had two problems when using it in some real applications:
1- The first issue I have is that some times I have features that cannot be fitted with a single pipeline but I need to combine their features in a FeatureUnion and use the union.
This is not an issue if I would manually fit them and add their features and pass to another pipeline, but one cannot merge two pipelines into another pipeline.
For example I may have two different samples from the same process and I need to classify. Can think of it as time and frequency domain samples. The end result is that I have X1,y1 and X2,y2 each with different number of samples as well as variables/features, but since they both describe the same process.
Assuming that I could call something like fit(X1,y1,joint_group=0) then call fit(X2,y2,joint_group=1) and have all the objects in the pipeline to only act to the joint_group they are assigned to when created, then I could do a single transform() or predict() and have a joint classification.
For now I have a simple hack here:
https://gist.github.com/dashesy/5888095
I basically tell it to cache the result of a transform with correct joint_group and return it when transform with unmatching joint group is called. This way I call .transform on the JointClassifier instance once before calling predict on the entire pipeline, and during training I call fit_transform on it before on the pipeline.
2- The second issue is that some times it is very useful to be able to tap into the pipeline, i.e. get access to a method defined in a classifier directly, and I do not want to resort to .named_steps chains to get the right object, because then I cannot easily change the pipeline without breaking other part of the code while trying different combinations.
That would be ideal if one could specify a method to be inherited by pipeline from an object, and calling the method on pipeline would internally call the same on that particular classifier. For example, I could do set get_covars function in GMM be inheritable and pipeline would then inherit it and I could call pipeline.get_covars().
Do you thinks these features are as useful as I think they are? is there any other way of achieving that, and if not do you think a contribution will be helpful.