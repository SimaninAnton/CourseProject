cibic89 commented on Feb 14, 2018 •
edited by rth
Description
Unsupervised nearest neighbours parallelisation issue. The ball_tree algorithm gets slower when more than 2 threads are used. This happens in two machines with the same versions of software used and operating system.
Steps/Code to Reproduce
import pandas as pd
import pandas as pd
import numpy as np
from sklearn.neighbors import NearestNeighbors
import multiprocessing

df = pd.DataFrame(np.random.randint(low=0, high=10, size=(10**3, 32)))

weights = [1] * df.shape[1]

def nearest_neighbours_search(df, threads):
    nbrs = NearestNeighbors(
        algorithm='ball_tree',
        metric='wminkowski', p=2, metric_params={'w': weights}, 
        n_jobs=threads).fit(df)
    distances, indices = nbrs.kneighbors(X=df, n_neighbors=10, return_distance=True)
    return distances, indices

for i in range(1,multiprocessing.cpu_count()+1):
    print('Thread(s) '+str(i), end=': ')
    %timeit distances, indices = nearest_neighbours_search(df, i)
Expected Results
The inverse of what currently happens. More threads for faster execution.
Actual results
Thread(s) 1: 1.82 s ± 17.1 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
Thread(s) 2: 1.69 s ± 49.4 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
Thread(s) 3: 3.06 s ± 67.1 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
Thread(s) 4: 4.35 s ± 84.1 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
Thread(s) 5: 5.24 s ± 94.6 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
Thread(s) 6: 6.01 s ± 81.8 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
Thread(s) 7: 7.12 s ± 178 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
Thread(s) 8: 7.66 s ± 124 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
Thread(s) 9: 7.68 s ± 147 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
Thread(s) 10: 7.8 s ± 162 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
Thread(s) 11: 7.92 s ± 149 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
Thread(s) 12: 7.93 s ± 48.3 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
Thread(s) 13: 8.02 s ± 37.1 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
Thread(s) 14: 7.97 s ± 47.8 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
Thread(s) 15: 8.01 s ± 80 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
Thread(s) 16: 8.14 s ± 144 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
Versions
Windows-10-10.0.14393-SP0
Python 3.6.4 |Anaconda custom (64-bit)| (default, Jan 16 2018, 10:22:32) [MSC v.1900 64 bit (AMD64)]
NumPy 1.14.0
SciPy 1.0.0
Scikit-Learn 0.19.1