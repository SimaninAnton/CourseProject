naught101 commented on May 5, 2015
It would be really convenient to have wrapper classes for all of the data pre-processing methods in sklearn, including the preprocessing modules, scalers, and dimensionality reduction methods.
In practice, these methods are often required multiple times (scale training data, fit model, scale validation data, validate model, scale test data, test model), and take up quite a bit of code. However, it is possible to consider them actually part of the model (basically a model is just an algorithm that transforms one type of data into another, so pre-processing is essentially just extending a model).
For example, if I wanted a polynomial regression with normalised features, I have to do something like this:
model = sklearn.linear_models.LinearRegression()
scaler = sklearn.preprocessing.StandardScaler()
polytrans = sklearn.preprocessing.PolynomialFeatures(2)

X_train = polytrans.fit_transform(scaler.fit_transform(X_train))
model.fit(X_train, y)
X_test = polytrans.transform(scaler.transform(X_test))
y_pred = model.predict(X_test)
This is ok, but it starts to become onerous if I have to do model calibration, or if I want to be able to pass the model around (e.g. to scientific test suites).
If we had wrapper classes, we could do:
model = sklearn.linear_models.LinearRegression()
model = sklearn.preprocessing.StandardScalerWrapper(model)
model = sklearn.preprocessing.PolynomialFeaturesWrapper(model, 2)

model.fit(X_train, y)
y_pred = model.predict(X_test)
where .fit() and .predict() automatically handle the .fit_transform() and .transform() methods of the scaler/polyfeatures transforms.
This would be very useful in many situations. For instance, I'm currently trying a performance comparison of a number of models, and trying different variations on them (with or without scaling, different feature transformations, PCA decomposition, etc.). At the moment, I either have to pass in the scalers or some argument to my test suite. If there were wrappers, I could simply construct the model with the transformations included, and just pass in the whole class, with no other requirements.