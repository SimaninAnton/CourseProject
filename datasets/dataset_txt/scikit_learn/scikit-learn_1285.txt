falcorocks commented on Jun 28, 2018 â€¢
edited
Description
TSNE throws ValueError: All distances should be positive, the precomputed distances given as X is not correct
Steps/Code to Reproduce
Example:
from sklearn.manifold import TSNE

dm = ... import my distance matrix, numpy np.float16 7200x7200 with values all between 0 and 1

projection = TSNE(metric='precomputed').fit_transform(dm)
plt.scatter(*projection.T, **plot_kwds)
Expected Results
scatterplot plot
Actual Results
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-6-cbf09f8809d2> in <module>()
----> 1 projection = TSNE(metric='precomputed').fit_transform(dm)

~/miniconda3/envs/overlord/lib/python3.6/site-packages/sklearn/manifold/t_sne.py in fit_transform(self, X, y)
    856             Embedding of the training data in low-dimensional space.
    857         """
--> 858         embedding = self._fit(X)
    859         self.embedding_ = embedding
    860         return self.embedding_

~/miniconda3/envs/overlord/lib/python3.6/site-packages/sklearn/manifold/t_sne.py in _fit(self, X, skip_num_points)
    646                 raise ValueError("X should be a square distance matrix")
    647             if np.any(X < 0):
--> 648                 raise ValueError("All distances should be positive, the "
    649                                  "precomputed distances given as X is not "
    650                                  "correct")

ValueError: All distances should be positive, the precomputed distances given as X is not correct
Versions
Please run the following snippet and paste the output below.
import platform; print(platform.platform())
import sys; print("Python", sys.version)
import numpy; print("NumPy", numpy.version)
import scipy; print("SciPy", scipy.version)
import sklearn; print("Scikit-Learn", sklearn.version)
Darwin-17.6.0-x86_64-i386-64bit
Python 3.6.5 |Anaconda, Inc.| (default, Mar 29 2018, 13:14:23)
[GCC 4.2.1 Compatible Clang 4.0.1 (tags/RELEASE_401/final)]
NumPy 1.14.2
SciPy 1.0.1
Scikit-Learn 0.19.1
Additional info
I am 100% that there are no negative values in the distance matrix.
I double checked by converting the numpy matrix dm into a dataframe and then used min(dm).
The distance matrix is produced by using the cosine similarity at a previous step (then inverted into distance by 1-similarity).
I tried to use MDS and it works like a charm. Reason why I want to use tSNE is that it seems to be way faster...
Ideas?
I also tried the following
df = pd.DataFrame(data=dm[:,:], copy=True)
clean_dm = pairwise_distances(df, metric='precomputed', dtype=np.float16)

projection = TSNE(metric='precomputed').fit_transform(df)
projection = TSNE(metric='precomputed').fit_transform(clean_dm)
but I always get the same error