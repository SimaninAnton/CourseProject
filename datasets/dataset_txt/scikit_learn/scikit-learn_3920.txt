Contributor
xuewei4d commented on Apr 4, 2015
I don't know if this is an issue or not.
import scipy as sp
import numpy as np
from sklearn.utils.validation import check_X_y


x = sp.sparse.csr_matrix(np.random.rand(10, 2).round())
y0 = np.random.rand(10).round()
check_X_y(x, y0, 'csr') #OK

y = sp.sparse.csr_matrix(y0)
check_X_y(x, y, 'csr') #Error

y = sp.sparse.csr_matrix(np.random.rand(10, 1).round())
check_X_y(x, y, 'csr') # Error
check_X_y(x, y, 'csr', multi_output=True) #OK
When creating a sparse matrix, sp.sparse always generates a 2D matrix, even though the input matrix is 1D, like y and y0.
In this example, we cannot use (1, n) sparse matrix for y, since it is not a column or 1D, and raises bad input shape (1, 10) exception.
we cannot use use (n, 1) either, since y is then transformed into (1, n), then it raises a inconsistent numbers of samples exception.
The way to walk around to pass a sparse y is to make y a (n, 1) sparse matrix and with multi_output =True. That's a little strange.