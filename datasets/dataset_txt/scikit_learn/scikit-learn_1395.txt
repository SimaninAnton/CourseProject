klaas-koster commented on May 3, 2018 â€¢
edited by rth
Description
sklearn.gaussian_process.GaussianProcessRegressor.predict appears to return the square root of the standard deviation when return_std is set to True
Steps/Code to Reproduce
import numpy as np
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.gaussian_process.kernels import RBF, ConstantKernel as C
import sklearn.model_selection as crossval

Xobs = np.array([3.,42.,87.,42.,30.,22.,78.,57.])
Yobs = np.array([3.,29.,65.,56.,98.,11.,29.,43.])
XYobs = np.transpose(np.vstack([Xobs, Yobs]))
Zobs = np.array([12000.,13500.,14576.,3685.,8867.,736.,9787.,8478.])

XY_train, XY_test, z_train, z_test = crossval.train_test_split(XYobs, Zobs)

sigma_train = np.std(z_train)
kernel1 = C(sigma_train) * RBF(length_scale=10)
gp1 = GaussianProcessRegressor(kernel=kernel1, optimizer=None)

gp1.fit(XY_train,z_train)

z_pred1, sigma_test = gp1.predict(XY_test, return_std=True)
print((z_test,z_pred1, sigma_train, sigma_test)) 
Expected Results
The actual standard deviation from the observations is around 5000, depending on the particular 6 points selected for training. The standard deviation returned by gp1.predict() is almost exactly the square root of this number.
Actual Results
The standard deviation returned by gp1.predict() is almost exactly the square root of the standard deviation of the training data.
Versions
Windows-10-10.0.10586-SP0
Python 3.5.2 |Anaconda 4.1.1 (64-bit)| (default, Jul 5 2016, 11:41:13) [MSC v.1900 64 bit (AMD64)]
NumPy 1.13.1
SciPy 0.19.1
Scikit-Learn 0.19.0