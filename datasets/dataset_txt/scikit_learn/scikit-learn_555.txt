NagabhushanS commented on Apr 29, 2019 â€¢
edited
The docs list the following code as an example of how to use pipeline memory to cache the pipeline results (https://scikit-learn.org/stable/auto_examples/compose/plot_compare_reduction.html):
from tempfile import mkdtemp
from shutil import rmtree
from joblib import Memory

# Create a temporary folder to store the transformers of the pipeline
cachedir = mkdtemp()
memory = Memory(cachedir=cachedir, verbose=10)
cached_pipe = Pipeline([('reduce_dim', PCA()),
                        ('classify', LinearSVC())],
                       memory=memory)
param_grid = [
    {
        'reduce_dim': [PCA(iterated_power=7), NMF()],
        'reduce_dim__n_components': N_FEATURES_OPTIONS,
        'classify__C': C_OPTIONS
    },
    {
        'reduce_dim': [SelectKBest(chi2)],
        'reduce_dim__k': N_FEATURES_OPTIONS,
        'classify__C': C_OPTIONS
    },
]
# This time, a cached pipeline will be used within the grid search
grid = GridSearchCV(cached_pipe, cv=5, n_jobs=1, param_grid=param_grid)
digits = load_digits()
grid.fit(digits.data, digits.target)

# Delete the temporary cache before exiting
rmtree(cachedir)
I wanted to know how does the pipeline memory argument work to cache the results. I have two doubts regarding this:
Is it that every time a fit method is called on the pipeline, it looks up the parameters of the pipeline (individual parameters of steps) to check if that parameter combination has been encountered before. If yes, then the cached result is used.
Once, parameter combination is checked, the other thing to check is whether the data (X) which is passed to the fit method changed. For this, does it do element by element comparison or is there any efficient way it does to check if a new data (X) previously not encountered was passed?
Overall, in principle, it should check for two changes, namely, if the parameters of the pipeline changed and if the data (X) changed? Is my understanding of pipeline caching correct?