mfenner1 commented on Aug 14, 2018
scikit-learn/sklearn/neighbors/lof.py
Line 491 in c564df9
 dist_k = self._distances_fit_X_[neighbors_indices, 
Based on pg. 5 of http://www.dbs.ifi.lmu.de/Publikationen/Papers/LOF.pdf and pg. 132 of Outlier Analysis (2nd) by Aggarwal, I believe that L491 in LOF.py (the dist_k assignment) should find a single distance to the k-th neighbor for each example. The current L491 uses each of the 1, 2, 3, ... k distances to the 1, 2, 3, ... k neighbors for each different maximum calculation in L493. My reading is that these should be all compared against the k-th neighbor's distance. [The intuition is that every example inside the k-neighbor ball takes the same distance value equal to the k-neighbor ball; every example outside the ball has its standard euclidean distance.] In code, I'm proposing that L491 should mimic this (I've simplified variable names):
dist_k = dists[:, n_neighbors-1]
the the maximums in L493 should be taken against that single distance for each example:
reach_dist = np.maximum(dists, dist_k[:,np.newaxis])
Unfortunately, I can't (yet) find a canonical worked example that I have a high degree of confidence in to serve as a test case (both for a MWE and to show whether the current code fails and whether my "fix" addresses the issue). Without such an example, we have a moving target, so this issue should probably be shelved. But, I wanted to report it.