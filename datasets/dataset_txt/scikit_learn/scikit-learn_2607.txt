Contributor
jstriebel commented on Nov 3, 2016
When using SVMs (or other kernel-based estimators) in a multivariate context with MultiOutputRegressor/-Classifier it is faster to precompute the kernel matrix once and distribute it to all estimators with more columns of multivariate output. This is because the kernel computation is happening inside SVM/SVR/..., and is repeated for every output-column, which is expensive (at least when not parallelized).
Current:
for y_column in y:
  kernel_matrix = kernel(X)
  train/predict(kernel_matrix, [Y])
Proposal:
kernel_matrix = kernel(X)
for y_column in y:
  train/predict(kernel_matrix, [Y])
Implementation thoughts:
There are many options to achieve this, I think the most elegant way would be to have a kernel class (see #7816) and pipeline this into a SVM. If a SVM is then used in a multivariate context with many output columns and not using a precomputed kernel matrix, a warning might be shown, suggesting the pipelined kernel class.
If needed I can provide a script showing the speedup achieved.
Thanks for considering this.