craig0a commented on Feb 8, 2019 â€¢
edited
Loading a RandomForestClassifier model using my personal environment (Python 2.7.15 ):
>>> import numpy as np
>>> print(np.version.version)
1.16.1
>>> import sklearn
>>> print(sklearn.__version__)
0.20.1
>>> import pickle
>>> model = pickle.load(open('model.pkl', 'rb'))
/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sklearn/base.py:251: UserWarning: Trying to unpickle estimator DecisionTreeClassifier from version 0.20.2 when using version 0.20.1. This might lead to breaking code or invalid results. Use at your own risk.
  UserWarning)
/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sklearn/base.py:251: UserWarning: Trying to unpickle estimator RandomForestClassifier from version 0.20.2 when using version 0.20.1. This might lead to breaking code or invalid results. Use at your own risk.
  UserWarning)
>>> model.predict_proba(np.ones((1,36)))[0][1]
0.9
Attempting to use with a repository environment (also Python 2.7) that the model needs to integrate with:
(Pdb) np.version.version
'1.11.2'
(Pdb) import sklearn
(Pdb) sklearn.__version__
'0.18'
(Pdb) model = pickle.load(open('model.pkl', 'rb'))
(Pdb) model.predict_proba(np.ones((1,36)))[0][1]
*** TypeError: unsupported operand type(s) for +: 'int' and 'NoneType'
From what I could learn online, 'NoneType' is returned if there was an if statement/set of conditions, all of which failed and without an exception 'else' value being returned. Possibly a feature is taking on a value which the model has not been trained on?
Is there some way to build the model so that these cases are handled?
Or even better, is there some "future" package I can import to the environment to handle these cases in the same way as the newer numpy/sklearn packages?
Thank you!