Contributor
choldgraf commented on Aug 14, 2014
I was wondering if anyone would find use in some kind of Blocked ShuffleSplit functionality in sklearn. To my knowledge, one is only able to shuffle, then split a set of indices. However, there are many times that I want contiguous data points to remain close to one another (e.g., if I'm modeling a time-series). To that extent, I usually want to do something like shuffling in blocks, such that timepoints that are right next to each other don't end up in the train and test sets.
I wrote a quick and dirty script to do shufflesplit in blocks, and I wonder if others would find this useful. Basically I'm imagining two options:
BlockShuffleSplit(n, n_in_block=10, block_indices=None)
n_in_block : this would specify the size of blocks. The input indices would then be grouped into blocks of this size, then the block labels would be shuffled.
block_indices: this would be an array of size n that would let the user specify a custom set of block indices. E.g., if I've got a 100-length set of indices that contains 10 trials of variable length. I could give the exact trial indices with this parameter, and block shuffling would always keep trials together.
Granted, some splitting would still occur wherever the train/test split happened (e.g., if it happened in the middle of a block), but it's still better than just shuffling everything together. I imagine there'd be some other challenges as well, but I wanted to throw this idea out there in case anyone thinks it'd be useful.
e.g.:
and setting n_in_block to 1 would yield the same as ShuffleSplit