ghost commented on Jan 31, 2014
I get the following error when using sklearn.hmm.GaussianHMM.fit() using sklearn.version '0.14.1' under Windows 7 with Python 2.7.5.
  File "bugreport.py", line 15, in <module>
    gmm.fit([arr])
  File "D:\Python\Python27\lib\site-packages\sklearn\hmm.py", line 427, in fit
    framelogprob = self._compute_log_likelihood(seq)
  File "D:\Python\Python27\lib\site-packages\sklearn\hmm.py", line 737, in _compute_log_likelihood
    obs, self._means_, self._covars_, self._covariance_type)
  File "D:\Python\Python27\lib\site-packages\sklearn\mixture\gmm.py", line 58, in log_multivariate_normal_density
    X, means, covars)
  File "D:\Python\Python27\lib\site-packages\sklearn\mixture\gmm.py", line 610, in _log_multivariate_normal_density_full
    lower=True)
  File "D:\Python\Python27\lib\site-packages\scipy\linalg\decomp_cholesky.py", line 81, in cholesky
    check_finite=check_finite)
  File "D:\Python\Python27\lib\site-packages\scipy\linalg\decomp_cholesky.py", line 30, in _cholesky
    raise LinAlgError("%d-th leading minor not positive definite" % info)
numpy.linalg.linalg.LinAlgError: 1-th leading minor not positive definite

Minimal example that reproduces the bug (only with type=np.float32, float64 works - although other data shows the same problem when using float64):
import numpy as np
from sklearn import hmm

arr = np.asarray([[7.15000000e+02, 5.85000000e+02, 0.00000000e+00, 0.00000000e+00],
                  [7.15000000e+02, 5.20000000e+02, 1.04705811e+00, -6.03696289e+01],
                  [7.15000000e+02, 4.55000000e+02, 7.20886230e-01, -5.27055664e+01],
                  [7.15000000e+02, 3.90000000e+02, -4.57946777e-01, -7.80605469e+01],
                  [7.15000000e+02, 3.25000000e+02, -6.43127441e+00, -5.59954834e+01],
                  [7.15000000e+02, 2.60000000e+02, -2.90063477e+00, -7.80220947e+01],
                  [7.15000000e+02, 1.95000000e+02, 8.45532227e+00, -7.03294373e+01],
                  [7.15000000e+02, 1.30000000e+02, 4.09387207e+00, -5.83621216e+01],
                  [7.15000000e+02, 6.50000000e+01, -1.21667480e+00, -4.48131409e+01]], dtype=np.float32)

gmm = hmm.GaussianHMM(3, covariance_type='full')
gmm.fit([arr])