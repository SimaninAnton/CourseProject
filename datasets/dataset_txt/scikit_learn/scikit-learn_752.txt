tomaso909 commented on Feb 8, 2019
Description
I am running the exact same script on my local computer and on AWS Lambda and I get different results when using the MLPRegressor. Both machines have the same scipy, numpy and scikit-learn versions installed.
Steps/Code to Reproduce
I use a 6000 samples 4 features dataset but I have test it and the problem occurs with any dataset.
This is the code I use to build the MLPRegressor (just a very simple generic code).
net = MLPRegressor(solver='lbfgs', random_state=1)
stats = net.fit(indep, dep) # indep is the input data array (4x6000) and dep is the target values array (1x6000)
print 'INFO [ResponseSurface|_neuralNetwork]: MLP fit R^2 =', net.score(indep, dep)
This bug is a bit complex to replicate. If no one can think of a reason for this behavior straight away, then I can prepare a nice self contained case that runs on a docker container with the python2.7 AWS Lambda environment from https://github.com/lambci/docker-lambda
Expected Results
I expect the exact same output on both RS.
Actual Results
The outputs of each RS are different by tiny to large amounts, depending on the input e.g. 20 vs 100.
The output of net.score() is also different (as expected), e.g. for my particular dataset I get 0.9277594232479545 vs 0.9283560222462522.
Versions
Local
I installed the packages with conda (I tried both, anaconda and conda-forge channels).
Linux-4.10.0-38-generic-x86_64-with-debian-stretch-sid
('Python', '2.7.15 |Anaconda, Inc.| (default, Dec 14 2018, 19:04:19) \n[GCC 7.3.0]')
('NumPy', '1.15.1')
('SciPy', '1.2.0')
('Scikit-Learn', '0.19.2')
AWS Lambda
Creating the environment to run on Lambda with scipy/numpy/scikit is not straightforward since the C libraries required are platform dependent (so my local environment cannot be used directly). To go around this, I am using the pre-compiled libraries that target the lambda machine available in the lib folder of this repo: https://github.com/ryfeus/lambda-packs/tree/master/Sklearn_scipy_numpy/source.
The numpy/scipy/scikit packages provided in the repo are bit old (scikit-learn is version 0.17.1) so I downloaded the wheel files of newer versions that matched my local version from pypi and replaced them. I kept using the same C libraries (inside lib) since they still worked and no additional ones were required with the newer versions.
Linux-4.14.94-73.73.amzn1.x86_64-x86_64-with-glibc2.2.5
('Python', '2.7.12 (default, Sep 1 2016, 22:14:00) \n[GCC 4.8.3 20140911 (Red Hat 4.8.3-9)]')
('NumPy', '1.15.1')
('SciPy', '1.2.0') 
('Scikit-Learn', '0.19.2') 