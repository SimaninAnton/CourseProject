hadi-ds commented on May 28, 2016
I have a set of ~100k vectors (150 dimensional ones) for which I use 'NearestNeighbors' to find 10 closest vectors. I have my own metric and it is the inner (dot) product of vectors. Since number of vectors is large, brute algorithm runs out of memory and I use 'auto' instead (I think it chooses 'ball_tree' since KDtree dones't work by user defined metric). I get different answers with "algorithm='brute' " vs "algorithm='auto' ". Here are the first two rows of indices and distances matrices:
                    algorithm='brute'
distances:
[[-1.56230061 -1.19612575 -1.02484842 -0.95022833 -0.82517523 -0.78000898
  -0.77781926 -0.68861523 -0.5977631  -0.59002943]
 [-0.43140428 -0.42181229 -0.34611535 -0.33257793 -0.31227246 -0.29733134
  -0.27967967 -0.27451782 -0.27185948 -0.24905191]
...
indices:
[[ 0 55 38  7 56 39 41 75  2 30]
 [98 97  1 51 74 68 39 72 43 41]
...

                    algorithm='auto'
distances:
[[-1.56230061 -1.19612575 -1.02484842 -0.95022833 -0.68861523 -0.59002943
  -0.5143133  -0.50014935 -0.48284216 -0.4753355 ]
 [-0.43140428 -0.42181229 -0.34611535 -0.31227246 -0.27451782 -0.27185948
  -0.2332568  -0.23157354 -0.22871215 -0.20126763]
...
indices:
[[ 0 55 38  7 75 30  5  8 94 97]
 [98 97  1 74 72 43 71 49 23 60]
...
As you can see by comparing first rows, e.g, the 'auto' case fails to find the fifth closest point (index 56) which is at distance -0.825, and instead finds a more distant one (75) at -0.688. And this happens elsewhere.
The code is simple:
neighbors = NearestNeighbors(n_neighbors=n_recs, metric=my_dot_product, algorithm=str(algr)).fit(prod_vecs)
dist, neighbors_indices = neighbors.kneighbors(prod_vecs)
I tried it without setting metric, and two choices of algorithms agreed.
My system details are:
In [1]: import platform; print(platform.platform())
Linux-3.10.0-327.13.1.el7.x86_64-x86_64-with-centos-7.2.1511-Core

In [2]: import sys; print("Python", sys.version)
('Python', '2.7.11 |Anaconda 2.5.0 (64-bit)| (default, Dec  6 2015, 18:08:32) \n[GCC 4.4.7 20120313 (Red Hat 4.4.7-1)]')

In [3]: import numpy; print("NumPy", numpy.__version__)
('NumPy', '1.10.4')

In [4]: import scipy; print("SciPy", scipy.__version__)
('SciPy', '0.17.0')

In [5]: import sklearn; print("Scikit-Learn", sklearn.__version__)
('Scikit-Learn', '0.17.1')
I appreciate any feedback.
Hadi