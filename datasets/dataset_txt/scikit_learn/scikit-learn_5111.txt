Contributor
erg commented on Nov 22, 2012
It fails like this reliably. Perhaps we should add the examples to the tester and just make sure they finish without an error?
erg$ [master*] python document_classification_20newsgroups.py 

======================================================
Classification of text documents using sparse features
======================================================

This is an example showing how scikit-learn can be used to classify documents
by topics using a bag-of-words approach. This example uses a scipy.sparse
matrix to store the features and demonstrates various classifiers that can
efficiently handle sparse matrices.

The dataset used in this example is the 20 newsgroups dataset. It will be
automatically downloaded, then cached.

The bar plot indicates the accuracy, training time (normalized) and test time
(normalized) of each classifier.


Usage: document_classification_20newsgroups.py [options]

Options:
  -h, --help            show this help message and exit
  --report              Print a detailed classification report.
  --chi2_select=SELECT_CHI2
                        Select some number of features using a chi-squared
                        test
  --confusion_matrix    Print the confusion matrix.
  --top10               Print ten most discriminative terms per class for
                        every classifier.
  --all_categories      Whether to use all categories or not.

Loading 20 newsgroups dataset for categories:
['alt.atheism', 'talk.religion.misc', 'comp.graphics', 'sci.space']
data loaded
2034 documents (training set)
1353 documents (testing set)
4 categories

Extracting features from the training dataset using a sparse vectorizer
done in 1.253941s
n_samples: 2034, n_features: 17260

Extracting features from the test dataset using the same vectorizer
done in 0.555205s
n_samples: 1353, n_features: 17260

================================================================================
Ridge Classifier
________________________________________________________________________________
Training: 
RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
        max_iter=None, normalize=False, solver=lsqr, tol=0.01)
train time: 0.366s
test time:  0.002s
f1-score:   0.901
dimensionality: 17260
density: 1.000000


================================================================================
Perceptron
________________________________________________________________________________
Training: 
Perceptron(alpha=0.0001, class_weight=None, eta0=1.0, fit_intercept=True,
      n_iter=50, n_jobs=1, penalty=None, random_state=0, shuffle=False,
      verbose=0, warm_start=False)
train time: 0.076s
test time:  0.001s
f1-score:   0.873
dimensionality: 17260
density: 0.373856


================================================================================
Passive-Aggressive
________________________________________________________________________________
Training: 
PassiveAggressiveClassifier(C=1.0, fit_intercept=True, loss=hinge, n_iter=50,
              n_jobs=1, random_state=None, shuffle=False, verbose=0,
              warm_start=False)
Traceback (most recent call last):
  File "document_classification_20newsgroups.py", line 201, in <module>
    results.append(benchmark(clf))
  File "document_classification_20newsgroups.py", line 156, in benchmark
    clf.fit(X_train, y_train)
  File "/usr/local/lib/python2.7/site-packages/sklearn/linear_model/passive_aggressive.py", line 146, in fit
    coef_init=coef_init, intercept_init=intercept_init)
  File "/usr/local/lib/python2.7/site-packages/sklearn/linear_model/stochastic_gradient.py", line 429, in _fit
    classes, sample_weight, coef_init, intercept_init)
  File "/usr/local/lib/python2.7/site-packages/sklearn/linear_model/stochastic_gradient.py", line 385, in _partial_fit
    sample_weight=sample_weight, n_iter=n_iter)
  File "/usr/local/lib/python2.7/site-packages/sklearn/linear_model/stochastic_gradient.py", line 462, in _fit_multiclass
    for i in xrange(len(self.classes_)))
  File "/usr/local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py", line 514, in __call__
    self.dispatch(function, args, kwargs)
  File "/usr/local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py", line 311, in dispatch
    job = ImmediateApply(func, args, kwargs)
  File "/usr/local/lib/python2.7/site-packages/sklearn/externals/joblib/parallel.py", line 135, in __init__
    self.results = func(*args, **kwargs)
  File "/usr/local/lib/python2.7/site-packages/sklearn/linear_model/stochastic_gradient.py", line 281, in fit_binary
    est.power_t, est.t_, intercept_decay)
  File "sgd_fast.pyx", line 512, in sklearn.linear_model.sgd_fast.plain_sgd (sklearn/linear_model/sgd_fast.c:7995)
ValueError: floating-point under-/overflow occured.