Contributor
joonazzz commented on Apr 11, 2012
When too small radius is used so that there are no neighbours for a test sample, code crashes without good explanation. I looked at source code and realized that reason was using too small radius. Here is a simple example:
from sklearn import neighbors

X = [[1.0, 1.0], [2.0, 2.0]]
y = [1,2]

r = 0.1         # no neighbours found => crash
#r = 1.0        

clf = neighbors.RadiusNeighborsClassifier(radius=r)
clf.fit(X,y)

z = [[1.4, 1.4]]
print clf.predict(z)
The error message is not very good.
Traceback (most recent call last):
File "radius_bug.py", line 18, in <module>
    print clf.predict(z)
File "/usr/local/lib/python2.7/dist-packages/sklearn/neighbors/classification.py", line 235, in predict
    mode = np.asarray([stats.mode(pl)[0] for pl in pred_labels],
File "/usr/lib/python2.7/dist-packages/scipy/stats/stats.py", line 614, in mode
    return mostfrequent, oldcounts
UnboundLocalError: local variable 'mostfrequent' referenced before assignment
For example, it would be better if at the sklearn/neighbours/classification.py --> RadiusNeighborsClassifier.predict() had a check like this:
if len(pred_labels) < 1: # This means that no neighbours is found
    raise SomeError("No neighbours found for a test sample, try using larger radius or eliminate outliers")