iarroyof commented on Dec 25, 2017
Description
I've trained an svm.SVC classifier implemented in Scikit learn library. The data are text documents from 4 categories of the 20 news groups dataset. I've added a code sample:
Steps/Code to Reproduce
from sklearn.datasets import fetch_20newsgroups
from sklearn.svm import SVC 
from sklearn.metrics import classification_report
from tempfile import mkdtemp
from sklearn.feature_extraction.text import TfidfVectorizer
from time import time
import numpy as np
    
from pdb import set_trace as st
    
categories = [
            'alt.atheism',
            'talk.religion.misc',
            'comp.graphics',
            'sci.space'
        ]
remove = ('headers', 'footers', 'quotes')
    
data_train = fetch_20newsgroups(subset='train', categories=categories,
                                    shuffle=True, random_state=42,
                                    remove=remove)
    
data_test = fetch_20newsgroups(subset='test', categories=categories,
                                   shuffle=True, random_state=42,
                                   remove=remove)
# split a training set and a test set
y_train, y_test = data_train.target, data_test.target
    
vectorizer = TfidfVectorizer(sublinear_tf=True, max_df=0.5,
                                     stop_words='english')
    
X_train = vectorizer.fit_transform(data_train.data)
X_test = vectorizer.transform(data_test.data)
    
clf=SVC(C=10.0, class_weight="balanced", verbose=5, kernel="linear", 
                   decision_function_shape="ovr")
    
# Train the estimator
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)
print(classification_report(y_test, y_pred))
Expected Results
According to my understanding of the model, in an one-versus-rest setting, a weight vector for each class must be learned in the primal problem. Each component of such vector weighs the importance of each feature, so the matrix of weights for all classes, and therefore for all classifiers of a multiclass problem, is expected to have dimensions [n_classes, n_features].
Actual Results
The documentation in the scikit learn's page[1] says that the svm.SVC.coef_ attribute has dimension [n_class-1, n_features] (n_class =4 and n_features=26577 for the above example), which is not my case when debugging the learned model:
(Pdb) clf.coef_.shape
(6, 26577)
(Pdb) len(categories)
4
(Pdb) clf.decision_function_shape
'ovr'
Versions
import platform; print(platform.platform())
Linux-3.13.0-107-generic-x86_64-with-Ubuntu-14.04-trusty
import sys; print("Python", sys.version)
Python 3.4.3 (default, Nov 17 2016, 01:08:31)
[GCC 4.8.4]
import numpy; print("NumPy", numpy.version)
NumPy 1.13.1
import scipy; print("SciPy", scipy.version)
SciPy 0.19.1
import sklearn; print("Scikit-Learn", sklearn.version)
Scikit-Learn 0.19.0