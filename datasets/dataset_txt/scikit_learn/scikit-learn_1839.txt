fedorzh commented on Oct 11, 2017
Description
Error given
Steps/Code to Reproduce
import numpy as np
import jsonpickle
from sklearn.linear_model import SGDClassifier
clf = SGDClassifier(loss='log', penalty='l2', alpha=1e-4, n_iter=100, random_state=42, n_jobs=-1)
np.random.seed(13)
x = np.random.rand(10,5)
y = np.random.randint(low=0, high=2, size=10)
clf.fit(x, y)
clf2 = jsonpickle.decode(jsonpickle.encode(clf))
Expected Results
get the same clf2 as clf
Actual Results
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "python2.7/site-packages/jsonpickle/__init__.py", line 149, in decode
    return unpickler.decode(string, backend=backend, keys=keys)
  File "python2.7/site-packages/jsonpickle/unpickler.py", line 26, in decode
    return context.restore(backend.decode(string), reset=reset)
  File "python2.7/site-packages/jsonpickle/unpickler.py", line 127, in restore
    value = self._restore(obj)
  File "python2.7/site-packages/jsonpickle/unpickler.py", line 169, in _restore
    return restore(obj)
  File "python2.7/site-packages/jsonpickle/unpickler.py", line 283, in _restore_object
    return self._restore_object_instance(obj, cls)
  File "python2.7/site-packages/jsonpickle/unpickler.py", line 348, in _restore_object_instance
    return self._restore_object_instance_variables(obj, instance)
  File "python2.7/site-packages/jsonpickle/unpickler.py", line 393, in _restore_object_instance_variables
    instance = self._restore_state(obj, instance)
  File "python2.7/site-packages/jsonpickle/unpickler.py", line 398, in _restore_state
    state = self._restore(obj[tags.STATE])
  File "python2.7/site-packages/jsonpickle/unpickler.py", line 169, in _restore
    return restore(obj)
  File "python2.7/site-packages/jsonpickle/unpickler.py", line 451, in _restore_dict
    data[k] = self._restore(v)
  File "python2.7/site-packages/jsonpickle/unpickler.py", line 169, in _restore
    return restore(obj)
  File "python2.7/site-packages/jsonpickle/unpickler.py", line 192, in _restore_reduce
    if f == tags.NEWOBJ or f.__name__ == '__newobj__':
AttributeError: 'dict' object has no attribute '__name__'
Versions
>>> import sys; print("Python", sys.version)
('Python', '2.7.8 (default, Aug  3 2017, 16:13:26) \n[GCC 5.4.0 20160609]')
>>> import numpy; print("NumPy", numpy.__version__)
('NumPy', '1.13.1')
>>> import scipy; print("SciPy", scipy.__version__)
('SciPy', '0.19.1')
>>> import sklearn; print("Scikit-Learn", sklearn.__version__)
('Scikit-Learn', '0.19.0')