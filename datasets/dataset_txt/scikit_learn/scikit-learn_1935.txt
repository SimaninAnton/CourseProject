Contributor
abjer commented on Aug 31, 2017 â€¢
edited
Description
RadiusNeighborRegression has inconsistent output depending whether using weights that are uniform or by distance.
When using uniform weights then if no observations are available within the specified radius of an observation point then no it returns np.nan,
When using distance weights it raises ZeroDivisionError: Weights sum to zero, can't be normalized is raised from np.average as there are no weights to use for the observation. This is demonstrated with the following example below - copied from RadiusNeighborsRegressor where distance is specified and for X used for prediction is different,
Steps/Code to Reproduce
from sklearn.neighbors import RadiusNeighborsRegressor   

X = [[0], [1], [2], [3]]
y = [[0], [0], [1], [1]]

neigh = RadiusNeighborsRegressor(radius=1.0, weights='distance')
neigh.fit(X, y) 

y_hat = neigh.predict([[-2],[0]])
Expected Results
array([[ nan],
       [  0.]])
Actual Results
---------------------------------------------------------------------------
ZeroDivisionError                         Traceback (most recent call last)
<ipython-input-6-c1cb420157ca> in <module>()
      7 neigh.fit(X, y)
      8 
----> 9 y_hat = neigh.predict([[-1.5],[1]])

~\AppData\Local\Continuum\Miniconda3\lib\site-packages\sklearn\neighbors\regression.py in predict(self, X)
    294             y_pred = np.array([(np.average(_y[ind, :], axis=0,
    295                                            weights=weights[i]))
--> 296                                for (i, ind) in enumerate(neigh_ind)])
    297 
    298         if self._y.ndim == 1:

~\AppData\Local\Continuum\Miniconda3\lib\site-packages\sklearn\neighbors\regression.py in <listcomp>(.0)
    294             y_pred = np.array([(np.average(_y[ind, :], axis=0,
    295                                            weights=weights[i]))
--> 296                                for (i, ind) in enumerate(neigh_ind)])
    297 
    298         if self._y.ndim == 1:

~\AppData\Local\Continuum\Miniconda3\lib\site-packages\numpy\lib\function_base.py in average(a, axis, weights, returned)
   1138         if np.any(scl == 0.0):
   1139             raise ZeroDivisionError(
-> 1140                 "Weights sum to zero, can't be normalized")
   1141 
   1142         avg = np.multiply(a, wgt, dtype=result_dtype).sum(axis)/scl

ZeroDivisionError: Weights sum to zero, can't be normalized
Versions
Windows-10-10.0.15063-SP0
Python 3.6.1 |Continuum Analytics, Inc.| (default, May 11 2017, 13:25:24) [MSC v.1900 64 bit (AMD64)]
NumPy 1.13.1
SciPy 0.19.1
Scikit-Learn 0.18.2
I encountered the same problem on Mac OS and Linux machines.