crazyseabiscuit commented on Jan 9, 2018 â€¢
edited by glemaitre
Hello Guys
I am trying to run the classification demo base on 20news group, I download the py file here (http://scikit-learn.org/stable/auto_examples/text/document_classification_20newsgroups.html#sphx-glr-auto-examples-text-document-classification-20newsgroups-py) and run the python code as usual but got below error which says there is a network connection timeout error, I am a little confused since I can download the data file from the provided URL(https://ndownloader.figshare.com/files/5975967), does anyone know how to resolve this issue? Is there anyway I can use the manuelly downloaded data file?
Environment:
Python 3.6
Ananconda 5.0.1
Error Detail
Automatically created module for IPython interactive environment
Usage: ipykernel_launcher.py [options]

Options:
  -h, --help            show this help message and exit
  --report              Print a detailed classification report.
  --chi2_select=SELECT_CHI2
                        Select some number of features using a chi-squared
                        test
  --confusion_matrix    Print the confusion matrix.
  --top10               Print ten most discriminative terms per class for
                        every classifier.
  --all_categories      Whether to use all categories or not.
  --use_hashing         Use a hashing vectorizer.
  --n_features=N_FEATURES
                        n_features when using the hashing vectorizer.
  --filtered            Remove newsgroup information that is easily overfit:
                        headers, signatures, and quoting.

Loading 20 newsgroups dataset for categories:
['alt.atheism', 'talk.religion.misc', 'comp.graphics', 'sci.space']




---------------------------------------------------------------------------
TimeoutError                              Traceback (most recent call last)
~\AppData\Local\Continuum\anaconda3\lib\urllib\request.py in do_open(self, http_class, req, **http_conn_args)
   1317                 h.request(req.get_method(), req.selector, req.data, headers,
-> 1318                           encode_chunked=req.has_header('Transfer-encoding'))
   1319             except OSError as err: # timeout error

~\AppData\Local\Continuum\anaconda3\lib\http\client.py in request(self, method, url, body, headers, encode_chunked)
   1238         """Send a complete request to the server."""
-> 1239         self._send_request(method, url, body, headers, encode_chunked)
   1240 

~\AppData\Local\Continuum\anaconda3\lib\http\client.py in _send_request(self, method, url, body, headers, encode_chunked)
   1284             body = _encode(body, 'body')
-> 1285         self.endheaders(body, encode_chunked=encode_chunked)
   1286 

~\AppData\Local\Continuum\anaconda3\lib\http\client.py in endheaders(self, message_body, encode_chunked)
   1233             raise CannotSendHeader()
-> 1234         self._send_output(message_body, encode_chunked=encode_chunked)
   1235 

~\AppData\Local\Continuum\anaconda3\lib\http\client.py in _send_output(self, message_body, encode_chunked)
   1025         del self._buffer[:]
-> 1026         self.send(msg)
   1027 

~\AppData\Local\Continuum\anaconda3\lib\http\client.py in send(self, data)
    963             if self.auto_open:
--> 964                 self.connect()
    965             else:

~\AppData\Local\Continuum\anaconda3\lib\http\client.py in connect(self)
   1391 
-> 1392             super().connect()
   1393 

~\AppData\Local\Continuum\anaconda3\lib\http\client.py in connect(self)
    935         self.sock = self._create_connection(
--> 936             (self.host,self.port), self.timeout, self.source_address)
    937         self.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)

~\AppData\Local\Continuum\anaconda3\lib\socket.py in create_connection(address, timeout, source_address)
    723     if err is not None:
--> 724         raise err
    725     else:

~\AppData\Local\Continuum\anaconda3\lib\socket.py in create_connection(address, timeout, source_address)
    712                 sock.bind(source_address)
--> 713             sock.connect(sa)
    714             # Break explicitly a reference cycle

TimeoutError: [WinError 10060] A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond

During handling of the above exception, another exception occurred:

URLError                                  Traceback (most recent call last)
<ipython-input-11-e6bd8257b9cf> in <module>()
    105 data_train = fetch_20newsgroups(subset='train', categories=categories,
    106                                 shuffle=True, random_state=42,
--> 107                                 remove=remove)
    108 
    109 data_test = fetch_20newsgroups(subset='test', categories=categories,

~\AppData\Local\Continuum\anaconda3\lib\site-packages\sklearn\datasets\twenty_newsgroups.py in fetch_20newsgroups(data_home, subset, categories, shuffle, random_state, remove, download_if_missing)
    213                         "This may take a few minutes.")
    214             cache = download_20newsgroups(target_dir=twenty_home,
--> 215                                           cache_path=cache_path)
    216         else:
    217             raise IOError('20Newsgroups dataset not found')

~\AppData\Local\Continuum\anaconda3\lib\site-packages\sklearn\datasets\twenty_newsgroups.py in download_20newsgroups(target_dir, cache_path)
     81 
     82     logger.info("Downloading dataset from %s (14 MB)", ARCHIVE.url)
---> 83     archive_path = _fetch_remote(ARCHIVE, dirname=target_dir)
     84 
     85     logger.debug("Decompressing %s", archive_path)

~\AppData\Local\Continuum\anaconda3\lib\site-packages\sklearn\datasets\base.py in _fetch_remote(remote, dirname)
    872     file_path = (remote.filename if dirname is None
    873                  else join(dirname, remote.filename))
--> 874     urlretrieve(remote.url, file_path)
    875     checksum = _sha256(file_path)
    876     if remote.checksum != checksum:

~\AppData\Local\Continuum\anaconda3\lib\urllib\request.py in urlretrieve(url, filename, reporthook, data)
    246     url_type, path = splittype(url)
    247 
--> 248     with contextlib.closing(urlopen(url, data)) as fp:
    249         headers = fp.info()
    250 

~\AppData\Local\Continuum\anaconda3\lib\urllib\request.py in urlopen(url, data, timeout, cafile, capath, cadefault, context)
    221     else:
    222         opener = _opener
--> 223     return opener.open(url, data, timeout)
    224 
    225 def install_opener(opener):

~\AppData\Local\Continuum\anaconda3\lib\urllib\request.py in open(self, fullurl, data, timeout)
    524             req = meth(req)
    525 
--> 526         response = self._open(req, data)
    527 
    528         # post-process response

~\AppData\Local\Continuum\anaconda3\lib\urllib\request.py in _open(self, req, data)
    542         protocol = req.type
    543         result = self._call_chain(self.handle_open, protocol, protocol +
--> 544                                   '_open', req)
    545         if result:
    546             return result

~\AppData\Local\Continuum\anaconda3\lib\urllib\request.py in _call_chain(self, chain, kind, meth_name, *args)
    502         for handler in handlers:
    503             func = getattr(handler, meth_name)
--> 504             result = func(*args)
    505             if result is not None:
    506                 return result

~\AppData\Local\Continuum\anaconda3\lib\urllib\request.py in https_open(self, req)
   1359         def https_open(self, req):
   1360             return self.do_open(http.client.HTTPSConnection, req,
-> 1361                 context=self._context, check_hostname=self._check_hostname)
   1362 
   1363         https_request = AbstractHTTPHandler.do_request_