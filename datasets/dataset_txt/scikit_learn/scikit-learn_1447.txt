gonike commented on Apr 4, 2018
Description
When processing time series, it is often desirable to consider multiple delayed versions of some input features for regression. Currently, I can't find any support for this workflow in sklean, so I have to do it manually. Is there any particular reason why there shouldn't be a preprocessor for this task? (If not, I would be willing to try and contribute a patch providing this feature.)
Steps/Code to Reproduce
Simple example of what I currently do:
from sklearn.linear_model import linear_model
import pandas as pd

def add_delays(df, col, delay_min, delay_max):
    '''
    Custom function to add delayed versions of columns to a pandas dataframe
    '''
    for delay in range(delay_min, delay_max+1):
        newcolname = col + "_" + str(delay)
        df = df.assign(**{newcolname: df.loc[:, col].shift(delay)})
    # Drop the original column, since we should now have a 'col_0' column (if desired)
    df.drop(col, axis=1, inplace=True)
    return df

# contains columns 'col1', 'col2', 'col3', 'col4'
input_data = pd.read_csv('some_file.csv') 
cols_to_be_delayed = ['col1', 'col2']
for col in cols_to_be_delayed :
    input_data = add_delays(input_data, col, 0, 1)

model = linear_model.LinearRegression()
res = model.fit(X=input_data[['col1_0', 'col1_1', 'col2_0', 'col2_1', 'col3'], 
                y=input_data['col4'])
Expected Results
What I would like to do instead (API of course subject to discussion):
from sklearn.linear_model import linear_model, preprocessing
import pandas as pd

input_data = pd.read_csv('some_file.csv')

# contains columns 'col1', 'col2', 'col3', 'col4'
input_data = pandas.read_csv('some_file.csv') 
cols_to_be_delayed = ['col1', 'col2']
input_data = preprocessing.add_delays(cols=cols_to_be_delayed , delay_min=0, delay_max=1)

model = linear_model.LinearRegression()
res = model.fit(X=input_data[['col1_0', 'col1_1', 'col2_0', 'col2_1', 'col3'], 
                y=input_data['col4'])