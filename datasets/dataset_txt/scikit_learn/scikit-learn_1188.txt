Contributor
agamemnonc commented on Aug 3, 2018 â€¢
edited
[This issue is related to #7332].
I think there is some inconsistency with the current classification metrics.
Let's consider the four following metrics:
accuracy_score
zero_one_loss
jaccard_similarity_score
hamming_loss
From my understanding, accuracy_score and zero_one_loss, represent exactly opposite things (i.e. there is a 1-to-1 relationship between the two), therefore they must always sum to 1. Makes sense.
Additionally, in the multi-label setting, both metrics are strict; that is, for a given sample the set of labels in y_pred must exactly match the corresponding set of labels in y_true for either metric to consider this sample as accurate.
Now, am I right in understanding that the hamming_loss is essentially the same as zero_one_loss, except that it is not strict in the multi-label setting, as in this case it penalises individual labels? In a single-label setting (either binary or multi-class, it doesn't matter) hamming_loss and zero_one_loss should be equivalent.
So far so good. Now, I would assume that with respect to hamming_loss, we would need a related accuracy metric which looks at the individual labels in the multi-label setting. In the case of a single-label setting (either binary or multi-class) this metric would be equivalent to accuracy_score. In other words, similarly to the pair accuracy_score - zero_one_loss we would have another pair some_new_accuracy_score - hamming_loss so that the latter two always sum up to one, in the same way that accuracy_score and zero_one_loss sum up to one (again, this would hold for multi-class and multi-label classification alike).
Instead we have the jaccard_similarity_score which is defined as the intersection over union -- are we sure this is what we really want?
Furthermore, I am not sure I understand why hamming_loss does not have a normalize input argument, in the same way that zero_one_loss, accuracy_score and jaccard_similarity_score do. Equally, why is hamming_loss the only metric supporting the classes (to be deprecated in favour of labels) input argument?