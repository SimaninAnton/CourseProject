Contributor
stephantul commented on Aug 23, 2019 â€¢
edited
Description
The docstring of fetch_20_newsgroups_vectorized is incomplete. It states that the data is vectorized using the default CountVectorizer. But the current implementation actually normalizes the counts afterwards, which is not mentioned anywhere.
Steps/Code to Reproduce
import numpy as np
from sklearn.datasets import fetch_20newsgroups
from sklearn.datasets import fetch_20newsgroups_vectorized
from sklearn.feature_extraction.text import CountVectorizer

text = fetch_20newsgroups(random_state=12)['data']
vec = CountVectorizer()

X_0 = vec.fit_transform(text)
X_1 = fetch_20newsgroups_vectorized()['data']

# Dense row
a = np.squeeze(np.asarray(X_0[0].todense()))
b = np.squeeze(np.asarray(X_1[0].todense()))

nz_a = np.flatnonzero(a)
nz_b = np.flatnonzero(b)
# Same indices are non-zero
assert set(nz_a) == set(nz_b)
# Values are different
assert np.allclose(a[nz_a], b[nz_b])
The culprit is the normalization performed in this line:
scikit-learn/sklearn/datasets/twenty_newsgroups.py
Line 423 in 8e8e60e
 normalize(X_train, copy=False) 
I'm not what the best option is here. We could remove normalization, or just mention it in the docstring.
Expected Results
I expected X_0 and X_1 to be equal.
Actual Results
X_0 contained counts, while X_1 contained normalized counts.
Versions
System:
    python: 3.6.7 | packaged by conda-forge | (default, Feb 28 2019, 02:16:08)  [GCC 4.2.1 Compatible Clang 4.0.1 (tags/RELEASE_401/final)]
executable: /Users/stephantulkens/miniconda3/bin/python
   machine: Darwin-18.7.0-x86_64-i386-64bit

BLAS:
    macros: SCIPY_MKL_H=None, HAVE_CBLAS=None
  lib_dirs: /Users/stephantulkens/miniconda3/lib
cblas_libs: mkl_rt, pthread, blas, cblas, lapack, blas, cblas, lapack

Python deps:
       pip: 19.1.1
setuptools: 41.0.1
   sklearn: 0.21.2
     numpy: 1.16.4
     scipy: 1.3.0
    Cython: 0.25.2
    pandas: 0.24.2