evanbiederstedt commented on Oct 23, 2016 â€¢
edited
This is a borderline usage problem; I am raising an Issue because the API is a bit confusing (to my mind). Users should follow a set of guidelines in the API before concluding this is a bug.
I am implementing a DPGMM
http://scikit-learn.org/stable/modules/generated/sklearn.mixture.BayesianGaussianMixture.html
from sklearn.mixture import BayesianGaussianMixture
dpgmm = BayesianGaussianMixture(n_components = ###,   weight_concentration_prior_type='dirichlet_process', max_iter = 1000)
As users have commented previously, my own DPGMM model consistently outputs the exact number of clusters as n_components. (This feels "wrong" at first; as opposed to k-means where users set the number of clusters "k" a priori, the number of clusters after fitting a DPGMM should reflect the structure of the data.)
http://stackoverflow.com/questions/38528311/scikit-learns-dpgmm-fitting-number-of-components
What is the correct way users should reduce the number of redundant components?
# test 1
from sklearn.mixture import BayesianGaussianMixture
X.shape    # outputs (20000, 48) 
dpgmm1 = BayesianGaussianMixture(n_components = 20,   weight_concentration_prior_type='dirichlet_process', max_iter = 1000)
dpgmm1.fit(X)
labels = dgmm1.predict(X) 
print(np.unique(labels))   
# outputs 20 labels
# array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
   17, 18, 19])     #number of labels == n_components

# test 2
from sklearn.mixture import BayesianGaussianMixture
X.shape    # outputs (20000, 48) 
dpgmm1 = BayesianGaussianMixture(n_components = 1,   weight_concentration_prior_type='dirichlet_process', max_iter = 1000)    # default n_components = 1
dpgmm1.fit(X)
labels = dgmm1.predict(X) 
print(np.unique(labels))   
# outputs labels all zero
# array([ 0,  0, ... 0])     #number of labels == n_components

 # test 3
from sklearn.mixture import BayesianGaussianMixture
X.shape    # outputs (20000, 48) 
dpgmm1 = BayesianGaussianMixture(n_components = 7,   weight_concentration_prior_type='dirichlet_process', max_iter = 1000)
dpgmm1.fit(X)
labels = dgmm1.predict(X) 
print(np.unique(labels))   
# outputs 20 labels
# array([ 0,  1,  2,  3,  4,  5,  6])     #number of labels == n_components
Versions
import sys; print("Python", sys.version)
3.4.5
import numpy; print("NumPy", numpy.version)
1.11.2
import scipy; print("SciPy", scipy.version)
0.18.1
import sklearn; print("Scikit-Learn", sklearn.version)
0.17.1