achatrian commented on Apr 27, 2018 â€¢
edited by glemaitre
Description
VotingClassifier throws error when used with KerasClassifier
Steps/Code to Reproduce
def Sequential_model():
    # create model
    model = Sequential()
    model.add(Dense(186, input_dim=186, activation='relu'))
    model.add(GaussianNoise(1.0))
    model.add(Dense(300, activation='relu'))
    model.add(Dropout(0.5))
    model.add(BatchNormalization(axis=-1, momentum=0.99, epsilon=0.001))
    model.add(Dense(200, activation='relu'))
    model.add(Dense(1, activation='sigmoid'))
    # Compile model
    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
    return model

for X_test, y_test, X_train, y_train, ID in MakeDataset_1out_CC(X,labels):
    #Ensemble classifier model:
    print("Train shape {}".format(X_train.shape))
    print("Train labels shape {}".format(y_train.shape))
    print("Test shape {}".format(X_test.shape))
    print("Test labels shape {}".format(y_test.shape))

    clf1 = LogisticRegression()
    clf2 = KerasClassifier(build_fn=Sequential_model, epochs=10, batch_size=5000, verbose=0)
    clf = [("DNN1", clf1), ('DNN2', clf2)]
    eclf = VotingClassifier(clf, weights=[1.0,1.0])
    eclf.fit(X_train,y_train)
    y_hat = eclf.predict(X_test)
Expected Results
Print:
Train shape (21877, 186)
Train labels shape (21877,)
Test shape (1000, 186)
Test labels shape (1000,)
Then:
Perform the prediction on X_test after training
Actual Results
Train shape (21877, 186)
Train labels shape (21877,)
Test shape (1000, 186)
Test labels shape (1000,)
Ok
Then it throws an error:
Traceback (most recent call last):
  File "errorKeras.py", line 193, in <module>
    y_hat = eclf.predict(X_test)
  File "/Users/andreachatrian/miniconda3/lib/python3.6/site-packages/sklearn/ensemble/voting_classifier.py", line 221, in predict
    predictions = self._predict(X)
  File "/Users/andreachatrian/miniconda3/lib/python3.6/site-packages/sklearn/ensemble/voting_classifier.py", line 339, in _predict
    return np.asarray([clf.predict(X) for clf in self.estimators_]).T
  File "/Users/andreachatrian/miniconda3/lib/python3.6/site-packages/numpy/core/numeric.py", line 492, in asarray
    return array(a, dtype, copy=False, order=order)
ValueError: could not broadcast input array from shape (1000,1) into shape (1000)

The input labels are (1000,) as needed, but this error is thrown.

This doesn't occur if two logistic regressions are combined instead.

Furthermore, if two KerasClassifiers are combined into the voting classifier 

clf1 = KerasClassifier(build_fn=Sequential_model, epochs=10, batch_size=5000, verbose=0)
clf2 = KerasClassifier(build_fn=Sequential_model, epochs=10, batch_size=5000, verbose=0)

 a different error is thrown:

File "errorKeras.py", line 193, in <module>
    y_hat = eclf.predict(X_test)
  File "/Users/andreachatrian/miniconda3/lib/python3.6/site-packages/sklearn/ensemble/voting_classifier.py", line 225, in predict
    axis=1, arr=predictions)
  File "/Users/andreachatrian/miniconda3/lib/python3.6/site-packages/numpy/lib/shape_base.py", line 132, in apply_along_axis
    res = asanyarray(func1d(inarr_view[ind0], *args, **kwargs))
  File "/Users/andreachatrian/miniconda3/lib/python3.6/site-packages/sklearn/ensemble/voting_classifier.py", line 224, in <lambda>
    np.bincount(x, weights=self._weights_not_none)),
ValueError: The weights and list don't have the same length.
which doesn't occur when the first classifier is not a KerasClassifier (and it would have been thrown before error above otherwise).
Versions
import platform; print(platform.platform())
Darwin-17.4.0-x86_64-i386-64bit
import sys; print("Python", sys.version)
Python 3.6.3 |Anaconda, Inc.| (default, Dec 5 2017, 17:30:25)
[GCC 4.2.1 Compatible Clang 4.0.1 (tags/RELEASE_401/final)]
import numpy; print("NumPy", numpy.version)
NumPy 1.14.2
import scipy; print("SciPy", scipy.version)
SciPy 1.0.0
import sklearn; print("Scikit-Learn", sklearn.version)
Scikit-Learn 0.19.1