Contributor
nelson-liu commented on Aug 3, 2016 â€¢
edited
Description
When training linear_model.Lasso with sparse features, it gets different results than when dense features are used. The shapes of the output vectors are malformed in the sparse case.
Steps/Code to Reproduce
import numpy as np
import scipy as sp
from sklearn.linear_model import Lasso
l = Lasso()
X = [[0,1,2,3,4],[0,2,5,8,11],[9,10,11,12,13],[10,11,12,13,14]]
y = [[1,2,3,4,5],[1,3,6,9,12],[10,11,12,13,14],[11,12,13,14,15]]
l.fit(X,y)

sample = np.array([1,2,3,4,5]).reshape(1,-1)
print l.predict(sample)
print l.predict(sample).shape

# sparse case
l = Lasso()
X = sp.sparse.coo_matrix([[0,1,2,3,4],[0,2,5,8,11],[9,10,11,12,13],[10,11,12,13,14]])
y = [[1,2,3,4,5],[1,3,6,9,12],[10,11,12,13,14],[11,12,13,14,15]]
l.fit(X,y)

sample = sp.sparse.coo_matrix(sample)
print l.predict(sample)
print l.predict(sample).shape
Expected Results
[[ 2.16528926  3.35184443  4.35173866  5.35172206  6.36065574]]
(1, 5)
[[ 2.16528926  3.35184443  4.35173866  5.35172206  6.36065574]]
(1, 5)
Actual Results
[[ 2.16528926  3.35184443  4.35173866  5.35172206  6.36065574]]
(1, 5)
[ 2.16528926  3.02125634  2.80872669  2.61550235  2.64444746  2.49587735
  3.35184443  3.13931479  2.94609045  2.97503555  3.70830122  4.5642683
  4.35173866  4.15851432  4.18745942  4.90150897  5.75747605  5.54494641
  5.35172206  5.38066717  5.88149754  6.73746462  6.52493498  6.33171064
  6.36065574]
(25,)
This is a bit odd, notice that the first column in the sparse output relates to the dense output.
Versions
Darwin-15.5.0-x86_64-i386-64bit
('Python', '2.7.12 (default, Jun 29 2016, 14:05:02) \n[GCC 4.2.1 Compatible Apple LLVM 7.3.0 (clang-703.0.31)]')
('NumPy', '1.11.1')
('SciPy', '0.17.1')
('Scikit-Learn', '0.18.dev0')