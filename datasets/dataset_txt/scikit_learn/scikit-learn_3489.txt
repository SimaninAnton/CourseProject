Member
jakevdp commented on Oct 28, 2015
from sklearn.linear_model import RidgeCV

temp1 = pd.DataFrame(np.random.rand(781, 21))
temp2 = pd.Series(temp1.sum(1))
weights = pd.Series(1 + 0.1 * np.random.rand(781))

result=RidgeCV(normalize=True).fit(temp1,temp2,sample_weight=weights)
result is this:
---------------------------------------------------------------------------
Exception                                 Traceback (most recent call last)
<ipython-input-220-81f57e5bbd9f> in <module>()
      5 weights = pd.Series(1 + 0.1 * np.random.rand(781))
      6 
----> 7 result=RidgeCV(normalize=True).fit(temp1,temp2,sample_weight=weights)

/Users/jakevdp/anaconda/envs/python3.4/lib/python3.4/site-packages/sklearn/linear_model/ridge.py in fit(self, X, y, sample_weight)
    868                                   gcv_mode=self.gcv_mode,
    869                                   store_cv_values=self.store_cv_values)
--> 870             estimator.fit(X, y, sample_weight=sample_weight)
    871             self.alpha_ = estimator.alpha_
    872             if self.store_cv_values:

/Users/jakevdp/anaconda/envs/python3.4/lib/python3.4/site-packages/sklearn/linear_model/ridge.py in fit(self, X, y, sample_weight)
    793                               else alpha)
    794             if error:
--> 795                 out, c = _errors(weighted_alpha, y, v, Q, QT_y)
    796             else:
    797                 out, c = _values(weighted_alpha, y, v, Q, QT_y)

/Users/jakevdp/anaconda/envs/python3.4/lib/python3.4/site-packages/sklearn/linear_model/ridge.py in _errors(self, alpha, y, v, Q, QT_y)
    685         w = 1.0 / (v + alpha)
    686         c = np.dot(Q, self._diag_dot(w, QT_y))
--> 687         G_diag = self._decomp_diag(w, Q)
    688         # handle case where y is 2-d
    689         if len(y.shape) != 1:

/Users/jakevdp/anaconda/envs/python3.4/lib/python3.4/site-packages/sklearn/linear_model/ridge.py in _decomp_diag(self, v_prime, Q)
    672     def _decomp_diag(self, v_prime, Q):
    673         # compute diagonal of the matrix: dot(Q, dot(diag(v_prime), Q^T))
--> 674         return (v_prime * Q ** 2).sum(axis=-1)
    675 
    676     def _diag_dot(self, D, B):

/Users/jakevdp/anaconda/envs/python3.4/lib/python3.4/site-packages/pandas/core/ops.py in wrapper(left, right, name, na_op)
    618             return left._constructor(wrap_results(na_op(lvalues, rvalues)),
    619                                      index=left.index, name=left.name,
--> 620                                      dtype=dtype)
    621     return wrapper
    622 

/Users/jakevdp/anaconda/envs/python3.4/lib/python3.4/site-packages/pandas/core/series.py in __init__(self, data, index, dtype, name, copy, fastpath)
    217             else:
    218                 data = _sanitize_array(data, index, dtype, copy,
--> 219                                        raise_cast_failure=True)
    220 
    221                 data = SingleBlockManager(data, index, fastpath=True)

/Users/jakevdp/anaconda/envs/python3.4/lib/python3.4/site-packages/pandas/core/series.py in _sanitize_array(data, index, dtype, copy, raise_cast_failure)
   2838     elif subarr.ndim > 1:
   2839         if isinstance(data, np.ndarray):
-> 2840             raise Exception('Data must be 1-dimensional')
   2841         else:
   2842             subarr = _asarray_tuplesafe(data, dtype=dtype)

Exception: Data must be 1-dimensional
If you instead use sample_weights=weights.values, the error does not occur.