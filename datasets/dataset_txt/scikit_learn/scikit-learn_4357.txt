Random-Word commented on Jun 18, 2014
Single threaded Randomized Search CV causes no issues. In this test it seems to always show up early in the second fold (second call to process). It didn't show up when I ran the digits example here.
Python 2.7
sklearn 0.14.1, 0.15.0b1
numpy 1.8.1
scipy 0.13.3
Roughly Minimal Example:
#!/usr/bin/env python

import numpy as np
import scipy as sp
from sklearn.preprocessing import StandardScaler, Binarizer
from sklearn.cross_validation import StratifiedKFold
from sklearn.neural_network import BernoulliRBM as RBM
from sklearn.pipeline import Pipeline
from sklearn import svm
from sklearn.grid_search import RandomizedSearchCV as RSCV
from sklearn.datasets import make_classification
from sklearn.metrics import confusion_matrix

def prep(data, train = None, test = None):
    prepared = np.zeros((data.shape[0],data.shape[1]))
    if train is not None and test is not None:
        prepared[train] = scaler.fit_transform(data[train])
        prepared[test] = scaler.transform(data[test])
        return prepared
    prepared = scaler.fit_transform(data)
    return prepared

def process(data, classes, train, test):
    lsvm = svm.LinearSVC()
    rbm = RBM(verbose=1)
    data = binarizer.transform(prep(data, train, test))
    clf = Pipeline(steps=[('rbm', rbm),('lsvm', lsvm)])
    rps = RSCV(clf,
            {'rbm__learning_rate':[1e-3,1e-2,1e-1,1e-0],
            'rbm__n_iter':[10,20,30,40],
            'rbm__n_components':[25,50,75],
            'lsvm__C': sp.stats.expon(scale=100),
            'lsvm__loss': ['l1','l2'],
            'lsvm__tol': sp.stats.expon(scale=0.1),
            'lsvm__class_weight': ['auto', None]},
                n_iter=60, scoring=None, fit_params=None,
                n_jobs=-1, iid=True,
                refit=True, cv=StratifiedKFold(classes[train],3), verbose=1,
                pre_dispatch='2*n_jobs')
    model = rps.fit(data[train], classes[train]).best_estimator_
    print rps.best_params_
    acc = model.score(data[test], classes[test])
    print "RBM+LSVM Accuracy: %f"%acc
    print(confusion_matrix(classes[test], model.predict(data[test])))
    scores = model.decision_function(data[test])

scaler = StandardScaler()
binarizer = Binarizer()

X, y = make_classification(n_samples=1000, n_features=25, n_informative=3,
                           n_redundant=2, n_repeated=0, n_classes=8,
                           n_clusters_per_class=1, random_state=0)

for train, test in StratifiedKFold(y, 3):
    process(X, y, train, test)
OS X Crash Report: http://pastebin.com/Q0aVVra9