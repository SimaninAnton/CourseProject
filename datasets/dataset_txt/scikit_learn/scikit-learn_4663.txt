Contributor
flukeskywalker commented on Sep 15, 2013
While generating a word cloud using Andreas Muller's word-cloud script, I noticed that when the parameter max_features for CountVectorizer is not None, the topmost common features are not being returned. This does not seem to be the correct behavior, since if I limit to top N features only, the highest frequency features should remain the same.
It appears that the problem is in CountVectorizer._limit_features where document frequencies are being used for selecting the top occurring features. I think feature frequencies should be used instead. I am able to get the desired behavior with this modification.
Here is the diff:
684a685
>         ffs = np.sum(cscmatrix.toarray(), 0)  # feature frequencies instead of document frequencies are needed for max_features
693c694
<             mask_inds = (-ffs[mask]).argsort()[:limit]

---
>             mask_inds = (-wfs[mask]).argsort()[:limit]