bspeice commented on Feb 14, 2016
When testing the n_components feature in the LinearDiscriminantAnalysis, it allows me to transform the data into a lower dimension. That is, I can do:
lda = LinearDiscriminantAnalysis(n_components=2)
lda.fit([1, 2, 3], 1)
lda.transform([1, 2, 3])
to get transformed data. However, if I go to use prediction (for all solvers) the solver has the same result as if I were using the full dimensionality, it does not first transform the data to predict it. Thus, in order for n_components to actually do anything, you must use the following form:
lda = LinearDiscriminantAnalysis(n_components=N)
lda.fit(train_x, train_y)

xform_x = lda.transform(train_x)
lda = LinearDiscriminantAnalysis()
lda.fit(xform_x, train_y)

train_err = lda.score(xform_x, train_y)
While this isn't a huge amount of extra code, it is a bit strange that the n_components doesn't affect the final analysis - this can especially be an issue when the dimension reduction improves the score.
Is this intended behavior?