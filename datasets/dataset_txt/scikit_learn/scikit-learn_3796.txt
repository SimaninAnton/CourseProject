sergey-salnikov commented on May 30, 2015
Examples, on scikit-learn 0.16.1:
>>> import numpy as np
>>> from sklearn.neighbors import NearestNeighbors, KDTree
>>> X = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]])
>>> nbrs = NearestNeighbors(n_neighbors=2, algorithm='kd_tree').fit(X)
>>> nbrs.kneighbors([[[0,0], [0,1]], [[1,0], [1,1]]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/usr/lib/python2.7/site-packages/sklearn/neighbors/base.py", line 327, in kneighbors
    X = check_array(X, accept_sparse='csr')
  File "/usr/lib/python2.7/site-packages/sklearn/utils/validation.py", line 350, in check_array
    array.ndim)
ValueError: Found array with dim 3. Expected <= 2
>>> tree = KDTree(X)
>>> tree.query([[[0,0], [0,1]], [[1,0], [1,1]]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "binary_tree.pxi", line 1287, in sklearn.neighbors.kd_tree.BinaryTree.query (sklearn/neighbors/kd_tree.c:10407)
  File "/usr/lib/python2.7/site-packages/sklearn/utils/validation.py", line 350, in check_array
    array.ndim)
ValueError: Found array with dim 3. Expected <= 2
Docstrings still say "X : array-like, last dimension same as that of fit data", don't say that X must be 2d. With scikit-learn 0.15.2, the same code works just fine.
On the other hand, I don't know, maybe this is a documentation bug? At least now this error is consistent and does not depend on algorithm, while on 0.15.2 algorithm='brute' failed with a less clear message:
>>> nbrs = NearestNeighbors(n_neighbors=2, algorithm='brute').fit(X)
>>> nbrs.kneighbors([[[0,0], [0,1]], [[1,0], [1,1]]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/usr/lib/python2.7/site-packages/sklearn/neighbors/base.py", line 312, in kneighbors
    squared=True)
  File "/usr/lib/python2.7/site-packages/sklearn/metrics/pairwise.py", line 1073, in pairwise_distances
    return func(X, Y, **kwds)
  File "/usr/lib/python2.7/site-packages/sklearn/metrics/pairwise.py", line 212, in euclidean_distances
    XX = row_norms(X, squared=True)[:, np.newaxis]
  File "/usr/lib/python2.7/site-packages/sklearn/utils/extmath.py", line 65, in row_norms
    norms = np.einsum('ij,ij->i', X, X)
ValueError: operand has more dimensions than subscripts given in einstein sum, but no '...' ellipsis provided to broadcast the extra dimensions.