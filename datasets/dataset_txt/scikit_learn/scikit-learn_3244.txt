tiagoft commented on Jan 22, 2016
Hello, everyone!
I am unable to replicate Weka's behavior on scikit learn using the Gaussian Naive Bayes classifier.
I am using StratifiedKFold (which was double-checked).
Nevertheless, Weka's and sklearn's results are inconsistent.
The procedure (in Weka) is: load CSV file, select NaiveBayes classifier, select 2-fold cross validation, run. In Python, I am running the source code that I pasted inline.
Since this problem also happens with SMO classifiers, I am guessing that there is something different in a pre-processing step, which Weka might be doing implicitly.
On Weka, I get this confusion matrix:
a b c <-- classified as
3 0 0 | a = A
3 0 0 | b = B
0 0 3 | c = C
On Sklearn, I get:
[[3 1 1]
[0 2 0]
[0 0 2]]
Thanks for everything!
My data points are (in a file named fiction.csv):
P0,P1,P2,LABEL
0.1,0.1,0.5,A
0.2,0.3,0.7,A
1.1,1.1,0.0,B
1.1,1.0,0.2,B
0.8,1.3,0.1,B
0.0,0.0,0.0,A
5,7,5,C
9,7,9,C
10,10,10,C
The source code is:
import csv
import numpy as np

from sklearn.preprocessing import StandardScaler, normalize, MinMaxScaler
from sklearn.cross_validation import StratifiedKFold
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import f1_score, confusion_matrix, classification_report

def elements(x):
    p = {}
    for k in x:
        if k not in p:
            p[k] = 1
        else:
            p[k] += 1
    return p.keys(), p

def open_dataset(dataset_filename):

    with open(dataset_filename, 'rb') as f:
        data = list(csv.reader(f))

    data = np.array(data)
    x_ = data[1:, 0:-1].astype(float)
    y_ = data[1:, -1].astype(str)
    attr_names = data[0, :].astype(str)

    labels, nel = elements(y_)
    labels.sort()

    folds = StratifiedKFold(y_, n_folds=2)
    train_index, test_index = next(iter(folds))

    X_train = x_[train_index,:]
    y_train = y_[train_index]
    X_test = x_[test_index,:]
    y_test = y_[test_index]

    return X_train, y_train, X_test, y_test, labels, nel

X_train, y_train, X_test, y_test, labels, nel = open_dataset("fiction.csv")

machine = GaussianNB()
machine.fit(X_train, y_train)
p1 = machine.predict(X_test)
machine.fit(X_test, y_test)
p2 = machine.predict(X_train)
f = f1_score(list(p1) + list(p2), list(y_test) + list(y_train), average='weighted')
print f
a = confusion_matrix(list(p1) + list(p2), list(y_test) + list(y_train))
print a