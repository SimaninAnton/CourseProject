austinlostinboston commented on Sep 18, 2018 â€¢
edited
I am using sklearn's DecisionTreeClassifier in a multi-label situation. I have a matrix where each column represents whether an item is in the list, which I'm also trying to predict. See example below.
import numpy as np
from sklearn.tree import DecisionTreeClassifier

x = np.array([[0,0],[0,1],[1,0]])
y = np.array([[0,0],[0,1],[1,0]])
m = DecisionTreeClassifier()

m.fit(x,y)
# feed [1,1] as input and expect [1,1] as the output
m.predict(np.array([1,1]).reshape(1,-1))
# Output is [0,1]
If you train a single class decision tree classifier on each column of x, the predicted value is 1, as expected. This shows that the expected behavior is possible, given the traditional multi-label approach of building a model for each class in your data.
The problem here is either sklearn's DT has a bug when it comes to multi-label instances or the model is not a true multi-label classifier and the documentation is misleading (as stated here)
Please let me know if you have questions, or need more information from me.