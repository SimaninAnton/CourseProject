shahlaebrahimi commented on Apr 12, 2018 â€¢
edited
I would appreciate if you could fix the error.
Code:
from collections import Counter
from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split,StratifiedKFold,learning_curve,validation_curve,GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline
from sklearn.metrics import classification_report
import numpy as np
import matplotlib.pyplot as plt


def plot_validation_curve(param_range, train_scores, test_scores, title, alpha=0.1):
    train_mean = np.mean(train_scores, axis=1)
    train_std = np.std(train_scores, axis=1)
    test_mean = np.mean(test_scores, axis=1)
    test_std = np.std(test_scores, axis=1)
    plt.plot(param_range, train_mean, label='train score', color='blue', marker='o')
    plt.fill_between(param_range, train_mean + train_std,
                     train_mean - train_std, color='blue', alpha=alpha)
    plt.plot(param_range, test_mean, label='test score', color='red', marker='o')
    plt.fill_between(param_range, test_mean + test_std, test_mean - test_std, color='red', alpha=alpha)
    plt.title(title)
    plt.grid(ls='--')
    plt.xlabel('Parameter value')
    plt.ylabel('F-measure')
    plt.legend(loc='best')
    plt.show()

if __name__ == '__main__':

    X, y = make_classification(n_classes=2, class_sep=2,weights=[0.9, 0.1], n_informative=3, n_redundant=1, flip_y=0, n_features=20, n_clusters_per_class=1, n_samples=1000, random_state=10)
    print('Original dataset shape {}'.format(Counter(y)))

    ln = X.shape
    names = ["x%s" % i for i in range(1, ln[1] + 1)]

    X_train, X_test, y_train, y_test = train_test_split(X, y,random_state=0)
    st=StandardScaler()

    rg = LogisticRegression(class_weight = { 0:1, 1:6.5 }, random_state = 42, solver = 'saga',max_iter=100,n_jobs=-1)

    param_grid = {'clf__C': [0.001,0.01,0.1,0.002,0.02,0.005,0.0007,.0006,0.0005],
                  'clf__class_weight':[{ 0:1, 1:6 },{ 0:1, 1:4 },{ 0:1, 1:5.5 },{ 0:1, 1:4.5 },{ 0:1, 1:5 }]
                  }

    pipeline = Pipeline(steps=[('scaler', st),
                               ('clf', rg )])

    cv=StratifiedKFold(n_splits=5,random_state=42)
    rg_cv = GridSearchCV(pipeline, param_grid, cv=cv, scoring =  'f1')
    rg_cv.fit(X_train, y_train)
    print("Tuned rg best params: {}".format(rg_cv.best_params_))

    ypred = rg_cv.predict(X_train)
    print(classification_report(y_train, ypred))
    print('######################')
    ypred2 = rg_cv.predict(X_test)
    print(classification_report(y_test, ypred2))

    plt.figure(figsize=(9,6))
    param_range1=[i / 10000.0 for i in range(1, 11)]
    param_range2=[{ 0:1, 1:6 },{ 0:1, 1:4 },{ 0:1, 1:5.5 },{ 0:1, 1:4.5 },{ 0:1, 1:5 }]


    train_scores, test_scores = validation_curve(
        estimator=rg_cv.best_estimator_, X=X_train, y=y_train, param_name="clf__class_weight", param_range=param_range2,
        cv=cv, scoring="f1", n_jobs=-1)

    plot_validation_curve(param_range2, train_scores, test_scores, title="Validation Curve for class_weight", alpha=0.1)
Error:
Traceback (most recent call last):
  File "D:/mifs-master_2/MU/learning-from-imbalanced-classes-master/learning-from-imbalanced-classes-master/continuous/example.py", line 69, in <module>
    plot_validation_curve(param_range2, train_scores, test_scores, title="Validation Curve for class_weight", alpha=0.1)
  File "D:/mifs-master_2/MU/learning-from-imbalanced-classes-master/learning-from-imbalanced-classes-master/continuous/example.py", line 17, in plot_validation_curve
    plt.plot(param_range, train_mean, label='train score', color='blue', marker='o')
  File "C:\Users\Markazi.co\Anaconda3\lib\site-packages\matplotlib\pyplot.py", line 3240, in plot
    ret = ax.plot(*args, **kwargs)
  File "C:\Users\Markazi.co\Anaconda3\lib\site-packages\matplotlib\__init__.py", line 1710, in inner
    return func(ax, *args, **kwargs)
  File "C:\Users\Markazi.co\Anaconda3\lib\site-packages\matplotlib\axes\_axes.py", line 1438, in plot
    self.add_line(line)
  File "C:\Users\Markazi.co\Anaconda3\lib\site-packages\matplotlib\axes\_base.py", line 1759, in add_line
    self._update_line_limits(line)
  File "C:\Users\Markazi.co\Anaconda3\lib\site-packages\matplotlib\axes\_base.py", line 1781, in _update_line_limits
    path = line.get_path()
  File "C:\Users\Markazi.co\Anaconda3\lib\site-packages\matplotlib\lines.py", line 951, in get_path
    self.recache()
  File "C:\Users\Markazi.co\Anaconda3\lib\site-packages\matplotlib\lines.py", line 652, in recache
    x = _to_unmasked_float_array(xconv).ravel()
  File "C:\Users\Markazi.co\Anaconda3\lib\site-packages\matplotlib\cbook\__init__.py", line 2008, in _to_unmasked_float_array
    return np.asarray(x, float)
  File "C:\Users\Markazi.co\Anaconda3\lib\site-packages\numpy\core\numeric.py", line 492, in asarray
    return array(a, dtype, copy=False, order=order)
TypeError: float() argument must be a string or a number, not 'dict'