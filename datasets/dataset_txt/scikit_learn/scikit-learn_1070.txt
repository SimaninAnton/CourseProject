MonkeyDNoppu commented on Sep 21, 2018 â€¢
edited
def predict_proba(self, X):
    """Estimate probability.

    Parameters
    ----------
    X : array-like, shape (n_samples, n_features)
        Input data.

    Returns
    -------
    C : array, shape (n_samples, n_classes)
        Estimated probabilities.
    """
    prob = self.decision_function(X)
    prob *= -1
    np.exp(prob, prob)
    prob += 1
    np.reciprocal(prob, prob)
    if len(self.classes_) == 2:  # binary case
        return np.column_stack([1 - prob, prob])
    else:
        # OvR normalization, like LibLinear's predict_probability
        prob /= prob.sum(axis=1).reshape((prob.shape[0], -1))
        return prob
I don't know what is line np.exp & np.reciprocal do, could you explain me ??
When I commented it out, then my roc_auc score was inverted (be 1-roc_auc)