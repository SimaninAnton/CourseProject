Contributor
mbatchkarov commented on May 18, 2016 â€¢
edited by TomDLT
Description
NMF raises the following error: ValueError: Number of components must be positive; got (n_components=10).
There are two problem that I can see:
this line checks the type of n_components, but ignores the possibility that it might be something like np.int64. The next two checks (tol and max_iter) are correct.
the error message is uninformative. The problem has nothing to do with n_components not being positive
Steps/Code to Reproduce
import numpy as np
from sklearn.naive_bayes import MultinomialNB
from sklearn.decomposition import NMF
from sklearn.pipeline import Pipeline
from sklearn.learning_curve import validation_curve

import platform; print("Platform", platform.platform())
import sys; print("Python", sys.version)
import numpy; print("NumPy", numpy.__version__)
import scipy; print("SciPy", scipy.__version__)
import sklearn; print("Scikit-Learn", sklearn.__version__)

X = np.random.random((100, 100))
y = [0] * 50 + [1] * 50

pipe = Pipeline([
    ('nmf', NMF(n_components=10)),
    ('clf', MultinomialNB())
])

# runs fine because nmf__n_components is a Python int
train_scores, valid_scores = validation_curve(pipe, X, y, "nmf__n_components",range(10, 21, 10))

# ValueError: Number of components must be positive; got (n_components=10)
# because nmf__n_components is np.int64
train_scores, valid_scores = validation_curve(pipe, X, y, "nmf__n_components", np.arange(10, 21, 10))
Expected Results
No error is thrown.
Actual Results
ValueError: Number of components must be positive; got (n_components=10)
Versions
Platform Darwin-14.5.0-x86_64-i386-64bit
Python 3.4.4 |Anaconda 2.5.0 (x86_64)| (default, Jan 9 2016, 17:30:09)
[GCC 4.2.1 (Apple Inc. build 5577)]
NumPy 1.10.4
SciPy 0.17.0
Scikit-Learn 0.17.1