dhruvghulati commented on Sep 5, 2016
Description
See http://stackoverflow.com/questions/39322474/regex-for-unicode-sentences-without-spaces-using-countvectorizer?noredirect=1#comment65977147_39322474 for further details. My token pattern to only allow tokens which are not whitespace are allowing u'' as a token in my vocabulary, which is a term I do not want to allow as it is meaningless in a classifier.
Steps/Code to Reproduce
#!/usr/local/bin/python
# -*- coding: utf-8 -*-
import os
import sys
from sklearn.feature_extraction.text import CountVectorizer


print sys.getdefaultencoding()


train_wordbigram_list = ['location_slot great recessionalgeria gdp per capita lrb ppp rrb positive growth great recessionalgeria since end great recessionalgeria gdp per capita lrb ppp rrb positive growth since end great recessionalgeria algerian civil waralgeria gdp per capita lrb ppp rrb positive growth number_slot algerian civil waralgeria since end algerian civil waralgeria gdp per capita lrb ppp rrb negative growth lrb decline rrb since end algerian civil war LOCATION_SLOT~-nsubj+had~-dep had~-dep+had~dobj had~dobj+growth~prep_of growth~prep_of+PERCENT~num PERCENT~num+NUMBER_SLOT location_slot fertility rate cents average number births woman lifetime cents stands number_slot among lowest world LOCATION_SLOT~-poss+rate~-dep rate~-dep+MONEY~-dep MONEY~-dep+in~-csubj in~-csubj+â~dobj â~dobj+MONEY~rcmod MONEY~rcmod+stands~prep_at stands~prep_at+NUMBER_SLOT']

vectorizer = CountVectorizer(analyzer="word",token_pattern="[\S]*",stop_words=None,tokenizer=None,preprocessor=None,max_features=5000)

vectorizer.fit(train_wordbigram_list)

print vectorizer.vocabulary_
Expected Results
{u'waralgeria': 41, u'had~-dep+had~dobj': 15, u'growth~prep_of+percent~num': 14, u'among': 2, u'civil': 7, u'rrb': 36, u'rate': 33, u'ppp': 32, u'lifetime': 18, u'rate~-dep+money~-dep': 34, u'decline': 8, u'lrb': 23, u'end': 9, u'stands': 38, u'positive': 31, u'since': 37, u'negative': 26, u'per': 29, u'cents': 6, u'recessionalgeria': 35, u'war': 40, u'in~-csubj+\xe2~dobj': 17, u'lowest': 22, u'woman': 42, u'location_slot~-nsubj+had~-dep': 20, u'\xe2~dobj+money~rcmod': 44, u'number_slot': 28, u'births': 4, u'percent~num+number_slot': 30, u'number': 27, u'money~-dep+in~-csubj': 24, u'world': 43, u'location_slot~-poss+rate~-dep': 21, u'had~dobj+growth~prep_of': 16, u'location_slot': 19, u'great': 12, u'algerian': 1, u'average': 3, u'stands~prep_at+number_slot': 39, u'capita': 5, u'growth': 13, u'money~rcmod+stands~prep_at': 25, u'gdp': 11, u'fertility': 10}
Actual Results
{u'': 0, u'waralgeria': 41, u'had~-dep+had~dobj': 15, u'growth~prep_of+percent~num': 14, u'among': 2, u'civil': 7, u'rrb': 36, u'rate': 33, u'ppp': 32, u'lifetime': 18, u'rate~-dep+money~-dep': 34, u'decline': 8, u'lrb': 23, u'end': 9, u'stands': 38, u'positive': 31, u'since': 37, u'negative': 26, u'per': 29, u'cents': 6, u'recessionalgeria': 35, u'war': 40, u'in~-csubj+\xe2~dobj': 17, u'lowest': 22, u'woman': 42, u'location_slot~-nsubj+had~-dep': 20, u'\xe2~dobj+money~rcmod': 44, u'number_slot': 28, u'births': 4, u'percent~num+number_slot': 30, u'number': 27, u'money~-dep+in~-csubj': 24, u'world': 43, u'location_slot~-poss+rate~-dep': 21, u'had~dobj+growth~prep_of': 16, u'location_slot': 19, u'great': 12, u'algerian': 1, u'average': 3, u'stands~prep_at+number_slot': 39, u'capita': 5, u'growth': 13, u'money~rcmod+stands~prep_at': 25, u'gdp': 11, u'fertility': 10}
Versions
>>> import platform; print(platform.platform())
Darwin-14.5.0-x86_64-i386-64bit
>>> import platform; print(platform.platform())
Darwin-14.5.0-x86_64-i386-64bit
>>> import sys; print("Python", sys.version)
('Python', '2.7.11 |Anaconda 4.0.0 (x86_64)| (default, Dec  6 2015, 18:57:58) \n[GCC 4.2.1 (Apple Inc. build 5577)]')
>>> import numpy; print("NumPy", numpy.__version__)
('NumPy', '1.10.4')
>>> import scipy; print("SciPy", scipy.__version__)
('SciPy', '0.17.0')