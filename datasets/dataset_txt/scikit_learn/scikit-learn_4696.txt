karidajiang commented on Aug 13, 2013
In multiclass.py, function predict_ovo(estimators, classes, X), it has:
       scores[:, i] += score
       scores[:, j]  -= score
However, I think it should be:
scores[:, i] -= score
scores[:, j] += score
I think the idea here should be, when score > 0, the positive class increase its value in 'scores by' 'score', and the negative class decrease its value by 'score'. Because in case of tie, we use 'argmax(scores)' to determine the class, so the 'scores' should represent 'how certain we are about the class'. Therefore in the original code, 'i' should represent the positive class while 'j' represents the negative class.
Since from 'pred' and 'score' you find out: when score is positive, it has the label of '1' and otherwise '0', it means '1' is the positive class label and '0' is the negative class label.
However, in _fit_ovo_binary(estimator, X, y, i, j), with 'i' and 'j' being the same as used in predict_ovo(estimators, classes, X):
y[y == i] = 0
y[y == j] = 1
We know that 'i' < 'j'. Since 1 is the positive class label, then 'j' represent the positive class. i.e. for a classifier trained between 'i' and 'j' with 'i' < 'j', 'j' is the positive class.
Back to function predict_ovo(estimators, classes, X), we see from line:
scores[:, j] -= score
If score > 0, we decrease the value corresponding to class 'j', which is incorrect.
Hope it is not too verbose.