Member
mblondel commented on Jan 10, 2011
Currently, we have three level of objects for text feature extraction:
Preprocessor
Analyzer
Vectorizer
In this proposal, we would like to merge Preprocessor into Analyzer as well as introducing new methods. This should give more flexibility to the user for supporting different (natural) languages.
An analyzer should implement 4 methods:
preprocess(str) => str
Preprocessing such as punctation removal, lower case conversion. Language dependent.
tokenize(str) => list
Split a string into tokens (words or characters). Language dependent.
postprocess(list) => list
From a list of tokens, output a list of n-grams. Language independent (unless further post-processing is needed).
analyze(iter) => iter
Pass a collection of documents (str, file, io) through the whole chain preprocess => tokenize => postprocess. Since an iterator is returned, CountVectorizer should convert it to a list but HashingCountVectorizer won't have.
The class hierarchy could look like this:
Analyzer (implements postprocess)
RomanAnalyzer (implements preprocess)
RomanWordAnalyzer (implements tokenize)
RomanCharacterAnalyzer (implements tokenize)
Furthermore, we can have an EnglishWordAnalyzer to handle things like stop words removal and more elaborate processing for English syntax.
ChineseWordAnalyzer and JapaneseWordAnalyzer will likely require external dependencies (library, dictionary/probabilistic model). Thus they are out of the scope of the project but we may want to provide them in a gist.