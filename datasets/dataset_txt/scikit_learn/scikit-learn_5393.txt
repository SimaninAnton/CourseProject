ncroc commented on Apr 18, 2012
in GMM.py in def _lmvnpdffull(obs, means, covars):
for c, (mu, cv) in enumerate(itertools.izip(means, covars)):
cv_log_det = 2 * np.sum(np.log(np.diagonal(cv_chol)))
cv_sol = solve_triangular(cv_chol, (obs - mu).T, lower=True).T
log_prob[:, c] = -.5 * (np.sum(cv_sol ** 2, axis=1) +
n_dim * np.log(2 * np.pi) + cv_log_det)
I think log_prob[:, c] = -.5 * (np.sum(cv_sol ** 2, axis=1) +n_dim * np.log(2 * np.pi) + cv_log_det
should have been log_prob[:, c] = -.5 * (np.sum(cv_sol ** 2, axis=1) -(n_dim/2) * np.log(2 * np.pi) -(0.5)* cv_log_det
fk(xi)=1/(2pi)^(d/2)|Sk|^(1/2) exp(-0.5(xi-uk)^T Sk^-1 (xi-uk))
log fk(xi)= log (2pi)^(-d/2)+log |Sk^-1|^(1/2)+(-0.5(xi-uk)^T Sk^-1 (xi-uk))
log fk(xi)=(-d/2) log (2pi) + (1/2) log |Sk^-1|+(-0.5(xi-uk)^T Sk^-1 (xi-uk))
log fk(xi)=(-d/2) log (2pi) - (1/2) log |Sk|+(-0.5(xi-uk)^T Sk^-1 (xi-uk))
Sk=LkLk^T cholesky => log |Sk|=log |Lk||Lk^T|=log|Lk|+log|Lk^T|=2log|Lk|
(xi-uk)^T Sk^-1 (xi-uk)=(xi-uk)^T Lk^-T Lk^-1 (xi-uk)= ||Lk^-1 (xi-uk)||_2^2
log |Sk|=2log|Lk|
cv_log_det = 2 * np.sum(np.log(np.diagonal(cv_chol)))
Lk^-1 (xi-uk)
cv_sol = solve_triangular(cv_chol, (obs - mu).T, lower=True).T
-0.5_||Lk^-1 (xi-uk)||_2^2 +d_log(2pi) +2log|Lk|
log_prob[:, c] = -.5 * (np.sum(cv_sol ** 2, axis=1) +n_dim * np.log(2 * np.pi) + cv_log_det
instead it should be
-0.5_||Lk^-1 (xi-uk)||_2^2 -(d/2)log(2pi) -(1/2) 2_log|Lk|
log_prob[:, c] = -.5 * (np.sum(cv_sol ** 2, axis=1) -(n_dim/2) * np.log(2 * np.pi) -(0.5)* cv_log_det