dkobak commented on Feb 6, 2018
Path computation via path() in ElasticNet() is supposed to be faster than running fit() in a loop for each individual value of alpha. However, it is MUCH slower. For comparison, glmnet is approximately as fast when run in a loop, but computes path much faster as expected.
import glmnet_python
from glmnet import glmnet
import time
import numpy as np
from sklearn.linear_model import ElasticNet

X = np.random.randn(44,3000)
y = np.random.randn(44,1)
alphas = np.arange(.1,3,.1)[::-1]  # in decreasing order

t = time.time()
regr = ElasticNet()
_, coefs, _ = regr.path(X, y, l1_ratio = .5, alphas = alphas)   
print((time.time() - t) * 1000)

t = time.time()
for a in alphas:
    regr = ElasticNet(random_state=0, alpha=a, l1_ratio=.5)
    regr.fit(X, y)
print((time.time() - t) * 1000)

t = time.time()
fit = glmnet(x = X, y = y, alpha = .5, lambdau = alphas)
print((time.time() - t) * 1000)

t = time.time()
for a in alphas:
    fit = glmnet(x = X, y = y, alpha=.5, lambdau=np.array([a]))
print((time.time() - t) * 1000)
This outputs
160.9516143798828
44.300079345703125
7.50279426574707
42.6175594329834