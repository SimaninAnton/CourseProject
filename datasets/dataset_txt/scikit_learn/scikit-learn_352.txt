Contributor
cvesteghem commented on Aug 7, 2019
Hi all,
While trying to do logistic regression with cross validation (LogisticRegressionCV), I noticed that changing the random_state does not seem to have any impact on the results. On the other hand, shuffling the data set using pandas sample function does lead to small differences as expected.
Code example
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.linear_model import LogisticRegressionCV

data = load_iris()
data_df = pd.DataFrame(data['data'], columns=data['feature_names'])
versicolor_series = pd.Series(data['target']).apply(lambda x: 1 if x==1 else 0)
data_df['versicolor'] = versicolor_series

results_df = pd.DataFrame()

for index in range(0,20):
    #data_df = data_df.sample(frac=1) <= uncomment this line
    
    X_df = data_df.copy().drop(['versicolor'], axis = 1)
    y = data_df['versicolor'].values
    
    clf = LogisticRegressionCV(
        cv=5, 
        random_state=index,
        max_iter=10000,
        tol=1e-7,
        Cs=np.logspace(-4.0, 4.0, num=21)
    ).fit(X_df.values, y)
    
    results_df.loc[index, 'score'] = clf.score(X_df.values, y)
    coefs = pd.DataFrame(clf.coef_[0], columns=['coef'])
    selected_coefs = coefs.loc[coefs['coef'] != 0]
    results_df.loc[index, 'var_count'] = len(selected_coefs.index)
    results_df.loc[index, 'weight'] = 1/clf.C_

results_df
Expected Results
Some variations as in the sample(frac=1) case.
Actual Results
No variation at all.
Versions
MacOS 10.14.6
Python 3.6.4
Jupyter 1.0.0
pandas 0.24.2
numpy 1.14.0
scikit-learn 0.21.2