david-hoffman commented on Aug 21, 2015
I've been using the RANSAC algorithm to detrend image data containing Gaussian shaped peaks. Basically I assume that the underlying data can be accurately modeled as inliers and outliers where the inliers are the background and can be described by a low order polynomial and the outliers are represent the peak I'm interested.
However, every once in a while the RANSACRegressor's fit method will throw an error:
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-124-25260863dd62> in <module>()
     50         print("X_'s shape is {}".format(X_.shape))
     51         print("Vector's shape is {}".format(vector.shape))
---> 52         raise e

<ipython-input-124-25260863dd62> in <module>()
     45 for j in range(10000):
     46     try:
---> 47         clf.fit(X_, vector)
     48     except ValueError as e:
     49         print(j)

C:\Anaconda3\lib\site-packages\sklearn\linear_model\ransac.py in fit(self, X, y)
    299             # score of inlier data set
    300             score_subset = base_estimator.score(X_inlier_subset,
--> 301                                                 y_inlier_subset)
    302 
    303             # same number of inliers but worse score -> skip current random

C:\Anaconda3\lib\site-packages\sklearn\base.py in score(self, X, y, sample_weight)
    326 
    327         from .metrics import r2_score
--> 328         return r2_score(y, self.predict(X), sample_weight=sample_weight)
    329 
    330 

C:\Anaconda3\lib\site-packages\sklearn\linear_model\base.py in predict(self, X)
    153             Returns predicted values.
    154         """
--> 155         return self.decision_function(X)
    156 
    157     _center_data = staticmethod(center_data)

C:\Anaconda3\lib\site-packages\sklearn\linear_model\base.py in decision_function(self, X)
    136         check_is_fitted(self, "coef_")
    137 
--> 138         X = check_array(X, accept_sparse=['csr', 'csc', 'coo'])
    139         return safe_sparse_dot(X, self.coef_.T,
    140                                dense_output=True) + self.intercept_

C:\Anaconda3\lib\site-packages\sklearn\utils\validation.py in check_array(array, accept_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features)
    358             raise ValueError("Found array with %d sample(s) (shape=%s) while a"
    359                              " minimum of %d is required."
--> 360                              % (n_samples, shape_repr, ensure_min_samples))
    361 
    362     if ensure_min_features > 0 and array.ndim == 2:

ValueError: Found array with 0 sample(s) (shape=(0, 3)) while a minimum of 1 is required.
Here's a code snippet that will produce the error:
import numpy as np
from sklearn.preprocessing import PolynomialFeatures
from sklearn import linear_model

data = np.array([[ 135,  133,  143,  153,  155,  148,  165,  166,  131,  136,  128,
         134,  128],
       [ 135,  130,  145,  169,  228,  278,  244,  236,  226,  151,  145,
         133,  142],
       [ 139,  152,  200,  232,  347,  497,  500,  500,  380,  244,  181,
         158,  142],
       [ 161,  167,  241,  407,  666,  916, 1009,  889,  592,  409,  233,
         188,  162],
       [ 158,  184,  323,  581, 1024, 1533, 1561, 1521, 1018,  624,  331,
         208,  152],
       [ 187,  194,  369,  773, 1444, 1860, 2094, 2001, 1373,  773,  369,
         210,  178],
       [ 201,  247,  400,  808, 1549, 2140, 2390, 2123, 1568,  850,  387,
         229,  200],
       [ 185,  204,  342,  775, 1258, 1858, 2151, 2004, 1335,  728,  367,
         232,  189],
       [ 190,  193,  329,  506,  892, 1231, 1416, 1279,  915,  489,  290,
         227,  219],
       [ 212,  205,  214,  360,  504,  738,  799,  716,  529,  326,  279,
         214,  220],
       [ 180,  215,  209,  258,  279,  329,  396,  343,  313,  271,  223,
         250,  214],
       [ 169,  223,  184,  220,  212,  227,  258,  239,  245,  278,  274,
         242,  188],
       [ 177,  172,  195,  199,  235,  255,  230,  230,  217,  241,  223,
         170,  182]], dtype=uint16)

x = np.arange(data.shape[1])
y = np.arange(data.shape[0])

xx, yy = np.meshgrid(x,y)

#We have to take our 2D data and transform it into a list of 2D coordinates
X = np.dstack((xx.ravel(),yy.ravel())).reshape((np.prod(data.shape),2))

#We have to ravel our data so that it is a list of points
vector = data.ravel()

#now we can continue as usual
predict= X
poly = PolynomialFeatures(1)
X_ = poly.fit_transform(X)
predict_ = poly.fit_transform(predict)
clf = linear_model.RANSACRegressor()
for j in range(10000):
    try:
        clf.fit(X_, vector)
    except ValueError as e:
        print(j)
        print("X_'s shape is {}".format(X_.shape))
        print("Vector's shape is {}".format(vector.shape))
        raise e
The error will be thrown at seemingly random times, for one particular run the output before the error above was:
171
X_'s shape is (169, 3)
Vector's shape is (169,)
Perhaps the data is being changed somewhere in the pipe?
My shitty workaround for this is to wrap the fit function in a short loop to try it a few times before raising the error:
for i in range(10):
    try:
        clf.fit(X_, vector)
    except ValueError as e:
        if i == 9:
            raise e
    else:
        break