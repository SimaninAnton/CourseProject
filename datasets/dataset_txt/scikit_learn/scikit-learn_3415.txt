pkch commented on Nov 10, 2015
For testing/replicability, it is often important to have the entire execution controlled by a seed for the pseudo-random number generator. In pure python, it can be done with random.seed(s). In numpy with numpy.random.seed(s). It seems that sklearn requires this to be done in every place separately; it's rather troublesome, and especially so since it's not immediately obvious where it's needed (for example, DummyClassifier needs one, but BernoulliNB doesn't).
I thought it would worth implementing something like np.random.seed(s) functionality, which seeds the entire execution of sklearn, for all its functions and classes?