Member
ogrisel commented on Mar 21, 2014
In recent scipy (I think after 0.13.3) built against the reference lapack implementation (not the Atlas variant) the following test fails:
======================================================================
ERROR: Test that linear regression also works with sparse data
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/ogrisel/venvs/py27/lib/python2.7/site-packages/nose/case.py", line 197, in runTest
    self.test(*self.arg)
  File "/Users/ogrisel/code/scikit-learn/sklearn/linear_model/tests/test_base.py", line 77, in test_linear_regression_sparse
    ols.fit(X, y.ravel())
  File "/Users/ogrisel/code/scikit-learn/sklearn/linear_model/base.py", line 367, in fit
    out = lsqr(X, y)
  File "/Users/ogrisel/code/scipy-openblas/scipy/sparse/linalg/isolve/lsqr.py", line 436, in lsqr
    test3 = 1 / acond
ZeroDivisionError: float division by zero
This is a linear regression (ordinary least squares) on sparse data using the scipy sparse solver. The exact code of the test is:
def test_linear_regression_sparse(random_state=0):
    "Test that linear regression also works with sparse data"
    random_state = check_random_state(random_state)
    n = 100
    X = sparse.eye(n, n)
    beta = random_state.rand(n)
    y = X * beta[:, np.newaxis]

    ols = LinearRegression()
    ols.fit(X, y.ravel())
    assert_array_almost_equal(beta, ols.coef_ + ols.intercept_)
    assert_array_almost_equal(ols.residues_, 0)
The tests pass if X is converted to an array and the matrix multiplication replaced by np.dot. As the identity matrix is well conditioned and the beta are non-zero:
>>> np.any(np.random.RandomState(0).rand(100) == 0)
False
the OLS solver should be able to recover the exact betas. Before trying to transform it as a scipy-only code snippet I would like to have the confirmation that this is indeed a scipy bug and not a bug in our test.