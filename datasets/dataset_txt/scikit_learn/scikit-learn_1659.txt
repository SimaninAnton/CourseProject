bobv57 commented on Dec 25, 2017 â€¢
edited
Description
When I do a 50:50 split of the mushrooms data (found in the LIBSVM repository: https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/binary.html#mushrooms) to create training and testing samples and then run a simple linear SVM to estimate a model, I get 100% accuracy for the training sample and 73% for the test sample.
If I do the same using either of the packages, in R (e1071 or kernlab), I get perfect prediction for both both training and test samples (which is also consistent with reports that I find via a google search). I've rerun the estimation using different random samples, to ensure that this isn't an unusual sampling error, but the results are always the same, with slight variations in percentages (but at least a 25% gap, between test and train)
Steps/Code to Reproduce
python
from sklearn.externals.joblib import Memory
from sklearn.datasets import load_svmlight_file
from scipy.sparse import csc_matrix
from scipy import sparse
from sklearn.preprocessing import normalize
import numpy as np
import pandas as pd
from copy import copy
from sklearn import svm
import time
mem = Memory("./mycache")
def get_data():
data = load_svmlight_file('/folder/mushrooms.txt')
return data[0], data[1]
X, Z = get_data()
sample_size = np.castnp.int16
x = pd.DataFrame(X.todense())
idx = np.random.choice(np.arange(len(Z)), sample_size, replace=False)
zsorted = Z[idx]
xsorted = x.iloc[idx]
notz = Z[-idx]
notx = x.iloc[~idx]
y = 2zsorted-3
y_test = 2notz-3
fullModel = svm.SVC(kernel='linear')
fullModel.fit(xsorted, y)
print(fullModel.score(xsorted, y), fullModel.score(notx,y_test))
Expected Results
1.0 1.0
Actual Results
1.0 0.727496537929
Versions
Darwin-16.7.0-x86_64-i386-64bit
Python 3.5.2 |Anaconda 4.1.1 (x86_64)| (default, Jul 2 2016, 17:52:12)
[GCC 4.2.1 Compatible Apple LLVM 4.2 (clang-425.0.28)]
NumPy 1.13.1
SciPy 0.17.1
Scikit-Learn 0.18