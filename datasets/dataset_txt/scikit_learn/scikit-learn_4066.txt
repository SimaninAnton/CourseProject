Member
raghavrv commented on Jan 17, 2015
I would like to know your views on the addition of a simple (wrt to usage) PR helper script...
I am thinking of the below features.
Do not touch the existing travis scripts.
Run all the tests for only the part of the code that is changed by the current branch
Construct a module dependency tree.
See the files affected by the diff between the current branch and master
Collect all the modules contained in those files that have been changed
run selective nosetests:test_name on all test_name-s from all test_* files that use any of those module(s).
Once #4077 is fixed and docstring tests are introduced, run appropriate doc string tests. ( From previous experience, the tests took around 1 or 2 seconds only, so could be run for the entire code base without computing diffs )
Run a flake8 test on the diff.
If any file is added to the examples directory run make doc selectively on that file.
Know the changed file(s) by diff master...branch
Temporarily rm all other files ( to speed up the doc build process )
run make doc silently
checkout -- examples to revert the deletion of the other files.
Print the file names of the newly generated HTML files.
(This might be a little too much) From the git blame of the changed files print the top two authors of those particular files who might be interested in the change.
The most important point regarding such a script is that, there is no PASS or FAIL... the output is supposed to be just helpful in fixing common issues like doc layout / docstring / pep8 / tests etc...
Sample usage should be :
$ sudo python check_branch.py --check

Verifying if there are any uncommitted changes - OK
# If not terminate script warning that they either need to commit all changes or stash it before running this script.
[ Checking ############################################################### - 100% ]

Files changed
------------------
* sklearn/multiclass.py +10-18

Modules changed
-----------------------
* sklearn.multiclass.OneVsOneClassifier
* sklearn.multiclass.OneVsRestClassifier

Modules affected
----------------------
* In sklearn.multiclass, 2 modules ( OneVsOneClassifier, ...... )

# If all modules under multiclass are affected
* In sklearn, 1 module (multiclass)

For a detailed list see `check_branch/modules_affected.txt`

Tests to be run
--------------------
* In `sklearn/tests/` 5 tests (test_common:test_abcd, test_multiclass...)
* In `sklearn/preprocessing/tests` 1 test (test_data:test_abcd)

For a detailed list see `check_branch/test_list.txt`

PyFlakes issues found                      # Applied only for the diff
----------------------------
* In `sklearn/preprocessing.py` 5 issues at lines ( 254, 333, 112, 222, 334 )

WARNING : Not all PyFlakes issues need to be fixed. Preference to functionality and 
code readability must be the top priority.

For a detailed list see `check_branch/pyflakes_issues.txt`

PEP8 issues
----------------
* In `sklearn/preprocessing.py` 5 issues at lines ( 254, 333, 112, 222, 334 )

WARNING : Not all pep8 issues need to be fixed. Preference to code readability must be 
the top priority

For a detailed list of all issues see `check_branch/pep8_issues.txt`

Docstring Issues found
-----------------------------

Formatting issues :
* In `sklearn.abcd.efgh` docstring line 1 - docstring are to be formatted with 1 liner followed by explanation.
* In `sklearn.abcd.efgh` docstring line 5 - Incorrect indenting
* In `sklearn.abcd.efgh` docstring line 8 - Incorrect indenting

Numpy doc format check :
* In * In `sklearn.abcd.efgh` docstring 8th line - parameter names must be followed by space before :

Signature docstring mismatch:
* In `sklearn.preprocessing.abcd` in argspec ['foo', 'bar']
* In `sklearn.preprocessing.efgh` in doc ['abc', 'eee']

Unknown sections:
* In `sklearn.abcd.efgh` - Unknown section "Parameter"

Doc test
----------

There were 5 doc text failures

For more see `check_branch/doc_test_failures.txt`

New Examples
-------------------

No new examples were added

# or

1 New example added at `examples/PATH/example.py`

Output will be available after building the doc at `doc/build/html/stable/auto_examples/PATH/example.html`

Possible Authors concerned with the changes
----------------------------------------------------------

Author1 Name <email@email.com> - github id : auth1
Author2 Name <email@email.com> - github id : auth2

WARNING : This is based on the top committers for the changed files. The authors may not
be happy about yourself contacting them out of the blue. Use this as a reference to see possible
people you could talk to regarding the change.


WARNING
-------------
These information are only supposed to be helpful in the process of cleaning up the code / verifying docs etc... and are not absolute or fool proof.
Please use them wisely :P
$ sudo python check_branch.py --actions

Would you like to run all the required tests? 
You can also disable the tests that is supposed to be run by deleting the respective entry at 
`check_branch/tests_list.txt`, before pressing Y
'Y'es / 'N'o / 'E'xit    : n
There were a few newly added examples / changes to docstring. Would you like to build the docs? 'Y'es / 'N'o / 'E'xit.   : y
Would you like to list all the docstring issues? 'Y'es / 'N'o / 'E'xit  : n
Would you like to list all the PyFlakes issues? 'Y'es / 'N'o / 'E'xit  : n
Would you like to list all the PEP8 issues? 'Y'es / 'N'o / 'E'xit  : n
Motivated by :
Last line of @amueller's comment here
Last line of @jnothman's comment here
Plus - Simpler testing and easier diagnosis...
Minus - A huge script ( perhaps around 500 lines ) to be maintained as a tradeoff for simpler testing and diagnosis...
Any thoughts?
@amueller @ogrisel @jnothman