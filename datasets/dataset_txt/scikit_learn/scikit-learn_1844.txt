csbrown commented on Oct 10, 2017
Description
KNeighborsClassifier seems to work for various sparse matrices, but the various formats are disallowed in the code for some reason
Steps/Code to Reproduce
From the source code:
    class NeighborsBase...
        ....
        def _fit(self....
            ....
            X = check_array(X, accept_sparse='csr')
            ....
However, I can fool the classifier into accepting a dok_matrix:
from sklearn.neighbors import KNeighborsClassifier as KNN
from scipy.sparse import dok_matrix as dok
mat_x = dok([[1,2],[3,4]])
mat_y = [0,1]
mat_x.format = "csr"
a = KNN(n_neighbors=1)
a.fit(mat_x, mat_y)
assert a.predict([[1,2.1]]) == 0
assert a.predict([[3.1,3.9]]) == 1
assert a._fit_X.format == "dok"
And it just works. Is there some good reason to disallow users from using other sparse matrix formats? Specifically, I have a use case where I have a custom sparse matrix format that I have created and have to use for performance reasons. I can make it work by monkey patching everything, but I think it would be okay to just change this one line to accept_sparse=True. Also, this would be more pythonically EAFP, instead of LBYL.
Expected Results
Fail gracefully if the method genuinely cannot handle the passed in type, else allow me to duck type my way to fun and profit.
Actual Results
Method forces conversion regardless of user preferences.
Versions
Linux-4.4.0-83-generic-x86_64-with-Ubuntu-16.04-xenial
('Python', '2.7.12 (default, Nov 19 2016, 06:48:10) \n[GCC 5.4.0 20160609]')
('NumPy', '1.11.2')
('SciPy', '0.18.1')
('Scikit-Learn', '0.18.1')