Member
ogrisel commented on Apr 1, 2014
On the current master, with various versions of numpy and scipy all built against ubuntu's ATLAS BLAS/LAPACK the test pass:
https://jenkins.shiningpanda-ci.com/scikit-learn/
On travis with the master branch, which either test old Ubuntu numpy versions and scipy with ATLAS or latest stable versions of numpy and scipy against anaconda the test pass as well (although I am not actually sure that the anaconda setup is working as expected, see later):
https://travis-ci.org/scikit-learn/scikit-learn
On my OSX box with latest numpy and scipy built against OSX BLAS (Accelerate) I get the failure:
======================================================================
FAIL: sklearn.linear_model.tests.test_least_angle.test_lars_drop_for_good
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/ogrisel/venvs/py34-testwheels/lib/python3.4/site-packages/nose/case.py", line 198, in runTest
    self.test(*self.arg)
  File "/Users/ogrisel/venvs/py34-testwheels/lib/python3.4/site-packages/sklearn/linear_model/tests/test_least_angle.py", line 368, in test_lars_drop_for_good
    assert_array_almost_equal(lars_obj / cd_obj, 1.0, decimal=3)
  File "/Users/ogrisel/venvs/py34-testwheels/lib/python3.4/site-packages/numpy/testing/utils.py", line 811, in assert_array_almost_equal
    header=('Arrays are not almost equal to %d decimals' % decimal))
  File "/Users/ogrisel/venvs/py34-testwheels/lib/python3.4/site-packages/numpy/testing/utils.py", line 644, in assert_array_compare
    raise AssertionError(msg)
AssertionError:
Arrays are not almost equal to 3 decimals

(mismatch 100.0%)
 x: array(0.6492867988524876)
 y: array(1.0)
I can reproduce that both under Python 3.4 and Python 2.7.
This same failure can also be observed in this branch where I configured travis to use numpy 1.6.2 and scipy 0.11.0 from Anaconda (linked against the MKL): #3022
Note that the 3.3 job is also built using Anaconda but the latest numpy and scipy and MKL and the test pass...
I also observed the same failure on windows 64bit with a numpy built against OpenBLAS: #3008
What is weird with this failure is that the objective function is lower for LARS than for the Coordinate Descent Lasso even though the latter converges based on its dual gab criterion (I tried to play with the tolerance level, it does not change the outcome).
So the problem seem to be a numerical stability issue in the coordinate descent code rather than the LARS code but I am not 100% sure. I will go on investigating.