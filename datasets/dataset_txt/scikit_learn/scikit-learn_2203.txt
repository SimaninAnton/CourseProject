alexmorley commented on May 15, 2017
Description
For some reason the code below is using all available cores even though I have set n_jobs equal to 1.
Steps/Code to Reproduce
Example:
    import numpy as np
    from sklearn import linear_model
    
    liReg = linear_model.LinearRegression(n_jobs=1)
    
    a = np.random.rand(10000,20)
    b = np.random.rand(10000)
    
    for i in range(1000):
        liReg.fit(a, b)
        liReg.predict(a)
Expected Results
One CPU is used.
Actual Results
Multiple CPUs are used. (No problem using v0.17)
Here is the output of time python example.py:
Using 0.17 - just uses one core:
real    0m8.381s
user    0m6.387s
sys     0m1.677s
Using 0.18 - uses all cores:
real    0m32.308s # I guess longer due to overhead of parallel process management
user    2m53.612s
sys     20m48.285s
Versions
import platform; print(platform.platform())
Linux-4.10.10-200.fc25.x86_64-x86_64-with-fedora-25-Twenty_Five
import sys; print("Python", sys.version)
('Python', '2.7.13 (default, Jan 12 2017, 17:59:37) \n[GCC 6.3.1 20161221 (Red Hat 6.3.1-1)]')
import numpy; print("NumPy", numpy.version)
('NumPy', '1.11.3')
import scipy; print("SciPy", scipy.version)
('SciPy', '0.18.1')
import sklearn; print("Scikit-Learn", sklearn.version)
('Scikit-Learn', '0.18.1')