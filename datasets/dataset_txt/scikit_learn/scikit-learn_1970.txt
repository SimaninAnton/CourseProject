Member
jnothman commented on Aug 16, 2017
Related to #2755 and #7346 .
BaseEstimator.get_params has logic which:
sets a warnings filter to always show DeprecationWarnings. Always. Even if they're not from scikit-learn, or triggered outside of get_params.
refuses to return from get_params a parameter (as defined by BaseEstimator._get_param_names to be a constructor parameter) whose attribute access raises a DeprecationWarning.
I find both these behaviours wrong. Clearly modifying the global warning filter setting is being a bad citizen (and doing so once per parameter is even weirder, even if duplicates are ignored by the warnings module), and we use a more circumspect formulation in sklearn.__init__ which only affects warnings coming from sklearn.*.
While we rarely use DeprecationWarnings on parameter access (e.g. through a property with the deprecated parameter's name) within Scikit-learn itself, we do tend to allow parameters that are in the process of deprecation to have effect (e.g. SGDClassifier.n_iter), to be displayed by get_params, and to be set by set_params. (No doubt this get_params implementation was written before some of the "do not validate during construction" API policies were clear.) Whose code are we going to break if we just include the deprecated parameters in get_params??
I understand that get_params should not show any DeprecationWarning. And I understand that silencing them will in all cases run risks in terms of multithreading. (I also think we need to clarify the risks of solving #2755 with locking, as I think it really should be solved ASAP. But it's a separate issue.)
Ping @ogrisel.