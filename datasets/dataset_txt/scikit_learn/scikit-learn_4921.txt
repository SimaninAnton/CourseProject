Contributor
tjanez commented on Mar 20, 2013
I've came across a use case of the DummyClassifier, where test instances contained missing values in the form of np.nan. It would be natural to handle this use case since DummyClassifier's predictions are independent of the inputted test data.
Here is a concrete example:
>>> import numpy as np
>>> from sklearn.dummy import DummyClassifier
>>> X_train = [[0], [0], [0], [0]]
>>> y_train = [1, 2, 1, 1]
>>> clf = DummyClassifier(strategy="most_frequent", random_state=0)
>>> clf.fit(X_train, y_train)
DummyClassifier(random_state=0, strategy='most_frequent')
>>> X_test = np.array([[0], [np.nan], [1], [np.nan]])
>>> clf.predict(X_train)
array([1, 1, 1, 1])
>>> clf.predict(X_test)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/tadej/Apps/scikit-learn-git/sklearn/dummy.py", line 119, in predict
    X = safe_asarray(X)
  File "/home/tadej/Apps/scikit-learn-git/sklearn/utils/validation.py", line 41, in safe_asarray
    assert_all_finite(X)
  File "/home/tadej/Apps/scikit-learn-git/sklearn/utils/validation.py", line 30, in assert_all_finite
    _assert_all_finite(X.data if sparse.issparse(X) else X)
  File "/home/tadej/Apps/scikit-learn-git/sklearn/utils/validation.py", line 19, in _assert_all_finite
    raise ValueError("Array contains NaN or infinity.")
ValueError: Array contains NaN or infinity.
>>> clf.predict_proba(X_train)
array([[ 1.,  0.],
       [ 1.,  0.],
       [ 1.,  0.],
       [ 1.,  0.]])
>>> clf.predict_proba(X_test)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/tadej/Apps/scikit-learn-git/sklearn/dummy.py", line 177, in predict_proba
    X = safe_asarray(X)
  File "/home/tadej/Apps/scikit-learn-git/sklearn/utils/validation.py", line 41, in safe_asarray
    assert_all_finite(X)
  File "/home/tadej/Apps/scikit-learn-git/sklearn/utils/validation.py", line 30, in assert_all_finite
    _assert_all_finite(X.data if sparse.issparse(X) else X)
  File "/home/tadej/Apps/scikit-learn-git/sklearn/utils/validation.py", line 19, in _assert_all_finite
    raise ValueError("Array contains NaN or infinity.")
ValueError: Array contains NaN or infinity.
So, is X = safe_asarray(X) really necessary?