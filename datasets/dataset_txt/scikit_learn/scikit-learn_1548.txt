ahara commented on Feb 19, 2018
Description
LogisticRegression with warm_start fails when number of classes increased among fit calls. If the number of the classes decreases, it silently shrinks number of classes what leads to incorrect results.
Steps/Code to Reproduce
Example 1 - shrinking number of classes:
import numpy as np
from sklearn.linear_model import LogisticRegression

clf = LogisticRegression(random_state=0, solver='sag', multi_class='ovr', warm_start=True)
clf.fit(np.array([[1., 1.], [2., 2.], [3., 3.]]), np.array([0, 1, 2]))
clf.fit(np.array([[1., 1.], [2., 2.]]), np.array([0, 1]))
clf.predict_proba(np.array([[1., 2.]]))
Example 2 - failing when more classes appears:
import numpy as np
from sklearn.linear_model import LogisticRegression

clf = LogisticRegression(random_state=0, solver='sag', multi_class='ovr', warm_start=True)
clf.fit(np.array([[1., 1.], [2., 2.]]), np.array([0, 2]))
clf.fit(np.array([[1., 1.], [2., 2.], [3., 3.]]), np.array([0, 1, 2]))
clf.predict_proba(np.array([[1., 2.]]))
Example 3 - mixing class 1 and 2:
import numpy as np
from sklearn.linear_model import LogisticRegression

clf = LogisticRegression(random_state=0, solver='sag', multi_class='ovr', warm_start=True)
clf.fit(np.array([[1., 1.], [2., 2.]]), np.array([0, 2]))
clf.fit(np.array([[1., 1.], [2., 2.]]), np.array([0, 1]))
clf.predict_proba(np.array([[1., 2.]]))
Expected Results
Model updated without error and supports online learning.
predict_proba returns array 1x3 with one probability for each class in (0, 1, 2)
When more/new classes appears, they should be supported.
Actual Results
Example 1 - vector 1x2:
array([[ 0.49948594,  0.50051406]])
Example 2:
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-71-d84e97ce5965> in <module>()
      1 clf = LogisticRegression(random_state=0, solver='sag', multi_class='ovr', warm_start=True)
      2 clf.fit(np.array([[1., 1.], [2., 2.]]), np.array([0, 2]))
----> 3 clf.fit(np.array([[1., 1.], [2., 2.], [3., 3.]]), np.array([0, 1, 2]))
      4 clf.predict_proba(np.array([[1., 2.]]))

/d0/nlpdata/jupyter/estimators_env/lib/python3.4/site-packages/sklearn/linear_model/logistic.py in fit(self, X, y, sample_weight)
   1249             self.coef_ = np.asarray(fold_coefs_)
   1250             self.coef_ = self.coef_.reshape(n_classes, n_features +
-> 1251                                             int(self.fit_intercept))
   1252 
   1253         if self.fit_intercept:

ValueError: total size of new array must be unchanged
Example 3 - vector 1x2:
array([[ 0.50023583,  0.49976417]])
Versions
Linux-2.6.32-573.12.1.el6.x86_64-x86_64-with-centos-6.7-Final
Python 3.4.3 (default, Jun 2 2015, 13:59:03)
[GCC 4.4.7 20120313 (Red Hat 4.4.7-11)]
NumPy 1.10.4
SciPy 0.15.1
Scikit-Learn 0.18.1