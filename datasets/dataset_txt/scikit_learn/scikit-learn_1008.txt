mrocklin commented on Oct 10, 2018
Description
HashingVectorizer fails when data has None values, such as comes up with missing values. It could be that this is out of scope for HashingVectorizer and that users should handle this separately, but I didn't find a related issue on this topic (surprisingly) so thought I'd bring it up just in case.
Steps/Code to Reproduce
from sklearn.feature_extraction.text import HashingVectorizer
HashingVectorizer().transform(['a', 'b', None, 'c'])
Expected Results
A scipy.sparse matrix with None treated as another value, possibly 0 or maxval for interpretability.
Actual Results
It fails when preprocessing (traceback below) but presumably we would want to short-circuit this before it got to that point.
Versions
System:
    python: 3.6.4 |Anaconda custom (64-bit)| (default, Jan 16 2018, 18:10:19)  [GCC 7.2.0]
executable: /home/mrocklin/Software/anaconda/bin/python
   machine: Linux-4.13.0-26-generic-x86_64-with-debian-stretch-sid

BLAS:
    macros: SCIPY_MKL_H=None, HAVE_CBLAS=None
  lib_dirs: /home/mrocklin/Software/anaconda/lib
cblas_libs: mkl_rt, pthread

Python deps:
       pip: 9.0.1
setuptools: 40.4.3
   sklearn: 0.21.dev0
     numpy: 1.15.1
     scipy: 1.1.0
    Cython: 0.27.3
    pandas: 0.23.4