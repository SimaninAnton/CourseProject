Member
larsmans commented on Sep 5, 2014
Reported on SO:
hv = HashingVectorizer(ngram_range=(1,3), stop_words='english', non_negative=True)
text = u'''b number  b number  b number  conclusion  no product_neg was_neg returned_neg
 for_neg evaluation_neg  review of the medd history records did not find_neg any_neg
 deviations_neg or_neg anomalies_neg  it is not suspected_neg that_neg the_neg product_neg
 failed_neg to_neg meet_neg specifications_neg  the investigation could not verify_neg or_neg
 identify_neg any_neg evidence_neg of_neg a_neg medd_neg deficiency_neg causing_neg or_neg
 contributing_neg to_neg the_neg reported_neg problem_neg  based on the investigation  the need
 for corrective action is not indicated_neg  should additional information be received that changes
 this conclusion  an amended medd report will be filed  zimmer considers the investigation closed  this
 mdr is being submitted late  as this issue was identified during a retrospective review of complaint files
'''
fail = hv.transform([text])
TfidfTransformer(sublinear_tf=True).fit_transform(fail)
crashes with a ValueError.
The problem is that the sparse matrix contains a stored zero:
>>> np.where(fail.data == 0)
(array([104]),)
which becomes a -inf in the sublinear tf transformation:
>>> fail = TfidfTransformer(sublinear_tf=True, norm=False).fit_transform(fail)
>>> np.where(np.isinf(fail.data))[0]
array([93])
and that causes normalization to fail. (The position changing seems to have to do with unsorted indices in the matrix.)