danjump commented on Apr 13, 2016
I'm doing Gaussian process regression with 2 input features. I just upgraded from the stable 0.17 to 0.18.dev0 to take advantage of GaussianProcessRegressor instead of the legacy GaussianProcess. It's not clear to me, however, how the new GaussianProcessRegressor handles multi-dimensional inputs.
I want an anisotropic fit in the two dimensions (separate kernel hyper-parameters for each dimension). As I understand it, this was accomplished in the legacy version by inputting an n_features length list for the theta arguments. Here's an example of my implementation of the legacy version:
X = <shape 2xN>
y = <shape 1xN>
dy = <shape 1xN>

nugget = (dy / y) ** 2

gp = GaussianProcess(corr='squared_exponential',
                          theta0=[1e-1, 1e-1],
                          thetaL=[1e-5, 1e-5],
                          thetaU=[10, 10],
                          nugget=nugget,
                          random_start=50,
                          verbose=True)

gp.fit(X, y)
I don't see any mention of handling multiple input features in the GaussianProcessRegressor documentation, and I don't see any comments or mention of "isotropic" or "anisotopy" in the source code either (there is in the GaussianProcess source). So I'm not sure exactly what it is doing.
Is the default assumption with GaussianProcessRegressor an isotropic fit? And is an anisotropic fit currently possible? Does it depend on the kernel you construct? I'm very much not an expert on using the kernels, but I imagine maybe if anisotropic fitting is possible it might happen through how you build your kernel. If that's the case I'd greatly appreciate some instruction, documentation or examples on how to implement that.
Here is my equivalent implementation of the non-legacy version (which i'm pretty sure is an isotropic fit):
X = <shape 2xN>
y = <shape 1xN>
dy = <shape 1xN>

nugget = (dy / y) ** 2

kernel = gaussian_process.kernels.RBF(.1, (1e-5, 10))

gp = GaussianProcessRegressor(kernel=kernel,
                              alpha=nugget,
                              n_restarts_optimizer=10)

gp.fit(X, y)
Thanks in advance for any thoughts/explanation!
P.S. - On a side note, a "verbose" option with some status printed through the fitting would be nice. Not sure if this is the right venue to mention that.
üëç 1