sabuz-262 commented on Jul 24, 2018
The GaussianProcessRegressor uses all the available cores.
For example here is my sample code which uses all the available cores.
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.gaussian_process.kernels import RBF, ConstantKernel as C
kernel = C(1.0, (1e-3, 1e3)) * RBF(10, (1e-2, 1e2))
X = []
gp = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=9)
def fun():
import numpy as np
from matplotlib import pyplot as plt
np.random.seed(1)
def f(x):
    """The function to predict."""
    return x * np.sin(x)

# ----------------------------------------------------------------------
#  First the noiseless case
#X= []
a = np.array([1])

X.append(a)

# Observations
y = f(X).ravel()

# Mesh the input space for evaluations of the real function, the prediction and
# its MSE
x = np.atleast_2d(np.linspace(0, 10, 1000)).T

# Instanciate a Gaussian Process model
# Fit to data using Maximum Likelihood Estimation of the parameters
gp.fit(X, y)
# Make the prediction on the meshed x-axis (ask for MSE as well)
y_pred, sigma = gp.predict(x, return_std=True)
print(y_pred, sigma)
for i in range(500000):
print("I VALUE ", i)
fun()
Here is the sample code which uses only one core.
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.gaussian_process.kernels import RBF, ConstantKernel as C
kernel = C(1.0, (1e-3, 1e3)) * RBF(10, (1e-2, 1e2))
X = []
gp = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=9)
def fun():
import numpy as np
from matplotlib import pyplot as plt
np.random.seed(1)

def f(x):
    """The function to predict."""
    return x * np.sin(x)

# ----------------------------------------------------------------------
#  First the noiseless case
#X= []
a = np.array([1])
if len(X) < 6:
    X.append(a)

# Observations
y = f(X).ravel()

# Mesh the input space for evaluations of the real function, the prediction and
# its MSE
x = np.atleast_2d(np.linspace(0, 10, 1000)).T

# Instanciate a Gaussian Process model



# Fit to data using Maximum Likelihood Estimation of the parameters
gp.fit(X, y)

# Make the prediction on the meshed x-axis (ask for MSE as well)
y_pred, sigma = gp.predict(x, return_std=True)
print(y_pred, sigma)
for i in range(500000):
print("I VALUE ", i)
fun()
So when we called gp.fit with more than 6 samples, it uses all the available cores. I would like to uses one core for any sample size.