austinmw commented on Oct 31, 2017 â€¢
edited
---------------------------------------------------------------------------
UnboundLocalError                         Traceback (most recent call last)
<ipython-input-64-308d097baff1> in <module>()
     12 #lasso = gsCV_lasso.best_estimator_
     13 rfecv = RFECV(estimator=lasso_cv, step=1, cv=cv3, scoring='neg_mean_squared_log_error')
---> 14 rfecv.fit(Xtrain, ytrain)

~/anaconda3/lib/python3.6/site-packages/sklearn/feature_selection/rfe.py in fit(self, X, y)
    434         scores = parallel(
    435             func(rfe, self.estimator, X, y, train, test, scorer)
--> 436             for train, test in cv.split(X, y))
    437 
    438         scores = np.sum(scores, axis=0)

~/anaconda3/lib/python3.6/site-packages/sklearn/feature_selection/rfe.py in <genexpr>(.0)
    434         scores = parallel(
    435             func(rfe, self.estimator, X, y, train, test, scorer)
--> 436             for train, test in cv.split(X, y))
    437 
    438         scores = np.sum(scores, axis=0)

~/anaconda3/lib/python3.6/site-packages/sklearn/feature_selection/rfe.py in _rfe_single_fit(rfe, estimator, X, y, train, test, scorer)
     29     X_test, y_test = _safe_split(estimator, X, y, test, train)
     30     return rfe._fit(
---> 31         X_train, y_train, lambda estimator, features:
     32         _score(estimator, X_test[:, features], y_test, scorer)).scores_
     33 

~/anaconda3/lib/python3.6/site-packages/sklearn/feature_selection/rfe.py in _fit(self, X, y, step_score)
    171                 print("Fitting estimator with %d features." % np.sum(support_))
    172 
--> 173             estimator.fit(X[:, features], y)
    174 
    175             # Get coefs

~/anaconda3/lib/python3.6/site-packages/sklearn/linear_model/coordinate_descent.py in fit(self, X, y)
   1203                 best_mse = this_best_mse
   1204 
-> 1205         self.l1_ratio_ = best_l1_ratio
   1206         self.alpha_ = best_alpha
   1207         if self.alphas is None:

UnboundLocalError: local variable 'best_l1_ratio' referenced before assignment
Steps/Code to Reproduce
Example:
import pandas as pd
import numpy as np
from sklearn.feature_selection import RFECV
from sklearn.linear_model import LassoCV
from sklearn.model_selection import KFold

Xtrain = pd.read_csv("http://www.sharecsv.com/dl/87d6632cff7269f499d9b9c4a579ba27/Xtrain.csv")
ytrain = pd.read_csv("http://www.sharecsv.com/dl/1acd4ed92d022c921a79fc4c9e1d4eb1/ytrain.csv", header=None)

Xtrain.isnull().sum().sum()
ytrain.isnull().sum().sum()
Xtrain = np.array(Xtrain)
ytrain = np.ravel(ytrain)

cv3 = KFold(n_splits=3, random_state=42, shuffle=True)
lasso_cv = LassoCV();
rfecv = RFECV(estimator=lasso_cv, step=1, cv=cv3, scoring='neg_mean_squared_log_error')
rfecv.fit(Xtrain, ytrain)
LassoCV doesn't converge, but I'm not sure if that's the issue.
Versions
Darwin-16.7.0-x86_64-i386-64bit
Python 3.6.3 |Anaconda, Inc.| (default, Oct 6 2017, 12:04:38)
[GCC 4.2.1 Compatible Clang 4.0.1 (tags/RELEASE_401/final)]
NumPy 1.13.3
SciPy 0.19.1
Scikit-Learn 0.19.1