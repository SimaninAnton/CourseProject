ValentinCalomme commented on Nov 13, 2017
Description
sklearn.metrics like accuracy_score or f1_score for instance can be used on float and string arrays alike. However, it doesn't work on custom objects that implement __eq__() to define whether two objects are equal, which in hindsight is all one needs to compute accuracy.
Let's say that my model takes in custom objects and does a nearest-neighbor classification, my output and target output would obviously be objects, but then it means that I can't use the built-in metrics already provided in the package.
Steps/Code to Reproduce
import numpy as np
from sklearn.metrics import accuracy_score, f1_score

class Test(object):
    def __init__(self, dict):
        self.dict = dict

    def __eq__(self, other):
        return self.dict["value"] == other.dict["value"]


t1 = Test({"value":0})
t2 = Test({"value":1})
t3 = Test({"value":0})
t4 = Test({"value":1})
t5 = Test({"value":1})
t6 = Test({"value":0})
t7 = Test({"value":0})
t8 = Test({"value":1})

x0 = np.array([t1,t2,t3,t4])
x1 = np.array([t5,t6,t7,t8])

accuracy_score(x0, x1)
Expected Results
>>> 0.5
No error should be thrown as long as __eq__ is implemented. A warning could be thrown to avoid issues.
Actual Results
Traceback (most recent call last):
  File "C:/Users/vca/Source/NLP/entity/__init__.py", line 30, in <module>
    print(accuracy_score(x0, x1))
  File "C:\Users\vca\AppData\Local\Continuum\anaconda3\envs\nlp\lib\site-packages\sklearn\metrics\classification.py", line 176, in accuracy_score
    y_type, y_true, y_pred = _check_targets(y_true, y_pred)
  File "C:\Users\vca\AppData\Local\Continuum\anaconda3\envs\nlp\lib\site-packages\sklearn\metrics\classification.py", line 88, in _check_targets
    raise ValueError("{0} is not supported".format(y_type))
ValueError: unknown is not supported
Versions
Windows-10-10.0.16299-SP0
Python 3.5.1 |Continuum Analytics, Inc.| (default, Jun 15 2016, 15:29:36) [MSC v.1900 64 bit (AMD64)]
NumPy 1.13.3
SciPy 1.0.0
Scikit-Learn 0.19.1