Contributor
CatChenal commented on Aug 24, 2019
weights should be passed as list or array (not just list) in sklearn\datasets\samples_generator.py :: make_classification:
If there is a pertinent reason that weights must be a list, while all other iterable parameters are arrays, then it should be mentioned in the docstring. Otherwise, the docstring should be amended as in make_blobs, e.g. "weights : list of floats or None (default=None)" -> "weights : sequence of floats or None (default=None)", along with amended lines 165 and 171 (see Corrections).
Test code to reproduce:
print('Testing weights type in `datasets.make_classification`:')
# using defaults except for weights (& random_state=1):

w = [0.25, 0.75]
print('  Test 1: weights as List {}'.format(w))
X, y = make_classification(weights=w, random_state=1)
print('  Test 1 result: len(X)={}, len(y)={}'.format(len(X),len(y)))

w = np.array([0.25, 0.75]) 
print('  Test 2: weights as np.array {}'.format(w))
X, y = make_classification(weights=w, random_state=1)
print('  Test 2 result: len(X)={}, len(y)={}, '.format(len(X),len(y)))
Expected Results:
Should not fail: np.array as valid as a list:
Testing weights type in `make_classification`:
  Test 1: weights as List [0.25, 0.75]
  Test 1 result: len(X)=100, len(y)=100
  Test 2: weights as np.array [0.25, 0.75]
  Test 2 result: len(X)=100, len(y)=100
Actual Results
Testing weights type in `make_classification`:
  Test 1: weights as List [0.25, 0.75]
  Test 1 result: len(X)=100, len(y)=100
  Test 2: weights as np.array [0.25, 0.75]
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-2-c297f465db24> in <module>
     13 print('  Test 2: weights as np.array {}'.format(w))
     14 X, y = make_classification(weights=w,
---> 15                            random_state=1)
     16 print('  Test 2 result: len(X)={}, len(y)={}, '.format(len(X),len(y)))

~\Anaconda3\envs\dsml\lib\site-packages\sklearn\datasets\samples_generator.py in make_classification(n_samples, n_features, n_informative, n_redundant, n_repeated, n_classes, n_clusters_per_class, weights, flip_y, class_sep, hypercube, shift, scale, shuffle, random_state)
    163         raise ValueError("n_classes * n_clusters_per_class must"
    164                          " be smaller or equal 2 ** n_informative")
--> 165     if weights and len(weights) not in [n_classes, n_classes - 1]:
    166         raise ValueError("Weights specified but incompatible with number "
    167                          "of classes.")

ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
Corrections needed (fix ready):
165     if all(weights) and (len(weights) not in [n_classes, n_classes - 1]):

171     if all(weights) and len(weights) == (n_classes - 1):
Versions:
    System:
    python: 3.6.7 (default, Feb 28 2019, 07:28:18) [MSC v.1900 64 bit (AMD64)]
executable: C:\<conda env path>\python.exe
   machine: Windows-10-10.0.18362-SP0 [same outcome with Windows-10-10.0.17134-SP0]

Python deps:
       pip: 19.1.1
setuptools: 41.0.1
   sklearn: 0.21.3
     numpy: 1.16.4
     scipy: 1.3.0
    Cython: None
    pandas: 0.24.2
#wimlds