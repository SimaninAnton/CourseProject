Contributor
glemaitre commented on Jun 21, 2018
By preparing the scipy tutorial, I stumbled into a backward-compatibility breakage. It was introduced when the outlier detection methods have been improved.
The issue is with the following code:
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs
from sklearn.ensemble import IsolationForest

X, y = make_blobs(n_features=2, centers=3, n_samples=500,
                  random_state=42)

alpha_set = 0.95
n_samples, n_features = X.shape
X_range = np.zeros((n_features, 2))
X_range[:, 0] = np.min(X, axis=0) - 1.
X_range[:, 1] = np.max(X, axis=0) + 1.

h = 0.1  # step size of the mesh
x_min, x_max = X_range[0]
y_min, y_max = X_range[1]
xx, yy = np.meshgrid(np.arange(x_min, x_max, h),
                     np.arange(y_min, y_max, h))

grid = np.c_[xx.ravel(), yy.ravel()]

iforest = IsolationForest(n_estimators=300, contamination=0.10)
iforest = iforest.fit(X)
Z_iforest = iforest.decision_function(grid)
Z_iforest = Z_iforest.reshape(xx.shape)

plt.figure()
c_0 = plt.contour(xx, yy, Z_iforest,
                  levels=[iforest.threshold_],
                  colors='red', linewidths=3)
plt.clabel(c_0, inline=1, fontsize=15,
           fmt={iforest.threshold_: str(alpha_set)})
plt.scatter(X[:, 0], X[:, 1], s=1.)
plt.show()
So it seems that now we need to had the threshold_ (or later on the offset_) to the score given by the decision function.
Results in 0.19
Results in master
Where we are of this breakage? I could not find it in the What's New.
ping @jnothman @ngoix @albertcthomas