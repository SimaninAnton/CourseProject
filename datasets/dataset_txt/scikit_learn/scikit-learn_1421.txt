bmgdc commented on Apr 18, 2018
Description
While experimenting with the KMeans algorithm I realised that the result of the first iteration, actually is the result of the second iteration. The algorithm (everywhere I see) roughly goes:
Initialize centroids.
Assign observation to its closest centroid.
Recalculate centroids.
Repeat from step 2 until convergence is attained or the required number of iterations is reached.
What the implementation of the algorithm seems to be doing in the example below is the sequence of steps 1. 2. 3. 2. but it should be 1. 2.. If you try it by hand (following for instance the Wikipedia version), you'll see that the result of the reproducible code below and the result of doing it by hand do not match.
Steps/Code to Reproduce
import numpy as np
import pandas as pd
from sklearn.cluster import KMeans

rd_list = [1, 2, 3, 21, 22, 23]
df = pd.DataFrame(rd_list, columns=["rand"])
 
kmeans = KMeans(n_clusters=2, init=(np.array([21, 22]).reshape(-1,1)), n_init=1, max_iter=1, algorithm="full")
kmeans.fit(df)
df["cluster"]=kmeans.labels_

print(kmeans.cluster_centers_)
print(df)
Expected Results
The result I expected is the dataframe generated by the code below.
pd.DataFrame(
    [[1, 0], [2, 0], [3, 0], [21, 0], [22, 1], [23, 1]],
    columns=["rd", "cluster"]
)
Actual Results
The result I got was the dataframe generated by the code below.
pd.DataFrame(
    [[1, 0], [2, 0], [3, 0], [21, 1], [22, 1], [23, 1]],
    columns=["rd", "cluster"]
)
Versions
Windows-10-10.0.16299-SP0
Python 3.6.4 |Anaconda custom (64-bit)| (default, Mar 12 2018, 20:20:50) [MSC v.1900 64 bit (AMD64)]
NumPy 1.14.2
SciPy 1.0.0
Scikit-Learn 0.19.1