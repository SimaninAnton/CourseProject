svadali16 commented on Feb 9, 2018
This is not really a bug but a new feature proposal: Is there any interest in incorporating a MultiColumnLabelEncocer as part of scikit-learn which builds on the current LabelEncoder?
I believe that most data science applications would involve encoding multiple columns and thus providing one out-of-the-box makes sense. The API I envisage (see outline below) will keep track of column specific label encoders via a dictionary which would help in further processing of the data.
Tentative API below:
class MultiColumnLabelEncoder(BaseEstimator, TransformerMixin):
    """Encode multiple columns using LabelEncoder.

    Attributes
    ----------
    column_names: list of column names to encode.
    label_encoders : dictionary to store the label encoder for each column.
    """

    def __init__(self, column_names=None):
        """Create an instance of MultiColumnLabelEncoder.

        Parameters
        ----------
        column_names: list
                                  Represents the names of the columns to be encoded.
        """
        pass

    def fit(self, y):
        """Fit label encoder for all columns.

        Parameters
        ----------
        y : array-like of shape (n_samples, n_columns)
            Target values.

        Returns
        -------
        self : returns an instance of self.
        """
        # API Note: self.label_encoders will be a dictionary whose keys will be the 
        # column names passed via the constructor.
        self.label_encoders = {}
        pass

    def transform(self, y):
        """Transform labels of each column to normalized encoding.

        Parameters
        ----------
        y : array-like of shape [n_samples, n_columns]
            Target values.

        Returns
        -------
        encoded_y : array-like of shape [n_samples, n_columns]
                            Encoded values.

        """
        pass

    def inverse_transform(self, y):
        """Transform labels of each column back to original encoding.

        Parameters
        ----------
        y : numpy array of shape [n_samples, n_columns]
            Encoded values.

        Returns
        -------
        original_y : numpy array of shape [n_samples, n_columns]
                     Original values.
        """
        pass
Comments, thoughts, criticisms of the proposal are welcome!