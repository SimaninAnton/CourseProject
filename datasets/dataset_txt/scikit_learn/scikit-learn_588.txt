Member
qinhanmin2014 commented on Apr 14, 2019 â€¢
edited
Apologies if I'm wrong, but the precision of log_logistic seems low, e.g.,
from sklearn.utils.extmath import log_logistic
def _log_logistic(x):
    if x > 0:
        return -np.log(1 + np.exp(-x))
    else:
        return x - np.log(1 + np.exp(x))
log_logistic(np.array([0]))
# array(-0.69314718)
_log_logistic(0)
# -0.6931471805599453
Influence to LogisticRegression
import numpy as np
from sklearn.datasets import load_breast_cancer
from sklearn.linear_model import LogisticRegression
X, y = load_breast_cancer(return_X_y = True)
clf = LogisticRegression(multi_class="ovr", solver="lbfgs", max_iter=15000).fit(X, y)
Result from master:
clf.coef_
array([[ 1.01050804,  0.17895457, -0.25905893,  0.02140026, -0.2003568 ,
        -0.20988453, -0.56526613, -0.33508318, -0.29114101, -0.02688328,
        -0.08861829,  1.29221281,  0.05734076, -0.10475454, -0.02960577,
         0.10547191, -0.00841385, -0.04263154, -0.03097789,  0.02038304,
         0.10609168, -0.43465924, -0.10081859, -0.01353147, -0.40391261,
        -0.63584143, -1.47450161, -0.68449778, -0.7728816 , -0.08567772]])
clf.intercept_
array([27.29377891])
Result after replacing log_logistic with a self-defined function (much slower of course):
def my_log_logistic(X):
    def _log_logistic(x):
        if x > 0:
            return -np.log(1 + np.exp(-x))
        else:
            return x - np.log(1 + np.exp(x))
    return np.frompyfunc(_log_logistic, 1, 1)(X)
clf.coef_
array([[ 1.00642264,  0.18192093, -0.27737865,  0.02283774, -0.1776882 ,
        -0.22103654, -0.53410941, -0.29303886, -0.26490315, -0.03106481,
        -0.07854142,  1.26868266,  0.10205593, -0.10789975, -0.02519131,
         0.06554361, -0.03799228, -0.03791698, -0.03600929,  0.01374479,
         0.14466696, -0.43801259, -0.10424173, -0.01380033, -0.35581705,
        -0.69783229, -1.4314314 , -0.59967961, -0.72572854, -0.09661323]])
clf.intercept_
array([28.10639654])
I found this when trying to provide a minimal implementation of typical algorithms in sklearn.
output of sklearn.show_versions:
System:
    python: 3.6.8 |Anaconda, Inc.| (default, Feb 21 2019, 18:30:04) [MSC v.1916 64 bit (AMD64)]
executable: D:\ProgramData\Anaconda3\envs\dev\python.exe
   machine: Windows-10-10.0.17134-SP0

BLAS:
    macros: 
  lib_dirs: 
cblas_libs: cblas

Python deps:
       pip: 19.0.1
setuptools: 40.8.0
   sklearn: 0.21.dev0
     numpy: 1.15.4
     scipy: 1.2.1
    Cython: 0.29.5
    pandas: 0.24.1