Contributor
mjbommar commented on May 20, 2014
Before pursuing this task, I wanted to confirm that we never want to touch .todense(), as we want all operations to use and return ndarray.
Below are instances of .todense() in current HEAD.
sklearn/utils/sparsetools/tests/test_spanning_tree.py:    npt.assert_array_equal(mintree.todense(), expected,
sklearn/utils/sparsetools/tests/test_spanning_tree.py:    npt.assert_array_equal(csgraph.todense(), graph,
sklearn/utils/sparsetools/tests/test_spanning_tree.py:    npt.assert_array_equal(mintree.todense(), expected,
sklearn/utils/sparsetools/tests/test_spanning_tree.py:        npt.assert_array_equal(mintree.todense(), expected,
sklearn/utils/tests/test_validation.py:        sp.csc_matrix(np.arange(5)).todense(),
sklearn/utils/tests/test_validation.py:        sparse_random_matrix(10, 10, density=0.10).todense()
sklearn/utils/tests/test_graph.py:                laplacian, graph_laplacian(sp_mat, normed=normed).todense())
sklearn/feature_selection/tests/test_base.py:    assert_array_equal(Xt, Xt_actual.todense())
sklearn/feature_selection/tests/test_base.py:    assert_array_equal(Xt, Xt_actual2.todense())
sklearn/feature_selection/tests/test_base.py:    assert_array_equal(Xinv, Xinv_actual.todense())
sklearn/datasets/tests/test_svmlight_format.py:    assert_array_equal(X.todense(), [[.53, .12], [.13, .1], [.87, .12]])
sklearn/datasets/tests/test_svmlight_format.py:        assert_array_equal(X.todense(), [[.53, .12], [.13, .1], [.87, .12]])
sklearn/decomposition/tests/test_pca.py:    assert_almost_equal(X.todense(), Y_inverse, decimal=2)
sklearn/cluster/bicluster/tests/test_utils.py:            submatrix = submatrix.todense()
sklearn/cluster/bicluster/tests/test_utils.py:            X = X.todense()
sklearn/cluster/tests/test_spectral.py:            y_true_noisy = (y_indicator.todense()
sklearn/cluster/tests/test_hierarchical.py:                connectivity.todense()[:10, :10]),
sklearn/cluster/tests/test_hierarchical.py:        connectivity=connectivity.todense(),
sklearn/metrics/metrics.py:        ).todense()
sklearn/feature_extraction/image.py:        return graph.todense()
sklearn/preprocessing/tests/test_imputation.py:    Y = sparse_random_matrix(l, 1, density=0.10).todense()
sklearn/preprocessing/tests/test_imputation.py:    X = X_orig.copy().todense()
sklearn/preprocessing/tests/test_imputation.py:    X = X_orig.copy().todense()
sklearn/svm/tests/test_sparse.py:                              sp_clf.support_vectors_.todense())
sklearn/svm/tests/test_sparse.py:    assert_array_almost_equal(clf.dual_coef_, sp_clf.dual_coef_.todense())
sklearn/svm/tests/test_sparse.py:    assert_array_almost_equal(clf.coef_, sp_clf.coef_.todense())
sklearn/svm/tests/test_sparse.py:                              sp_clf.support_vectors_.todense())
sklearn/svm/tests/test_sparse.py:    assert_array_almost_equal(clf.dual_coef_, sp_clf.dual_coef_.todense())
sklearn/svm/tests/test_sparse.py:    assert_array_almost_equal(clf.coef_, sp_clf.coef_.todense())
sklearn/svm/tests/test_sparse.py:        clf = svm.SVC(kernel=k).fit(iris.data.todense(), iris.target)
sklearn/svm/tests/test_sparse.py:                                  sp_clf.support_vectors_.todense())
sklearn/svm/tests/test_sparse.py:        assert_array_almost_equal(clf.dual_coef_, sp_clf.dual_coef_.todense())
sklearn/svm/tests/test_sparse.py:            clf.predict(iris.data.todense()), sp_clf.predict(iris.data))
sklearn/svm/tests/test_sparse.py:            assert_array_almost_equal(clf.coef_, sp_clf.coef_.todense())
sklearn/svm/tests/test_sparse.py:    clf = svm.LinearSVC(random_state=0).fit(iris.data.todense(), iris.target)
sklearn/svm/tests/test_sparse.py:        clf.predict(iris.data.todense()), sp_clf.predict(iris.data))
sklearn/svm/tests/test_sparse.py:    assert_array_almost_equal(pred, clf.predict(iris.data.todense()))
sklearn/svm/tests/test_sparse.py:    clf = svm.SVC(kernel='linear').fit(X.todense(), y)
sklearn/svm/tests/test_sparse.py:    assert_array_equal(clf.support_vectors_, sp_clf.support_vectors_.todense())
sklearn/svm/tests/test_sparse.py:    assert_array_equal(clf.dual_coef_, sp_clf.dual_coef_.todense())
sklearn/manifold/tests/test_locally_linear.py:        A.todense(),
sklearn/manifold/tests/test_locally_linear.py:    assert_array_almost_equal(np.sum(A.todense(), 1), np.ones((3, 1)))
sklearn/manifold/tests/test_locally_linear.py:    pred = np.dot(A.todense(), X)
sklearn/manifold/tests/test_locally_linear.py:    N = barycenter_kneighbors_graph(X, clf.n_neighbors).todense()
sklearn/manifold/spectral_embedding_.py:                laplacian = laplacian.todense()
sklearn/neighbors/graph.py:    >>> A.todense()
sklearn/neighbors/graph.py:    >>> A.todense()
sklearn/neighbors/base.py:        >>> A.todense()
sklearn/neighbors/base.py:        >>> A.todense()
sklearn/linear_model/tests/test_sparse_coordinate_descent.py:    assert_equal(clf.sparse_coef_.todense().tolist()[0], clf.coef_)
sklearn/linear_model/tests/test_sparse_coordinate_descent.py:    d_clf.fit(X_train.todense(), y_train)
sklearn/linear_model/tests/test_sparse_coordinate_descent.py:    d_clf.fit(X_train.todense(), y_train)
sklearn/linear_model/tests/test_sparse_coordinate_descent.py:        ignore_warnings(clfd.fit)(X.todense(), y)
sklearn/linear_model/tests/test_sparse_coordinate_descent.py:        ignore_warnings(clfd.fit)(X.todense(), y)