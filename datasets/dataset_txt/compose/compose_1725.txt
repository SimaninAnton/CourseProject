esatanu commented on 5 Feb 2017 â€¢
edited by shin-
Setting an environment variable in the docker-compose file does not update the value in the command field. The value of the variable that's used is an old value which has since been changed.
This is the relevant portion of the compose file :
services:
  rabbitmq:
    image: rabbitmq:3-management
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ./data/rabbitmq:/var/lib/rabbitmq
      - /etc/localtime:/etc/localtime:ro
  master:
    build:
      context: ./worker
      dockerfile: Dockerfile
    environment:
      - testDir=/home/scalability/stats/MDMS/Elrond/2.7.000/20170204T1837/20170204T1843-T0_VM_18_IR_30_IT_1200_TR_35_TT_4112_API_0
    image: satish/worker
    depends_on:
      - rabbitmq
    volumes:
      - /home/mdmsadmin/obim/script:/opt
      - /home/scalability/stats/MDMS:/home/scalability/stats/MDMS
      - /mnt:/mnt
      - /var/log:/var/log
      - /etc/localtime:/etc/localtime:ro
    command: bash -c "while ! nc -z rabbitmq 5672; do echo "waiting for rabbit to start listening" ; sleep 2; done; python master_log.py --dir $${testDir};"
  worker:
    image: satish/worker
    depends_on:
      - rabbitmq
      - master
    command: bash -c "while ! nc -z rabbitmq 5672; do echo "waiting for rabbit to start listening" ; sleep 2; done; python worker_log.py ;"
    volumes_from:
      - master
In this case, when I run docker-compose scale rabbitmq=1 master=1 worker=5, the "testDir" value that's replaced is not the one that set in the env variable i.e. "/home/scalability/stats/MDMS/Elrond/2.7.000/20170204T1837/20170204T1843-T0_VM_18_IR_30_IT_1200_TR_35_TT_4112_API_0", but instead, it's one that was set earlier during an earlier run. I read that the environment variables are set everytime the containers that carry the services run. Since that is not happening here, is this a bug?
I am not sure of the steps to reproduce, but from my description, if someone could try something similar, would be very useful.
Output of docker version:
docker-compose version 1.9.0, build 2585387
Output of docker info:
Containers: 9
Running: 6
Paused: 0
Stopped: 3
Images: 11
Server Version: 1.12.5
Storage Driver: devicemapper
Pool Name: docker-253:0-18749-pool
Pool Blocksize: 65.54 kB
Base Device Size: 10.74 GB
Backing Filesystem: xfs
Data file: /dev/loop0
Metadata file: /dev/loop1
Data Space Used: 1.134 GB
Data Space Total: 107.4 GB
Data Space Available: 4.603 GB
Metadata Space Used: 4.03 MB
Metadata Space Total: 2.147 GB
Metadata Space Available: 2.143 GB
Thin Pool Minimum Free Space: 10.74 GB
Udev Sync Supported: true
Deferred Removal Enabled: false
Deferred Deletion Enabled: false
Deferred Deleted Device Count: 0
Data loop file: /var/lib/docker/devicemapper/devicemapper/data
WARNING: Usage of loopback devices is strongly discouraged for production use. Use --storage-opt dm.thinpooldev to specify a custom block storage device.
Metadata loop file: /var/lib/docker/devicemapper/devicemapper/metadata
Library Version: 1.02.135-RHEL7 (2016-09-28)
Logging Driver: json-file
Cgroup Driver: cgroupfs
Plugins:
Volume: local
Network: bridge null overlay host
Swarm: inactive
Runtimes: runc
Default Runtime: runc
Security Options: seccomp
Kernel Version: 3.10.0-514.el7.x86_64
Operating System: CentOS Linux 7 (Core)
OSType: linux
Architecture: x86_64
CPUs: 2
Total Memory: 7.64 GiB
Name: devpx-docker
ID: EK6D:GJXW:XDJB:QUOG:GVAJ:IIL7:K3BP:EM2R:XN5P:H4YS:ZCSI:4RTO
Docker Root Dir: /var/lib/docker
Debug Mode (client): false
Debug Mode (server): false
Registry: https://index.docker.io/v1/
WARNING: bridge-nf-call-iptables is disabled
WARNING: bridge-nf-call-ip6tables is disabled
Insecure Registries:
Additional environment details (AWS, VirtualBox, physical, etc.):
This is a CentOS 7 VM.