eychenz commented on 29 Jul 2016 â€¢
edited
Output of docker version :
Client:
Version: 1.12.0
API version: 1.24
Go version: go1.6.3
Git commit: 8eab29e
Built:
OS/Arch: linux/amd64
Server:
Version: 1.12.0
API version: 1.24
Go version: go1.6.3
Git commit: 8eab29e
Built:
OS/Arch: linux/amd64
Output of docker info :
Containers: 0
Running: 0
Paused: 0
Stopped: 0
Images: 10
Server Version: 1.12.0
Storage Driver: devicemapper
Pool Name: docker-253:0-9962085-pool
Pool Blocksize: 65.54 kB
Base Device Size: 10.74 GB
Backing Filesystem: xfs
Data file: /dev/loop0
Metadata file: /dev/loop1
Data Space Used: 21.33 GB
Data Space Total: 107.4 GB
Data Space Available: 86.04 GB
Metadata Space Used: 16.15 MB
Metadata Space Total: 2.147 GB
Metadata Space Available: 2.131 GB
Thin Pool Minimum Free Space: 10.74 GB
Udev Sync Supported: true
Deferred Removal Enabled: false
Deferred Deletion Enabled: false
Deferred Deleted Device Count: 0
Data loop file: /var/lib/docker/devicemapper/devicemapper/data
WARNING: Usage of loopback devices is strongly discouraged for production use. Use --storage-opt dm.thinpooldev to specify a custom block storage device.
Metadata loop file: /var/lib/docker/devicemapper/devicemapper/metadata
Library Version: 1.02.122 (2016-04-09)
Logging Driver: json-file
Cgroup Driver: cgroupfs
Plugins:
Volume: local
Network: overlay null bridge host
Swarm: inactive
Runtimes: runc
Default Runtime: runc
Security Options: seccomp
Kernel Version: 4.6.4-301.fc24.x86_64
Operating System: Fedora 24 (Workstation Edition)
OSType: linux
Architecture: x86_64
CPUs: 4
Total Memory: 15.58 GiB
Name: eychenz
ID: QSWI:HP6C:WN7X:AAQP:6MUT:CVIF:F576:YH7Q:MF56:J42A:LRLS:HLM7
Docker Root Dir: /var/lib/docker
Debug Mode (client): false
Debug Mode (server): false
Registry: https://index.docker.io/v1/
Insecure Registries:
127.0.0.0/8
Output of docker-compose version :
docker-compose version 1.7.1, build 6c29830
docker-py version: 1.8.1
CPython version: 2.7.12
OpenSSL version: OpenSSL 1.0.2h-fips 3 May 2016
Additional environment details (AWS, VirtualBox, physical, etc.):
Fedora 24 workstation on Laptop
Steps to reproduce the issue:
Enable authentication on Docker Trusted Registry.
Set the repositories to need authentication for pulling images.
Test if your setup works with docker login and docker pull.
docker login creates ~/.docker/config.json which will be used by docker pull.
Create a docker-compose.yml file using images from your registry.
Try docker-compose pull to fetch images mentioned in the docker-compose.yml.
You'll see the message ERROR: image xxx not found
Describe the results you received:
Apparently docker-compose does not look for tokens at all, otherwise it should have found it in the default location.
Describe the results you expected
If authentication is already done, docker-compose should use the stored token and pull images.
Additional information
If docker-compose and docker are not meant to use each others token, at least I expect docker-compose to have a login command so it can authenticate itself against Docker Trusted Registry! Otherwise, the pull command doesn't make any sense either while having a private registry with authentication enabled.