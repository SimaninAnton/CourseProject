bingzhang commented on 17 Apr 2018
Hello:
We want to use `docker-compose logs -f -t service' to keep logging the service, and that service will restart due to restart policy.
We found that the command `docker-compose logs -f -t service' will exit when service restarts. May we know that is intended design, please? If so, do you have any near plan to enable this feature?
In below testing code, docker-compose logs on deadcontainer will exit, even that service restarts and runs again. We run services by using docker-compose up.
version: '3.3'

services:
   deadcontainer:
      image: ubuntu
      container_name: dead
      command: bash -c "echo "dead"; sleep 10; exit -1"
      restart: on-failure
   alivecontainer:
    image: ubuntu
    container_name: alive
    command: bash -c "while [ 1 = 1 ]; do echo "alive"; sleep 2; done"
    restart: on-failure
I also list the docker-compose version, docker version and docker info on testing machine .
Regards.
Docker compose version:
docker-compose version 1.20.1, build 5d8c71b
docker-py version: 3.1.4
CPython version: 3.6.4
OpenSSL version: OpenSSL 1.0.2n 7 Dec 2017
Docker version:
Client:
Version: 18.03.0-ce
API version: 1.37
Go version: go1.9.4
Git commit: 0520e24
Built: Wed Mar 21 23:06:22 2018
OS/Arch: darwin/amd64
Experimental: false
Orchestrator: swarm
Server:
Engine:
Version: 18.03.0-ce
API version: 1.37 (minimum version 1.12)
Go version: go1.9.4
Git commit: 0520e24
Built: Wed Mar 21 23:14:32 2018
OS/Arch: linux/amd64
Experimental: true
Docker info:
Containers: 2
Running: 2
Paused: 0
Stopped: 0
Images: 77
Server Version: 18.03.0-ce
Storage Driver: overlay2
Backing Filesystem: extfs
Supports d_type: true
Native Overlay Diff: true
Logging Driver: json-file
Cgroup Driver: cgroupfs
Plugins:
Volume: local
Network: bridge host ipvlan macvlan null overlay
Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog
Swarm: active
NodeID: 6cnzmmlvuissle3d2mkha4qxv
Is Manager: true
ClusterID: 4m4rkv2ewf27pvfhw5tbrf897
Managers: 1
Nodes: 1
Orchestration:
Task History Retention Limit: 5
Raft:
Snapshot Interval: 10000
Number of Old Snapshots to Retain: 0
Heartbeat Tick: 1
Election Tick: 3
Dispatcher:
Heartbeat Period: 5 seconds
CA Configuration:
Expiry Duration: 3 months
Force Rotate: 0
Autolock Managers: false
Root Rotation In Progress: false
Node Address: 192.168.65.3
Manager Addresses:
192.168.65.3:2377
Runtimes: runc
Default Runtime: runc
Init Binary: docker-init
containerd version: cfd04396dc68220d1cecbe686a6cc3aa5ce3667c
runc version: 4fc53a81fb7c994640722ac585fa9ca548971871
init version: 949e6fa
Security Options:
seccomp
Profile: default
Kernel Version: 4.9.87-linuxkit-aufs
Operating System: Docker for Mac
OSType: linux
Architecture: x86_64
CPUs: 4
Total Memory: 6.802GiB
Name: linuxkit-025000000001
ID: WTCP:W7AZ:ZSFM:5LOF:XCVG:GFRT:3JUC:OPXI:Y2FZ:67KU:OMC4:ML6X
Docker Root Dir: /var/lib/docker
Debug Mode (client): false
Debug Mode (server): true
File Descriptors: 65
Goroutines: 194
System Time: 2018-04-16T20:40:07.284461049Z
EventsListeners: 4
HTTP Proxy: docker.for.mac.http.internal:3128
HTTPS Proxy: docker.for.mac.http.internal:3129
Registry: https://index.docker.io/v1/
Labels:
Experimental: true
Insecure Registries:
127.0.0.0/8
Live Restore Enabled: false