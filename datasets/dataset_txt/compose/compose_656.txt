grease082 commented on 23 May 2018 â€¢
edited
root@hostname:/srv/owncloud# docker-compose -v
docker-compose version 1.21.2, build a133471
root@hostname:/srv/owncloud# docker-compose up
Starting owncloud_db_1 ... done
Starting owncloud_redis_1 ... done
Recreating owncloud_owncloud_1 ... done
Attaching to owncloud_db_1, owncloud_redis_1, owncloud_owncloud_1
db_1 | Cron is enabled, launching it!
db_1 | 180522 19:59:10 mysqld_safe Logging to '/var/lib/mysql/41780e6a4e2b.err'.
db_1 | 180522 19:59:10 mysqld_safe Starting mysqld daemon with databases from /var/lib/mysql
redis_1 | 12:C 22 May 19:59:11.668 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
redis_1 | 12:C 22 May 19:59:11.668 # Redis version=4.0.9, bits=64, commit=757d0c15, modified=0, pid=12, just started
redis_1 | 12:C 22 May 19:59:11.668 # Configuration loaded
redis_1 | 12:M 22 May 19:59:11.672 * Running mode=standalone, port=6379.
redis_1 | 12:M 22 May 19:59:11.672 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.
redis_1 | 12:M 22 May 19:59:11.672 # Server initialized
redis_1 | 12:M 22 May 19:59:11.672 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never > /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.
redis_1 | 12:M 22 May 19:59:11.673 * Ready to accept connections
owncloud_1 | Creating volume folders...
owncloud_1 | Creating hook folders...
owncloud_1 | Waiting for MySQL...
owncloud_1 | wait-for-it: waiting 180 seconds for db:3306
owncloud_1 | Removing custom folder...
owncloud_1 | wait-for-it: db:3306 is available after 0 seconds
owncloud_1 | Linking custom folder...
owncloud_1 | Removing config folder...
owncloud_1 | Linking config folder...
owncloud_1 | Copying db file...
owncloud_1 | Copying utf8mb4 config...
owncloud_1 | Fixing hook perms...
owncloud_1 | Fixing base perms...
owncloud_1 | Fixing data perms...
owncloud_1 | chown: cannot dereference '/mnt/data/certs/xxx.crt': No such file or directory
owncloud_1 | chown: cannot dereference '/mnt/data/certs/xxx.key': No such file or directory
I've an nginx reverse proxy and letsencrypt companion running, the certs are symlinked to the main certs folder of nginx and are accessible outside of docker but not accessible inside the docker container anymore.