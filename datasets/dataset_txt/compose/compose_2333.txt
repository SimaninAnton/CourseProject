niieani commented on 3 Jun 2016 â€¢
edited
Currently, there is no way to make use of service scaling in case there is more than one public IP assigned to a given host running docker. The use case is very common - imagine running more than one service that binds to port 80 on the same machine. If you specify your docker-compose.yml like this:
version: '2'
services:
  nginx-1:
    image: nginx
    ports:
      - "80:80"

  nginx-2:
    image: nginx
    ports:
      - "80:80"
You won't be able to run both services on the same node, even if it has two separate IPs. This, of course, makes sense - the public addresses wouldn't be deterministic for neither service.
The workaround is to specify the IPs explicitly:
version: '2'
services:
  nginx-1:
    image: nginx
    ports:
      - "1.1.1.1:80:80"

  nginx-2:
    image: nginx
    ports:
      - "1.1.1.2:80:80"
However this configuration makes it impossible to scale those services - after all, only one node/server can satisfy that IP+port constraint.
An imaginary solution to the problem would be to provide a range or a list of IPs that can be bound to. Perhaps something like this:
version: '2'
services:
  nginx-1:
    image: nginx
    ports:
      - "frontend:80:80"

  nginx-2:
    image: nginx
    ports:
      - "backend:80:80"

ip_pools:
  frontend: 
    - "1.1.1.1"
    - "1.1.1.2"
    - "1.1.1.3"
  backend:
    - "1.1.2.1"
    - "1.1.2.2"
    - "1.1.2.3"
Now, scaling up either nginx-1 or nginx-2 would be possible (up to 3 instances). Additionally, both nginx-1 and nginx-2 services could be run on the same node, exposing their port on different IPs.