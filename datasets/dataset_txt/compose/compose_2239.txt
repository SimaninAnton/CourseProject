styfle commented on 11 Jul 2016 â€¢
edited
Performing a docker build works fine but using the build param in a docker-compose file does not work.
I am using the latest Windows beta docker-compose 1.8.0-rc1 build 9bf6bc6.
Dockerfile
FROM mhart/alpine-node:6.3.0
RUN addgroup -S nodeapp && adduser -S -g nodeapp nodeapp 
WORKDIR /app
COPY . .
RUN npm install && npm run build && npm run test

CMD ["node", "src/server.js"]
package.json
{
  "name": "gateway-job",
  "main": "src/server.js",
  "scripts": {
    "build": "tsc",
    "test": "tape tests/*.js"
  },
  "dependencies": {
  },
  "devDependencies": {
    "tape": "^4.6.0",
    "typescript": "^1.8.10",
    "typings": "^1.3.0"
  }
}
docker-compose-dev.yml
version: '2'

networks:
    mynetwork:
        driver: bridge

services:
    gateway:
        build: ../gateway
        image: gateway:1.0.0
        restart: unless-stopped
        networks:
            default: {}
            mynetwork: {}
        volumes:
            - d:/code/aconfig:/etc/nginx/conf.d
        ports:
            - 8080:80
            - 443:443
    gateway-job:
        restart: unless-stopped
        build: ../gateway-job
        image: gateway-job:1.0.0
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - d:/code/aconfig:/etc/nginx/conf.d
        environment:
            NODE_ENV: 'production'
Output
D:\code\ms\compose-config>docker-compose -f docker-compose-dev.yml up --build
Creating network "composeconfig_default" with the default driver
Creating network "composeconfig_mynetwork" with driver "bridge"
Building gateway-job
Step 1 : FROM mhart/alpine-node:6.3.0
 ---> fffb49210fed
Step 2 : RUN addgroup -S nodeapp && adduser -S -g nodeapp nodeapp
 ---> Using cache
 ---> 98ade41576dd
Step 3 : WORKDIR /app
 ---> Using cache
 ---> 29bf7298d317
Step 4 : COPY . .
 ---> e7177c69fdd9
Removing intermediate container a6cbd8105879
Step 5 : RUN npm install && npm run build && npm run test
 ---> Running in 3182e729be8a
npm WARN gateway-job@1.0.0 No repository field.

> gateway-job@1.0.0 build /app
> tsc

sh: tsc: Permission denied

npm ERR! Linux 4.4.14-moby
npm ERR! argv "/usr/bin/node" "/usr/bin/npm" "run" "build"
npm ERR! node v6.3.0
npm ERR! npm  v3.10.3
npm ERR! code ELIFECYCLE
npm ERR! gateway-job@1.0.0 build: `tsc`
npm ERR! Exit status 126
npm ERR!
npm ERR! Failed at the gateway-job@1.0.0 build script 'tsc'.
npm ERR! Make sure you have the latest version of node.js and npm installed.
npm ERR! If you do, this is most likely a problem with the gateway-job package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     tsc
npm ERR! You can get information on how to open an issue for this project with:
npm ERR!     npm bugs gateway-job
npm ERR! Or if that isn't available, you can get their info via:
npm ERR!     npm owner ls gateway-job
npm ERR! There is likely additional logging output above.

npm ERR! Please include the following file with any support request:
npm ERR!     /app/npm-debug.log
ERROR: Service 'gateway-job' failed to build: The command '/bin/sh -c npm install && npm run build && npm run test' returned a non-zero code: 1
You can see the build step is failing because it's trying to create files that are somehow not allowed to be created in the Moby Linux VM (that was automatically created by Docker Beta for Windows).
Is there some sort of sudo for Windows that I can run docker-compose with and overcome this issue?