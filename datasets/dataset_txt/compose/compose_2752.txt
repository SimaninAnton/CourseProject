oiavorskyi commented on 18 Feb 2016
I have defined simple service using docker-compose that uses 2 internally created overlay networks (I tried with external as well). When docker-compose up -d is called on top of the Swarm cluster the container is created but it doesn't get assigned to specified networks. If I just specify --net parameter in docker run the container is attached to the network. Also docker network connect works fine. Details are provided below.
docker-compose.yml
version: '2'
services:
    test:
        image: "busybox"
        networks:
          - test_network
          - another_network
        command: "sh" 

networks:
  test_network:
    external: false
    driver: "overlay"
  another_network:
    external: false
    driver: "overlay"
Output of the docker-compose --verbose up -d
compose.config.config.find: Using configuration files: ./docker-compose.yml
docker.auth.auth.load_config: File doesn't exist
compose.cli.command.get_client: docker-compose version 1.6.0, build d99cad6
docker-py version: 1.7.0
CPython version: 2.7.9
OpenSSL version: OpenSSL 1.0.1j 15 Oct 2014
compose.cli.command.get_client: Docker base_url: https://192.168.99.113:3376
compose.cli.command.get_client: Docker version: KernelVersion=4.1.17-boot2docker, Os=linux, BuildTime=Wed Feb 17 22:45:35 UTC 2016, ApiVersion=1.22, Version=swarm/1.1.1, GitCommit=39ca8e9, Arch=amd64, GoVersion=go1.5.3
compose.cli.verbose_proxy.proxy_callable: docker inspect_network <- (u'netissue_another_network')
compose.network.ensure: Creating network "netissue_another_network" with driver "overlay"
compose.cli.verbose_proxy.proxy_callable: docker create_network <- (ipam=None, driver='overlay', options=None, name=u'netissue_another_network')
compose.cli.verbose_proxy.proxy_callable: docker create_network -> {u'Id': u'326368b5f57f4fb64a86e5a78d0ead4d8433a92d3b434698eae17a7eaac3bd5c',
 u'Warning': u''}
compose.cli.verbose_proxy.proxy_callable: docker inspect_network <- (u'netissue_test_network')
compose.network.ensure: Creating network "netissue_test_network" with driver "overlay"
compose.cli.verbose_proxy.proxy_callable: docker create_network <- (ipam=None, driver='overlay', options=None, name=u'netissue_test_network')
compose.cli.verbose_proxy.proxy_callable: docker create_network -> {u'Id': u'842e08bdd59d6f97a7f3fabb4f94f583769d87991e759ef6fe68ba9356a3f7e0',
 u'Warning': u''}
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=netissue', u'com.docker.compose.service=test', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=netissue', u'com.docker.compose.service=test', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('busybox')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'sh'],
             u'Domainname': u'',
             u'Entrypoint': None,
             u'Env': None,
...
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=netissue', u'com.docker.compose.service=test', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('busybox')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'sh'],
             u'Domainname': u'',
             u'Entrypoint': None,
             u'Env': None,
...
compose.service.build_container_labels: Added config hash: a9d4965450a00b0e4fb4d0bfd9e3638d23d29e0aa8f6ff99554c04351adec563
compose.cli.verbose_proxy.proxy_callable: docker create_host_config <- (memswap_limit=None, links=[], devices=None, pid_mode=None, log_config={'Type': u'', 'Config': {}}, cpu_quota=None, read_only=None, dns=None, volumes_from=[], port_bindings={}, security_opt=None, extra_hosts=None, cgroup_parent=None, network_mode=u'netissue_test_network', cap_add=None, restart_policy=None, dns_search=None, privileged=False, binds=[], ipc_mode=None, mem_limit=None, cap_drop=None, ulimits=None)
compose.cli.verbose_proxy.proxy_callable: docker create_host_config -> {'Binds': [],
 'Links': [],
 'LogConfig': {'Config': {}, 'Type': u''},
 'NetworkMode': u'netissue_test_network',
 'PortBindings': {},
 'VolumesFrom': []}
compose.service.create_container: Creating netissue_test_1
compose.cli.verbose_proxy.proxy_callable: docker create_container <- (name=u'netissue_test_1', image='busybox', labels={u'com.docker.compose.service': u'test', u'com.docker.compose.project': u'netissue', u'com.docker.compose.config-hash': 'a9d4965450a00b0e4fb4d0bfd9e3638d23d29e0aa8f6ff99554c04351adec563', u'com.docker.compose.version': u'1.6.0', u'com.docker.compose.oneoff': u'False', u'com.docker.compose.container-number': '1'}, host_config={'NetworkMode': u'netissue_test_network', 'Links': [], 'PortBindings': {}, 'Binds': [], 'LogConfig': {'Type': u'', 'Config': {}}, 'VolumesFrom': []}, environment={}, command='sh', volumes={}, detach=True)
compose.cli.verbose_proxy.proxy_callable: docker create_container -> {u'Id': u'b774f0c9cf750b44cba40529719b4f6a404df72d0e0e731505d48867bbf3721c'}
compose.cli.verbose_proxy.proxy_callable: docker inspect_container <- (u'b774f0c9cf750b44cba40529719b4f6a404df72d0e0e731505d48867bbf3721c')
compose.cli.verbose_proxy.proxy_callable: docker inspect_container -> {u'AppArmorProfile': u'',
 u'Args': [],
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'sh'],
             u'Domainname': u'',
             u'Entrypoint': None,
             u'Env': None,
             u'Hostname': u'b774f0c9cf75',
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_container <- (u'b774f0c9cf750b44cba40529719b4f6a404df72d0e0e731505d48867bbf3721c')
compose.cli.verbose_proxy.proxy_callable: docker inspect_container -> {u'AppArmorProfile': u'',
 u'Args': [],
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'sh'],
             u'Domainname': u'',
             u'Entrypoint': None,
             u'Env': None,
             u'Hostname': u'b774f0c9cf75',
...
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network <- (u'b774f0c9cf750b44cba40529719b4f6a404df72d0e0e731505d48867bbf3721c', u'netissue_test_network')
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network -> None
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network <- (u'b774f0c9cf750b44cba40529719b4f6a404df72d0e0e731505d48867bbf3721c', u'netissue_test_network', links=[], aliases=['test', u'b774f0c9cf'])
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network -> None
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network <- (u'b774f0c9cf750b44cba40529719b4f6a404df72d0e0e731505d48867bbf3721c', u'netissue_another_network', links=[], aliases=['test', u'b774f0c9cf'])
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network -> None
compose.cli.verbose_proxy.proxy_callable: docker start <- (u'b774f0c9cf750b44cba40529719b4f6a404df72d0e0e731505d48867bbf3721c')
Output of docker inspect --format='{{json .NetworkSettings.Networks}}' b774f0c9cf75 | jq
{
  "bridge": {
    "IPAMConfig": null,
    "Links": null,
    "Aliases": null,
    "NetworkID": "90b35974c1d8111178c8e56d82494d50cd8bb549a05cffc059eb32d476fe6786",
    "EndpointID": "",
    "Gateway": "",
    "IPAddress": "",
    "IPPrefixLen": 0,
    "IPv6Gateway": "",
    "GlobalIPv6Address": "",
    "GlobalIPv6PrefixLen": 0,
    "MacAddress": ""
  }
}
Note that container is stopped (it is just busybox) but still you could see that both networks are absent while bridge exists.
Output of docker info
Containers: 5
 Running: 5
 Paused: 0
 Stopped: 0
Images: 10
Server Version: swarm/1.1.1
Role: primary
Strategy: spread
Filters: health, port, dependency, affinity, constraint
Nodes: 4
 prod-node-1: 192.168.99.115:2376
  └ Status: Healthy
  └ Containers: 1
  └ Reserved CPUs: 0 / 1
  └ Reserved Memory: 0 B / 1.021 GiB
  └ Labels: environment=production, executiondriver=native-0.2, kernelversion=4.1.17-boot2docker, operatingsystem=Boot2Docker 1.10.1 (TCL 6.4.1); master : b03e158 - Thu Feb 11 22:34:01 UTC 2016, provider=virtualbox, storagedriver=aufs
  └ Error: (none)
  └ UpdatedAt: 2016-02-18T04:35:20Z
 prod-node-2: 192.168.99.116:2376
  └ Status: Healthy
  └ Containers: 1
  └ Reserved CPUs: 0 / 1
  └ Reserved Memory: 0 B / 1.021 GiB
  └ Labels: environment=production, executiondriver=native-0.2, kernelversion=4.1.17-boot2docker, operatingsystem=Boot2Docker 1.10.1 (TCL 6.4.1); master : b03e158 - Thu Feb 11 22:34:01 UTC 2016, provider=virtualbox, storagedriver=aufs
  └ Error: (none)
  └ UpdatedAt: 2016-02-18T04:35:29Z
 staging-node-1: 192.168.99.114:2376
  └ Status: Healthy
  └ Containers: 1
  └ Reserved CPUs: 0 / 1
  └ Reserved Memory: 0 B / 1.021 GiB
  └ Labels: environment=staging, executiondriver=native-0.2, kernelversion=4.1.17-boot2docker, operatingsystem=Boot2Docker 1.10.1 (TCL 6.4.1); master : b03e158 - Thu Feb 11 22:34:01 UTC 2016, provider=virtualbox, storagedriver=aufs
  └ Error: (none)
  └ UpdatedAt: 2016-02-18T04:35:22Z
 swarm-master: 192.168.99.113:2376
  └ Status: Healthy
  └ Containers: 2
  └ Reserved CPUs: 0 / 1
  └ Reserved Memory: 0 B / 1.021 GiB
  └ Labels: environment=production, executiondriver=native-0.2, kernelversion=4.1.17-boot2docker, operatingsystem=Boot2Docker 1.10.1 (TCL 6.4.1); master : b03e158 - Thu Feb 11 22:34:01 UTC 2016, provider=virtualbox, storagedriver=aufs
  └ Error: (none)
  └ UpdatedAt: 2016-02-18T04:35:35Z
Plugins:
 Volume:
 Network:
Kernel Version: 4.1.17-boot2docker
Operating System: linux
Architecture: amd64
CPUs: 4
Total Memory: 4.086 GiB
Name: swarm-master