cupracer commented on 23 May 2016 â€¢
edited
Output of docker version:
Client:
 Version:      1.11.1
 API version:  1.23
 Go version:   go1.6.1
 Git commit:   9e83765
 Built:
 OS/Arch:      linux/amd64

Server:
 Version:      1.11.1
 API version:  1.23
 Go version:   go1.6.1
 Git commit:   9e83765
 Built:
 OS/Arch:      linux/amd64
Output of docker info:
Containers: 2
 Running: 2
 Paused: 0
 Stopped: 0
Images: 1
Server Version: 1.11.1
Storage Driver: btrfs
 Build Version: Btrfs v4.1.2+20151002
 Library Version: 101
Logging Driver: json-file
Cgroup Driver: cgroupfs
Plugins:
 Volume: local
 Network: bridge null host
Kernel Version: 4.1.20-11-default
Operating System: openSUSE Leap 42.1 (x86_64)
OSType: linux
Architecture: x86_64
CPUs: 2
Total Memory: 741.1 MiB
Name: linux-pkmm
ID: RDTD:B3PA:AW5L:TGPK:Z25C:RO2O:HN2L:QOLZ:ABP5:TXX4:PW47:ESHT
Docker Root Dir: /var/lib/docker
Debug mode (client): false
Debug mode (server): true
 File Descriptors: 33
 Goroutines: 39
 System Time: 2016-05-23T09:45:01.031606285+02:00
 EventsListeners: 0
Registry: https://index.docker.io/v1/
WARNING: No swap limit support
WARNING: No kernel memory limit support
Output of docker-compose version:
docker-compose version 1.7.1, build 0a9ab35
docker-py version: 1.8.1
CPython version: 2.7.9
OpenSSL version: OpenSSL 1.0.1e 11 Feb 2013
Steps to reproduce the issue:
Create a simple Compose project with two containers:
version: '2'

services:
    container1:
        image: php:5-apache

    container2:
        image: php:5-apache
Run the Compose project:
# docker-compose up -d

Creating network "test_default" with the default driver
Creating test_container1_1
Creating test_container2_1
Use container1 to ping container2 by its name:
# docker-compose exec container1 ping container2 -c 1

PING container2 (172.18.0.3): 56 data bytes
64 bytes from 172.18.0.3: icmp_seq=0 ttl=64 time=0.092 ms
--- container2 ping statistics ---
1 packets transmitted, 1 packets received, 0% packet loss
round-trip min/avg/max/stddev = 0.092/0.092/0.092/0.000 ms
Disconnect/connect container2 from/to its default project network:
# docker network disconnect test_default test_container2_1
# docker network connect test_default test_container2_1
Try to ping container2 from container1 by its name again:
# docker-compose exec container1 ping container2 -c 1

ping: unknown host
Killing and starting container2 solves the problem:
# docker-compose kill container2
Killing test_container2_1 ... done

# docker-compose up -d container2
Starting test_container2_1

# docker-compose exec container1 ping container2 -c 1

PING container2 (172.18.0.3): 56 data bytes
64 bytes from 172.18.0.3: icmp_seq=0 ttl=64 time=0.082 ms
--- container2 ping statistics ---
1 packets transmitted, 1 packets received, 0% packet loss
round-trip min/avg/max/stddev = 0.082/0.082/0.082/0.000 ms
Describe the results you received:
After disconnecting/connecting a container its name (aliases) aren't known within the configured network anymore.
Describe the results you expected:
I'd expect that DNS resolution would work fine again.
Additional information you deem important (e.g. issue happens only occasionally):
Network aliases before disconnect container2:
# docker inspect --format '{{.NetworkSettings.Networks.test_default.Aliases}}' $(docker-compose ps -q)
[container1 d7a13bc22ddf]
[320ed191403d container2]
Network aliases after disconnecting container2:
# docker inspect --format '{{.NetworkSettings.Networks.test_default.Aliases}}' $(docker-compose ps -q)
[container1 d7a13bc22ddf]
<no value>
Network aliases after connecting container2 again:
# docker inspect --format '{{.NetworkSettings.Networks.test_default.Aliases}}' $(docker-compose ps -q)
[container1 d7a13bc22ddf]
[]
** Notes: **
I'm not sure if this is a Docker or a Compose issue, so I decided to put it here. I stumbled upon this because I got that disconnect/connect hint because of a different Docker issue moby/moby#22185 .
This problem may be related to the Compose issue #3492 .
(Modified: Linked references to other issues)