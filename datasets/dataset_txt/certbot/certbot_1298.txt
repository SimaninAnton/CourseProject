Member
bmw commented on 29 Mar 2017
Currently we pin specific versions of all our of Python dependencies in certbot-auto but don't do this in our PyPI packages. Should we change this? I'd be very interested to see what other popular client side Python projects with OS dependencies do. (I'm not personally aware of any and over the past 2 years I've learned why.)
There was discussion of this in IRC between @erikrose, @ohemorange, and @zjs, but I didn't get a chance to respond while everyone was still in the channel. Thinking about this for a bit, I think I'm against pinning while we have our current distribution methods, but let's see where this helps us.
certbot-auto
We already pin specific dependency versions and check its hash.
OS packages
While we're currently relying and encouraging systems to package Certbot and for people to use those packages, pinning specific versions of our dependencies isn't feasible. While it'd be nice to only support only one version of our dependencies at a time, the packages available in different distros vary wildly and we need to support multiple versions. Pinning specific versions makes testing different package versions harder for us (see tox.ini and #4049) and makes OS packaging harder. I see no benefit here.
Pinning dependency<next.major.version is interesting. This makes it clear that we don't expect Certbot to work with new major versions of our dependencies. If Certbot or its tests are run with a new dependency version though, it'll definitely fail if we pin, but it may not if we don't. Which behavior do we want?
pip install
We never tell anyone to install this way and I am perfectly fine not supporting this installation method as was suggested in IRC. In general, I think Python does a poor job supporting pip installing packages with OS dependencies which we have many of. Unless you have an intimate understanding of the project and understand you need to install libffi-dev, gcc, libaugeas, and more (or luckily happen to have those packages installed), pip install isn't going to work.
developer setup
tools/venv.sh failing slows down developers, but:
If this is our primary motivation for this, we can fix it without affecting packaging.
It's beneficial for us to know when a dependency changes that breaks Certbot (although we could test this during CI or nightly testing).