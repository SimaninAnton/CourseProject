mtraeger commented on 30 Nov 2016
I just generated a new certificate with certbot in Docker from quay.io/letsencrypt/letsencrypt with the command
docker run -it --rm -p 80:80 -p 443:443 \
-v $(pwd)/le:/etc/letsencrypt \
-v $(pwd)/le/lib:/var/lib/letsencrypt \
-v $(pwd)/le/log:/var/log/letsencrypt \
quay.io/letsencrypt/letsencrypt \
certonly \
--standalone \
--agree-tos \
--rsa-key-size 4096 \
--email EMAILADDR \
example.com
Last time I generated new certificates, there were relative symlinks from the certs in ./live/example.com/ to ./archive/example.com/ (e.g. cert.pem -> ../../archive/www.example.com/cert1.pem) created. But with the newest version, there are absolute paths for the symlinks (e.g. cert.pem -> /etc/letsencrypt/archive/sub.example.com/cert1.pem). The problem here is the usage of the (absolute) directory structure of the container, but on my host machine, the folder with the config and cert files is stored (and used) in a different location.
Are the absolute symlink paths desired behaviour and/ or is it possible to switch back to the old relative path behaviour (e.g. via an input param)? I assume, that ./live and ./archive cannot be placed too far away from each other.
Version: certbot 0.10.0.dev0
Docker-Image: quay.io/letsencrypt/letsencrypt latest 84aa8c51b7e1
Ubuntu 14.04
To sum up: I would expect relative paths from the certs symlinks in ./live/* to the original files in ./archive/* but now there are absolute paths for the symlinks.
As I can examine, it could be a connection to #1483
self.namespace.config_dir = os.path.abspath(self.namespace.config_dir)
self.namespace.work_dir = os.path.abspath(self.namespace.work_dir)
self.namespace.logs_dir = os.path.abspath(self.namespace.logs_dir)
1