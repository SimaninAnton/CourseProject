Contributor
kuba commented on 8 Nov 2015
$ git grep -i dvsni
letsencrypt-apache/docs/api/dvsni.rst::mod:`letsencrypt_apache.dvsni`
letsencrypt-apache/docs/api/dvsni.rst:.. automodule:: letsencrypt_apache.dvsni
letsencrypt-apache/letsencrypt_apache/configurator.py:from letsencrypt_apache import dvsni
letsencrypt-apache/letsencrypt_apache/configurator.py:        apache_dvsni = dvsni.ApacheDvsni(self)
letsencrypt-apache/letsencrypt_apache/configurator.py:            # Currently also have dvsni hold associated index
letsencrypt-apache/letsencrypt_apache/configurator.py:            apache_dvsni.add_chall(achall, i)
letsencrypt-apache/letsencrypt_apache/configurator.py:        sni_response = apache_dvsni.perform()
letsencrypt-apache/letsencrypt_apache/configurator.py:                responses[apache_dvsni.indices[i]] = resp
letsencrypt-apache/letsencrypt_apache/dvsni.py:"""ApacheDVSNI"""
letsencrypt-apache/letsencrypt_apache/dvsni.py:class ApacheDvsni(common.TLSSNI01):
letsencrypt-apache/letsencrypt_apache/dvsni.py:    """Class performs DVSNI challenges within the Apache configurator.
letsencrypt-apache/letsencrypt_apache/dvsni.py:        larger array. ApacheDvsni is capable of solving many challenges
letsencrypt-apache/letsencrypt_apache/dvsni.py:        Dvsni Challenges belong in the response array.  This is an optional
letsencrypt-apache/letsencrypt_apache/dvsni.py:        super(ApacheDvsni, self).__init__(*args, **kwargs)
letsencrypt-apache/letsencrypt_apache/dvsni.py:            "le_dvsni_cert_challenge.conf")
letsencrypt-apache/letsencrypt_apache/dvsni.py:        """Perform a DVSNI challenge."""
letsencrypt-apache/letsencrypt_apache/dvsni.py:        dvsni_addrs = self._mod_config()
letsencrypt-apache/letsencrypt_apache/dvsni.py:        self.configurator.make_addrs_sni_ready(dvsni_addrs)
letsencrypt-apache/letsencrypt_apache/dvsni.py:        :returns: All DVSNI addresses used
letsencrypt-apache/letsencrypt_apache/dvsni.py:        dvsni_addrs = set()
letsencrypt-apache/letsencrypt_apache/dvsni.py:            achall_addrs = self.get_dvsni_addrs(achall)
letsencrypt-apache/letsencrypt_apache/dvsni.py:            dvsni_addrs.update(achall_addrs)
letsencrypt-apache/letsencrypt_apache/dvsni.py:        return dvsni_addrs
letsencrypt-apache/letsencrypt_apache/dvsni.py:    def get_dvsni_addrs(self, achall):
letsencrypt-apache/letsencrypt_apache/dvsni.py:        """Return the Apache addresses needed for DVSNI."""
letsencrypt-apache/letsencrypt_apache/dvsni.py:        dvsni_addrs = set()
letsencrypt-apache/letsencrypt_apache/dvsni.py:                dvsni_addrs.add(default_addr)
letsencrypt-apache/letsencrypt_apache/dvsni.py:                dvsni_addrs.add(
letsencrypt-apache/letsencrypt_apache/dvsni.py:        return dvsni_addrs
letsencrypt-apache/letsencrypt_apache/dvsni.py:        """Adds DVSNI challenge conf file into configuration.
letsencrypt-apache/letsencrypt_apache/dvsni.py:        Adds DVSNI challenge include file if it does not already exist
letsencrypt-apache/letsencrypt_apache/dvsni.py:            DVSNI challenge.
letsencrypt-apache/letsencrypt_apache/dvsni.py:            self.configurator.config.work_dir, "dvsni_page/")
letsencrypt-apache/letsencrypt_apache/tests/configurator_test.py:    @mock.patch("letsencrypt_apache.configurator.dvsni.ApacheDvsni.perform")
letsencrypt-apache/letsencrypt_apache/tests/configurator_test.py:    def test_perform(self, mock_restart, mock_dvsni_perform):
letsencrypt-apache/letsencrypt_apache/tests/configurator_test.py:        dvsni_ret_val = [
letsencrypt-apache/letsencrypt_apache/tests/configurator_test.py:        mock_dvsni_perform.return_value = dvsni_ret_val
letsencrypt-apache/letsencrypt_apache/tests/configurator_test.py:        self.assertEqual(mock_dvsni_perform.call_count, 1)
letsencrypt-apache/letsencrypt_apache/tests/configurator_test.py:        self.assertEqual(responses, dvsni_ret_val)
letsencrypt-apache/letsencrypt_apache/tests/dvsni_test.py:"""Test for letsencrypt_apache.dvsni."""
letsencrypt-apache/letsencrypt_apache/tests/dvsni_test.py:class DvsniPerformTest(util.ApacheTest):
letsencrypt-apache/letsencrypt_apache/tests/dvsni_test.py:    """Test the ApacheDVSNI challenge."""
letsencrypt-apache/letsencrypt_apache/tests/dvsni_test.py:        super(DvsniPerformTest, self).setUp()
letsencrypt-apache/letsencrypt_apache/tests/dvsni_test.py:        from letsencrypt_apache import dvsni
letsencrypt-apache/letsencrypt_apache/tests/dvsni_test.py:        self.sni = dvsni.ApacheDvsni(config)
letsencrypt-apache/letsencrypt_apache/tests/dvsni_test.py:    def test_get_dvsni_addrs_default(self):
letsencrypt-apache/letsencrypt_apache/tests/dvsni_test.py:            self.sni.get_dvsni_addrs(self.achalls[0]))
letsencrypt-nginx/docs/api/dvsni.rst::mod:`letsencrypt_nginx.dvsni`
letsencrypt-nginx/docs/api/dvsni.rst:.. automodule:: letsencrypt_nginx.dvsni
letsencrypt-nginx/letsencrypt_nginx/configurator.py:from letsencrypt_nginx import dvsni
letsencrypt-nginx/letsencrypt_nginx/configurator.py:        nginx_dvsni = dvsni.NginxDvsni(self)
letsencrypt-nginx/letsencrypt_nginx/configurator.py:            # Currently also have dvsni hold associated index
letsencrypt-nginx/letsencrypt_nginx/configurator.py:            nginx_dvsni.add_chall(achall, i)
letsencrypt-nginx/letsencrypt_nginx/configurator.py:        sni_response = nginx_dvsni.perform()
letsencrypt-nginx/letsencrypt_nginx/configurator.py:            responses[nginx_dvsni.indices[i]] = resp
letsencrypt-nginx/letsencrypt_nginx/dvsni.py:"""NginxDVSNI"""
letsencrypt-nginx/letsencrypt_nginx/dvsni.py:class NginxDvsni(common.TLSSNI01):
letsencrypt-nginx/letsencrypt_nginx/dvsni.py:    """Class performs DVSNI challenges within the Nginx configurator.
letsencrypt-nginx/letsencrypt_nginx/dvsni.py:    :ivar list achalls: Annotated :class:`~letsencrypt.achallenges.DVSNI`
letsencrypt-nginx/letsencrypt_nginx/dvsni.py:        larger array. NginxDvsni is capable of solving many challenges
letsencrypt-nginx/letsencrypt_nginx/dvsni.py:        Dvsni Challenges belong in the response array.  This is an optional
letsencrypt-nginx/letsencrypt_nginx/dvsni.py:        """Perform a DVSNI challenge on Nginx.
letsencrypt-nginx/letsencrypt_nginx/dvsni.py:        :returns: list of :class:`letsencrypt.acme.challenges.DVSNIResponse`
letsencrypt-nginx/letsencrypt_nginx/dvsni.py:            Unable to find a suitable HTTP block to include DVSNI hosts.
letsencrypt-nginx/letsencrypt_nginx/dvsni.py:                'LetsEncrypt could not find an HTTP block to include DVSNI '
letsencrypt-nginx/letsencrypt_nginx/dvsni.py:        """Creates a server block for a DVSNI challenge.
letsencrypt-nginx/letsencrypt_nginx/dvsni.py:        :param achall: Annotated DVSNI challenge.
letsencrypt-nginx/letsencrypt_nginx/dvsni.py:        :type achall: :class:`letsencrypt.achallenges.DVSNI`
letsencrypt-nginx/letsencrypt_nginx/dvsni.py:            self.configurator.config.work_dir, "dvsni_page")
letsencrypt-nginx/letsencrypt_nginx/tests/configurator_test.py:    @mock.patch("letsencrypt_nginx.configurator.dvsni.NginxDvsni.perform")
letsencrypt-nginx/letsencrypt_nginx/tests/configurator_test.py:    def test_perform(self, mock_restart, mock_dvsni_perform):
letsencrypt-nginx/letsencrypt_nginx/tests/configurator_test.py:        dvsni_ret_val = [
letsencrypt-nginx/letsencrypt_nginx/tests/configurator_test.py:        mock_dvsni_perform.return_value = dvsni_ret_val
letsencrypt-nginx/letsencrypt_nginx/tests/configurator_test.py:        self.assertEqual(mock_dvsni_perform.call_count, 1)
letsencrypt-nginx/letsencrypt_nginx/tests/configurator_test.py:        self.assertEqual(responses, dvsni_ret_val)
letsencrypt-nginx/letsencrypt_nginx/tests/dvsni_test.py:"""Test for letsencrypt_nginx.dvsni."""
letsencrypt-nginx/letsencrypt_nginx/tests/dvsni_test.py:class DvsniPerformTest(util.NginxTest):
letsencrypt-nginx/letsencrypt_nginx/tests/dvsni_test.py:    """Test the NginxDVSNI challenge."""
letsencrypt-nginx/letsencrypt_nginx/tests/dvsni_test.py:        super(DvsniPerformTest, self).setUp()
letsencrypt-nginx/letsencrypt_nginx/tests/dvsni_test.py:        from letsencrypt_nginx import dvsni
letsencrypt-nginx/letsencrypt_nginx/tests/dvsni_test.py:        self.sni = dvsni.NginxDvsni(config)
letsencrypt/reverter.py:        # Made this mistake in my initial implementation of apache.dvsni.py