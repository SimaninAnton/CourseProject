aprescott commented on 13 May 2015
(I am not a cryptographer!)
As of d6e554b, the nginx SSL config specifies the following ssl_ciphers value:
ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256 ECDHE-ECDSA-AES256-GCM-SHA384 ECDHE-ECDSA-AES128-SHA ECDHE-ECDSA-AES256-SHA ECDHE-ECDSA-AES128-SHA256 ECDHE-ECDSA-AES256-SHA384 ECDHE-RSA-AES128-GCM-SHA256 ECDHE-RSA-AES256-GCM-SHA384 ECDHE-RSA-AES128-SHA ECDHE-RSA-AES128-SHA256 ECDHE-RSA-AES256-SHA384 DHE-RSA-AES128-GCM-SHA256 DHE-RSA-AES256-GCM-SHA384 DHE-RSA-AES128-SHA DHE-RSA-AES256-SHA DHE-RSA-AES128-SHA256 DHE-RSA-AES256-SHA256 EDH-RSA-DES-CBC3-SHA"
I'm wondering if this is actually necessary or if we can do it in a much less verbose way.
I've had decent luck with a configuration like this:
ssl_ciphers DEFAULT:!aNULL:!eNULL:!ADH:!RC4:!RC2:!DES:+HIGH:+MEDIUM:!LOW:!SSLv2:!EXP:!MD5:!DSS:!PSK;
Qualys SSL Labs' SSL test gives a 90/100 rating for the cipher suite that this shorter configuration allows.
I can see another potential benefit over it simply being shorter: it allows future ciphers that aren't blacklisted to automatically work. I think a lot of the frontend web server configuration people put together comes from copy-pasting samples from various blog posts, and this ssl_ciphers list is basically just one long magic string.
Given that a lot of people will no doubt use Let's Encrypt as a point of reference for how to do something right, this sort of configuration would potentially give people an ssl_ciphers configuration that doesn't have to be revisited to determine what the latest magic string is.
Is this possible? Is there a giant problem with this approach?