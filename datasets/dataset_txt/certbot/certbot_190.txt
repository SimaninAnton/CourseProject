tomaskir commented on 21 Apr 2019
My operating system is (include version):
Ubuntu 18.04
certbot 0.31.0
I ran this command and it produced this output:
/usr/bin/certbot certonly -n --agree-tos -m [email] --no-eff-email -d [cert domain] --rsa-key-size 4096 --webroot -w [path to webroot] --preferred-challenges http
   Domain: [cert domain]
   Type:   tls
   Detail: Fetching
   https://[cert domain]/.well-known/acme-challenge/[challenge string]:
   remote error: tls: handshake failure
Certbot's behavior differed from what I expected because:
The --preferred-challenges http flag was completely ignored, and HTTPS was used.
Why is this important?
When automating (in our case using Puppet), or when trying to generate certs for domain currently using expired certificates, it's impossible to generate a cert without first removing the https configuration for this domain.
What is even worse, is that for security purposes, we have a blank "catch-all" HTTPS nginx "server" clause, that simply refuses the connection for HTTPS connections to our server IP using an un-defined HOST. We have to completely disable HTTPS on nginx, or the certbot connections fall through to the blank HTTPS server and cert retrieval fails.