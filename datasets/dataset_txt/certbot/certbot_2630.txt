silbe commented on 1 Jan 2016
While a lot of sites can get by using the plug-ins shipped by letsencrypt (both existing and future ones), there will always be sites that require custom operations for provisioning the resources required for validation (e.g. files on a web server for Simple HTTP validation, DNS records for DNS validation). The easiest and most flexible way to automate this is running a user-provided script that gets passed the challenge type, identifiers (domains) and some challenge type specific parameters. E.g. for Simple HTTP validation, it could look like this:
custom-provision-script --type simpleHttp --tls false --path .well-known/acme-challenge/Token1 --content '{ "type": "simpleHttp", "token": "Token1", "tls": false}' --domain example.com --path .well-known/acme-challenge/Token2 --content '{ "type": "simpleHttp", "token": "Token", "tls": false}' --domain example.com
For DNS validation, it could look like this:
custom-provision-script --type dns --name _acme-challenge --type txt --content Token1 --domain example.org --name _acme-challenge --type txt --content Token2 --domain example.com
While those sites could write and use custom Authenticator plug-ins, scripts are easier to deploy. You can invoke scripts with their full path, whereas letsencrypt plug-ins need to be installed using setuptools.
This has come up before (see e.g. #1015, #1475). While some users could make webroot work for them in combination with FUSE-based file systems (e.g. sshfs) or are satisfied with an interactive solution (using the manual plug-in), this isn't practical for many sites (including mine).