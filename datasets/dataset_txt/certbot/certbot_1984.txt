Member
bmw commented on 28 Jun 2016
Despite me writing certbot/error_handler.py many months ago, it just surprised me. What surprised me is more or less documented below:
Every registered function is attempted to be run to completion exactly once. If a registered function raises an exception, it is logged and the next function is called. If a (different) handled signal occurs while calling a registered function, it is attempted to be called again by the next signal handler.
I think not calling a registered function again if it just raised an exception makes sense. If it errored the first time, it's likely to error again. I'm not sure if calling the function again if it is interrupted by a signal, however, is the right behavior. Registered functions can change state and an interrupted function may leave something in an invalid state such that calling it again causes incorrect behavior.
For a real life example, client.py registers the method _restart_and_rollback with the ErrorHandler. This method rolls back one checkpoint and restarts the plugin. What if, however, a signal interrupts the method after rolling back the checkpoint. Calling it again will attempt to rollback another checkpoint which is incorrect.
I think we should call try and call a registered function at most once to avoid this problem.