drhsqlite commented on 14 Mar 2017
My operating system is (include version):
Ubuntu 16.04
I installed Certbot with (certbot-auto, OS package manager, pip, etc):
apt-get install
I ran this command and it produced this output:
letsencrypt certonly -webroot ....
Certbot's behavior differed from what I expected because:
Certbot was unable to verify the domain because it creates new witness files under the ".well-known" directory in the web server file hierarchy. But my webserver disallows URIs that start with a "." for security reasons. I had to hack and recompile the webserver so that it makes a special-case exception for ".well-known".
It seems ironic to have to weaken the security of the webserver in order to obtain a cert, does it not?
I consider URLs that have leading "." elements in their path to be a security risk because it allows serving files that are not normally seen by an ordinary "ls" command on the server. In other words, it allows the serving of "hidden" files. By prohibiting hidden files, an operator error that leaves (for example) a ".git" folder somewhere in the web server hierarchy will not lead to an accidental security breach.
For similar reasons, the webserver I use also refuses to deliver files with other special characters. It only delivers files whose names are composed entirely of [a-zA-Z0-9_,-./] and that do not begin with "-" or ".".
I'm not familiar with the ACME protocol, and so this might not be an easy thing to do, but I think it would be a great enhancement to allow certbot to create its witness files using only alphanumeric characters. A name of 20 randomly chosen alphanumerics will not collide (with any realistic probability) with any preexisting files or folders on the webserver. Why not use random name instead of ".well-known"? Is that possible with the ACME protocol? Could this at least be made a run-time option for certbot?
Here is a Certbot log showing the issue (if available):
Logs are stored in /var/log/letsencrypt by default. Feel free to redact domains, e-mail and IP addresses as you see fit.
In case anyone is interested, the webserver mentioned above can be seen at https://www.sqlite.org/docsrc/file/misc/althttpd.c