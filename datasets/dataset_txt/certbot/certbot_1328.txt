kousu commented on 16 Mar 2017 •
edited
My operating system is (include version):
ArchLinux, recently updated.
Linux radio.kousu.ca 4.10.2-1-ARCH #1 SMP PREEMPT Mon Mar 13 17:13:41 CET 2017 x86_64 GNU/Linux
I installed Certbot with (certbot-auto, OS package manager, pip, etc):
pacman -S certbot-nginx certbot, current versions:
community/certbot 0.12.0-1 [installed]
    A tool to automatically receive and install X.509 certificates to enable TLS on servers. The client will interoperate with the Let’s Encrypt CA which will be issuing browser-trusted certificates for
    free.
community/certbot-nginx 0.12.0-1 [installed]
    Nginx plugin for Let’s Encrypt client
I ran this command and it produced this output:
certbot --nginx -d radio.kousu.ca
    server {
        server_name radio.kousu.ca;

        listen 80;
        listen 443 ssl; # managed by Certbot
        ssl_certificate /etc/letsencrypt/live/radio.kousu.ca/fullchain.pem; # managed by Certbot
        ssl_certificate_key /etc/letsencrypt/live/radio.kousu.ca/privkey.pem; # managed by Certbot
        ssl_session_cache shared:le_nginx_SSL:1m; # managed by Certbot
        ssl_session_timeout 1440m; # managed by Certbot

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # managed by Certbot
        ssl_prefer_server_ciphers on; # managed by Certbot

        ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256 ECDHE-ECDSA-AES256-GCM-SHA384 ECDHE-ECDSA-AES128-SHA ECDHE-ECDSA-AES256-SHA ECDHE-ECDSA-AES128-SHA256 ECDHE-ECDSA-AES256-SHA384 ECDHE-RSA-AES128-GCM-SHA256 ECDHE-RSA-AES256-GCM-SHA384 ECDHE-RSA-AES128-SHA ECDHE-RSA-AES128-SHA256 ECDHE-RSA-AES256-SHA384 DHE-RSA-AES128-GCM-SHA256 DHE-RSA-AES256-GCM-SHA384 DHE-RSA-AES128-SHA DHE-RSA-AES256-SHA DHE-RSA-AES128-SHA256 DHE-RSA-AES256-SHA256 EDH-RSA-DES-CBC3-SHA"; # managed by Certbot

        if ($scheme != "https") {
            return 301 https://$host$request_uri;
        } # managed by Certbot
}
Certbot's behavior differed from what I expected because:
The nginx people do not like their own if statement. In lieu, the canonical way to force HTTPS is
server {
    listen      80;
    server_name signup.mysite.com;
    return 301 https://$server_name$request_uri;
}
5