Contributor
kuba commented on 22 Apr 2015
Here's an idea: move all plugins to separate git repositories and distribute them in a separate PyPI/Debian/etc. packages (that is all apart from standalone, which is probably best to be left in the main distribution). setuptools entry_points system, which is already being used in master, makes such transformation a breeze.
entry point name GitHub PyPI Debian
apache letsencrypt-apache letsencrypt-apache letsencrypt-apache
nginx letsencrypt-nginx letsencrypt-nginx letsencrypt-nginx
... ... ... ...
PyPI packages would have to install_requires.append('letsencrypt'), as well as set up entry_points appropriately
Debian plugin packages would Require: letsencrypt as well as specific server software, e.g. letsecrnypt-apache would Require: apache. letsencrypt Debian package could Suggest: letsencrypt-apache, etc.
CLI would automatically populate --{plugin_name}-{option_name}, similarly {plugin_name}_{option_name} for config
This would simplify a lot of things, such as release process, Python 3 compatibility transition, OS support (e.g. AFAIR augeas, necessary for apache or nginx plugins, is not even available on Windows, what about it's py3 compat?)... Main cons is probably less control over the namespace (e.g. PyPI), or establising unique {plugin_name} etc.
https://github.com/kuba/lets-encrypt-preview/tree/cli brings us closer to the required architecture (moves plugin specific constants and CLI arguments to plugins subdirs, first attempt at unique plugin names problem)
cc: @jdkasten, @fmarier