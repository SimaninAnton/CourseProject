wamatt commented on 17 Apr 2017 â€¢
edited
My operating system is (include version):
Ubuntu 14.04.2 LTS
I installed Certbot with (certbot-auto, OS package manager, pip, etc):
sudo apt-get install python-certbot-nginx
I ran sudo certbot --nginx to install my LE certs. It modified the nginx.conf and put the following server block in place
    server {
       listen         80;
       server_name    www.zzzz.com;
       return         301 https://$server_name$request_uri;
    
    listen 443 ssl; # managed by Certbot
ssl_certificate /etc/letsencrypt/live/www.zzzz.com/fullchain.pem; # managed by Certbot
ssl_certificate_key /etc/letsencrypt/live/www.zzzz.com/privkey.pem; # managed by Certbot
ssl_session_cache shared:le_nginx_SSL:1m; # managed by Certbot
ssl_session_timeout 1440m; # managed by Certbot

ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # managed by Certbot
ssl_prefer_server_ciphers on; # managed by Certbot

ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256 ECDHE-ECDSA-AES256-GCM-SHA384 ECDHE-ECDSA-AES128-SHA ECDHE-ECDSA-AES256-SHA ECDHE-ECDSA-AES128-SHA256 ECDHE-ECDSA-AES256-SHA384 ECDHE-RSA-AES128-GCM-SHA256 ECDHE-RSA-AES256-GCM-SHA384 ECDHE-RSA-AES128-SHA ECDHE-RSA-AES128-SHA256 ECDHE-RSA-AES256-SHA384 DHE-RSA-AES128-GCM-SHA256 DHE-RSA-AES256-GCM-SHA384 DHE-RSA-AES128-SHA DHE-RSA-AES256-SHA DHE-RSA-AES128-SHA256 DHE-RSA-AES256-SHA256 EDH-RSA-DES-CBC3-SHA"; # managed by Certbot



    # Redirect non-https traffic to https
    # if ($scheme != "https") {
    #     return 301 https://$host$request_uri;
    # } # managed by Certbot

}
My question is other than manually editing the config, would there be a way to pass an option or parameter to enable oscp stapling?