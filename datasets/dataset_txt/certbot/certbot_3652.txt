Contributor
jdkasten commented on 3 Jan 2015
There has been an effort to generalize the "Authenticators" (modules that can perform server specific challenges) and "Installers" (modules that will install certificates/perform configuration optimizations)
This has led to the ability to select the appropriate Authenticator/Installer at run-time. Imagine someone would like to design a class that can install certificates on a Postfix server, but naturally... Postfix cannot solve the current ACME challenges by itself. This would allow the client to pair the stand-alone authenticator with the postfix installer. This has been discussed in issue #149.
This abstraction, allowing different Authenticators/Installers to operate with one another, brings up a few concerns.
Different Installers will have different capabilities for optimization. It isn't reasonable to require all Installers to support the same optimizations. Right now, the interface requires functions like enable_hsts or enable_redirection. The client then goes through the list of known optimizations...
I believe the optimization capabilities that the client invokes should be determined by the Installer, not the client. I see many potential ways to solve the problem, but I figure there might be a design pattern we can adopt that is appropriate to the situation. Does anyone have any pointers or thoughts?
In a similar vein, different Authenticators will have different preferences for performing challenges. Right now, the preferences are hard-coded into CONFIG.py. This information should instead be communicated by the Authenticator itself. I was planning to create a "get_challenge_preferences" function in the Authenticator interface, but I thought I would open the discussion up in case there is a better overall solution.