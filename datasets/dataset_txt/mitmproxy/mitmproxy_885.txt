amirbilu commented on 16 Nov 2016
Hi,
First of all, would like to thank anyone for this amazing project.
I wrote a small script which gets a key-value json of url1->url2,
And respond with url2 while trying to reach url1.
This is the script:
import argparse
import os
import json
from mitmproxy import ctx
from netlib.http import url


class Replacer:
    def __init__(self, urls_mapping):
        with open(os.path.expanduser(urls_mapping)) as urls_mapping_file:
            self.urls_mapping = json.load(urls_mapping_file)
        

    def request(self, flow):
        if not flow.request.url in self.urls_mapping:
            return;

        src = url.parse(flow.request.url)
        dst = url.parse(self.urls_mapping[flow.request.url])

        flow.request.path = dst[3]
        flow.request.port = dst[2]
        flow.request.host = dst[1]


def start():
    parser = argparse.ArgumentParser()
    parser.add_argument("urls_mapping",type=str)
    args = parser.parse_args()
    return Replacer(args.urls_mapping)
The logic works good, but it seems to make the network much slower.
Is the construction of the Replacer object made with every request? Making it reading the json file every time? Is there any way to optimize the script?
Thanks guys!