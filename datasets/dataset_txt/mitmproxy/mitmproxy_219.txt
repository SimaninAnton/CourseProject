kjkuan commented on 30 Aug 2018 â€¢
edited
Steps to reproduce the problem:
Save flows to a file, saved.mitm
Wait a few minutes
Use a command like mitmdump -n -C saved.mitm -s myscript.py -w replayed.mtim to replay the saved flows.
Then observe the flows with mitmproxy -n -r replayed.mitm and see that the request-response time of the flows are inaccurate because it seems to be calculated using the start time of the requests in saved.mitm.
Any other comments? What have you tried so far?
If such behavior is intentional, what's the recommended way to set the request timestamps so that they reflect the time when the requests are actually replayed rather than the previously saved timestamps?
As a workaround, I've added these two lines after the server.wfile.flush() line in addons/clientplayback.py for my use case:
                r.timestamp_end = time.time()
                r.timestamp_start = server.wfile.first_byte_timestamp
It seems reasonable but I'm not sure if it's correct.
System information
Mitmproxy: 4.0.4
Python: 3.7.0
OpenSSL: OpenSSL 1.0.2p 14 Aug 2018
Platform: Darwin-17.5.0-x86_64-i386-64bit