arnau commented on 2 Nov 2015
The add_header example fails to run. For convenience showed here:
def response(context, flow):
    flow.response.headers["newheader"] = "foo"
Steps to reproduce the problem:
Start the proxy
mitmdump --script add_header.py
(tested with mitmproxy --script add_header.py as well)
Make a request
curl -I --proxy http://localhost:8080 -XGET http://github.com
What is the expected behavior?
To get back something like:
HTTP/1.1 302 Found
Connection: close
Pragma: no-cache
cache-control: no-cache
Location: /
newheader: foo
Content-Length: 0
What went wrong?
See the trace:
Script error:
Traceback (most recent call last):
  File "/usr/local/Cellar/mitmproxy/0.13/libexec/lib/python2.7/site-packages/libmproxy/script.py", line 123, in run
    return (True, f(self.ctx, *args, **kwargs))
  File "/Users/arnau/kitchen/me/proxyswitch/example.py", line 4, in response
    flow.response.headers['newheader'] = 'foo'
  File "/usr/local/Cellar/mitmproxy/0.13/libexec/vendor/lib/python2.7/site-packages/netlib/odict.py", line 72, in __setitem__
    "Expected list of values instead of string. "
ValueError: Expected list of values instead of string. Example: odict['Host'] = ['www.example.com']
Any other comments?
The following example works:
def response(context, flow):
    flow.response.headers["newheader"] = ["foo"]
HTTP/1.1 302 Found
Connection: close
Pragma: no-cache
cache-control: no-cache
Location: /
newheader: foo
Content-Length: 0
Although not directly related to the issue the following surprised me:
def response(context, flow):
    flow.response.headers["newheader"] = ["foo", "bar"]
HTTP/1.1 302 Found
Connection: close
Pragma: no-cache
cache-control: no-cache
Location: /
newheader: foo
newheader: bar
Content-Length: 0
I expected to have just one newheader. Is it intended to be this way?