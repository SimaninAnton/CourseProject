ja8zyjits commented on 22 Nov 2016 â€¢
edited
Steps to reproduce the problem:
copy following script
def proxy_address(flow):
    return ("remote_ip", 18002)

def request(flow):
    address = proxy_address(flow)
    if flow.live:
        print("inside")
        flow.live.change_upstream_proxy_server(address)
run mitmdump -s "update_mitmproxy.py"
open terminal
>>> import requests
>>> p = {"http":"http://127.0.0.1:8080","https":"http://127.0.0.1:8080"}
>>> response = requests.post("http://www.httpbin.org/post", json={"key":"value"}, proxies=p)
>>> response.json
{u'args': {},
u'data': u'{"key":"value"}',
u'files': {},
u'form': {},
u'headers': {u'Accept': u'*/*',
 u'Accept-Encoding': u'gzip, deflate',
 u'Content-Length': u'19',
 u'Content-Type': u'application/json',
 u'Host': u'www.httpbin.org',
 u'User-Agent': u'python-requests/2.12.1'},
u'json': {u"key":u"value"},
u'origin': u'local_ip', #this is the problem, i need to get the upstream_server ip
u'url': u'http://www.httpbin.org/post'}
The remote_proxy is working i tested it, but its not being used as an upstream server in this case you see the origin is still my local system not the proxy remote server
Any other comments? What have you tried so far?
This script is from the examples, is it the right way to do?
I am trying to do Browser <------> MITM <------> remote_proxy(forwards and not intercepts the ssl) <------> Server
runing mitmdump -s "update_mitmproxy.py" -U http://remote_server:port this works properly, but i need to be able to dynamically change the upstream server.
System information
Python version: 2.7.12
Platform: Linux-4.4.0-47-generic-x86_64-with-Ubuntu-16.04-xenial
SSL version: OpenSSL 1.0.2g  1 Mar 2016
Linux distro: Ubuntu 16.04 xenial```