Member
cortesi commented on 14 Mar 2017 â€¢
edited
This is a discussion ticket to get input on our next steps with the addons API. This is a critical piece of our user-facing surface area, and we're very keen to have it be as fluid and usable as possible. The work done in #2129 has moved things to the point where a reassessment is in order.
I'll outline the issues with the API as it stands here, and then I'll put my proposal for a refactoring in a comment on the ticket. If you have ideas, please respond below - I'll update the list of issues we should be thinking about as we go.
The startup event sequence for addons is quite confusing - we have start() -> configure() -> running(), all of which are called in different contexts, and have names that are close to each other semantically.
The start() method takes an options argument, but addons can only create new options at this point, not read and use option values. This is confusing.
The start() method can replace the current addon with a new addon by returning it. I feel this is too implicit, and isn't flexible enough. We also may want to expand what addons can do in this event later, and returning a value boxes us in.
When we first designed this API, we felt that importing a context object (ctx) to do logging or access master was a good light-weight pattern, partly because this is similar to what flask does. It's time to think about this again, even if we decide to keep things as they are.
The addons API is extremely lightweight at the moment - just a sequence of events. This has many advantages, and some disadvantages. There are many common patterns that we could support better by having addons derive from a common class - for instance, enabling/disabling addons is very common, and has to be hand-coded every time at the moment. We could also have addons pre-declare the options that they are interested in, and then call configure() only when something relevant to the addon happens (as opposed to calling all configure() methods for all updates).
We need a custom events mechanism to allow addons to declare and handle one-off events. One example of this is triggering reading flows from a file. Doing this by having an addon handle an option change or retrieving and explicitly invoking a method on an addon is clumsy.
1