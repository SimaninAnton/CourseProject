crass commented on 13 Jul 2013
Error in processing of request from 127.0.0.1:49021
Traceback (most recent call last):
  File "/home/crass/.local/lib/python2.7/site-packages/netlib/tcp.py", line 353, in request_thread
    self.handle_connection(request, client_address)
  File "/home/crass/.local/lib/python2.7/site-packages/libmproxy/proxy.py", line 533, in handle_connection
    h.handle()
  File "/home/crass/.local/lib/python2.7/site-packages/libmproxy/proxy.py", line 188, in handle
    while self.handle_request(cc) and not cc.close:
  File "/home/crass/.local/lib/python2.7/site-packages/libmproxy/proxy.py", line 203, in handle_request
    request = self.read_request(cc)
  File "/home/crass/.local/lib/python2.7/site-packages/libmproxy/proxy.py", line 452, in read_request
    return self.read_request_proxy(client_conn)
  File "/home/crass/.local/lib/python2.7/site-packages/libmproxy/proxy.py", line 396, in read_request_proxy
    line = self.rfile.readline(line)
  File "/home/crass/.local/lib/python2.7/site-packages/netlib/tcp.py", line 160, in readline
    ch = self.read(1)
  File "/home/crass/.local/lib/python2.7/site-packages/netlib/tcp.py", line 129, in read
    data = self.o.read(rlen)
Error: [('SSL routines', 'SSL3_READ_BYTES', 'tlsv1 alert unknown ca')]
This is happening when trying to proxy an ssl connection through mitmproxy with firefox using the default self-signed cert for mitmproxy. When issuing an https connection through the proxy with curl, curl will fail verifying the cert but no exception will be thrown in mitmproxy.
Since this exception is not caught the ncurses ui is overwritten with the exception until the next user key press.
It seems that the problem is that the cert mitmproxy is giving to the client is untrusted. But why the difference with firefox and curl? Either way this exception should be handled gracefully.