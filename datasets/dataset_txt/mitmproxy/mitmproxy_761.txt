Member
mhils commented on 18 Feb 2017
There are a bunch of places in the codebase where we use a hard-coded headers["Host"] that now also have to deal with h2, see for example #2034. The question is how we handle this best:
Rewrite the special h2 headers starting with a colon to their h1 counterparts before we send them to the rest of mitmproxy (and undo that before sending them out). This would fix the symptoms we currently have, but we wouldn't display h2 flows accurately in the UI anymore (and the mapping would not be bijective). Sounds rather unconvincing to me.
Add a special request.host_header (or .authority_header?) property that proxies to the right header and use that instead of headers["Host"].
Distinguish between both headers everywhere. Nah.
Unless somebody comes up with a better option, I'd propose we go an implement option 2 to tackle this. Implementation isn't entirely trivial, but I'd propose the following semantics:
Get with no header present: None
Get with (either Host or :authority) or matching Host and :authority: the correct header
Get with different Host and :authority: Probably raise an exception?
Set with existing: Update all the existing ones
Set without existing: Use http_version and only set one of them.
@Lukasa @Kriechi @yoavweiss, would that work for everyone?