jtchilders commented on 8 Aug 2017
Hello,
Obviously, I cannot give you my certificate to create your own proxy certificate to test this failure, which probably makes things hard, but I'll submit this for your consideration. Perhaps I'm just misusing the tool somehow.
Steps to reproduce the problem:
Create an SSL proxy certificate
Run a curl using the following arguments
curl --silent --show-error --connect-timeout 100 --max-time 120 --compressed --capath ./certificates --cert myproxy --cacert myproxy --key myproxy --config data.txt https://yoursecureserver.com:port/path/command
receive error:
curl: (60) SSL certificate problem: self signed certificate in certificate chain
More details here: http://curl.haxx.se/docs/sslcerts.html
curl performs SSL certificate verification by default, using a "bundle"
of Certificate Authority (CA) public keys (CA certs). If the default
bundle file isn't adequate, you can specify an alternate file
using the --cacert option.
If this HTTPS server uses a certificate signed by a CA represented in
the bundle, the certificate verification probably failed due to a
problem with the certificate (it might be expired, or the name might
not match the domain name in the URL).
If you'd like to turn off curl's verification of the certificate, use
the -k (or --insecure) option.
Any other comments? What have you tried so far?
Without the mitmproxy, this curl command works just fine with my server.
I can get standard http calls without the proxy certificate to work.
System information
I've tested this on both my macbook and a linux cluster running RHEL6.5 with the same results. Both were using python3.5 and I used 'pip install --user git+git://github.com/mitmproxy/mitmproxy.git' to install the software.