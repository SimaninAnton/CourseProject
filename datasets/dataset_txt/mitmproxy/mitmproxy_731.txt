mrballcb commented on 7 Mar 2017 â€¢
edited
Steps to reproduce the problem:
Preconfigured the ~/.mitmproxy/mitmproxy-ca-cert.pem into Mac's "Keychain Access" app in System, configured to "Always Trust".
Start up mitmproxy with "--host".
Configure Mac to use 127.0.0.1 port 8080 for both http (80) and https (443).
Start app that uses WebSockets.
Find and select (move to) the flow with "Connection: Upgrade" header and same header in response.
Type "w" to write out flows, type "t" for this flow, and give it a filename. (Behaves the same if I write out all flows if one of them is websocket connection).
mitmproxy does a stack dump and exits:
Traceback (most recent call last):
  File "/usr/local/Cellar/mitmproxy/2.0.0/libexec/lib/python3.6/site-packages/mitmproxy/tools/console/master.py", line 281, in run
    self.loop.run()
  File "/usr/local/Cellar/mitmproxy/2.0.0/libexec/lib/python3.6/site-packages/urwid/main_loop.py", line 278, in run
    self._run()
  File "/usr/local/Cellar/mitmproxy/2.0.0/libexec/lib/python3.6/site-packages/urwid/main_loop.py", line 376, in _run
    self.event_loop.run()
  File "/usr/local/Cellar/mitmproxy/2.0.0/libexec/lib/python3.6/site-packages/urwid/main_loop.py", line 682, in run
    self._loop()
  File "/usr/local/Cellar/mitmproxy/2.0.0/libexec/lib/python3.6/site-packages/urwid/main_loop.py", line 719, in _loop
    self._watch_files[fd]()
  File "/usr/local/Cellar/mitmproxy/2.0.0/libexec/lib/python3.6/site-packages/urwid/raw_display.py", line 393, in <lambda>
    event_loop, callback, self.get_available_raw_input())
  File "/usr/local/Cellar/mitmproxy/2.0.0/libexec/lib/python3.6/site-packages/urwid/raw_display.py", line 493, in parse_input
    callback(processed, processed_codes)
  File "/usr/local/Cellar/mitmproxy/2.0.0/libexec/lib/python3.6/site-packages/urwid/main_loop.py", line 403, in _update
    self.process_input(keys)
  File "/usr/local/Cellar/mitmproxy/2.0.0/libexec/lib/python3.6/site-packages/urwid/main_loop.py", line 503, in process_input
    k = self._topmost_widget.keypress(self.screen_size, k)
  File "/usr/local/Cellar/mitmproxy/2.0.0/libexec/lib/python3.6/site-packages/mitmproxy/tools/console/window.py", line 84, in keypress
    k = super().keypress(size, k)
  File "/usr/local/Cellar/mitmproxy/2.0.0/libexec/lib/python3.6/site-packages/urwid/container.py", line 1116, in keypress
    return self.footer.keypress((maxcol,),key)
  File "/usr/local/Cellar/mitmproxy/2.0.0/libexec/lib/python3.6/site-packages/mitmproxy/tools/console/statusbar.py", line 155, in keypress
    return self.master.ab.keypress(*args, **kwargs)
  File "/usr/local/Cellar/mitmproxy/2.0.0/libexec/lib/python3.6/site-packages/mitmproxy/tools/console/statusbar.py", line 110, in keypress
    self.prompt_execute(self._w.get_edit_text())
  File "/usr/local/Cellar/mitmproxy/2.0.0/libexec/lib/python3.6/site-packages/mitmproxy/tools/console/statusbar.py", line 133, in prompt_execute
    msg = p(txt)
  File "/usr/local/Cellar/mitmproxy/2.0.0/libexec/lib/python3.6/site-packages/mitmproxy/tools/console/statusbar.py", line 21, in __call__
    return self.callback(pth, *self.args)
  File "/usr/local/Cellar/mitmproxy/2.0.0/libexec/lib/python3.6/site-packages/mitmproxy/tools/console/master.py", line 388, in save_flows
    return self._write_flows(path, self.view)
  File "/usr/local/Cellar/mitmproxy/2.0.0/libexec/lib/python3.6/site-packages/mitmproxy/tools/console/master.py", line 382, in _write_flows
    fw.add(i)
  File "/usr/local/Cellar/mitmproxy/2.0.0/libexec/lib/python3.6/site-packages/mitmproxy/io.py", line 27, in add
    tnetstring.dump(d, self.fo)
  File "/usr/local/Cellar/mitmproxy/2.0.0/libexec/lib/python3.6/site-packages/mitmproxy/contrib/tnetstring.py", line 66, in dump
    file_handle.write(dumps(value))
  File "/usr/local/Cellar/mitmproxy/2.0.0/libexec/lib/python3.6/site-packages/mitmproxy/contrib/tnetstring.py", line 57, in dumps
    _rdumpq(q, 0, value)
  File "/usr/local/Cellar/mitmproxy/2.0.0/libexec/lib/python3.6/site-packages/mitmproxy/contrib/tnetstring.py", line 142, in _rdumpq
    size = _rdumpq(q, size, v)
  File "/usr/local/Cellar/mitmproxy/2.0.0/libexec/lib/python3.6/site-packages/mitmproxy/contrib/tnetstring.py", line 142, in _rdumpq
    size = _rdumpq(q, size, v)
  File "/usr/local/Cellar/mitmproxy/2.0.0/libexec/lib/python3.6/site-packages/mitmproxy/contrib/tnetstring.py", line 149, in _rdumpq
    raise ValueError("unserializable object: {} ({})".format(value, type(value)))
ValueError: unserializable object: <WebSocketFlow (69 messages)> (<class 'mitmproxy.websocket.WebSocketFlow'>)

mitmproxy has crashed!
Please lodge a bug report at:
 https://github.com/mitmproxy/mitmproxy
Shutting down...
Any other comments? What have you tried so far?
If you run mitmproxy --host --no-websocket, this error writing out flows doesn't occur as the proxy doesn't honor the websocket upgrade. Operationally, I can't tell if mitmproxy filters out the upgrade header, or if it blocks the entire flow at the proxy. Either way, it doesn't have a problem when writing out the flows.
Our ultimate goal is to harden our app by forcing it to fallback to older web technologies like long polling if the websocket upgrade is blocked, such as by a BlueCoat configured to block websockets (apparently common on enterprise networks). I'm trying to get mitmproxy to mimic that behavior. Using --no-websocket does seem to achieve that, but when I try to compare flows between websocket and non-websocket, mitmproxy stackdumps when dumping the websocket flow.
System information
Mitmproxy version: 2.0.0 (release version)
Python version: 3.6.0
Platform: Darwin-16.4.0-x86_64-i386-64bit
SSL version: OpenSSL 1.1.0e 16 Feb 2017
Mac version: 10.12.3 ('', '', '') x86_64