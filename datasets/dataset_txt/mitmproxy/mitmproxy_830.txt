Contributor
rofreg commented on 15 Dec 2016
Steps to reproduce the problem:
Save the following as test_script.py:
import mitmproxy
import json

def request(flow):
  if flow.request.urlencoded_form:
    mitmproxy.ctx.log(str(flow.request.urlencoded_form))
  else:
    mitmproxy.ctx.log("No form parameters found")
Launch mitmdump with mitmdump -s test_script.py
Point your browser to https://secure.splitwise.com/login, and try to log in with any username or password (don't worry, you don't need an actual account)
The expected behavior is for flow.request.urlencoded_form to return a list of form parameters that includes ('utf8', '✓') (or (b'utf8', b'%E2%9C%93')). Instead, flow.request.urlencoded_form returns no parameters at all, because it throws an exception trying to process the Unicode ✓ symbol that is included in the form.
Any other comments? What have you tried so far?
A semi-working fix is to update this line to the following:
return tuple(mitmproxy.net.http.url.decode(str(self.content)))
It appears that mitmproxy.net.http.url.decode chokes when trying to process a parameter of the bytes type, but it succeeds when processing a parameter of the str type. Unfortunately, this also changes the type of the returned tuples from bytes to str, which probably isn't backwards-compatible with existing usage of mitmproxy. Not sure if there's an easy way to fix that – I plan to keep investigating, but if anyone has suggestions or expertise, I'd appreciate the help!
System information
Mitmproxy version: 0.19
Python version: 3.5.2
Platform: Darwin-16.1.0-x86_64-i386-64bit
SSL version: OpenSSL 1.0.2j  26 Sep 2016
Mac version: 10.12.1 ('', '', '') x86_64
/cc @jhottenstein