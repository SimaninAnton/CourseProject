bugi commented on 23 Jun 2015
Steps to reproduce the problem:
Use something like "mitmproxy -U http://localhost:8082/ -s change_upstream_proxy.py" to point mitmproxy to a non-existing upstream proxy.
Attempt to use that mitmproxy to connect to the alternate, real upstream you specified in change_upstream_proxy.py.
Notice that fails with 502.
Try again with a -U argument of a different, but real upstream proxy.
Now it works.
What is the expected behavior?
It should connect to the alternate upstream in change_upstream_proxy.py instead of returning 502
because of the deadness of the proxy specified with -U.
What went wrong?
From my new-to-mitmproxy perspective it looks like an optimization that usually makes sense, except in the case where one wants to change proxies.
Any other comments?
For context, my eventual goal is an evil smart proxy load balancer. The smarts would include gathering metrics, for example of what proxies get blocked by whom and when, then store that for offline analysis. Then later perhaps use that data to make a smarter proxy load balancer.
As I'm new to mitmproxy, any guidance would be appreciated. Especially if somebody has already done this, yet eluded my google-fu.