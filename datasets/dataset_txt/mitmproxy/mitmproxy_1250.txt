Contributor
bazzinotti commented on 24 Dec 2015
Hello, Merry Christmas | | [Your favorite Holiday] !!
I am filing this issue as a feature request that demonstrates the core modification necessary to achieve the feature request. I am also including a background story that demonstrates why my use of auxiliary tools such as Wireshark proved inadequate for my situation, whereas developing a minimal PoC of the feature request solved my problem.
Background
This is written in the present tense but I want you to read it understanding that this is really the past tense (I've since figured out an unofficial solution, which will be illustrated at the bottom of this post).
I am currently successfully performing a transparent TCP SSL mitm session with a client cert. I want to record the bidirectional decrypted stream as direct binary. Although handshaking info is good auxiliary debug info, ultimately I want solely a dump of the decrypted ssl conversation.
Not knowing how to do this directly in mitmproxy, I instead had mitmproxy output a pre master secret file which I configured Wireshark to use. My cmdline invocation looked like this:
SSLKEYLOGFILE="/tmp/keylog.txt" mitmproxy -T --host --client-certs mitmproxy_client_cert/ --raw-tcp
this method was successful until I realized that I am suffering from packet loss due to the high volume high frequency of packets... I did try playing around with Wireshark settings, but it is too clear to me that if I only knew how to get mitmproxy to simply share the decrypted information with me in the style I prefer,I would be golden. This is because mitmproxy is in the direct path of the packets, unlike Wireshark, which is only an observer.
Solution
I have discovered how to dump the decrypted SSL conversation to file. I will demonstrate these details below, and I ask for help incorporating the feature officially.
the file to modify is libmproxy/protocol/rawtcp.py, do a search for:
if self.logging:
(line 55~). I added the following at the end of the stanza:
with open("/tmp/test.txt", "a") as bindump:
    bindump.write(buf[:size].tobytes());
This is all that is needed to have a PoC binary-dump of the decrypted SSL conversation (no handshaking, IP info, etc -- only the raw binary messages from both the client/server). This is exactly what I want.
As far as a more official version -- I'd like to have a new cmdline option (needs title) that allows specification of the logfile to use. This logfile would be erased upon startup, either by opening the file for writing (not appending) and maintaining the file handle, or by explicitly removing the file and subsequently appending to it.
I am not a pro python programmer, so I definitely need some help doing this properly.
Thanks,
bazz