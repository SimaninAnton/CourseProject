Member
mhils commented on 27 Aug 2014
We need to define a clear and concise way to change the target server for requests. This possibly includes unifying flow.request.host, flow.request.set_url, flow.live.change_server and flow.server_conn. This is unexpectedly tricky, as we want to consider a variety of edge-cases:
Mode TLS Common Use Case
Regular No Read/Update target server (flow.server_conn and request.host)
Regular Yes Read/Update target server (flow.server_conn)
Reverse * Read/Update target server flow.server_conn
Transparent * Read/Update target server (flow.server_conn)
Upstream * Read/Update proxy server (flow.server_conn)
Upstream No Read/Update target server (request.host)
Upstream Yes Read/Update target server (CONNECT)
* * Optionally update host header (request.headers)
: Make sure that we don't have any accidental changes of the target server.
: This edge-case shouldn't be handled by the main API.
Ideally, we'd have a simple .host / .port attributes that covers the most prominent use-case, namely updating the target server.
How do we deal with changes between no-ssl/SSL? Do we use the .scheme attribute?
Do we want to have these attribute on the (HTTP)Flow or on the HTTPRequest? As the target host usually depends on the request, I'd prefer that.
What do we do with the current request.host attribute, which stores the host value from absolute-form requests? Do we re-use this in cases where we don't have an absolute-form request for the target server inferred from other sources?
Given the proposed .host/.port attributes, we need to introduce change-detection in the HTTPProtocolHandler.
Also, we want to make sure that replayed sessions make sense in general.