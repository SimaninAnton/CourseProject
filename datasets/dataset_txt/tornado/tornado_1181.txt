chadwhitacre commented on 15 Apr 2011
If I pass a bytestring to a Template, or a unicode object with no whitespace, then I can successfully generate the template using unicode data:
>>> Template("{{ text }}").generate(text=unichr(1758))
'\xdb\x9e'
>>> Template(u"{{ text }}").generate(text=unichr(1758))
'\xdb\x9e'
>>> Template(" {{ text }}").generate(text=unichr(1758))
' \xdb\x9e'
If I pass a bytestring to a Template, or a unicode object with (or without) whitespace, then I can successfully generate the template with ASCII data:
>>> Template(" {{ text }}").generate(text=u"a")
' a'
>>> Template(u" {{ text }}").generate(text="a")
u' a'
But if I pass a unicode object to Template with whitespace, and try to generate the template with unicode data, I get a UnicodeDecodeError:
>>> Template(u" {{ text }}").generate(text=unichr(1758))
ERROR:root:<string> code:
1  def _execute():
2      _buffer = []
3      _buffer.append(u' ')
4      _tmp = text
5      if isinstance(_tmp, str): _buffer.append(_tmp)
6      elif isinstance(_tmp, unicode): _buffer.append(_tmp.encode('utf-8'))
7      else: _buffer.append(str(_tmp))
8      return ''.join(_buffer)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/Users/whit537/personal/aspen/master/aspen/_tornado/template.py",
   line 129, in generate
    return execute()
  File "<string>", line 8, in _execute
UnicodeDecodeError: 'ascii' codec can't decode byte 0xdb in position 0:
  ordinal not in range(128)
This is with 2afc7ba.