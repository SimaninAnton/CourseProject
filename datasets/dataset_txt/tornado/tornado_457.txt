adamrothman commented on 25 Aug 2016
In python/asyncio#285, asyncio.sleep was optimized for calls where delay = 0. Similar to tornado.gen.moment, the idea is that sometimes you just want to yield control to the event loop without waiting for a prescribed amount of time. Tornado doesn't handle this correctly, however. Given the following simple demo server:
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import asyncio

from tornado.httpserver import HTTPServer
from tornado.platform.asyncio import AsyncIOMainLoop
from tornado.web import Application
from tornado.web import RequestHandler


class HelloHandler(RequestHandler):

    async def get(self):
        await asyncio.sleep(0)
        self.write('hello')


if __name__ == '__main__':
    AsyncIOMainLoop().install()

    app = Application(
        handlers=[
            ('/hello', HelloHandler),
        ],
        autoescape=None,
        debug=True,
    )
    server = HTTPServer(app)
    server.listen(8080)

    asyncio.get_event_loop().run_forever()
Requesting GET /hello always results in the following crash:
Traceback (most recent call last):
  File "/Users/adam/.pyenv/versions/3.5.2/lib/python3.5/site-packages/tornado/web.py", line 1469, in _execute
    result = yield result
  File "/Users/adam/.pyenv/versions/3.5.2/lib/python3.5/site-packages/tornado/gen.py", line 1015, in run
    value = future.result()
  File "/Users/adam/.pyenv/versions/3.5.2/lib/python3.5/site-packages/tornado/concurrent.py", line 237, in result
    raise_exc_info(self._exc_info)
  File "<string>", line 3, in raise_exc_info
  File "/Users/adam/.pyenv/versions/3.5.2/lib/python3.5/site-packages/tornado/gen.py", line 1021, in run
    yielded = self.gen.throw(*exc_info)
  File "<string>", line 6, in _wrap_awaitable
  File "./test.py", line 14, in get
    await asyncio.sleep(0)
  File "/Users/adam/.pyenv/versions/3.5.2/lib/python3.5/asyncio/tasks.py", line 506, in sleep
    yield
  File "/Users/adam/.pyenv/versions/3.5.2/lib/python3.5/site-packages/tornado/gen.py", line 1015, in run
    value = future.result()
  File "/Users/adam/.pyenv/versions/3.5.2/lib/python3.5/site-packages/tornado/concurrent.py", line 237, in result
    raise_exc_info(self._exc_info)
  File "<string>", line 3, in raise_exc_info
  File "/Users/adam/.pyenv/versions/3.5.2/lib/python3.5/site-packages/tornado/gen.py", line 1097, in handle_yield
    self.future = convert_yielded(yielded)
  File "/Users/adam/.pyenv/versions/3.5.2/lib/python3.5/functools.py", line 743, in wrapper
    return dispatch(args[0].__class__)(*args, **kw)
  File "/Users/adam/.pyenv/versions/3.5.2/lib/python3.5/site-packages/tornado/gen.py", line 1229, in convert_yielded
    raise BadYieldError("yielded unknown object %r" % (yielded,))
tornado.gen.BadYieldError: yielded unknown object None