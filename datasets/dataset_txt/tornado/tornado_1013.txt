Contributor
minrk commented on 24 Jan 2013
I maintain zeromq/pyzmq, which ships a copy of tornado.ioloop (as of 2.4.1), and I've been looking into the changes coming for tornado 3.0, and what they might mean for pyzmq.
The changes made for zmq compatibility are minimal:
IOLoop.close(socket) adds a check for fd.close(), so that it can close zmq sockets. This is easy enough with a subclass, since the close method is small.
poll() can raise particular errors. base IOLoop handles EINTR specially, but I add a switch to interpret zmq.ETERM as an instruction to exit the loop. It wouldn't be awesome to override start(), because it's a tiny change in a massive method.
My question is, would you be amenable to making it easier to add this ETERM functionality? Either via config (e.g. IOLoop.errno_handlers[zmq.ETERM] = loop.stop) or breaking up loop.start() into smaller bites (e.g. try: poll(); except: self._handle_poll_error())?