Member
bdarnell commented on 20 Jan 2015
Undecorated coroutines (called with yield from as in asyncio) can be much faster than decorated ones. It's already possible to use them, but it requires a strict separation between coroutines that may be entry points (must be decorated, called with yield) and those that are only used internally (may be undecorated, and if so, only called with yield from). We may want to embrace this pattern by:
Adding a __iter__ method to Future that returns itself, so that decorated coroutines can be called with either yield or yield from
Adding generator functions to convert_yielded
(Maybe) Making most of the places that auto-detect a returned Future (e.g. for RequestHandler methods) also recognize undecorated generator functions and wrap them automatically.
Since the main benefits of undecorated coroutines come with the yield from syntax, we cannot actually use them in Tornado itself as long as we support python 2.