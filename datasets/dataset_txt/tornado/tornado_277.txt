Contributor
pitrou commented on 22 Oct 2017
For better performance on large reads, it would be useful to expose a readinto or recv_into-like operation on IOStream. The API could read like:
    def read_into(self, buf, callback=None, partial=False):
        """Asynchronously read a number of bytes.

        ``buf`` must be a writable buffer into which data will be read.
        If a callback is given, it will be run with the number of read
        bytes as an argument; if not, this method returns a `.Future`.

        If ``partial`` is true, the callback is run as soon as any bytes
        have been read.  Otherwise, it is run when the ``buf`` has been
        entirely filled with read data.
        """
@bdarnell, what do you think? Is this something you would like to see? See performance analysis at https://mail.python.org/pipermail/async-sig/2017-October/000392.html