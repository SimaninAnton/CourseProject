Contributor
alekstorm commented on 4 Apr 2012
A Tornado implementation of Google's proposal for SPDY, a replacement for HTTP, would be a fantastic project for anyone unafraid of digging into Tornado's (well-organized) internals to spearhead. Since SPDY specifies a new binary framing scheme while preserving HTTP's method-based request-response semantics*, SPDYServer would be a drop-in replacement for HTTPServer, completely transparent to Application. Supporting alternate protocols is healthy for the growth of Tornado in general.
Proposed standard setup:
app = MyApplication()
HTTPServer(app).listen(port=80, spdy_port=88)
SPDYServer(app).listen(port=88)
IOLoop.instance().start()
If the spdy_port parameter to HTTPServer is not None, it will advertise SPDY support on the given port by adding an Alternate-Protocol: 88:spdy/2 header to each outgoing response. The client can then switch the protocol of future requests.
I'd recommend fully implementing draft version 2 first, since it's what Chromium currently speaks, and I haven't been able to find a timetable for version 3 implementation.
We're not the only HTTP server/framework out there, so it would be great if the SPDY frame serialization and parsing logic could be factored out into a general-purpose library - Mark Nottingham's code would be a good start.
*SPDY does add a server push capability not present in HTTP (spec). Support for this should be added last, and might work through a new method on RequestHandler (which can detect a SPDY connection by checking if request.version == "SPDY/2"). This makes sense semantically, because each server push must be associated with an open client-initiated stream. Haven't given this much thought yet.