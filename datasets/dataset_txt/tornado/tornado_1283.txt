nailor commented on 13 Apr 2010
If AsyncHTTPClient has queued _perform calls when the close is called the AsyncHTTPClient eventually raises following error:
error: cannot invoke perform() - no multi handle
This happens because the callbacks to _perform have been added to underlying IOLoop while close closes all the curl handles. Following patch adds a simple variable to detect whether the client is closed or not and properly avoids executing the _perform if the client is closed
diff --git a/tornado/httpclient.py b/tornado/httpclient.py
index 2c9155e..47acb29 100644
--- a/tornado/httpclient.py
+++ b/tornado/httpclient.py
@@ -122,6 +122,7 @@ class AsyncHTTPClient(object):
             instance._events = {}
             instance._added_perform_callback = False
             instance._timeout = None
+            instance._closed = False
             cls._ASYNC_CLIENTS[io_loop] = instance
             return instance
 
@@ -131,6 +132,7 @@ class AsyncHTTPClient(object):
         create and destroy http clients.  No other methods may be called
         on the AsyncHTTPClient after close().
         """
+        self._closed = True
         del AsyncHTTPClient._ASYNC_CLIENTS[self.io_loop]
         for curl in self._curls:
             curl.close()
@@ -165,6 +167,9 @@ class AsyncHTTPClient(object):
     def _perform(self):
         self._added_perform_callback = False
 
+        if self._closed:
+            return
+
         while True:
             while True:
                 ret, num_handles = self._multi.perform()