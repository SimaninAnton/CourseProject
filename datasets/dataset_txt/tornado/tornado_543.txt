Contributor
emehrkay commented on 25 Feb 2016
Would it be useful for tornado.web.RequestHandler.render to use UI modules to create the inline and linked JS/CSS? It could be as simple as defining simple modules for each with a render method that does what this code does (https://github.com/tornadoweb/tornado/blob/master/tornado/web.py#L736).
The web.Application would define these modules by default allowing developers to override them.
class JSFileModule(UIModule):

    def render(self, js_files=None):
        js_files = js_files or []
        # copy/paste, not tested
        paths = []
        unique_paths = set()
        for path in js_files:
            if not is_absolute(path):
                path = self.static_url(path)
            if path not in unique_paths:
                paths.append(path)
                unique_paths.add(path)
        return ''.join('<script src="' + escape.xhtml_escape(p) +
                           '" type="text/javascript"></script>'
                           for p in paths)

...and so on

# update to web.RequestHandlerRender
....
if js_files:
    js = self.ui['modules'].JSFileModule(js_files)
    sloc = html.rindex(b'</body>')
    html = html[:sloc] + utf8(js) + b'\n' + html[sloc:]
This would be useful in situations where the developer would like more control over how the assets are added to the final markup. A simple example would be writing a custom JSFileModule to combine all of the files into one or uglyify/minimize the assets.
If this is something that Tornado should/could do, I'll create the pull request.
Thanks