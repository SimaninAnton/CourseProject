984958198 commented on 21 Dec 2016 •
edited
Part of my code:
#-*- coding:utf-8 -*-

__version__ = "1.0"
from bs4 import BeautifulSoup
from tornado.ioloop import IOLoop
from tornado.web import RequestHandler, Application
from concurrent.futures import ThreadPoolExecutor
from pyquery import PyQuery
import datetime, time, tornado, requests, urllib, redis, base64
import logging, logging.handlers, json, threading, re, demjson, platform, xmltodict
from gevent import monkey
from gevent.pool import Pool
monkey.patch_all()

if platform.system() != 'Windows':
    r = redis.Redis(host='192.168.2.140', port=6479, db=1)
else:
    r = redis.Redis(host='127.0.0.1', port=6379, db=1)

executor = ThreadPoolExecutor(100)  #最大并发数


logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(name)s - %(levelname)s - %(funcName)s - %(message)s",
)
handler = logging.handlers.RotatingFileHandler("/home/guozx/log/weibo_zhihu.log", maxBytes=1024 * 1024 * 5, backupCount=5) if platform.system() != 'Windows' else logging.StreamHandler()
formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(funcName)s - %(message)s")
handler.setFormatter(formatter)
mylog = logging.getLogger('x')
mylog.propagate = 0
mylog.addHandler(handler)

tornadolog = logging.getLogger("tornado")
tornadolog.propagate = 0
tornadolog.addHandler(handler)

asc = threading.Thread(target=error_alert_thread)
asc.setName('error_alert_thread')
asc.setDaemon(True)
asc.start()

class MainHandler(RequestHandler):
    def get(self, path):
        data = "hello word"
        if path == '1':
            data = ', '.join([v.name for v in threading._active.values()])
        self.write(data)

class BaseHandler(RequestHandler):
    def set_default_headers(self):
        self.set_header("Access-Control-Allow-Origin", "*")
        self.set_header("Access-Control-Allow-Headers", "accept, origin, content-type, content-length")
        self.set_header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS')
        #self.set_header("Access-Control-Allow-Credentials", True)

        self.set_header('Content-Type', 'application/json; charset=UTF-8')

class GetWeiboDebugHandler(BaseHandler):
    @tornado.gen.coroutine
    def get(self):
        mylog.info('111111111111111111111111111')
        q = self.get_argument('q')
        num = self.get_argument('num', None)
        res = yield executor.submit(self.get_weibo, q, int(num) if num else 1)
        mylog.info("666666666666666666666666666666")
        self.finish("%s(%s)" % (self.get_argument('callback'), res) if self.get_argument('callback', None) else res)
        mylog.info("7777777777777777777777777777777777")

    def get_weibo(self, names, num=1):
        mylog.info("2222222222222222222222222222222222")
        try:
            nameList = json.loads(names)
            assert type(nameList) == list
        except:
            nameList = [names]
        def _x(name, num):
            mylog.info('3333333333333333333333333333333333')
            if not name:
                return {}
            key = "wb_%s_%s" % (name, num)
            data = r.get(key)
            mylog.info('4444444444444444444444444444444444')
            if data:
                data = json.loads(data)
            else:
                data = _get_weibo(name, num)
                r.set(key, json.dumps(data), weibo_cache_timeout)
            return data
        dataList, error = _gevent_dispose(_x, [(n, num) for n in nameList], max_pool=5)
        mylog.info('5555555555555555555555555555555555')
        return json.dumps(dataList)



pathList = [
    (r"/(\d*)", MainHandler),
    (r"/get_weibo_debug", GetWeiboDebugHandler),
]
if __name__ == "__main__":
    host, port = '0.0.0.0', 9092
    mylog.info("%s:%s service start..." % (host, port))
    application = Application(pathList)
    application.listen(port, host, idle_connection_timeout=180)
    IOLoop.instance().start()
Run for a period of time occasionally be stuck
When I call /get_weibo_debug, Only the output to '111111111111111111111111111'
Python 2.7.5 (default, Jun 17 2014, 18:11:42) 
[GCC 4.8.2 20140120 (Red Hat 4.8.2-16)] on linux2
pip list:
Babel (2.3.4)
backlash (0.1.1)
backports-abc (0.4)
backports.ssl-match-hostname (3.5.0.1)
Beaker (1.8.0)
beautifulsoup4 (4.5.1)
bs4 (0.0.1)
certifi (2016.8.8)
crank (0.8.0)
cssselect (0.9.2)
decorator (4.0.10)
demjson (2.2.4)
FormEncode (1.3.0)
funcsigs (1.0.2)
futures (3.0.5)
gearbox (0.1.1)
Genshi (0.7)
gevent (1.1.2)
greenlet (0.4.10)
lxml (3.6.4)
MarkupSafe (0.23)
Ming (0.5.4)
mock (2.0.0)
myproj (0.1, /home/guozx/myproj)
numpy (1.11.1)
pandas (0.18.1)
PasteDeploy (1.5.2)
pbr (1.10.0)
pip (8.1.2)
protobuf (3.1.0)
pymongo (2.9.3)
pyquery (1.2.13)
python-dateutil (2.5.3)
pytz (2016.4)
redis (2.10.5)
repoze.lru (0.6)
repoze.who (2.3)
requests (2.10.0)
setuptools (23.0.0)
singledispatch (3.4.0.3)
six (1.10.0)
speaklater (1.3)
sprox (0.10.2)
Tempita (0.5.2)
tensorflow (0.12.0rc1)
tg.devtools (2.3.8)
tgext.admin (0.7.3)
tgext.crud (0.8.2)
TGScheduler (1.7.0)
tornado (4.4.1)
TurboGears2 (2.3.8)
tw2.core (2.2.4)
tw2.forms (2.2.5)
WebHelpers2 (2.0)
WebOb (1.6.1)
WebTest (1.4.3)
wheel (0.29.0)
xmltodict (0.10.2)
zope.interface (4.2.0)