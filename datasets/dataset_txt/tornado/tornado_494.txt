ghost commented on 8 Jun 2016 â€¢
edited by ghost
As I reviewing the httputil.py for HTTPHeaders, I found that there are not slots defined.
As I know, slots can reduce memory usage for such objects, the HTTPHeaders are used largely in RequestHandlers and HTTPClients , and their attributes are static and limited to the three internal fields: _dict, _as_list and _last_key .
So why not use slots ?
Further more, attributes defined in slots can be looked up more quickly than those without slots . In this case, the attribute _dict is referenced a lot, so i think this will make a big difference. And I made some tests as below:
In [11]: class C(object):
   ....:     def __init__(self, name):
   ....:         self.name = name

In [12]: class D(object):
   ....:     __slots__ = ('name',)
   ....:     def __init__(self, name):
   ....:         self.name = name

In [13]: c = C('hello')
In [14]: d = D('hello')

In [17]: %timeit c.name
The slowest run took 28.13 times longer than the fastest. This could mean that an intermediate result is being cached 
10000000 loops, best of 3: 66.1 ns per loop

In [18]: %timeit d.name
The slowest run took 32.02 times longer than the fastest. This could mean that an intermediate result is being cached 
10000000 loops, best of 3: 54.5 ns per loop
reference for name of class D(with slots) takes less time than class C . This test is ran under Python3.4 .
But it seems it will not work in Python2, because collections.MutableMapping in Python2 doesn't have
slots defined.