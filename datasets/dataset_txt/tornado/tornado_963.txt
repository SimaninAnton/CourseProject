Contributor
gmr commented on 1 May 2013
https://github.com/facebook/tornado/blob/master/tornado/ioloop.py#L544
IMO a package should not implicitly change configured logging behavior.
I assume the correct behavior is to not do the logging.basicConfig here at all, but if you really want to keep users from complaining, I wonder if you should just use logging.getLogger('tornado').handlers which would check to see if a tornado logger has any handlers.
A better check for what you're doing if you want to keep it global and not focused on tornado is to check logging._handlers. Any handler that emits logging statements would be in the _handlers dictionary.
If you really want to keep users from complaining about logging when they don't know what they're doing, I'd probably check any(logging._handlers, logging.getLogger('tornado').handlers). But honestly I think the code should be moved to tornado.log and complaining users should be educated about stdlib logging or told to use tornado.log.enable_pretty_logging or a new tornado.log.setup or something to get rid of the warning.
FWIW In my cause I remove the root logger on purpose and the tornado IO loop is resetting my logging configuration. Checking for either logging._handlers or logging.getLogger('tornado') would prevent this from happening. Checking getLogger('tornado').handlers would require I add a tornado logger to my dictConfig, which I'm not opposed to.
Let me know if you're not opposed to the change and if you want a pull request, what your preferred method of fixing the problem is. As someone who uses stdlib logging in ways beyond how tornado expects it to be used, this is a major pain where I put in hacks to reconfigure logging after I start the ioloop for apps.