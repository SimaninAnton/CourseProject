wmslei commented on 18 Apr 2013
I'm sorry, because I can't open the google group, so I submit the question here.
I want to make a long connection, then I add the @tornado.web.asynchronous in my request handler. At the beginning, I put the post() method and my customized methods under @tornado.web.asynchronous, it works well, but just now, I want to use on_finish method and on_connection_close method do something, I also put them under @tornado.web.asynchronous, when I request, the handler finish directly and return nothing. After that, I attempt to put the two methods before @tornado.web.asynchronous, this time it can work normally.
Follow is the wrong code:
class NewsListenHandler(tornado.web.RequestHandler):
"""docstring for NewsListenHandler"""
@tornado.web.asynchronous
def on_connection_close(self):
    logging.info('---------connection closed------------')

def on_finish(self):
    logging.info('-------request finished------------')

def post(self):
   self.timer = threading.Timer(30.0, self.timeout)
   self.timer.start()

def timeout(self):
    logging.info("------------listenHandler timer timeout-----------")
    if not self.request.connection.stream.closed():
        self.finish("finish")
Follow is the right code:
class NewsListenHandler(tornado.web.RequestHandler):
"""docstring for NewsListenHandler"""
def on_connection_close(self):
    logging.info('---------connection closed------------')

def on_finish(self):
    logging.info('-------request finished------------')

@tornado.web.asynchronous
def post(self):
   self.timer = threading.Timer(30.0, self.timeout)
   self.timer.start()

def timeout(self):
    logging.info("------------listenHandler timer timeout-----------")
    if not self.request.connection.stream.closed():
        self.finish("finish")
So, I want to know which methods should put under @tornado.web.asynchronous, and which shouldn't.
Thanks!