Contributor
willmcgugan commented on 2 Apr 2018
As far as I can tell, tornado has no 'flow control' for websockets. A websocket will receive data as fast as it can, and store the data in a deque. If that data is not consumed as fast as it is written, then that deque will grow in size indefinitely, ultimately leading to a memory error and killing the process.
This seems to be occurring in practice when we send large files over our Tornado websocket server. I also suspect that it makes a websocket server vulnerable to a DOS attack. A simple chat application for example, where one client is on a slow internet connection and the other is on a fast connection. If the client on the fast connection sends packets fast enough, it could kill the server.
Is this a known issue? Are there any workarounds?
I think the ideal solution may be to have no user space buffer at all, so that a websocket may only read as fast as the data is consumed.