itayB commented on 29 Mar 2019
Setup: Python 2.7.15, Tornado 5.1
I'm a bit confused with the documention, especially about this sentence:
In older versions of Python, looping is tricky with coroutines since there is no way to yield on every iteration of a for or while loop and capture the result of the yield
and I want to verify that I'm doing it right.
Scenario:
from tornado.gen import coroutine, Return

    @coroutine
    def _build_requests(self):
        requests = []
        for slot_id, slots in self.slots_dict.items():
            input1 = self._get_strategy_for_slot(some_args)
            output1 = yield self._builders1(input1)
            input2 = create_input2(output1)
            output2 = yield self._get_second_strategy(input2)
            requests += self.append(output2)
        raise Return(requests)
Somehow the overall process takes longer than before I've added the async things (@coroutine, yield and raise Return).
The function above mixed two different things I want to make sure:
Does coroutine function know how to handle more than 1 yield?
Does coroutine work with loops as in the example above? (and if I remove one yield?)