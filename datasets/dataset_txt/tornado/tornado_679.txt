celestian02 commented on 1 Mar 2015
Hi,
I have been trying the simplest integration between Flask and Tornado, on UNIX systems, I don't have any issues with autoreload but on windows I get the following:
[I 150301 12:17:54 autoreload:195] C:\<PATH>\tes.py modified; restarting server
[E 150301 12:17:54 ioloop:588] Exception in callback <functools.partial object at 0x031A2390>
    Traceback (most recent call last):
      File "C:\<PATH>\libs\tornado\ioloop.py", line 568, in _run_callback
        ret = callback()
      File "C:\<PATH>\libs\tornado\stack_context.py", line 275, in null_wrapper
        return fn(*args, **kwargs)
      File "C:\<PATH>\libs\tornado\ioloop.py", line 993, in _run
        self._schedule_next()
      File "C:\<PATH>\libs\tornado\ioloop.py", line 1000, in _schedule_next
        self._timeout = self.io_loop.add_timeout(self._next_timeout, self._run)
      File "C:\<PATH>\libs\tornado\ioloop.py", line 465, in add_timeout
        return self.call_at(deadline, callback, *args, **kwargs)
      File "C:\<PATH>\libs\tornado\ioloop.py", line 873, in call_at
        heapq.heappush(self._timeouts, timeout)
    TypeError: heap argument must be a list
Traceback (most recent call last):
  File "C:\<PATH>\tes.py", line 42, in <module>
    run_server()
  File "C:\<PATH>\tes.py", line 37, in run_server
    io_loop.start()
  File "C:\<PATH>\libs\tornado\ioloop.py", line 815, in start
    event_pairs = self._impl.poll(poll_timeout)
  File "C:\<PATH>\libs\tornado\platform\select.py", line 63, in poll
    self.read_fds, self.write_fds, self.error_fds, timeout)
select.error: (10038, 'An operation was attempted on something that is not a socket')
Would you have any idea why this occurs on Windows and not on UNIX systems ? Thanks!
Below is the very basic flask/tornado implementation:
from flask import Flask
import tornado.wsgi
import tornado.httpserver
import tornado.ioloop
import tornado.options
import tornado.autoreload

app = Flask(__name__)
app.debug = True


@app.route("/")
def hello():
    return "Hello World!"


def run_server():
    # Create the HTTP server
    http_server = tornado.httpserver.HTTPServer(
        tornado.wsgi.WSGIContainer(app)
    )
    http_server.listen(5000)

    # Reads args given at command line (this also enables logging to stderr)
    tornado.options.parse_command_line()

    # Start the I/O loop with autoreload
    io_loop = tornado.ioloop.IOLoop.instance()
    tornado.autoreload.start()
    try:
        io_loop.start()
    except KeyboardInterrupt:
        pass

if __name__ == "__main__":
    run_server()