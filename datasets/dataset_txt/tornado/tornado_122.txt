Contributor
maartenbreddels commented on 30 Oct 2018
Thanks for the awesome library, have been using it for years now, and I can usually solve issues with all the resources around, but now I'm stuck.
Based on this answer, I expected this snippet:
#! /usr/bin/env python

import tornado.ioloop
import tornado.web
import time
import datetime

class MainHandler(tornado.web.RequestHandler):
    def get(self):
        self.write("Hello, world!\n")

class MainHandler2(tornado.web.RequestHandler):
    def get(self):
        self.write("Hello, world2!\n")

def start_app(*args, **kwargs):
    application = tornado.web.Application([
        (r"/", MainHandler),
    ])
    server = application.listen(7888)
    print("Starting app")
    return server

def start_app2(*args, **kwargs):
    application = tornado.web.Application([
        (r"/", MainHandler2),
    ])
    server = application.listen(7888)
    print("Starting app2")
    return server

def stop_tornado():
    ioloop = tornado.ioloop.IOLoop.current()
    ioloop.add_callback(ioloop.stop)
    print("Asked Tornado to exit")

def main():
    server = start_app()
    tornado.ioloop.IOLoop.current().add_timeout(
        datetime.timedelta(seconds=10),
        stop_tornado)
    tornado.ioloop.IOLoop.current().start()
    print("Tornado finished")
    server.stop()

    # Starting over
    start_app2()
    tornado.ioloop.IOLoop.current().start()
main()
To answer 'Hello, world!' for ~10 seconds, and after printing 'Starting app2' to answer 'Hello world2!'. However, it keeps the old handlers active it seems. Is this supported, maybe a bug, and is there a workaround?
I need this because i start a server to make the browser do something, then I close the server, and later on, an external library might start the server again. Since it hosts files from a tempdir, I see 404s (since the files are deleted). I think I've reduced my issue to this example here.