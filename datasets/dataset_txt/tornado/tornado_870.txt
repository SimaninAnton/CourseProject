Contributor
antonv6 commented on 9 Dec 2013
I think I got a bug, but it's so easy to reproduce I'm not sure if it's a documented feature instead (ha).
Consider this code:
app.py:
import tornado.ioloop
import tornado.web

class MainHandler(tornado.web.RequestHandler):
    def get(self):
        self.render("template.html", item="spam", items=["foo", "bar"])

application = tornado.web.Application([
    (r"/", MainHandler),
])

if __name__ == "__main__":
    application.listen(9000)
    tornado.ioloop.IOLoop.instance().start()
template.html:
{{ item }}

{% for item in items %}
  {{ item }}
{% end %}
I'm using Tornado 3.1.1 and this app, when accessed, produces an UnboundLocalError:
Traceback (most recent call last):
  File "/tmp/venv/local/lib/python2.7/site-packages/tornado/web.py", line 1141, in _when_complete
    callback()
  File "/tmp/venv/local/lib/python2.7/site-packages/tornado/web.py", line 1162, in _execute_method
    self._when_complete(method(*self.path_args, **self.path_kwargs),
  File "./hello.py", line 6, in get
    self.render("template.html", item="spam", items=["foo", "bar"])
  File "/tmp/venv/local/lib/python2.7/site-packages/tornado/web.py", line 538, in render
    html = self.render_string(template_name, **kwargs)
  File "/tmp/venv/local/lib/python2.7/site-packages/tornado/web.py", line 645, in render_string
    return t.generate(**namespace)
  File "/tmp/venv/local/lib/python2.7/site-packages/tornado/template.py", line 273, in generate
    return execute()
  File "template_html.generated.py", line 4, in _tt_execute
    _tt_tmp = item  # template.html:1
UnboundLocalError: local variable 'item' referenced before assignment
If you move {{ item }} in the template to the bottom, after the for block, it somewhat works, but outputs "foo bar bar", and "spam" is never seen.
Now, I know an easy workaround of just renaming the variable, but I'm curious as to what is the reason for the exception here. Thanks.