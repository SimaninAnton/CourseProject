k4ppa commented on 7 Mar 2018
I'm trying to unit test a Tornado application.
The goal of my test (test_POST_empty_json_in_do_nothing) is now only to send a POST request of an empty zipped json. When it receive the request the HTTPServer must only return an HTTP code 200.
Following this example I overrided get_http_server to return my HTTPServer.
But doing this both tests fail with:
AssertionError: Async operation timed out after 5 seconds
As far as I understand the tips found online about this issue (for example here and here), this problem is generated by the use of the wrong ioloop. A workaround is to override the function get_new_ioloop to return IOLoop.instance().
I did it as you can see in the code below.
ecomtranslatorSrv.py
class MainHandler(tornado.web.RequestHandler):
    def get(self):
        pass

class NewBasketHandler(tornado.web.RequestHandler):
    def post(self):
        pass


def make_app():
    return tornado.web.Application([
        (MAIN_HANDLER, MainHandler),
        (NEW_BASKET, NewBasketHandler)
    ])


def make_server(app, io_loop=None):
    return tornado.httpserver.HTTPServer(app, io_loop=io_loop, decompress_request=True)
test_translator_server.py
class TestTranslatorServer(AsyncHTTPSTestCase):

    def setUp(self):
        super(TestTranslatorServer, self).setUp()

    def tearDown(self):
        super(TestTranslatorServer, self).tearDown()

    def get_app(self):
        return ecomtranslatorSrv.make_app()

    def get_http_server(self):
        return ecomtranslatorSrv.make_server(self._app, self.io_loop)

    def get_new_ioloop(self):
        return IOLoop.instance()

    def test_GET_main_handler(self):
        response = self.fetch('/')
        self.assertEqual(response.code, 200)

    def test_POST_empty_json_in_do_nothing(self):
        headers = tornado.httputil.HTTPHeaders({"Content-Type": "application/json", 'Content-Encoding': 'gzip'})
        body = zlib.compress('{}')
        response = self.fetch(method='POST', path='/basket/json_in', headers=headers, body=body)
        self.assertEqual(response.code, 200)


def main():
    tornado.testing.main()


if __name__ == '__main__':
    main()
But the result did not change: both tests fail after the 5 seconds timeout.
The only way to get rid of the issue is to not override get_http_server. But I don't want to use the HTTPServer created by default by the test module, since I'm trying to use TDD and I don't want to write code that is not used in the tests.
So how can I test the creation of an HTTPServer without incurring in a time out error?
Python 2.7.12
tornado 4.5.1