ithayer commented on 1 Nov 2010
This is during a _finish_request call. The stack trace is below. read_until calls read_to_buffer, which calls read_from_socket. It seems that in most cases, socket.recv inside read_from_socket raises an exception (errno.EWOULDBLOCK, also displayed below). However in the minority of cases, socket.recv returns "", which causes the socket to be closed. This causes the call to
    self._add_io_state(self.io_loop.READ)
inside IOStream::read_until to operate on a null socket. Is that expected?
The abnormal, exception case:
Traceback (most recent call last):
File "/root/debtapp/web/django_tornado/tornado/web.py", line 814, in _stack_context
yield
File "/root/debtapp/web/django_tornado/tornado/stack_context.py", line 77, in StackContext
yield
File "/usr/lib/python2.6/contextlib.py", line 113, in nested
yield vars
File "/root/debtapp/web/django_tornado/tornado/stack_context.py", line 126, in wrapped
callback(_args, *_kwargs)
File "/root/debtapp/web/django_tornado/tornado/httpserver.py", line 300, in _on_write_complete
self._finish_request()
File "/root/debtapp/web/django_tornado/tornado/httpserver.py", line 322, in _finish_request
self.stream.read_until("\r\n\r\n", self._on_headers)
File "/root/debtapp/web/django_tornado/tornado/iostream.py", line 137, in read_until
self._add_io_state(self.io_loop.READ)
File "/root/debtapp/web/django_tornado/tornado/iostream.py", line 371, in _add_io_state
self.io_loop.update_handler(self.socket.fileno(), self._state)
AttributeError: 'NoneType' object has no attribute 'fileno'
The 'normal' case:
ERROR:root:[Errno 11] Resource temporarily unavailable
Traceback (most recent call last):
File "/root/debtapp/web/django_tornado/tornado/iostream.py", line 266, in _read_from_socket
chunk = self.socket.recv(self.read_chunk_size)