KimiNewt commented on 8 Jul 2015
I have a pattern which I've used often, wherein I add a future which needs to run for the entirety of the program. For instance, constantly querying another service and acting on the results when they arrive (possibly gen.sleeping if the other service says it's not ready, though that's not important)
It usually looks something like this:
@gen.coroutine
def query_forever(self):
    while not self.should_stop:
          res = yield my_other_coroutine()
          if not do_something(res):
                yield gen.sleep(SLEEP_TIME)

# Later
IOLoop.current().add_future(query_forever(), terminated_callback)
It can also be done by a callback reregistering itself when finished. It would be similar to creating a PeriodicCallback with an interval of zero.
Is this something that has room in the main package? I can create a PR if so.