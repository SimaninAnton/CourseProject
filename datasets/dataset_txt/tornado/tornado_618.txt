iivvaall commented on 18 Aug 2015
The following code dumps an exception.
#!/usr/bin/env python 

import tornado
from tornado.ioloop import IOLoop
import tornado.netutil

io_loop = IOLoop.current()

resolver = tornado.netutil.ThreadedResolver()
res = resolver.resolve('invalid', 9999)
io_loop.add_future(res, lambda(res): None)
resolver.close()

io_loop.call_later(0, lambda: io_loop.stop())

io_loop.start()
io_loop.close()
ERROR:concurrent.futures:exception calling callback for <Future at 0x7f1eec1896d0 state=finished raised gaierror>
Traceback (most recent call last):
  File "/home/ival/files/cwd/torch/run/torch/local/lib/python2.7/site-packages/concurrent/futures/_base.py", line 298, in _invoke_callbacks
    callback(self)
  File "/home/ival/files/cwd/torch/run/torch/local/lib/python2.7/site-packages/tornado/ioloop.py", line 584, in <lambda>
    lambda future: self.add_callback(callback, future))
  File "/home/ival/files/cwd/torch/run/torch/local/lib/python2.7/site-packages/tornado/ioloop.py", line 914, in add_callback
    raise RuntimeError("IOLoop is closing")
RuntimeError: IOLoop is closing
The exception pollutes unittests output.
If there is no more then one resolver instance in a script, the bug is eliminated by manually shutting the executor down after resolver.close().
tornado.netutil.ThreadedResolver._threadpool.shutdown()
tornado.netutil.ThreadedResolver._threadpool = None
python2.7.6
argparse==1.2.1
backports.ssl-match-hostname==3.4.0.2
certifi==2015.04.28
enum34==1.0.4
futures==3.0.3
tornado==4.2.1
wsgiref==0.1.2