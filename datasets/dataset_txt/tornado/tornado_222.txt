jayanth1991 commented on 10 Mar 2018
OS: Windows 10
Tornado: 5.0
Python: 3.6.4
import tornado.web
import tornado.gen
import time
from tornado.ioloop import IOLoop


class TestHandler(tornado.web.RequestHandler):

    def _call_later_something(self):
        pass

    def _get(self, var1):
        # Does some time consuming call
        # Mocking it
        time.sleep(2)
        IOLoop.current().call_later(10, self._call_later_something)
        resp_dict = {}
        resp_dict['blah'] = "blah"

        return resp_dict

    @tornado.web.asynchronous
    @tornado.gen.coroutine
    def get(self, *args, **kwargs):
        var1 = self.get_argument('var1', None)
        resp_dict = yield IOLoop.current().run_in_executor(None,
                                                           self._get,
                                                           var1)
        self.write(resp_dict)
        self.finish()


class MyApp(tornado.web.Application):
    def __init__(self, test=False):
        handlers = [
            (r"/api/sometest", TestHandler),
        ]
        tornado_settings = dict(
            debug=True,
            serve_traceback=True,
        )

        tornado.web.Application.__init__(self, handlers, **tornado_settings)


if __name__ == "__main__":
    # Hard code this so that jarvis and ironman can be in sync
    port_number = 9999

    http_server = MyApp()
    http_server.listen(port_number)
    IOLoop.instance().start()
This works completely fine on Python2.7, throws the error
RuntimeError: There is no current event loop in thread 'ThreadPoolExecutor-1_0'
Not sure what I am doing wrong.