Contributor
pitrou commented on 2 Nov 2017
>>> loop = IOLoop.current()
>>> loop
<tornado.platform.asyncio.AsyncIOMainLoop at 0x7fba6ca64550>
>>> def f():
...:    l = IOLoop.current()
...:    print(l, l is loop)
...:    
>>> threading.Thread(target=f).start()
>>> Exception in thread Thread-572:
Traceback (most recent call last):
  File "/home/antoine/miniconda3/envs/dask36/lib/python3.6/threading.py", line 916, in _bootstrap_inner
    self.run()
  File "/home/antoine/miniconda3/envs/dask36/lib/python3.6/threading.py", line 864, in run
    self._target(*self._args, **self._kwargs)
  File "<ipython-input-6-23395fe1f1eb>", line 2, in f
    l = IOLoop.current()
  File "/home/antoine/tornado/tornado/ioloop.py", line 254, in current
    current = AsyncIOMainLoop()
  File "/home/antoine/tornado/tornado/util.py", line 306, in __new__
    instance.initialize(*args, **init_kwargs)
  File "/home/antoine/tornado/tornado/platform/asyncio.py", line 167, in initialize
    super(AsyncIOMainLoop, self).initialize(asyncio.get_event_loop(),
  File "/home/antoine/miniconda3/envs/dask36/lib/python3.6/asyncio/events.py", line 676, in get_event_loop
    return get_event_loop_policy().get_event_loop()
  File "/home/antoine/miniconda3/envs/dask36/lib/python3.6/asyncio/events.py", line 584, in get_event_loop
    % threading.current_thread().name)
RuntimeError: There is no current event loop in thread 'Thread-572'.
This is because the default asyncio event loop policy only automatically creates an event loop for the main thread.