thehesiod commented on 26 Oct 2013
There are some sites which return invalid "form" data for type "application/x-www-form-urlencoded" which results in parse_body_arguments in python 3.3 throwing an exception while executing:
uri_arguments = parse_qs_bytes(native_str(body), keep_blank_values=True)
with the exception:
UnicodeDecodeError: 'utf8' codec can't decode byte 0x82 in position 1: invalid start byte.
looking at the code I believe its meant to instead log a warning and continue since in many cases the callee is just expecting to look at the body text directly (like me), and not have the form data parsed.
I fixed it temporarily with the following:
try:
    uri_arguments = parse_qs_bytes(native_str(body), keep_blank_values=True)
except:
    gen_log.warning("Invalid application/x-www-form-urlencoded")
    uri_arguments = { }
Here's the sample code that triggers this error with a server which reports a 599 error with body text chars >= 0x82:
class TransparentProxyHandler(tornado.web.RequestHandler):
    SUPPORTED_METHODS = ['GET', 'POST']

    @tornado.web.asynchronous
    def get(self):
        def handle_response(response):
            if response.error and not isinstance(response.error, tornado.httpclient.HTTPError):
                self.set_status(500)
                self.write('Internal server error:\n' + str(response.error))
                self.finish()
            else:
                self.set_status(response.code)
                for header in response.headers:
                    v = response.headers.get(header)
                    if v:
                        self.set_header(header, v)

                if response.body: self.write(response.body)
                self.finish()

        req = tornado.httpclient.HTTPRequest(url=self.request.uri,
                method=self.request.method, body=self.request.body,
                headers=self.request.headers, follow_redirects=False,
                allow_nonstandard_methods=True)

        client = tornado.httpclient.AsyncHTTPClient()
        try:
            client.fetch(req, handle_response)
        except tornado.httpclient.HTTPError as e:
            if hasattr(e, 'response') and e.response:
                handle_response(e.response)
            else:
                self.set_status(500)
                self.write('Internal server error:\n' + str(e))
                self.finish()

    @tornado.web.asynchronous
    def post(self):
        return self.get()
This is with tornado-3.1.1-py3.3. If this fix could be rolled in that would be awesome!
Here's a monkey patched fix btw:
import tornado.httputil

from tornado.escape import native_str, parse_qs_bytes, utf8
from tornado.log import gen_log
def parse_body_arguments(content_type, body, arguments, files):
    if content_type.startswith("application/x-www-form-urlencoded"):
        try:
            uri_arguments = parse_qs_bytes(native_str(body), keep_blank_values=True)
        except:
            gen_log.warning("Invalid application/x-www-form-urlencoded")
            uri_arguments = { }

        for name, values in uri_arguments.items():
            if values:
                arguments.setdefault(name, []).extend(values)
    elif content_type.startswith("multipart/form-data"):
        fields = content_type.split(";")
        for field in fields:
            k, sep, v = field.strip().partition("=")
            if k == "boundary" and v:
                tornado.httputil.parse_multipart_form_data(utf8(v), body, arguments, files)
                break
        else:
            gen_log.warning("Invalid multipart/form-data")

tornado.httputil.parse_body_arguments = parse_body_arguments