Contributor
ysimonson commented on 7 Oct 2013
There could be many new use-cases for UIModules if they could accept child template logic, like blocks.
e.g. it would be pretty nice if you could wrap up the html involved in rendering a bootstrap modal into a UIModule, but it would have to take a potentially long html string as its body. If the UIModule could instead accept a body parameter in its render() method that includes the rendered template logic, you could do something like this:
{% module FrameModalRenderer("modal title", buttons=["close", "save"]) %}
  <p>this is the modal body</p>
{% end %}
Which would generate something like this:
<div class="modal fade">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h4 class="modal-title">modal title</h4>
      </div>
      <div class="modal-body">
        <p>this is the modal body</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn">close</button>
        <button type="button" class="btn">save</button>
      </div>
    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
As it stands now, UIModules are not practical for such a use case as the html body would have to be passed in as a parameter.
Angular.js allows for a similar mechanism when defining new elements. The big gain out of this is that people can wrap their favorite libraries' (e.g. bootstrap's) required html - severely reducing the amount of copypasta code - and reduce the burden of breaking changes made by the libraries themselves - e.g. from bootstrap 2 to 3.