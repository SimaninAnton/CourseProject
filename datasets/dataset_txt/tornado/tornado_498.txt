Contributor
nickcoutsos commented on 3 Jun 2016
The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields.
The 304 response MUST NOT contain a message-body, and thus is always terminated by the first empty line after the header fields.
It seems like 204 and 304 should behave in the same way in regards to the response body and use of the Content-Length/Transfer-Encoding headers.
I'm writing a proxy and would like to be able to stream responses from other servers with as little modification as possible. ExpressJS (used in most of the upstreams I deal with) sends a 204 without a content-length header explicitly.
I can get around the automatic addition of a Content-Length: 0 by flushing headers in my request handler instead of calling finish, but in the http1connection module it looks like it takes this to mean that I must be using a chunked response (http1connection.py#L354). Later on, however, it uses the existence of the Transfer-Encoding header to assume I'm trying to send a body and raises an error. (http1connection.py#L541)
Would it be appropriate to treat 204 in the same way as the 304 when dealing with Content-Length/Transfer-Encoding headers? I was about to submit a pull request thinking it'd be as simple as changing
start_line.code != 304
to
start_line.code not in (204, 304)
but this kind of check happens in a few different places and there are tests in place to verify some of the existing behaviour, so maybe this needs some discussion. Has this kind of thing come up before?