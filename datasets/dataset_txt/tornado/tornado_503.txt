lanzhiheng commented on 23 May 2016
I see the source code of tornado.httputil
Please look this code segment:
    def __init__(self, size):
        super(_NormalizedHeaderCache, self).__init__()
        self.size = size
        self.queue = collections.deque()
with the self.queue tornado have there operations:
self.queue.append(key)
        if len(self.queue) > self.size:
            # Limit the size of the cache.  LRU would be better, but this
            # simpler approach should be fine.  In Python 2.7+ we could
            # use OrderedDict (or in 3.2+, @functools.lru_cache).
            old_key = self.queue.popleft()
            del self[old_key]
and then I see the deque infomation
In [129]: collections.deque?
Docstring:
deque([iterable[, maxlen]]) --> deque object
If I initialize an object
In [139]: a = collections.deque([], 10)

In [140]: for i in range(100):
    a.append(i)
   .....:

In [141]: a
Out[141]: deque([90, 91, 92, 93, 94, 95, 96, 97, 98, 99])
It will automatically delete the left item, when append new item, and the length of the deque greater than maxlen (10)ã€‚so I want to change the code like below:
    def __init__(self, size):
        super(_NormalizedHeaderCache, self).__init__()
        self.size = size
        self.queue = collections.deque([], self.size)

    def __missing__(self, key):
        normalized = "-".join([w.capitalize() for w in key.split("-")])
        self[key] = normalized
        self.queue.append(key)
        # Limit the size of the cache.  LRU would be better, but this
        # simpler approach should be fine.  In Python 2.7+ we could
        # use OrderedDict (or in 3.2+, @functools.lru_cache).
        return normalized
Is it OK?