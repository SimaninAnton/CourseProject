Winiex commented on 27 Jan 2016
In tornado.web.RequestHandler.flush method, there exists an operation that joins the members of self._write_buffer into a string. But when self._headers_written is True and self.request.method == "HEAD", the result of it is discarded. I think if we avoided this operation under such condition, there might be an opportunity for performance improvement, for joining array of strings in CPython is heavy, especially when self._write_buffer contains a lot of members.
diff --git a/tornado/web.py b/tornado/web.py
index c51d5f6..5d86a8f 100644
--- a/tornado/web.py
+++ b/tornado/web.py
@@ -861,8 +861,6 @@ class RequestHandler(object):
         .. versionchanged:: 4.0
            Now returns a `.Future` if no callback is given.
         """
-        chunk = b"".join(self._write_buffer)
-        self._write_buffer = []
         if not self._headers_written:
             self._headers_written = True
             for transform in self._transforms:
@@ -873,6 +871,10 @@ class RequestHandler(object):
             # Ignore the chunk and only write the headers for HEAD requests
             if self.request.method == "HEAD":
                 chunk = None
+            else:
+                chunk = b"".join(self._write_buffer)
+
+            self._write_buffer = []

             # Finalize the cookie headers (which have been stored in a side
             # object so an outgoing cookie could be overwritten before it
@@ -887,6 +889,9 @@ class RequestHandler(object):
             return self.request.connection.write_headers(
                 start_line, self._headers, chunk, callback=callback)
         else:
+            chunk = b"".join(self._write_buffer)
+            self._write_buffer = []
+
             for transform in self._transforms:
                 chunk = transform.transform_chunk(chunk, include_footers)
             # Ignore the chunk and only write the headers for HEAD requests
Final code:
def flush(self, include_footers=False, callback=None):
    if not self._headers_written:
        self._headers_written = True
        for transform in self._transforms:
            self._status_code, self._headers, chunk = \
                transform.transform_first_chunk(
                    self._status_code, self._headers,
                    chunk, include_footers)
        # Ignore the chunk and only write the headers for HEAD requests
        if self.request.method == "HEAD":
            chunk = None
        else:
            chunk = b"".join(self._write_buffer)

        self._write_buffer = []

        # Finalize the cookie headers (which have been stored in a side
        # object so an outgoing cookie could be overwritten before it
        # is sent).
        if hasattr(self, "_new_cookie"):
            for cookie in self._new_cookie.values():
                self.add_header("Set-Cookie", cookie.OutputString(None))

        start_line = httputil.ResponseStartLine('',
                                                self._status_code,
                                                self._reason)
        return self.request.connection.write_headers(
            start_line, self._headers, chunk, callback=callback)
    else:
        chunk = b"".join(self._write_buffer)
        self._write_buffer = []

        for transform in self._transforms:
            chunk = transform.transform_chunk(chunk, include_footers)
        # Ignore the chunk and only write the headers for HEAD requests
        if self.request.method != "HEAD":
            return self.request.connection.write(chunk, callback=callback)
        else:
            future = Future()
            future.set_result(None)
                return future
This is a thought not being comprehensively tested. Any ideas?