oliviercwa commented on 16 Dec 2019
How to reproduce the behavior
1- Initialize a Language class with a vocab.
2- Add NER component
3- run on one sentence
(Code below / Method 1)
Result: No Named Entity detected
Expected: NER to work, and no difference between the two methods
Note: interestingly enough, if you assign the vocab property directly (method 2 below), it works. I am not quite sure why.
import spacy
import os
import distutils.sysconfig
from spacy.vocab import Vocab
from spacy.language import Language
from pathlib import Path

model_path = os.path.join(distutils.sysconfig.get_python_lib(),'en_core_web_sm', 'en_core_web_sm-2.1.0')
vocab_path = os.path.join(model_path, 'vocab')
ner_path = os.path.join(model_path, 'ner')
sentence = "John Smith went to Berlin"

vocab = spacy.vocab.Vocab()
vocab.from_disk(vocab_path)

# Method 1: creating language with vocab ==> Named entities is empty
nlp = Language(vocab)
sentencizer = nlp.create_pipe('sentencizer')
nlp.add_pipe(sentencizer, first=True)

ner_pipe = nlp.create_pipe('ner')
ner_pipe.from_disk(Path(ner_path), exclude=['vocab'])
nlp.add_pipe(ner_pipe, last=True)
method1 = nlp(sentence)
assert(method1.ents != ())  # ASSERT TRIGGERS

#Method 2: assigning vocab ==> Named entity works as expected
nlp2 = Language()
nlp2.vocab = vocab
sentencizer = nlp2.create_pipe('sentencizer')
nlp2.add_pipe(sentencizer, first=True)

ner_pipe2 = nlp2.create_pipe('ner')
ner_pipe2.from_disk(Path(ner_path), exclude=['vocab'])
nlp2.add_pipe(ner_pipe2, last=True)
method2 = nlp2(sentence)
assert(method2.ents != ())  # ASSERT DOES NOT TRIGGER
Your Environment
Operating System:
Python Version Used:
spaCy Version Used:
Environment Information: