Member
ines commented on 3 Aug 2019
This is a really easy mistake to make and can lead to very frustrating debugging experiences. It just happened to me again and I've debugged people's training code in the past where this issue was the root cause of the model not learning anything.
Consider the following example:
texts = ["hello world", "this is a text"]
cats = [{"LABEL": True}, {"LABEL": False}]
nlp.update(texts, cats)
Spot the problem? It's here:
texts = ["hello world", "this is a text"]
- cats = [{"LABEL": True}, {"LABEL": False}]
+ cats = [{"cats": {"LABEL": True}}, {"cats": {"LABEL": False}}]
nlp.update(texts, cats)
Requiring a dict like that makes sense because it allows you to train multiple things at once (entities and text categories for instance). However, we currently do not raise an error if no expected top-level keys are present and instead just quietly ignore the additional keys. Which means that in the first example, the model would have been updated with nothing.
Instead, spaCy should raise an error like "Trying to call nlp.update with annotation type 'LABEL'. Expected top-level keys 'words', 'tags', 'heads', 'deps', 'entities' or 'cats'. Got: {"LABEL": True}."