davidbernat commented on 26 Aug 2019 â€¢
edited
How to reproduce the behaviour
I use a custom class pipeline to create extensions ("noun_chunks", "time_chunks", etc..). These are created on the Doc object using the static class method.
Calling nlp(text) works as expected.
Calling nlp(more_text) will show create a new doc using nlp.make_doc() that already has doc._.noun_chunks populated (and verb chunks) and user_data populated as well, with data derived from nlp(text).
The unexpected behavior is persistence across nlp() calls.
Here is a minimum reproduction. It appears to be due to an incorrect and/or illegal accessing of the doc._._extensions["noun_chunk"][0] values by key, rather than by doc._._noun_chunk explicitly. This access by key functionality is what I desire, however. Is this possible?
import spacy
name = "en_core_web_sm"

def add_sentence_lengths(doc):
    if not doc.has_extension("lengths"):
        doc.set_extension("lengths", default=[], force=True)
    print(doc._._extensions)
    for s in doc.sents:
        doc._._extensions["lengths"][0].append(len(s))
    print(doc._._extensions, doc._.lengths, doc.get_extension("lengths")
          )
    return doc


nlp = spacy.load(name)
nlp.add_pipe(add_sentence_lengths, name="my_pipe")

d = nlp("This sentence here. And here.")
d = nlp("This sentence is more.")
This results in the following output, which is "incorrect."
{'lengths': ([], None, None, None)}
{'lengths': ([4, 3], None, None, None)} [4, 3] ([4, 3], None, None, None)
{'lengths': ([4, 3], None, None, None)}
{'lengths': ([4, 3, 5], None, None, None)} [4, 3, 5] ([4, 3, 5], None, None, None)
Your Environment
Operating System: MacOS 10.14.6
Python Version Used: 3.6
spaCy Version Used: 2.1.8
Environment Information: IntelliJ