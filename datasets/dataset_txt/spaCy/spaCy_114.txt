oliviercwa commented on 26 Nov 2019 â€¢
edited
How to reproduce the behaviour
1- Create a pipeline with 2 components of the same type each with different name. (One is enough, but this is to show that sometimes we want the name different from the pipe type)
[code below reproduces the problem]
2- Pipe these components together
3- Save to disk (or to_byte)
4- Load from disk
Result:
The loader does not find the pipe as it's looking for the name of the pipe in the factory instead of its Python type
Expected:
Persistence to persist the name and the pipe type
import spacy
import os

class MockComponent():
  ComponentName: str = 'MockComponent'
  def __init__(self, name = ''):
    self.name = name
  def __call__(self, doc):
    return doc

from spacy.language import Language
Language.factories[MockComponent.ComponentName] = lambda nlp, **cfg: MockComponent(**cfg) 
nlp = spacy.blank('en')

first = nlp.create_pipe(MockComponent.ComponentName, {'name':'first'})
last = nlp.create_pipe(MockComponent.ComponentName, {'name':'last'})
nlp.add_pipe(first, first.name, first=True)
nlp.add_pipe(last, last.name, last=True)
nlp.to_disk(os.path.join(os.path.dirname(__file__), 'temp'))
nlp2 = spacy.load(os.path.join(os.path.dirname(__file__), 'temp'))
Result:
"KeyError: "[E002] Can't find factory for 'first'. This usually happens when spaCy calls nlp.create_pipe with a component name that's not built in - for example, when constructing the pipeline from a model's meta.json. If you're using a custom component, you can write to Language.factories['first'] or remove it
from the model meta and add it via nlp.add_pipe instead."
Expected:
The serializer to serialize the Pipe Type (here MockComponent) and the Pipe Name. On load it would use the Pipe Type to create the object and assign the name in the pipeline.
Your Environment
Operating System: Win 10
Python Version Used: 3.7.4
spaCy Version Used: 2.1.9
Environment Information: