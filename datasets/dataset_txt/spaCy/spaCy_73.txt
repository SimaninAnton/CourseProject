JScarlet commented on 11 Dec 2019
How to reproduce the behaviour
I'm using the dependency parser to parse a set of sentences with the same verb. I wanted the results that the ROOT of every sentence is always the same verb. For example, I hope the ROOTs of the two sentences "pin shortcuts on a package." and "pins a contact at a provided position." is "pin". However, the ROOT of the first sentence is "shortcuts". "pin" is labeled as a "NOUN", and the dep is "amod". The second sentence is what I want.
So I use the add_special_case method of the tokenizer, and label the word "pin" as a "VERB" before parsing. However, it just changes the POS tag and the dep is still "amod".
My codes and outputs look like the following:
import spacy
from spacy.attrs import ORTH, LEMMA, POS, TAG

nlp = spacy.load('en')
sentence1 = 'pin shortcuts on a package.'
sentence2 = 'pins a contact at a provided position'

nlp_text1 = nlp(sentence1)
nlp_text2 = nlp(sentence2)

for token in nlp_text1:
    print(token.text, token.pos_, token.dep_)

print('---------')

for token in nlp_text2:
    print(token.text, token.pos_, token.dep_)

print("============")

special_case1 = [{ORTH: 'pin', LEMMA: 'pin', POS: 'VERB', TAG: 'VERB'}]
special_case2 = [{ORTH: 'pins', LEMMA: 'pin', POS: 'VERB', TAG: 'VERB'}]
nlp.tokenizer.add_special_case('pin', special_case1)
nlp.tokenizer.add_special_case('pins', special_case2)

new_nlp_text1 = nlp(sentence1)
new_nlp_text2 = nlp(sentence2)

for token in new_nlp_text1:
    print(token.text, token.pos_, token.dep_)

print('-------')

for token in new_nlp_text2:
    print(token.text, token.pos_, token.dep_)
pin NOUN amod
shortcuts NOUN ROOT
on ADP prep
a DET det
package NOUN pobj
. PUNCT punct
---------
pins VERB ROOT
a DET det
contact NOUN dobj
at ADP prep
a DET det
provided VERB amod
position NOUN pobj
============
pin VERB amod
shortcuts NOUN ROOT
on ADP prep
a DET det
package NOUN pobj
. PUNCT punct
-------
pins VERB ROOT
a DET det
contact NOUN dobj
at ADP prep
a DET det
provided VERB amod
position NOUN pobj
So I wonder whether I can select a word like "pin" as a ROOT before dependency parsing, like what the add_special_case method of the tokenizer does?
Your Environment
Operating System: macOS Catalina 10.15.1
Python Version Used: python 3.7
spaCy Version Used: 2.1.4
Environment Information: