mapadofu commented on 9 Nov 2019 â€¢
edited
The SHAPE matching against tokens comprised of digits that have leading zeros, e.g. 01234 doesn't work correctly.
What I'd expect is that the pattern [{'SHAPE':'ddddd'}] would match against the token 01234; this is not the case. Another way to say it is that you can have a token with text=="01234" whose shape=="ddddd", but does not match that pattern.
How to reproduce the behaviour
import spacy
from spacy.matcher import Matcher

def run_test(model_name, pattern, text):
    nlp = spacy.load('en_core_web_md', disable=[])

    m = Matcher(nlp.vocab)
    m.add('Serial', None, pattern)

    doc = nlp(text)

    print("Text:", text)
    print("Tokens:", list(doc))
    print("Shapes:", list(t.shape_ for t in doc))
    print("Model: {0} ({1})".format(model_name, spacy.__version__))
    print("Pattern:", pattern)
    print("Matches:", list(doc[s:t] for (i,s,t) in m(doc)))


text = "I'm writing in reference to invoice no. 01234-0001"

model_name = 'en_core_web_sm'
# same behaviour for medium and large
pattern = [{'SHAPE':'ddddd'}, {'ORTH':'-'}, {'SHAPE':'dddd'}]

run_test(model_name, pattern, text)
print("Bad")
print()
print()

pattern = [{'TEXT':{'REGEX':r"\d{5}"}}, {'ORTH':'-'}, {'TEXT':{'REGEX':r"\d{4}"}}]
run_test(model_name, pattern, text)
print("Works") 
print()
Your Environment
spaCy version: 2.1.8
Platform: Linux-4.15.0-66-generic-x86_64-with-Ubuntu-18.04-bionic
Python version: 3.6.8