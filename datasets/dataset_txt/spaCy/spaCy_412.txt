Contributor
yash1994 commented on 20 Aug 2019
How to reproduce the behavior
import spacy
from spacy.matcher import Matcher
nlp = spacy.load('en_core_web_sm')
matcher = Matcher(nlp.vocab)

pattern_1 = [{"LOWER": "hello"},{"IS_PUNCT": True, "OP": "!"}]
pattern_2 = [{"LOWER": "hello"},{"IS_PUNCT": True, "OP": "?"}]
pattern_3 = [{"LOWER": "hello"},{"IS_PUNCT": True}]

matcher.add("pattern_1", None, pattern_1)
matcher.add("pattern_2", None, pattern_2)
matcher.add("pattern_3", None, pattern_3)

doc = nlp(u'Hello! Hello')
matches = matcher(doc)
for match_id, start, end in matches:
 string_id = nlp.vocab.strings[match_id]  # Get string representation
 span = doc[start:end]  # The matched span
 print(match_id, string_id, start, end, span.text)
Actual Output
15719126060659784350 pattern_2 0 2 Hello!
13375652922493068680 pattern_3 0 2 Hello!
15719126060659784350 pattern_2 2 3 Hello
Expected Ouput
-------------------- pattern_1 2 3 Hello
15719126060659784350 pattern_2 0 2 Hello!
13375652922493068680 pattern_3 0 2 Hello!
15719126060659784350 pattern_2 2 3 Hello
Your Environment
Operating System: Ubuntu 18.04.1 LTS
Python Version Used: Python 3.6.7
spaCy Version Used: 2.1.8