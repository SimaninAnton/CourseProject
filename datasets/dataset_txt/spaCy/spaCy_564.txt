jonasadigi commented on 4 Jul 2019
How to reproduce the behaviour
Similar to Issue #3279, I tried to improve NER accuracy of the german model by training the model further on some data. For that I first tried to get a working test implementation inspired by https://medium.com/@manivannan_data/how-to-train-ner-with-custom-training-data-using-spacy-188e0e508c6
I first tried it with English model and data:
TRAIN_DATA = [('what is the price of polo?', {'entities': [(21, 25, 'PrdName')]}), 
              ('what is the price of ball?', {'entities': [(21, 25, 'PrdName')]}), 
              ('what is the price of jegging?', {'entities': [(21, 28, 'PrdName')]}), 
              ('what is the price of t-shirt?', {'entities': [(21, 28, 'PrdName')]}), 
              ('what is the price of jeans?', {'entities': [(21, 26, 'PrdName')]}), 
              ('what is the price of bat?', {'entities': [(21, 24, 'PrdName')]}), 
              ('what is the price of shirt?', {'entities': [(21, 26, 'PrdName')]}), 
              ('what is the price of bag?', {'entities': [(21, 24, 'PrdName')]}), 
              ('what is the price of cup?', {'entities': [(21, 24, 'PrdName')]}), 
              ('what is the price of jug?', {'entities': [(21, 24, 'PrdName')]}), 
              ('what is the price of plate?', {'entities': [(21, 26, 'PrdName')]}), 
              ('what is the price of glass?', {'entities': [(21, 26, 'PrdName')]})]

def main(model=None, output_dir=None, n_iter=100):
    """Load the model, set up the pipeline and train the entity recognizer."""
    if model is not None:
        nlp = spacy.load(model)  # load existing spaCy model
        print("Loaded model '%s'" % model)
    else:
        nlp = spacy.blank("en")  # create blank Language class
        print("Created blank 'en' model")

    # create the built-in pipeline components and add them to the pipeline
    # nlp.create_pipe works for built-ins that are registered with spaCy
    if "ner" not in nlp.pipe_names:
        ner = nlp.create_pipe("ner")
        nlp.add_pipe(ner, last=True)
    # otherwise, get it so we can add labels
    else:
        ner = nlp.get_pipe("ner")

    # add labels
    for _, annotations in TRAIN_DATA:
        for ent in annotations.get("entities"):
            ner.add_label(ent[2])

    # get names of other pipes to disable them during training
    other_pipes = [pipe for pipe in nlp.pipe_names if pipe != "ner"]
    with nlp.disable_pipes(*other_pipes):  # only train NER
        # reset and initialize the weights randomly – but only if we're
        # training a new model
        if model is None:
            nlp.begin_training()
        for itn in range(n_iter):
            random.shuffle(TRAIN_DATA)
            losses = {}
            # batch up the examples using spaCy's minibatch
            batches = minibatch(TRAIN_DATA, size=compounding(4.0, 32.0, 1.001))
            for batch in batches:
                texts, annotations = zip(*batch)
                nlp.update(
                    texts,  # batch of texts
                    annotations,  # batch of annotations
                    drop=0.2,  # dropout - make it harder to memorise data
                    losses=losses,
                )
            if itn % 5 == 0:
                print("Losses", losses)

    # test the trained model
    for text, _ in TRAIN_DATA:
        doc = nlp(text)
        print("Entities", [(ent.text, ent.label_) for ent in doc.ents])
        print("Tokens", [(t.text, t.ent_type_, t.ent_iob) for t in doc])

main()
This works well and when testing, all the entities from the training data are recognized.
However, if I do the same with some roughly equivalent german data:
TRAIN_DATA = [('Was kostet das Auto?', {'entities': [(15, 18, 'PrdName')]}), 
              ('Was kostet der Ball?', {'entities': [(15, 18, 'PrdName')]}), 
              ('Was kostet die Hose?', {'entities': [(15, 18, 'PrdName')]}), 
              ('Was kostet das T-shirt?', {'entities': [(15, 21, 'PrdName')]}), 
              ('Was kostet die Jeans?', {'entities': [(15, 19, 'PrdName')]}), 
              ('Was kostet der Rechner?', {'entities': [(15, 21, 'PrdName')]}), 
              ('Was kostet die Karte?', {'entities': [(15, 19, 'PrdName')]}), 
              ('Was kostet die Tür?', {'entities': [(15, 17, 'PrdName')]}), 
              ('Was kostet der Schrank?', {'entities': [(15, 21, 'PrdName')]}), 
              ('Was kostet der Tisch?', {'entities': [(15, 19, 'PrdName')]}), 
              ('Was kostet das Bild?', {'entities': [(15, 18, 'PrdName')]}), 
              ('Was kostet der Stuhl?', {'entities': [(15, 19, 'PrdName')]})]
and set the model to german
if model is not None:
        nlp = spacy.load(model)  # load existing spaCy model
        print("Loaded model '%s'" % model)
    else:
        nlp = spacy.blank("de")  # create blank Language class
        print("Created blank 'de' model")
No entities are recognized:
Entities []
Tokens [('Was', '', 2), ('kostet', '', 2), ('die', '', 2), ('Karte', '', 2), ('?', '', 2)]
Entities []
Tokens [('Was', '', 2), ('kostet', '', 2), ('der', '', 2), ('Stuhl', '', 2), ('?', '', 2)]
Entities []
Tokens [('Was', '', 2), ('kostet', '', 2), ('das', '', 2), ('T-shirt', '', 2), ('?', '', 2)]
Entities []
Tokens [('Was', '', 2), ('kostet', '', 2), ('der', '', 2), ('Rechner', '', 2), ('?', '', 2)]
Entities []
Tokens [('Was', '', 2), ('kostet', '', 2), ('der', '', 2), ('Ball', '', 2), ('?', '', 2)]
Entities []
Tokens [('Was', '', 2), ('kostet', '', 2), ('das', '', 2), ('Auto', '', 2), ('?', '', 2)]
Entities []
Tokens [('Was', '', 2), ('kostet', '', 2), ('der', '', 2), ('Tisch', '', 2), ('?', '', 2)]
Entities []
Tokens [('Was', '', 2), ('kostet', '', 2), ('die', '', 2), ('Tür', '', 2), ('?', '', 2)]
Entities []
Tokens [('Was', '', 2), ('kostet', '', 2), ('die', '', 2), ('Hose', '', 2), ('?', '', 2)]
Entities []
Tokens [('Was', '', 2), ('kostet', '', 2), ('das', '', 2), ('Bild', '', 2), ('?', '', 2)]
Entities []
Tokens [('Was', '', 2), ('kostet', '', 2), ('der', '', 2), ('Schrank', '', 2), ('?', '', 2)]
Entities []
Tokens [('Was', '', 2), ('kostet', '', 2), ('die', '', 2), ('Jeans', '', 2), ('?', '', 2)]
Although loss is going down very fast. The same happens if I do not use a blank model but load a german model instead. Also I tried some other german test data which also did not work. Am I doing something wrong or is there some kind of issue?
Your Environment
Info about spaCy
spaCy version: 2.1.4
Platform: Darwin-17.7.0-x86_64-i386-64bit
Python version: 3.7.3
Models: de, en
Operating System: macOS high sierra 10.13.6