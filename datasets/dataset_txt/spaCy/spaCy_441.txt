Contributor
fizban99 commented on 9 Aug 2019
According to the documentation, the PhraseMatcher allows setting a different attribute other than ORTH. It explicitely mentions LOWER, POS and DEP, but leaves the door open for other attributes.
The LEMMA attribute does not seem to work with the English model. This was mentioned in the gitter chat room.
How to reproduce the behaviour
If we take the exact example in the usage guide and just add attr="LEMMA" to the constructor, it does not find any match:
import spacy
from spacy.matcher import PhraseMatcher

nlp = spacy.load('en_core_web_sm')
matcher = PhraseMatcher(nlp.vocab, attr="LEMMA")
terms = [u"Barack Obama", u"Angela Merkel", u"Washington, D.C."]
# Only run nlp.make_doc to speed things up
patterns = [nlp.make_doc(text) for text in terms]
matcher.add("TerminologyList", None, *patterns)

doc = nlp(u"German Chancellor Angela Merkel and US President Barack Obama "
          u"converse in the Oval Office inside the White House in Washington, D.C.")
matches = matcher(doc)
for match_id, start, end in matches:
    span = doc[start:end]
    print(span.text)
we can verify that in this case the lemmas and the text should be the same for the matching terms and I would expect to get the same results with ORTH or with LEMMA in this specific example:
for tok in doc:
    print(tok.lemma_, tok.text)
If instead of the en_core_web_sm model we use an empty English model:
from spacy.lang.en import English
nlp = English()
We get that the terms match everything, which is also incorrect.
Your Environment
spaCy version: 2.1.8
Platform: Linux-4.15.0-52-generic-x86_64-with-debian-buster-sid
Python version: 3.7.3