Fourthought commented on 14 Dec 2019 •
edited
I've been using the code examples from the documentation, particularly the 'Custom pipeline components and attribute extensions via a REST API' example. After creating the custom attribute extension there is a section of the code for creating the new spans as follows:
for span in spans:
    # Iterate over all spans and merge them into one token. This is done
    # after setting the entities – otherwise, it would cause mismatched
    # indices!
    span.merge()
I see, however, that merge() has been deprecated, so have developed the following (rather inelegant) solution for the same task:
for span in spacy.util.filter_spans(spans):     ## span is a list of spans with custom attribute
    with doc.retokenize() as retokenizer:
        retokenizer.merge(span)                 ## merge the spans

        doc._.named_concepts = spacy.util.filter_spans(list(doc._.named_concepts) + [span])     ## filter the list of `docs.ents` and new spans to resolve any overlapping entities
spans is a list object containing the spans derived from the matcher
This code is throwing up the following error message:
IndexError: [E036] Error calculating span: Can't find a token starting at character offset 1992.
Have also tried this code:
doc._.named_concepts = spacy.util.filter_spans(list(doc._.named_concepts) + spans) # concept span
        
        for span in spacy.util.filter_spans(spans):
            with doc.retokenize() as retokenizer:
                retokenizer.merge(span)
...but have got the same result.
Is there a more elegant solution to allow the creation of custom extensions please?
I would use the Entity Ruler, but am looking to modify the spans as they are created.
Which page or section is this issue related to?
(https://spacy.io/usage/examples)