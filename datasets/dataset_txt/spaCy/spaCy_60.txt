carschno commented on 16 Dec 2019 â€¢
edited
How to reproduce the behaviour
def _matcher(spacy_model: Language) -> PhraseMatcher:
    known_entities: Dict[str, Set[str]] = {
        "PERSON": {"Mr. G.B.H. Smith:, "G.B.H. Smith", "Smith", ...},
        "ORG":  {...},
        "LOC":  {...},
    }
    matcher: PhraseMatcher = PhraseMatcher(spacy_model.vocab, attr="TEXT")
    for ne_type, entities in known_entities.items():
        patterns = spacy_model.tokenizer.pipe(entities)
        matcher.add(ne_type, patterns)
    return matcher

matcher = _matcher(spacy_model)

docs = [spacy_model("This is Mr. G.B.H. Smith"), ...]
for doc in docs:
            entities = [
                Span(sent, match_start, match_end, match_id)
                for match_id, match_start, match_end in matcher(sent)
            ]
At this point, I've set a pdb breakpoint because the results were unexpected in some cases (no matches):
ipdb> doc
Document name
This is Mr. G.B.H. Smith
ipdb> matcher(spacy_model(doc.text))
[(380, 5, 8), (380, 6, 8), (380, 7, 8)]
ipdb> matcher(doc)
[]
matcher(doc) (the last call) is expected to have the same output as the one before.
This is reproducible for this particular example, but hard to find out which patterns are affected exactly.
Note that I had to anonymize the example name.
Your Environment
spaCy version: 2.2.3
Platform: Linux-4.15.0-72-generic-x86_64-with
Python version: 3.6.9
Operating System: Ubuntu Linux 18.04.3
Operating System: Alpine 3.10.3 (running in Docker)