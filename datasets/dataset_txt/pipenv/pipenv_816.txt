srilman commented on 22 Jul 2018
NOTE: I am including the request here and not sending it to the wiki because it current says that the wiki is not up.
Is your feature request related to a problem? Please describe.
First of all, I really like how Pipenv simulates much of the functionality of npm / yarn and package.json files that are used in Node.js development. It is really clean, simple, and consistent. One thing that I find frustrating with my current Pipenv setup for developing libraries is having to manage a separate setup.py file for publishing to PyPi.
Describe the solution you'd like
As I mentioned above, I think that (like in the Node.js toolchain), metadata about the project should be stored in the Pipfile and initialized by pipenv. Using a command like pipenv init, users can input optional values for fields like name, version, license, description, and so on. They can also use pipenv init -y to fill in default values or something similar.
In addition, with this information, it would be possible to generate a setup.py file using a command like pipenv generate setup.py or something similar. This command would take the metadata and package dependencies and output a setup.py. This command can be integrated in a CI toolchain if desired.
Describe alternatives you've considered
Of course, the current alternative is to manage a setup.py which contains the metadata about the project. This is the current base method, which in some ways makes more sense, but is also harder to manage.
Benefits:
First of all, a lot of the metadata that I am proposing is only necessary when developing libraries and not applications. So if someone uses pipenv in their application, they may not find this feature useful. Of course, they can choose not to include that information in the Pipfile or skip the fields in pipenv init. Also, application developers have no need for a setup.py, so the feature is not necessary for them.
Drawbacks:
For package developers, this setup adds a lot of extra complexity. They have to manually create a setup.py file with the metadata and a list of package dependencies. So as they add packages in pipenv, they would have to manually add them in the setup.py.
Additional context
In order to include the metadata within the Pipfile, it must be placed in a current section or a new section called info or something. Therefore, the Pipfile specification would also have to changed, or pipenv would not follow the standard. This would definitely be a problem, but I am not sure how important it is to follow the Pipfile standard as it is currently under active design. It also seems like pipenv currently doesn't exactly follow the standard; I don't think Pipfiles should include the 'scripts' section even though pipenv currently supports it.
I would love to help develop this feature and make a PR, but I would like other's opinions before continuing.
$ pipenv --support