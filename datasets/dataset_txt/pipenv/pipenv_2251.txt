drakedevel commented on 1 Sep 2017
I spent some time today trying to convert a project from requirements.txt to Pipfile with pipenv, but was confused to discover the wrong versions of some packages getting installed. Upon further investigation, I discovered that pipenv install --lock pkg1==version followed by pipenv install --lock pkg2==version, when pkg2 depends on pkg1 (with no version constraint) can result in a higher version of pkg1 being added to Pipfile.lock (but not actually installed), which then only takes effect on the next pipenv install.
Here is a terminal transcript showing the behavior with sqlalchemy==0.9.7 and graphene-sqlalchemy==1.1.1: https://gist.github.com/drakedevel/80457eca7bd2ff5fefbcb5192b67d88e
You can see that after the first install, sqlalchemy version 0.9.7 appears in Pipfile and Pipfile.lock as I'd expect. But, after graphene-sqlalchemy is installed, the Pipfile.lock contains sqlalchemy version 1.1.13, in direct conflict with the Pipfile's version constraint, and not reflecting the actual packages installed (per pipenv run pip freeze). You can see that the graphene-sqlalchemy install is satisfied with 0.9.7 and does not require an upgrade to proceed.
This seems pretty broken to me on a few levels -- what's the point of specifying version constraints in the Pipfile if they get silently overridden? And what's the point of Pipfile.lock if it doesn't reflect the actual packages pipenv installed?