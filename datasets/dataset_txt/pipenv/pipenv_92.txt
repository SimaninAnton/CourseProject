reebr commented on 28 Jul 2019 â€¢
edited
Issue description
I was using a previous version of Pipenv, and used the following command to run my application:
set FLASK_APP=app
set FLASK_ENV=development
flask run
 * Serving Flask app "app" (lazy loading)
 * Environment: development
 * Debug mode: on
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 242-429-215
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
And then the application was run as expected.
I'm not sure if it's a pipenv problem, so I'd like some help solving this. After upgrading to the 2018.11.26 version, I started to have some problems executing the same code. Running the same sequence of commands above results in:
set FLASK_APP=app
set FLASK_ENV=development
flask run
 * Serving Flask app "app" (lazy loading)
 * Environment: development
 * Debug mode: on
 * Restarting with stat
c:\users\renan\.virtualenvs\pipenv_issue-9cyicfyp\scripts\python.exe: Error while finding module specification for 'C:\\Users\\renan\\.virtualenvs\\pipenv_issue-9cYIcFYP\\Scripts\\flask' (ModuleNotFoundError: No module named 'C:\\Users\\renan\\')
However, if I run specifying py-m ..., it works:
py -m flask run
 * Serving Flask app "app" (lazy loading)
 * Environment: development
 * Debug mode: on
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 242-429-215
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
Expected result
I expected to run my application without specifying python on the command line. But if this is the new expected behavior of pipenv, all right, I just wish I knew there were changes.
I am using the console in administrator mode (cmd, not PowerShell).
Steps to replicate
git clone git@github.com:reebr/pip_env.git

cd ./pip_env
pipenv install
pipenv shell

set FLASK_ENV=development
set FLASK_APP=app
flask run
Environment
Windows 10 Pro x64 (1809)
Python 3.7.4
pipenv 2018.11.26
Pipenv support
$ pipenv --support