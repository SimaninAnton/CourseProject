estyrke commented on 10 Jan 2019
Issue description
I have a custom Python wheel which I'm trying to install with Pipenv. The project also depends on tensorflow-gpu. This is the command sequence I'm using (starting in an empty directory):
pipenv install tensorflow-gpu==1.12.0
pipenv install /path/to/my/package.whl
pipenv run pip freeze
Expected result
I expect the actual dependencies of tensorflow-gpu and my package to be listed, in addition to the packages I'm explicitly installing.
When I install only tensorflow-gpu using pipenv and then do pipenv run pip install /path/to/my/package, only my package gets installed, no additional package and especially not tensorflow. This is what I expect.
Actual result
The second step installs tensorflow==1.12.0, which is not a dependency of either tensorflow-gpu nor my own package - in fact it conflicts with tensorflow-gpu, which is the heart of my problem.
I do not understand why that happens - it is true that my package requires tensorflow to run, and in fact it contains only a init.py file and a native .so file with tensorflow operations. This is init.py in its entirety:
import tensorflow as tf
import sys
import os

sys.modules[__name__] = tf.load_op_library(os.path.join(os.path.dirname(__file__), "my_native_lib.so"))
The package does not have any explicit dependencies, the only link to tensorflow is the code in init.py above.
Steps to replicate
Unfortunately, I can't share my custom package, and I've been unable to make a minimal reproducing example. What steps can I take to get more info on what's happening? If I run pipenv install with the -v flag I get some messages about installing tensorflow, but no clue as to why it triggers. Does pipenv parse the code for import statements?
Please run $ pipenv --support, and paste the results here. Don't put backticks (`) around it! The output already contains Markdown formatting.
$ pipenv --support