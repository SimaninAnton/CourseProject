ed-alertedh commented on 24 Jan 2018 â€¢
edited
First of all, apologies if what I'm requesting is already possible! I did my best to search for anything relevant.
Context
We make use of Tensorflow in our codebase, which has the annoying quirk that there is a GPU-enabled wheel called "tensorflow-gpu" and a CPU-only wheel called "tensorflow". The GPU-enabled package will crash on a system without the CUDA libs installed. The wheels also share most of their package structure and seem to clobber each other if you accidentally install both. Some of that behaviour is probably a bit un-Pythonic, but that's what has been shipped.
Now, ideally Google would build a single wheel that gracefully falls back to CPU-only if CUDA insn't installed, but that probably isn't happening any time soon. Their official solution seems to be not to specify TF as a dependency for anything, and require the user to manually install the correct build [1]. This is less-than-ideal for configuration management.
Feature Request
I'd very much like it if I could set up one Pipfile that defaults to installing the CPU package unless I set some custom flag indicating GPU is available.
Discussion
The closest existing functionality I'm aware of is the support for environment markers - if there was an extension to allow user-defined markers then this could be a fairly clean solution. I'm unsure how pipenv handles the lockfiles when there are multiple possible configurations, but this would continue working the same way.
As a rough example of what I'm suggesting:
Pipfile:
[packages]

tensorflow-gpu = { version = "*", gpu_enabled = "=='1'" }
tensorflow = { version = "*", gpu_enabled = "==''"  }
Installing CPU version: pipenv install
Installing GPU version: pipenv --env_marker "gpu_enabled=1" install
[1] https://github.com/deepmind/sonnet "Sonnet will work with both the CPU and GPU version of tensorflow, but to allow for that it does not list Tensorflow as a requirement, so you need to install Tensorflow separately if you haven't already done so."
EDIT: Another downside to Google's approach that just occurred to me: manually installing tensorflow will really not work well with pipenv - every time the env gets purged, tensorflow will need to be manually installed again.
7