miracle2k commented on 26 Feb 2018 •
edited
I've been using pipenv for a while, and it's been great, but from time to time I run into behaviour that I find unexpected. This unexpected behaviour feel related to me, and they seem to be related to pipenv somehow giving consideration to the dependencies that I have installed, when I want it to ignore whatever I have installed and replace it with what is in my Pipfile.
I should say that what I am expecting pipenv to be is basically yarn for Python, so this may be my mistake.
Describe your environment
OSX
Python 3.5.3 (7a22aa3bd5bf, Dec 25 2017, 17:11:18)
[PyPy 5.10.0 with GCC 4.2.1 Compatible Apple LLVM 8.1.0 (clang-802.0.42)]
pipenv, version 10.1.0
Issue
$ pipenv install
Pipfile.lock not found, creating…
Locking [dev-packages] dependencies…
Locking [packages] dependencies…
Warning: Your dependencies could not be resolved. You likely have a mismatch in your sub-dependencies.
  You can use $ pipenv install --skip-lock to bypass this mechanism, then run $ pipenv graph to inspect the situation.
Could not find a version that matches aiohttp<3,==3.0.1,>=2.0,>=2.3.0
So that makes sense, because the version of aiohttp cannot both be 3.0.1 and also <3. Where do these dependencies come from?
$ pipenv graph
raven-aiohttp==0.6.0
  - aiohttp [required: >=2.0, installed: 3.0.1]
aioinflux==0.1.1
  - aiohttp [required: >=2.3.0, installed: 3.0.1]
Additionally, I have aiohttp = "<3" in my Pipfile.
So the only reference to the specific version of ==3.0.1 seems to be what is currently installed. However, I just noticed that raven-aiohttp has a bug with aiohttp>=3 (getsentry/raven-aiohttp#27), so I changed my Pipfile to exclude these versions, and now I expect pipenv to install the proper dependencies for me. Am I wrong or is pipenv wrong?
I noticed the same recently when I work with editables from git, and I want to update to a new commit hash. If I update the hash in the Pipfile (or switch the dependency in the Pipfile from a package name to a editable), then Pipenv will never generate the correct lock file for me, no matter what command I try; it always uses the package and version that is already installed.