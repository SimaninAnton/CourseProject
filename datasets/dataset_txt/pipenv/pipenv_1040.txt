samupl commented on 21 May 2018
In a project I'm working on, we've been using pip with setup.py for a while. Now we're considering moving to pipenv.
We have a couple of internal packages in a private git repository, and we distribute our software in a Docker Container. For security reasons, we did not want to pass credentials to this repository into the container - even during builds.
Previously we managed it like this:
We had a dependency_links section in our setup.py file, where each private package got its repository URL listed
We had a script that was run as a part of the built, that run pip download -d download --no-deps, which simply downloaded all those packages from our github repository into the download/ directory
In the Dockerfile, we installed packages like this: pip install -e . --find-links download/
What this did, essentially, was that it first looked if our private packages were already downloaded into the download/ directory. If they were there (which should be the case, as our download script was run as part of the build process), pip did not try to download them again.
However, if the files were not present in the download/ directory, they were cloned and then installed - which was easier for local development to follow.
I'm looking for a similar solution for pipenv - a way to make pipenv first "look" into some cache directory and if packages are already downloaded there - don't reinstall them. Is it possible with pipenv?