fredrikaverpil commented on 22 Aug 2018 •
edited
Issue description
Running pipenv update --outdated does not return anything while pipenv run pip list --outdated shows outdated dependencies. This is on Windows and when in an already activated venv.
Possibly related, when running pipenv update <pkg>, nothing happens. But if running pipenv run pip install -U <pkg>, this results in the package being updated properly. This is also on Windows and in an already activated venv.
Expected result
I was expecting to get the outdated packages when running pipenv update --outdated.
Actual result
(venv) C:\Users\iruser\code\repos\skalman3 [next ≡ +0 ~1 -0 !]> pipenv run pip list --outdated
Courtesy Notice: Pipenv found itself running within a virtual environment, so it will automatically use that environment, instead of creating its own for any project. You can set PIPENV_IGNORE_VIRTUALENVS=1 to force pipenv to ignore that environment and create its own instead.
Warning: There was an unexpected error while activating your virtualenv. Continuing anyway...
Package     Version   Latest   Type
----------- --------- -------- -----
altgraph    0.15      0.16.1   wheel
macholib    1.9       1.10     wheel
pefile      2017.11.5 2018.8.8 sdist
pycodestyle 2.3.1     2.4.0    wheel
pyflakes    1.6.0     2.0.0    wheel
setuptools  39.0.1    40.2.0   wheel
stalker     0.2.18    0.2.22   wheel

(venv) C:\Users\iruser\code\repos\skalman3 [next ≡ +0 ~1 -0 !]> pipenv update --outdated --verbose
Courtesy Notice: Pipenv found itself running within a virtual environment, so it will automatically use that environment, instead of creating its own for any project. You can set PIPENV_IGNORE_VIRTUALENVS=1 to force pipenv to ignore that environment and create its own instead.
Steps to replicate
# Powershell example using Python 3.6 64-bit from python.org
& 'C:\Users\iruser\AppData\Local\Programs\Python\Python36\python.exe' -m venv --copies venv 
venv\scripts\activate.ps1
python -m pip install --upgrade pip
pip install pipenv
pipenv install  # installs e.g. setuptools 39.0.1 which is not the latest
pipenv update --outdated  # does not show any outdated packages
pipenv update setuptools  # does not update setuptools from 39.0.1 to 40.2.0
Running pipenv --support | clip when in the already activated venv does not output anything:
(venv) C:\Users\iruser\code\repos\skalman3 [next ≡ +0 ~1 -0 !]> pipenv --support | clip
Courtesy Notice: Pipenv found itself running within a virtual environment, so it will automatically use that environment, instead of creating its own for any project. You can set PIPENV_IGNORE_VIRTUALENVS=1 to force pipenv to ignore that environment and create its own instead.
However, if I remove | clip, I get this:
$ pipenv --support
1