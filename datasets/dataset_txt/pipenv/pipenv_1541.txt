Member
ncoghlan commented on 22 Feb 2018
(Breaking this out as the first step towards #1255)
pipenv install is currently overloaded to handle a number of different tasks, including both editing Pipfile to add new dependencies, and updating the current environment to match the contents of Pipfile and/or Pipfile.lock. This overloading currently leads to some quirky behaviours, like those described in #1137 (where [packages] and [dev-packages] are resolved independently of each other).
To start resolving this, pipenv sync would be a new subcommand that works solely based on Pipfile.lock: if that's missing, the command will fail, with a direction to run pipenv lock first.
The basic behaviour would be similar to the current pipenv install --deploy --ignore-pipfile, but with [dev-packages] handling adjusted as follows:
when --dev is given, both [packages] and [dev-packages] will be installed, anything else will be uninstalled
when --no-dev given, only [packages] will be installed, anything else will be uninstalled
when neither is given, the default will be --keep-dev, which installs [packages], ensures versions match for any already installed [dev-packages], and uninstalls everything else
Other changes relative to pipenv install:
no --pre argument (only uses exact versions from Pipfile.lock)
no --skip-lock (only uses exact versions from Pipfile.lock)
no --ignore-pipfile (only uses exact versions from Pipfile.lock)
no -r or -c import options (only uses exact versions from Pipfile.lock)
always aborts if Pipfile.lock is missing or out of date
--deploy only adds the check of the Python version constraint
no --system option (at least for now)
Options shared with pipenv install:
--three/--two/--python: affect implicit venv creation as usual
--verbose/-h/--help: work the same way as for any other subcommand