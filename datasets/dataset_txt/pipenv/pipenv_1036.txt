lbenezriravin commented on 22 May 2018 â€¢
edited
When trying to install a private dependency with a private subdependency that has a private subdependency of its own, pipenv doesn't follow the specified dependency_links for the "subsubdependency" when generating Pipfile.lock.
$ python -m pipenv.help output
Expected result
The Pipfile.lock should be correctly generated.
Actual result
Warning: Your dependencies could not be resolved. You likely have a mismatch in your sub-dependencies.
Could not find a version that matches privatesubsubdependency
There are incompatible versions in the resolved dependencies.
Steps to replicate
Create three repos, the first of which (privatedependency) points to the second (privatesubdependency) in its dependency_links, and the second of which points to the third (privatesubsubdependency).
pipenv install -e 'git+ssh://git@github.com/private/dependency.git@master#egg=dependency'
Everything will be installed correctly, but pipenv will complain when attempting to generate the Pipfile.lock. If I separately add privatesubdependency to the Pipfile, things start working OK, but it defeats the point of pipenv when I start having to manually manage my subdependencies.
I know that process-dependency-links is deprecated but the "official best " solution (maintain a private PyPI-compatible server) simply isn't feasible for my team right now. We're closely following threads like pypa/pip#3610 and pypa/pip#4187, but until a better alternative is proposed, we rely on this feature pretty heavily.
Thanks!
4