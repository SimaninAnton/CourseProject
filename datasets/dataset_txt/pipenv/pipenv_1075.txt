Contributor
sobolevn commented on 11 May 2018
$ python -m pipenv.help output
Expected result
I expect that pipenv check will work inside docker the same as locally.
Actual result
Locally:
» pipenv check
Checking PEP 508 requirements…
Passed!
Checking installed package safety…
All good!
Inside docker:
System check identified no issues (0 silenced).
No changes detected
Checking PEP 508 requirements…
Traceback (most recent call last):
  File "/usr/local/bin/pipenv", line 11, in <module>
    sys.exit(cli())
  File "/usr/local/lib/python3.6/site-packages/pipenv/vendor/click/core.py", line 722, in __call__
    return self.main(*args, **kwargs)
  File "/usr/local/lib/python3.6/site-packages/pipenv/vendor/click/core.py", line 697, in main
    rv = self.invoke(ctx)
  File "/usr/local/lib/python3.6/site-packages/pipenv/vendor/click/core.py", line 1066, in invoke
    return _process_result(sub_ctx.command.invoke(sub_ctx))
  File "/usr/local/lib/python3.6/site-packages/pipenv/vendor/click/core.py", line 895, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File "/usr/local/lib/python3.6/site-packages/pipenv/vendor/click/core.py", line 535, in invoke
    return callback(*args, **kwargs)
  File "/usr/local/lib/python3.6/site-packages/pipenv/cli.py", line 678, in check
    three=three, python=python, system=system, unused=unused, args=args
  File "/usr/local/lib/python3.6/site-packages/pipenv/core.py", line 2337, in do_check
    results = simplejson.loads(c.out)
  File "/usr/local/lib/python3.6/site-packages/pipenv/vendor/delegator.py", line 97, in out
    self.__out = self.std_out.read()
ValueError: I/O operation on closed file.
Steps to replicate
Dockerfile:
FROM python:3.6.5-alpine3.7

LABEL maintainer="sobolevn@wemake.services"
LABEL vendor="wemake.services"

ARG DJANGO_ENV=production
ENV PYTHONFAULTHANDLER=1 \
  PYTHONUNBUFFERED=1 \
  PYTHONHASHSEED=random \
  PIP_NO_CACHE_DIR=off \
  PIP_DISABLE_PIP_VERSION_CHECK=on \
  PIP_DEFAULT_TIMEOUT=100 \
  PIPENV_COLORBLIND=true \
  PIPENV_NOSPIN=true


# System deps:

RUN apk update \
    && apk --no-cache add \
      bash \
      build-base \
      curl \
      gcc \
      gettext \
      git \
      libffi-dev \
      linux-headers \
      musl-dev \
      postgresql-dev \
      tini


# Creating folders, and files for a project:

WORKDIR /code
COPY . /code

# This is a special case. We need to run this script as entry point:
COPY ./docker/django/entrypoint.sh /docker-entrypoint.sh


# Project initialization:

RUN chmod +x "/docker-entrypoint.sh" \
  && pip install pipenv \
  && pipenv install $(test "$DJANGO_ENV" == production || echo "--dev") --deploy --system --ignore-pipfile

ENTRYPOINT ["/sbin/tini", "--", "/docker-entrypoint.sh"]
And run pipenv check.
Or download this template: https://github.com/wemake-services/wemake-django-template
And run: docker-compose run --rm web sh ./docker/ci.sh