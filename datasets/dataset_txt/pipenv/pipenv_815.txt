matthewdeanmartin commented on 22 Jul 2018 â€¢
edited
I have a library** with small number of dependencies and a large number of common development dependencies (see here), like black and pylint. One solution would be to not use black or pylint since they their versioning and conflicting deps are a hot mess, but I don't like that idea.
Because I can't tell pipenv to ignore dev dependencies, pipenv upgrade fails, pipenv lock fails, pipenv lock -r fails. I generally can only run pipenv * --no-lock
So I created a copy of Pipfile, Pipfile_nodev, manually removed all [dev-packages] and then ran this script below and, now I have a freeze file!
This feels like too much work for a common scenario. Am I doing this wrong or is there a missing feature?
#!/usr/bin/env bash
rm -rf /tmp/freezer
mkdir /tmp/freezer
mkdir /tmp/freezer/jiggle_version
cp -r ./jiggle_version/ /tmp/freezer/jiggle_version/
cp ./Pipfile_nodev /tmp/freezer/Pipfile
cd /tmp/freezer
pipenv lock
pipenv lock -r
rm -rf /tmp/freezer
I also asked this related Q on StackOverflow and got no response:
https://stackoverflow.com/questions/51273884/how-do-i-upgrade-a-pipenv-package-and-ignore-prerelease-packages
** Yes, I know libs aren't supposed to freeze requirements, only apps, but I don't have a handy public app to illustrate this.