SethMMorton commented on 2 May 2018
Expected result
When using pipenv install with the PIPENV_PYTHON environment variable set to the full path of an existing python installation, I would expect the resulting virtualenv path to be named similarly to if the --python command-line option were used.
Actual result
The virtual environment name contains the full path to that existing python installation, and thus has a rather deep hierarchy. I do not believe this actually has any negative effects for me beyond unnecessary directories, but I'm not sure if it is the intended behavior - my guess is that PIPENV_PYTHON is appended to the virtualenv name for the cases where a user set the value to a python version (e.g. 3.6) and not for a full path.
Steps to replicate
Using the --python option with a full python path gives the virtualenv name that I would expect (demo-Qnml4myH).
 % cd demo                                                                                                                                                                                       
 % pipenv install --python /home/me/Miniconda/3.6.3/bin/python
Creating a virtualenv for this project‚Ä¶
Using /home/me/Miniconda/3.6.3/bin/python (3.6.3) to create virtualenv‚Ä¶
‚†ãRunning virtualenv with interpreter /home/me/Miniconda/3.6.3/bin/python
Using base prefix '/home/me/Miniconda/3.6.3'
New python executable in /home/me/.local/share/virtualenvs/demo-Qnml4myH/bin/python
Installing setuptools, pip, wheel...done.

Virtualenv location: /home/me/.local/share/virtualenvs/demo-Qnml4myH
Creating a Pipfile for this project‚Ä¶
Pipfile.lock not found, creating‚Ä¶
Locking [dev-packages] dependencies‚Ä¶
Locking [packages] dependencies‚Ä¶
Updated Pipfile.lock (ca72e7)!
Installing dependencies from Pipfile.lock (ca72e7)‚Ä¶
  üêç   ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ 0/0 ‚Äî 00:00:00
To activate this project's virtualenv, run the following:
 $ pipenv shell                                                                                                                                                                                          
Using PIPENV_PYTHON instead of --python gives a virtualenv name that itself is a hierarchical path (demo2-Ap4OScU9-/home/me/Miniconda/3.6.3/bin/python/bin/python)
 % cd ../demo2                                                                                                                                                                                  
 % export PIPENV_PYTHON=/home/me/Miniconda/3.6.3/bin/python
 % pipenv install                                                    
Creating a virtualenv for this project‚Ä¶
Using /home/me/Miniconda/3.6.3/bin/python (3.6.3) to create virtualenv‚Ä¶
‚†ãRunning virtualenv with interpreter /home/me/Miniconda/3.6.3/bin/python
Using base prefix '/home/me/Miniconda/3.6.3'
New python executable in /home/me/.local/share/virtualenvs/demo2-Ap4OScU9-/home/me/Miniconda/3.6.3/bin/python/bin/python
Installing setuptools, pip, wheel...done.

Virtualenv location: /home/me/.local/share/virtualenvs/demo2-Ap4OScU9-/home/me/Miniconda/3.6.3/bin/python
Creating a Pipfile for this project‚Ä¶
Pipfile.lock not found, creating‚Ä¶
Locking [dev-packages] dependencies‚Ä¶
Locking [packages] dependencies‚Ä¶
Updated Pipfile.lock (ca72e7)!
Installing dependencies from Pipfile.lock (ca72e7)‚Ä¶
  üêç   ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ 0/0 ‚Äî 00:00:00
To activate this project's virtualenv, run the following:
 $ pipenv shell