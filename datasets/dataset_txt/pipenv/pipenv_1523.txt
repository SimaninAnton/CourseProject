jacobian commented on 24 Feb 2018 â€¢
edited
As far as I can tell, the documentation doesn't seem to lay out a proscribed workflow for upgrading dependencies. I think this is a fairly common use-case, something like this:
As a user of pipenv, I've got a project with a Pipfile and a Pipfile.lock. It's been some time, and I'd like to know what's changed upstream, and to upgrade my dependencies (and test them as they go).
I'm happy to contribute this documentation myself, and I think I've figured out a good workflow. But I'm opening this issue to make sure I'm on the write track before I write something.
Here's what I think the upgrade workflow should look like:
Find out what's changed upstream: pipenv run pip list --outdated
Upgrade packages, two options:
a. Want to upgrade everything? Just do pipenv install.
b. Want to upgrade packages one-at-a-time? pipenv install --selective-upgrade <pkg> for each outdated package.
Run your tests, fix issues. If there are problems, pin versions in Pipfile.
Commit your upgraded Pipfile.lock (and perhaps Pipfile).
Does this sound right?
Something I don't understand about --selective-upgrade -- why does it modify Pipfile to add keep_outdated?
5