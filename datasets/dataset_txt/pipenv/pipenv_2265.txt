nkantar commented on 24 Jul 2017
This may be out of scope for Pipenv, but here it goes anyway: It may be worthwhile to support dealing with environment variables in some way.
(All the issues I found mentioning environment variables didn't seem to talk about this specific scenario.)
The Problem
A simple example is the recommended way of running Flask (from Flask docs):
$ FLASK_APP=hello.py flask run
With Pipenv this would have to be:
$ pipenv run FLASK_APP=hello.py flask run
This is all simple enough. But what if you're running an application with a few sets of API keys, or something like that? Consider:
$ pipenv run FLASK_APP=hello.py GITHUB_CLIENT_ID=qiu5gnl1glu54ignwi5gn GITHUB_CLIENT_SECRET=ergiebqkgrybreugyb34t34kuwy flask run
And it only gets worse.
The Solutions
I have two (mutually inexclusive) approaches in mind:
1. Heroku-like Interface
An interface inspired by heroku config seems like it could work (from Heroku docs:
pipenv set GITHUB_USERNAME=joesmith
Adding config vars
GITHUB_USERNAME: joesmith

$ pipenv env
GITHUB_USERNAME: joesmith
OTHER_VAR:       production

$ pipenv get GITHUB_USERNAME
joesmith

$ pipenv unset GITHUB_USERNAME
Unsetting GITHUB_USERNAME
2. .env-like File
Maybe Pipenv could automatically read a file, akin to Docker's .env:
FLASK_APP=hello.py

GITHUB_USERNAME=joesmith
OTHER_VAR=production
And Thenâ€¦
I'd be happy to take a stab at one or both of these if the maintainers would be interested in merging them. Or something else, for that matter.
Alternately, if there's already a good way to solve this problem, I'm all up for some good ol' TIL.