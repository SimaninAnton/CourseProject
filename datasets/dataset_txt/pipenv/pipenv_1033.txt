MatthewMiele commented on 22 May 2018 â€¢
edited
Firstly thank you Kenneth for Pipenv and being able to meet you and the rest of the Pipenv team at PyCon this year. Trying to now use Pipenv in our daily workflow at work and have come into a few snags.
Is your feature request related to a problem? Please describe.
At work all our systems are dockerised and both local development and deployments / production use the same docker image. We docker run --rm <image> bash locally and do our development from there. Our Dockerfile contains these build steps
RUN pip install pipenv
COPY Pipfile Pipfile.lock /tmp/
RUN cd /tmp && pipenv install --deploy --system --dev
...
The issue comes when we start developing inside the image and want to install new packages. As its a container we dont need any virtualenvs. There seems to be no way to install a single package straight to system. This has caused a bit of confusion as all the base packages are importable (since they where installed from a Pipfile with --system, but a new package installed while developing with pipenv install x is not importable (from system python) as it goes into a virtualenv.
This leads us to having to install these packages twice. pipenv install x (to get it into the Pipfile) and then pipenv install --system to then reinstall the Pipfile with the new package for system python to be able to see it.
Describe the solution you'd like
It would be nice to have 1) --system when installing of specific packages and then 2) a way of setting --system globally so we can set it as an ENV in our dockerfile as Pipenv in docker would only ever be used with system Python. I feel this would be the use case for most people doing development inside docker containers.
I have looked into the code and noticed there are some undocumented envs that would turn on --system by default (but its not 100% clear and not a pipenv specific variable, seems like I need to
export VIRTUAL_ENV=
for python to be able to cast it to False correctly https://github.com/pypa/pipenv/blob/master/pipenv/environments.py#L52). But as a found out it does not apply for installing specific packages. Just from the pipfile.