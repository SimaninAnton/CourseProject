kaosmonk commented on 11 Sep 2018 â€¢
edited
Issue description
I have a project directory and inside of it I have two separate directories - one in which I keep environment configurations named envs and the other one named repos in which I keep repositories associated with the project. Inside of envs directory I keep multiple directories for different environments run in the same project and inside each and every environment I keep .env file and Pipfile. The structure looks like this:
project
|- envs
|   |- env1
|       |- .env
|       |- Pipfile
|   |- env2
|       |- ...
|- repos
|   |- repo1
|       |- .env
|       |- Dockerfile
|   |- repo2
|       |- ...
My common way of performing work is to go inside a directory of a certain environment I want to work on and run pipenv shell that exports important environment vars associated with the environment that are all specified in .env file.
Then I switch into one of the repos and start committing and pushing changes and checking them out once they're deployed (which is why I need certain vars predefined and set in my shell). If a repo has an .env file as well (most commonly used by Dockerfile and/or docker-compose), those vars are being exported into my pipenv invoked shell.
Expected result
I would expect to see only environment variables from the /project/envs/env1/.env being exported when I run env cmd for example. In other words when running pipenv shell I'd expect only vars found in the cwd's .env file to be exported in the forked shell and no other.
Actual result
Besides seeing environment variables from /project/envs/env1/.env being exported in my pipenv invoked shell, when I switch to /project/repos/repo1/ I can see vars specified in /project/repos/repo1/.env being exported as well
Pipenv version: '2018.7.1'