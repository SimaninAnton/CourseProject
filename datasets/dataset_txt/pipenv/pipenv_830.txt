Contributor
fridex commented on 16 Jul 2018
Issue description
As described in the docs it is expected that libraries do not pin dependencies to specific versions. However this restriction is many times ignored or simply not seen in projects. I, as a user, should be able to pin down a dependency in my library to a version if that is the only version the given package works with.
As a subsequent behavior, if my application uses the same dependency as one of the libs I use, performing pipenv install or pipenv update simply fails if I do not pin down dependency to the same version as my library uses. This requires pinning dependencies in the Pipfile without any particular reason on my side (also consider updates of libs that can cause pinned versions to be rotten).
Expected result
Dependency resolver is smart enough to resolve dependencies even though libraries I'm using have pinned down versions.
Actual result
If I use the same library as one of my dependencies, pipenv install or pipenv update fails:
Standard error
Relevant parts of the dependency graph:
Dependency graph
See this automated report for real world example - thoth-station/package-releases-job#47
Steps to replicate
pipenv install aiogremlin==3.2.6rc1 pyyaml --pre
$ pipenv --support
2