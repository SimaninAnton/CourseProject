melinath commented on 30 Apr 2018 â€¢
edited
My pipfile and pipfile.lock both specify an explicit version of Django - 1.8.11. Locally, using python3 on a Mac, this install works fine. On Travis, using python2 on linux, Django 1.11.12 is installed instead.
Travis: $ python -m pipenv.help output












Local: $ python -m pipenv.help output
Expected result
The version of django specified & locked is installed.
Actual result
A different version is installed. I can't provide verbose logs because they're over 4MB large and travis won't even save the whole thing.
Steps to replicate
I'm not sure how to replicate this, since it works fine locally. Here's the repository I'm working on at a commit where this is breaking on travis. Here's the related travis build that's failing.
The commands that travis is running (some purely for debug information) are:
install:
- pip install pipenv
- pipenv --version
- pipenv install
- pipenv graph
- psql --version
- pipenv run pip install flake8==3.3.0
before_script:
- psql -c 'drop database if exists brambling_test;' -U postgres
- psql -c 'create database brambling_test;' -U postgres
- pipenv run flake8 brambling
script:
- python -c "from pipenv.environments import user_cache_dir; print user_cache_dir('pipenv')"
- pipenv run python -c "import django; print django.VERSION"
- "pipenv run ./manage.py test --verbosity=2 brambling"
Please note that pipenv graph, which runs immediately after pipenv install already shows the incorrect version of django installed.