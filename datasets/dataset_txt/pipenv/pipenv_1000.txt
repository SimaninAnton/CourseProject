hwine commented on 2 Jun 2018
Be sure to check the existing issues (both open and closed!).
Describe the issue briefly here.
pipenv can't find the virtualenv it built unless the version of python the virtual env was created from is in the current path.
Please run $ python -m pipenv.help, and paste the results here.
$ python -m pipenv.help output
Expected result
pipenv shell should work regardless of which python is in the path.
Actual result
E.g: after a pipenv environment has been created, and a fresh shell (login) initiated, the virtualenv can not be found:
$ pipenv shell
Warning: Python 3.6 was not found on your systemâ€¦
You can specify specific versions of Python with:
  $ pipenv --python path/to/python
1 [hwine@hwine-surface MY_PROJECT]
$ pipenv --venv
No virtualenv has been created for this project yet!
1 [hwine@hwine-surface MY_PROJECT]
In fact, the virtualenv is exactly where it should be:
$ ~/.ve/MY_PROJECT-j72jD_YQ/bin/python --version
Python 3.6.4
But it can't be found until the parent python is available in the path (I use pyenv, but only activate it when I need a non-system python in my path)
$ use Pyenv
source /home/hwine/bin/usePyenv
0 [hwine@hwine-surface MY_PROJECT]
$ pipenv --venv
/home/hwine/.ve/MY_PROJECT-j72jD_YQ
0 [hwine@hwine-surface MY_PROJECT]
$ pipenv shell
Spawning environment shell (/bin/bash). Use 'exit' to leave.
. /home/hwine/.ve/MY_PROJECT-j72jD_YQ/bin/activate
My expectation when I use a virtualenv is that only the virtualenv need be in my path, which is usually accomplished by sourcing the activate script (as pipenv shell does above). Requiring the parent python to be in the path just to activate the virtualenv is a new hurdle I'd prefer not to climb.
Steps to replicate
create a pipenv environment using a non-system python (called the "parent python" below)
start a new shell (login)
ensure the path does not contain the parent python
attempt to run pipenv shell