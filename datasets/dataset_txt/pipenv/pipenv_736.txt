dutchgecko commented on 16 Aug 2018 â€¢
edited
Issue description
When using pipenv open to edit a file, the virtualenv environment isn't set up before opening the user's editor. An example of when this is a problem is if the user is running python-based plugins inside the editor, such as a linter, then these plugins won't have access to the environment and will probably misbehave.
In my specific scenario:
EDITOR=vim
The ALE plugin for vim is installed and configured to use pylint
pylint is installed in the virtualenv, but not system-wide
ALE is unable to find the pylint executable as it is not in sys.path as visible to python executed from vim.
It should be noted that even if pylint were installed globally, it would still error out as it would not be able to find imported packages inside the virtualenv.
Expected result
EDITOR runs inside the virtualenv, as if the user had run pipenv run $EDITOR <file>
Executing python from within the editor runs the virtualenv'd python
Actual result
EDITOR runs without knowledge of the virtualenv, as if the user had run $EDITOR <file>
Executing python from within the editor runs the globally installed python
Steps to replicate
Pipfile:
[[source]]
verify_ssl = true
name = "pypi"
url = "https://pypi.org/simple"

[packages]
hdfs = ">=2.1.0"
attrdict = ">=2.0.0"

[requires]

[dev-packages]
pytest = ">=3.4.0"
pytest-mock = "*"
pytest-spark = "*"
pylint = "*"
flake8 = "*"
ipython = "*"
jedi = "*"
saltpylint = "*"
Execute:
$ export EDITOR=vim
$ pipenv --three
$ pipenv install --dev
$ pipenv open <modulename>
: !python --version
Python 2.6.6
: q
$ pipenv run vim
: !python --version
Python 3.4.5
$ pipenv --support