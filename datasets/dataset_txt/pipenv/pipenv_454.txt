ashleysommer commented on 15 Nov 2018 â€¢
edited
I am developer and maintainer of the sanic-cors and sanic-plugins-framwork python libraries.
I use the PEP-440 guidelines for versioning in sanic-plugins-framework.
sanic-plugins-framework release versions look like this: 0.6.4.dev20181101
I've had a couple of issues raised this year about incomptibilities with pipenv and the PEP-440 versioning used in sanic-plugins-framework. I know pepenv prefers semver versions over PEP-440, but I wanted to open this discussion in order to try to come to a resolution for the users of those libraries.
Related:
ashleysommer/sanicpluginsframework#4
ashleysommer/sanicpluginsframework#9
#2002
#2063
It appears earlier related issues resolving versions with .devN suffix are now fixed, but users are still required to use the --pre flag in order to install them.
I believe this is incorrect behaviour, because my interpretation of the PEP-440 document is that the .devN suffix does not imply a pre-release version.
Reading this section of PEP-440 in Developmental Releases:
https://www.python.org/dev/peps/pep-0440/#id27
It shows that .devN can be applied on pre-release, release-candidate, release, and post-release versions. Therefore to me a developmental release is not the same as a pre-release.
In fact, see this section in PEP-440 regarding compatibility with other forms of semantic-versioning:
https://www.python.org/dev/peps/pep-0440/#id48
Specifically:
One possible mechanism to translate such semantic versioning based source labels to compatible public versions is to use the .devN suffix
So to me that implies that using .devN will increase compatibility of publicly released versions, with semantic versioing systems, not decrease it.
Currently using --pre to install these releases is not a good solution for the users.
There is a workaround to specify pipenv install sanic-cors --pre to resolve pre-release dependency, BUT this flag affects all other dependencies (for example it will coverage==5.0.3a, etc).