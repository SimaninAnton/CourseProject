sephii commented on 4 Mar 2017
If you have requirements in [packages] and in [dev-packages] that require a different version from the same requirement, pipenv seems to pick up the most recent one (or maybe the dev one). Here's an example:
$ cat Pipenv
[[source]]
verify_ssl = true
url = "https://pypi.python.org/simple"

[dev-packages]
django-debug-toolbar = "*"

[packages]
django-cms = "*"
djangocms-column = "*"
Here, django-debug-toolbar requires django>=1.8, while djangocms-column requires django<1.10. Running pipenv lock generates the following Pipfile.lock:
$ cat Pipenv.lock
{
    "default": {
        "django-sekizai": {
            "version": "==0.10.0",
            "hash": "sha256:cbd48e7be29e8cc4108476b9420d7c391fc509a504bc20b60616b116ba6ea51e"
        },
        "django-cms": {
            "version": "==3.4.2",
            "hash": "sha256:4d6f440b537d045398431b5e960b1450a98030e148c4bb0d01e97695ec63bfc7"
        },
        "djangocms-admin-style": {
            "version": "==1.2.6.2",
            "hash": "sha256:3613101d122ef91f198e2220395fc6024bcecf46cc99b9d00e7266a4619bf09e"
        },
        "django-treebeard": {
            "version": "==4.1.0",
            "hash": "sha256:f13c9a612a554ee0784632961904870efcf05f58282cd158da84ee88120fbafb"
        },
        "djangocms-column": {
            "version": "==1.7.0",
            "hash": "sha256:3f3d9fb06fd3f082f5a1e692dc6e73fb745be59f9fe53a266c48f3e75dd78e62"
        },
        "django-formtools": {
            "version": "==2.0",
            "hash": "sha256:369443cdbff1cc8803e08f239c105dc76627239e7dad781060f76f93b919cf84"
        },
        "django-classy-tags": {
            "version": "==0.8.0",
            "hash": "sha256:f6d12f5a4df3e387795a0d9ef2836af389cae9a1fbebda035dac043d4722b1f7"
        },
        "Django": {
            "version": "==1.9.12",
            "hash": "sha256:a59f85a2b007145006915f6134ec3b9c09e68e4377e0a6fd3529d6c56d6aeb04"
        }
    },
    "develop": {
        "sqlparse": {
            "version": "==0.2.3",
            "hash": "sha256:740a023ef38ce11bbb99a9d143856f56ef4ec5b0d7a853f58c02c65b035114c4"
        },
        "django-debug-toolbar": {
            "version": "==1.6",
            "hash": "sha256:62f95c09c0faa4b2deac7edba69a84d0d8ad794e79ce24d86c7cd004c91053d8"
        },
        "Django": {
            "version": "==1.10.6",
            "hash": "sha256:2cfb83859bfaa10e2bd586340bead27c69fdcaa21fa683a008cc712482c26726"
        }
    },
    "_meta": {
        "sources": [
            {
                "url": "https://pypi.python.org/simple",
                "verify_ssl": true
            }
        ],
        "requires": {},
        "hash": {
            "sha256": "afab83ce3bf374b4b66b2b1dd7965afc95f673ad279301734d4b01d2b4f98b44"
        }
    }
}
I would expect pipenv install --dev to pick the versions of the packages that satisfy all the requirements from the packages that are going to be installed, but apparently it installed django 1.10.6, which is not compatible with djangocms-column:
$ pipenv run -- pip freeze
appdirs==1.4.2
Django==1.10.6
django-classy-tags==0.8.0
django-cms==3.4.2
django-debug-toolbar==1.6
django-formtools==2.0
django-sekizai==0.10.0
django-treebeard==4.1.0
djangocms-admin-style==1.2.6.2
djangocms-column==1.7.0
packaging==16.8
pyparsing==2.1.10
six==1.10.0
sqlparse==0.2.3
I'm not sure if I'm doing anything wrong or how this issue could be solved, but in the current status it looks like if a package from default and a package from dev have a requirement to the same package but with a different version, the package that's not compatible with the most recent version of the requirement might not work.