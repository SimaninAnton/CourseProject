feluxe commented on 27 Mar 2018 â€¢
edited
I started using Pipenv/Pipfile and I like it a lot. It's similar to npm/yarn/cargo etc. and I think that's cool, since I'm already used to those. But I have a hard time figuring out how Pipenv/Pipfile and setup.py play together.
In JS you have:
npmjs.com package registry
npm command line tool for installing/publishing packages etc.
package.json to describe your package and manage dependencies.
In Rust it's pretty much the same
crates.io package registry
cargo command line tool for installing/publishing packages etc.
Cargo.toml to describe your package and manage dependencies.
In Python:
pypi.python.org package registry
Pipenv command line tool for installing packages etc.
setup.py to describe your package and dependencies. (also for publishing packages)
Pipfile to describe dependencies and environment for pipenv.
I think it's confusing that you have similar values in both Pipfile and setup.py. In most projects I have seen setup.py acts as a pure config file. I think it would be more intuitive if all of it was configured in Pipfile, like in package.json, Cargo.toml... setup.py could be fully optional.
In Pipfile you could then use:
[install_requires] to describe pypi package dependencies. (if needed)
[packages] to describe dependencies for installation from source
[dev-packages] to describe dependencies for dev-installation from source
If [install_requires] is set and [packages] is omitted, pipenv could use [install_requires] for the install command. That would solve the issue with syncing [packages] and install_requires a lot of people have.
What do you think? :)
4