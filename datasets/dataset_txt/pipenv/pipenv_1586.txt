kageurufu commented on 6 Feb 2018
At the moment, pipenv is not good about changing python versions in the Pipfile, and requires manually wiping out the virtualenv (pipenv --rm). I believe more intuitive results would be for the virtualenv to either include the version directly in the virtualenv name or in the hash calculation.
My main argument is this would lead to the more 'expected' behavior, where a change to the python version in your Pipfile shows immediate changes on the next pipenv command, instead of just a warning when you go to install the next time.
This would in some ways be a breaking change, in that it would change the virtualenv location for any existing project that defines a python_version and create a new virtualenv, however I believe the added usability would be worth the change.
Describe your environment
Linux
Python version: 3.6.4, 3.7.0b1
Pipenv version: $ pipenv --version
Expected result
Changing python_version in my Pipfile should show immediate results, allowing easier changes of python versions
Actual result
Warning: Your Pipfile requires python_version 3.7.0b1, but you are using 3.6.4 (/home/frank/.local/share/v/c/bin/python).
  $ pipenv check will surely fail.
Pipfile.lock (57377a) out of date, updating to (00c27d)â€¦
And pipenv continues to install packages into the existing 3.6.4 virtualenv
Steps to replicate
Create a Pipfile with a python_version specified, and install. Change the python_version requirement in the Pipfile to something else, and pipenv install again