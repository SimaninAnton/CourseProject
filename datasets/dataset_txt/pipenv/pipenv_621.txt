TMiguelT commented on 5 Oct 2018
Currently pipenv run will run either:
An executable in the $PATH
A script listed in Pipfile's [scripts]
However, it is quite a common occurrence that users will want to run a local script, e.g. ./app.py. Currently there are a few ways to do this, but each has their downsides
Add it to the [scripts] section - this works but assumes the user knows beforehand which scripts they may want to execute. Not good for ad-hoc running of scripts
pipenv run python app.py - this forces the user to specify the interpreter. This means the shebang line is ignored, and requires the user to know which interpreter they want (if it's a shell script it shouldn't be run with python). Unix philosophy dictates that we leave the choice of interpreter up to the script itself (hence the existance of the shebang)
Start a pipenv shell, and then run ./app.py. This is (imo) too much of a heavyweight solution. Starting a new shell shouldn't be required to run a single script.
Thus, could we implement the ability for pipenv run to execute arbitrary local scripts? Or is there some philosophical reason why we aren't allowing this?