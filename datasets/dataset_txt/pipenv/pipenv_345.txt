geoffroy-noel-ddh commented on 2 Jan 2019
Please bear with me, I'm new to pipenv so my question might be quite silly.
Once pipenv is installed is there a way to prevent users from accidentally (un)installing packages with "pip install"?
If my understanding is correct "pip install" works at a lower level than pipenv and will therefore bypass the Pipfile and Pipfile.lock. So if someone installs a new package in their local environment using pip this will go unnoticed by our deployment script (which calls pipenv sync) and will cause errors on our server.
Now of course you could say that it's the user's fault for not using the right command. But my team works on a very large number python projects and the migration to pipenv will happen progressively. Inevitably people will mistakenly use pip from time to time.
What would you recommend to either avoid, warn about or recover from bypassing pipenv? Ideally I'd like a way to prevent direct call to "pip install", although should not be the default behaviour. But at the very least I'd like to have a pipenv command to detect discrepancies between installed packages and Pipfile.lock. I can get some of these discrepancies by running "pipenv clean --dry-run" but I can't find a way to detect removed packages still in Pipfile.
My plan would be to add a git hook in my projects to report such discrepancies on commit so there's no way they would propagate from one team member's local environment to the rest of the team or the application server.