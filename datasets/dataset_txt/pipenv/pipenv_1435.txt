dspechnikov commented on 9 Mar 2018 •
edited
Pipenv fails to lock dependencies because of markers parsing error.
Describe your environment
OSX
Python version: 3.6.4
Pipenv version: 11.1.5, and I tried 10.x as well.
Expected result
Pipfile.lock generated successfully.
Actual result
pipenv install
Pipfile.lock not found, creating…
Locking [dev-packages] dependencies…
Locking [packages] dependencies…
lear)
  File "/usr/local/lib/python3.6/site-packages/pipenv/resolver.py", line 19, in resolve
    return pipenv.utils.resolve_deps(packages, which, project=project, pre=pre, sources=sources, clear=clear, verbose=verbose)
  File "/usr/local/lib/python3.6/site-packages/pipenv/../pipenv/utils.py", line 392, in resolve_deps
    resolved_tree, resolver = actually_resolve_reps(deps, index_lookup, markers_lookup, project, sources, verbose, clear, pre)
  File "/usr/local/lib/python3.6/site-packages/pipenv/../pipenv/utils.py", line 325, in actually_resolve_reps
    resolved_tree.update(resolver.resolve(max_rounds=PIPENV_MAX_ROUNDS))
  File "/usr/local/lib/python3.6/site-packages/pipenv/patched/piptools/resolver.py", line 102, in resolve
    has_changed, best_matches = self._resolve_one_round()
  File "/usr/local/lib/python3.6/site-packages/pipenv/patched/piptools/resolver.py", line 200, in _resolve_one_round
    for dep in self._iter_dependencies(best_match):
  File "/usr/local/lib/python3.6/site-packages/pipenv/patched/piptools/resolver.py", line 310, in _iter_dependencies
    yield InstallRequirement.from_line(dependency_string, constraint=ireq.constraint)
  File "/usr/local/lib/python3.6/site-packages/pipenv/patched/pip/req/req_install.py", line 181, in from_line
    markers = Marker(markers)
  File "/usr/local/lib/python3.6/site-packages/pipenv/patched/pip/_vendor/packaging/markers.py", line 282, in __init__
    raise InvalidMarker(err_str)
pip._vendor.packaging.markers.InvalidMarker: Invalid marker: 'python_version >= "3.0"; python_version >= "3.0"', parse error at '; python'
Steps to replicate
Here's the Pipfile to reproduce the issue.
[packages]
twilio = "*"
python_version >= 3.0 is specified in twilio extras, but I'm not sure it's actual cause for the bug.
Explicitly specifying python_version works:
twilio = { version = "*", python_version = ">= '3.0'"}