dimaqq commented on 4 Dec 2018 â€¢
edited
Hi Pipenv devs!
[obligatory nod for creating an awesome tool]
We have a workflow where a virtual env is created on the fly for some hairy tests.
There's a difference between running python -m venv from under pipenv and global interpreter:
> ls -lt venv-from-pipenv/bin/
total 24
-rw-rw-r--  1 xxx staff  2211 Dec  4 16:08 activate
-rw-rw-r--  1 xxx staff  1267 Dec  4 16:08 activate.csh
-rw-rw-r--  1 xxx staff  2419 Dec  4 16:08 activate.fish
lrwxr-xr-x  1 xxx staff     6 Dec  4 16:08 python3 -> python
lrwxr-xr-x  1 xxx staff    72 Dec  4 16:08 python -> /Users/xxx/.local/share/virtualenvs/xxx-x/bin/python
> ls -lt venv-from-system-python/bin/
total 64
-rw-rw-r--  1 xxx staff  2211 Dec  4 16:07 activate
-rw-rw-r--  1 xxx staff  1267 Dec  4 16:07 activate.csh
-rw-rw-r--  1 xxx staff  2419 Dec  4 16:07 activate.fish
-rwxr-xr-x  1 xxx staff   247 Dec  4 16:07 pip3.7
-rwxr-xr-x  1 xxx staff   247 Dec  4 16:07 pip3
-rwxr-xr-x  1 xxx staff   247 Dec  4 16:07 pip
-rwxr-xr-x  1 xxx staff   265 Dec  4 16:07 easy_install-3.7
-rwxr-xr-x  1 xxx staff   265 Dec  4 16:07 easy_install
lrwxr-xr-x  1 xxx staff     9 Dec  4 16:07 python3 -> python3.7
lrwxr-xr-x  1 xxx staff     9 Dec  4 16:07 python -> python3.7
lrwxr-xr-x  1 xxx staff    24 Dec  4 16:07 python3.7 -> /usr/local/bin/python3.7
pip is missing in the first venv.
[in the 2nd venv, it works correctly]
Running venv/bin/python -m pip in the first venv reads|modifies "parent" (pipenv's) site-packages, not the new venv's.
[in the 2nd venv, it works correctly]
Is this workflow supported?
Am I doing something completely wrong?
Any other comments?
pipenv, version 2018.10.13