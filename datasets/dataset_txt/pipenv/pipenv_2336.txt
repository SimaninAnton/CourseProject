isaacsanders commented on 4 May 2017 •
edited
Hey all,
I am back with a bug, and I have already checked that I am on the latest version of Pipenv ;)
The Problem
We have a couple of private dependencies and plenty of public dependencies.
When trying to install with pipenv install with no package, we always fail to install in a clean environment.
The issue is that no matter which source is used, the underlying pip install -r <requirements> command fails. Either the public dependencies don't exist in the private repo, or the private dependencies don't exist in the public repo, causing either command to fail.
I have found the part of the code that causes this. In the pip_install function in the cli module, the sources are tried until they succeed, and if all sources fail, only the last is reported. For awhile, it just looked like my installation couldn't find Flask and gunicorn, an error that I thought was strange, but could deal with by scripting in anger.
A Solution
One way of fixing this might be to store the source used for a package in the lockfile (or somewhere) and during install create separate requirements.txt files for each source to install from.
If that isn't possible/simple or there is an obviously better way to do this, I would be happy to help/write code for this.
A Note
I would also prefer it if every unsuccessful command could be logged, preferably in the format of command-followed-by-error. While it might be more information than others want, I might have figured out this bug weeks ago if I had seen one more error message, rather than just the last one. (This may be part of a PR, if I happen to be the one who writes it)
– Isaac