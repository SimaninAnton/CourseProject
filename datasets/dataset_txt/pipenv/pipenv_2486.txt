Contributor
timofurrer commented on 28 Jan 2017 â€¢
edited
pipenv currently supports two Python versions explicitly - one Python 2 and one Python 3 version.
The ones which are linked by python2 and python3 within $PATH or if neither of the --two nor the --three option is given the python binary/link is used. So you could manage theoretically to work with three different Python versions.
However, the python2 and python3 links are (for most people) system-wide configured by their distributions because most of the Linux distros use those binaries to run their Python tools (and you certainly don't want to break those). Thus, to reconfigure them to point to a non-standard version of Python is not an option in most cases. (and would be to cumbersome anyway).
If I have a project which supports a wide range of Python versions how am I supposed to work with pipenv?
The only not-too-cumbersome option I have right now is to create a virtualenv myself, install pipenv there and use it with neither the --two nor the --three option so it uses the python binary which within the virtualenv points to the correct location. But pipenv would use another virtualenv within the one I just created myself. That's not so cool.
So if there is any feasible intended work flow I'm missing here - could we document it somewhere? At least for me, it's not intuitive at this point.
If there is none, let's work on it. I probably won't be the last person asking for this.