Member
uranusjr commented on 6 Jun 2018 â€¢
edited
Locking requires every sdist to run python setup.py egg_info beforehand to produce a *.egg-info directory. pipenv install -e . does this, but if you write your TOML manually, you will get this error.
Steps to replicate
# setup.py
from setuptools import setup
setup(name='hello', version='1.0')
# Pipfile
[packages]
hello = { path = ".", editable = true }
$ ls -a
Pipfile setup.py
$ pipenv --three
(snipped)
$ pipenv lock
(will produce the exception below)
Expected result
Locking finishes successfully with my editable package in the lock file.
Actual result
  File "pipenv/patched/piptools/resolver.py", line 278, in _iter_dependencies
    for dependency in self.repository.get_dependencies(ireq):
  File "pipenv/patched/piptools/repositories/pypi.py", line 246, in get_dependencies
    legacy_results = self.get_legacy_dependencies(ireq)
  File "pipenv/patched/piptools/repositories/pypi.py", line 264, in get_legacy_dependencies
    dist = ireq.get_dist()
  File "pipenv/patched/notpip/_internal/req/req_install.py", line 966, in get_dist
    egg_info = self.egg_info_path('').rstrip(os.path.sep)
  File "pipenv/patched/notpip/_internal/req/req_install.py", line 562, in egg_info_path
    'No files/directories in %s (from %s)' % (base, filename)
pipenv.patched.notpip._internal.exceptions.InstallationError: No files/directories in hello (from )
The following will produce the expected result:
pipenv run python setup.py egg_info
pipenv lock
so essentially we just need to run egg_info for local packages to ensure they are initialised correctly. I think.