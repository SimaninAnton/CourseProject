mplanchard commented on 29 Sep 2017 â€¢
edited
It would be nice to be able to output [package] distributions only when running pipenv lock -r, in order to generate a production-ready requirements.txt file, which doesn't contain development distributions. Previously, I used separate requirements-to-freeze.txt and requirements-dev.txt files to accomplish this.
I have worked around the issue with a tox environment that runs pipenv install and then pipenv run pip freeze, piping the output to requirements.txt, to get the same behavior. However, this doesn't allow me to take advantages of the nice hashing features of pipenv.
I have updated a local copy of pipenv, in which I have changed lock in cli.py as follows:
# ...other options
@click.option('--dev', is_flag=True, default=False, help='Include dev packages in requirements.txt output.')
def lock(three=None, python=False, verbose=False, requirements=False, clear=False, pre=False, dev=False):

    # Ensure that virtualenv is available.
    ensure_project(three=three, python=python)

    # Load the --pre settings from the Pipfile.
    if not pre:
        pre = project.settings.get('pre')


    if requirements:
        do_init(dev=dev, requirements=requirements)

    do_lock(verbose=verbose, clear=clear, pre=pre)
This works, but the problems I see with this approach are:
it changes the current default behavior, which people may be relying on
it adds a flag that only has any effect when another flag is specified, which isn't the most intuitive thing in the world.
I would imagine that the pip community is also trying to get people away from using requirements.txt, so maybe making it easier isn't something that y'all want to do.
Is this something that pipenv would be interested in implementing? If so, would y'all prefer an approach that avoids some or all of the above pitfalls? I'd be happy to open a PR on this if the feedback is positive.