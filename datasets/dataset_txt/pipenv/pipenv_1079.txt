SethMMorton commented on 9 May 2018
When executing pipenv --envs, the following list is generated:
  - PIPENV_SHELL_FANCY
  - PIPENV_PYTHON
  - PIPENV_VENV_IN_PROJECT
  - PIPENV_TEST_INDEX
  - PIPENV_COLORBLIND
  - PIPENV_NOSPIN
  - PIPENV_MAX_ROUNDS
  - PIPENV_MAX_RETRIES
  - PIPENV_PIPFILE
  - PIPENV_DEFAULT_PYTHON_VERSION
  - PIPENV_DONT_LOAD_ENV
  - PIPENV_YES
  - PIPENV_MAX_SUBPROCESS
  - PIPENV_MAX_DEPTH
  - PIPENV_NO_INHERIT
  - PIPENV_VIRTUALENV
  - PIPENV_USE_SYSTEM
  - PIPENV_USE_HASHES
  - PIPENV_SKIP_VALIDATION
  - PIPENV_DOTENV_LOCATION
  - PIPENV_HIDE_EMOJIS
  - PIPENV_TIMEOUT
  - PIPENV_INSTALL_TIMEOUT
  - PIPENV_DONT_USE_PYENV
  - PIPENV_SHELL
  - PIPENV_CACHE_DIR
The list of documented environment variables shows the following variables:
PIPENV_DEFAULT_PYTHON_VERSION — Use this version of Python when creating new virtual environments, by default (e.g. 3.6).
PIPENV_SHELL_FANCY — Always use fancy mode when invoking pipenv shell.
PIPENV_VENV_IN_PROJECT — If set, use .venv in your project directory instead of the global virtualenv manager pew.
PIPENV_COLORBLIND — Disable terminal colors, for some reason.
PIPENV_NOSPIN — Disable terminal spinner, for cleaner logs. Automatically set in CI environments.
PIPENV_MAX_DEPTH — Set to an integer for the maximum number of directories to recursively search for a Pipfile.
PIPENV_TIMEOUT — Set to an integer for the max number of seconds Pipenv will wait for virtualenv creation to complete. Defaults to 120 seconds.
PIPENV_INSTALL_TIMEOUT — Set to an integer for the max number of seconds Pipenv will wait for package installation before timing out. Defaults to 900 seconds.
PIPENV_IGNORE_VIRTUALENVS — Set to disable automatically using an activated virtualenv over the current project’s own virtual environment.
PIPENV_PIPFILE — When running pipenv from a $PWD other than the same directory where the Pipfile is located, instruct pipenv to find the Pipfile in the location specified by this environment variable.
PIPENV_CACHE_DIR — Location for Pipenv to store it’s package cache.
PIPENV_HIDE_EMOJIS — Disable emojis in output.
PIPENV_DOTENV_LOCATION — Location for Pipenv to load your project’s .env.
PIPENV_DONT_LOAD_ENV — Tell Pipenv not to load the .env files automatically.
The following variables are presented to the user by --envs that are not documented:
PIPENV_PYTHON
PIPENV_TEST_INDEX
PIPENV_MAX_ROUNDS
PIPENV_MAX_RETRIES
PIPENV_YES
PIPENV_MAX_SUBPROCESS
PIPENV_NO_INHERIT
PIPENV_VIRTUALENV
PIPENV_USE_SYSTEM
PIPENV_USE_HASHES
PIPENV_SKIP_VALIDATION
PIPENV_DONT_USE_PYENV
PIPENV_SHELL
Based on conversations had in #2124, users should not expect undocumented environment variables to behave in any particular way. I wonder if either a) undocumented environment variables could be omitted from the pipenv --envs list or b) undocumented environment variables could be marked as such in the pipenv --envs list. This could prevent users for accidentally abusing one of these environment variables (as I inadvertently did).