Julian commented on 11 Jul 2018
Issue description
Given an empty Pipfile, running pipenv install overwrites it with the templated one.
Expected result
I'd expect pipenv install to never modify an existing Pipfile (even if it were invalid, though I don't think an empty one is).
Steps to replicate
‚äô  mkdir Foo && cd Foo && touch Pipfile && pipenv install
Creating a virtualenv for this project‚Ä¶
Using /Users/Julian/.local/share/virtualenvs/pipenv/bin/python (2.7.13) to create virtualenv‚Ä¶
‚†ãAlready using interpreter /Users/Julian/.local/share/virtualenvs/pipenv/bin/python
Using real prefix '/usr/local/Cellar/pypy/5.10.0_1/libexec'
Path not in prefix '/Users/Julian/.local/share/virtualenvs/pipenv/include' '/usr/local/Cellar/pypy/5.10.0_1/libexec'
New pypy executable in /Users/Julian/Library/Application Support/virtualenvs/Foo-mHoil3nZ/bin/python
Also creating executable in /Users/Julian/Library/Application Support/virtualenvs/Foo-mHoil3nZ/bin/pypy
Installing setuptools, pip, wheel...done.

Virtualenv location: /Users/Julian/Library/Application Support/virtualenvs/Foo-mHoil3nZ
Creating a Pipfile for this project‚Ä¶
Pipfile.lock not found, creating‚Ä¶
Locking [dev-packages] dependencies‚Ä¶
Locking [packages] dependencies‚Ä¶
Updated Pipfile.lock (b44f36)!
Installing dependencies from Pipfile.lock (b44f36)‚Ä¶
  üêç   ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ 0/0 ‚Äî 00:00:00
To activate this project's virtualenv, run the following:
 $ pipenv shell

~/Desktop/Foo
‚äô  cat Pipfile
[[source]]

url = "https://pypi.python.org/simple"
verify_ssl = true
name = "pypi"


[packages]



[dev-packages]



[requires]

python_version = "2.7"