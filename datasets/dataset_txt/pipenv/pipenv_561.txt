Contributor
immerrr commented on 12 Oct 2018
Be sure to check the existing issues (both open and closed!), and make sure you are running the latest version of Pipenv.
Check the diagnose documentation for common issues before posting! We may close your issue if it is very similar to one of them. Please be considerate, or be on your way.
Make sure to mention your debugging experience if the documented solution failed.
Issue description
While trying to come up with a PR to fix the problem with customized Python versions raising errors I've found a problem with pythonfinder's Pipfile.lock: it mentioned vistir==0.1.1 whereas it was using features from vistir==0.1.7:
~/src/pythonfinder/src/pythonfinder/utils.py in get_python_version(path)
     30     version_cmd = [path, "-c", "import sys; print(sys.version.split()[0])"]
     31     try:
---> 32         out, _ = vistir.misc.run(version_cmd, block=True, nospin=True)
     33     except OSError:
     34         raise InvalidPythonVersion("%s is not a valid python path" % path)

TypeError: run() got an unexpected keyword argument 'block'
Then I tried to update only vistir version to ensure pipenv doesn't touch anything else unless it has to and I did this:
$ pipenv update --keep-outdated vistir
Warning: vistir was not found in your Pipfile! Aborting.
Aborted!
But as you can see, pipenv refuses to lock a fresher version, because it turns out that vistir is fetched as a dependency of pythonfinder itself, which is mentioned in the Pipfile.
Expected result
In this particular case, I'll probably just add vistir to the list of default packages, but I think it should be possible for Pipenv to update a thirdparty dependency without mentioning it in Pipfile explicitly.
Actual result
pipenv complains that vistir is not in Pipfile and exits.
Steps to replicate
$ git clone git@github.com:sarugaku/pythonfinder
$ cd pythonfinder
$ git checkout f072cf19cfebff73229a19e24bfffd378716d742
$ pipenv update --keep-outdated vistir
$ pipenv --support