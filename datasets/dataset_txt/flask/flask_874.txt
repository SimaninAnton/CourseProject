rbrtmrtn commented on 5 Mar 2016
I have a fairly straightforward project scaffolded out that looks like
my_app/
    my_app/
        __init__.py
        models.py
        mod1/
        mod2/
    instance/
        config.py
    config.py
    setup.py
I installed this as a package to a virtualenv with setup.py develop. My __init__.py looks like:
from flask import Flask
from flask.ext.sqlalchemy import SQLAlchemy

app = Flask(__name__, instance_relative_config=True)
app.config.from_pyfile('config.py')

db = SQLAlchemy(app)
If I run this file, I get an error Unable to load configuration file (No such file or directory): '/home/my_app/my_app/instance/config.py'. Indeed, this is the wrong path; it should be looking in /home/my_app/instance/config.py.
The file models.py contains only one line of code so far: from my_app import db. I can run this without any errors, which is obviously executing all the code in __init__.py as well. If I check the value of Flask.auto_find_instance_path in this context it has the correct path, unlike above.
Unless I am doing something wrong here, or this is a consequence of setup.py developing that I'm not understanding -- I believe this is an issue with the find_package helper called by auto_find_instance_path . When I run __init__.py directly, __name__ is set to __main__, which causes find_package to return os.getcwd(). When I run models.py, the __name__ for __init__.py is set to my_app which causes it to resolve properly via the module name.
This is my first large/packaged Flask project so maybe I'm missing something, but I believe the docs say that your instance folder should be next to your main application module, not inside it. If that's the case, why does find_package attempt to look in the current working directory? Shouldn't it look in the parent directory?