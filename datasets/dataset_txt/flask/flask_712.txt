AMDmi3 commented on 14 Dec 2016
It's often useful to reference current endpoint, sometimes modifying some of arguments. For example, imagine some generic item viewer application which shows items from different sources:
@app.route("/<source>/<item>")
def item(source, item):
    return render_template("item.html")
<a href="{{ url_for(???) }}">This item from another source</a>
<a href="{{ url_for(???) }}">Different item from the same source</a>
Currently, request.endpoint and request.view_args may be used to construct such urls, but it's cumbersome if done generic way:
<a href="{{ url_for(request.endpoint, *dict(request.view_args, source="another")) }}">This item from another source</a>
<a href="{{ url_for(request.endpoint, *dict(request.view_args, item="different")) }}">Different item from the same source</a>
So I propose to add url_for_self() function which does it in simple way. I've implemented it like this for myself:
def url_for_self(**args):
    return flask.url_for(flask.request.endpoint, **dict(flask.request.view_args, **args))

app.jinja_env.globals['url_for_self'] = url_for_self
This simplifies above mentioned template code into much more readable:
<a href="{{ url_for_self(source="another") }}">This item from another source</a>
<a href="{{ url_for_self(item="different") }}">Different item from the same source</a>
Note that this allows both adding, modifying and clearing (with foo=None) parameters.