GiancarloFusiello commented on 7 Feb 2019
I have created a custom error_handler function like so:
def http_error_handler(error: HTTPException) -> Response:
    # rest of the code here
I then register all default http errors to use the above handler like so:
from werkzeug.exceptions import default_exceptions

for code in default_exceptions:
    app.errorhandler(code)(http_error_handler)
I can confirm that my handler function has registered for all http errors in default_exceptions:
app.error_handler_spec
{None: {400: {<class 'werkzeug.exceptions.BadRequest'>: <function http_error_handler at 0x7f0d3cd688c8>},
        401: {<class 'werkzeug.exceptions.Unauthorized'>: <function http_error_handler at 0x7f0d3cd688c8>},
        403: {<class 'werkzeug.exceptions.Forbidden'>: <function http_error_handler at 0x7f0d3cd688c8>},
        404: {<class 'werkzeug.exceptions.NotFound'>: <function http_error_handler at 0x7f0d3cd688c8>},
        405: {<class 'werkzeug.exceptions.MethodNotAllowed'>: <function http_error_handler at 0x7f0d3cd688c8>},
        406: {<class 'werkzeug.exceptions.NotAcceptable'>: <function http_error_handler at 0x7f0d3cd688c8>},
        408: {<class 'werkzeug.exceptions.RequestTimeout'>: <function http_error_handler at 0x7f0d3cd688c8>},
        409: {<class 'werkzeug.exceptions.Conflict'>: <function http_error_handler at 0x7f0d3cd688c8>},
        410: {<class 'werkzeug.exceptions.Gone'>: <function http_error_handler at 0x7f0d3cd688c8>},
        411: {<class 'werkzeug.exceptions.LengthRequired'>: <function http_error_handler at 0x7f0d3cd688c8>},
        412: {<class 'werkzeug.exceptions.PreconditionFailed'>: <function http_error_handler at 0x7f0d3cd688c8>},
        413: {<class 'werkzeug.exceptions.RequestEntityTooLarge'>: <function http_error_handler at 0x7f0d3cd688c8>},
        414: {<class 'werkzeug.exceptions.RequestURITooLarge'>: <function http_error_handler at 0x7f0d3cd688c8>},
        415: {<class 'werkzeug.exceptions.UnsupportedMediaType'>: <function http_error_handler at 0x7f0d3cd688c8>},
        416: {<class 'werkzeug.exceptions.RequestedRangeNotSatisfiable'>: <function http_error_handler at 0x7f0d3cd688c8>},
        417: {<class 'werkzeug.exceptions.ExpectationFailed'>: <function http_error_handler at 0x7f0d3cd688c8>},
        418: {<class 'werkzeug.exceptions.ImATeapot'>: <function http_error_handler at 0x7f0d3cd688c8>},
        422: {<class 'werkzeug.exceptions.UnprocessableEntity'>: <function http_error_handler at 0x7f0d3cd688c8>},
        423: {<class 'werkzeug.exceptions.Locked'>: <function http_error_handler at 0x7f0d3cd688c8>},
        428: {<class 'werkzeug.exceptions.PreconditionRequired'>: <function http_error_handler at 0x7f0d3cd688c8>},
        429: {<class 'werkzeug.exceptions.TooManyRequests'>: <function http_error_handler at 0x7f0d3cd688c8>},
        431: {<class 'werkzeug.exceptions.RequestHeaderFieldsTooLarge'>: <function http_error_handler at 0x7f0d3cd688c8>},
        451: {<class 'werkzeug.exceptions.UnavailableForLegalReasons'>: <function http_error_handler at 0x7f0d3cd688c8>},
        500: {<class 'werkzeug.exceptions.InternalServerError'>: <function http_error_handler at 0x7f0d3cd688c8>},
        501: {<class 'werkzeug.exceptions.NotImplemented'>: <function http_error_handler at 0x7f0d3cd688c8>},
        502: {<class 'werkzeug.exceptions.BadGateway'>: <function http_error_handler at 0x7f0d3cd688c8>},
        503: {<class 'werkzeug.exceptions.ServiceUnavailable'>: <function http_error_handler at 0x7f0d3cd688c8>},
        504: {<class 'werkzeug.exceptions.GatewayTimeout'>: <function http_error_handler at 0x7f0d3cd688c8>},
        505: {<class 'werkzeug.exceptions.HTTPVersionNotSupported'>: <function http_error_handler at 0x7f0d3cd688c8>}}}
I'm then testing each error using an endpoint that accepts requests like so /error?code=404 which in tern calls flask.abort(404) that then calls http_error_handler I created.
I noticed that all http errors are calling my custom error function except for http error 412 even though you can see it has registered above. Any ideas?
Side note, if there is a better way of testing custom error pages then please advise.
Thanks in advance.
Environment
Python version: 3.7.2-alpine3.8 docker image
Flask version: 1.0.2
Werkzeug version: 0.14.1