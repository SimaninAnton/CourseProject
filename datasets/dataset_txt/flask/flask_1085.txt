jonaprieto commented on 10 Mar 2015
Hi guys, I'm using for the first time your framework and I happy find out all capabilities with this "micro-framework'. Btw, I just came up with this decorator, something more friendly for logging task
I created my project in you want to look for a moment: http://github.com/d555/visionapp
In something like manage.py ,inside the Flask app in app root directory:
...
import logging
from logging.handlers import RotatingFileHandler
...
handler = RotatingFileHandler('app-log.txt', maxBytes=10000, backupCount=1)
handler.setLevel(logging.INFO) # puede ser loggin.ERROR
app.logger.addHandler(handler)
So, in a somewhere possibly main/decorators.py:
from flask import current_app
...
def logging(hora=None):
    logger = None
    def decorador(f):
        @wraps(f)
        def vista(*args, **kwargs):
            logger = current_app.logger
            kwargs['log'] = logger
            return f(*args, **kwargs)
        return vista
    return decorador
After that, I could nicely use the above decorator in the following way in whatever view:
@logging()
def view_function(log):
    log.info('friendly logging call')
   return ...
May be, you could just say that in each view wrote something like:
from flask import current_app
def view_function():
     log = current_app.logger
     log.info('another message')
For now, above approach works fine for me, but maybe you know a better approach to do that:
``using the logger defined in configuration of app, to access from every view functions in any folder to logger
How is better do a logging tracking? (something like 'using`getLogger`? and the normal use?)
Is there something relate with`from flask import logging`. I couldn't find in documentation something relate (maybe https://github.com/mitsuhiko/flask-extended-logging, http://flask.pocoo.org/docs/0.10/errorhandling/) if It's abroad here excuse me.
Thanks in advance.