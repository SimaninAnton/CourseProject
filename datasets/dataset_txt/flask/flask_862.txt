alejoar commented on 7 Apr 2016
The time has come where I need to release a new version for my api and still support the previous one.
I have an app structure that looks like this:
+-- app/
    +-- api_2_0/
        +-- __init__.py
        (...)
    +-- api_2_1/
        +-- __init__.py
        (...)
   +-- __init__.py
Both are blueprints which I initialize this way in my __init__.py in the create_app method (I'm using the app factory method):
    from .api_2_0 import api as api_2_0_blueprint
    app.register_blueprint(api_2_0_blueprint, url_prefix='/api/v2.0')

    from .api_2_1 import api as api_2_1_blueprint
    app.register_blueprint(api_2_1_blueprint, url_prefix='/api/v2.1')
But this causes: AssertionError: A blueprint's name collision occurred between <flask.blueprints.Blueprint object at 0x7f8e48e82c10> and <flask.blueprints.Blueprint object at 0x7f8e48ef7150>. Both share the same name "api". Blueprints that are created on the fly need unique names.
It's true that both are called api inside their folders but I'm importing them with different names. Having to rename all the calls to api to something else for each version would make versioning painful and overall a code spaghetti.
Is there a better way to do this?