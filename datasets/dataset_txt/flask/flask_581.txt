stephen-mw commented on 24 Jun 2017 â€¢
edited
Expected Behavior
Flask's jsonify response incorrectly marks the timezone when stringing the datetime object. It always contains the string GMT, regardless of if the datetime object is not naive or has tzinfo set.
I originally suspected it may be something to do with the http_date function, which is called on the datetime object if its detected. However, when I print http_date(time) on the object it correctly converts the time zone to GMT.
I believe that this logic is somehow incorrectly identifying the object as a date object and not datetime, and thusly calling timetuple() (which has this affect) and not utctimetuple() which maintains the time).
   65         if isinstance(o, datetime):
   66             return http_date(o.utctimetuple())
   67         if isinstance(o, date):
   68             return http_date(o.timetuple())
Tell us what should happen.
A jsonify'd response should print the correct datetime 3-letter timezone abbreviation according to the datetime's tzinfo response. Or, if forcing a converstion to GMT, should correctly convert the object to GMT time from its localized time zone.
The below jsonify'd/stringed 3-letter time-zone response says GMT, but the datetime object is PDT. The time in the response is also in PST and has not been converted to GMT.
"Fri, 23 Jun 2017 17:12:18 GMT"
#!/usr/bin/env python2.7

from werkzeug.http import http_date
from datetime import datetime
import pytz

from flask import Flask, jsonify

app = Flask(__name__)

@app.route('/')
def root():
    # Localize time
    local_time = pytz.timezone("America/Los_Angeles")
    time = datetime.utcnow().replace(microsecond=0).replace(tzinfo=pytz.utc)
    time = time.astimezone(local_time)

    print("iso format:", time.isoformat())
    print("object:", time.tzinfo)
    print("http date:", http_date(time))

    result = [time]

    print("Test object: %s" % result)

    return jsonify(result)

app.run(host='127.0.0.1', port=8080, debug=False)
Actual Behavior
Webserver returns response with GMT timezone with localized time:
[
"Fri, 23 Jun 2017 17:12:18 GMT"
]
The logs in the console correctly identify the datetime object as PDT:
('iso format:', '2017-06-23T17:28:11-07:00')
('object:', <DstTzInfo 'America/Los_Angeles' PDT-1 day, 17:00:00 DST>)
('http date:', 'Sat, 24 Jun 2017 00:28:11 GMT')
Test object: [datetime.datetime(2017, 6, 23, 17, 28, 11, tzinfo=<DstTzInfo 'America/Los_Angeles' PDT-1 day, 17:00:00 DST>)]
127.0.0.1 - - [23/Jun/2017 17:28:11] "GET / HTTP/1.1" 200 -
Environment
Python version: 2.7 or 3.6 (affects both in identical way)
Flask version: Flask==0.12.2
Werkzeug version: Werkzeug==0.12.2