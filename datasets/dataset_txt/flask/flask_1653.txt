oscherler commented on 26 Apr 2011
The example in the docs under Application Dispatching > Combining Applications is incorrect:
from werkzeug.wsgi import DispatcherMiddleware
from frontend_app import application as frontend
from backend_app import application as backend

application = DispatcherMiddleware(frontend, {
    '/backend':     backend
})
It leaves you with nothing to run, because application is not an application (and thus cannot be run()) but an instance of DispatcherMiddleware, which nothing can be done with whatsoever. Google had no mention of DispatcherMiddleware apart from the above page and the Werkzeug web site. You therefore try to run it as a Werkzeug application, but:
The Werkzeug documentation is lame and no help at all;
It is not the right approach anyway.
The code sample should either be:
from werkzeug.wsgi import DispatcherMiddleware
from frontend_app import application as frontend
from backend_app import application as backend

frontend.wsgi_app = DispatcherMiddleware(frontend.wsgi_app, {
    '/backend':     backend
})

frontend.run()
or:
from flask import Flask
from werkzeug.wsgi import DispatcherMiddleware
from frontend_app import application as frontend
from backend_app import application as backend

application = Flask(__name__)

application.wsgi_app = DispatcherMiddleware(frontend, {
    '/backend':     backend
})

application.run()
There is one hint of this in Quickstart > Hooking in WSGI Middlewares and another in the API reference for the Flask class, but neither of them is returned in Google searches about Flask Werkzeug middleware for example.