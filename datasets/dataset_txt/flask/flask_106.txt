justanr commented on 7 Jul 2019
Expected Behavior
The selected command should be available in the application factory provided to the click integration.
I recently started adding instrumentation to an application, however when I run most CLI commands I don't want to trigger the instrumentation to be initialized. However by the time I gain access to the application it's too late to turn it off (things have been mucked with and monkeypatched, etc). It seems like the easiest thing to do is allow the selected command to be considered when running the application factory so the factory can make informed decisions about what should/shouldn't be initialized during application setup based on what I'm attempting to do.
There is the possibility of doing various things such as:
adding a --no-trace flag to the top level command
using a custom configuration when executing CLI commands other than run
probably some other gross things
I managed to work around this not being available out of the box by adding the following to a custom flask group (something we were already using):
def get_command(self, ctx, name):
    # arguably belongs on ScriptInfo.data instead of just shoving it on there
    ctx.ensure_object(ScriptInfo).command = name
    super().get_command(ctx, name)
Actual Behavior
Unless I'm missing something, it's not available through vanilla means.
Environment
Python version: 3.7
Flask version: 1.0.2
Werkzeug version: 0.14.1
Click version: 6.7