Contributor
fengsp commented on 25 May 2014
I am writing a little extension Flask-Profile, nothing serious but one tiny tool to do profiling for Flask.
Firstly I use one middleware(which is quite obvious for my purpose), middleware is working great on catching the whole thing but with one issue. I can not append the
profiling result to the response which is already sent, and I really do not want to see
the result using another way.
Then I use the before_request and after_request hook, more issues appear, now I can modify the response to append my profiling result, though, all other extensions have
to be used after Flask-Profile so they can be profiled. Also I am not catching the whole
lifetime, I do not catch the request_context pushing and session related stuff, session
is opened during the request_context pushing and is saved after after_request hooks
were executed.
Try to use the request-started and request-finished signal. Issues exist, signalling support is available only when blinker library is installed, and I still can not catch the
session opening. The good news is that all extensions can be caught no matter which
one calls init_app first.
After all this, What I want is one hook that is called just after request get in and request_context is pushed(however session are not opened) and another hook that is called after process_response, both of which Flask does not have.
I can only think of monkeying patching the Flask.wsgi_app which is the last thing I want to do. Any better ideas?