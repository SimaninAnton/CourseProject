dpinney commented on 25 Jun 2013
I'm building a flask app that would benefit from being able to spawn some subprocesses via python's standard multiprocessing module.
However, spawning just one leads to an endless loop where an infinite number of processes are spawned. Yikes! It only happens when debug=True is passed to app.run. So it's not a problem in production, but it makes debugging hard.
This problem doesn't happen with the threading module, interestingly enough.
Code to reproduce (Python version 2.7.3 on Windows 7 x64) follows:
import time
from multiprocessing import Process
from flask import Flask

app = Flask(__name__)

def testFun():
    print 'Starting'
    time.sleep(3)
    print '3 Seconds Later'
backProc = Process(target=testFun, args=())
backProc.start()

@app.route('/')
def root():
    return 'Root'

if __name__ == '__main__':
    app.run(debug=True)