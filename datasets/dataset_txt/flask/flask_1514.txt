dansalmo commented on 31 May 2012
I am very new to python, flask, heroku, git etc. but I was able to easily and successfully flow through the quickstart guide and get the minimal app deployed on heroku. I was very impressed with documentation flow and accuracy. However, I ran into a significant stumbling block with the "HTTP Methods" section. There were two issues that caused me stumble and I think others may stumble here as well.
The most significant issue was that the login example code calls descriptive stubs that don't exist. This may be fine for those that already understand what the example is showing, but for people like me that learn by trying to run the code examples, it took quite a while to figure that my app was crashing due to the non-existent function calls.
The second issue involves the difference between the flask routing and what I was familiar with for form processing in PHP. I initially expected something along the lines of a login.py script that would get invoked by action="http://mysite.com/login.py" attribute of the form.
Eventually I figured out how it worked by creating what I believe would be a more easily understood example for the method and form functionality. This is the code that I eventually created to learn and confirm the functionality.
Please consider revising the Flask example(s) to show code that can actually be executed like the previous examples I have tried, and to show what the HTML would look like if needed.
@app.route('/form', methods=['POST', 'GET'])
def form():
    if request.method == 'POST':
        return 'form POST dictionary: %s' % request.form
    if request.method == 'GET':
        return 'form GET args: %s' % request.args
<form method="POST" action="http://your_sites_url_here.com/form">
  Username: <input type="text" name="username" size="15" /><br />
  Password: <input type="password" name="password" size="15" /><br />
            <p><input type="submit" value="Login" /></p>
 </form>