dmtucker commented on 26 Apr 2016
This issue is related to PR #912.
============================= test session starts ==============================
platform linux2 -- Python 2.6.6, pytest-2.9.1, py-1.4.31, pluggy-0.3.1
rootdir: /src, inifile: setup.cfg
collected 459 items

tests/test_compat.py ..
tests/test_datastructures.py .............................................s..
tests/test_debug.py .................ss
tests/test_exceptions.py ......................
tests/test_formparser.py ...................
tests/test_http.py .................................
tests/test_internal.py ...
tests/test_local.py .........
tests/test_routing.py ..................................................
tests/test_security.py ....
tests/test_serving.py sssssssssFs
tests/test_test.py ...................................
tests/test_urls.py .........................................
tests/test_utils.py ...................
tests/test_wrappers.py ...................................................
tests/test_wsgi.py .......................
tests/contrib/test_atom.py .
tests/contrib/test_cache.py ...............................ssssssssssssss
tests/contrib/test_fixers.py .......
tests/contrib/test_iterio.py ....ss
tests/contrib/test_securecookie.py ..
tests/contrib/test_sessions.py .....
tests/contrib/test_wrappers.py ...
tests/res/test.txt s

=================================== FAILURES ===================================
___________________________ test_monkeypached_sleep ____________________________

tmpdir = local('/tmp/pytest-of-root/pytest-0/test_monkeypached_sleep0')

    def test_monkeypached_sleep(tmpdir):
        # removing the staticmethod wrapper in the definition of
        # ReloaderLoop._sleep works most of the time, since `sleep` is a c
        # function, and unlike python functions which are descriptors, doesn't
        # become a method when attached to a class. however, if the user has called
        # `eventlet.monkey_patch` before importing `_reloader`, `time.sleep` is a
        # python function, and subsequently calling `ReloaderLoop._sleep` fails
        # with a TypeError. This test checks that _sleep is attached correctly.
        script = tmpdir.mkdir('app').join('test.py')
        script.write(textwrap.dedent('''
        import time

        def sleep(secs):
            pass

        # simulate eventlet.monkey_patch by replacing the builtin sleep
        # with a regular function before _reloader is imported
        time.sleep = sleep

        from werkzeug._reloader import ReloaderLoop
        ReloaderLoop()._sleep(0)
        '''))
>       subprocess.check_call(['python', str(script)])

tests/test_serving.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

popenargs = (['python', '/tmp/pytest-of-root/pytest-0/test_monkeypached_sleep0/app/test.py'],)
kwargs = {}, retcode = 1
cmd = ['python', '/tmp/pytest-of-root/pytest-0/test_monkeypached_sleep0/app/test.py']

    def check_call(*popenargs, **kwargs):
        """Run command with arguments.  Wait for command to complete.  If
        the exit code was zero then return, otherwise raise
        CalledProcessError.  The CalledProcessError object will have the
        return code in the returncode attribute.

        The arguments are the same as for the Popen constructor.  Example:

        check_call(["ls", "-l"])
        """
        retcode = call(*popenargs, **kwargs)
        cmd = kwargs.get("args")
        if cmd is None:
            cmd = popenargs[0]
        if retcode:
>           raise CalledProcessError(retcode, cmd)
E           CalledProcessError: Command '['python', '/tmp/pytest-of-root/pytest-0/test_monkeypached_sleep0/app/test.py']' returned non-zero exit status 1

/usr/lib64/python2.6/subprocess.py:505: CalledProcessError
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/tmp/pytest-of-root/pytest-0/test_monkeypached_sleep0/app/test.py", line 11, in <module>
    from werkzeug._reloader import ReloaderLoop
ImportError: No module named werkzeug._reloader
=============== 1 failed, 428 passed, 30 skipped in 3.57 seconds ===============