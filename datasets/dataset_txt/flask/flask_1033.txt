nitori commented on 22 May 2015
Hi,
I'm currently testing a feature (nitori/flask@f2ae742) that required to move the registration of the static url from __init__ to a method, and register that method using before_first_request (nitori/flask@6bc7736).
It works pretty well with a normal application, but it fails one test (tests/test_basic.py::test_static_files FAILED). And I realized, that the registered before_first_request functions are never actually called with the test client testing.FlaskClient. I fixed that locally by adding self.application.try_trigger_before_first_request_functions() right before the return statement of testing.FlaskClient.open (or should it even go to Client.open?).
I'm wondering if there is a rationale behind not calling the registered functions? Or has there just never been a case where it's actually required?
Edit
I realized this doesn't work. If the first request is to a static URL, it will return 404, because the RequestContext was created before the static route was registered. If anything, I probably need another even like before_first_request_context or something like that. Maybe called inside of Flask.request_context.
I'm sorry, it seems this turned into a completely different issue.