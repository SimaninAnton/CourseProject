allanlei commented on 10 Sep 2016
The default commands run and shell cannot be overridden.
Using a custom command called shell, I expect the custom shell to override the builtin shell
@app.cli.command('shell', short_help='My custom shell')
def shell():
    pass
But running --help still produces flask.cli.shell's help
> python -m flask
Usage: python -m flask [OPTIONS] COMMAND [ARGS]...

  This shell command acts as general utility script for Flask applications.

  It loads the application configured (either through the FLASK_APP
  environment variable) and then provides commands either provided by the
  application or Flask itself.

  The most useful commands are the "run" and "shell" command.

  Example usage:

    $ export FLASK_APP=hello
    $ export FLASK_DEBUG=1
    $ flask run

Options:
  --help  Show this message and exit.

Commands:
  run    Runs a development server.
  shell  Runs a shell in the app context.
And running gives me flask.cli.shell's shell
> python -m flask shell

Python 3.5.2 (default, Jul 17 2016, 00:00:00) 
[GCC 4.8.4] on linux
App: wallet
Instance: app/instance
>>> 
Also,
@app.cli.command('shell_plus', short_help='bar')
def shell_plus_1():
    pass

@app.cli.command('shell_plus', short_help='foo')
def shell_plus_2():
    pass
has the behaviour I expect
Usage: python -m flask [OPTIONS] COMMAND [ARGS]...

  This shell command acts as general utility script for Flask applications.

  It loads the application configured (either through the FLASK_APP
  environment variable) and then provides commands either provided by the
  application or Flask itself.

  The most useful commands are the "run" and "shell" command.

  Example usage:

    $ export FLASK_APP=hello
    $ export FLASK_DEBUG=1
    $ flask run

Options:
  --help  Show this message and exit.

Commands:
  run         Runs a development server.
  shell       Runs a shell in the app context.
  shell_plus  foo