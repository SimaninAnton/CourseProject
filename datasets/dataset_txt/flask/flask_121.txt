Contributor
aligoren commented on 8 Jun 2019 â€¢
edited
Before starting, I'm so sorry because this issue can be totally ridiculous.
Hi. I've been doing a review of the Flask code base for a while.
I found this method
flask/src/flask/debughelpers.py
Lines 124 to 169 in d4b688b
 def explain_template_loading_attempts(app, template, attempts): 
     """This should help developers understand what failed""" 
     info = ['Locating template "%s":' % template] 
     total_found = 0 
     blueprint = None 
     reqctx = _request_ctx_stack.top 
     if reqctx is not None and reqctx.request.blueprint is not None: 
         blueprint = reqctx.request.blueprint 
        for idx, (loader, srcobj, triple) in enumerate(attempts): 
         if isinstance(srcobj, Flask): 
             src_info = 'application "%s"' % srcobj.import_name 
         elif isinstance(srcobj, Blueprint): 
             src_info = 'blueprint "%s" (%s)' % (srcobj.name, srcobj.import_name) 
         else: 
             src_info = repr(srcobj) 
            info.append("% 5d: trying loader of %s" % (idx + 1, src_info)) 
            for line in _dump_loader_info(loader): 
             info.append("       %s" % line) 
            if triple is None: 
             detail = "no match" 
         else: 
             detail = "found (%r)" % (triple[1] or "<string>") 
             total_found += 1 
         info.append("       -> %s" % detail) 
        seems_fishy = False 
     if total_found == 0: 
         info.append("Error: the template could not be found.") 
         seems_fishy = True 
     elif total_found > 1: 
         info.append("Warning: multiple loaders returned a match for the template.") 
         seems_fishy = True 
        if blueprint is not None and seems_fishy: 
         info.append( 
             "  The template was looked up from an endpoint that " 
             'belongs to the blueprint "%s".' % blueprint 
         ) 
         info.append("  Maybe you did not place a template in the right folder?") 
         info.append("  See http://flask.pocoo.org/docs/blueprints/#templates") 
        app.logger.info("\n".join(info)) 
I'm also using SonarQube to review codes. SonarQube warned me about Cognitive Complexity. There is documentation here;
https://www.sonarsource.com/docs/CognitiveComplexity.pdf
For example,
flask/src/flask/debughelpers.py
Line 130 in d4b688b
 if reqctx is not None and reqctx.request.blueprint is not None: 
this part can be changed like that.
if reqctx and reqctx.request.blueprint is not None:
The other thing is;
flask/src/flask/debughelpers.py
Lines 146 to 150 in d4b688b
 if triple is None: 
     detail = "no match" 
 else: 
     detail = "found (%r)" % (triple[1] or "<string>") 
     total_found += 1 
this part can be changed like that.
detail = "no match"
if triple is not None:
   detail = "found (%r)" % (triple[1] or "<string>")
   total_found += 1
I think we can say; if the triple variable is None, don't run this total_found += 1 statement.
The last one is;
flask/src/flask/debughelpers.py
Lines 154 to 159 in d4b688b
 if total_found == 0: 
     info.append("Error: the template could not be found.") 
     seems_fishy = True 
 elif total_found > 1: 
     info.append("Warning: multiple loaders returned a match for the template.") 
     seems_fishy = True 
I think this part can be changed too. Because total_found variable initialized with 0 value.
So, there will be two situations always. for 0 or for > 1.
When total_found is 0 or 1, the seems_fishy will be True. So, we may don't need to reassign this variable for each control flow. Instead of that, we can change this code like below;
info_msg = "Error: the template could not be found."
seems_fishy = True
if total_found > 1:
   info_msg = "Warning: multiple loaders returned a match for the template."