amorey commented on 1 Jun 2016
I'm trying to write a unittest for a custom middleware layer in my app and I'm having difficulty getting the middleware to execute inside a test request context. Here's a simple script that illustrates the problem:
from flask import Flask, url_for

class Middleware(object):
    def __init__(self, app):
        print ' - initialized middleware'
        self.app = app

    def __call__(self, environ, start_response):
        print ' - executed middleware'
        return self.app(environ, start_response)

# create app
app = Flask(__name__)

# add middleware
app.wsgi_app = Middleware(app.wsgi_app)

# add route
@app.route('/')
def index():
    return 'index'

# test GET                                                                      
print '\nTesting GET...'
resp = app.test_client().get('/')
print ' - Response: ' + resp.data

# test context                                                                  
print '\nTesting request context...'
with app.test_request_context('/'):
    app.preprocess_request()
    ret = app.dispatch_request()
    resp = app.make_response(ret)
    resp = app.process_response(resp)
    print ' - Response: ' + resp.data
The middleware executes inside the test client GET request but not inside the test request context. Here's the output:
$ python test.py
 - initialized middleware

Testing GET...
 - executed middleware
 - Response: index

Testing request context...
 - Response: index
Am I doing something wrong or is this the intentional behavior inside a test request context? I'm using Flask 0.11 and Werkzeug 0.11.10.
Thanks for your help!