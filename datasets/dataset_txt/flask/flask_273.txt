ncraike commented on 18 Oct 2018 â€¢
edited
The flask.testing FlaskClient has clean-up which only happens if you use the test client in a with block:
class FlaskClient(Client):

    # ...

    def __exit__(self, exc_type, exc_value, tb):
        self.preserve_context = False

        # on exit we want to clean up earlier.  Normally the request context
        # stays preserved until the next request in the same thread comes
        # in.  See RequestGlobals.push() for the general behavior.
        top = _request_ctx_stack.top
        if top is not None and top.preserved:
            top.pop()
This is described in the API documentation for app.test_client(), but isn't mentioned in the Testing Flask Applications chapter of the documentation, and the "testing skeleton" code doesn't use test_client() in a with block:
@pytest.fixture
def client():
    db_fd, flaskr.app.config['DATABASE'] = tempfile.mkstemp()
    flaskr.app.config['TESTING'] = True
    client = flaskr.app.test_client()

    with flaskr.app.app_context():
        flaskr.init_db()

    yield client
The Testing Flask Applications chapter should demonstrate using the test client in some way which does teardown.
I raise this because I used the skeleton code as basis for a pytest fixture, and I believe I've run into intermittent test failure issues which are caused by request context leaking between tests.
1