killthekitten commented on 9 Jun 2019
Expected Behavior
When using DispatcherMiddleware to combine multiple flask apps, I expect to be able to run the app with the following command:
FLASK_APP=main:app flask run
from flask import Flask
from werkzeug.middleware.dispatcher import DispatcherMiddleware


api = Flask("api")
admin = Flask("admin")
app = DispatcherMiddleware(api, {"/admin": admin})
Actual Behavior
The app object fails the following typecheck:
flask/src/flask/cli.py
Line 198 in d4b688b
 if isinstance(app, Flask): 
127.0.0.1 - - [09/Jun/2019 15:16:30] "GET /admin/ HTTP/1.1" 500 -
Traceback (most recent call last):
  File "/Users/nshebanov/.pyenv/versions/3.7.2/lib/python3.7/site-packages/flask/_compat.py", line 36, in reraise
    raise value
  File "/Users/nshebanov/.pyenv/versions/3.7.2/lib/python3.7/site-packages/flask/cli.py", line 199, in find_app_by_string
    module=module.__name__, app_name=app_name
flask.cli.NoAppException: A valid Flask application was not obtained from "main:app".
Environment
Python version: 3.7.2
Flask version: 1.0.3
Werkzeug version: 0.15.4
Suggestion
Drop the check when FLASK_APP is specified and it is not a factory, or change the check to allow for middlewares (it's hard to imagine such a check though).
Checking for type Flask makes sense within find_best_app and at the moment of call_factory result evaluation within find_app_by_string.