Contributor
DasIch commented on 4 Jul 2014
In order to run a Flask application during development we have the .run() method or with 1.0 flask run. While both are convenient they are a bad idea.
First of all their naming implies that, they are used for running a Flask application, they aren't. They are for running a Flask application during development, a subtle but important difference that causes significant confusion. Apart from that though, running a Flask application is never what you want.
Instead you want to develop, test or deploy an application. While development and testing can imply running a web server, running a web server during development means something different than running a web server during testing. In deployment you don't actually want to run your application at all, you should let a web server do that.
So far we kind of allow people to signal their intent with DEBUG and TESTING, but this needs to be explicitly configured by every user and issues such as #1049, show that this is not without issues.
Therefore what I would like to propose is to create three commands develop, test and deploy. These commands should be extendable through extensions and users. It should be easily possible to use different configurations for these scenarios. Extensions that are only helpful during development like Flask-Debugtoolbar could activate/deactivate themselves based on intent, Flask-Migrate could perform migrations during development and extensions dealing with assets could start background threads monitoring the file system for changes during development. It would further simply clear up a lot of confusion for newcomers.
Running flask with either of these commands should by default set DEVELOPMENT (for backwards compatibilty also DEBUG but let's remove that, the name is awful), TESTING or DEPLOYMENT respectively and issue a signal. Furthermore develop should run the development server as run does now. test and deployment shouldn't actually test or deploy the application as we don't want to enforce a specific test runner or deployment solution. Instead the user should be implement these, if so desired. Nevertheless they would be useful as they establish convention extensions can rely on.
I realize that such a change is probably somewhat controversial (which is why this is not a pull request), it would also distinguish us significantly from Django, which works like Flask does now. Nevertheless I think it would be a great idea and I'm curious what others think of this idea. So, thoughts?