kaldown commented on 20 Jun 2018 â€¢
edited
Expected Behavior
FLASK_APP=src/app.py flask run # doesn't work
should run server as well as
FLASK_ENV=development FLASK_APP=src/app.py flask run  # works
Actual Behavior
FLASK_ENV=production FLASK_APP=src/app.py flask run
 * Serving Flask app "src/app.py"
 * Environment: production
   WARNING: Do not use the development server in a production environment.
   Use a production WSGI server instead.
 * Debug mode: off
--- Logging error ---
Traceback (most recent call last):
  File "/usr/lib/python3.5/logging/__init__.py", line 986, in emit
    msg = self.format(record)
  File "/usr/lib/python3.5/logging/__init__.py", line 836, in format
    return fmt.format(record)
  File "/home/user/projects/phenom/-api/src/loggers.py", line 10, in format
    record.url = request.url
  File "/home/user/.local/share/virtualenvs/-api-GbHiIKAL/lib/python3.5/site-packages/werkzeug/local.py", line 347, in __getattr__
    return getattr(self._get_current_object(), name)
  File "/home/user/.local/share/virtualenvs/-api-GbHiIKAL/lib/python3.5/site-packages/werkzeug/local.py", line 306, in _get_current_object
    return self.__local()
  File "/home/user/.local/share/virtualenvs/-api-GbHiIKAL/lib/python3.5/site-packages/flask/globals.py", line 37, in _lookup_req_object
    raise RuntimeError(_request_ctx_err_msg)
RuntimeError: Working outside of request context.

This typically means that you attempted to use functionality that needed
an active HTTP request.  Consult the documentation on testing for
information about how to avoid this problem.
Call stack:
  File "/home/user/.local/share/virtualenvs/-api-GbHiIKAL/bin/flask", line 11, in <module>
    sys.exit(main())
  File "/home/user/.local/share/virtualenvs/-api-GbHiIKAL/lib/python3.5/site-packages/flask/cli.py", line 894, in main
    cli.main(args=args, prog_name=name)
  File "/home/user/.local/share/virtualenvs/-api-GbHiIKAL/lib/python3.5/site-packages/flask/cli.py", line 557, in main
    return super(FlaskGroup, self).main(*args, **kwargs)
  File "/home/user/.local/share/virtualenvs/-api-GbHiIKAL/lib/python3.5/site-packages/click/core.py", line 697, in main
    rv = self.invoke(ctx)
  File "/home/user/.local/share/virtualenvs/-api-GbHiIKAL/lib/python3.5/site-packages/click/core.py", line 1066, in invoke
    return _process_result(sub_ctx.command.invoke(sub_ctx))
  File "/home/user/.local/share/virtualenvs/-api-GbHiIKAL/lib/python3.5/site-packages/click/core.py", line 895, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File "/home/user/.local/share/virtualenvs/-api-GbHiIKAL/lib/python3.5/site-packages/click/core.py", line 535, in invoke
    return callback(*args, **kwargs)
  File "/home/user/.local/share/virtualenvs/-api-GbHiIKAL/lib/python3.5/site-packages/click/decorators.py", line 64, in new_func
    return ctx.invoke(f, obj, *args[1:], **kwargs)
  File "/home/user/.local/share/virtualenvs/-api-GbHiIKAL/lib/python3.5/site-packages/click/core.py", line 535, in invoke
    return callback(*args, **kwargs)
  File "/home/user/.local/share/virtualenvs/-api-GbHiIKAL/lib/python3.5/site-packages/flask/cli.py", line 771, in run_command
    threaded=with_threads, ssl_context=cert)
  File "/home/user/.local/share/virtualenvs/-api-GbHiIKAL/lib/python3.5/site-packages/werkzeug/serving.py", line 814, in run_simple
    inner()
  File "/home/user/.local/share/virtualenvs/-api-GbHiIKAL/lib/python3.5/site-packages/werkzeug/serving.py", line 776, in inner
    log_startup(srv.socket)
  File "/home/user/.local/share/virtualenvs/-api-GbHiIKAL/lib/python3.5/site-packages/werkzeug/serving.py", line 764, in log_startup
    display_hostname, port, quit_msg)
  File "/home/user/.local/share/virtualenvs/-api-GbHiIKAL/lib/python3.5/site-packages/werkzeug/_internal.py", line 88, in _log
I think that the problem is in:
# src/loggers.py

import logging
from logging.config import dictConfig

from flask import request

class RequestFormatter(logging.Formatter):
    def format(self, record):
        record.url = request.url
        record.remote_addr = request.remote_addr
        return super().format(record)


def init_logger():
    dictConfig({
        'version': 1,
        'formatters': {
            'default': {
                '()': 'src.loggers.RequestFormatter',
                'format': '[%(asctime)s] [%(process)d] %(remote_addr)s requested %(url)s\n'
                          '%(levelname)s in %(module)s: %(message)s'
            }
        },
        'handlers': {
            'views': {
                'class': 'logging.StreamHandler',
                'formatter': 'default'
            },
        },
        'root': {
            'level': 'INFO',
            'handlers': ['views']
        },
    })
init_logger()
called before app = Flask()
python3.5
Flask 1.0.2
1