kevinschaich commented on 5 Aug 2015
I'm trying to implement a decorator function in Flask that does two things: register a page route and add some things to my DB on definition time, and then on runtime, when a request is made to a page it processes whether a user is authenticated.
I know that I can do these in two separate decorator functions, but this won't work because I eventually need to process the same set of information (app, rule, access groups, etc.) at both definition time and runtime.
The code below is what I have been messing with, but I have not been able to get it to work. It compiles and you are able to see "Definition time" in the console and "index" in the browser, but "Runtime" never gets printed. Can anyone suggest what I may be doing wrong?
from flask import Flask
from functools import wraps

app = Flask(__name__)


def register(app, rule, **options):
    def wrapper(f):
        print "Definition time"
        endpoint = options.pop('endpoint', f.__name__)
        access_groups = options.pop('access_groups', None)
        methods = options.get('methods', ['GET'])

        app.add_url_rule(rule, endpoint, f, **options)

        @wraps(f)
        def wrapped(*args, **kwargs):
            print "Runtime"
            return f(*args, **kwargs)
        return wrapped

    return wrapper


@register(app, '/', methods=['GET', 'POST'], access_groups=['all-access'])
def index():
    return "index"

if __name__ == '__main__':
    app.run(debug=True)