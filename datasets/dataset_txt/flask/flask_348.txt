jwg4 commented on 6 Jun 2018
Expected Behavior
We have a Flask app defined in a file which sits inside a folder, say app/run.py:
from flask import Flask

from foo import bar

app = Flask(__name__)

app.run()
The file imports from the top-level directory, in this case foo.py
bar = "SOMETHING TO IMPORT"
The empty file __init__.py exists in the directory app.
Using the default environment (production), we can run the Flask app by invoking the module from the top-level directory, using -m
python -m app.run
The foo module is imported correctly and the app runs.
 * Serving Flask app "run" (lazy loading)
 * Environment: production
   WARNING: Do not use the development server in a production environment.
   Use a production WSGI server instead.
 * Debug mode: off
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
Actual Behavior
If we try to use the development environment, setting the FLASK_ENV variable, it fails.
FLASK_ENV=development python -m app.run
 * Serving Flask app "run" (lazy loading)
 * Environment: development
 * Debug mode: on
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
 * Restarting with stat
Traceback (most recent call last):
  File "/home/jack/z/flask_dev/app/run.py", line 3, in <module>
    from foo import bar
ImportError: No module named foo
Environment
Python version:
Python 2.7.12 (default, Nov 20 2017, 18:23:56)
[GCC 5.4.0 20160609] on linux2
package versions:
click==6.7
Flask==1.0.2
itsdangerous==0.24
Jinja2==2.10
MarkupSafe==1.0
Werkzeug==0.14.1