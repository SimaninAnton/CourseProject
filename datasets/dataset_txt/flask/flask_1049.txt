manuelbua commented on 13 Apr 2015
I need to be able to handle lazy strings in the Jinja2 |tojson filter and was thinking about some way to do it: as of now, the _iterencode_dict raises a TypeError exception, as expected:
Traceback (most recent call last):
  File "/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/app.py", line 1836, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/app.py", line 1820, in wsgi_app
    response = self.make_response(self.handle_exception(e))
  File "/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/app.py", line 1403, in handle_exception
    reraise(exc_type, exc_value, tb)
  File "/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/app.py", line 1817, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/app.py", line 1477, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/app.py", line 1381, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File "/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/app.py", line 1475, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/app.py", line 1461, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File "/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask_admin/base.py", line 68, in inner
    return self._run_view(f, *args, **kwargs)
  File "/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask_admin/base.py", line 354, in _run_view
    return fn(self, *args, **kwargs)
  File "/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask_admin/model/base.py", line 1466, in index_view
    return_url=self._get_list_url(view_args),
  File "/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask_admin/base.py", line 294, in render
    return render_template(template, **kwargs)
  File "/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/templating.py", line 128, in render_template
    context, ctx.app)
  File "/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/templating.py", line 110, in _render
    rv = template.render(context)
  File "/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/jinja2/environment.py", line 969, in render
    return self.environment.handle_exception(exc_info, True)
  File "/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/jinja2/environment.py", line 742, in handle_exception
    reraise(exc_type, exc_value, tb)
  File "/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask_admin/templates/bootstrap3/admin/model/list.html", line 5, in top-level template code
    {% import 'admin/actions.html' as actionlib with context %}
  File "/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask_admin/templates/bootstrap3/admin/master.html", line 1, in top-level template code
    {% extends admin_base_template %}
  File "/home/manuel/dev/www/python/watest/webfu-app/webfu/modules/backend/templates/admin/custom-layout.html", line 3, in top-level template code
    {% import 'admin/static.html' as admin_static with context %}
  File "/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask_admin/templates/bootstrap3/admin/base.html", line 80, in top-level template code
    {% block tail %}
  File "/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask_admin/templates/bootstrap3/admin/model/list.html", line 171, in block "tail"
    {{ filter_groups|tojson|safe }},
  File "/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/json.py", line 243, in tojson_filter
    return Markup(htmlsafe_dumps(obj, **kwargs))
  File "/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/json.py", line 186, in htmlsafe_dumps
    rv = dumps(obj, **kwargs) \
  File "/home/manuel/.virtualenvs/webapp/lib/python2.7/site-packages/flask/json.py", line 126, in dumps
    rv = _json.dumps(obj, **kwargs)
  File "/usr/lib/python2.7/json/__init__.py", line 250, in dumps
    sort_keys=sort_keys, **kw).encode(obj)
  File "/usr/lib/python2.7/json/encoder.py", line 209, in encode
    chunks = list(chunks)
  File "/usr/lib/python2.7/json/encoder.py", line 434, in _iterencode
    for chunk in _iterencode_dict(o, _current_indent_level):
  File "/usr/lib/python2.7/json/encoder.py", line 382, in _iterencode_dict
    raise TypeError("key " + repr(key) + " is not a string")
TypeError: key lu'Nome categoria' is not a string
I can't really use the gettext since i need the lazy_gettext version, and was asking for advice and ideas on how to tackle this problem: i tried subclassing the flask.json.JSONEncoder class as per this example and i'm handling lazy strings in the default method there, but it looks like it doesn't get called at all.
There is the iterencode method i could try to subclass, but it probably won't be a clean way to do it?
Thanks for any input you can give.