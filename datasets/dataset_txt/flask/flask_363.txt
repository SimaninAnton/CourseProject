manoadamro commented on 17 May 2018 â€¢
edited
Using the example in the docs:
import flask
import logging.config

logging.config.dictConfig({
    'version': 1,
    'formatters': {'default': {
        'format': '[%(asctime)s] %(levelname)s in %(module)s: %(message)s',
    }},
    'handlers': {'wsgi': {
        'class': 'logging.StreamHandler',
        'stream': 'ext://flask.logging.wsgi_errors_stream',
        'formatter': 'default'
    }},
    'root': {
        'level': 'INFO',
        'handlers': ['wsgi']
    }
})

app = flask.Flask(__name__)
produces the following error:
ValueError: Unable to configure handler 'wsgi': Cannot resolve 'flask.logging.wsgi_errors_stream': No module named 'flask.logging.wsgi_errors_stream'; 'flask.logging' is not a package
changing ext://flask.logging.wsgi_errors_stream to stdout stops the error, but log level is still ignored.
Using the following:
import flask
import logging.config

logging.config.dictConfig({
    'version': 1,
    'formatters': {
        'default': {
            'format': '[%(asctime)s] %(levelname)s in %(module)s: %(message)s',
        }
    },
    'handlers': {
        'wsgi': {
            'class': 'logging.StreamHandler',
            'stream': 'stdout',
            'formatter': 'default',
        }
    },
    'root': {
        'level': 'DEBUG',
        'handlers': ['wsgi']
    }
})


app = flask.Flask(__name__)

app.logger.debug('I WORK')
app.logger.info('I WORK')
app.logger.warning('I WORK')
app.logger.error('I WORK')
app.logger.critical('I WORK')
(Note the log level set to DEBUG)
Actual Output:
[2018-05-17 11:35:20,069] ERROR in __init__: I WORK
[2018-05-17 11:35:20,069] CRITICAL in __init__: I WORK
Expected output:
[2018-05-17 11:35:20,069] DEBUG in __init__: I WORK
[2018-05-17 11:35:20,069] INFO in __init__: I WORK
[2018-05-17 11:35:20,069] WARNING in __init__: I WORK
[2018-05-17 11:35:20,069] ERROR in __init__: I WORK
[2018-05-17 11:35:20,069] CRITICAL in __init__: I WORK
I have also tried both setting the level in the handler and formatter and calling app.logger.setLevel('DEBUG')
neither made any difference.
TL;DR:
logging example in docs errors.
unable to set log level
Environment
Python version: 3.6.4
Flask version: 1.0.2
Werkzeug version: 0.14.1