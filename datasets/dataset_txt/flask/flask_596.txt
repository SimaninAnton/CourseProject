Contributor
tony commented on 12 Jun 2017 â€¢
edited
There is an issue I've been having for a few years regarding Flask and I failed to articulate it correctly. I find from_envvar's behavior unintuitive. Also, I haven't been able to find prior discussions mentioning it. Probably because of Chesterton's fence, or they feel they'd be told to work around it. Which only takes one line:
app.config.from_object(os.environ["app.config.dev"]), see Google results
The first google result I see is people perplexed by from_envvar. Why? I'm not sure. For some reason, in recent years, Django (and frankly, Flask also) got devs accustomed to importing modules via strings.
Current behavior:
from_envvar forwards to from_pyfile, which strictly requires an absolute/relative file path (i.e. not a module string).
Expected behavior:
from_envvar should wrap from_object
Why:
from_envvar only works with files
File from from_envvar are interpreted as modules anyway
from_envvar (from_pyfile) cannot point to classes
from_object supports string module/class paths (e.g. app.config.dev), which works with environmental variables
from_objectsupports both classes and modules. Especially important since the official documentation gives examples of using classes.
It's more customary for users invoking configuration by files to do so via CLI arguments.
A local, dev, staging, or production deployment in practice would opt to use environmental variables to point to a python object (module/class) via string.
For instance: Let's say we're deploying to production with a uwsgi config. Since python production deployment is highly driven by packages, we've likely already done the work of figuring out our python environmental / package locations. It'd be more intuitive to point to a python object by string, rather than by file path.
Alternative: from_envvar should additionally wrap from_object for non-file paths.
Python version: 3.6
Flask version: 1.12
Werkzeug version: 0.12.2