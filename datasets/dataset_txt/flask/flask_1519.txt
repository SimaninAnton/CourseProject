NicolasT commented on 15 May 2012
In some application I was writing I created a decorator to allow for streaming responses:
def stream(*args, **kwargs):
    def wrapper(f):
        @functools.wraps(f)
        def wrapped(*a, **kw):
            return flask.Response(f(*a, **kw), *args, **kwargs)

        return wrapped

    return wrapper
and another one to JSON'ify the response:
def jsonify(f):
    @stream(
        content_type='application/json',
        headers={
            'Cache-Control': 'no-cache',
        })
    @functools.wraps(f)
    def wrapped(*args, **kwargs):
        res = f(*args, **kwargs)

        for chunk in json.JSONEncoder().iterencode(res):
            yield chunk

    return wrapped
Using these on handlers which require access to a context fails though:
RuntimeError: working outside of request context
Full example with some ok and not-ok handers is available at https://gist.github.com/4a443e8214c2c6eea1a5