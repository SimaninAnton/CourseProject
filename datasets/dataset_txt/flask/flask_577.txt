mtourne commented on 6 Jul 2017
I have defined a custom json encoder that supports encoding a bson ObjectId() into a string (see below for encoder code).
This works great until I attempt to serialize a dictionary who's key is an ObjectId(). The custom encoder seems to only work for dictionary values.
To reproduce the bug, see the /test_json2 route in the example below :
import bson
@app.route("/test_json", methods=['GET'])
def test_json():
    test = {
        'a': bson.objectid.ObjectId("595d5f4c4588b817c4030277")
    }
    return flask.jsonify(test=test)

@app.route("/test_json2", methods=['GET'])
def test_json2():
    test = {
        bson.objectid.ObjectId("595d5f4c4588b817c4030277"): 'a'
    }
    return flask.jsonify(test=test)
Custom json encoder code :
import bson
from flask.json import JSONEncoder

class CustomJSONEncoder(JSONEncoder):
    '''custom json encoder that supports mongo's ObjectID()
out of the box
    '''
    def default(self, obj):
        if isinstance(obj, bson.objectid.ObjectId):
            return str(obj)
        return JSONEncoder.default(self, obj)

app.json_encoder = CustomJSONEncoder
Using
Werkzeug==0.12.2
Flask==0.12.2