entd commented on 28 Jan 2015
app = Flask(__name__)

@app.route('/')
def form():
    return render_template('form_submit.html')
@app.route('/hello/', methods=('POST'))
def hello():
    name=request.form['yourname']
    email=request.form['youremail']
    return render_template('form_action.html', name=name, email=email)

# Run the app :)
if __name__ == '__main__':
  app.run( 
        host="0.0.0.0",
        port=int("7777")
  )
While tupple is iterable for flask accept this without any error warning or problem: even more: ("GET", "POST") works as well as ["GET", "POST"].
However with single element string there is problem:
import requests
r = requests.post("http://127.0.0.1:7777/hello")
print("Status code: {}".format(str(r.status_code)))
print("Headers: {}".format(r.headers))
Output:
Status code: 405
Headers:  {'Allow': 'O, OPTIONS, T, P, S', 'Date': 'Wed, 28 Jan 2015 07:38:05 GMT', 'Content-Type': 'text/html', 'Server': 'Werkzeug/0.9.6 Python/3.4.2', 'Content-Length': '178'}
Seems that flask happily parses (("POST")) letter by letter. Posting with curl using method "P" is valid thing in flask.
While it is stupid use case, I doubt that Flask should happily churn String letter by letter. Also I think that after possible fix it would be easy to unit test I think even for custom method definition this is not a valid or good behaviour.