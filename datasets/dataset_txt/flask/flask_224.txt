ColdHeat commented on 16 Dec 2018
I have an application which can be configured to run under a subdomain/domain or a subdirectory. This is controlled by setting APPLICATION_ROOT to a value other than /.
Some of my decorators use request.path to determine where to redirect the user after logging in. However, when running under a subdirectory, request.path does not include request.script_root and the user could get redirected somewhere they shouldn't. Using request.url creates full URLs when we should only need relative ones.
Based on docs it is intentional that request.path doesn't include request.script_root.
Ultimately because my application has a plugin interface and I don't want to deviate too much from Flask documentation, what is the optimal way to get this behavior to be consistent between deployment strategies?
Using url_for() doesn't seem optimal because certain target endpoints could require arguments to be passed in which might not work without parsing request.path anyway.
Combining request.script_root and request.path in every usage seems like an easy way to introduce bugs
Creating a BaseRequest subclass seems like the smartest solution but should there be a new request property (e.g. request.script_path)? Or should I replace the existing path and full_path?
The PR I have in preparation to fix this issue uses a BaseRequest subclass but I don't feel great about it:
https://github.com/CTFd/CTFd/pull/802/files#diff-1dec134679d6639679743763954061d5R28