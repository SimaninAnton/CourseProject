ekor15 commented on 7 May 2019 â€¢
edited
I want to set up a handler for all URLs that will handle the OPTIONS preflight requests
Following the "catch-all" example (@app.route("/path:path", methods=['OPTIONS']))
I found that if the server gets a route that has a handler with a different method neither of the handlers are called
Expected Behavior
The OPTIONS request should have been routed to the "wildcard" OPTIONS handler
from unittest import TestCase
from flask import Flask
from hamcrest import assert_that, equal_to
class TestSitePreferencesService(TestCase):
    def test(self):
        app = Flask(__name__)

        @app.route("/<path:path>", methods=['OPTIONS'])
        def catch_all(path):
            return "catch_all"

        @app.route("/specific", methods=['GET'])
        def specific():
            return "specific"

        client = app.test_client()
        result = client.options('/some/url')
        assert_that(result.data.decode('utf-8') , equal_to('catch_all'))

        result1 = client.get('some/url')
        assert_that(result1.status_code , equal_to(405)) # this identifies the global handler but the method is wrong this is expected

        result2 = client.options('/specific')
        # looks like this is not going to ether of the handlers
        assert_that(result2.data.decode('utf-8'),equal_to('catch_all')) # fails
Actual Behavior
The request was not routed to the correct handler OPTIONS handler
Environment
Python version:3.7
Flask version:1.0.2
Werkzeug version:0.15.2