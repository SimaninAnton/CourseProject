dsoprea commented on 13 Jul 2014
I'm using Flask with Gunicorn using the "gevent" worker. The request completes, the client receives the response, and Gunicorn spits out "Error handling request", and then waits for a new request.
This is the stacktrace:
    2014-07-12 18:01:53 [38427] [INFO] Booting worker with pid: 38427
    2014-07-12 18:01:55 [38427] [DEBUG] POST /job/dev/job1
    2014-07-12 18:01:55 [38427] [ERROR] Error handling request
    Traceback (most recent call last):
      File "/Users/dustin/development/python/mapreduce/lib/python2.7/site-packages/gunicorn/workers/async.py", line 116, in handle_request
        raise StopIteration()
    StopIteration
(I should note that this is coming out of the "async" worker module, and not the intended "gevent" one).
This is the relevant portion of that module:
        except Exception:
            if resp and resp.headers_sent:
                # If the requests have already been sent, we should close the
                # connection to indicate the error.
                self.log.exception("Error handling request")
                try:
                    sock.shutdown(socket.SHUT_RDWR)
                    sock.close()
                except socket.error:
                    pass
                raise StopIteration()
            raise
        finally:
I'm a long-time user of Gunicorn, but haven't used Flask very often. I'm guessing that Flask is doing something to have the headers sent back early.