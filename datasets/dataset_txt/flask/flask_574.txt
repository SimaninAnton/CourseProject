laranzu commented on 7 Jul 2017 â€¢
edited by davidism
Environment
Python version: 3.5
Flask version: 0.12
Notes and suggestions from working through the 0.12 Tutorial:
Step 1
So ... do I run this schema.sql file? Will Flask run it for me?
Step 2
That "import ... g ..."" looks like a typo. I left it out until I
read step 4.
"The SECRET_KEY is needed..."
What do real systems do? No need to go into details, just mention
something. SHA1? SSH keys?
Step 3
"Flask is now shipped with built-in support for Click."
That's nice I guess, but what does it have to do with anything else
in this step?
"A useful pattern to manage a Flask application..."
Why? Will it make deployment in my production environment easier? To
other people? What happens if I don't?
It would be better if the text said which directory to use
before the command
Step 4
"def get_db():"
Looks like an unsafe singleton. Does Flask use threads or processes?
"Hint: Where do I put this code?"
I'd been using Flask for 30 minutes, I had no idea where to put the
code. This should be at the start.
Step 5
(flask) /home/hugh/Flask/Tutorial/flaskr/$ flask initdb
Usage: flask [OPTIONS] COMMAND [ARGS]...
Error: No such command "initdb".
Hmm, function has to have same name as in decorator?
No
Maybe the command is really flask --initdb?
No
Have I screwed up the environment var?
$ flask run
That seems to work.
(And yes I worked out shortly afterwards that this is an illusion, trying
to load a page will throw a "does not appear to exist" exception.)
$ cd flaskr
$ flask initdb
Aha!
General note: having two identically named dirs is confusing, need
to be clearer about where you should be at each step
Useful exercise that could be added:
If you want the second database attribute, the blog entry HTML, to
be named "body" instead of "text", how many files do you need to edit?
8