satiani commented on 8 Oct 2013
To illustrate the issue, see this code snippet:
from flask import Flask

app = Flask(__name__)

@app.teardown_request
def teardown(exc = None):
    if exc is not None:
        print "An exception has occured!"

try:
    raise Exception('dummy')
except:
    pass

# uncomment this to remove the issue
# import sys; sys.exc_clear()

with app.test_request_context():
    print "Nothing happening here"

# Output:
# Nothing happening here
# An exception has occured! <== this is unexpected!
This happens because flask relies on sys.exc_info() to figure out if some exception happened in the request. However, sys.exc_info() gets populated whenever an except block has been executed. This could lead to weird behavior in unit tests, perhaps the enter method on RequestContext should contain a sys.exc_clear()?