chuan137 commented on 21 Apr 2016
Hi,
I wonder where I should keep the persistent db connection throughout the application, not the request/response context. I read the doc and examples, it looks to me, the persistent connections are made for the request/response life cycle.
People recommend to use a connection pool. Then where should I keep the pool? I use cassandra database. The cluster session does a lot heavy lifting, and automatically manage pool connections. It is nice that user need not worry about the pool management, but it is also expensive, and I should keep it alive on the server throughout the life time of the thread.
For a single thread flask server, it is easy, I just initialize the connection, and put it in the global namespace. But somehow it does not work when I use gunicorn to pre-fork the workers. The session does not respond at all.
So the question comes back to whether flask can manage a "long live context" to store the object? My work around is to put the db setups in a function decorated by "before_first_request". It works pretty well, but I consider as a work around, instead of official solutions.
Regards,
Chuan