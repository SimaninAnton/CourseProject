codl commented on 31 Aug 2017
Expected Behavior
When given a tz-aware datetime object, I would expect jsonify to either raise an exception (because there is no native representation of a datetime in json) or at least convert it to a string format while keeping the timezone intact
import flask
from datetime import datetime, timezone, timedelta

app = flask.Flask(__name__)

@app.route('/')
def index():
    tz = timezone(timedelta(hours=2))
    t = datetime(2017, 1, 1, 12, 0, 0, tzinfo=tz)
    return flask.jsonify(t)

with app.app_context():
    resp = app.test_client().get('/')
    print(resp.data)
Actual Behavior
The datetime object is converted to a RFC 1123 date string, ignoring the timezone entirely and assuming GMT
b'"Sun, 01 Jan 2017 12:00:00 GMT"\n'
Environment
Python version: 3.6
Flask version: 0.12.2
Werkzeug version: 0.12.2