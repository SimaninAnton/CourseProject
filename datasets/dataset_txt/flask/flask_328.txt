DanCardin commented on 11 Jul 2018
Expected Behavior
Install dotenv
** (In my case, dotenv is installed for reasons other than flask)
put a .env file in a folder somewhere above the python package
** (In my case, a .env file is being used with docker-compose.yml in a containing folder)
create a minimal flask app and run flask (it should just work)
Actual Behavior
Your app wont work if run, and flask prints the following traceback.
Traceback (most recent call last):
  File "./lib/python3.6/site-packages/flask/cli.py", line 235, in locate_app
    __import__(module_name)
ModuleNotFoundError: No module named 'manage'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./lib/python3.6/site-packages/flask/cli.py", line 529, in list_commands
    rv.update(info.load_app().cli.list_commands(ctx))
  File "./lib/python3.6/site-packages/flask/cli.py", line 372, in load_app
    app = locate_app(self, import_name, name)
  File "./lib/python3.6/site-packages/flask/cli.py", line 246, in locate_app
    'Could not import "{name}".'.format(name=module_name)
flask.cli.NoAppException: Could not import "manage".
Environment
Flask version: 1.0
If I create a .env file at the top level of my python package/distribution (e.g. next to setup.py), the issue is solved.
To me, it appears that the problem is in flask/cli.py, line 617 on master.
    if new_dir and os.getcwd() != new_dir:
        os.chdir(new_dir)
new_dir is the result of dotenv.find_dotenv which looks upwards in the folder hierarchy. The resultant directory is then outside the context of the project, and the os.chdir causes any attempted imports of local code to fail.
I would have submitted a PR removing that os.chdir, but I wasn't sure it would have been accepted. I assume its there to allow someone to run flask from inside a subfolder of their application, but the location of the .env file isn't necessarily indicative of that.