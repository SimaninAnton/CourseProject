rafalp commented on 3 Mar 2018
Expected behavior
I have custom bulk actions in my API that I'm writing serializers for. Those are "normal" serializers that define ListField(IntegerField) field that takes list of ID's, read those id's from JSON (eg. {"threads": [1, 2, 3, 4]}), and then turn those id's into list of models. During that conversion I'm also creating list of items that failed to load, creating dict for each of them that consists of item's id, status code and finally error message on detail. Eventually, that list looks like this:
[
  {
    'id': 1,
    'status': 404,
    'detail': "Thread doesn't exist or you don't have permission to see it."
  },
  {
    'id': 2,
    'status': 403,
    'detail': "You don't have permission to merge threads in this category."
  }
]
Next thing I'm doing is turning this list of failed to load items into reponse 400 via raise ValidationError({'bulk': invalid_errors})
Actual behavior
ValidationError() implements machinery internally that walks its detail argument and casts everything that's not dict or list to string, so what reaches the client is this:
[
  {
    "id": "1",
    "status": "404",
    "detail": "Thread doesn't exist or you don't have permission to see it."
  },
  {
    "id": "2",
    "status": "403",
    "detail": "You don't have permission to merge threads in this category."
  }
]
I've thought that I may be able to hack around it by writing custom exception inheriting from ValidationError, but it seems that along the way RestFramework repacks ValidationError's into single ValidationError, that again casts ints to strings.
I'm wondering if this casting ints to strings is part of some contract or stable API, or if DRF could exclude them from casting for situations like mine?
Thanks!