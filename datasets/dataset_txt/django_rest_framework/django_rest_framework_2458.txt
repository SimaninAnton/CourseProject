meric commented on 29 Jul 2014
Found a minor problem.
According to the documentation, http://www.django-rest-framework.org/api-guide/requests#method:
       request.method returns the uppercased string representation of the request's HTTP method.
From https://github.com/tomchristie/django-rest-framework/blob/master/rest_framework/request.py#L283:
        # Allow X-HTTP-METHOD-OVERRIDE header
        self._method = self.META.get('HTTP_X_HTTP_METHOD_OVERRIDE',
                                     self._method)
That means if the X-Http-Method-Override header was set to "Patch" instead of "PATCH", the request.method will no longer be fully uppercased, causing problems when comparing method names in the views code checking for permissions, e.g. if request.method == 'PATCH'.
So the documentation and the code aren't fully congruent. Changing the line to:
        self._method = self.META.get('HTTP_X_HTTP_METHOD_OVERRIDE',
                                     self._method).upper()
would fix it, but it would prevent using custom case-sensitive method names. I'm not sure that's a sensible idea anyway but it's a limitation. Alternatively, the documentation could be corrected to:
        request.method returns the uppercased string representation of the request's HTTP method, except when the method is overridden using the header 'X-Http-Method-Override'.
I encountered this problem since the javascript REST client (restangular) I was using was assigning lower cased method names to the X-Http-Method-Override header.
Love Django REST framework, keep up the good work!