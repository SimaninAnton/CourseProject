Contributor
mcastle commented on 25 Jul 2015
I have standard model permissions available for a Patient model (add_patient, change_patient, delete_patient). I'm also using django-guardian for object-level permissions. However, it seems the perms_map of both these classes is not recognizing any of the permissions I've assigned using django-guardian's, as listed in the guardian_userobjectpermission table. For example, I have a doctor with django-guardian object-level permissions to add, change, and delete a given patient, but only add_patient is being allowed (the doctor has model-level permissions for Patient, as set in the standard Django table auth_user_user_permissions).
Here is the Patient's viewset
class PatientViewSet(viewsets.ModelViewSet):
    queryset = Patient.objects.all()
    serializer_class = PatientSerializer
    permission_classes = (permissions.DjangoObjectPermissions,)
I've used ipdb.set_trace() from within DjangoObjectPermissions to debug and request.user.has_perm('portal.change_patient', obj) evaluates to True, yet the browsable API does not allow me to change the patient when logged in as that user. However, when logged in as a superuser, I can change this patient.
self.get_required_object_permissions(request.method, model_cls) returns [], as expected for a GET request.
And for a PATCH request, the following returns True, yet I'm unable to make a PATCH with the given user:
self.get_required_object_permissions('PATCH', model_cls)
user.has_perms(perms, obj)