Contributor
cancan101 commented on 26 May 2015
I have the following:
class Bar(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid4)

class Baz(models.Model):
    subject = models.ForeignKey(Bar, null=False, blank=False)

class BazSerializer(serializers.ModelSerializer):
    class Meta:
        model = Baz
Calling this: BazSerializer(data={'subject':{}}).is_valid(True), leads to an uncaught error:
  File "/Users/alex/.virtualenvs/TestPG/lib/python2.7/site-packages/rest_framework/serializers.py", line 187, in is_valid
    self._validated_data = self.run_validation(self.initial_data)
  File "/Users/alex/.virtualenvs/TestPG/lib/python2.7/site-packages/rest_framework/serializers.py", line 367, in run_validation
    value = self.to_internal_value(data)
  File "/Users/alex/.virtualenvs/TestPG/lib/python2.7/site-packages/rest_framework/serializers.py", line 400, in to_internal_value
    validated_value = field.run_validation(primitive_value)
  File "/Users/alex/.virtualenvs/TestPG/lib/python2.7/site-packages/rest_framework/relations.py", line 81, in run_validation
    return super(RelatedField, self).run_validation(data)
  File "/Users/alex/.virtualenvs/TestPG/lib/python2.7/site-packages/rest_framework/fields.py", line 376, in run_validation
    value = self.to_internal_value(data)
  File "/Users/alex/.virtualenvs/TestPG/lib/python2.7/site-packages/rest_framework/relations.py", line 142, in to_internal_value
    return self.get_queryset().get(pk=data)
  File "/Users/alex/.virtualenvs/TestPG/lib/python2.7/site-packages/django/db/models/manager.py", line 127, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/alex/.virtualenvs/TestPG/lib/python2.7/site-packages/django/db/models/query.py", line 328, in get
    num = len(clone)
  File "/Users/alex/.virtualenvs/TestPG/lib/python2.7/site-packages/django/db/models/query.py", line 144, in __len__
    self._fetch_all()
  File "/Users/alex/.virtualenvs/TestPG/lib/python2.7/site-packages/django/db/models/query.py", line 965, in _fetch_all
    self._result_cache = list(self.iterator())
  File "/Users/alex/.virtualenvs/TestPG/lib/python2.7/site-packages/django/db/models/query.py", line 238, in iterator
    results = compiler.execute_sql()
  File "/Users/alex/.virtualenvs/TestPG/lib/python2.7/site-packages/django/db/models/sql/compiler.py", line 840, in execute_sql
    cursor.execute(sql, params)
  File "/Users/alex/.virtualenvs/TestPG/lib/python2.7/site-packages/django/db/backends/utils.py", line 79, in execute
    return super(CursorDebugWrapper, self).execute(sql, params)
  File "/Users/alex/.virtualenvs/TestPG/lib/python2.7/site-packages/django/db/backends/utils.py", line 64, in execute
    return self.cursor.execute(sql, params)
  File "/Users/alex/.virtualenvs/TestPG/lib/python2.7/site-packages/django/db/utils.py", line 97, in __exit__
    six.reraise(dj_exc_type, dj_exc_value, traceback)
  File "/Users/alex/.virtualenvs/TestPG/lib/python2.7/site-packages/django/db/backends/utils.py", line 64, in execute
    return self.cursor.execute(sql, params)
  File "/Users/alex/.virtualenvs/TestPG/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py", line 318, in execute
    return Database.Cursor.execute(self, query, params)
InterfaceError: Error binding parameter 0 - probably unsupported type.
if instead of using a UUID pk I use the regular int PK then call to is_valid correctly results in:
  File "/Users/alex/.virtualenvs/TestPG/lib/python2.7/site-packages/rest_framework/serializers.py", line 195, in is_valid
    raise ValidationError(self._errors)
ValidationError: {'subject': [u'Incorrect type. Expected pk value, received dict.']}