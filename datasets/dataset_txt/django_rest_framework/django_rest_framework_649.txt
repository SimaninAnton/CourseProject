pardo commented on 15 Sep 2017
If I call the api using Content-Type:application/x-www-form-urlencode
it will make the rest framework internals to handle data as a QueryDict
and if a call the api using Content-Type:application/json
rest framework internals will handle data as an standard python {}
This behavior makes ListSerializer to return empty when the content type is json and an empty python list if it is url encoded data
You can easily reproduce running this code
from django.http.request import QueryDict

from rest_framework import serializers
from rest_framework.serializers import ListSerializer
from rest_framework.fields import empty

# look at rest_framework.serializers.Serializer#to_internal_value

class EmailSerializer(serializers.Serializer):
    email = serializers.EmailField()
    content = serializers.CharField(max_length=200)
    created = serializers.DateTimeField()

email_serializer = EmailSerializer()
email_serializer.field_name = "email"
assert email_serializer.get_value({}) is empty
assert email_serializer.get_value(QueryDict()) is empty

email_list_serializer = ListSerializer(child=EmailSerializer())
email_list_serializer.field_name = "email_list"
assert email_list_serializer.get_value({}) is empty
# this will fail because is returning an empty list instead of empty
assert email_list_serializer.get_value(QueryDict()) is empty