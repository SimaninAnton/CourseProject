Tankske commented on 12 Jan 2019
Would be nice to have
either best practices documentation available about where to put business logic,
or to provide objects that could be used throughout the framework.
The former would mean that DRF documentation contains a page explaining where business logic would fit best:
A service layer could be an option to provide general tasks such as email-confirmation, extra validation such as approvals from other users etc.
A proxy model could be another option, this to implement domain driven design. If I would create an application enabling conversations, I could store the separate messages containing links with each other. I would then create a domain model conversations which builds further upon messages to provide a conversation thread.
Querysets/managers are an option if your logic concerns consistency for certain updates of your models.
Giving guidance/best practices/references for specific business logic needs considering the DRF architecture design would be helpful for many coders I believe..
For the latter, I refer to an existing GitHub project: https://github.com/mixxorz/django-service-objects
My sources:
https://stackoverflow.com/questions/12578908/separation-of-business-logic-and-data-access-in-django
https://sunscrapers.com/blog/where-to-put-business-logic-django/