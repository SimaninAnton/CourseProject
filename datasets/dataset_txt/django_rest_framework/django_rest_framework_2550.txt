pySilver commented on 30 Apr 2014
I believe there is a bug in rest_framework.serializers.ModelSerializer#save_object method.
Exactly here:
if getattr(obj, '_m2m_data', None):
    for accessor_name, object_list in obj._m2m_data.items():
        setattr(obj, accessor_name, object_list)
    del(obj._m2m_data)
This code behaves like it should while creating object with m2m field â€“ setattr adds value to a proper property, so while serializing data client gets correct, *actual state of saved object.
However if one tries to update existing object with non-empty state of m2m field setattr fails to replace it's value (however data is being saved thankfully to django.db.models.fields.related.ReverseManyRelatedObjectsDescriptor#__set__ thats can be checked by refreshing object from db), as a result client gets incorrect, old state of saved object.