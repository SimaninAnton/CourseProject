Contributor
diox commented on 13 May 2019
Checklist
I have verified that that issue exists against the master branch of Django REST framework.
I have searched for similar issues in both open and closed tickets and cannot find a duplicate.
This is not a usage question. (Those should be directed to the discussion group instead.)
This cannot be dealt with as a third party library. (We prefer new functionality to be in the form of third party libraries where possible.)
I have reduced the issue to the simplest possible case.
I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)
Steps to reproduce
Add several throttling classes to a view
Expected behavior
Each request is added to the history of all throttling classes, even when one of them disallows the request
Actual behavior
If a single throttling class disallows the request, the other throttling classes never see the request and it never gets added to their history
This is because DRF checks throttling classes in a loop and raises as soon as it finds one failing:
        for throttle in self.get_throttles():
            if not throttle.allow_request(request, self):
                self.throttled(request, throttle.wait())
It's faster, but this makes throttling with multiple classes less efficient as some throttling classes never see some of the requests.
See also #6666
It could be done as a third-party library, but I believe it's better to have this change in DRF itself to make throttling more efficient against brute-force attacks. I haven't written the pull request yet, but it's relatively trivial and I'd be willing to do it, I just want to validate the idea first.