sirakuzzi commented on 20 Jan 2016
In current implementation of DRF a 'partial' flag for each nested serializer is taken from the root serializer. There is no legal way to control 'partial' flag in the nested serializer. But there are situations where such possibility is needed. Example:
class NoteSerializer(serializers.Serializer):
    name = serializers.CharField()
    content = serializers.CharField()

class UserSerializer(serializers.Serializer):
    username = serializers.CharField()
    notes = NoteSerializer(required=False, many=True)
At first I create a user using UserSerializer(partial=False) and set only one reqiured field username. Then I only edit that user, so I use UserSerializer(partial=True). But if I want to add notes for that user sending a data to UserSerializer: {"notes": [{...},{...}]} all NoteSerializer fields become not required. It is because NoteSerializer inherited partial=True from UserSerializer.
It would be good to have possibility to redefine partial for nested serializer:
...
    notes = NoteSerializer(required=False, many=True, partial=False)
I think partial should have 3 states for nested serializers: True, False, Inherited.
2