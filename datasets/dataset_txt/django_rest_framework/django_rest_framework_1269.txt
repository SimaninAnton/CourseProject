Contributor
dvarrazzo commented on 5 Mar 2016
Filter objects currently don't allow accessing the request. This can be useful to find objects which are in a certain relation with the user accessing the request. I worked around it with a simple subclass of DjangoFilterBackend:
class MyFilterBackend(DjangoFilterBackend):
    def filter_queryset(self, request, queryset, view):
        cls = self.get_filter_class(view, queryset)

        if cls:
            f = cls(request.query_params, queryset=queryset)
            f.request = request
            return f.qs

        return queryset
After which the request user can be accessed:
class Filter(filters.FilterSet):
    relation = django_filters.MethodFilter(action='filter_relation')

    def filter_relation(self, queryset, value):
        user = self.request.user
        return queryset.filter(id__in=some_search_involving(user, value))
Would it be worth adding this simple feature to the framework?