Contributor
thedrow commented on 2 Feb 2015
Goals
The purpose of this issue is to discuss how Django REST Framework could potentially gain significant performance boost when using Cython when serializing/deserializing objects.
The goal of this issue is to decide whether we'd like to integrate it into the core or not and in which cases the speedups will be used.
If not introduced into the core the result of this research will be published into a third party package.
Course of action
The first actionable step is to decide when we want to compile Cython.
I think that Cython speedups should be completely optional and if Cython is not available then no extensions are compiled. Moreover I think that if DRF is being installed under PyPy Cython extensions should only be compiled if specified explicitly since Cython only kinda works with PyPy.
After that we'll open a PR against this repository with contributions coordinated from my fork in order to prove that a speedup is even possible and that the speedups do not break any existing tests.
The fact that the PR exist does not mean it should or will be merged.
The next step would be to create a benchmark suite for DRF (which is desirable anyway IMHO) in order to measure what speedups have been gained.
We can use codespeed or asv which is simpler and does not require a server but quite new. I can open a new issue about it.
After all this is done we can start discussing if we want this in the core or not. It will depend on how extensive the speedups will change the code.
First steps to implementation
Set up travis to install Cython
Create new build jobs that have Cython installed and ensure that the tests are still being run without Cython as well
Generate speedups for the JSON renderer
Specify the return type of to_representation and from_representation methods on fields that have an equivalent C/C++ type. This should be done by declaring them as C functions with Python bindings.
Declare attributes with static types with their C equivalent.
Your ideas.