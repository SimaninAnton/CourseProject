victorct commented on 7 Apr 2019 â€¢
edited
Checklist
I have verified that that issue exists against the master branch of Django REST framework.
I have searched for similar issues in both open and closed tickets and cannot find a duplicate.
This is not a usage question. (Those should be directed to the discussion group instead.)
This cannot be dealt with as a third party library. (We prefer new functionality to be in the form of third party libraries where possible.)
I have reduced the issue to the simplest possible case.
I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)
Steps to reproduce
Create a simple serializer:
class CreateUserSerializer(serializers.Serializer):
  name = serializers.CharField(max_length=10)
Validate with that serializer:
 data = {'name': 'something larger than 10'}
 serializer = CreateUserSerializer(data=data)
 serializer.is_valid()
 errors = serializer.errors
 name_error_detail = errors['name'][0]
At this point I'am able to do anything with an instance of ErrorDetail.
Expected behavior
When creating an API, a little more of context in the errors could make such a difference. I would expect the representation of an ErrorDetail to have this context, for example instead of receiving this as a response
{
    "name": [
        {
            "message": "Ensure this field has no more than 10 characters.",
            "code": "max_length"
        }
    ]
}
would be awesome if I could receive something like this:
{
    "name": [
        {
            "message": "Ensure this field has no more than 10 characters.",
            "code": "max_length",
            "context": {
                 "max_length_allowed": 10
            }
        }
    ]
}