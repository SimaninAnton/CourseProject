dnozay commented on 27 Jan 2015
Declaring fields is very convoluted.
Let's imagine my end goal is this:
class PennyField(DecimalField):
    decimal_places = 2

class BalanceTransferField(PennyField):
    min_value = 100  # sorry, 100 is min transfer

class RegularBalanceTransferAmountField(BalanceTransferField):
    max_digits = 5  # 10 k max in a day
    max_value = 10000  # sorry, 10k is max transfer

class WireTransferAmountField(BalanceTransferField):
    max_digits = 7  # 1M max in a day
    max_value = 1000000  # sorry, 1M is max transfer

class XLargeWireTransferAmountField(BalanceTransferField):
    max_digits = 9  # 1M max in a day
    min_value = 1000001  # sorry, 100 is min transfer
    max_value = 999999999  # sorry, must be short of 1B.
Right now, it is not possible; if I want to define all custom fields in one place I would have to use this instead:
class RegularBalanceTransferAmountField(DecimalField):
    def __init__(self, **kwargs):
        max_digits = 5
        decimal_places = 2
        kwargs['max_value'] = 10000
        kwargs['min_value'] = 100
        super(RegularBalanceTransferAmountField, self).__init__(max_digits, decimal_places, **kwargs)

class WireTransferAmountField(DecimalField):
    def __init__(self, **kwargs):
        max_digits = 7
        decimal_places = 2
        kwargs['max_value'] = 1000000
        kwargs['min_value'] = 100
        super(WireTransferAmountField, self).__init__(max_digits, decimal_places, **kwargs)

class XLargeWireTransferAmountField(DecimalField):
    def __init__(self, **kwargs):
        max_digits = 9
        decimal_places = 2
        kwargs['max_value'] = 999999999
        kwargs['min_value'] = 1000001
        super(XLargeWireTransferAmountField, self).__init__(max_digits, decimal_places, **kwargs)
otherwise I have to resort to using DecimalField everywhere with the correct args; which can be very error-prone.