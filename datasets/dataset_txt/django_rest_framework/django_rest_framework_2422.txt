dbaxa commented on 29 Aug 2014
I seem unable to have my Serializer subclass perform validation on its fields. Also, it was not clear to me how to actually obtain the de-serialised form of my object.
Here is some example code:
from something_else import Fruit


_FRUIT_CHOICES = [('apple', 'apple'), ('orange', 'orange')]


class FruitSerializer(serializers.Serializer):
       """ Class for serialising fruit information. """
       fruit_type = serializers.ChoiceField(choices=FRUIT_CHOICES)
       id = serializers.IntegerField()
       colour = serializers.ChoiceField(choices=Fruit.COLOUR_CHOICES)

       def restore_object(self, attrs, instance=None):
               fruit_class = get_class_for_fruit_type(attrs.get('fruit_type'))
               return some_method_to_get_my_fruit(fruit_class, id=attrs.get('id'))

       def validate_colour(self):
               raise ValueError("as an example this doesn't seem to be called ... ")


class FruitColourApiView(APIView):
       serializer_class = FruitSerializer
       parser_classes = (JSONParser,)

       def get(self, request):
              return Response(dict(Fruit.COLOUR_CHOICES),
                                          status=rest_framework.status.HTTP_200_OK)

       def put(self, request, format=None):
              data = self.serializer_class(request.DATA)
              data.is_valid()
              print data.errors
              fruit = data.restore_object(request.DATA)
              # fields have still yet to have been validated ...
              return Response("....")