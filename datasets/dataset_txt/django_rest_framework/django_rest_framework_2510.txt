faxioman commented on 10 Jun 2014
I have two models like these:
class WebCategory(models.Model):
      name = models.CharField(max_length=48, null=True)
      description = models.TextField()

class WebProduct(models.Model):
      name = models.CharField(max_length=48, null=True)
      category = models.ForeignKey(WebCategory, null=True)
with two model serializers:
class WebProductSerializer(serializers.ModelSerializer):
    class Meta:
        model = WebProduct

class WebCategorySerializer(serializers.ModelSerializer):
    class Meta:
        model = WebCategory
When I try to deserialize a WebProduct json like in this example:
{
  id: 10,
  name: "MyProduct",
  category: 15
}
the model serializer tries to deserialize also the related WebCategory. I think it's better to avoid the direct deserialization of a foreign key, creating indeed a RelatedManager for the category field (like Django does) in order to avoid useless database overload.
I see that Django rest framework already creates a related manager for a reverse relation (in my example, obj_category.webproduct_set).