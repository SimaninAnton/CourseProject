davidfischer-ch commented on 2 Dec 2014
I didn't actually read the code that counts the objects before loading them, however if this counter is only used in order to know if we have to add paginate links then it may be an idea to implement it with another algorithm. This is not only one less query (+bandwidth -latency) but also one less source of misbehavior.
My 2 cent idea:
Handle paginate next:
Load PAGE_SIZE+1 instances
If we effectively have PAGE_SIZE+1 instances then create paginate next link.
Handle paginate previous/next by increasing bounds of the slice by 1 (-1, +1) (-1 may not required).
Always returns a maximum of PAGE_SIZE instances.
A subset of #1872.
What is now (tested with DRF 2.3) and PAGE_SIZE=10:
SELECT COUNT('*') FROM "my_model" WHERE "my_model"."created_by_id" = 1
[has returned 5]
SELECT "..." FROM "my_model" WHERE "my_model"."created_by_id" = 1 ORDER BY "my_model"."label" ASC LIMIT 5
My algorithm:
SELECT "..." FROM "my_model" WHERE "my_model"."created_by_id" = 1 ORDER BY "my_model"."label" ASC LIMIT 11