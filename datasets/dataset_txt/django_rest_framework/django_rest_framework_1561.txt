ncoghlan commented on 10 Sep 2015
(Breaking this out of the "Non-Model ViewSets" documentation discussion in #3373 )
I'm working on a project where I'm creating local proxy APIs for existing remote REST services. This means I'm largely working with data stored as attribute dictionaries, rather than as Python objects. While ViewSets + Serializers has mostly "just worked" for that use case, adapting HyperlinkedIdentityField involved completely overwriting get_url():
# Adapts HyperlinkedIdentityField to use __getitem__ rather than __getattr__
class DictBasedIdentityField(serializers.HyperlinkedIdentityField):

    def get_url(self, obj, view_name, request, format):
        # Unsaved objects will not yet have a valid URL.
        try:
            lookup_value = obj[self.lookup_field]
        except KeyError:
            return None
        kwargs = {self.lookup_url_kwarg: lookup_value}
        return self.reverse(view_name, kwargs=kwargs, request=request, format=format)
Would it make sense to have a "get_lookup_value()" method to override?