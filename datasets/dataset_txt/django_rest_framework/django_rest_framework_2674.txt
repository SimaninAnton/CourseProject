Contributor
mbox commented on 14 Nov 2013
If you pass a "dict-like" object to JSONRenderer (ie one that implements UserDict.DictMixin) then it renders it as a list of keys rather than as a hash - example testcase below.
The culprit is JSONEncoder, which checks for __iter__ here https://github.com/tomchristie/django-rest-framework/blob/master/rest_framework/utils/encoders.py#L47 , but doesn't check for iteritems() or other "dict like" interfaces first.
As a result, the dictionary is serialised as a list of keys. If JSONEncoder is going to look for sequences other than lists and treat them specially, it should look for mappings other than dicts and deal with them appropriately.
import UserDict

class DictLike(UserDict.DictMixin):
    def __init__(self):
        self._dict = dict()
    def __getitem__(self, key):
        return self._dict.__getitem__(key)
    def __setitem__(self, key, value):
        return self._dict.__setitem__(key, value)
    def __delitem__(self, key):
        return self._dict.__delitem__(key)
    def keys(self):
        return self._dict.keys()

x = DictLike()
x["key"] = "value"

from rest_framework.renderers import JSONRenderer

r = JSONRenderer()
r.render(x)
>>> '["key"]'