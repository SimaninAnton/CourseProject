abstractpaper commented on 18 Jul 2013
In reference to: http://stackoverflow.com/questions/17552380/django-rest-framework-serializing-optional-fields
Using SerializerMethodField does the job, however it is redundant and not pretty if you have a big serializer with a lot of optional fields. For instance:
class EntrySerializer(serializers.Serializer):
    level = serializers.Field(source="Level")
    text = serializers.Field(source="Text")
    _from = serializers.SerializerMethodField('from_or_none')
    _to = serializers.SerializerMethodField('to_or_none')

    def from_or_none(self, obj): return getattr(obj, 'From', None)
    def to_or_none(self, obj):   return getattr(obj, 'To', None)
A new function has to be defined for each optional field since SerializerMethodField accepts only one argument.
Keeping the current design choice intact while adding the flexibility of having one clean and simple serializer that accepts optional fields and defaults to a value would be a great addition.