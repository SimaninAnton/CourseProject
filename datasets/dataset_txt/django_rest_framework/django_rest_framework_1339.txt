GerardPaligot commented on 8 Jan 2016
Hi,
I have a very simple test case in my open source project where I checked that when I make a PUT request on a profile without any parameter, all fields keep their values.
Unfortunately, I upgraded my dependency of DRF from the version 3.1.1 and with the latest version, validated_data is no more empty when we don't specify any parameter so we update fields of our profile.
We should keep nothing in validated_data
Test case:
def test_update_member_details_without_any_change(self):
        response = self.client_authenticated.put(reverse('api-member-detail', args=[self.profile.user.id]))

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        # Some asserts on the response and fields of self.profile.
Serializer:
class ProfileValidatorSerializer(serializers.ModelSerializer, ProfileUsernameValidator, ProfileEmailValidator):
    class Meta:
        model = Profile
        fields = ('id', 'username', 'email', 'is_active', 'date_joined',
                  'site', 'avatar_url', 'biography', 'sign', 'show_email',
                  'show_sign', 'hover_or_click', 'email_for_answer', 'last_visit')
        read_only_fields = ('is_active', 'date_joined', 'last_visit',)

    def update(self, instance, validated_data):
        # Validated_data not empty.
        pass
validated_data value with DRF 3.3.x:
{
  u'show_email': False, 
  u'hover_or_click': False, 
  u'show_sign': False, 
  u'user': {
    u'is_active': False
  }, 
  u'email_for_answer': False
}
Note: It seems take all boolean fields and specify False as value.
validated_data value with DRF 3.1.1:
{}