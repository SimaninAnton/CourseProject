quantumkoen commented on 30 Jan 2018 â€¢
edited
Checklist
I have verified that that issue exists against the master branch of Django REST framework.
I have searched for similar issues in both open and closed tickets and cannot find a duplicate.
This is not a usage question. (Those should be directed to the discussion group instead.)
This cannot be dealt with as a third party library. (We prefer new functionality to be in the form of third party libraries where possible.)
I have reduced the issue to the simplest possible case.
I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)
Steps to reproduce
Create a django rest framework application as per http://www.django-rest-framework.org/tutorial/quickstart/
Add coreapi schema using get_schema_view as per [http://www.django-rest-framework.org/api-guide/schemas/#the-get_schema_view-shortcut]
Host the application with nginx (for example) under the /myproject sub-url as per the top-answer of [https://stackoverflow.com/questions/3400782/deploying-django-under-a-sub-url-with-nginx-fastcgi], which adds the SCRIPT_NAME
Expected behavior
Schema would include SCRIPT_NAME as part of the url. For example (excerpt from schema available on http://localhost/myproject/schema):
{
    "_type": "document",
    "_meta": {
        "url": "http://localhost/myproject/schema/",
        "title": "API"
    },
    "groups": {
        "list": {
            "_type": "link",
            "url": "/myproject/groups/",
            "action": "get",
            "description": "API endpoint that allows groups to be viewed or edited."
        },
....
Actual behavior
{
    "_type": "document",
    "_meta": {
        "url": "http://localhost/myproject/schema/",
        "title": "API"
    },
    "groups": {
        "list": {
            "_type": "link",
            "url": "/groups/",
            "action": "get",
            "description": "API endpoint that allows groups to be viewed or edited."
        },
....
The 'url' is not prefixed with '/myproject', which in turn breaks interaction with the api via coreapi (cli or python module).
Notes
I can probably fix this by sub-classing rest_framework.schemas.generators.SchemaGenerator, but I would expect this to be default functionality.
Probably what needs to be done is to modify SchemaGenerator.get_schema to fix the links in links based on the presence of SCRIPT_NAME in request.META (or some other basic django function that does this). I'd be happy to create a PR for it, but i'd like some feedback as to whether this is the right course of action.
Also, I can create a failing test-case, but again would like some feedback first about whether this is indeed something that should be handled in the upstream code, or whether I should subclass and implement a private solution before investing a lot of time in writing a test-case.