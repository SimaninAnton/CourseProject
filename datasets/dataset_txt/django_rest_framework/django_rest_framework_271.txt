tbitai commented on 4 Dec 2018
Checklist
I have verified that that issue exists against the master branch of Django REST framework.
I have searched for similar issues in both open and closed tickets and cannot find a duplicate.
This is not a usage question. (Those should be directed to the discussion group instead.)
This cannot be dealt with as a third party library. (We prefer new functionality to be in the form of third party libraries where possible.)
I have reduced the issue to the simplest possible case.
I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)
Steps to reproduce
Create a serializer with two fields:
field with source='parent' and to_internal_value() return value {'child1': data} ("deep field") or {'child1': data[0], 'child2': data[1]} ("conflicting deep field"),
field with source='parent.child2' ("shallow field").
Call is_valid() and then check validated_data.
Expected behavior
Data should be merged; in case of conflict, validation error should be raised.
Actual behavior
The field defined later overrides the earlier ones.