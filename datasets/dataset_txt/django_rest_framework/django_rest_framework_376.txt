Contributor
radyz commented on 24 Jun 2018 â€¢
edited
Checklist
I have verified that that issue exists against the master branch of Django REST framework.
I have searched for similar issues in both open and closed tickets and cannot find a duplicate.
This is not a usage question. (Those should be directed to the discussion group instead.)
This cannot be dealt with as a third party library. (We prefer new functionality to be in the form of third party libraries where possible.)
I have reduced the issue to the simplest possible case.
I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)
Steps to reproduce
I need to process a json response from a third party not in my control. The structure of this json comes in the form of {"property": [[{"prop":"value"}],[{"prop":"value"},[{"prop":"value"}]]}. I'd think this should be possible using a serializer like so:
class ItemSerializer(serializers.Serializer):
  prop = serializer.CharField()

class ListSerializer(serializers.ListField):
  child = serializers.ListField(child=DetailSerializer())

class ModelSerializer(serializers.Serializer):
  property = ListSerializer()
Expected behavior
It should process the json body as specified
Actual behavior
It raises a None reference exception. I've managed to track the code up to this point in serializers.py. What I've done is add a check if hasattr(parent, 'partial'): before executing the conflicting line, after that it all seems to work fine. Looks like when calling the bind method parent.partial is None and hence the error.
I'm wondering if it's something you have within the allowed scenarios so I can make a proper PR for it or is specific case which might not get supported.
Thanks