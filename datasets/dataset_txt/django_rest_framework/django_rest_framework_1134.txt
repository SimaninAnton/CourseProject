pySilver commented on 22 Jul 2016
While checking for nested writes at raise_errors_on_nested_writes DRF checks if a given field is an instance of BaseSerializer and this seems to be confusing. Why not checking is thats an instance of ModelSerializer instead?
Problem arises when you model have text (json/list) fields that you want to keep in a specific format using nested serializers validation.
For example:
class SampleSerializer(ModelSerializer):
    # on a model lvl its just a text field
    filters = GenericFiltersSerializer(
        many=True,
        required=False,
        help_text="Search filters")

    # on a model lvl its just a text field
    items = WidgetItemSerializer(
        many=True,
        required=False,
        help_text="Widget items")

    class Meta:
        # ...
Both GenericFiltersSerializer and WidgetItemSerializer are simple serializers subclassed from Serializer not ModelSerializer so I cant see a reason why we should check for nested writes in that case? Why cant we simply assign representation results into parent serializer?