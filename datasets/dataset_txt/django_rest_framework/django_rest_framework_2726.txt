Contributor
mrmachine commented on 12 Sep 2013
I would like to use DjangoModelPermissions to restrict API access in general, and then explicitly allow access by anonymous users to POST/create and GET/retrieve (but not GET/list). For GET/retrieve, an additional URL argument will be verified so that clients can only GET/retrieve objects for which they know the URL.
I think I can allow access to POST/create by subclassing DjangoModelPermissions.has_permission() and returning True if request.method == "POST". But, I can't test this using the API browser because when it returns a 403 forbidden response to my GET/list API request, it also does not show the POST/create form even though I do have POST/create permission.
This is incorrectly denying me the ability to submit a POST/create request via the API browser because a GET/list request is denied.
Also, on a somewhat related note, I don't think there is any (at least no easy) way to allow GET/retrieve but deny GET/list? I'm not using ViewSets, just generic CBVs. I think that if I did use ViewSets, an action attribute would be set on the view.
Could (and should) this also be set on generic CBVs, so that has_permission() can check view.action as well as request.method in determining whether or not to authorize a request?
This inconsistency makes ViewSets less of a convenience and more of a requirement if you need to customise permissions in this way.