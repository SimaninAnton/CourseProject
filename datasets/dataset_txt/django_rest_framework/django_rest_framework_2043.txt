ybendana commented on 30 Jan 2015
I'm using DRF 3.0.4 and I ran into this unexpected behavior while debugging a ModelViewSet.perform_update(). When I print serializer.data before calling serializer.save() it seems to block the update of the read-only field in the response. Here's a simplified example of my code:
class MyModel(Model):
    myreadonlyattr = None

class MyViewSet(ModelViewSet):
    def perform_update(self, serializer):
        serializer.is_valid(raise_exception=True)
        print serializer.data # Response will have myreadonlyattr=null
        serializer.save(myreadonlyattr='foo')

class MySerializer(ModelSerializer):
    class Meta:
        model = MyModel
        fields = ('myreadonlyattr',)

    def update(self, instance, validated_data):
        instance.myreadonlyattr = validated_data.pop("myreadonlyattr", None)
        return instance