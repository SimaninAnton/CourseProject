diegueus9 commented on 27 Oct 2015
We are releasing a new service for our clients. I programmed the RESTFul API using DRF, and another team coded an android device that calls the API, but unfortunately they did a mistake and they are sending a POST request with the data: null (literallly the world null), that raises an error in the API Server: ValueError: too many values to unpack
Internal Server Error: /api/v1/card/charge/success/
Traceback (most recent call last):
  File "/home/webrecharges/.virtualenvs/webrecharges/local/lib/python2.7/site-packages/django/core/handlers/base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/home/webrecharges/.virtualenvs/webrecharges/local/lib/python2.7/site-packages/django/views/decorators/csrf.py", line 58, in wrapped_view
    return view_func(*args, **kwargs)
  File "/home/webrecharges/.virtualenvs/webrecharges/local/lib/python2.7/site-packages/django/views/generic/base.py", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File "/home/webrecharges/.virtualenvs/webrecharges/local/lib/python2.7/site-packages/rest_framework/views.py", line 466, in dispatch
    response = self.handle_exception(exc)
  File "/home/webrecharges/.virtualenvs/webrecharges/local/lib/python2.7/site-packages/rest_framework/views.py", line 463, in dispatch
    response = handler(request, *args, **kwargs)
  File "./recharges/decorators.py", line 18, in check_group
    return method(*args, **kwargs)
  File "./recharges/views/card_charge_success.py", line 150, in post
    return Response(serializer.errors, status=HTTP_400_BAD_REQUEST)
  File "/home/webrecharges/.virtualenvs/webrecharges/local/lib/python2.7/site-packages/rest_framework/serializers.py", line 498, in errors
    return ReturnDict(ret, serializer=self)
  File "/home/webrecharges/.virtualenvs/webrecharges/local/lib/python2.7/site-packages/rest_framework/utils/serializer_helpers.py", line 19, in __init__
    super(ReturnDict, self).__init__(*args, **kwargs)
  File "/usr/lib/python2.7/collections.py", line 52, in __init__
    self.__update(*args, **kwds)
  File "/home/webrecharges/.virtualenvs/webrecharges/lib/python2.7/_abcoll.py", line 547, in update
    for key, value in other:
ValueError: too many values to unpack

Request repr(): 
<WSGIRequest
path:/api/v1/card/charge/success/,
GET:<QueryDict: {}>,
POST:<could not parse>,
COOKIES:{},
META:{'CONTENT_LENGTH': '4',
 'CONTENT_TYPE': 'application/json',
 u'CSRF_COOKIE': u'u31ROAnJenEJEGJBkxUPufNVP12FoVWY',
 'DOCUMENT_ROOT': '/usr/share/nginx/html',
 'HTTP_AUTHORIZATION': 'JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IjAwMDAwMDU1MjMiLCJ1c2VyX2lkIjoxNCwiZW1haWwiOiIiLCJleHAiOjE0NDU5NjA4MjF9.aSH12YDtJRoNSjr5UrPp5nwp8fJD-4guqGem6xLctC8',
 'HTTP_CONNECTION': 'Keep-Alive',
 'HTTP_CONTENT_LENGTH': '4',
 'HTTP_CONTENT_TYPE': 'application/json',
 'HTTP_HOST': 'webrecharges.aws.rbsas.co',
 'HTTP_USER_AGENT': 'Apache-HttpClient/UNAVAILABLE (java 1.4)',
 'Host': 'webrecharges.aws.rbsas.co',
 'PATH_INFO': u'/api/v1/card/charge/success/',
 'QUERY_STRING': '',
 'REMOTE_ADDR': '...',
 'REMOTE_PORT': '16552',
 'REQUEST_METHOD': 'POST',
 'REQUEST_URI': '/api/v1/card/charge/success/',
 u'SCRIPT_NAME': u'',
 'SERVER_NAME': '...',
 'SERVER_PORT': '80',
 'SERVER_PROTOCOL': 'HTTP/1.1',
 'X-Forwarded-For': '...',
 'X-Forwarded-Proto': '',
 'X-Real-IP': '...',
 'uwsgi.node': '...',
 'uwsgi.version': '2.0.11.2',
 'wsgi.errors': <open file 'wsgi_errors', mode 'w' at 0x7fc54a670db0>,
 'wsgi.file_wrapper': <built-in function uwsgi_sendfile>,
 'wsgi.input': <uwsgi._Input object at 0x7fc549587558>,
 'wsgi.multiprocess': True,
 'wsgi.multithread': False,
 'wsgi.run_once': False,
 'wsgi.url_scheme': 'http',
 'wsgi.version': (1, 0)}>
This are my dependencies:
The following requirements were added by pip --freeze:
Django==1.8.5
PyJWT==1.4.0
django-encrypted-fields==1.1.1
django-extensions==1.5.7
django-filter==0.11.0
django-ipware==1.1.1
djangorestframework==3.2.4
-e git+https://github.com/diegueus9/django-rest-framework-excel.git@d3276cc2edf4132aabd6bb7643daa1ed8e343800#egg=djangorestframework_excel-master
-e git+https://github.com/diegueus9/django-rest-framework-jwt.git@b3dd1e44568b1c36ad908df1cb60bad4fc48026c#egg=djangorestframework_jwt-master
-e git+https://github.com/diegueus9/drf-tracking.git@9a88ff8129b82b12f7070ebfab4fdf6d03e5fc4d#egg=drf_tracking-master
ipython==4.0.0
openpyxl==2.3.0-b2
ordereddict==1.1
psycopg2==2.6.1
pycrypto==2.6.1
python-dateutil==1.5
python-keyczar==0.715
pytz==2015.6
requests==2.8.1
six==1.10.0
soap2py==1.16
The thing is, when the andoid device makes a POST request with the word null in the body, my code raises that exception when I do:
return Response(serializer.errors, status=HTTP_400_BAD_REQUEST)
However, digging a little in the issue I found that this happens when the user sends things like null, true, false, apparently the library json doesn't fail but instead translate those words to the python-verse but when the serializer tries to serialize the errors is a unicode word.
At first I thought that this was an issue for python itself, since you can do this:
 import json
 json.loads('null')
But I found that if I do a POST with "null" (including the ") DRF return
{"non_field_errors":["Invalid data. Expected a dictionary, but got unicode."]}
So I think, that perhaps, DRF should to assure that serializer.errors is always something serializable.
This is my view:
class CardChargeSuccessView(LoggingMixin, APIView):
    serializer_class = CardChargeSuccessSerializer

    @CheckGroup(groupname=DEVICE_GROUP)
    def post(self, request, format=None, **kwargs):
        serializer = self.serializer_class(data=request.data)
        if serializer.is_valid():
            data = {
                'recorded': False,
            }
            # internal code unrelated
            return Response(data)
        else:
            return Response(serializer.errors, status=HTTP_400_BAD_REQUEST)