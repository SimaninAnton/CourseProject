Contributor
carljm commented on 14 Oct 2014
Context for this feature request:
Generally in my projects, I don't want to pass a full request object everywhere I might need to generate full absolute URLs (including e.g. in emails generated by a Celery task that don't even have a request available). Therefore, I almost always have a BASE_URL setting that I use for this purpose, rather than request.build_absolute_uri(...). Presuming I'm not trying to do dynamic domain-based multitenancy (and I rarely am), changing one setting per-deployment is much easier than passing a request to all kinds of places it doesn't belong.
I frequently use my DRF serializers outside the API framework. For example, I share templates between client and server (using Jinja2/nunjucks) and pre-render on the server the same template that may also be rendered on the client using data from the API, so I use the DRF serializer for the data passed in to the template on the server side, so it always gets the same data in the same format. When using a HyperlinkedModelSerializer outside the API, it's a pain to have to always pass in a request just so that it can generate absolute URLs.
Thus, I'd like to be able to customize how HyperlinkedModelSerializer/HyperlinkedRelatedField/HyperlinkedIdentityField build full absolute URLs, so that I can build them using my BASE_URL setting instead of using request.build_absolute_uri(...), and remove their dependency on having a request in the context. Right now doing this requires overriding most of their implementation.
The implementation I'd suggest is to accept a base_urlattribute on a HyperlinkedModelSerializer; if it's present, use it and don't look for or require a request in the context.
I will implement this and submit a PR if the idea/API are accepted in principle.