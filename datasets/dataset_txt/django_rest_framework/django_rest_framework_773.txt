samfrances commented on 24 May 2017
I'm looking to create a custom subclass of the Token model, but one customised not to authenticate as a particular user, but to grant permissions to a particular model instance of a non-User model.
The current Token model doesn't make that very easy, because there isn't a way to change or get rid of the user field on a custom sublass of Token.
It occurred to me that it would be fairly easy, without any change in functionality, to split Token into a base class TokenBase that has all the fields and methods apart from user, and then have Token essentially look like the following:
class Token(BaseToken):
    user = models.OneToOneField(
        settings.AUTH_USER_MODEL, related_name='auth_token',
        on_delete=models.CASCADE, verbose_name=_("User")
    )
Then BaseToken could be used as the basis for other forms of token which associate to different models.
I understand that there's a desire to keep the built-in token app as simple as possible. However, this would not materially change the way the built-in tokens work, while providing greater scope for customisation.
In any case, I wanted to scope out whether there would be any support or appetite for this proposal.