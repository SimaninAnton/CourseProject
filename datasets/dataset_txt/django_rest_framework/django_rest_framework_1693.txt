nauzethc commented on 24 Jul 2015
I have a Django model with custom properties which are populated on a queryset before it's passed to a serializer with 'many=True' option. It would be something like this.
class Sample(models.Model):
    name = models.CharField()

    def __init__(self, *args, **kwargs):
        super(Sample, self).__init__(*args, **kwargs)
        self._value = None

    @property
    def value(self):
        return self._value

    @value.setter
    def value(self, new_value):
        self._value


class SampleSerializer(serializers.ModelSerializer)
    value = serializers.FloatField()

    class Meta:
        model = Sample
        fields = ('name', 'value')
If I try to use a queryset with this serializer
samples = Sample.objects.all()
for s in samples:
    s.value = random()

serialized = SampleSerializer(samples, many=True)
serialized.instance[0].value  # 0.123456, instances are populated
it outputs something like this
[{"name": "Sample1", "value": null }, {"name": "Sample2", "value": null }]
but if I try to do the same thing with a single model
sample = Sample.objects.get(pk=1)
sample.value = random()
serialized = SampleSerializer(sample)
it works
{"name": "Sample1", "value": 0.123456}
I've also tried using base serializers.Serializer and the result is the same, model instances are populated but serializers output their initial values.