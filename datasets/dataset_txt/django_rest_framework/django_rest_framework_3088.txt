Contributor
max-arnold commented on 2 May 2012
My app uses specific user storage and authentication logic and I created my own Authentication and Permission classes which can handle that. Unfortunately, AuthMixin contains private method with harcoded instantiation of django.contrib.auth.models.AnonymousUser:
    def _authenticate(self):
        """
        Attempt to authenticate the request using each authentication class in turn.
        Returns a ``User`` object, which may be ``AnonymousUser``.
        """
        for authentication_cls in self.authentication:
            authentication = authentication_cls(self)
            user = authentication.authenticate(self.request)
            if user:
                return user
        return AnonymousUser()
Probably it is better to allow authentication.authenticate() to return whatever it thinks is right. Existing behaviour can be handled with special AnonymousAuthentication class which is placed last and always returns AnonymousUser.
Any other ideas?