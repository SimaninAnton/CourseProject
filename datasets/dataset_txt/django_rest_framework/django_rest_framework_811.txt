jonathan-s commented on 2 May 2017 â€¢
edited
Checklist
I have verified that that issue exists against the master branch of Django REST framework.
I have searched for similar issues in both open and closed tickets and cannot find a duplicate.
This is not a usage question. (Those should be directed to the discussion group instead.)
This cannot be dealt with as a third party library. (We prefer new functionality to be in the form of third party libraries where possible.)
I have reduced the issue to the simplest possible case.
I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)
Steps to reproduce
class TeamSerializer(serializers.ModelSerializer):

    user = serializers.UUIDField()

    class Meta:
        model = Team
        fields = ('id', 'name', 'user')

    def create(self, validated_data):
        user_id = validated_data.get('user')
        user = User.objects.get(pk=user_id)
        team = Team(name=validated_data.get('name'))
        team.users.add(user)
        team.save()
        return team

team = TeamSerializer(data={'name': 'test', 'user': self.user.pk})
team.is_valid()
team.save()
team.to_representation(team.instance) # triggers AttributeError
Expected behavior
Since we already have contributed the user field it would be apt to check if it exists in the user field before we throw the attribute error.
Actual behavior
Currently it Throws an AttributeError since it can't access user on Team, which is all well and good. But it's possible to handle this more graceful.
AttributeError: Got AttributeError when attempting to get a value for field `user` on serializer `TeamSerializer`.
The serializer field might be named incorrectly and not match any attribute or key on the `Team` instance.
Original exception text was: 'Team' object has no attribute 'user'.