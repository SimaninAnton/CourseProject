ddohler commented on 30 Apr 2015
The documentation for GenericAPIView shows that the function signature for get_serializer is get_serializer(self, instance=None, data=None, files=None, many=False, partial=False, allow_add_remove=False).
This implies that it should be possible to do something like this:
class TestViewSet(viewsets.ModelViewSet):
    serializer_class = TestModelSerializer
    def get_serializer(self, instance=None, data=None, files=None, many=False,  
                       partial=False, allow_add_remove=False):                     
        # Do custom stuff here                                                     
        return super(TestViewSet, self).get_serializer(instance=instance, data=data,
                                                       files=files, many=many, partial=partial,
                                                       allow_add_remove=allow_add_remove)
However, this fails with TypeError: __init__() got an unexpected keyword argument 'files' (and the same message for allow_add_remove if files is removed).
If those two parameters are removed, list and detail endpoints fail with AssertionError: When a serializer is passed adatakeyword argument you must call.is_valid()before attempting to access the serialized.datarepresentation. This is because the ListModelMixin and RetrieveModelMixin calls self.get_serializer(instance) rather than self.get_serializer(instance=instance).
I'm not exactly sure what the best resolution for this is; I expect that allow_add_remove and files may be used in other places such that removing them from the documentation would be inappropriate. However, it seems that the GenericAPIView should allow subclasses to call e.g. serializer = self.get_serializer(files=files) without raising errors, which doesn't appear to be the case currently.
Similarly, the AssertionError above is surprising since there is no indication in the documentation that get_serializer will be called with an object instance as an argument rather than a keyword argument.