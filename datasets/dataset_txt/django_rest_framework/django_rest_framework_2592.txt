frankpape commented on 1 Mar 2014
When performing a full update (i.e., partial=False) on a ModelSerializer and omitting fields, my expectation is that omitted, optional fields will not be set in the deserialized instance.
The documentation says:
By default, serializers must be passed values for all required fields or they will throw validation errors.
But what is the desired behavior for non-required fields?
The existing behavior is as follows:
For required fields (null=False, blank=False), is_valid() returns False.
For fields with a default specified, the value is set to the default.
For fields with null=True or blank=True, the value is left unchanged.
One reasonable (IMO) option for consistent behavior might be:
Continue to throw validation error for required fields.
Continue to set the value to default for fields with a default specified.
For fields with null=True, set the value to None.
For fields with blank=True, set the value to an empty string.
I suggest this behavior because it matches the creation semantics when fields are omitted.
Another possible option is to leave all unspecified values unchanged, but it seems like if this were desired, the caller would specify partial=True (this would make, for example, HTTP PUT requests behave like PATCH). It also feels like this conflicts with the requirement that a value is specified for required fields.
I will create a pull request with a failing test that asserts my expected behavior.