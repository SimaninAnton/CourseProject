Contributor
benrobster commented on 18 Mar 2013
This behavior seems to have changed over the past few weeks, because I had code that worked on 2.2.0 that assumed that the output of a serialized DateField was a date (or datetime) which is now broken because DateField.to_native now returns a string instead of a datetime.date. This appeared to have happened in 2.2.2 - "Support for custom input and output formats for DateField, DateTimeField and TimeField". However, I wonder whether the fact that this change is backwards-incompatible and possibly ill-advised was considered when the update was made. Isn't datetime.date a "native" type that gets handled just fine when rendered and wouldn't a date be the expected native type of the output of DateField.to_native? is_protected_type in encoding.py seems to indicate that dates should be preserved as-is when serialized, so there's a bit of a contradiction here, in addition to it being a undocumented backwards-incompatibility. I assume that the ability to do custom output formats for DateFields is important to some, but having access to an actual date instead of a string in a serialized object is important to others like myself. I wonder if there is a way to reconcile the two.
I'd be happy to jump in and fix things if I get some guidance here. If the old way (returning a date) was wrong, I guess I'll create my own custom field that returns a date like I would expect instead of string.
I guess this could arguably fall under "Note that in line with Django's policy, any parts of the framework not mentioned in the documentation should generally be considered private API, and may be subject to change" but I figured I'd bring it up anyway.