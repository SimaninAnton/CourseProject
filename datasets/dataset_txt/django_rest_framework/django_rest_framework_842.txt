Alex3917 commented on 4 Apr 2017
I found this in our codebase today:
class EmailSerializer(ModelSerializer):
    def update(self, instance, validated_data):
        instance.is_verified = validated_data.get('is_verified', instance.is_verified)
        instance.save(update_fields=['is_verified'])
        return instance

    ...
And was surprised by what that actually did, because it was being called with code like this:
if email_serializer.is_valid():
        email_serializer.update(email_serializer.instance, validated_data={'is_verified': True})
This seems to violate the principle of least surprise, since validated_data is also a property on the serializer. This means that self.validated_data and validated_data are completely different things, and the data being passed into the update method is not in fact validated at all by DRF.
To me a clearer method signature here would be:
def update(self, instance, nonvalidated_data/extra_data/trusted_data, validated_data=self.validated_data):
    pass
I might be just thinking about this the wrong way, or else it might just not be worth a breaking change, but just wanted to throw this out there since I didn't see it discussed previously.