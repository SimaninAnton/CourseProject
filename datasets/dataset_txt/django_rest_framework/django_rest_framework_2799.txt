Contributor
johtso commented on 25 Jun 2013
The sytax for defining nested serializers (serializers as fields) causes the serializer to be instantiated when defining the parent serializer. This obviously isn't the case for normal parent serializer class definitions.
This wouldn't usually be a problem, but the other day I had a circular dependency situation, where an app within my project was importing the serializer via its models.py, which was being imported via the serializer's get_fields on initialisation.
The only solution was to avoid using the nice nested serializer syntax and define a custom field instead:
class MyField(serializers.Field):
    def to_native(self, queryset):
        return MySerializer(queryset.all(), many=True).data
Is there something that could be changed to avoid this problem? Maybe passing an uninstantiated serializer to some kind of a ChildSerializer class?