Contributor
fengsi commented on 26 Oct 2018 â€¢
edited
Checklist
I have verified that that issue exists against the master branch of Django REST framework.
I have searched for similar issues in both open and closed tickets and cannot find a duplicate.
This is not a usage question. (Those should be directed to the discussion group instead.)
This cannot be dealt with as a third party library. (We prefer new functionality to be in the form of third party libraries where possible.)
I have reduced the issue to the simplest possible case.
I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)
Steps to reproduce
If tuple validators (e.g., validators=(1, 2, 3)) is passed to field rather than list, DRF crashed, as it assumes validators is list.
Expected behavior
Django actually uses tuple as default type for validators, and converts it internally to list:
django/django@9027e6c
This approach takes care of both tuple and list types for validators.
Actual behavior
However, DRF assumes validators is list. Though it also uses self.validators = validators[:] to generate a new object, it failed to deal with tuple.
Hence, in recent change of DRF 3.9.0, the new stuff would break any code passing tuple to validators:
0eb2dc1#diff-af402f515db75c7c6754453cf15455d9
The append() approach was there in the past, but usually not triggered by default. Now due to the new ProhibitNullCharactersValidator, such behavior becomes more popular.
I'd suggest a similar approach to that of Django (tuple by default, and convert to list internally), so both types could be accepted and taken care of.
PS
Let's discuss if this is the desired approach. If so, and if no one would like to fix it ASAP, I'd be glad to submit a PR, as my code is not working with DRF 3.9.0.
1