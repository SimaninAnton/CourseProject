olivergeorge commented on 22 Jul 2015
There's been some interesting developments the API world with Facebook Relay, Netflix, Datomic et al.
I think DRF can take a step forward and deliver on the Pull API aspect.
The good people at Datomic gave a talk at EuroClojure which introduced their pull api which amounted to a "recursive select-keys" as a clever technique to deliver on some of these goals. Simple format, nice and flexible. Seems like a great technique.
For example:
http://localhost:8000/sampling/api/person/2147/?pull=["*",{"friends":["name","location"]}]
This finds a person, returns all fields and recurses into the friend relation to return a list of the name & location of all friends.
In the context of this project I think the query aspect is delivered already by ModelViewSet GET requests. No trouble there.
The pull component can be achieved by recursing through the serializer graph and pruning. I'm linking to my code which does this.
https://gist.github.com/olivergeorge/ee837b44613ce93064aa
The current solution does pruning at the point get_serializer is called. There's some limitations to this. The process needs to know the models it might recurse into but for fields declared manually there are no queryset resolve a model. (Thus the PullSerializerMixin workaround).
I'm hoping that with some guidance I can reengineer to better embrace the architecture and make this something suitable for general use.
Is this of interest? I'm not sure where/how to get some feedback. I presume the result would be a separate git repo...