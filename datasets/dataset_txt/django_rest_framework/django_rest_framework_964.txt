pySilver commented on 22 Nov 2016
Before DRF 3, optional charfield would accept empty values such as empty strings and None just fine and treat them the same way. Nowadays optional charfield accepts only empty strings and this caused a lot of manual useless code updates in our app.
If the model field is defined this way:
denial_reason = models.CharField(
        blank=True,
        max_length=500,
        help_text='Reason why website became suspended')
then ModelSerializer would create a field that accepts empty strings and reports errors when client supplies None as value. It might be fixed by setting null=True on a model field definition level, but that's bad for charfields on database lvl and should not be used. Other solution is to create manual field in serializer:
denial_reason = serializers.CharField(
        required=False,
        allow_null=True,
        allow_blank=True)
This would work, but well â€“ we loose field autogeneration.. and its repetitive.
Can we restore the behaviour from 2.x times? Asking because AngularJS serializes empty form fields as null/undefined upon request (yeah, I know how it sounds) and this leads to no-user-friendly API.