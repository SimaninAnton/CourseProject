bedilbek commented on 4 Sep 2019 â€¢
edited
Checklist
I have verified that that issue exists against the master branch of Django REST framework.
I have searched for similar issues in both open and closed tickets and cannot find a duplicate.
This is not a usage question. (Those should be directed to the discussion group instead.)
This cannot be dealt with as a third party library. (We prefer new functionality to be in the form of third party libraries where possible.)
I have reduced the issue to the simplest possible case.
I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)
Steps to reproduce
Let's say we are using UniqueTogetherValidator for Tree-based model:
class Tree(models.Model):
      parent = models.ForeignKey('self', null=True)
      name = models.CharField(max_length=255)


class TreeSerializer(serializers.ModelSerializer):
      class Meta:
            model = Tree
            fields = '__all__'
            validators = [
                 UniqueTogetherValidator(
                        queryset=Tree.objects.all(),
                        fields=('name', 'parent')
                 (
            ]
            extra_kwargs = dict(
                 parent=dict(required=True, allow_null=True)
             )
Expected behavior
As we see, parent field is required but can be null, but when serializer is being validated with existing name in the database and parent=None, validation error should be raised.
Actual behavior
However, validation error is ignored even if queryset exists according to this code snippet in UniqueTogetherValidator class:
def __call__(self, attrs):
      ...    
     # Ignore validation if any field is None
        checked_values = [
            value for field, value in attrs.items() if field in self.fields
        ]
        if None not in checked_values and qs_exists(queryset):
        ...
Thus, in my case, there is None value in checked_values list and validation error is not being raised.