belkka commented on 16 Feb 2019 â€¢
edited
django-rest-framework/rest_framework/fields.py
Line 375 in de3929f
 assert self.source != field_name, ( 
When user defines a serializer field and need to set source attribute to some global constant used across the project, e. g. name = SomeField(source=NAME_SRC) they have to ensure that NAME_SRC != 'name'. If keep source=NAME_SRC, editing the constant NAME_SRC later may break app in unexpected way. If omit source=... when NAME_SRC == 'name', editing this constant breaks app in even more unexpected way.
        # In order to enforce a consistent style, we error if a redundant
        # 'source' argument has been used. For example:
        # my_field = serializer.CharField(source='my_field')
According to comment the goal of this assertion is to enforce omitting redundant string literal in simple cases, but if one need something like
my_field = serializer.CharField(source=MY_CONFIGURABLE_FIELD)  # may not work!
they actually have to write something like
my_field = serializer.CharField(**(
    {'source': MY_CONFIGURABLE_FIELD} if MY_CONFIGURABLE_FIELD != 'my_field' else {}
))
in order to make the code robust.
I suggest to remove the assert or at least replace it with some kind of warning.