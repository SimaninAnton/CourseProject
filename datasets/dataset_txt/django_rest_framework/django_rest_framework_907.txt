Contributor
bluetech commented on 12 Feb 2017 â€¢
edited
In DRF serializers, one way to make fields read-only is to use the read_only_fields attribute:
class AccountSerializer(serializers.ModelSerializer):
    class Meta:
        model = Account
        fields = ('id', 'account_name', 'users', 'created')
        read_only_fields = ('account_name',)
There is similar functionality in the Django admin, only there it is spelled readonly_fields:
class AccountAdmin(admin.ModelAdmin):
    fields = ('id', 'account_name', 'users', 'created')
    readonly_fields = ('account_name',)
If one is familiar with the Django admin, they are somewhat likely to spell it wrong in serializers (hmm I'm not talking about myself of course), with possibly bad results.
I have noticed that in several places DRF contains preemptive checks against common errors and raises helpful warnings for them. Do you think it makes sense to do something like that in case someone writes readonly_fields in a serializer? (I'll be happy to write a patch if so.)