andrew-ang commented on 15 Sep 2015
Imagine a scenario where you log all events on the system via post_save. In views / forms, we can "prepare" our objects before they get saved e.g.:
class MyView(UpdateView):
  def get_object():
    obj = super().get_object()
    obj.tracker.current_user = self.request.user
This works really well and allows our signals to know the user that initiated them, without having to resort to a threadlocal to hold the current request.
It would be cool if around about this line:
https://github.com/tomchristie/django-rest-framework/blob/master/rest_framework/serializers.py#L832
There was a way to prepare the object before calling model.objects.create(). e.g. it could be:
instance = Model(**kwargs)
self.prepare(instance)
instance.save()
We could then add the current request in via perform_create or perform_update something like:
def perform_create(serializer):
   serializer.prepare = lambda obj: obj.tracker.current_user = self.request.user
   serializer.save()
This is a bit of an edge case ... but can you think of any other way we can have a signal emitted which would be aware of the current request?
1