avkonst commented on 15 May 2013
Hi,
I have got an API running over http and https. The server is configured to check for csrf token on unsafe requests, like POST.
I have got a client which does POST request supplying with necessary sessionid and csrf tokens. If it runs over HTTP, everything works. If it runs over HTTPS, it does not. The server returns: {"detail": "CSRF Failed: Referer checking failed - http://localhost:8800/jstest/ does not match https://my.api.server.com/."}
I have found the place where the request is rejected in rest framework code (file compat.py):
            if request.is_secure(): # <--- TRUE IN CASE OF HTTPS
                # Suppose user visits http://example.com/
                # An active network attacker,(man-in-the-middle, MITM) sends a
                # POST form which targets https://example.com/detonate-bomb/ and
                # submits it via javascript.
                #
                # The attacker will need to provide a CSRF cookie and token, but
                # that is no problem for a MITM and the session independent
                # nonce we are using. So the MITM can circumvent the CSRF
                # protection. This is true for any HTTP connection, but anyone
                # using HTTPS expects better!  For this reason, for
                # https://example.com/ we need additional protection that treats
                # http://example.com/ as completely untrusted.  Under HTTPS,
                # Barth et al. found that the Referer header is missing for
                # same-domain requests in only about 0.2% of cases or less, so
                # we can use strict Referer checking.
                referer = request.META.get('HTTP_REFERER')
                if referer is None:
                    logger.warning('Forbidden (%s): %s' % (REASON_NO_REFERER, request.path),
                        extra={
                            'status_code': 403,
                            'request': request,
                        }
                    )
                    return self._reject(request, REASON_NO_REFERER)

                # Note that request.get_host() includes the port
                good_referer = 'https://%s/' % request.get_host()
                if not same_origin(referer, good_referer):
                    reason = REASON_BAD_REFERER % (referer, good_referer)
                    logger.warning('Forbidden (%s): %s' % (reason, request.path),
                        extra={
                            'status_code': 403,
                            'request': request,
                        }
                    )
                    return self._reject(request, reason)
This code tells me that clients should have a referral to the API host (https://my.api.server.com/), and I think it is not right, because JavaScript client can be hosted anywhere. In case of a client in Python language, there is no even a referral to host, it is empty...
Could you explain this issue? What should I check, understand?