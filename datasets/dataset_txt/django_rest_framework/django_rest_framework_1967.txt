Contributor
delinhabit commented on 7 Mar 2015
Hello,
I'm porting to DRF 3.1 and I have the following issue:
I have a use-case where sending null as a value for a field means unsetting a flag. I also need to enforce that this operation is valid only whenself.instance is in a particular state. An obvious thing to do is to implement this in the validate_<field_name> method on the serializers (since null is a valid value I can expect).
The problem is that validate_<field_name> is not called if the received value is None, even if allow_null is set to True on the field (here is the relevant code block).
I can work on a PR if this is accepted as an issue of course. I'm not sure how to fix the problem in the mean-time. Of course I can do the validation in validate() but it's not intuitive, since the validation is done for the value of that field and is not an object level validation. This was used to work in DRF 2.x.
Thanks,
Ion