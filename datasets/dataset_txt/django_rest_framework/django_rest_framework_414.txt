Smosker commented on 25 Apr 2018
Python 3.5, drf 3.8.2
Steps to reproduce
from rest_framework import serializers
from django.db import models

class User(models.Model):
    last_name = models.CharField(max_length=1000,)
    first_name = models.CharField(max_length=1000,)
    login = models.CharField(max_length=1000,)

class SomeModel(models.Model):
    field1 = models.CharField(max_length=1000,)
    author = models.ForeignKey(User, null=False, blank=False,)

class UserSerializer(BaseSerializer):
    class Meta:
        model = User
        fields = 'last_name', 'first_name', 'login',

class ObjectWithAuthorMixin:
    author = UserSerializer(read_only=True)

class BaseSerializer(serializers.ModelSerializer):
    pass

class SomeModelSerializer(ObjectWithAuthorMixin, BaseSerializer):
    class Meta:
        model = SomeModel
        fields = ('id', 'field1', 'author', )

print(SomeModelSerializer().get_fields())
Expected behavior
OrderedDict([('id', IntegerField(label='ID', read_only=True)),
             ('field1', CharField(max_length=1000)),
             ('author', UserSerializer(read_only=True):
                  last_name = CharField(max_length=1000)
                  first_name = CharField(max_length=1000)
                  login = CharField(max_length=1000))])
Actual behavior
OrderedDict([('id', IntegerField(label='ID', read_only=True)),
             ('field1', CharField(max_length=1000)),
             ('author', PrimaryKeyRelatedField(queryset=User.objects.all()))])
As you can see for some reason serializer user for user PrimaryKeyRelatedField instead of UserSerializer, does this expect to behave like this?
Serializer inheritance doesn't work like this? I should manyally set
author = UserSerializer(read_only=True) for SomeModelSerializer?