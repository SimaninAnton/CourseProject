AdrienLemaire commented on 27 Jun 2018 â€¢
edited
Checklist
I have verified that that issue exists against the master branch of Django REST framework.
I have searched for similar issues in both open and closed tickets and cannot find a duplicate.
This is not a usage question. (Those should be directed to the discussion group instead.)
This cannot be dealt with as a third party library. (We prefer new functionality to be in the form of third party libraries where possible.)
I have reduced the issue to the simplest possible case.
I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)
Maybe related to #3554
Related SO question: https://stackoverflow.com/questions/51054249/recommended-way-to-setup-django-rest-framework-with-firebase
Steps to reproduce
authentication.py
from rest_framework.authentication import BaseAuthentication
from rest_framework import exceptions
import firebase_admin
from firebase_admin import credentials, auth
import logging
from .models import User
from django.conf import settings

logger = logging.getLogger(__name__)

credentials = credentials.Certificate(
    settings.FIREBASE_AUTH['FIREBASE_ACCOUNT_KEY_FILE'],
)
firebase_admin.initialize_app(credentials)


class FirebaseAuthentication(BaseAuthentication):
    """Authenticate the user and get its info from Firebase.

    The token is sent in the request as idToken and verified with
    the Firebase admin.
    """

    def authenticate(self, request):
        """Actual authentication happens here."""
        logger.info('in FirebaseAuthentication.authenticate')
        token = request.META.get('HTTP_TOKENID')
        if token:
            try:
                firebase_user = auth.verify_id_token(token)
            except ValueError:
                logger.info('verify_id_token ValueError with "{}"'.format(token))
                return None
            if not firebase_user:
                logger.info('No firebase_user for token "{}"'.format(token))
                return None

            user_id = firebase_user.get('user_id')
            logger.info("firebase user id: {}".format(user_id))
            try:
                user = User.objects.get(id=user_id)
                logger.info('User found: id={}, email={}'.format(user_id, user.email))
            except User.DoesNotExist:
                raise exceptions.AuthenticationFailed('No such user')
            return (user, None)
        else:
            # no token provided
            return None
Viewset:
from rest_framework import viewsets
from app.authentication import FirebaseAuthentication
from app.models import User
from app.serializers import UserSerializer


class UserViewSet(viewsets.ModelViewSet):
    queryset = User.objects.all()
    serializer_class = UserSerializer
    lookup_field = 'pk'
    authentication_classes = (FirebaseAuthentication,)
settings:
REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        # 'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
        # 'rest_framework_firebase.authentication.Firebaseuthentication',
        # 'app.authentication.FirebaseAuthentication',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',  # noqa E501
}

FIREBASE_AUTH = {
    'FIREBASE_ACCOUNT_KEY_FILE': os.path.join(SETTINGS_DIR, 'firebase.json'),
}
Expected behavior
FirebaseAuthentication.authenticate() is called and log statements should be reported
Actual behavior
backend_1         | Traceback (most recent call last):
backend_1         |   File "/usr/local/lib/python3.6/site-packages/django/core/handlers/exception.py", line 35, in inner                                                              
backend_1         |     response = get_response(request)
backend_1         |   File "/usr/local/lib/python3.6/site-packages/django/core/handlers/base.py", line 128, in _get_response                                                          
backend_1         |     response = self.process_exception_by_middleware(e, request)
backend_1         |   File "/usr/local/lib/python3.6/site-packages/django/core/handlers/base.py", line 126, in _get_response                                                          
backend_1         |     response = wrapped_callback(request, *callback_args, **callback_kwargs)                                                                                       
backend_1         |   File "/usr/local/lib/python3.6/site-packages/django/views/decorators/csrf.py", line 54, in wrapped_view                                                         
backend_1         |     return view_func(*args, **kwargs)
backend_1         |   File "/src/django-rest-framework/rest_framework/viewsets.py", line 103, in view                                                                                 
backend_1         |     return self.dispatch(request, *args, **kwargs)
backend_1         |   File "/src/django-rest-framework/rest_framework/views.py", line 483, in dispatch                                                                                
backend_1         |     response = self.handle_exception(exc)
backend_1         |   File "/src/django-rest-framework/rest_framework/views.py", line 443, in handle_exception                                                                        
backend_1         |     self.raise_uncaught_exception(exc)
backend_1         |   File "/src/django-rest-framework/rest_framework/views.py", line 471, in dispatch                                                                                
backend_1         |     self.initial(request, *args, **kwargs)
backend_1         |   File "/src/django-rest-framework/rest_framework/views.py", line 389, in initial                                                                                 
backend_1         |     self.check_permissions(request)
backend_1         |   File "/src/django-rest-framework/rest_framework/views.py", line 322, in check_permissions                                                                       
backend_1         |     if not permission.has_permission(request, self):
backend_1         | AttributeError: 'FirebaseAuthentication' object has no attribute 'has_permission'  
As you can see, I purposedly removed all permission stuff from my code, yet the error persists. This just doesn't make any sense, FirebaseAuthentication is inheriting BaseAuthentication, not BasePermission...