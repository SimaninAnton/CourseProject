dw commented on 17 Apr 2015
Hi there,
I expect this will be quickly shot down, but I'd lose sleep at night if I didn't at least try: the current Serializer.__repr__ implementation is basically ruining my life, because I can no longer use the bog-standard, tried-and-trusted-for-almost-2-decades-now print statement to debug code without utterly devastating my terminal window and being flooded with endless amounts of useless information.
I have several serializers in my current project that are nested to such an extent that any reference to the serializer causing its repr() to be called produces 575 lines of junk on my terminal. If I, God help me, accidentally trigger such a reference from within a loop, I basically need a few GB extra disk space just to cope with Terminal.app's scrollback buffer.
Print debugging isn't the only thing Serializer.repr() breaks â€“ for example it doesn't compose with the standard logging package without producing garbage in the resulting log files. The usual habit of using the %r format specifier to prevent multi-line splitting in the output has no effect here.
Similarly I cannot simply call pprint(vars(obj)) or pprint(locals()) if obj or locals() happens to refer to a serializer. 600 line mess again.
As for the usefulness of the current repr(), it's really beautiful but I don't think I've ever specifically referred to its output, at least beyond the kwargs supplied to the current instance I'm calling repr() on. Would there be a snowball's chance in hell of perhaps moving it to a helper method? dump_serializer_tree() or something.
The only popular precedent I know for multi-line repr() is within Django itself: django.request.Request does the same thing, and I believe it to be broken for the same reasons. Notably, as far as I'm aware the Python standard library never does this.