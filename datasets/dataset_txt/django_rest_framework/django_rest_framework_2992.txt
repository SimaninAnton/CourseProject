Contributor
pkkid commented on 8 Dec 2012
HyperlinkedModelSerializer does not provide the serializer we are hyperlinking to. This means there is no programmable way to follow this relationship if navigating the the serializers via Python.
Why do I want to navigate the serializers? -- To build a generic filtering (search) mechanism for any API that includes to ability to filter on linked serializers. I can currently follow the relationships when we link to a serializer directly (not using the hyperlink classes). The serializer is there, I can reach in, grab the attributes I want to filter on and move on. However, I hit a wall when trying to do this in the other direction via HyperlinkedRelatedField, because the serializer isn't referenced anywhere.
There are three solutions to this problem that I can think of:
1.) Rather than having the HyperlinkedRelatedField take a view name, have it take a serializer reference and get the URL from the built in "url" field.
2.) Simply add another (maybe optional?) argument to HyperlinkedRelatedField that takes the serializer class allowing us to follow the chain.
3.) Same as number 2, but I make a subclass of HyperlinkedRelatedField and do this on my own. I don't like this method as I was hoping the filtering functionality would be something that you might consider pulling into the project seeing as you don't offer this already.
If you have time some evening I'd love to chat about the problem in more detail as well as talk about the current implementation I have for filtering to possibly get something baked into DRF by default.