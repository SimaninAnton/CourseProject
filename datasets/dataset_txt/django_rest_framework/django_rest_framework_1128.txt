pySilver commented on 25 Jul 2016
I find it's painful to validate data and in the meantime support partial/full updates that leads to code like this:
    def validate(self, attrs):
        logo = attrs.get('logo', getattr(self.instance, 'logo', None))
        offer = attrs.get('offer', getattr(self.instance, 'offer', None))

        subtype = attrs.get('subtype')
        promo_code = attrs.get('promo_code')
        date_start = attrs.get('date_start')
        date_end = attrs.get('date_end')

        if self.partial and self.instance:
            subtype = attrs.get('subtype', self.instance.subtype)
            promo_code = attrs.get('promo_code', self.instance.promo_code)
            date_start = attrs.get('date_start', self.instance.date_start)
            date_end = attrs.get('date_end', self.instance.date_end)

        # setup default instance values
        if logo is None and offer is not None:
            attrs['logo'] = offer.logo

        if date_end and date_start >= date_end:
            raise serializers.ValidationError({
                'date_end': _(u"Coupon ending date should be greater "
                              u"than starting date.")
            })

        if subtype == Coupon.PROMO_CODE and not promo_code:
            raise serializers.ValidationError(
                _(u"Promo Code field is required."))

        return attrs
It would be nice to have some 1 pythonic way to do the validation, so one won't have to write anything like that attrs.get('logo', getattr(self.instance, 'logo', None)).
The main purpose of this ticket is to trigger a discussion which had started at #3070
8