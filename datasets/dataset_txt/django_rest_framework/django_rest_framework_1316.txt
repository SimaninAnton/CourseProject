dtheodor commented on 26 Jan 2016
Hi,
I have an issue when trying to serialize data from instances. My serializers have a lot of non-required fields, some of which have default values. My instance objects do not have all attributes defined on the serializer, but they do have all mandatory attributes defined there. I see a difference in behavior between these two types of non-required fields:
A non-required field is simply skipped from serialization:
class Ser1(Serializer):
  field = CharField(required=False)

instance = object()
assert Ser1(instance).data == {}
A non-required field with a default value however throws an error
class Ser2(Serializer):
  field = CharField(default='value1')

instance = object()
assert Ser2(instance).data == {'field': 'value1'} # throws AttributeError
I would expect the latest assertion to be true. At least this is how deserialization works:
class Ser3(Ser1, Ser2): pass

s = Ser3(data={})
s.is_valid()
assert s.data == {'field': 'value1'}
Is there a reason why serialization between these two field types is implemented differently and in contrast to its deserialization counterpart?