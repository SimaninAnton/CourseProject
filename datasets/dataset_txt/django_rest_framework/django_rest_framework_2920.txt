orokusaki commented on 9 Feb 2013
I recently switched from using your serializers app to using the rest framework, and I love its flexibility. I can do things like:
def get(self, request):
    instance = SomeModel.objects.get(pk=1)
    serializer = SomeSerializer(instance)
    return serializer.data
This means I can take full advantage of the rest framework's ability to take a model and return its JSON in a meaningful way (vs simply using Django's serializers, which don't even support related objects, etc.), without having to use the entire rest framework, if I don't need to.
However, I'd also like to take advantage of the facilities the rest framework uses to validate an instance during the creation cycle. I'm currently doing something like:
def post(self, request, json_data):
    deserialized = json.loads(json_data)
    person_data = deserialized['person_data']
    form = MyPersonForm(person_data)
    if form.is_valid():
        person = form.save()
You might ask, "Why is he even using a custom view that just creates an object, rather than using the rest framework wholesale?". The answer is that I'm creating multiple objects, and performing other business logic that doesn't fit into the realm of a normal REST API. However, I'd love to not have to commit the above atrocities, if at all possible.
Is there anything in the rest framework that can be exposed to help with this?