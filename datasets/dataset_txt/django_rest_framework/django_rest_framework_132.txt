lizsGH commented on 5 Jun 2019 â€¢
edited
Checklist
I have verified that that issue exists against the master branch of Django REST framework.
I have searched for similar issues in both open and closed tickets and cannot find a duplicate.
This is not a usage question. (Those should be directed to the discussion group instead.)
This cannot be dealt with as a third party library. (We prefer new functionality to be in the form of third party libraries where possible.)
I have reduced the issue to the simplest possible case.
I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)
Description
python3.7.3
Django==2.2
djangorestframework==3.9.2
I use custom throttle in my api.
throttles.py
class UpdatePriceRateThrottle(UserRateThrottle):
     scope = 'update_price'
settings.py
REST_FRAMEWORK = {
    'DEFAULT_THROTTLE_RATES': {
        'update_price': '2/minute',
    }
}
views.py
class DevicesViewSet(viewsets.ModelViewSet):
    @action(methods=['post'], detail=False, url_path='xxx', 
            throttle_classes=[UpdatePriceRateThrottle])
    def update_price(self, request):
       pass
Then running with gunicorn: gunicorn --bind=0.0.0.0:8000 --workers=4 --worker-class=eventlet xx.wsgi.
I request the api per second:
time(s) status expected available in seconds
0 pass
1 pass
2 throttle 57
3 throttle 56
.. throttle ...
31 throttle 28
32 pass
33 pass
34 throttle 58
35 throttle 57
... throttle ...
67 throttle 25
68 pass
69 pass
70 throttle 58
71 throttle 57
... throttle ...
86 throttle 42
87 pass
88 pass
89 throttle 58
... ... ...
When I run the server by one worker, everything gone well.
gunicorn --bind=0.0.0.0:8000 --workers=1 --worker-class=eventlet xx.wsgi or python manage.py runserver 0.0.0.0:8000