IgorBeschastnov commented on 24 May 2019
Checklist
[✔] I have verified that that issue exists against the master branch of Django REST framework.
[✔] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.
[✔] This is not a usage question.
[✔] This cannot be dealt with as a third party library.
[✔] I have reduced the issue to the simplest possible case.
I have included a failing test as a pull request - this is more of a design issue
Steps to reproduce
Create any ModelSerializer, not only HyperlinkedModelSerializer, and assign it as a serializer to [List]CreateApiView.
Expected behavior
url field of the serializer.data will not be used for Location header.
Actual behavior
CreateModelMixin will still try to create a Location header from the url field.
Automatic Location header may be a useful feature, but it either has to be optional or better documented.
In our project we have a model with url text field, which can be multiline in theory (it's not an actual url), but nobody tried to create one with multiple lines of text until recently. DRF returned an error, because headers can't contain newlines, but value of the url field did. Moreover, even though an error was returned, model instance still was created, because headers are created after model instance (source).
This behaviour is documented only for HyperlinkedModelSerializer, and not even mentioned in CreateApiView or ListCreateApiView, only in CreateModelMixin, which is a bit lower level. Of course, once you know about it you will watch out for it, but it's still really easy to miss.
Links: URL_FIELD_NAME setting description, CreateApiView description, ListCreateApiView description
Possible solutions
Leave everything as is, but document this feature better
Check if model has url field and not use it for Location if it does, or/and possibly print out a warning that this may lead to unexpected behaviour
Return empty dict from get_success_headers method and let the developer override it
If the resolution is that this issue should be fixed in code, I can try to work on it. I personally think that both 1 and 2 of the above should be done.
P.S. English is not my first language.
2