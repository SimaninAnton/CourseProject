Contributor
maryokhin commented on 10 Dec 2014
Starting point:
A completely regular ModelViewSet known as UserViewSet.
The routes /users/ and /users/<pk>/ are registered using a router:
user_routes = router.register('users', UserViewSet, base_name='user')
Use case:
Now, I need to have a set of routes for the user that route to the exact same view, have the exact same logic, ordering, filtering and searching, but just do lookups using the user's username, but at the same time keep the old pk routes. Basically, I want to lookup the user by both username and pk.
Problem:
After searching here and there I found that GenericViews have lookup_field and lookup_value_regex that default to pk and [^/.]+. This allows to change the lookup logic statically.
Ideally, to keep my code dry I would have done something like:
user_pk_routes = router.register('users', UserViewSet, base_name='user')
user_username_routes = router.register('users', UserViewSet.as_view(lookup='username', lookup_value_regex='[\w_]'), base_name='user.username')
The way it is now I would have to create a special UserUsernameViewSet(UserViewSet) where I would set the values of lookup_field and lookup_value_regex statically and point the class type to the router:
user_username_routes = router.register('users', UserUsernameViewSet, base_name='user.username')
This, of course, is a way to do it (and the way that I will do it, if this feature request is rejected), but in my opinion is not DRY, forces to have a proxy view, and could be better.
P. S. I have also found a small bug I can fix. This will fail:
UserViewSet.as_view(lookup_value_regex='[\w_]')
This is because as_view() checks that the passed initkwargs are an attribute of the underlying class and lookup_value_regex was forgotten on GenericAPIView.
1