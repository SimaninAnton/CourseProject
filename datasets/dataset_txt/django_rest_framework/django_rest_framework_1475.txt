awbacker commented on 29 Oct 2015
I upgraded to 3.3 and starting using the new ListField (and trying ListSerializer). I have a series of "bad values" I test on, and in 3 of those 5 cases I get a proxy object back instead of a validation error message.
The test case looks like this:
# in the serializer
corner_points = serializers.ListField(child=serializers.IntegerField(), required=True)

# test case's invalid values, for one reason or another
test_cornerpoints = [   [1, 2, 3, 4, 5, 6, 7], [], ['abc'], 'efg', 1 ]
for cp in test_cornerpoints:
    self.api = APIClient()
   # also has an image, so this posts as multipart form-data
    resp = self.api.post(url, data={ 'corner_points': cp })  
    print(resp.data)
** I should mention that I have a custom validate_corner_points function ** I'm checking into that now, it just requires that the list length be divisible by 2.
And the output from the print statement above (the status code is 400)
{'corner_points': [<django.utils.functional.__proxy__ object at 0x1154b9090>]}
{'corner_points': [<django.utils.functional.__proxy__ object at 0x115232d10>]}
{'corner_points': [u'A valid integer is required.']}
{'corner_points': [u'A valid integer is required.']}
{'corner_points': [<django.utils.functional.__proxy__ object at 0x1153011d0>]}
Prior to this I was using a custom list serializer that handed the field_name[] format that arrays come in in FormData. So far I think the new version is working with this, but the docs should make note that request.POST is gone now, and you can only use requests.data. At least in my case, there were no values in request.POST for multipart/form-data.