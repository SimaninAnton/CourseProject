Karmak23 commented on 14 Mar 2015
Hi, I'm having trouble making a model serializer with a GFK. I'm using DRF 3.1.0.
(I already read http://stackoverflow.com/q/14448764/654755)
Given this model and this serializer:
class ChainedItemSerializer(serializers.HyperlinkedModelSerializer):

    """ ChainedItem serializer. """

    item = serializers.SerializerMethodField()

    def get_item(self, obj):
        """ Turn a [GFK] processor or processing chain into an API URL. """

        item = obj.item

        serializer = serializers.HyperlinkedIdentityField(
            source=item, view_name='%s-detail' % slugify(unicode(
                item._meta.verbose_name)).replace(u'-', u''))
        # , context={'request': self.context['request']})

        return serializer.to_representation(item)

    class Meta:
        model = models.ChainedItem
        exclude = []
Instanciating HyperlinkedIdentityField without the context argument, it raises HyperlinkedIdentityField requires the request in the serializer context. Add context={'request': request} when instantiating the serializer., which seems fair regarding the DRF documentation and the questions you answered on S.O.
But then, uncommenting the context argument passing, it complains __init__() got an unexpected keyword argument 'context' (see full stacktrace on my sentry).
Having read all classes __init__ code (in master branch) from HyperLinkIdentityField up to Field, it seems none of them takes care of kwargs['context'] nor records it anywhere.
Trying to set serializer.context = â€¦ manually between __init__() and to_representation() obviously raises can't set attribute (sorry for even having tried that ;-) ).
Seems I'm stuck. What am I missing ?