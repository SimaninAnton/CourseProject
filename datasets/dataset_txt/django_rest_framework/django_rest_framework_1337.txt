GerardPaligot commented on 11 Jan 2016
Hi,
With the version 3.1.1 of DRF, that was easy to update a ManyToManyField. I just needed to specify a PrimaryKeyRelatedField for my ManyToManyField and make my request with an interger which correspond to identifiers of my model field.
My model:
class PrivateTopic(models.Model):
    participants = models.ManyToManyField(User, verbose_name=u'Participants', related_name='participants',
    # A lof of fields.
My serializer:
class PrivateTopicUpdateSerializer(serializers.ModelSerializer, TitleValidator, TextValidator,
                                   ParticipantsUserValidator):
    participants = serializers.PrimaryKeyRelatedField(many=True, queryset=User.objects.all(), required=False, )
    # A lot of fields.
And my test case:
def test_update_mp_participants(self):
    """
    Update participants of a MP.
    """
    another_profile = ProfileFactory()
    data = {
        'participants': another_profile.user.id
        # 'participants': 42 to update another participant if I want.
    }
    response = self.client.put(reverse('api-mp-detail', args=[self.private_topic.id]), data)
    self.assertEqual(response.status_code, status.HTTP_200_OK) # FAIL, error 400