Contributor
rsinger86 commented on 15 Sep 2019
DRF's model-backed serializers are awesome for productivity and get me 70% there for many projects. However, I find it a bit awkward to use serializers for non-CRUD resources. I often do, so my project is consistent in how it validates incoming data. But it often feels like overkill to define an whole serializer class and there's cognitive overhead in having to locate that definition to understand the parameters.
So I was recently inspired by Instagram's recent post on how they integrated types for Django HTTP endpoints. I think it'd be awesome if DRF had a version of api_view that did something similar...
@typed_api_view("GET")
def search_movies(request, year: int, actors: List[str], title: str):
    # ORM logic
    return Reponse(data)
Encode's TypeSystem library could be used to annotate and validate complex data types sent by PUT or POST requests.
import typesystem

class Album(typesystem.Schema):
    title = typesystem.String(max_length=100)
    release_date = typesystem.Date()

@typed_api_view("POST")
def create_album(request, account: Album):
    # ORM logic
    return Reponse(data)
I'd love to hear some feedback and I'd be happy to work on this either as a 3rd-party library or an eventual addition to the main codebase.