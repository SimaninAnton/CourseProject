ianfp commented on 5 Jun 2014
I have two models in a parent-child relationship; note the unique constraint:
class Design(models.Model):
    # some fields ...

class Module(models.Model):
    design = models.ForeignKey(
        'Design',
        related_name='modules')

    x = models.FloatField()

    y = models.FloatField()

    # other fields....

    class Meta:
        unique_together = (("x", "y", "design"),)
And corresponding serializers:
class DesignSerializer(serializers.ModelSerializer):
    modules = ModuleSerializer(many=True, allow_add_remove=True)
    class Meta:
        model = Design
    # ...

class ModuleSerializer(serializers.ModelSerializer):
    class Meta:
        model = Module
    # ...
Now, according to the business logic, when we update a design, we delete all of the modules and create new ones afresh from the client data. The problem is: if the client sends the same data again, the new module at position x, y will be created before the old one at x, y is deleted, resulting in a duplicate key error.
The relations to be deleted should be deleted before the new ones are added. I will submit a pull request.