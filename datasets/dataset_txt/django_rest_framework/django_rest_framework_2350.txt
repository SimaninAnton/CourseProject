Contributor
cancan101 commented on 9 Oct 2014
Right now I am using this mixin for my Viewsets in which I want to limit the the values a related view can take on to those that the user is permissioned to. In other words this extends the filter_backends and permission_classes concept to the related fields:
class SecuredFieldMixin(object):
    """
    Filters the queryset for a related field to those items the user has permissions for
    """

    def get_serializer(self, *args, **kwargs):
        parent = super(SecuredFieldMixin, self).get_serializer(*args, **kwargs)
        for secured_field in self.secured_fields:
            if secured_field in parent.fields:
                parent.fields[secured_field].queryset = self.filter_queryset(parent.fields[secured_field].queryset)

        return parent
Right now the mixin applies this filtering to the fields listed in secured_fields.
It seems like having this permisioning/ filtering is valuable. Is this the best way to implement the logic? Does it make sense to add this to the core DRF?