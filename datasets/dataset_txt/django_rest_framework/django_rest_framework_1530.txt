ncoghlan commented on 25 Sep 2015
After the long detour described below, I eventually figured out that a third party validator was throwing a ValidationError that had a list in "exc.details", rather than the mapping DRF expected.
This misbehaviour currently shows up as an internal server error, as Serializer.errors property attempts to feed the non-mapping to the ReturnDict constructor, leading to the confusing behaviour described below, and in the section titled "Snag 2: Invalid Validation Error" in http://devblog.kogan.com/django-rest-framework-features/
I'm currently attempting to debug an issue in RepoFunnel where submitting a POST command using the HTML Form in the browsable API works, but the raw HTTP+JSON submission fails.
The full serializer definition is at https://github.com/ncoghlan/repofunnel/blob/master/copr2pulp/restapi.py#L16, but the relevant aspects seem to be:
class FeedSerializer(serializers.HyperlinkedModelSerializer):
    class Meta:
        model = models.Feed
        fields = ("id", "name", "url", "feed_url")

class Feed(models.Model):
    name = models.CharField(max_length=30, unique=True)
    pulp_repo = models.CharField(max_length=35, null=True)
    feed_url = models.URLField(unique=True)
Both the HTML Form and the raw JSON submission correctly pick up that only the "name" and "feed_url" fields need to be populated on submission, but the form submission works, while the raw JSON submission fails with a validation error.
Unfortunately, the Django DEBUG traceback is unhelpful, as it reports an unrelated error in attempting to construct the ValidationError exception. Using the Werkzeug debugger via RunServerPlus I believe I've traced that back as far as this line: https://github.com/tomchristie/django-rest-framework/blob/master/rest_framework/serializers.py#L209
The problem appears to be that self._errors is a list rather than a mapping:
['This field may not be null.']
That list presumably came from exc.details on a ValidationError thrown somewhere else. The call to the self.errors property then fails as it attempts to interpret the list as a mapping while initialising the ReturnDict instance.
Patching the code to use self._errors instead allows the page to render, but doesn't seem like the correct fix (since the returned error still doesn't say which field isn't allowed to be NULL).