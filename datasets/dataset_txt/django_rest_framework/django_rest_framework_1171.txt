wolfadactyl commented on 21 Jun 2016
Checklist
I have verified that that issue exists against the master branch of Django REST framework.
I have searched for similar issues in both open and closed tickets and cannot find a duplicate. - #3999 is similar in that it involves nested serializers but not the same issue
This is not a usage question. (Those should be directed to the discussion group instead.)
This cannot be dealt with as a third party library. (We prefer new functionality to be in the form of third party libraries where possible.)
I have reduced the issue to the simplest possible case.
I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.) - No PR but have included a viable test case here instead.
Steps to reproduce
Create a serializer with a nested serializer.
Create a field in the parent serializer with a source that points to a field in the nested serializer.
Serialize a data dict that sets the sourced field in the parent serializer but not the nested one.
Call is_valid on the parent serializer.
Expected behavior
The nested serializer merges data with the existing dictionary.
Actual behavior
The nested serializer overwrites the existing dictionary entirely.
Test Case
class TestNestedOverlappingSerializer:
    def setup(self):
        class NestedOverlappingSerializer(serializers.Serializer):
            one = serializers.IntegerField(max_value=10)
            two = serializers.IntegerField(max_value=10)

        class TestSerializer(serializers.Serializer):
            onesie = CharField(source='nested.one')
            nested = NestedOverlappingSerializer()

        self.Serializer = TestSerializer

    def test_nested_overlapping_validate(self):
        input_data = {
            'onesie': '1',
            'nested': {
                'two': '2',
            }
        }
        expected_data = {
            'nested': {
                'one': 1,
                'two': 2,
            }
        }
        serializer = self.Serializer(data=input_data)
        assert serializer.is_valid()
        assert serializer.validated_data == expected_data