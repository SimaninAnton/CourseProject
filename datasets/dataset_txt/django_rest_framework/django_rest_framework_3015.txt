Contributor
robromano commented on 14 Nov 2012
I looked at 2 other token based authentication schemes, django-tokenapi and tastypie. Both seem to tie the user ID into the token authorization header so that only (a combined user ID + token key), when found in the table, is a successful authorization.
I like the simplicity of the authtoken.Token model, but is there some chance we might mis-authenticate (by random chance) users by only looking at the hashed random uuid ?
    def authenticate(self, request):
        auth = request.META.get('HTTP_AUTHORIZATION', '').split()

        if len(auth) == 2 and auth[0].lower() == "token":
            key = auth[1]
            try:
                token = self.model.objects.get(key=key)
            except self.model.DoesNotExist:
                return None

            if token.user.is_active:
                return (token.user, token)
Should we be doing something like Token.objects.get(key=key, user__id=id where id is also embodied in the Authorization header?