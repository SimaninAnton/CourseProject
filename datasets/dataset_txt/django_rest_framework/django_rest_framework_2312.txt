parthakonda commented on 24 Oct 2014
## models.py

from django.db import models
from django.contrib.auth.models import User

COURSE_TYPES = (('Technical', 'Technical'), ('Music', 'Music'), ('Food', 'Food'))

#Course
class Course(models.Model):
    """ To store all the courses list """
    name = models.CharField(max_length = 50)
    description = models.CharField(max_length = 200)
    course_type = models.CharField(max_length = 20, choices = COURSE_TYPES)

    class Meta:
        unique_together = ('name', 'course_type')

    def __unicode__(self):
        return '%s~%s~' % (self.name, self.course_type)


#Student
class Student(models.Model):
    """ To store information about Student """
    user = models.ForeignKey(User, null = True, blank=True, related_name = "student")
    about = models.CharField(max_length = 200, null = True, default = "")
    profile_pic = models.URLField(max_length = 300, null = True)
    cover_pic = models.URLField(max_length = 300, null = True)
    followers = models.IntegerField(default = 0)
    following = models.IntegerField(default = 0)
    city = models.CharField(max_length = 50)
    state = models.CharField(max_length = 50)
    street = models.CharField(max_length = 50)
    mobile_no = models.IntegerField(max_length = 20)
    mobile_no_verified = models.BooleanField(default = False)
    courses_completed = models.IntegerField(default = 0)
    courses = models.ForeignKey(Course, related_name ="student")
##serializers.py

from rest_framework import serializers
from django.contrib.auth.models import User
from .models import Student, Course
from rest_framework.reverse import reverse


class UserSerializer(serializers.ModelSerializer):
    """ Course serializer """
    class Meta:
        model = User
        fields = ('first_name', 'last_name', 'email')


class CourseSerializer(serializers.ModelSerializer):
    """ Course serializer"""
    class Meta:
        model = Course
        fields = ('id', 'name', 'description', 'course_type')


class StudentSerializer(serializers.ModelSerializer):
    """ Student serializer"""
    user = UserSerializer()
    courses = CourseSerializer(many=True, allow_add_remove=True)

    class Meta:
        model = Student
        fields = ('about', 'profile_pic', 'cover_pic', 'followers', 'following', 'mobile_no', 'mobile_no_verified', 'courses_completed','user','courses')
##views.py

from django.shortcuts import render
from rest_framework import viewsets
from .models import Student, Course
from django.contrib.auth.models import User
from .serializers import StudentSerializer, CourseSerializer, UserSerializer

class StudentViewSet(viewsets.ModelViewSet):
    """
    This viewset automatically provides `list` and `detail` actions.
    """
    queryset = Student.objects.all()
    serializer_class = StudentSerializer

    def post(self, *args, **kwargs):
        import pdb;pdb.set_trace()
        return

class UserViewSet(viewsets.ModelViewSet):
    """
    This viewset automatically provides `list` and `detail` actions.
    """
    queryset = User.objects.all()
    serializer_class = UserSerializer


class CourseViewSet(viewsets.ModelViewSet):
    """
    This viewset automatically provides `list` and `detail` actions.
    """
    queryset = Course.objects.all()
    serializer_class = CourseSerializer
I want to save multiple courses and also want to provide multiple update. But while i'm updating
input data
{
    "about": "sadf", 
    "profile_pic": "http://www.facebook.com", 
    "cover_pic": "http://www.facebook.com", 
    "followers": 0, 
    "following": 0, 
    "mobile_no": 0, 
    "mobile_no_verified": false, 
    "courses_completed": 0, 
    "user": {
          "first_name":"partha",
          "last_name":"asdf",
         "email":"itesmepardhu@gmail.com"
   },
    "courses": [
             {"name":"asdpolpof",
               "description":"asdf",
               "course_type":"Technical"
   }]
}
It saying that
HTTP 400 BAD REQUEST
Content-Type: application/json
Vary: Accept
Allow: GET, POST, HEAD, OPTIONS

{
    "courses": [
        "This field is required."
    ]
}
what is the solution ?