dan-passaro commented on 25 Apr 2017
The RelatedField class and subclasses will fail to instantiate if queryset= is not provided or a get_queryset() implementation is not provided.
This implies that RelatedField itself does something with this attribute, when in fact it does nothing. It's entirely up to the subclass to make use of this method.
This is surprising. As a new user I assumed that, perhaps, if the queryset argument is mandatory, RelatedField must have some validation of some sort that makes use of it. But that's not true. In my subclass, I was able to set queryset to e.g. User.objects.none(), and I was able to override get_queryset() to have assert False is True as the body, with no change in application behavior. But if I simply left queryset out altogether, the app fails to run.
I see that the built-in subclasses of RelatedField all seem to use get_queryset() when doing lookups in the to_internal_value() method. However, this is all something the subclasses have in common. Since it has no impact on RelatedField itself it should not be something that's required at that level of the API.