Olerdrive commented on 1 Oct 2019 â€¢
edited
Checklist
I have verified that that issue exists against the master branch of Django REST framework.
I have searched for similar issues in both open and closed tickets and cannot find a duplicate.
This is not a usage question. (Those should be directed to the discussion group instead.)
This cannot be dealt with as a third party library. (We prefer new functionality to be in the form of third party libraries where possible.)
I have reduced the issue to the simplest possible case.
I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)
Steps to reproduce
Imagine any simple ModelVieset with a Serializer like the following which somehow uses provided context to enrich data:
class SimpleSerializer(serializers.Serializer):
    value = serializer.CharField()

    def validate(self, attrs):
        if not attrs.get("value"):
            attrs["value"] = self.context["context_key"]
        return attrs


class SimpleViewSet(ModelViewSet):
    queryset = Model.objects.all()
    serializer_class = SimpleSerializer

    @action(methods=['POST'], detail=False)
    def simple_action(self, request):
        serializer = self.get_serializer(data=request.data, context={"context_key": "value"}
        serializer.is_valid(raise_exception=True)
        return Response(data=serializer.validated_data, status=status.HTTP_200_OK)
Expected behavior
Accessing simple_action handler works correctly and passed context_key key exists in the serializer's context
Actual behavior
The code will fail with a KeyError as follows:
...
...
...
    attrs["value"] = self.context["context_key"]
KeyError: 'context_key'
That happens because of generic Viewset's get_serializer method which simply overrides any provided context kwarg with the default context from get_serializer_context.