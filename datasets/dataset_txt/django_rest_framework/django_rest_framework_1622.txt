Contributor
rubendura commented on 19 Aug 2015
I am trying to serialise a related model as a list using their names. I can't use a StringRelatedField as the __str__ representation of my model doesn't match the desired output.
My approach was to use a ListField specifying a child with a source attribute, such as child=StringField(source='name'), but the inner source is being ignored.
There is no reference in the documentation of this being an issue. It only mentions that ListFields validate lists of objects. Maybe this is not the intended use case but it is not mentioned in the docs, although seems reasonable to me.
class A(models.Model):
    name = models.CharField(max_length=72)

class B(models.Model):
    name = models.CharField(max_length=72, unique=True)
    field_I_care_about_but_not_users = models.IntegerField()
    a = models.ForeignKey(A, related_name='related_bs')

    def __str__(self):
        return field_I_care_about_but_not_users

class ASerializer(serializers.ModelSerializer):
    bs = serializers.ListField(
        source='related_bs',
        child=serializers.CharField(source='name'))

    class Meta:
        model = A
        fields = ('name', 'bs')
When using ASerializer I get field_I_care_about_but_not_users in the list instead of name.
I know I can override to_representation, but it surprised me when it didn't work.