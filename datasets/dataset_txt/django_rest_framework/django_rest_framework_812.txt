Contributor
manjitkumar commented on 28 Apr 2017 •
edited
Checklist
I have verified that that issue exists against the master branch of Django REST framework.
I have searched for similar issues in both open and closed tickets and cannot find a duplicate.
This is not a usage question. (Those should be directed to the discussion group instead.)
This cannot be dealt with as a third party library. (We prefer new functionality to be in the form of third party libraries where possible.)
I have reduced the issue to the simplest possible case.
I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)
Code
from rest_framework import serializers
from incidents.models import Incident

class NodeDataField(serializers.RelatedField):

    def to_representation(self, node):
        return {
            "id": node.id,
            "name": node.name,
            "ipaddress": node.ipv4
        }

    def to_internal_value(self, id):
        pass
This give TypeError at /api/v1/incidents/
unhashable type: 'dict'
unhashable type: 'dict'
5      <label class="col-sm-2 control-label {% if style.hide_label %}sr-only{% endif %}">
6        {{ field.label }}
7      </label>
8    {% endif %}
9  
10    <div class="col-sm-10">
11      <select class="form-control" name="{{ field.name }}">
12        {% if field.allow_null or field.allow_blank %}
13          <option value="" {% if not field.value %}selected{% endif %}>--------</option>
14        {% endif %}
15  
            
      {% for select in field.iter_options %}
      

      
16            {% if select.start_option_group %}
17              <optgroup label="{{ select.label }}">
18            {% elif select.end_option_group %}
19              </optgroup>
20            {% else %}
21              <option value="{{ select.value }}" {% if select.value|as_string == field.value|as_string %}selected{% endif %} {% if select.disabled %}disabled{% endif %}>{{ select.display_text }}</option>
22            {% endif %}
23       {% endfor %}
24     </select>
Stack trace
/opt/grofers/firealarm-api/api/firealarm_api/lib/python3.4/_collections_abc.py in update
                                    self[key] = value
     ...
▶ Local vars
/opt/grofers/firealarm-api/api/firealarm_api/lib/python3.4/collections/__init__.py in __setitem__
            self.__update(*args, **kwds)
        def __setitem__(self, key, value,
                        dict_setitem=dict.__setitem__, proxy=_proxy, Link=_Link):
            'od.__setitem__(i, y) <==> od[i]=y'
            # Setting a new item creates a new link at the end of the linked list,
            # and the inherited dictionary is updated with the new key/value pair.
                        if key not in self:
     ...
                self.__map[key] = link = Link()
                root = self.__root
                last = root.prev
                link.prev, link.next, link.key = last, root, key
                last.next = link
                root.prev = proxy(link)
▼ Local vars
Variable  Value
self  
OrderedDict()
dict_setitem  
<slot wrapper '__setitem__' of 'dict' objects>
value  
'Node object'
proxy  
<built-in function proxy>
Link  
<class 'collections._Link'>
key  
{'id': 1, 'ipaddress': '172.31.84.130', 'name': 'abc123.con'}
Steps to reproduce
Make a GET call to a view where this Related Serializer field is being used and /?format=api fails with above described error whereas /?format=json works returns response as expected.
Expected behavior
It should display rest-framework's browsable API view page
Actual behavior
Failing with TypeError at /api/v1/incidents/
unhashable type: 'dict'
1