dilyanpalauzov commented on 6 Nov 2017
diff --git a/rest_framework/fields.py b/rest_framework/fields.py
--- a/rest_framework/fields.py
+++ b/rest_framework/fields.py
@@ -126,9 +126,7 @@ def set_value(dictionary, keys, value):
         return
 
     for key in keys[:-1]:
-        if key not in dictionary:
-            dictionary[key] = {}
-        dictionary = dictionary[key]
+        dictionary = dictionary.setdefault(key, {})
 
     dictionary[keys[-1]] = value
 
diff --git a/rest_framework/mixins.py b/rest_framework/mixins.py
--- a/rest_framework/mixins.py
+++ b/rest_framework/mixins.py
@@ -20,8 +20,7 @@ class CreateModelMixin(object):
         serializer.is_valid(raise_exception=True)
         self.perform_create(serializer)
         headers = self.get_success_headers(serializer.data)
-        if 'Location' not in headers:
-            headers['Location'] = request._request.get_full_path() + str(getattr(serializer.instance, self.lookup_field)) + '/'
+        headers.setdefault('Location', request._request.get_full_path() + str(getattr(serializer.instance, self.lookup_field)) + '/')
         return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)
 
     def perform_create(self, serializer):
diff --git a/rest_framework/renderers.py b/rest_framework/renderers.py
--- a/rest_framework/renderers.py
+++ b/rest_framework/renderers.py
@@ -337,8 +337,7 @@ class HTMLFormRenderer(BaseRenderer):
 
         style = dict(self.default_style[field])
         style.update(field.style)
-        if 'template_pack' not in style:
-            style['template_pack'] = parent_style.get('template_pack', self.template_pack)
+        style.setdefault('template_pack', parent_style.get('template_pack', self.template_pack))
         style['renderer'] = self
 
         # Get a clone of the field with text-only value representation.
@@ -364,8 +363,7 @@ class HTMLFormRenderer(BaseRenderer):
         form = data.serializer
 
         style = renderer_context.get('style', {})
-        if 'template_pack' not in style:
-            style['template_pack'] = self.template_pack
+        style.setdefault('template_pack', self.template_pack)
         style['renderer'] = self
 
         template_pack = style['template_pack'].strip('/')
diff --git a/rest_framework/validators.py b/rest_framework/validators.py
--- a/rest_framework/validators.py
+++ b/rest_framework/validators.py
@@ -136,8 +136,7 @@ class UniqueTogetherValidator(object):
         # have it's value set based on the existing instance attribute.
         if self.instance is not None:
             for field_name in self.fields:
-                if field_name not in attrs:
-                    attrs[field_name] = getattr(self.instance, field_name)
+                attrs.setdefault(field_name, getattr(self.instance, field_name))
 
         # Determine the filter keyword arguments and filter the queryset.
         filter_kwargs = {