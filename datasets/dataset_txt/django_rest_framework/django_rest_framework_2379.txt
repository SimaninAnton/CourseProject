corpulent commented on 17 Sep 2014
Hi, I have this view,
class PostDetail(generics.DestroyAPIView):
    """
    DELETE post by primary key. (Soft delete only,  never permanent.)

    HEADER: Authorization -- "Token <auth_token>"
    """
    queryset = Post.objects.all()
    serializer_class = PostSerializer
    authentication_classes = (authentication.TokenAuthentication,)
    permission_classes = (IsAuthenticatedOrReadOnly, IsOwnerOrReadOnly,)

    def delete(self, request, pk, *args, **kwargs):
        data = request.DATA
        try:
            obj = Post.objects.get(pk=pk)
        except ObjectDoesNotExist:
            return Response('object not exist', status=status.HTTP_404_NOT_FOUND)

        #self.check_object_permissions(request, obj)

        obj.live = False

        obj.save()

        serializer = PostSerializer(obj)
        response = serializer.data

        return Response(response, status=status.HTTP_200_OK)
and this is my permissions.
from rest_framework import permissions
from posts.models import Post


SAFE_METHODS = ['GET', 'HEAD', 'OPTIONS',]


class IsOwnerOrReadOnly(permissions.BasePermission):
    """
    Custom permission to only allow owners of an object to edit it.
    """
    def has_object_permission(self, request, view, obj):
        if request.method in permissions.SAFE_METHODS:
            return True

        return obj.owner == request.user


class IsAuthenticatedOrReadOnly(permissions.BasePermission):
    """
    The request is authenticated as a user, 
    or is a read-only request.
    """
    def has_permission(self, request, view):
        if (request.method in SAFE_METHODS or
            request.user and
            request.user.is_authenticated()):
            return True
        return False
Unless I force a permission check by self.check_object_permissions(request, obj), its ignored. I though object permissions are checked automatically in generic views?