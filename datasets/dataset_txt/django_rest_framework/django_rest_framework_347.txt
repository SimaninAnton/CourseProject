l0b0 commented on 29 Aug 2018 â€¢
edited
Checklist
I have verified that that issue exists against the master branch of Django REST framework.
I have searched for similar issues in both open and closed tickets and cannot find a duplicate.
This is not a usage question.
This cannot be dealt with as a third party library.
I have reduced the issue to the simplest possible case.
I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)
Steps to reproduce
>>> from rest_framework.serializers import DecimalField
>>> DecimalField(max_digits=40, decimal_places=20).to_internal_value('4.0')
Decimal('4.00000000000000000000')
Expected behavior
The result should be Decimal('4.0').
Actual behavior
See above.
Rationale
You might have heard the joke about the museum staff member informing the visitor that the dinosaur on display is 65 million and five years old. When the visitor, astonished, asks how they know so precisely, the staff member informs them that it's really quite simple: the dinosaur was found to be 65 million years old, and that was five years ago.
I'm working on a system which will receive engineering measurement values with various precision in text form - some are integers, others have up to at least six decimal digits of precision. It is important that these values are stored and presented with the same precision as they were recorded. Precision coercion also makes automated testing very awkward, because none of the tests look sensible when I assert that storing a specific number results in a completely different number being returned.
PostgreSQL at least does not normalize decimal numbers to a specific number of decimal places when inserting or selecting, so this should work just fine with existing databases.