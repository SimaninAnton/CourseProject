pmdarrow commented on 26 Aug 2015
With the following serializers:
class FooMixin:
    foo = serializers.CharField()

class BarSerializer(serializers.Serializer, FooMixin):
    bar = serializers.CharField()

class BazSerializer(serializers.Serializer):
    baz = serializers.CharField()
    nested_bar = BarSerializer()
The foo field from the FooMixin is unexpectedly ignored:
>>> from example_app.serializers import BazSerializer
>>> instance = {
...     'baz': 'Baz',
...     'nested_bar': {
...         'bar': 'Bar',
...         'foo': 'foo',
...     }
... }
>>> print(BazSerializer(instance))
BazSerializer({'baz': 'Baz', 'nested_bar': {'bar': 'Bar', 'foo': 'foo'}}):
    baz = CharField()
    nested_bar = BarSerializer():
        bar = CharField()
>>> print(BazSerializer(instance).data)
{'baz': 'Baz', 'nested_bar': OrderedDict([('bar', 'Bar')])}
I tried reversing the mixin inheritance order in BarSerializer but it didn't have any affect.