bluesurfer commented on 4 Aug 2017
I am using the InheritanceManager from django-model-utils to best manage a multitable inheritance relation.
Consider this example taken from the docs :
from model_utils.managers import InheritanceManager

class Place(models.Model):
    # ...
    objects = InheritanceManager()

class Restaurant(Place):
    # ...

class Bar(Place):
    # ...

nearby_places = Place.objects.filter(location='here').select_subclasses()
for place in nearby_places:
    # "place" will automatically be an instance of Place, Restaurant, or Bar
Suppose I have another model:
class Person(models.Model):
    # ...
    visited_places = models.ManyToManyField(to=Place) 
With DRF is easy to implement one ModelSerializer for each model. But what if I want to serialize visited_places as a InheritanceQueryset?
It would be great if I could invoke the serializer correspondent to the instance type e.g. Restaurant would be represented with RestaurantSerializer whereas Bar with BarSerializer.
1