bjorntheart commented on 30 May 2017 â€¢
edited
Checklist
I have verified that that issue exists against the master branch of Django REST framework.
I have searched for similar issues in both open and closed tickets and cannot find a duplicate.
This is not a usage question. (Those should be directed to the discussion group instead.)
This cannot be dealt with as a third party library. (We prefer new functionality to be in the form of third party libraries where possible.)
I have reduced the issue to the simplest possible case.
I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)
Steps to reproduce
When I add the nested serializer to news in my NewsSourceSerializer and add the fields 'news' code is when the error occurs.
class NewsSourceSerializer(serializers.ModelSerializer):
    news = NewsItemSerializer(many=True, read_only=True)

    class Meta:
        model = NewsSource
        fields = ('source_url', 'type', 'third_party_id', 'refresh_rate', 'last_modified', 'news')
Expected behavior
HTTP/1.0 200 OK
Allow: GET, POST, HEAD, OPTIONS
Content-Length: 259
Content-Type: application/json
Date: Tue, 30 May 2017 10:27:18 GMT
Server: WSGIServer/0.2 CPython/3.6.1
Vary: Accept, Cookie
X-Frame-Options: SAMEORIGIN

{
    "count": 2,
    "next": "http://127.0.0.1:8000/news-sources/?page=2",
    "previous": null,
    "results": [
        {
            "last_modified": "2017-05-30T09:44:40.437112Z",
            "refresh_rate": "00:30:00",
            "source_url": "https://web.facebook.com/balancebooksSA",
            "third_party_id": 123,
            "type": "facebook",
            "news": [
                {<NewsItem>},
                {<NewsItem>}
            ]
        }
    ]
}
Actual behavior
The following TypeError exception occurs.
Exception Type: TypeError at /news-sources/
Exception Value: hasattr(): attribute name must be string
Environment:


Request Method: GET
Request URL: http://127.0.0.1:8000/news-sources/

Django Version: 1.11.1
Python Version: 3.6.1
Installed Applications:
['django.contrib.admin',
 'django.contrib.auth',
 'django.contrib.contenttypes',
 'django.contrib.sessions',
 'django.contrib.messages',
 'django.contrib.staticfiles',
 'rest_framework',
 'watson.api']
Installed Middleware:
['django.middleware.security.SecurityMiddleware',
 'django.contrib.sessions.middleware.SessionMiddleware',
 'django.middleware.common.CommonMiddleware',
 'django.middleware.csrf.CsrfViewMiddleware',
 'django.contrib.auth.middleware.AuthenticationMiddleware',
 'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
 'django.contrib.messages.middleware.MessageMiddleware',
 'django.middleware.clickjacking.XFrameOptionsMiddleware']



Traceback:

File "/Users/bjorn/.virtualenvs/watson-django-rest-api/lib/python3.6/site-packages/django/core/handlers/exception.py" in inner
  41.             response = get_response(request)

File "/Users/bjorn/.virtualenvs/watson-django-rest-api/lib/python3.6/site-packages/django/core/handlers/base.py" in _legacy_get_response
  249.             response = self._get_response(request)

File "/Users/bjorn/.virtualenvs/watson-django-rest-api/lib/python3.6/site-packages/django/core/handlers/base.py" in _get_response
  187.                 response = self.process_exception_by_middleware(e, request)

File "/Users/bjorn/.virtualenvs/watson-django-rest-api/lib/python3.6/site-packages/django/core/handlers/base.py" in _get_response
  185.                 response = wrapped_callback(request, *callback_args, **callback_kwargs)

File "/Users/bjorn/.virtualenvs/watson-django-rest-api/lib/python3.6/site-packages/django/views/decorators/csrf.py" in wrapped_view
  58.         return view_func(*args, **kwargs)

File "/Users/bjorn/.virtualenvs/watson-django-rest-api/lib/python3.6/site-packages/django/views/generic/base.py" in view
  68.             return self.dispatch(request, *args, **kwargs)

File "/Users/bjorn/.virtualenvs/watson-django-rest-api/lib/python3.6/site-packages/rest_framework/views.py" in dispatch
  489.             response = self.handle_exception(exc)

File "/Users/bjorn/.virtualenvs/watson-django-rest-api/lib/python3.6/site-packages/rest_framework/views.py" in handle_exception
  449.             self.raise_uncaught_exception(exc)

File "/Users/bjorn/.virtualenvs/watson-django-rest-api/lib/python3.6/site-packages/rest_framework/views.py" in dispatch
  486.             response = handler(request, *args, **kwargs)

File "/Users/bjorn/.virtualenvs/watson-django-rest-api/lib/python3.6/site-packages/rest_framework/generics.py" in get
  241.         return self.list(request, *args, **kwargs)

File "/Users/bjorn/.virtualenvs/watson-django-rest-api/lib/python3.6/site-packages/rest_framework/mixins.py" in list
  45.             return self.get_paginated_response(serializer.data)

File "/Users/bjorn/.virtualenvs/watson-django-rest-api/lib/python3.6/site-packages/rest_framework/serializers.py" in data
  739.         ret = super(ListSerializer, self).data

File "/Users/bjorn/.virtualenvs/watson-django-rest-api/lib/python3.6/site-packages/rest_framework/serializers.py" in data
  263.                 self._data = self.to_representation(self.instance)

File "/Users/bjorn/.virtualenvs/watson-django-rest-api/lib/python3.6/site-packages/rest_framework/serializers.py" in to_representation
  657.             self.child.to_representation(item) for item in iterable

File "/Users/bjorn/.virtualenvs/watson-django-rest-api/lib/python3.6/site-packages/rest_framework/serializers.py" in <listcomp>
  657.             self.child.to_representation(item) for item in iterable

File "/Users/bjorn/.virtualenvs/watson-django-rest-api/lib/python3.6/site-packages/rest_framework/serializers.py" in to_representation
  501.                 ret[field.field_name] = field.to_representation(attribute)

File "/Users/bjorn/.virtualenvs/watson-django-rest-api/lib/python3.6/site-packages/rest_framework/serializers.py" in to_representation
  657.             self.child.to_representation(item) for item in iterable

File "/Users/bjorn/.virtualenvs/watson-django-rest-api/lib/python3.6/site-packages/rest_framework/serializers.py" in <listcomp>
  657.             self.child.to_representation(item) for item in iterable

File "/Users/bjorn/.virtualenvs/watson-django-rest-api/lib/python3.6/site-packages/rest_framework/serializers.py" in to_representation
  484.         fields = self._readable_fields

File "/Users/bjorn/.virtualenvs/watson-django-rest-api/lib/python3.6/site-packages/django/utils/functional.py" in __get__
  35.         res = instance.__dict__[self.name] = self.func(instance)

File "/Users/bjorn/.virtualenvs/watson-django-rest-api/lib/python3.6/site-packages/rest_framework/serializers.py" in _readable_fields
  378.             field for field in self.fields.values()

File "/Users/bjorn/.virtualenvs/watson-django-rest-api/lib/python3.6/site-packages/rest_framework/serializers.py" in fields
  364.             for key, value in self.get_fields().items():

File "/Users/bjorn/.virtualenvs/watson-django-rest-api/lib/python3.6/site-packages/rest_framework/serializers.py" in get_fields
  1017.                 source, info, model, depth

File "/Users/bjorn/.virtualenvs/watson-django-rest-api/lib/python3.6/site-packages/rest_framework/serializers.py" in build_field
  1145.         elif hasattr(model_class, field_name):

Exception Type: TypeError at /news-sources/
Exception Value: hasattr(): attribute name must be string
Models
class NewsSource(models.Model):
    source_url = models.TextField()
    type = models.CharField(max_length=100)
    third_party_id = models.IntegerField()
    refresh_rate = models.DurationField()
    last_modified = models.DateTimeField(auto_now=True)


class NewsItem(models.Model):
    source = models.ForeignKey(NewsSource, related_name='news')
    name = models.CharField(max_length=255)
    username = models.CharField(max_length=255)
    user_image_url = models.TextField()
    image_url = models.TextField()
    text = models.TextField()
    third_party_id = models.IntegerField()
    third_party_url = models.TextField()
    type = models.CharField(max_length=100)
    created_at = models.DateTimeField(auto_now_add=True)
Serializers
class NewsItemSerializer(serializers.ModelSerializer):
    class Meta:
        model = NewsItem
        fields = ('name', 'username', 'user_image_url', 'image_url', 'text',
                  'third_party_id', 'third_party_url', 'type', 'created_at'),


class NewsSourceSerializer(serializers.ModelSerializer):
    news = NewsItemSerializer(many=True, read_only=True)

    class Meta:
        model = NewsSource
        fields = ('source_url', 'type', 'third_party_id', 'refresh_rate', 'last_modified', 'news')
Views
class NewsItemList(generics.ListCreateAPIView):
    queryset = NewsItem.objects.all()
    serializer_class = NewsItemSerializer
    lookup_url_kwarg = 'item_id'

    def perform_create(self, serializer):
        serializer.save(
            news_source_id=self.kwargs['source_id'])

    def get_queryset(self):
        news_source = self.kwargs['source_id']
        return NewsItem.objects.filter(news_source_id=news_source)


class NewsItemDetail(generics.RetrieveUpdateDestroyAPIView):
    serializer_class = NewsItemSerializer
    lookup_url_kwarg = 'item_id'

    def get_queryset(self):
        news_item = self.kwargs['item_id']
        return NewsItem.objects.filter(id=news_item)


class NewsSourceList(generics.ListCreateAPIView):
    queryset = NewsSource.objects.all()
    serializer_class = NewsSourceSerializer


class NewsSourceDetail(generics.RetrieveUpdateDestroyAPIView):
    queryset = NewsSource.objects.all()
    serializer_class = NewsSourceSerializer
    lookup_url_kwarg = 'source_id'
Urls
urlpatterns = [
    url(r'^news-sources/$', views.NewsSourceList.as_view()),
    url(r'^news-sources/(?P<source_id>[0-9]+)/$', views.NewsSourceDetail.as_view()),
    url(r'^news-sources/(?P<source_id>[0-9]+)/news/$', views.NewsItemList.as_view()),
    url(r'^news-sources/(?P<source_id>[0-9]+)/news/(?P<item_id>[0-9]+)/$', views.NewsItemDetail.as_view())
Migrations
NewsSource
class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='NewsSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_url', models.TextField()),
                ('type', models.CharField(max_length=100)),
                ('third_party_id', models.IntegerField()),
                ('refresh_rate', models.DurationField()),
                ('last_modified', models.DateTimeField(auto_now=True)),
            ],
        ),
    ]
NewsSource Data
def create_news_sources(apps, schema_editor):
    NewsSource = apps.get_model('api', 'NewsSource')

    NewsSource(source_url='http://example.com',
               type='facebook',
               third_party_id=123,
               refresh_rate='00:30:00').save()

    NewsSource(source_url='http://example.com',
               type='facebook',
               third_party_id=321,
               refresh_rate='01:00:00').save()


def delete_news_sources(apps, schema_editor):
    NewsSource = apps.get_model('api', 'NewsSource')

    NewsSource.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(create_news_sources, delete_news_sources)
    ]
NewsItem
class Migration(migrations.Migration):

    dependencies = [
        ('api', '0002_auto_20170530_0944'),
    ]

    operations = [
        migrations.CreateModel(
            name='NewsItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('username', models.CharField(max_length=255)),
                ('user_image_url', models.TextField()),
                ('image_url', models.TextField()),
                ('text', models.TextField()),
                ('third_party_id', models.IntegerField()),
                ('third_party_url', models.TextField()),
                ('type', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='news', to='api.NewsSource')),
            ],
        ),
    ]
NewsItem Data
def create_news_items(apps, schema_editor):
    NewsItem = apps.get_model('api', 'NewsItem')

    NewsItem(name='Blog Post 1',
             username='@johndoe',
             user_image_url='https://placehold.it/140x140',
             image_url='https://placehold.it/350x150',
             text='Lorem ipsum dolor sit amet, consectetur adipiscing elit. Hic ambiguo ludimur. '
                  'Quae est igitur causa istarum angustiarum? Quod quidem iam fit etiam in Academia. '
                  'Zenonis est, inquam, hoc Stoici.',
             third_party_id=456,
             third_party_url='http://example.com/blog-post-1',
             source_id=1,
             type='facebook').save()

    NewsItem(name='Blog Post 2',
             username='@janedoe',
             user_image_url='https://placehold.it/140x140',
             image_url='https://placehold.it/350x150',
             text='Lorem ipsum dolor sit amet, consectetur adipiscing elit. Hic ambiguo ludimur. '
                  'Quae est igitur causa istarum angustiarum? Quod quidem iam fit etiam in Academia. '
                  'Zenonis est, inquam, hoc Stoici.',
             third_party_id=654,
             third_party_url='http://example.com/blog-post-2',
             source_id=2,
             type='facebook').save()


def delete_news_items(apps, schema_editor):
    NewsItem = apps.get_model('api', 'NewsItem')

    NewsItem.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0003_newsitem'),
    ]

    operations = [
        migrations.RunPython(create_news_items, delete_news_items)
    ]