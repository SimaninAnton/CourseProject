Ibrokola commented on 9 Mar 2019
Checklist
I have verified that that issue exists against the master branch of Django REST framework.
I have searched for similar issues in both open and closed tickets and cannot find a duplicate.
This is not a usage question. (Those should be directed to the discussion group instead.)
This cannot be dealt with as a third party library. (We prefer new functionality to be in the form of third party libraries where possible.)
I have reduced the issue to the simplest possible case.
I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)
Steps to reproduce
class SomeModel(models.Model):
    a_fk = models.ForeignKey(ForeignModel1, null=True, on_delete=models.CASCADE)
    b_fk = models.ForeignKey(ForeignModel2, null=True, on_delete=models.CASCADE)

class SomeSerializer(serializers.ModelSerializer):
    a_fk = serializers.PrimaryKeyRelatedField(queryset=ForeignModel1.objects.all())
    class Meta:
        model = SomeModel
        fields = ['a_fk', 'b_fk']

    print(a_fk) gives PrimaryKeyRelatedField(queryset=[])
Expected behavior
{
   "a_fk":[
               obj.pk,
               obj.pk
    ],
   "b_fk": [
               obj.pk,
               obj.pk
    ]
}
Actual behavior
{
   "a_fk": null,
   "b_fk": null
}
The ways I have seen this solved is with reverse nested relationships, however this use case doesn't require reverse nested relationship. I just want to be able to create a select input for a serialized object of those foreignkeys like the it does on the browsable API.